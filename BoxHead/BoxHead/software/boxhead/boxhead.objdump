
boxhead.elf:     file format elf32-littlenios2
boxhead.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001498c memsz 0x0001498c flags r-x
    LOAD off    0x000159ac vaddr 0x100149ac paddr 0x100176a4 align 2**12
         filesz 0x00002cf8 memsz 0x00002cf8 flags rw-
    LOAD off    0x0001939c vaddr 0x1001a39c paddr 0x1001a39c align 2**12
         filesz 0x00000000 memsz 0x0000095c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013b90  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bec  10013dc0  10013dc0  00014dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002cf8  100149ac  100176a4  000159ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000095c  1001a39c  1001a39c  0001939c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000186a4  2**0
                  CONTENTS
  7 .sdram        00000000  1001acf8  1001acf8  000186a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000186a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f90  00000000  00000000  000186c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000246ca  00000000  00000000  00019658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000094b0  00000000  00000000  0003dd22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bea0  00000000  00000000  000471d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026b4  00000000  00000000  00053074  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003ed2  00000000  00000000  00055728  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  000595fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00070e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001900  00000000  00000000  00070ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000763aa  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000763ad  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000763b9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000763ba  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000763bb  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000763bf  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000763c3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000763c7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000763d2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000763dd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000763e8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  000763f3  2**0
                  CONTENTS, READONLY
 30 .jdi          0000554d  00000000  00000000  00076420  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007d989  00000000  00000000  0007b96d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10013dc0 l    d  .rodata	00000000 .rodata
100149ac l    d  .rwdata	00000000 .rwdata
1001a39c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001acf8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../boxhead_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 game_logic.c
100149ac l     O .rwdata	00000020 ZOMBIE_WALK_WIDTH
100149cc l     O .rwdata	00000020 ZOMBIE_WALK_HEIGHT
100149ec l     O .rwdata	00000020 ZOMBIE_WALK_FLIP_X
10014a0c l     O .rwdata	00000100 ZOMBIE_WALK_OFFSET
10014b0c l     O .rwdata	00000020 ZOMBIE_ATTACK_WIDTH
10014b2c l     O .rwdata	00000020 ZOMBIE_ATTACK_HEIGHT
10014b4c l     O .rwdata	00000020 ZOMBIE_ATTACK_FLIP_X
10014b6c l     O .rwdata	00000300 ZOMBIE_ATTACK_OFFSET
10014e6c l     O .rwdata	00000020 PLAYER_WALK_WIDTH
10014e8c l     O .rwdata	00000020 PLAYER_WALK_HEIGHT
1001a3f8 l     O .bss	00000020 PLAYER_WALK_FLIP_X
10014eac l     O .rwdata	00000100 PLAYER_WALK_OFFSET
1001a418 l     O .bss	000004b0 grid
1001a8c8 l     O .bss	00000280 zombie
1001ab48 l     O .bss	00000024 player_1
1001ab6c l     O .bss	00000024 player_2
1001a39c l     O .bss	00000004 zombie_appear_counter
1001a3a0 l     O .bss	00000004 cur_zombie_counter
10013dc0 l     O .rodata	00000020 DX
10013de0 l     O .rodata	00000020 DY
1001a3a4 l     O .bss	00000004 add_zombie_counter.3172
00000000 l    df *ABS*	00000000 graphic_engine.c
1001a3a8 l     O .bss	00000004 current_frame.1610
00000000 l    df *ABS*	00000000 resource.c
10014fac l     O .rwdata	00000020 ZOMBIE_WALK_WIDTH
10014fcc l     O .rwdata	00000020 ZOMBIE_WALK_HEIGHT
10014fec l     O .rwdata	00000020 ZOMBIE_WALK_FLIP_X
1001500c l     O .rwdata	00000100 ZOMBIE_WALK_OFFSET
1001510c l     O .rwdata	00000020 ZOMBIE_ATTACK_WIDTH
1001512c l     O .rwdata	00000020 ZOMBIE_ATTACK_HEIGHT
1001514c l     O .rwdata	00000020 ZOMBIE_ATTACK_FLIP_X
1001516c l     O .rwdata	00000300 ZOMBIE_ATTACK_OFFSET
1001546c l     O .rwdata	00000020 PLAYER_WALK_WIDTH
1001548c l     O .rwdata	00000020 PLAYER_WALK_HEIGHT
1001ab90 l     O .bss	00000020 PLAYER_WALK_FLIP_X
100154ac l     O .rwdata	00000100 PLAYER_WALK_OFFSET
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 main.c
100155ac l     O .rwdata	00000020 ZOMBIE_WALK_WIDTH
100155cc l     O .rwdata	00000020 ZOMBIE_WALK_HEIGHT
100155ec l     O .rwdata	00000020 ZOMBIE_WALK_FLIP_X
1001560c l     O .rwdata	00000100 ZOMBIE_WALK_OFFSET
1001570c l     O .rwdata	00000020 ZOMBIE_ATTACK_WIDTH
1001572c l     O .rwdata	00000020 ZOMBIE_ATTACK_HEIGHT
1001574c l     O .rwdata	00000020 ZOMBIE_ATTACK_FLIP_X
1001576c l     O .rwdata	00000300 ZOMBIE_ATTACK_OFFSET
10015a6c l     O .rwdata	00000020 PLAYER_WALK_WIDTH
10015a8c l     O .rwdata	00000020 PLAYER_WALK_HEIGHT
1001abb0 l     O .bss	00000020 PLAYER_WALK_FLIP_X
10015aac l     O .rwdata	00000100 PLAYER_WALK_OFFSET
1001765c l     O .rwdata	00000004 DKEY_KEYCODE_1
10017660 l     O .rwdata	00000004 DKEY_KEYCODE_2
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100146f2 l     O .rodata	00000010 zeroes.4404
10006b58 l     F .text	000000bc __sbprintf
10014702 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10006d68 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100088c0 l     F .text	00000008 __fp_unlock
100088d4 l     F .text	0000019c __sinit.part.1
10008a70 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10015bac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10015ff0 l     O .rwdata	00000020 lc_ctype_charset
10015fd0 l     O .rwdata	00000020 lc_message_charset
10016010 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014734 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000bf44 l     F .text	000000fc __sprint_r.part.0
10014858 l     O .rodata	00000010 zeroes.4349
1000d580 l     F .text	000000bc __sbprintf
10014868 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
100115a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100116b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100116e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100117d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100118bc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100119a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10011b84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10017694 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10011e28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10011f64 l     F .text	00000034 alt_dev_reg
100165f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012240 l     F .text	0000020c altera_avalon_jtag_uart_irq
1001244c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10012d28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013188 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100132e8 l     F .text	0000003c alt_get_errno
10013324 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1001a3f4 g     O .bss	00000004 alt_instruction_exception_handler
1000b588 g     F .text	00000074 _mprec_log10
1000b674 g     F .text	0000008c __any_on
1000db34 g     F .text	00000054 _isatty_r
10014740 g     O .rodata	00000028 __mprec_tinytens
10011ac0 g     F .text	0000007c alt_main
100046f4 g     F .text	000000c0 _puts_r
1001abf8 g     O .bss	00000100 alt_irq
1000db88 g     F .text	00000060 _lseek_r
100176a4 g       *ABS*	00000000 __flash_rwdata_start
1000ff78 g     F .text	00000088 .hidden __eqdf2
1001acf8 g       *ABS*	00000000 __alt_heap_start
100046b8 g     F .text	0000003c printf
1000dda0 g     F .text	0000009c _wcrtomb_r
1001a3b4 g     O .bss	00000002 usb_ctl_val
1000be04 g     F .text	0000005c __sseek
10008c20 g     F .text	00000010 __sinit
1000dc48 g     F .text	00000140 __swbuf_r
100096f4 g     F .text	0000007c _setlocale_r
10008a78 g     F .text	00000078 __sfmoreglue
10011b60 g     F .text	00000024 __malloc_unlock
1000a3c4 g     F .text	0000015c memmove
10008c08 g     F .text	00000018 _cleanup
1000a648 g     F .text	000000a8 _Balloc
10010000 g     F .text	000000dc .hidden __gtdf2
10013710 g     F .text	00000024 altera_nios2_gen2_irq_init
10004284 g     F .text	00000080 usb_print_mem
10000000 g     F .entry	0000000c __reset
10013f28 g     O .rodata	00000020 zombie_width
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000dad8 g     F .text	0000005c _fstat_r
10004304 g     F .text	00000148 keys_to_direction
1001a3d8 g     O .bss	00000004 errno
1000bd80 g     F .text	00000008 __seofread
1001a3e0 g     O .bss	00000004 alt_argv
1001f658 g       *ABS*	00000000 _gp
10011df8 g     F .text	00000030 usleep
100022c4 g     F .text	00000088 io_init
10016478 g     O .rwdata	00000180 alt_fd_list
10013734 g     F .text	00000090 alt_find_dev
1000a27c g     F .text	00000148 memcpy
10003528 g     F .text	000001d8 usb_get_device_desc2
100088c8 g     F .text	0000000c _cleanup_r
100113b8 g     F .text	000000dc .hidden __floatsidf
1001326c g     F .text	0000007c alt_io_redirect
1001a3b6 g     O .bss	00000001 data_size
100100dc g     F .text	000000f4 .hidden __ltdf2
10013dc0 g       *ABS*	00000000 __DTOR_END__
100047b4 g     F .text	00000014 puts
10013990 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000bc64 g     F .text	00000074 __fpclassifyd
1000b4e4 g     F .text	000000a4 __ratio
1000d564 g     F .text	0000001c __vfiprintf_internal
10012644 g     F .text	0000021c altera_avalon_jtag_uart_read
10004688 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000ec40 g     F .text	00000064 .hidden __udivsi3
10002424 g     F .text	00000b00 keyboard_init
10011810 g     F .text	000000ac isatty
10014790 g     O .rodata	000000c8 __mprec_tens
10009770 g     F .text	0000000c __locale_charset
1001a3d4 g     O .bss	00000004 __malloc_top_pad
1001766c g     O .rwdata	00000004 __mb_cur_max
100097a0 g     F .text	0000000c _localeconv_r
100004d4 g     F .text	000003b0 try_move_zombie
1000aa7c g     F .text	0000003c __i2b
100090a4 g     F .text	000004c8 __sfvwrite_r
1001a3b8 g     O .bss	00000002 intStat
1000bcd8 g     F .text	00000054 _sbrk_r
1000322c g     F .text	000000b4 usb_soft_reset
1000dbe8 g     F .text	00000060 _read_r
1001768c g     O .rwdata	00000004 alt_max_fd
1000d7cc g     F .text	000000f0 _fclose_r
10008890 g     F .text	00000030 fflush
1001a3d0 g     O .bss	00000004 __malloc_max_sbrked_mem
10004204 g     F .text	00000080 usb_get_retry_cnt
1000ecfc g     F .text	000008ac .hidden __adddf3
1000b28c g     F .text	0000010c __b2d
1000e584 g     F .text	000005c4 .hidden __umoddi3
100119e4 g     F .text	000000dc lseek
10000d88 g     F .text	00000310 try_move_player
10017664 g     O .rwdata	00000004 _global_impure_ptr
1000b700 g     F .text	00000564 _realloc_r
1001acf8 g       *ABS*	00000000 __bss_end
10013098 g     F .text	000000f0 alt_iic_isr_register
10013608 g     F .text	00000108 alt_tick
1000df88 g     F .text	000005fc .hidden __udivdi3
1000da34 g     F .text	00000024 _fputwc_r
10014768 g     O .rodata	00000028 __mprec_bigtens
1000a860 g     F .text	00000104 __s2b
10011494 g     F .text	000000a8 .hidden __floatunsidf
1000afcc g     F .text	00000060 __mcmp
10008c40 g     F .text	00000018 __fp_lock_all
1001304c g     F .text	0000004c alt_ic_irq_enabled
1001356c g     F .text	0000009c alt_alarm_stop
1001a3e8 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10016450 g     O .rwdata	00000028 alt_dev_null
10001874 g     F .text	000003f8 draw_zombie
10012d08 g     F .text	00000020 alt_dcache_flush_all
1000a964 g     F .text	00000068 __hi0bits
10011338 g     F .text	00000080 .hidden __fixdfsi
100176a4 g       *ABS*	00000000 __ram_rwdata_end
10017684 g     O .rwdata	00000008 alt_dev_list
10011e64 g     F .text	00000100 write
10017658 g     O .rwdata	00000004 ENGINE_REGS
100149ac g       *ABS*	00000000 __ram_rodata_end
1001171c g     F .text	000000b8 fstat
1000234c g     F .text	00000070 io_write
100100dc g     F .text	000000f4 .hidden __ledf2
1000ad44 g     F .text	00000140 __pow5mult
1000c058 g     F .text	0000150c ___vfiprintf_internal_r
1001a3c8 g     O .bss	00000004 __nlocale_changed
1000eca4 g     F .text	00000058 .hidden __umodsi3
1001acf8 g       *ABS*	00000000 end
1001a3ac g     O .bss	00000002 ctl_reg
10012180 g     F .text	000000c0 altera_avalon_jtag_uart_init
10001754 g     F .text	00000120 try_add_zombie
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10013dc0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1001153c g     F .text	00000064 .hidden __clzsi2
10012860 g     F .text	00000224 altera_avalon_jtag_uart_write
10002280 g     F .text	00000044 wait_for_next_frame
10008c30 g     F .text	00000004 __sfp_lock_acquire
1000a198 g     F .text	000000e4 memchr
10004860 g     F .text	000022dc ___vfprintf_internal_r
10008d94 g     F .text	00000310 _free_r
1000977c g     F .text	00000010 __locale_mb_cur_max
10013c0c g     F .text	00000180 __call_exitprocs
1001a3c4 g     O .bss	00000004 __mlocale_changed
10017670 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100030f8 g     F .text	00000098 keyboard_hot_plugged
1001a3ec g     O .bss	00000004 _alt_tick_rate
1000ae84 g     F .text	00000148 __lshift
1001a3f0 g     O .bss	00000004 _alt_nticks
10011bc0 g     F .text	00000104 read
10011fd0 g     F .text	0000004c alt_sys_init
10013af4 g     F .text	00000118 __register_exitproc
1000aab8 g     F .text	0000028c __multiply
100124ec g     F .text	00000068 altera_avalon_jtag_uart_close
10004660 g     F .text	00000028 .hidden __mulsi3
100149ac g       *ABS*	00000000 __ram_rwdata_start
10013dc0 g       *ABS*	00000000 __ram_rodata_start
1001abd0 g     O .bss	00000028 __malloc_current_mallinfo
1000b398 g     F .text	0000014c __d2b
10013f68 g     O .rodata	00000020 zombie_flip_x
1001201c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100138cc g     F .text	000000c4 alt_get_fd
10012bb0 g     F .text	00000158 alt_busy_sleep
1000d69c g     F .text	00000054 _close_r
10013a78 g     F .text	0000007c memcmp
100120dc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001acf8 g       *ABS*	00000000 __alt_stack_base
1001212c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10003cf8 g     F .text	00000148 usb_get_hid_desc
10006c14 g     F .text	00000154 __swsetup_r
1000f5a8 g     F .text	000009d0 .hidden __divdf3
10008af0 g     F .text	00000118 __sfp
1000b5fc g     F .text	00000078 __copybits
10016048 g     O .rwdata	00000408 __malloc_av_
10008c3c g     F .text	00000004 __sinit_lock_release
100101d0 g     F .text	0000086c .hidden __muldf3
1000bd2c g     F .text	00000054 __sread
100137c4 g     F .text	00000108 alt_find_file
10012d64 g     F .text	000000a4 alt_dev_llist_insert
10011b3c g     F .text	00000024 __malloc_lock
10011d48 g     F .text	000000b0 sbrk
10008834 g     F .text	0000005c _fflush_r
1000d6f0 g     F .text	000000dc _calloc_r
1001a3ba g     O .bss	00000001 hot_plug_count
1001a39c g       *ABS*	00000000 __bss_start
10000884 g     F .text	00000504 update_zombie
1000a520 g     F .text	00000128 memset
1000444c g     F .text	00000214 main
1001a3e4 g     O .bss	00000004 alt_envp
1001a3cc g     O .bss	00000004 __malloc_max_total_mem
1001207c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000dd88 g     F .text	00000018 __swbuf
1000be60 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000d8bc g     F .text	00000014 fclose
10006f90 g     F .text	00001688 _dtoa_r
1000998c g     F .text	0000080c _malloc_r
1000defc g     F .text	00000030 __ascii_wctomb
10017690 g     O .rwdata	00000004 alt_errno
10003700 g     F .text	00000190 usb_get_config_desc1
1000956c g     F .text	000000c4 _fwalk
1000eb48 g     F .text	00000084 .hidden __divsi3
10008c70 g     F .text	00000124 _malloc_trim_r
10013dc0 g       *ABS*	00000000 __CTOR_END__
10002f24 g     F .text	000001d4 keyboard_fetch
1000be68 g     F .text	000000dc strcmp
10003e40 g     F .text	00000340 usb_get_report_desc
10013dc0 g       *ABS*	00000000 __flash_rodata_start
10013dc0 g       *ABS*	00000000 __DTOR_LIST__
10001e7c g     F .text	000002c4 refresh
10013f08 g     O .rodata	00000020 zombie_offset
1000ff78 g     F .text	00000088 .hidden __nedf2
10011f98 g     F .text	00000038 alt_irq_init
10011cc4 g     F .text	00000084 alt_release_fd
10014878 g     O .rodata	00000100 .hidden __clz_tab
1001a3c0 g     O .bss	00000004 _PathLocale
10013a2c g     F .text	00000014 atexit
1000d63c g     F .text	00000060 _write_r
10002140 g     F .text	00000044 graphic_engine_reset
100097ac g     F .text	00000018 setlocale
10017668 g     O .rwdata	00000004 _impure_ptr
10004180 g     F .text	00000084 usb_wait_td_list_done
1001a3dc g     O .bss	00000004 alt_argc
10008618 g     F .text	0000021c __sflush_r
10012e68 g     F .text	00000060 _do_dtors
10009798 g     F .text	00000008 __locale_cjk_lang
10003890 g     F .text	00000268 usb_get_config_desc2
100023bc g     F .text	00000068 io_read
10001c6c g     F .text	00000210 draw_player
10000020 g       .exceptions	00000000 alt_irq_entry
1000b228 g     F .text	00000064 __ulp
10008c58 g     F .text	00000018 __fp_unlock_all
1001767c g     O .rwdata	00000008 alt_fs_list
10003bf8 g     F .text	00000100 usb_class_request
10000020 g       *ABS*	00000000 __ram_exceptions_start
100097c4 g     F .text	0000000c localeconv
10012ee8 g     F .text	00000050 alt_ic_isr_register
10001098 g     F .text	000003f4 update_player
100176a4 g       *ABS*	00000000 _edata
1001acf8 g       *ABS*	00000000 _end
1000148c g     F .text	000002c8 init_game
1000d8d0 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10012554 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1001a3bc g     O .bss	00000002 code
1001a3b2 g     O .bss	00000001 fetch_toggle
10012fc0 g     F .text	0000008c alt_ic_irq_disable
1000bd88 g     F .text	0000007c __swrite
10017674 g     O .rwdata	00000004 __malloc_trim_threshold
100033e0 g     F .text	00000148 usb_get_device_desc1
1000978c g     F .text	0000000c __locale_msgcharset
1001a3b0 g     O .bss	00000002 fs_device
10013a40 g     F .text	00000038 exit
10009630 g     F .text	000000c4 _fwalk_reent
1000b02c g     F .text	000001fc __mdiff
1000ebcc g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10008c34 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10003190 g     F .text	00000058 usb_write
100032e0 g     F .text	00000100 usb_set_address
10013f48 g     O .rodata	00000020 zombie_height
10002184 g     F .text	000000fc draw
10013d8c g     F .text	00000034 _exit
10012a84 g     F .text	0000012c alt_alarm_start
1000026c g     F .text	00000268 calc_zombie_direction
100097d0 g     F .text	000001bc __smakebuf_r
100047c8 g     F .text	00000098 strlen
10013410 g     F .text	0000015c open
10010000 g     F .text	000000dc .hidden __gedf2
10003af8 g     F .text	00000100 usb_set_config
10017678 g     O .rwdata	00000004 __wctomb
1000c040 g     F .text	00000018 __sprint_r
10012ec8 g     F .text	00000020 alt_icache_flush_all
10017698 g     O .rwdata	00000004 alt_priority_mask
10012f38 g     F .text	00000088 alt_ic_irq_enable
10006b3c g     F .text	0000001c __vfprintf_internal
1000df2c g     F .text	0000005c _wctomb_r
100031e8 g     F .text	00000044 usb_read
10010a3c g     F .text	000008fc .hidden __subdf3
1000a9cc g     F .text	000000b0 __lo0bits
1001769c g     O .rwdata	00000008 alt_alarm_list
10012e08 g     F .text	00000060 _do_ctors
1001a3ae g     O .bss	00000002 no_device
1000de3c g     F .text	000000c0 wcrtomb
100115dc g     F .text	000000d8 close
10011924 g     F .text	00000084 alt_load
1000da58 g     F .text	00000080 fputwc
10008c38 g     F .text	00000004 __sinit_lock_acquire
1000a718 g     F .text	00000148 __multadd
1000a6f0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10aafe04 	addi	r2,r2,-21512
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10aafe04 	addi	r2,r2,-21512
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0ab6717 	ldw	r2,-21092(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0ab6717 	ldw	r2,-21092(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6bd9614 	ori	gp,gp,63064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10a8e714 	ori	r2,r2,41884

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18eb3e14 	ori	r3,r3,44280

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	00119240 	call	10011924 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0011ac00 	call	10011ac0 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <calc_zombie_direction>:
// };
// static const int PLAYER_HIT_FRAME_MOVEMENT[PLAYER_HIT_FRONT_FRAME_COUNT] = {
//         12, 10, 8, 7, 6, 5, 4, 3, 2, 1, 1
// };

int calc_zombie_direction(zombie_t *z) {
1000026c:	defff404 	addi	sp,sp,-48
10000270:	dfc00b15 	stw	ra,44(sp)
10000274:	df000a15 	stw	fp,40(sp)
10000278:	dc400915 	stw	r17,36(sp)
1000027c:	dc000815 	stw	r16,32(sp)
10000280:	df000a04 	addi	fp,sp,40
10000284:	e13ffd15 	stw	r4,-12(fp)
    int closer;

    // Check for existing zombies
    // All delta distances are the relevant distance with respect to the player

    delta_x1 = TO_GRID(player_1.x) - TO_GRID(z->x);
10000288:	008400b4 	movhi	r2,4098
1000028c:	10aad204 	addi	r2,r2,-21688
10000290:	10800017 	ldw	r2,0(r2)
10000294:	1000010e 	bge	r2,zero,1000029c <calc_zombie_direction+0x30>
10000298:	108007c4 	addi	r2,r2,31
1000029c:	1005d17a 	srai	r2,r2,5
100002a0:	1007883a 	mov	r3,r2
100002a4:	e0bffd17 	ldw	r2,-12(fp)
100002a8:	10800117 	ldw	r2,4(r2)
100002ac:	1000010e 	bge	r2,zero,100002b4 <calc_zombie_direction+0x48>
100002b0:	108007c4 	addi	r2,r2,31
100002b4:	1005d17a 	srai	r2,r2,5
100002b8:	1885c83a 	sub	r2,r3,r2
100002bc:	e0bff915 	stw	r2,-28(fp)
    delta_y1 = TO_GRID(player_1.y) - TO_GRID(z->y);
100002c0:	008400b4 	movhi	r2,4098
100002c4:	10aad204 	addi	r2,r2,-21688
100002c8:	10800117 	ldw	r2,4(r2)
100002cc:	1000010e 	bge	r2,zero,100002d4 <calc_zombie_direction+0x68>
100002d0:	108007c4 	addi	r2,r2,31
100002d4:	1005d17a 	srai	r2,r2,5
100002d8:	1007883a 	mov	r3,r2
100002dc:	e0bffd17 	ldw	r2,-12(fp)
100002e0:	10800217 	ldw	r2,8(r2)
100002e4:	1000010e 	bge	r2,zero,100002ec <calc_zombie_direction+0x80>
100002e8:	108007c4 	addi	r2,r2,31
100002ec:	1005d17a 	srai	r2,r2,5
100002f0:	1885c83a 	sub	r2,r3,r2
100002f4:	e0bffa15 	stw	r2,-24(fp)
    delta_x2 = TO_GRID(player_2.x) - TO_GRID(z->x);
100002f8:	008400b4 	movhi	r2,4098
100002fc:	10aadb04 	addi	r2,r2,-21652
10000300:	10800017 	ldw	r2,0(r2)
10000304:	1000010e 	bge	r2,zero,1000030c <calc_zombie_direction+0xa0>
10000308:	108007c4 	addi	r2,r2,31
1000030c:	1005d17a 	srai	r2,r2,5
10000310:	1007883a 	mov	r3,r2
10000314:	e0bffd17 	ldw	r2,-12(fp)
10000318:	10800117 	ldw	r2,4(r2)
1000031c:	1000010e 	bge	r2,zero,10000324 <calc_zombie_direction+0xb8>
10000320:	108007c4 	addi	r2,r2,31
10000324:	1005d17a 	srai	r2,r2,5
10000328:	1885c83a 	sub	r2,r3,r2
1000032c:	e0bffb15 	stw	r2,-20(fp)
    delta_y2 = TO_GRID(player_2.y) - TO_GRID(z->y);
10000330:	008400b4 	movhi	r2,4098
10000334:	10aadb04 	addi	r2,r2,-21652
10000338:	10800117 	ldw	r2,4(r2)
1000033c:	1000010e 	bge	r2,zero,10000344 <calc_zombie_direction+0xd8>
10000340:	108007c4 	addi	r2,r2,31
10000344:	1005d17a 	srai	r2,r2,5
10000348:	1007883a 	mov	r3,r2
1000034c:	e0bffd17 	ldw	r2,-12(fp)
10000350:	10800217 	ldw	r2,8(r2)
10000354:	1000010e 	bge	r2,zero,1000035c <calc_zombie_direction+0xf0>
10000358:	108007c4 	addi	r2,r2,31
1000035c:	1005d17a 	srai	r2,r2,5
10000360:	1885c83a 	sub	r2,r3,r2
10000364:	e0bffc15 	stw	r2,-16(fp)

    if (player_1.enable == 0) {
10000368:	008400b4 	movhi	r2,4098
1000036c:	10aad204 	addi	r2,r2,-21688
10000370:	10800417 	ldw	r2,16(r2)
10000374:	1000031e 	bne	r2,zero,10000384 <calc_zombie_direction+0x118>
        closer = 2;
10000378:	00800084 	movi	r2,2
1000037c:	e0bff815 	stw	r2,-32(fp)
10000380:	00001d06 	br	100003f8 <calc_zombie_direction+0x18c>
    } else if (player_2.enable == 0) {
10000384:	008400b4 	movhi	r2,4098
10000388:	10aadb04 	addi	r2,r2,-21652
1000038c:	10800417 	ldw	r2,16(r2)
10000390:	1000031e 	bne	r2,zero,100003a0 <calc_zombie_direction+0x134>
        closer = 1;
10000394:	00800044 	movi	r2,1
10000398:	e0bff815 	stw	r2,-32(fp)
1000039c:	00001606 	br	100003f8 <calc_zombie_direction+0x18c>
    } else {
        if (delta_x1 * delta_x1 + delta_y1 * delta_y1 < delta_x2 * delta_x2 + delta_y2 * delta_y2) {
100003a0:	e17ff917 	ldw	r5,-28(fp)
100003a4:	e13ff917 	ldw	r4,-28(fp)
100003a8:	00046600 	call	10004660 <__mulsi3>
100003ac:	1021883a 	mov	r16,r2
100003b0:	e17ffa17 	ldw	r5,-24(fp)
100003b4:	e13ffa17 	ldw	r4,-24(fp)
100003b8:	00046600 	call	10004660 <__mulsi3>
100003bc:	80a1883a 	add	r16,r16,r2
100003c0:	e17ffb17 	ldw	r5,-20(fp)
100003c4:	e13ffb17 	ldw	r4,-20(fp)
100003c8:	00046600 	call	10004660 <__mulsi3>
100003cc:	1023883a 	mov	r17,r2
100003d0:	e17ffc17 	ldw	r5,-16(fp)
100003d4:	e13ffc17 	ldw	r4,-16(fp)
100003d8:	00046600 	call	10004660 <__mulsi3>
100003dc:	8885883a 	add	r2,r17,r2
100003e0:	8080030e 	bge	r16,r2,100003f0 <calc_zombie_direction+0x184>
            closer = 1;
100003e4:	00800044 	movi	r2,1
100003e8:	e0bff815 	stw	r2,-32(fp)
100003ec:	00000206 	br	100003f8 <calc_zombie_direction+0x18c>
        } else {
            closer = 2;
100003f0:	00800084 	movi	r2,2
100003f4:	e0bff815 	stw	r2,-32(fp)
        }
    }

    if (closer == 1) {
100003f8:	e0bff817 	ldw	r2,-32(fp)
100003fc:	10800058 	cmpnei	r2,r2,1
10000400:	1000051e 	bne	r2,zero,10000418 <calc_zombie_direction+0x1ac>
        delta_x = delta_x1;
10000404:	e0bff917 	ldw	r2,-28(fp)
10000408:	e0bff615 	stw	r2,-40(fp)
        delta_y = delta_y1;
1000040c:	e0bffa17 	ldw	r2,-24(fp)
10000410:	e0bff715 	stw	r2,-36(fp)
10000414:	00000406 	br	10000428 <calc_zombie_direction+0x1bc>
    } else {
        delta_x = delta_x2;
10000418:	e0bffb17 	ldw	r2,-20(fp)
1000041c:	e0bff615 	stw	r2,-40(fp)
        delta_y = delta_y2;
10000420:	e0bffc17 	ldw	r2,-16(fp)
10000424:	e0bff715 	stw	r2,-36(fp)
    }

    if (delta_x > 0) {
10000428:	e0bff617 	ldw	r2,-40(fp)
1000042c:	00800a0e 	bge	zero,r2,10000458 <calc_zombie_direction+0x1ec>
        if (delta_y > 0) return 3;
10000430:	e0bff717 	ldw	r2,-36(fp)
10000434:	0080020e 	bge	zero,r2,10000440 <calc_zombie_direction+0x1d4>
10000438:	008000c4 	movi	r2,3
1000043c:	00001e06 	br	100004b8 <calc_zombie_direction+0x24c>
        else if (delta_y < 0) return 1;
10000440:	e0bff717 	ldw	r2,-36(fp)
10000444:	1000020e 	bge	r2,zero,10000450 <calc_zombie_direction+0x1e4>
10000448:	00800044 	movi	r2,1
1000044c:	00001a06 	br	100004b8 <calc_zombie_direction+0x24c>
        else return 2;
10000450:	00800084 	movi	r2,2
10000454:	00001806 	br	100004b8 <calc_zombie_direction+0x24c>
    } else if (delta_x < 0) {
10000458:	e0bff617 	ldw	r2,-40(fp)
1000045c:	10000a0e 	bge	r2,zero,10000488 <calc_zombie_direction+0x21c>
        if (delta_y > 0) return 5;
10000460:	e0bff717 	ldw	r2,-36(fp)
10000464:	0080020e 	bge	zero,r2,10000470 <calc_zombie_direction+0x204>
10000468:	00800144 	movi	r2,5
1000046c:	00001206 	br	100004b8 <calc_zombie_direction+0x24c>
        else if (delta_y < 0) return 7;
10000470:	e0bff717 	ldw	r2,-36(fp)
10000474:	1000020e 	bge	r2,zero,10000480 <calc_zombie_direction+0x214>
10000478:	008001c4 	movi	r2,7
1000047c:	00000e06 	br	100004b8 <calc_zombie_direction+0x24c>
        else return 6;
10000480:	00800184 	movi	r2,6
10000484:	00000c06 	br	100004b8 <calc_zombie_direction+0x24c>
    } else {
        if (delta_y > 0) return 4;
10000488:	e0bff717 	ldw	r2,-36(fp)
1000048c:	0080020e 	bge	zero,r2,10000498 <calc_zombie_direction+0x22c>
10000490:	00800104 	movi	r2,4
10000494:	00000806 	br	100004b8 <calc_zombie_direction+0x24c>
        else if (delta_y < 0) return 0;
10000498:	e0bff717 	ldw	r2,-36(fp)
1000049c:	1000020e 	bge	r2,zero,100004a8 <calc_zombie_direction+0x23c>
100004a0:	0005883a 	mov	r2,zero
100004a4:	00000406 	br	100004b8 <calc_zombie_direction+0x24c>
        else {
            printf("CENTERED DIRECTION!\n");
100004a8:	01040074 	movhi	r4,4097
100004ac:	210f8004 	addi	r4,r4,15872
100004b0:	00047b40 	call	100047b4 <puts>
            return 0;
100004b4:	0005883a 	mov	r2,zero
        }
    }
}
100004b8:	e6fffe04 	addi	sp,fp,-8
100004bc:	dfc00317 	ldw	ra,12(sp)
100004c0:	df000217 	ldw	fp,8(sp)
100004c4:	dc400117 	ldw	r17,4(sp)
100004c8:	dc000017 	ldw	r16,0(sp)
100004cc:	dec00404 	addi	sp,sp,16
100004d0:	f800283a 	ret

100004d4 <try_move_zombie>:

void try_move_zombie(zombie_t *z, int new_x, int new_y) {
100004d4:	deffee04 	addi	sp,sp,-72
100004d8:	dfc01115 	stw	ra,68(sp)
100004dc:	df001015 	stw	fp,64(sp)
100004e0:	dc400f15 	stw	r17,60(sp)
100004e4:	dc000e15 	stw	r16,56(sp)
100004e8:	df001004 	addi	fp,sp,64
100004ec:	e13ffb15 	stw	r4,-20(fp)
100004f0:	e17ffc15 	stw	r5,-16(fp)
100004f4:	e1bffd15 	stw	r6,-12(fp)
	int dx = DX[z->direction], dy = DY[z->direction];
100004f8:	e0bffb17 	ldw	r2,-20(fp)
100004fc:	10c00617 	ldw	r3,24(r2)
10000500:	00840074 	movhi	r2,4097
10000504:	108f7004 	addi	r2,r2,15808
10000508:	18c7883a 	add	r3,r3,r3
1000050c:	18c7883a 	add	r3,r3,r3
10000510:	10c5883a 	add	r2,r2,r3
10000514:	10800017 	ldw	r2,0(r2)
10000518:	e0bff215 	stw	r2,-56(fp)
1000051c:	e0bffb17 	ldw	r2,-20(fp)
10000520:	10c00617 	ldw	r3,24(r2)
10000524:	00840074 	movhi	r2,4097
10000528:	108f7804 	addi	r2,r2,15840
1000052c:	18c7883a 	add	r3,r3,r3
10000530:	18c7883a 	add	r3,r3,r3
10000534:	10c5883a 	add	r2,r2,r3
10000538:	10800017 	ldw	r2,0(r2)
1000053c:	e0bff315 	stw	r2,-52(fp)
	int grid_x = TO_GRID(z->x), grid_y = TO_GRID(z->y);
10000540:	e0bffb17 	ldw	r2,-20(fp)
10000544:	10800117 	ldw	r2,4(r2)
10000548:	1000010e 	bge	r2,zero,10000550 <try_move_zombie+0x7c>
1000054c:	108007c4 	addi	r2,r2,31
10000550:	1005d17a 	srai	r2,r2,5
10000554:	e0bff415 	stw	r2,-48(fp)
10000558:	e0bffb17 	ldw	r2,-20(fp)
1000055c:	10800217 	ldw	r2,8(r2)
10000560:	1000010e 	bge	r2,zero,10000568 <try_move_zombie+0x94>
10000564:	108007c4 	addi	r2,r2,31
10000568:	1005d17a 	srai	r2,r2,5
1000056c:	e0bff515 	stw	r2,-44(fp)
	int face_grid_x = grid_x + dx, face_grid_y = grid_y + dy;
10000570:	e0fff417 	ldw	r3,-48(fp)
10000574:	e0bff217 	ldw	r2,-56(fp)
10000578:	1885883a 	add	r2,r3,r2
1000057c:	e0bff615 	stw	r2,-40(fp)
10000580:	e0fff517 	ldw	r3,-44(fp)
10000584:	e0bff317 	ldw	r2,-52(fp)
10000588:	1885883a 	add	r2,r3,r2
1000058c:	e0bff715 	stw	r2,-36(fp)

    if (new_x >= MAX_X) {
10000590:	e0bffc17 	ldw	r2,-16(fp)
10000594:	10809010 	cmplti	r2,r2,576
10000598:	1000031e 	bne	r2,zero,100005a8 <try_move_zombie+0xd4>
        new_x = MAX_X - 1;
1000059c:	00808fc4 	movi	r2,575
100005a0:	e0bffc15 	stw	r2,-16(fp)
100005a4:	00000506 	br	100005bc <try_move_zombie+0xe8>
    } else if (new_x < MIN_X) {
100005a8:	e0bffc17 	ldw	r2,-16(fp)
100005ac:	10801008 	cmpgei	r2,r2,64
100005b0:	1000021e 	bne	r2,zero,100005bc <try_move_zombie+0xe8>
        new_x = MIN_X;
100005b4:	00801004 	movi	r2,64
100005b8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (new_y >= MAX_Y) {
100005bc:	e0bffd17 	ldw	r2,-12(fp)
100005c0:	10806810 	cmplti	r2,r2,416
100005c4:	1000031e 	bne	r2,zero,100005d4 <try_move_zombie+0x100>
        new_y = MAX_Y - 1;
100005c8:	008067c4 	movi	r2,415
100005cc:	e0bffd15 	stw	r2,-12(fp)
100005d0:	00000506 	br	100005e8 <try_move_zombie+0x114>
    } else if (new_y < MIN_Y) {
100005d4:	e0bffd17 	ldw	r2,-12(fp)
100005d8:	10801008 	cmpgei	r2,r2,64
100005dc:	1000021e 	bne	r2,zero,100005e8 <try_move_zombie+0x114>
        new_y = MIN_Y;
100005e0:	00801004 	movi	r2,64
100005e4:	e0bffd15 	stw	r2,-12(fp)
    }

    int new_grid_x = TO_GRID(new_x), new_grid_y = TO_GRID(new_y);
100005e8:	e0bffc17 	ldw	r2,-16(fp)
100005ec:	1000010e 	bge	r2,zero,100005f4 <try_move_zombie+0x120>
100005f0:	108007c4 	addi	r2,r2,31
100005f4:	1005d17a 	srai	r2,r2,5
100005f8:	e0bff815 	stw	r2,-32(fp)
100005fc:	e0bffd17 	ldw	r2,-12(fp)
10000600:	1000010e 	bge	r2,zero,10000608 <try_move_zombie+0x134>
10000604:	108007c4 	addi	r2,r2,31
10000608:	1005d17a 	srai	r2,r2,5
1000060c:	e0bff915 	stw	r2,-28(fp)

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
10000610:	e0fff417 	ldw	r3,-48(fp)
10000614:	e0bff817 	ldw	r2,-32(fp)
10000618:	1880031e 	bne	r3,r2,10000628 <try_move_zombie+0x154>
1000061c:	e0fff517 	ldw	r3,-44(fp)
10000620:	e0bff917 	ldw	r2,-28(fp)
10000624:	18800f26 	beq	r3,r2,10000664 <try_move_zombie+0x190>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000628:	040400b4 	movhi	r16,4098
1000062c:	84290604 	addi	r16,r16,-23528
10000630:	e0bff817 	ldw	r2,-32(fp)
10000634:	014003c4 	movi	r5,15
10000638:	1009883a 	mov	r4,r2
1000063c:	00046600 	call	10004660 <__mulsi3>
10000640:	1007883a 	mov	r3,r2
10000644:	e0bff917 	ldw	r2,-28(fp)
10000648:	1885883a 	add	r2,r3,r2
1000064c:	1085883a 	add	r2,r2,r2
10000650:	1085883a 	add	r2,r2,r2
10000654:	8085883a 	add	r2,r16,r2
10000658:	10800017 	ldw	r2,0(r2)
1000065c:	10803fe0 	cmpeqi	r2,r2,255
10000660:	10008026 	beq	r2,zero,10000864 <try_move_zombie+0x390>
        // Move to new grid, no collision
    } else {
    	return;
    }

    if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
10000664:	e0bff617 	ldw	r2,-40(fp)
10000668:	10007f16 	blt	r2,zero,10000868 <try_move_zombie+0x394>
1000066c:	e0bff617 	ldw	r2,-40(fp)
10000670:	10800508 	cmpgei	r2,r2,20
10000674:	10007c1e 	bne	r2,zero,10000868 <try_move_zombie+0x394>
10000678:	e0bff717 	ldw	r2,-36(fp)
1000067c:	10007a16 	blt	r2,zero,10000868 <try_move_zombie+0x394>
		face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT) {
10000680:	e0bff717 	ldw	r2,-36(fp)
10000684:	108003c8 	cmpgei	r2,r2,15
10000688:	1000771e 	bne	r2,zero,10000868 <try_move_zombie+0x394>

		int id = grid[face_grid_x][face_grid_y];
1000068c:	040400b4 	movhi	r16,4098
10000690:	84290604 	addi	r16,r16,-23528
10000694:	e0bff617 	ldw	r2,-40(fp)
10000698:	014003c4 	movi	r5,15
1000069c:	1009883a 	mov	r4,r2
100006a0:	00046600 	call	10004660 <__mulsi3>
100006a4:	1007883a 	mov	r3,r2
100006a8:	e0bff717 	ldw	r2,-36(fp)
100006ac:	1885883a 	add	r2,r3,r2
100006b0:	1085883a 	add	r2,r2,r2
100006b4:	1085883a 	add	r2,r2,r2
100006b8:	8085883a 	add	r2,r16,r2
100006bc:	10800017 	ldw	r2,0(r2)
100006c0:	e0bffa15 	stw	r2,-24(fp)
		int target_x, target_y;
		if (id > 0) {
100006c4:	e0bffa17 	ldw	r2,-24(fp)
100006c8:	0080110e 	bge	zero,r2,10000710 <try_move_zombie+0x23c>
			target_x = zombie[id].x;
100006cc:	008400b4 	movhi	r2,4098
100006d0:	10aa3204 	addi	r2,r2,-22328
100006d4:	e0fffa17 	ldw	r3,-24(fp)
100006d8:	1806917a 	slli	r3,r3,5
100006dc:	10c5883a 	add	r2,r2,r3
100006e0:	10800104 	addi	r2,r2,4
100006e4:	10800017 	ldw	r2,0(r2)
100006e8:	e0bff015 	stw	r2,-64(fp)
			target_y = zombie[id].y;
100006ec:	008400b4 	movhi	r2,4098
100006f0:	10aa3204 	addi	r2,r2,-22328
100006f4:	e0fffa17 	ldw	r3,-24(fp)
100006f8:	1806917a 	slli	r3,r3,5
100006fc:	10c5883a 	add	r2,r2,r3
10000700:	10800204 	addi	r2,r2,8
10000704:	10800017 	ldw	r2,0(r2)
10000708:	e0bff115 	stw	r2,-60(fp)
1000070c:	00001406 	br	10000760 <try_move_zombie+0x28c>
		} else if (id == INDEX_PLAYER_1) {
10000710:	e0bffa17 	ldw	r2,-24(fp)
10000714:	10bfffd8 	cmpnei	r2,r2,-1
10000718:	1000091e 	bne	r2,zero,10000740 <try_move_zombie+0x26c>
			target_x = player_1.x;
1000071c:	008400b4 	movhi	r2,4098
10000720:	10aad204 	addi	r2,r2,-21688
10000724:	10800017 	ldw	r2,0(r2)
10000728:	e0bff015 	stw	r2,-64(fp)
			target_y = player_1.y;
1000072c:	008400b4 	movhi	r2,4098
10000730:	10aad204 	addi	r2,r2,-21688
10000734:	10800117 	ldw	r2,4(r2)
10000738:	e0bff115 	stw	r2,-60(fp)
1000073c:	00000806 	br	10000760 <try_move_zombie+0x28c>
		} else {
			target_x = player_2.x;
10000740:	008400b4 	movhi	r2,4098
10000744:	10aadb04 	addi	r2,r2,-21652
10000748:	10800017 	ldw	r2,0(r2)
1000074c:	e0bff015 	stw	r2,-64(fp)
			target_y = player_2.y;
10000750:	008400b4 	movhi	r2,4098
10000754:	10aadb04 	addi	r2,r2,-21652
10000758:	10800117 	ldw	r2,4(r2)
1000075c:	e0bff115 	stw	r2,-60(fp)
		}

		if (abs(target_x - new_x) > 20 && abs(target_y - new_y) > 20) {
10000760:	e0fff017 	ldw	r3,-64(fp)
10000764:	e0bffc17 	ldw	r2,-16(fp)
10000768:	1885c83a 	sub	r2,r3,r2
1000076c:	1000010e 	bge	r2,zero,10000774 <try_move_zombie+0x2a0>
10000770:	0085c83a 	sub	r2,zero,r2
10000774:	10800550 	cmplti	r2,r2,21
10000778:	10003b1e 	bne	r2,zero,10000868 <try_move_zombie+0x394>
1000077c:	e0fff117 	ldw	r3,-60(fp)
10000780:	e0bffd17 	ldw	r2,-12(fp)
10000784:	1885c83a 	sub	r2,r3,r2
10000788:	1000010e 	bge	r2,zero,10000790 <try_move_zombie+0x2bc>
1000078c:	0085c83a 	sub	r2,zero,r2
10000790:	10800550 	cmplti	r2,r2,21
10000794:	1000341e 	bne	r2,zero,10000868 <try_move_zombie+0x394>
			if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000798:	040400b4 	movhi	r16,4098
1000079c:	84290604 	addi	r16,r16,-23528
100007a0:	e0bff817 	ldw	r2,-32(fp)
100007a4:	014003c4 	movi	r5,15
100007a8:	1009883a 	mov	r4,r2
100007ac:	00046600 	call	10004660 <__mulsi3>
100007b0:	1007883a 	mov	r3,r2
100007b4:	e0bff917 	ldw	r2,-28(fp)
100007b8:	1885883a 	add	r2,r3,r2
100007bc:	1085883a 	add	r2,r2,r2
100007c0:	1085883a 	add	r2,r2,r2
100007c4:	8085883a 	add	r2,r16,r2
100007c8:	10800017 	ldw	r2,0(r2)
100007cc:	10803fd8 	cmpnei	r2,r2,255
100007d0:	10001d1e 	bne	r2,zero,10000848 <try_move_zombie+0x374>
				// Move to new grid, no collision
				grid[grid_x][grid_y] = INDEX_NOTHING;
100007d4:	040400b4 	movhi	r16,4098
100007d8:	84290604 	addi	r16,r16,-23528
100007dc:	e0bff417 	ldw	r2,-48(fp)
100007e0:	014003c4 	movi	r5,15
100007e4:	1009883a 	mov	r4,r2
100007e8:	00046600 	call	10004660 <__mulsi3>
100007ec:	1007883a 	mov	r3,r2
100007f0:	e0bff517 	ldw	r2,-44(fp)
100007f4:	1885883a 	add	r2,r3,r2
100007f8:	1085883a 	add	r2,r2,r2
100007fc:	1085883a 	add	r2,r2,r2
10000800:	8085883a 	add	r2,r16,r2
10000804:	00c03fc4 	movi	r3,255
10000808:	10c00015 	stw	r3,0(r2)
				grid[new_grid_x][new_grid_y] = z->index;
1000080c:	e0bffb17 	ldw	r2,-20(fp)
10000810:	14400017 	ldw	r17,0(r2)
10000814:	040400b4 	movhi	r16,4098
10000818:	84290604 	addi	r16,r16,-23528
1000081c:	e0bff817 	ldw	r2,-32(fp)
10000820:	014003c4 	movi	r5,15
10000824:	1009883a 	mov	r4,r2
10000828:	00046600 	call	10004660 <__mulsi3>
1000082c:	1007883a 	mov	r3,r2
10000830:	e0bff917 	ldw	r2,-28(fp)
10000834:	1885883a 	add	r2,r3,r2
10000838:	1085883a 	add	r2,r2,r2
1000083c:	1085883a 	add	r2,r2,r2
10000840:	8085883a 	add	r2,r16,r2
10000844:	14400015 	stw	r17,0(r2)
			}
			z->x = new_x;
10000848:	e0bffb17 	ldw	r2,-20(fp)
1000084c:	e0fffc17 	ldw	r3,-16(fp)
10000850:	10c00115 	stw	r3,4(r2)
			z->y = new_y;
10000854:	e0bffb17 	ldw	r2,-20(fp)
10000858:	e0fffd17 	ldw	r3,-12(fp)
1000085c:	10c00215 	stw	r3,8(r2)
10000860:	00000106 	br	10000868 <try_move_zombie+0x394>
    if (grid_x == new_grid_x && grid_y == new_grid_y) {
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
    } else {
    	return;
10000864:	0001883a 	nop
			}
			z->x = new_x;
			z->y = new_y;
		}
	}
}
10000868:	e6fffe04 	addi	sp,fp,-8
1000086c:	dfc00317 	ldw	ra,12(sp)
10000870:	df000217 	ldw	fp,8(sp)
10000874:	dc400117 	ldw	r17,4(sp)
10000878:	dc000017 	ldw	r16,0(sp)
1000087c:	dec00404 	addi	sp,sp,16
10000880:	f800283a 	ret

10000884 <update_zombie>:

void update_zombie(zombie_t *z) {
10000884:	defff304 	addi	sp,sp,-52
10000888:	dfc00c15 	stw	ra,48(sp)
1000088c:	df000b15 	stw	fp,44(sp)
10000890:	dc000a15 	stw	r16,40(sp)
10000894:	df000b04 	addi	fp,sp,44
10000898:	e13ffe15 	stw	r4,-8(fp)
    int dx = DX[z->direction], dy = DY[z->direction];
1000089c:	e0bffe17 	ldw	r2,-8(fp)
100008a0:	10c00617 	ldw	r3,24(r2)
100008a4:	00840074 	movhi	r2,4097
100008a8:	108f7004 	addi	r2,r2,15808
100008ac:	18c7883a 	add	r3,r3,r3
100008b0:	18c7883a 	add	r3,r3,r3
100008b4:	10c5883a 	add	r2,r2,r3
100008b8:	10800017 	ldw	r2,0(r2)
100008bc:	e0bff515 	stw	r2,-44(fp)
100008c0:	e0bffe17 	ldw	r2,-8(fp)
100008c4:	10c00617 	ldw	r3,24(r2)
100008c8:	00840074 	movhi	r2,4097
100008cc:	108f7804 	addi	r2,r2,15840
100008d0:	18c7883a 	add	r3,r3,r3
100008d4:	18c7883a 	add	r3,r3,r3
100008d8:	10c5883a 	add	r2,r2,r3
100008dc:	10800017 	ldw	r2,0(r2)
100008e0:	e0bff615 	stw	r2,-40(fp)
    int grid_x = TO_GRID(z->x), grid_y = TO_GRID(z->y);
100008e4:	e0bffe17 	ldw	r2,-8(fp)
100008e8:	10800117 	ldw	r2,4(r2)
100008ec:	1000010e 	bge	r2,zero,100008f4 <update_zombie+0x70>
100008f0:	108007c4 	addi	r2,r2,31
100008f4:	1005d17a 	srai	r2,r2,5
100008f8:	e0bff715 	stw	r2,-36(fp)
100008fc:	e0bffe17 	ldw	r2,-8(fp)
10000900:	10800217 	ldw	r2,8(r2)
10000904:	1000010e 	bge	r2,zero,1000090c <update_zombie+0x88>
10000908:	108007c4 	addi	r2,r2,31
1000090c:	1005d17a 	srai	r2,r2,5
10000910:	e0bff815 	stw	r2,-32(fp)
    int face_grid_x = grid_x + dx, face_grid_y = grid_y + dy;
10000914:	e0fff717 	ldw	r3,-36(fp)
10000918:	e0bff517 	ldw	r2,-44(fp)
1000091c:	1885883a 	add	r2,r3,r2
10000920:	e0bff915 	stw	r2,-28(fp)
10000924:	e0fff817 	ldw	r3,-32(fp)
10000928:	e0bff617 	ldw	r2,-40(fp)
1000092c:	1885883a 	add	r2,r3,r2
10000930:	e0bffa15 	stw	r2,-24(fp)

    switch (z->action) {
10000934:	e0bffe17 	ldw	r2,-8(fp)
10000938:	10800517 	ldw	r2,20(r2)
1000093c:	10c00168 	cmpgeui	r3,r2,5
10000940:	18010b1e 	bne	r3,zero,10000d70 <update_zombie+0x4ec>
10000944:	100690ba 	slli	r3,r2,2
10000948:	00840034 	movhi	r2,4096
1000094c:	10825704 	addi	r2,r2,2396
10000950:	1885883a 	add	r2,r3,r2
10000954:	10800017 	ldw	r2,0(r2)
10000958:	1000683a 	jmp	r2
1000095c:	10000970 	cmpltui	zero,r2,37
10000960:	10000a88 	cmpgei	zero,r2,42
10000964:	10000ad4 	ori	zero,r2,43
10000968:	10000cd0 	cmplti	zero,r2,51
1000096c:	10000d08 	cmpgei	zero,r2,52
        case WALK:

            // Initiate attack if player is at the front
            if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
10000970:	e0bff917 	ldw	r2,-28(fp)
10000974:	10001c16 	blt	r2,zero,100009e8 <update_zombie+0x164>
10000978:	e0bff917 	ldw	r2,-28(fp)
1000097c:	10800508 	cmpgei	r2,r2,20
10000980:	1000191e 	bne	r2,zero,100009e8 <update_zombie+0x164>
10000984:	e0bffa17 	ldw	r2,-24(fp)
10000988:	10001716 	blt	r2,zero,100009e8 <update_zombie+0x164>
                face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
1000098c:	e0bffa17 	ldw	r2,-24(fp)
10000990:	108003c8 	cmpgei	r2,r2,15
10000994:	1000141e 	bne	r2,zero,100009e8 <update_zombie+0x164>
                grid[face_grid_x][face_grid_y] < 0) {
10000998:	040400b4 	movhi	r16,4098
1000099c:	84290604 	addi	r16,r16,-23528
100009a0:	e0bff917 	ldw	r2,-28(fp)
100009a4:	014003c4 	movi	r5,15
100009a8:	1009883a 	mov	r4,r2
100009ac:	00046600 	call	10004660 <__mulsi3>
100009b0:	1007883a 	mov	r3,r2
100009b4:	e0bffa17 	ldw	r2,-24(fp)
100009b8:	1885883a 	add	r2,r3,r2
100009bc:	1085883a 	add	r2,r2,r2
100009c0:	1085883a 	add	r2,r2,r2
100009c4:	8085883a 	add	r2,r16,r2
100009c8:	10800017 	ldw	r2,0(r2)
    switch (z->action) {
        case WALK:

            // Initiate attack if player is at the front
            if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
                face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
100009cc:	1000060e 	bge	r2,zero,100009e8 <update_zombie+0x164>
                grid[face_grid_x][face_grid_y] < 0) {

                z->action = ATTACK;
100009d0:	e0bffe17 	ldw	r2,-8(fp)
100009d4:	00c00084 	movi	r3,2
100009d8:	10c00515 	stw	r3,20(r2)
                z->frame = 0;
100009dc:	e0bffe17 	ldw	r2,-8(fp)
100009e0:	10000715 	stw	zero,28(r2)
                return;
100009e4:	0000e206 	br	10000d70 <update_zombie+0x4ec>
            }

            int new_direction = calc_zombie_direction(z);
100009e8:	e13ffe17 	ldw	r4,-8(fp)
100009ec:	000026c0 	call	1000026c <calc_zombie_direction>
100009f0:	e0bffb15 	stw	r2,-20(fp)
            if (new_direction == z->direction) {
100009f4:	e0bffe17 	ldw	r2,-8(fp)
100009f8:	10c00617 	ldw	r3,24(r2)
100009fc:	e0bffb17 	ldw	r2,-20(fp)
10000a00:	1880181e 	bne	r3,r2,10000a64 <update_zombie+0x1e0>
                // Do not need to rotate, move

                int new_x = z->x + dx * ZOMBIE_MOVE;
10000a04:	e0bffe17 	ldw	r2,-8(fp)
10000a08:	10c00117 	ldw	r3,4(r2)
10000a0c:	e0bff517 	ldw	r2,-44(fp)
10000a10:	1885883a 	add	r2,r3,r2
10000a14:	e0bffc15 	stw	r2,-16(fp)
                int new_y = z->y + dy * ZOMBIE_MOVE;
10000a18:	e0bffe17 	ldw	r2,-8(fp)
10000a1c:	10c00217 	ldw	r3,8(r2)
10000a20:	e0bff617 	ldw	r2,-40(fp)
10000a24:	1885883a 	add	r2,r3,r2
10000a28:	e0bffd15 	stw	r2,-12(fp)
                try_move_zombie(z, new_x, new_y);
10000a2c:	e1bffd17 	ldw	r6,-12(fp)
10000a30:	e17ffc17 	ldw	r5,-16(fp)
10000a34:	e13ffe17 	ldw	r4,-8(fp)
10000a38:	00004d40 	call	100004d4 <try_move_zombie>
                z->action = ROTATE;
                z->frame = 0;
                return;
            }

            z->frame++;
10000a3c:	e0bffe17 	ldw	r2,-8(fp)
10000a40:	10800717 	ldw	r2,28(r2)
10000a44:	10c00044 	addi	r3,r2,1
10000a48:	e0bffe17 	ldw	r2,-8(fp)
10000a4c:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;
10000a50:	e0bffe17 	ldw	r2,-8(fp)
10000a54:	10800717 	ldw	r2,28(r2)
10000a58:	10800210 	cmplti	r2,r2,8
10000a5c:	1000bf1e 	bne	r2,zero,10000d5c <update_zombie+0x4d8>
10000a60:	00000606 	br	10000a7c <update_zombie+0x1f8>
                int new_y = z->y + dy * ZOMBIE_MOVE;
                try_move_zombie(z, new_x, new_y);

            } else {
                // Need to rotate
                z->action = ROTATE;
10000a64:	e0bffe17 	ldw	r2,-8(fp)
10000a68:	00c00044 	movi	r3,1
10000a6c:	10c00515 	stw	r3,20(r2)
                z->frame = 0;
10000a70:	e0bffe17 	ldw	r2,-8(fp)
10000a74:	10000715 	stw	zero,28(r2)
                return;
10000a78:	0000bd06 	br	10000d70 <update_zombie+0x4ec>
            }

            z->frame++;
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;
10000a7c:	e0bffe17 	ldw	r2,-8(fp)
10000a80:	10000715 	stw	zero,28(r2)

            break;
10000a84:	0000b506 	br	10000d5c <update_zombie+0x4d8>
        case ROTATE:
            z->frame++;
10000a88:	e0bffe17 	ldw	r2,-8(fp)
10000a8c:	10800717 	ldw	r2,28(r2)
10000a90:	10c00044 	addi	r3,r2,1
10000a94:	e0bffe17 	ldw	r2,-8(fp)
10000a98:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_ROTATE_FRAME_COUNT) {
10000a9c:	e0bffe17 	ldw	r2,-8(fp)
10000aa0:	10800717 	ldw	r2,28(r2)
10000aa4:	10800110 	cmplti	r2,r2,4
10000aa8:	1000ae1e 	bne	r2,zero,10000d64 <update_zombie+0x4e0>
                // TODO: now the direction can change abruptly over a large degree
                z->direction = calc_zombie_direction(z);
10000aac:	e13ffe17 	ldw	r4,-8(fp)
10000ab0:	000026c0 	call	1000026c <calc_zombie_direction>
10000ab4:	1007883a 	mov	r3,r2
10000ab8:	e0bffe17 	ldw	r2,-8(fp)
10000abc:	10c00615 	stw	r3,24(r2)
                z->action = WALK;
10000ac0:	e0bffe17 	ldw	r2,-8(fp)
10000ac4:	10000515 	stw	zero,20(r2)
                z->frame = 0;
10000ac8:	e0bffe17 	ldw	r2,-8(fp)
10000acc:	10000715 	stw	zero,28(r2)
                return;
10000ad0:	0000a706 	br	10000d70 <update_zombie+0x4ec>
            }
            break;
        case ATTACK:
            z->frame++;
10000ad4:	e0bffe17 	ldw	r2,-8(fp)
10000ad8:	10800717 	ldw	r2,28(r2)
10000adc:	10c00044 	addi	r3,r2,1
10000ae0:	e0bffe17 	ldw	r2,-8(fp)
10000ae4:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
10000ae8:	e0bffe17 	ldw	r2,-8(fp)
10000aec:	10800717 	ldw	r2,28(r2)
10000af0:	10800610 	cmplti	r2,r2,24
10000af4:	10009d1e 	bne	r2,zero,10000d6c <update_zombie+0x4e8>
                // Check whether there is still a player at the facing grid
                if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
10000af8:	e0bff917 	ldw	r2,-28(fp)
10000afc:	10006f16 	blt	r2,zero,10000cbc <update_zombie+0x438>
10000b00:	e0bff917 	ldw	r2,-28(fp)
10000b04:	10800508 	cmpgei	r2,r2,20
10000b08:	10006c1e 	bne	r2,zero,10000cbc <update_zombie+0x438>
10000b0c:	e0bffa17 	ldw	r2,-24(fp)
10000b10:	10006a16 	blt	r2,zero,10000cbc <update_zombie+0x438>
                    face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000b14:	e0bffa17 	ldw	r2,-24(fp)
10000b18:	108003c8 	cmpgei	r2,r2,15
10000b1c:	1000671e 	bne	r2,zero,10000cbc <update_zombie+0x438>
                    grid[face_grid_x][face_grid_y] < 0) {
10000b20:	040400b4 	movhi	r16,4098
10000b24:	84290604 	addi	r16,r16,-23528
10000b28:	e0bff917 	ldw	r2,-28(fp)
10000b2c:	014003c4 	movi	r5,15
10000b30:	1009883a 	mov	r4,r2
10000b34:	00046600 	call	10004660 <__mulsi3>
10000b38:	1007883a 	mov	r3,r2
10000b3c:	e0bffa17 	ldw	r2,-24(fp)
10000b40:	1885883a 	add	r2,r3,r2
10000b44:	1085883a 	add	r2,r2,r2
10000b48:	1085883a 	add	r2,r2,r2
10000b4c:	8085883a 	add	r2,r16,r2
10000b50:	10800017 	ldw	r2,0(r2)
        case ATTACK:
            z->frame++;
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
                // Check whether there is still a player at the facing grid
                if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
                    face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000b54:	1000590e 	bge	r2,zero,10000cbc <update_zombie+0x438>
                    grid[face_grid_x][face_grid_y] < 0) {

                    if (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1) {
10000b58:	040400b4 	movhi	r16,4098
10000b5c:	84290604 	addi	r16,r16,-23528
10000b60:	e0bff917 	ldw	r2,-28(fp)
10000b64:	014003c4 	movi	r5,15
10000b68:	1009883a 	mov	r4,r2
10000b6c:	00046600 	call	10004660 <__mulsi3>
10000b70:	1007883a 	mov	r3,r2
10000b74:	e0bffa17 	ldw	r2,-24(fp)
10000b78:	1885883a 	add	r2,r3,r2
10000b7c:	1085883a 	add	r2,r2,r2
10000b80:	1085883a 	add	r2,r2,r2
10000b84:	8085883a 	add	r2,r16,r2
10000b88:	10800017 	ldw	r2,0(r2)
10000b8c:	10bfffd8 	cmpnei	r2,r2,-1
10000b90:	10001e1e 	bne	r2,zero,10000c0c <update_zombie+0x388>
                        player_1.action = HIT;
10000b94:	008400b4 	movhi	r2,4098
10000b98:	10aad204 	addi	r2,r2,-21688
10000b9c:	00c000c4 	movi	r3,3
10000ba0:	10c00615 	stw	r3,24(r2)
                        player_1.blood -= ZOMBIE_ATTACK;
10000ba4:	008400b4 	movhi	r2,4098
10000ba8:	10aad204 	addi	r2,r2,-21688
10000bac:	10800217 	ldw	r2,8(r2)
10000bb0:	10fffd84 	addi	r3,r2,-10
10000bb4:	008400b4 	movhi	r2,4098
10000bb8:	10aad204 	addi	r2,r2,-21688
10000bbc:	10c00215 	stw	r3,8(r2)
                        player_1.frame = 0;
10000bc0:	008400b4 	movhi	r2,4098
10000bc4:	10aad204 	addi	r2,r2,-21688
10000bc8:	10000715 	stw	zero,28(r2)
                        player_1.direction = (z->direction + 4) % 8;  // opposite
10000bcc:	e0bffe17 	ldw	r2,-8(fp)
10000bd0:	10800617 	ldw	r2,24(r2)
10000bd4:	10c00104 	addi	r3,r2,4
10000bd8:	00a00034 	movhi	r2,32768
10000bdc:	108001c4 	addi	r2,r2,7
10000be0:	1884703a 	and	r2,r3,r2
10000be4:	1000040e 	bge	r2,zero,10000bf8 <update_zombie+0x374>
10000be8:	10bfffc4 	addi	r2,r2,-1
10000bec:	00fffe04 	movi	r3,-8
10000bf0:	10c4b03a 	or	r2,r2,r3
10000bf4:	10800044 	addi	r2,r2,1
10000bf8:	1007883a 	mov	r3,r2
10000bfc:	008400b4 	movhi	r2,4098
10000c00:	10aad204 	addi	r2,r2,-21688
10000c04:	10c00315 	stw	r3,12(r2)
10000c08:	00002c06 	br	10000cbc <update_zombie+0x438>
                    } else if (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_2) {
10000c0c:	040400b4 	movhi	r16,4098
10000c10:	84290604 	addi	r16,r16,-23528
10000c14:	e0bff917 	ldw	r2,-28(fp)
10000c18:	014003c4 	movi	r5,15
10000c1c:	1009883a 	mov	r4,r2
10000c20:	00046600 	call	10004660 <__mulsi3>
10000c24:	1007883a 	mov	r3,r2
10000c28:	e0bffa17 	ldw	r2,-24(fp)
10000c2c:	1885883a 	add	r2,r3,r2
10000c30:	1085883a 	add	r2,r2,r2
10000c34:	1085883a 	add	r2,r2,r2
10000c38:	8085883a 	add	r2,r16,r2
10000c3c:	10800017 	ldw	r2,0(r2)
10000c40:	10bfff98 	cmpnei	r2,r2,-2
10000c44:	10001d1e 	bne	r2,zero,10000cbc <update_zombie+0x438>
                        player_2.action = HIT;
10000c48:	008400b4 	movhi	r2,4098
10000c4c:	10aadb04 	addi	r2,r2,-21652
10000c50:	00c000c4 	movi	r3,3
10000c54:	10c00615 	stw	r3,24(r2)
                        player_2.blood -= ZOMBIE_ATTACK;
10000c58:	008400b4 	movhi	r2,4098
10000c5c:	10aadb04 	addi	r2,r2,-21652
10000c60:	10800217 	ldw	r2,8(r2)
10000c64:	10fffd84 	addi	r3,r2,-10
10000c68:	008400b4 	movhi	r2,4098
10000c6c:	10aadb04 	addi	r2,r2,-21652
10000c70:	10c00215 	stw	r3,8(r2)
                        player_2.frame = 0;
10000c74:	008400b4 	movhi	r2,4098
10000c78:	10aadb04 	addi	r2,r2,-21652
10000c7c:	10000715 	stw	zero,28(r2)
                        player_2.direction = (z->direction + 4) % 8;  // opposite
10000c80:	e0bffe17 	ldw	r2,-8(fp)
10000c84:	10800617 	ldw	r2,24(r2)
10000c88:	10c00104 	addi	r3,r2,4
10000c8c:	00a00034 	movhi	r2,32768
10000c90:	108001c4 	addi	r2,r2,7
10000c94:	1884703a 	and	r2,r3,r2
10000c98:	1000040e 	bge	r2,zero,10000cac <update_zombie+0x428>
10000c9c:	10bfffc4 	addi	r2,r2,-1
10000ca0:	00fffe04 	movi	r3,-8
10000ca4:	10c4b03a 	or	r2,r2,r3
10000ca8:	10800044 	addi	r2,r2,1
10000cac:	1007883a 	mov	r3,r2
10000cb0:	008400b4 	movhi	r2,4098
10000cb4:	10aadb04 	addi	r2,r2,-21652
10000cb8:	10c00315 	stw	r3,12(r2)
                    }
                }
                z->action = WALK;
10000cbc:	e0bffe17 	ldw	r2,-8(fp)
10000cc0:	10000515 	stw	zero,20(r2)
                z->frame = 0;
10000cc4:	e0bffe17 	ldw	r2,-8(fp)
10000cc8:	10000715 	stw	zero,28(r2)
                return;
10000ccc:	00002806 	br	10000d70 <update_zombie+0x4ec>
            // try_move_zombie(z,
            //                 z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
            //                 z->y - dy * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame]);
            // z->frame++;
            // if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
                if (z->blood > 0) {
10000cd0:	e0bffe17 	ldw	r2,-8(fp)
10000cd4:	10800317 	ldw	r2,12(r2)
10000cd8:	0080050e 	bge	zero,r2,10000cf0 <update_zombie+0x46c>
                    z->action = WALK;
10000cdc:	e0bffe17 	ldw	r2,-8(fp)
10000ce0:	10000515 	stw	zero,20(r2)
                    z->frame = 0;
10000ce4:	e0bffe17 	ldw	r2,-8(fp)
10000ce8:	10000715 	stw	zero,28(r2)
                    return;
10000cec:	00002006 	br	10000d70 <update_zombie+0x4ec>
                } else {
                    z->action = DIE;
10000cf0:	e0bffe17 	ldw	r2,-8(fp)
10000cf4:	00c00104 	movi	r3,4
10000cf8:	10c00515 	stw	r3,20(r2)
                    z->frame = 0;
10000cfc:	e0bffe17 	ldw	r2,-8(fp)
10000d00:	10000715 	stw	zero,28(r2)
                    return;
10000d04:	00001a06 	br	10000d70 <update_zombie+0x4ec>
            break;
        case DIE:
        
            // z->frame++;
            // if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
                z->enable = 0;
10000d08:	e0bffe17 	ldw	r2,-8(fp)
10000d0c:	10000415 	stw	zero,16(r2)
                grid[grid_x][grid_y] = INDEX_NOTHING;
10000d10:	040400b4 	movhi	r16,4098
10000d14:	84290604 	addi	r16,r16,-23528
10000d18:	e0bff717 	ldw	r2,-36(fp)
10000d1c:	014003c4 	movi	r5,15
10000d20:	1009883a 	mov	r4,r2
10000d24:	00046600 	call	10004660 <__mulsi3>
10000d28:	1007883a 	mov	r3,r2
10000d2c:	e0bff817 	ldw	r2,-32(fp)
10000d30:	1885883a 	add	r2,r3,r2
10000d34:	1085883a 	add	r2,r2,r2
10000d38:	1085883a 	add	r2,r2,r2
10000d3c:	8085883a 	add	r2,r16,r2
10000d40:	00c03fc4 	movi	r3,255
10000d44:	10c00015 	stw	r3,0(r2)
                cur_zombie_counter--;
10000d48:	d0ab5217 	ldw	r2,-21176(gp)
10000d4c:	10bfffc4 	addi	r2,r2,-1
10000d50:	d0ab5215 	stw	r2,-21176(gp)
                return;
10000d54:	0001883a 	nop
10000d58:	00000506 	br	10000d70 <update_zombie+0x4ec>
            }

            z->frame++;
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;

            break;
10000d5c:	0001883a 	nop
10000d60:	00000306 	br	10000d70 <update_zombie+0x4ec>
                z->direction = calc_zombie_direction(z);
                z->action = WALK;
                z->frame = 0;
                return;
            }
            break;
10000d64:	0001883a 	nop
10000d68:	00000106 	br	10000d70 <update_zombie+0x4ec>
                }
                z->action = WALK;
                z->frame = 0;
                return;
            }
            break;
10000d6c:	0001883a 	nop
                cur_zombie_counter--;
                return;
            // }
            break;
    }
}
10000d70:	e6ffff04 	addi	sp,fp,-4
10000d74:	dfc00217 	ldw	ra,8(sp)
10000d78:	df000117 	ldw	fp,4(sp)
10000d7c:	dc000017 	ldw	r16,0(sp)
10000d80:	dec00304 	addi	sp,sp,12
10000d84:	f800283a 	ret

10000d88 <try_move_player>:

void try_move_player(player_t *p, int new_x, int new_y) {
10000d88:	defff204 	addi	sp,sp,-56
10000d8c:	dfc00d15 	stw	ra,52(sp)
10000d90:	df000c15 	stw	fp,48(sp)
10000d94:	dc400b15 	stw	r17,44(sp)
10000d98:	dc000a15 	stw	r16,40(sp)
10000d9c:	df000c04 	addi	fp,sp,48
10000da0:	e13ffb15 	stw	r4,-20(fp)
10000da4:	e17ffc15 	stw	r5,-16(fp)
10000da8:	e1bffd15 	stw	r6,-12(fp)
    int grid_x = TO_GRID(p->x), grid_y = TO_GRID(p->y);
10000dac:	e0bffb17 	ldw	r2,-20(fp)
10000db0:	10800017 	ldw	r2,0(r2)
10000db4:	1000010e 	bge	r2,zero,10000dbc <try_move_player+0x34>
10000db8:	108007c4 	addi	r2,r2,31
10000dbc:	1005d17a 	srai	r2,r2,5
10000dc0:	e0bff615 	stw	r2,-40(fp)
10000dc4:	e0bffb17 	ldw	r2,-20(fp)
10000dc8:	10800117 	ldw	r2,4(r2)
10000dcc:	1000010e 	bge	r2,zero,10000dd4 <try_move_player+0x4c>
10000dd0:	108007c4 	addi	r2,r2,31
10000dd4:	1005d17a 	srai	r2,r2,5
10000dd8:	e0bff715 	stw	r2,-36(fp)

    if (new_x >= MAX_X) {
10000ddc:	e0bffc17 	ldw	r2,-16(fp)
10000de0:	10809010 	cmplti	r2,r2,576
10000de4:	1000031e 	bne	r2,zero,10000df4 <try_move_player+0x6c>
        new_x = MAX_X - 1;
10000de8:	00808fc4 	movi	r2,575
10000dec:	e0bffc15 	stw	r2,-16(fp)
10000df0:	00000506 	br	10000e08 <try_move_player+0x80>
    } else if (new_x < MIN_X) {
10000df4:	e0bffc17 	ldw	r2,-16(fp)
10000df8:	10801008 	cmpgei	r2,r2,64
10000dfc:	1000021e 	bne	r2,zero,10000e08 <try_move_player+0x80>
        new_x = MIN_X;
10000e00:	00801004 	movi	r2,64
10000e04:	e0bffc15 	stw	r2,-16(fp)
    }

    if (new_y >= MAX_Y) {
10000e08:	e0bffd17 	ldw	r2,-12(fp)
10000e0c:	10806810 	cmplti	r2,r2,416
10000e10:	1000031e 	bne	r2,zero,10000e20 <try_move_player+0x98>
        new_y = MAX_Y - 1;
10000e14:	008067c4 	movi	r2,415
10000e18:	e0bffd15 	stw	r2,-12(fp)
10000e1c:	00000506 	br	10000e34 <try_move_player+0xac>
    } else if (new_y < MIN_Y) {
10000e20:	e0bffd17 	ldw	r2,-12(fp)
10000e24:	10801008 	cmpgei	r2,r2,64
10000e28:	1000021e 	bne	r2,zero,10000e34 <try_move_player+0xac>
        new_y = MIN_Y;
10000e2c:	00801004 	movi	r2,64
10000e30:	e0bffd15 	stw	r2,-12(fp)
    }

    int new_grid_x = TO_GRID(new_x), new_grid_y = TO_GRID(new_y);
10000e34:	e0bffc17 	ldw	r2,-16(fp)
10000e38:	1000010e 	bge	r2,zero,10000e40 <try_move_player+0xb8>
10000e3c:	108007c4 	addi	r2,r2,31
10000e40:	1005d17a 	srai	r2,r2,5
10000e44:	e0bff815 	stw	r2,-32(fp)
10000e48:	e0bffd17 	ldw	r2,-12(fp)
10000e4c:	1000010e 	bge	r2,zero,10000e54 <try_move_player+0xcc>
10000e50:	108007c4 	addi	r2,r2,31
10000e54:	1005d17a 	srai	r2,r2,5
10000e58:	e0bff915 	stw	r2,-28(fp)

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
10000e5c:	e0fff617 	ldw	r3,-40(fp)
10000e60:	e0bff817 	ldw	r2,-32(fp)
10000e64:	18800a1e 	bne	r3,r2,10000e90 <try_move_player+0x108>
10000e68:	e0fff717 	ldw	r3,-36(fp)
10000e6c:	e0bff917 	ldw	r2,-28(fp)
10000e70:	1880071e 	bne	r3,r2,10000e90 <try_move_player+0x108>
        // Stay in the same grid
        p->x = new_x;
10000e74:	e0bffb17 	ldw	r2,-20(fp)
10000e78:	e0fffc17 	ldw	r3,-16(fp)
10000e7c:	10c00015 	stw	r3,0(r2)
        p->y = new_y;
10000e80:	e0bffb17 	ldw	r2,-20(fp)
10000e84:	e0fffd17 	ldw	r3,-12(fp)
10000e88:	10c00115 	stw	r3,4(r2)
			grid[new_grid_x][new_grid_y] = (p == &player_1 ? INDEX_PLAYER_1 : INDEX_PLAYER_2);
			p->x = new_x;
			p->y = new_y;
		}
    }  // otherwise, do not move
}
10000e8c:	00007a06 	br	10001078 <try_move_player+0x2f0>

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
        // Stay in the same grid
        p->x = new_x;
        p->y = new_y;
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000e90:	040400b4 	movhi	r16,4098
10000e94:	84290604 	addi	r16,r16,-23528
10000e98:	e0bff817 	ldw	r2,-32(fp)
10000e9c:	014003c4 	movi	r5,15
10000ea0:	1009883a 	mov	r4,r2
10000ea4:	00046600 	call	10004660 <__mulsi3>
10000ea8:	1007883a 	mov	r3,r2
10000eac:	e0bff917 	ldw	r2,-28(fp)
10000eb0:	1885883a 	add	r2,r3,r2
10000eb4:	1085883a 	add	r2,r2,r2
10000eb8:	1085883a 	add	r2,r2,r2
10000ebc:	8085883a 	add	r2,r16,r2
10000ec0:	10800017 	ldw	r2,0(r2)
10000ec4:	10803fd8 	cmpnei	r2,r2,255
10000ec8:	10006b1e 	bne	r2,zero,10001078 <try_move_player+0x2f0>
        // Move to new grid, no collision
		int id = grid[new_grid_x][new_grid_y];
10000ecc:	040400b4 	movhi	r16,4098
10000ed0:	84290604 	addi	r16,r16,-23528
10000ed4:	e0bff817 	ldw	r2,-32(fp)
10000ed8:	014003c4 	movi	r5,15
10000edc:	1009883a 	mov	r4,r2
10000ee0:	00046600 	call	10004660 <__mulsi3>
10000ee4:	1007883a 	mov	r3,r2
10000ee8:	e0bff917 	ldw	r2,-28(fp)
10000eec:	1885883a 	add	r2,r3,r2
10000ef0:	1085883a 	add	r2,r2,r2
10000ef4:	1085883a 	add	r2,r2,r2
10000ef8:	8085883a 	add	r2,r16,r2
10000efc:	10800017 	ldw	r2,0(r2)
10000f00:	e0bffa15 	stw	r2,-24(fp)
		int target_x, target_y;
		if (id > 0) {
10000f04:	e0bffa17 	ldw	r2,-24(fp)
10000f08:	0080110e 	bge	zero,r2,10000f50 <try_move_player+0x1c8>
			target_x = zombie[id].x;
10000f0c:	008400b4 	movhi	r2,4098
10000f10:	10aa3204 	addi	r2,r2,-22328
10000f14:	e0fffa17 	ldw	r3,-24(fp)
10000f18:	1806917a 	slli	r3,r3,5
10000f1c:	10c5883a 	add	r2,r2,r3
10000f20:	10800104 	addi	r2,r2,4
10000f24:	10800017 	ldw	r2,0(r2)
10000f28:	e0bff415 	stw	r2,-48(fp)
			target_y = zombie[id].y;
10000f2c:	008400b4 	movhi	r2,4098
10000f30:	10aa3204 	addi	r2,r2,-22328
10000f34:	e0fffa17 	ldw	r3,-24(fp)
10000f38:	1806917a 	slli	r3,r3,5
10000f3c:	10c5883a 	add	r2,r2,r3
10000f40:	10800204 	addi	r2,r2,8
10000f44:	10800017 	ldw	r2,0(r2)
10000f48:	e0bff515 	stw	r2,-44(fp)
10000f4c:	00001406 	br	10000fa0 <try_move_player+0x218>
		} else if (id == INDEX_PLAYER_1) {
10000f50:	e0bffa17 	ldw	r2,-24(fp)
10000f54:	10bfffd8 	cmpnei	r2,r2,-1
10000f58:	1000091e 	bne	r2,zero,10000f80 <try_move_player+0x1f8>
			target_x = player_1.x;
10000f5c:	008400b4 	movhi	r2,4098
10000f60:	10aad204 	addi	r2,r2,-21688
10000f64:	10800017 	ldw	r2,0(r2)
10000f68:	e0bff415 	stw	r2,-48(fp)
			target_y = player_1.y;
10000f6c:	008400b4 	movhi	r2,4098
10000f70:	10aad204 	addi	r2,r2,-21688
10000f74:	10800117 	ldw	r2,4(r2)
10000f78:	e0bff515 	stw	r2,-44(fp)
10000f7c:	00000806 	br	10000fa0 <try_move_player+0x218>
		} else {
			target_x = player_2.x;
10000f80:	008400b4 	movhi	r2,4098
10000f84:	10aadb04 	addi	r2,r2,-21652
10000f88:	10800017 	ldw	r2,0(r2)
10000f8c:	e0bff415 	stw	r2,-48(fp)
			target_y = player_2.y;
10000f90:	008400b4 	movhi	r2,4098
10000f94:	10aadb04 	addi	r2,r2,-21652
10000f98:	10800117 	ldw	r2,4(r2)
10000f9c:	e0bff515 	stw	r2,-44(fp)
		}
		if (abs(target_x - new_x) > 32 && abs(target_y - new_y) > 32) {
10000fa0:	e0fff417 	ldw	r3,-48(fp)
10000fa4:	e0bffc17 	ldw	r2,-16(fp)
10000fa8:	1885c83a 	sub	r2,r3,r2
10000fac:	1000010e 	bge	r2,zero,10000fb4 <try_move_player+0x22c>
10000fb0:	0085c83a 	sub	r2,zero,r2
10000fb4:	10800850 	cmplti	r2,r2,33
10000fb8:	10002f1e 	bne	r2,zero,10001078 <try_move_player+0x2f0>
10000fbc:	e0fff517 	ldw	r3,-44(fp)
10000fc0:	e0bffd17 	ldw	r2,-12(fp)
10000fc4:	1885c83a 	sub	r2,r3,r2
10000fc8:	1000010e 	bge	r2,zero,10000fd0 <try_move_player+0x248>
10000fcc:	0085c83a 	sub	r2,zero,r2
10000fd0:	10800850 	cmplti	r2,r2,33
10000fd4:	1000281e 	bne	r2,zero,10001078 <try_move_player+0x2f0>
			grid[grid_x][grid_y] = INDEX_NOTHING;
10000fd8:	040400b4 	movhi	r16,4098
10000fdc:	84290604 	addi	r16,r16,-23528
10000fe0:	e0bff617 	ldw	r2,-40(fp)
10000fe4:	014003c4 	movi	r5,15
10000fe8:	1009883a 	mov	r4,r2
10000fec:	00046600 	call	10004660 <__mulsi3>
10000ff0:	1007883a 	mov	r3,r2
10000ff4:	e0bff717 	ldw	r2,-36(fp)
10000ff8:	1885883a 	add	r2,r3,r2
10000ffc:	1085883a 	add	r2,r2,r2
10001000:	1085883a 	add	r2,r2,r2
10001004:	8085883a 	add	r2,r16,r2
10001008:	00c03fc4 	movi	r3,255
1000100c:	10c00015 	stw	r3,0(r2)
			grid[new_grid_x][new_grid_y] = (p == &player_1 ? INDEX_PLAYER_1 : INDEX_PLAYER_2);
10001010:	e0fffb17 	ldw	r3,-20(fp)
10001014:	008400b4 	movhi	r2,4098
10001018:	10aad204 	addi	r2,r2,-21688
1000101c:	1880021e 	bne	r3,r2,10001028 <try_move_player+0x2a0>
10001020:	047fffc4 	movi	r17,-1
10001024:	00000106 	br	1000102c <try_move_player+0x2a4>
10001028:	047fff84 	movi	r17,-2
1000102c:	040400b4 	movhi	r16,4098
10001030:	84290604 	addi	r16,r16,-23528
10001034:	e0bff817 	ldw	r2,-32(fp)
10001038:	014003c4 	movi	r5,15
1000103c:	1009883a 	mov	r4,r2
10001040:	00046600 	call	10004660 <__mulsi3>
10001044:	1007883a 	mov	r3,r2
10001048:	e0bff917 	ldw	r2,-28(fp)
1000104c:	1885883a 	add	r2,r3,r2
10001050:	1085883a 	add	r2,r2,r2
10001054:	1085883a 	add	r2,r2,r2
10001058:	8085883a 	add	r2,r16,r2
1000105c:	14400015 	stw	r17,0(r2)
			p->x = new_x;
10001060:	e0bffb17 	ldw	r2,-20(fp)
10001064:	e0fffc17 	ldw	r3,-16(fp)
10001068:	10c00015 	stw	r3,0(r2)
			p->y = new_y;
1000106c:	e0bffb17 	ldw	r2,-20(fp)
10001070:	e0fffd17 	ldw	r3,-12(fp)
10001074:	10c00115 	stw	r3,4(r2)
		}
    }  // otherwise, do not move
}
10001078:	0001883a 	nop
1000107c:	e6fffe04 	addi	sp,fp,-8
10001080:	dfc00317 	ldw	ra,12(sp)
10001084:	df000217 	ldw	fp,8(sp)
10001088:	dc400117 	ldw	r17,4(sp)
1000108c:	dc000017 	ldw	r16,0(sp)
10001090:	dec00404 	addi	sp,sp,16
10001094:	f800283a 	ret

10001098 <update_player>:

void update_player(player_t *p, int direction, int attack) {
10001098:	deffef04 	addi	sp,sp,-68
1000109c:	dfc01015 	stw	ra,64(sp)
100010a0:	df000f15 	stw	fp,60(sp)
100010a4:	dc000e15 	stw	r16,56(sp)
100010a8:	df000f04 	addi	fp,sp,60
100010ac:	e13ffc15 	stw	r4,-16(fp)
100010b0:	e17ffd15 	stw	r5,-12(fp)
100010b4:	e1bffe15 	stw	r6,-8(fp)

    int dx = DX[p->direction], dy = DY[p->direction];
100010b8:	e0bffc17 	ldw	r2,-16(fp)
100010bc:	10c00317 	ldw	r3,12(r2)
100010c0:	00840074 	movhi	r2,4097
100010c4:	108f7004 	addi	r2,r2,15808
100010c8:	18c7883a 	add	r3,r3,r3
100010cc:	18c7883a 	add	r3,r3,r3
100010d0:	10c5883a 	add	r2,r2,r3
100010d4:	10800017 	ldw	r2,0(r2)
100010d8:	e0bff215 	stw	r2,-56(fp)
100010dc:	e0bffc17 	ldw	r2,-16(fp)
100010e0:	10c00317 	ldw	r3,12(r2)
100010e4:	00840074 	movhi	r2,4097
100010e8:	108f7804 	addi	r2,r2,15840
100010ec:	18c7883a 	add	r3,r3,r3
100010f0:	18c7883a 	add	r3,r3,r3
100010f4:	10c5883a 	add	r2,r2,r3
100010f8:	10800017 	ldw	r2,0(r2)
100010fc:	e0bff315 	stw	r2,-52(fp)
    int grid_x = TO_GRID(p->x), grid_y = TO_GRID(p->y);
10001100:	e0bffc17 	ldw	r2,-16(fp)
10001104:	10800017 	ldw	r2,0(r2)
10001108:	1000010e 	bge	r2,zero,10001110 <update_player+0x78>
1000110c:	108007c4 	addi	r2,r2,31
10001110:	1005d17a 	srai	r2,r2,5
10001114:	e0bff415 	stw	r2,-48(fp)
10001118:	e0bffc17 	ldw	r2,-16(fp)
1000111c:	10800117 	ldw	r2,4(r2)
10001120:	1000010e 	bge	r2,zero,10001128 <update_player+0x90>
10001124:	108007c4 	addi	r2,r2,31
10001128:	1005d17a 	srai	r2,r2,5
1000112c:	e0bff515 	stw	r2,-44(fp)

    if (p->fire_interval > 0) --p->fire_interval;
10001130:	e0bffc17 	ldw	r2,-16(fp)
10001134:	10800817 	ldw	r2,32(r2)
10001138:	0080050e 	bge	zero,r2,10001150 <update_player+0xb8>
1000113c:	e0bffc17 	ldw	r2,-16(fp)
10001140:	10800817 	ldw	r2,32(r2)
10001144:	10ffffc4 	addi	r3,r2,-1
10001148:	e0bffc17 	ldw	r2,-16(fp)
1000114c:	10c00815 	stw	r3,32(r2)

    switch (p->action) {
10001150:	e0bffc17 	ldw	r2,-16(fp)
10001154:	10800617 	ldw	r2,24(r2)
10001158:	10c000e0 	cmpeqi	r3,r2,3
1000115c:	18009b1e 	bne	r3,zero,100013cc <update_player+0x334>
10001160:	10c00120 	cmpeqi	r3,r2,4
10001164:	1800a71e 	bne	r3,zero,10001404 <update_player+0x36c>
10001168:	1000bc1e 	bne	r2,zero,1000145c <update_player+0x3c4>
        case WALK:

            if (direction != -1) {
1000116c:	e0bffd17 	ldw	r2,-12(fp)
10001170:	10bfffe0 	cmpeqi	r2,r2,-1
10001174:	10002b1e 	bne	r2,zero,10001224 <update_player+0x18c>
                if (direction == p->direction) {
10001178:	e0bffc17 	ldw	r2,-16(fp)
1000117c:	10c00317 	ldw	r3,12(r2)
10001180:	e0bffd17 	ldw	r2,-12(fp)
10001184:	18801c1e 	bne	r3,r2,100011f8 <update_player+0x160>
                    // Do not need to rotate, move
                    int new_x = p->x + dx * PLAYER_MOVE, new_y = p->y + dy * PLAYER_MOVE;
10001188:	e0bffc17 	ldw	r2,-16(fp)
1000118c:	14000017 	ldw	r16,0(r2)
10001190:	01400184 	movi	r5,6
10001194:	e13ff217 	ldw	r4,-56(fp)
10001198:	00046600 	call	10004660 <__mulsi3>
1000119c:	8085883a 	add	r2,r16,r2
100011a0:	e0bff615 	stw	r2,-40(fp)
100011a4:	e0bffc17 	ldw	r2,-16(fp)
100011a8:	14000117 	ldw	r16,4(r2)
100011ac:	01400184 	movi	r5,6
100011b0:	e13ff317 	ldw	r4,-52(fp)
100011b4:	00046600 	call	10004660 <__mulsi3>
100011b8:	8085883a 	add	r2,r16,r2
100011bc:	e0bff715 	stw	r2,-36(fp)
                    try_move_player(p, new_x, new_y);
100011c0:	e1bff717 	ldw	r6,-36(fp)
100011c4:	e17ff617 	ldw	r5,-40(fp)
100011c8:	e13ffc17 	ldw	r4,-16(fp)
100011cc:	0000d880 	call	10000d88 <try_move_player>
                    p->direction = direction;
                    p->action = WALK;
                    p->frame = 0;
                    return;
                }
                p->frame++;
100011d0:	e0bffc17 	ldw	r2,-16(fp)
100011d4:	10800717 	ldw	r2,28(r2)
100011d8:	10c00044 	addi	r3,r2,1
100011dc:	e0bffc17 	ldw	r2,-16(fp)
100011e0:	10c00715 	stw	r3,28(r2)
                if (p->frame >= PLAYER_WALK_FRAME_COUNT) p->frame = 0;
100011e4:	e0bffc17 	ldw	r2,-16(fp)
100011e8:	10800717 	ldw	r2,28(r2)
100011ec:	10800210 	cmplti	r2,r2,8
100011f0:	10000e1e 	bne	r2,zero,1000122c <update_player+0x194>
100011f4:	00000806 	br	10001218 <update_player+0x180>
                    int new_x = p->x + dx * PLAYER_MOVE, new_y = p->y + dy * PLAYER_MOVE;
                    try_move_player(p, new_x, new_y);

                } else {
                    // Need to rotate, rotate immediately
                    p->direction = direction;
100011f8:	e0bffc17 	ldw	r2,-16(fp)
100011fc:	e0fffd17 	ldw	r3,-12(fp)
10001200:	10c00315 	stw	r3,12(r2)
                    p->action = WALK;
10001204:	e0bffc17 	ldw	r2,-16(fp)
10001208:	10000615 	stw	zero,24(r2)
                    p->frame = 0;
1000120c:	e0bffc17 	ldw	r2,-16(fp)
10001210:	10000715 	stw	zero,28(r2)
                    return;
10001214:	00009706 	br	10001474 <update_player+0x3dc>
                }
                p->frame++;
                if (p->frame >= PLAYER_WALK_FRAME_COUNT) p->frame = 0;
10001218:	e0bffc17 	ldw	r2,-16(fp)
1000121c:	10000715 	stw	zero,28(r2)
10001220:	00000206 	br	1000122c <update_player+0x194>
            } else {
                p->frame = 0;
10001224:	e0bffc17 	ldw	r2,-16(fp)
10001228:	10000715 	stw	zero,28(r2)
            }

            if (attack == 1 && p->fire_interval == 0) {
1000122c:	e0bffe17 	ldw	r2,-8(fp)
10001230:	10800058 	cmpnei	r2,r2,1
10001234:	10008e1e 	bne	r2,zero,10001470 <update_player+0x3d8>
10001238:	e0bffc17 	ldw	r2,-16(fp)
1000123c:	10800817 	ldw	r2,32(r2)
10001240:	10008b1e 	bne	r2,zero,10001470 <update_player+0x3d8>
                for (int i = 1; i <= PLAYER_FIRE_RANGE_IN_GRID; ++i) {
10001244:	00800044 	movi	r2,1
10001248:	e0bff115 	stw	r2,-60(fp)
1000124c:	00005606 	br	100013a8 <update_player+0x310>
                    int gx = grid_x + dx * i;
10001250:	e17ff117 	ldw	r5,-60(fp)
10001254:	e13ff217 	ldw	r4,-56(fp)
10001258:	00046600 	call	10004660 <__mulsi3>
1000125c:	1007883a 	mov	r3,r2
10001260:	e0bff417 	ldw	r2,-48(fp)
10001264:	1885883a 	add	r2,r3,r2
10001268:	e0bff815 	stw	r2,-32(fp)
                    int gy = grid_y + dy * i;
1000126c:	e17ff117 	ldw	r5,-60(fp)
10001270:	e13ff317 	ldw	r4,-52(fp)
10001274:	00046600 	call	10004660 <__mulsi3>
10001278:	1007883a 	mov	r3,r2
1000127c:	e0bff517 	ldw	r2,-44(fp)
10001280:	1885883a 	add	r2,r3,r2
10001284:	e0bff915 	stw	r2,-28(fp)
                    if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
10001288:	e0bff817 	ldw	r2,-32(fp)
1000128c:	10004316 	blt	r2,zero,1000139c <update_player+0x304>
10001290:	e0bff817 	ldw	r2,-32(fp)
10001294:	10800508 	cmpgei	r2,r2,20
10001298:	1000401e 	bne	r2,zero,1000139c <update_player+0x304>
1000129c:	e0bff917 	ldw	r2,-28(fp)
100012a0:	10003e16 	blt	r2,zero,1000139c <update_player+0x304>
100012a4:	e0bff917 	ldw	r2,-28(fp)
100012a8:	108003c8 	cmpgei	r2,r2,15
100012ac:	10003b1e 	bne	r2,zero,1000139c <update_player+0x304>
                        int id = grid[gx][gy];
100012b0:	040400b4 	movhi	r16,4098
100012b4:	84290604 	addi	r16,r16,-23528
100012b8:	e0bff817 	ldw	r2,-32(fp)
100012bc:	014003c4 	movi	r5,15
100012c0:	1009883a 	mov	r4,r2
100012c4:	00046600 	call	10004660 <__mulsi3>
100012c8:	1007883a 	mov	r3,r2
100012cc:	e0bff917 	ldw	r2,-28(fp)
100012d0:	1885883a 	add	r2,r3,r2
100012d4:	1085883a 	add	r2,r2,r2
100012d8:	1085883a 	add	r2,r2,r2
100012dc:	8085883a 	add	r2,r16,r2
100012e0:	10800017 	ldw	r2,0(r2)
100012e4:	e0bffa15 	stw	r2,-24(fp)
                        if (id != INDEX_NOTHING) {
100012e8:	e0bffa17 	ldw	r2,-24(fp)
100012ec:	10803fe0 	cmpeqi	r2,r2,255
100012f0:	10002a1e 	bne	r2,zero,1000139c <update_player+0x304>
                            if (id < 0) {  // friend fire
100012f4:	e0bffa17 	ldw	r2,-24(fp)
100012f8:	10002f16 	blt	r2,zero,100013b8 <update_player+0x320>
                                break;  // if not break, it's raygun
                            } else if (zombie[id].action != DIE) {
100012fc:	008400b4 	movhi	r2,4098
10001300:	10aa3204 	addi	r2,r2,-22328
10001304:	e0fffa17 	ldw	r3,-24(fp)
10001308:	1806917a 	slli	r3,r3,5
1000130c:	10c5883a 	add	r2,r2,r3
10001310:	10800504 	addi	r2,r2,20
10001314:	10800017 	ldw	r2,0(r2)
10001318:	10800120 	cmpeqi	r2,r2,4
1000131c:	10001f1e 	bne	r2,zero,1000139c <update_player+0x304>
                                zombie_t *z = &zombie[id];
10001320:	e0bffa17 	ldw	r2,-24(fp)
10001324:	1006917a 	slli	r3,r2,5
10001328:	008400b4 	movhi	r2,4098
1000132c:	10aa3204 	addi	r2,r2,-22328
10001330:	1885883a 	add	r2,r3,r2
10001334:	e0bffb15 	stw	r2,-20(fp)
                                z->blood -= PLAYER_ATTACK;
10001338:	e0bffb17 	ldw	r2,-20(fp)
1000133c:	10800317 	ldw	r2,12(r2)
10001340:	10fff9c4 	addi	r3,r2,-25
10001344:	e0bffb17 	ldw	r2,-20(fp)
10001348:	10c00315 	stw	r3,12(r2)
                                z->direction = (p->direction + 4) % 8;  // opposite
1000134c:	e0bffc17 	ldw	r2,-16(fp)
10001350:	10800317 	ldw	r2,12(r2)
10001354:	10c00104 	addi	r3,r2,4
10001358:	00a00034 	movhi	r2,32768
1000135c:	108001c4 	addi	r2,r2,7
10001360:	1884703a 	and	r2,r3,r2
10001364:	1000040e 	bge	r2,zero,10001378 <update_player+0x2e0>
10001368:	10bfffc4 	addi	r2,r2,-1
1000136c:	00fffe04 	movi	r3,-8
10001370:	10c4b03a 	or	r2,r2,r3
10001374:	10800044 	addi	r2,r2,1
10001378:	1007883a 	mov	r3,r2
1000137c:	e0bffb17 	ldw	r2,-20(fp)
10001380:	10c00615 	stw	r3,24(r2)
                                z->action = HIT;
10001384:	e0bffb17 	ldw	r2,-20(fp)
10001388:	00c000c4 	movi	r3,3
1000138c:	10c00515 	stw	r3,20(r2)
                                z->frame = 0;
10001390:	e0bffb17 	ldw	r2,-20(fp)
10001394:	10000715 	stw	zero,28(r2)
                                break;  // if not break, it's raygun
10001398:	00000806 	br	100013bc <update_player+0x324>
            } else {
                p->frame = 0;
            }

            if (attack == 1 && p->fire_interval == 0) {
                for (int i = 1; i <= PLAYER_FIRE_RANGE_IN_GRID; ++i) {
1000139c:	e0bff117 	ldw	r2,-60(fp)
100013a0:	10800044 	addi	r2,r2,1
100013a4:	e0bff115 	stw	r2,-60(fp)
100013a8:	e0bff117 	ldw	r2,-60(fp)
100013ac:	10800410 	cmplti	r2,r2,16
100013b0:	103fa71e 	bne	r2,zero,10001250 <__alt_data_end+0xf8001250>
100013b4:	00000106 	br	100013bc <update_player+0x324>
                    int gy = grid_y + dy * i;
                    if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
                        int id = grid[gx][gy];
                        if (id != INDEX_NOTHING) {
                            if (id < 0) {  // friend fire
                                break;  // if not break, it's raygun
100013b8:	0001883a 	nop
                                break;  // if not break, it's raygun
                            }
                        }
                    }
                }
                p->fire_interval = PLAYER_FIRE_INTERVAL;
100013bc:	e0bffc17 	ldw	r2,-16(fp)
100013c0:	00c00284 	movi	r3,10
100013c4:	10c00815 	stw	r3,32(r2)
            }

            break;
100013c8:	00002906 	br	10001470 <update_player+0x3d8>
            // try_move_player(p,
            //                 p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
            //                 p->y - dy * PLAYER_HIT_FRAME_MOVEMENT[p->frame]);
            // p->frame++;
            // if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
                if (p->blood > 0) {
100013cc:	e0bffc17 	ldw	r2,-16(fp)
100013d0:	10800217 	ldw	r2,8(r2)
100013d4:	0080050e 	bge	zero,r2,100013ec <update_player+0x354>
                    p->action = WALK;
100013d8:	e0bffc17 	ldw	r2,-16(fp)
100013dc:	10000615 	stw	zero,24(r2)
                    p->frame = 0;
100013e0:	e0bffc17 	ldw	r2,-16(fp)
100013e4:	10000715 	stw	zero,28(r2)
                    return;
100013e8:	00002206 	br	10001474 <update_player+0x3dc>
                } else {
                    p->action = DIE;
100013ec:	e0bffc17 	ldw	r2,-16(fp)
100013f0:	00c00104 	movi	r3,4
100013f4:	10c00615 	stw	r3,24(r2)
                    p->frame = 0;
100013f8:	e0bffc17 	ldw	r2,-16(fp)
100013fc:	10000715 	stw	zero,28(r2)
                    return;
10001400:	00001c06 	br	10001474 <update_player+0x3dc>
                }
            // }
            break;
        case DIE:
            p->frame++;
10001404:	e0bffc17 	ldw	r2,-16(fp)
10001408:	10800717 	ldw	r2,28(r2)
1000140c:	10c00044 	addi	r3,r2,1
10001410:	e0bffc17 	ldw	r2,-16(fp)
10001414:	10c00715 	stw	r3,28(r2)
            // if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
                p->enable = 0;
10001418:	e0bffc17 	ldw	r2,-16(fp)
1000141c:	10000415 	stw	zero,16(r2)
                grid[grid_x][grid_y] = INDEX_NOTHING;
10001420:	040400b4 	movhi	r16,4098
10001424:	84290604 	addi	r16,r16,-23528
10001428:	e0bff417 	ldw	r2,-48(fp)
1000142c:	014003c4 	movi	r5,15
10001430:	1009883a 	mov	r4,r2
10001434:	00046600 	call	10004660 <__mulsi3>
10001438:	1007883a 	mov	r3,r2
1000143c:	e0bff517 	ldw	r2,-44(fp)
10001440:	1885883a 	add	r2,r3,r2
10001444:	1085883a 	add	r2,r2,r2
10001448:	1085883a 	add	r2,r2,r2
1000144c:	8085883a 	add	r2,r16,r2
10001450:	00c03fc4 	movi	r3,255
10001454:	10c00015 	stw	r3,0(r2)
                return;
10001458:	00000606 	br	10001474 <update_player+0x3dc>
            // }
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
1000145c:	01040074 	movhi	r4,4097
10001460:	210f8504 	addi	r4,r4,15892
10001464:	00047b40 	call	100047b4 <puts>
            break;
10001468:	0001883a 	nop
1000146c:	00000106 	br	10001474 <update_player+0x3dc>
                    }
                }
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
10001470:	0001883a 	nop
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
            break;
    }
}
10001474:	e6ffff04 	addi	sp,fp,-4
10001478:	dfc00217 	ldw	ra,8(sp)
1000147c:	df000117 	ldw	fp,4(sp)
10001480:	dc000017 	ldw	r16,0(sp)
10001484:	dec00304 	addi	sp,sp,12
10001488:	f800283a 	ret

1000148c <init_game>:

void init_game() {
1000148c:	defffa04 	addi	sp,sp,-24
10001490:	dfc00515 	stw	ra,20(sp)
10001494:	df000415 	stw	fp,16(sp)
10001498:	dc400315 	stw	r17,12(sp)
1000149c:	dc000215 	stw	r16,8(sp)
100014a0:	df000404 	addi	fp,sp,16
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
100014a4:	e03ffc15 	stw	zero,-16(fp)
100014a8:	00001906 	br	10001510 <init_game+0x84>
        for (j = 0; j < GRID_Y_COUNT; j++) {
100014ac:	e03ffd15 	stw	zero,-12(fp)
100014b0:	00001106 	br	100014f8 <init_game+0x6c>
            grid[i][j] = INDEX_NOTHING;
100014b4:	040400b4 	movhi	r16,4098
100014b8:	84290604 	addi	r16,r16,-23528
100014bc:	e0bffc17 	ldw	r2,-16(fp)
100014c0:	014003c4 	movi	r5,15
100014c4:	1009883a 	mov	r4,r2
100014c8:	00046600 	call	10004660 <__mulsi3>
100014cc:	1007883a 	mov	r3,r2
100014d0:	e0bffd17 	ldw	r2,-12(fp)
100014d4:	1885883a 	add	r2,r3,r2
100014d8:	1085883a 	add	r2,r2,r2
100014dc:	1085883a 	add	r2,r2,r2
100014e0:	8085883a 	add	r2,r16,r2
100014e4:	00c03fc4 	movi	r3,255
100014e8:	10c00015 	stw	r3,0(r2)
}

void init_game() {
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
        for (j = 0; j < GRID_Y_COUNT; j++) {
100014ec:	e0bffd17 	ldw	r2,-12(fp)
100014f0:	10800044 	addi	r2,r2,1
100014f4:	e0bffd15 	stw	r2,-12(fp)
100014f8:	e0bffd17 	ldw	r2,-12(fp)
100014fc:	108003d0 	cmplti	r2,r2,15
10001500:	103fec1e 	bne	r2,zero,100014b4 <__alt_data_end+0xf80014b4>
    }
}

void init_game() {
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
10001504:	e0bffc17 	ldw	r2,-16(fp)
10001508:	10800044 	addi	r2,r2,1
1000150c:	e0bffc15 	stw	r2,-16(fp)
10001510:	e0bffc17 	ldw	r2,-16(fp)
10001514:	10800510 	cmplti	r2,r2,20
10001518:	103fe41e 	bne	r2,zero,100014ac <__alt_data_end+0xf80014ac>
        for (j = 0; j < GRID_Y_COUNT; j++) {
            grid[i][j] = INDEX_NOTHING;
        }
    }

    player_1.x = PLAYER_1_BORN_X;
1000151c:	008400b4 	movhi	r2,4098
10001520:	10aad204 	addi	r2,r2,-21688
10001524:	00c03544 	movi	r3,213
10001528:	10c00015 	stw	r3,0(r2)
    player_1.y = PLAYER_1_BORN_Y;
1000152c:	008400b4 	movhi	r2,4098
10001530:	10aad204 	addi	r2,r2,-21688
10001534:	00c03c04 	movi	r3,240
10001538:	10c00115 	stw	r3,4(r2)
    player_1.blood = 100;
1000153c:	008400b4 	movhi	r2,4098
10001540:	10aad204 	addi	r2,r2,-21688
10001544:	00c01904 	movi	r3,100
10001548:	10c00215 	stw	r3,8(r2)
    grid[TO_GRID(player_1.x)][TO_GRID(player_1.y)] = INDEX_PLAYER_1;
1000154c:	008400b4 	movhi	r2,4098
10001550:	10aad204 	addi	r2,r2,-21688
10001554:	10800017 	ldw	r2,0(r2)
10001558:	1000010e 	bge	r2,zero,10001560 <init_game+0xd4>
1000155c:	108007c4 	addi	r2,r2,31
10001560:	1005d17a 	srai	r2,r2,5
10001564:	1007883a 	mov	r3,r2
10001568:	008400b4 	movhi	r2,4098
1000156c:	10aad204 	addi	r2,r2,-21688
10001570:	10800117 	ldw	r2,4(r2)
10001574:	1000010e 	bge	r2,zero,1000157c <init_game+0xf0>
10001578:	108007c4 	addi	r2,r2,31
1000157c:	1005d17a 	srai	r2,r2,5
10001580:	1023883a 	mov	r17,r2
10001584:	040400b4 	movhi	r16,4098
10001588:	84290604 	addi	r16,r16,-23528
1000158c:	014003c4 	movi	r5,15
10001590:	1809883a 	mov	r4,r3
10001594:	00046600 	call	10004660 <__mulsi3>
10001598:	1445883a 	add	r2,r2,r17
1000159c:	1085883a 	add	r2,r2,r2
100015a0:	1085883a 	add	r2,r2,r2
100015a4:	8085883a 	add	r2,r16,r2
100015a8:	00ffffc4 	movi	r3,-1
100015ac:	10c00015 	stw	r3,0(r2)
    player_1.enable = 1;
100015b0:	008400b4 	movhi	r2,4098
100015b4:	10aad204 	addi	r2,r2,-21688
100015b8:	00c00044 	movi	r3,1
100015bc:	10c00415 	stw	r3,16(r2)
    player_1.credit = 0;
100015c0:	008400b4 	movhi	r2,4098
100015c4:	10aad204 	addi	r2,r2,-21688
100015c8:	10000515 	stw	zero,20(r2)
    player_1.action = WALK;
100015cc:	008400b4 	movhi	r2,4098
100015d0:	10aad204 	addi	r2,r2,-21688
100015d4:	10000615 	stw	zero,24(r2)
    player_1.direction = 0;
100015d8:	008400b4 	movhi	r2,4098
100015dc:	10aad204 	addi	r2,r2,-21688
100015e0:	10000315 	stw	zero,12(r2)
    player_1.frame = 0;
100015e4:	008400b4 	movhi	r2,4098
100015e8:	10aad204 	addi	r2,r2,-21688
100015ec:	10000715 	stw	zero,28(r2)
    player_1.fire_interval = 0;
100015f0:	008400b4 	movhi	r2,4098
100015f4:	10aad204 	addi	r2,r2,-21688
100015f8:	10000815 	stw	zero,32(r2)

    player_2.x = PLAYER_2_BORN_X;
100015fc:	008400b4 	movhi	r2,4098
10001600:	10aadb04 	addi	r2,r2,-21652
10001604:	00c06a84 	movi	r3,426
10001608:	10c00015 	stw	r3,0(r2)
    player_2.y = PLAYER_2_BORN_Y;
1000160c:	008400b4 	movhi	r2,4098
10001610:	10aadb04 	addi	r2,r2,-21652
10001614:	00c03c04 	movi	r3,240
10001618:	10c00115 	stw	r3,4(r2)
    player_2.blood = 100;
1000161c:	008400b4 	movhi	r2,4098
10001620:	10aadb04 	addi	r2,r2,-21652
10001624:	00c01904 	movi	r3,100
10001628:	10c00215 	stw	r3,8(r2)
    grid[TO_GRID(player_2.x)][TO_GRID(player_2.y)] = INDEX_PLAYER_2;
1000162c:	008400b4 	movhi	r2,4098
10001630:	10aadb04 	addi	r2,r2,-21652
10001634:	10800017 	ldw	r2,0(r2)
10001638:	1000010e 	bge	r2,zero,10001640 <init_game+0x1b4>
1000163c:	108007c4 	addi	r2,r2,31
10001640:	1005d17a 	srai	r2,r2,5
10001644:	1007883a 	mov	r3,r2
10001648:	008400b4 	movhi	r2,4098
1000164c:	10aadb04 	addi	r2,r2,-21652
10001650:	10800117 	ldw	r2,4(r2)
10001654:	1000010e 	bge	r2,zero,1000165c <init_game+0x1d0>
10001658:	108007c4 	addi	r2,r2,31
1000165c:	1005d17a 	srai	r2,r2,5
10001660:	1023883a 	mov	r17,r2
10001664:	040400b4 	movhi	r16,4098
10001668:	84290604 	addi	r16,r16,-23528
1000166c:	014003c4 	movi	r5,15
10001670:	1809883a 	mov	r4,r3
10001674:	00046600 	call	10004660 <__mulsi3>
10001678:	1445883a 	add	r2,r2,r17
1000167c:	1085883a 	add	r2,r2,r2
10001680:	1085883a 	add	r2,r2,r2
10001684:	8085883a 	add	r2,r16,r2
10001688:	00ffff84 	movi	r3,-2
1000168c:	10c00015 	stw	r3,0(r2)
    player_2.enable = 1;
10001690:	008400b4 	movhi	r2,4098
10001694:	10aadb04 	addi	r2,r2,-21652
10001698:	00c00044 	movi	r3,1
1000169c:	10c00415 	stw	r3,16(r2)
    player_2.credit = 0;
100016a0:	008400b4 	movhi	r2,4098
100016a4:	10aadb04 	addi	r2,r2,-21652
100016a8:	10000515 	stw	zero,20(r2)
    player_2.action = WALK;
100016ac:	008400b4 	movhi	r2,4098
100016b0:	10aadb04 	addi	r2,r2,-21652
100016b4:	10000615 	stw	zero,24(r2)
    player_2.direction = 0;
100016b8:	008400b4 	movhi	r2,4098
100016bc:	10aadb04 	addi	r2,r2,-21652
100016c0:	10000315 	stw	zero,12(r2)
    player_2.frame = 0;
100016c4:	008400b4 	movhi	r2,4098
100016c8:	10aadb04 	addi	r2,r2,-21652
100016cc:	10000715 	stw	zero,28(r2)
    player_2.fire_interval = 0;
100016d0:	008400b4 	movhi	r2,4098
100016d4:	10aadb04 	addi	r2,r2,-21652
100016d8:	10000815 	stw	zero,32(r2)

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
100016dc:	e03ffc15 	stw	zero,-16(fp)
100016e0:	00001106 	br	10001728 <init_game+0x29c>
        zombie[i].index = i;
100016e4:	008400b4 	movhi	r2,4098
100016e8:	10aa3204 	addi	r2,r2,-22328
100016ec:	e0fffc17 	ldw	r3,-16(fp)
100016f0:	1806917a 	slli	r3,r3,5
100016f4:	10c5883a 	add	r2,r2,r3
100016f8:	e0fffc17 	ldw	r3,-16(fp)
100016fc:	10c00015 	stw	r3,0(r2)
        zombie[i].enable = 0;
10001700:	008400b4 	movhi	r2,4098
10001704:	10aa3204 	addi	r2,r2,-22328
10001708:	e0fffc17 	ldw	r3,-16(fp)
1000170c:	1806917a 	slli	r3,r3,5
10001710:	10c5883a 	add	r2,r2,r3
10001714:	10800404 	addi	r2,r2,16
10001718:	10000015 	stw	zero,0(r2)
    player_2.action = WALK;
    player_2.direction = 0;
    player_2.frame = 0;
    player_2.fire_interval = 0;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
1000171c:	e0bffc17 	ldw	r2,-16(fp)
10001720:	10800044 	addi	r2,r2,1
10001724:	e0bffc15 	stw	r2,-16(fp)
10001728:	e0bffc17 	ldw	r2,-16(fp)
1000172c:	10800510 	cmplti	r2,r2,20
10001730:	103fec1e 	bne	r2,zero,100016e4 <__alt_data_end+0xf80016e4>
        zombie[i].index = i;
        zombie[i].enable = 0;
    }
}
10001734:	0001883a 	nop
10001738:	e6fffe04 	addi	sp,fp,-8
1000173c:	dfc00317 	ldw	ra,12(sp)
10001740:	df000217 	ldw	fp,8(sp)
10001744:	dc400117 	ldw	r17,4(sp)
10001748:	dc000017 	ldw	r16,0(sp)
1000174c:	dec00404 	addi	sp,sp,16
10001750:	f800283a 	ret

10001754 <try_add_zombie>:

int try_add_zombie(zombie_t *z) {
10001754:	defffa04 	addi	sp,sp,-24
10001758:	dfc00515 	stw	ra,20(sp)
1000175c:	df000415 	stw	fp,16(sp)
10001760:	dc800315 	stw	r18,12(sp)
10001764:	dc400215 	stw	r17,8(sp)
10001768:	dc000115 	stw	r16,4(sp)
1000176c:	df000404 	addi	fp,sp,16
10001770:	e13ffc15 	stw	r4,-16(fp)
    if (z->enable != 0) return 1;
10001774:	e0bffc17 	ldw	r2,-16(fp)
10001778:	10800417 	ldw	r2,16(r2)
1000177c:	10000226 	beq	r2,zero,10001788 <try_add_zombie+0x34>
10001780:	00800044 	movi	r2,1
10001784:	00003306 	br	10001854 <try_add_zombie+0x100>

    // Check whether there is zombie at the born place
    if (grid[TO_GRID(ZOMBIE_BORN_X)][TO_GRID(ZOMBIE_BORN_Y)] != INDEX_NOTHING) {
10001788:	008400b4 	movhi	r2,4098
1000178c:	10a90604 	addi	r2,r2,-23528
10001790:	10809817 	ldw	r2,608(r2)
10001794:	10803fe0 	cmpeqi	r2,r2,255
10001798:	1000021e 	bne	r2,zero,100017a4 <try_add_zombie+0x50>
        return 1;
1000179c:	00800044 	movi	r2,1
100017a0:	00002c06 	br	10001854 <try_add_zombie+0x100>
    } else {
        z->x = ZOMBIE_BORN_X;
100017a4:	e0bffc17 	ldw	r2,-16(fp)
100017a8:	00c05004 	movi	r3,320
100017ac:	10c00115 	stw	r3,4(r2)
        z->y = ZOMBIE_BORN_Y;
100017b0:	e0bffc17 	ldw	r2,-16(fp)
100017b4:	00c01004 	movi	r3,64
100017b8:	10c00215 	stw	r3,8(r2)
        z->enable = 1;
100017bc:	e0bffc17 	ldw	r2,-16(fp)
100017c0:	00c00044 	movi	r3,1
100017c4:	10c00415 	stw	r3,16(r2)
        z->blood = 100;
100017c8:	e0bffc17 	ldw	r2,-16(fp)
100017cc:	00c01904 	movi	r3,100
100017d0:	10c00315 	stw	r3,12(r2)
        z->direction = 4;
100017d4:	e0bffc17 	ldw	r2,-16(fp)
100017d8:	00c00104 	movi	r3,4
100017dc:	10c00615 	stw	r3,24(r2)
        z->action = WALK;
100017e0:	e0bffc17 	ldw	r2,-16(fp)
100017e4:	10000515 	stw	zero,20(r2)
        z->frame = 0;
100017e8:	e0bffc17 	ldw	r2,-16(fp)
100017ec:	10000715 	stw	zero,28(r2)
        grid[TO_GRID(z->x)][TO_GRID(z->y)] = z->index;
100017f0:	e0bffc17 	ldw	r2,-16(fp)
100017f4:	10800117 	ldw	r2,4(r2)
100017f8:	1000010e 	bge	r2,zero,10001800 <try_add_zombie+0xac>
100017fc:	108007c4 	addi	r2,r2,31
10001800:	1005d17a 	srai	r2,r2,5
10001804:	1007883a 	mov	r3,r2
10001808:	e0bffc17 	ldw	r2,-16(fp)
1000180c:	10800217 	ldw	r2,8(r2)
10001810:	1000010e 	bge	r2,zero,10001818 <try_add_zombie+0xc4>
10001814:	108007c4 	addi	r2,r2,31
10001818:	1005d17a 	srai	r2,r2,5
1000181c:	1025883a 	mov	r18,r2
10001820:	e0bffc17 	ldw	r2,-16(fp)
10001824:	14400017 	ldw	r17,0(r2)
10001828:	040400b4 	movhi	r16,4098
1000182c:	84290604 	addi	r16,r16,-23528
10001830:	014003c4 	movi	r5,15
10001834:	1809883a 	mov	r4,r3
10001838:	00046600 	call	10004660 <__mulsi3>
1000183c:	1485883a 	add	r2,r2,r18
10001840:	1085883a 	add	r2,r2,r2
10001844:	1085883a 	add	r2,r2,r2
10001848:	8085883a 	add	r2,r16,r2
1000184c:	14400015 	stw	r17,0(r2)
        return 0;
10001850:	0005883a 	mov	r2,zero
    }
}
10001854:	e6fffd04 	addi	sp,fp,-12
10001858:	dfc00417 	ldw	ra,16(sp)
1000185c:	df000317 	ldw	fp,12(sp)
10001860:	dc800217 	ldw	r18,8(sp)
10001864:	dc400117 	ldw	r17,4(sp)
10001868:	dc000017 	ldw	r16,0(sp)
1000186c:	dec00504 	addi	sp,sp,20
10001870:	f800283a 	ret

10001874 <draw_zombie>:

void draw_zombie(const zombie_t *z) {
10001874:	deffef04 	addi	sp,sp,-68
10001878:	dfc01015 	stw	ra,64(sp)
1000187c:	df000f15 	stw	fp,60(sp)
10001880:	dc400e15 	stw	r17,56(sp)
10001884:	dc000d15 	stw	r16,52(sp)
10001888:	df000f04 	addi	fp,sp,60
1000188c:	e13ffd15 	stw	r4,-12(fp)
    int width, height, flip_x, half_width, half_height;
    switch (z->action) {
10001890:	e0bffd17 	ldw	r2,-12(fp)
10001894:	10800517 	ldw	r2,20(r2)
10001898:	10c00168 	cmpgeui	r3,r2,5
1000189c:	18006d1e 	bne	r3,zero,10001a54 <draw_zombie+0x1e0>
100018a0:	100690ba 	slli	r3,r2,2
100018a4:	00840034 	movhi	r2,4096
100018a8:	10862e04 	addi	r2,r2,6328
100018ac:	1885883a 	add	r2,r3,r2
100018b0:	10800017 	ldw	r2,0(r2)
100018b4:	1000683a 	jmp	r2
100018b8:	100018cc 	andi	zero,r2,99
100018bc:	10001958 	cmpnei	zero,r2,101
100018c0:	100019c8 	cmpgei	zero,r2,103
100018c4:	10001a64 	muli	zero,r2,105
100018c8:	10001a64 	muli	zero,r2,105
        case WALK:
            width = ZOMBIE_WALK_WIDTH[z->direction];
100018cc:	e0bffd17 	ldw	r2,-12(fp)
100018d0:	10c00617 	ldw	r3,24(r2)
100018d4:	00840074 	movhi	r2,4097
100018d8:	10926b04 	addi	r2,r2,18860
100018dc:	18c7883a 	add	r3,r3,r3
100018e0:	18c7883a 	add	r3,r3,r3
100018e4:	10c5883a 	add	r2,r2,r3
100018e8:	10800017 	ldw	r2,0(r2)
100018ec:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_WALK_HEIGHT[z->direction];
100018f0:	e0bffd17 	ldw	r2,-12(fp)
100018f4:	10c00617 	ldw	r3,24(r2)
100018f8:	00840074 	movhi	r2,4097
100018fc:	10927304 	addi	r2,r2,18892
10001900:	18c7883a 	add	r3,r3,r3
10001904:	18c7883a 	add	r3,r3,r3
10001908:	10c5883a 	add	r2,r2,r3
1000190c:	10800017 	ldw	r2,0(r2)
10001910:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_WALK_FLIP_X[z->direction];
10001914:	e0bffd17 	ldw	r2,-12(fp)
10001918:	10c00617 	ldw	r3,24(r2)
1000191c:	00840074 	movhi	r2,4097
10001920:	10927b04 	addi	r2,r2,18924
10001924:	18c7883a 	add	r3,r3,r3
10001928:	18c7883a 	add	r3,r3,r3
1000192c:	10c5883a 	add	r2,r2,r3
10001930:	10800017 	ldw	r2,0(r2)
10001934:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) {
10001938:	e0bffd17 	ldw	r2,-12(fp)
1000193c:	10800717 	ldw	r2,28(r2)
10001940:	10800210 	cmplti	r2,r2,8
10001944:	1000491e 	bne	r2,zero,10001a6c <draw_zombie+0x1f8>
                printf("EXCEED ZOMBIE_WALK_FRAME_COUNT!\n");
10001948:	01040074 	movhi	r4,4097
1000194c:	210f8b04 	addi	r4,r4,15916
10001950:	00047b40 	call	100047b4 <puts>
                return;
10001954:	0000be06 	br	10001c50 <draw_zombie+0x3dc>
            }
            break;
        case ROTATE:
            width = ZOMBIE_WALK_WIDTH[z->direction];
10001958:	e0bffd17 	ldw	r2,-12(fp)
1000195c:	10c00617 	ldw	r3,24(r2)
10001960:	00840074 	movhi	r2,4097
10001964:	10926b04 	addi	r2,r2,18860
10001968:	18c7883a 	add	r3,r3,r3
1000196c:	18c7883a 	add	r3,r3,r3
10001970:	10c5883a 	add	r2,r2,r3
10001974:	10800017 	ldw	r2,0(r2)
10001978:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_WALK_HEIGHT[z->direction];
1000197c:	e0bffd17 	ldw	r2,-12(fp)
10001980:	10c00617 	ldw	r3,24(r2)
10001984:	00840074 	movhi	r2,4097
10001988:	10927304 	addi	r2,r2,18892
1000198c:	18c7883a 	add	r3,r3,r3
10001990:	18c7883a 	add	r3,r3,r3
10001994:	10c5883a 	add	r2,r2,r3
10001998:	10800017 	ldw	r2,0(r2)
1000199c:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_WALK_FLIP_X[z->direction];
100019a0:	e0bffd17 	ldw	r2,-12(fp)
100019a4:	10c00617 	ldw	r3,24(r2)
100019a8:	00840074 	movhi	r2,4097
100019ac:	10927b04 	addi	r2,r2,18924
100019b0:	18c7883a 	add	r3,r3,r3
100019b4:	18c7883a 	add	r3,r3,r3
100019b8:	10c5883a 	add	r2,r2,r3
100019bc:	10800017 	ldw	r2,0(r2)
100019c0:	e0bff615 	stw	r2,-40(fp)
            break;
100019c4:	00002c06 	br	10001a78 <draw_zombie+0x204>
        case ATTACK:
            width = ZOMBIE_ATTACK_WIDTH[z->direction];
100019c8:	e0bffd17 	ldw	r2,-12(fp)
100019cc:	10c00617 	ldw	r3,24(r2)
100019d0:	00840074 	movhi	r2,4097
100019d4:	1092c304 	addi	r2,r2,19212
100019d8:	18c7883a 	add	r3,r3,r3
100019dc:	18c7883a 	add	r3,r3,r3
100019e0:	10c5883a 	add	r2,r2,r3
100019e4:	10800017 	ldw	r2,0(r2)
100019e8:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_ATTACK_HEIGHT[z->direction];
100019ec:	e0bffd17 	ldw	r2,-12(fp)
100019f0:	10c00617 	ldw	r3,24(r2)
100019f4:	00840074 	movhi	r2,4097
100019f8:	1092cb04 	addi	r2,r2,19244
100019fc:	18c7883a 	add	r3,r3,r3
10001a00:	18c7883a 	add	r3,r3,r3
10001a04:	10c5883a 	add	r2,r2,r3
10001a08:	10800017 	ldw	r2,0(r2)
10001a0c:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_ATTACK_FLIP_X[z->direction];
10001a10:	e0bffd17 	ldw	r2,-12(fp)
10001a14:	10c00617 	ldw	r3,24(r2)
10001a18:	00840074 	movhi	r2,4097
10001a1c:	1092d304 	addi	r2,r2,19276
10001a20:	18c7883a 	add	r3,r3,r3
10001a24:	18c7883a 	add	r3,r3,r3
10001a28:	10c5883a 	add	r2,r2,r3
10001a2c:	10800017 	ldw	r2,0(r2)
10001a30:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
10001a34:	e0bffd17 	ldw	r2,-12(fp)
10001a38:	10800717 	ldw	r2,28(r2)
10001a3c:	10800610 	cmplti	r2,r2,24
10001a40:	10000c1e 	bne	r2,zero,10001a74 <draw_zombie+0x200>
                printf("EXCEED ZOMBIE_ATTACK_FRAME_COUNT!\n");
10001a44:	01040074 	movhi	r4,4097
10001a48:	210f9304 	addi	r4,r4,15948
10001a4c:	00047b40 	call	100047b4 <puts>
                return;
10001a50:	00007f06 	br	10001c50 <draw_zombie+0x3dc>
            //     printf("EXCEED ZOMBIE_DIE_FRAME_COUNT!\n");
            //     return;
            // }
            break;
        default:
            printf("INVALID ZOMBIE STATE!\n");
10001a54:	01040074 	movhi	r4,4097
10001a58:	210f9c04 	addi	r4,r4,15984
10001a5c:	00047b40 	call	100047b4 <puts>
            return;
10001a60:	00007b06 	br	10001c50 <draw_zombie+0x3dc>
            // flip_x = ZOMBIE_DIE_FLIP_X[z->direction];
            // if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
            //     printf("EXCEED ZOMBIE_DIE_FRAME_COUNT!\n");
            //     return;
            // }
            break;
10001a64:	0001883a 	nop
10001a68:	00000306 	br	10001a78 <draw_zombie+0x204>
            flip_x = ZOMBIE_WALK_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_WALK_FRAME_COUNT!\n");
                return;
            }
            break;
10001a6c:	0001883a 	nop
10001a70:	00000106 	br	10001a78 <draw_zombie+0x204>
            flip_x = ZOMBIE_ATTACK_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_ATTACK_FRAME_COUNT!\n");
                return;
            }
            break;
10001a74:	0001883a 	nop
        default:
            printf("INVALID ZOMBIE STATE!\n");
            return;
    }

    half_width = width / 2;
10001a78:	e0bff417 	ldw	r2,-48(fp)
10001a7c:	1006d7fa 	srli	r3,r2,31
10001a80:	1885883a 	add	r2,r3,r2
10001a84:	1005d07a 	srai	r2,r2,1
10001a88:	e0bff715 	stw	r2,-36(fp)
    half_height = height / 2;
10001a8c:	e0bff517 	ldw	r2,-44(fp)
10001a90:	1006d7fa 	srli	r3,r2,31
10001a94:	1885883a 	add	r2,r3,r2
10001a98:	1005d07a 	srai	r2,r2,1
10001a9c:	e0bff815 	stw	r2,-32(fp)

    int start_x = z->x - half_width;
10001aa0:	e0bffd17 	ldw	r2,-12(fp)
10001aa4:	10c00117 	ldw	r3,4(r2)
10001aa8:	e0bff717 	ldw	r2,-36(fp)
10001aac:	1885c83a 	sub	r2,r3,r2
10001ab0:	e0bff915 	stw	r2,-28(fp)
    int end_x = z->x + (width - half_width);
10001ab4:	e0bffd17 	ldw	r2,-12(fp)
10001ab8:	10c00117 	ldw	r3,4(r2)
10001abc:	e13ff417 	ldw	r4,-48(fp)
10001ac0:	e0bff717 	ldw	r2,-36(fp)
10001ac4:	2085c83a 	sub	r2,r4,r2
10001ac8:	1885883a 	add	r2,r3,r2
10001acc:	e0bffa15 	stw	r2,-24(fp)
    int start_y = z->y - half_height;
10001ad0:	e0bffd17 	ldw	r2,-12(fp)
10001ad4:	10c00217 	ldw	r3,8(r2)
10001ad8:	e0bff817 	ldw	r2,-32(fp)
10001adc:	1885c83a 	sub	r2,r3,r2
10001ae0:	e0bffb15 	stw	r2,-20(fp)
    int end_y = z->y + (height - half_height);
10001ae4:	e0bffd17 	ldw	r2,-12(fp)
10001ae8:	10c00217 	ldw	r3,8(r2)
10001aec:	e13ff517 	ldw	r4,-44(fp)
10001af0:	e0bff817 	ldw	r2,-32(fp)
10001af4:	2085c83a 	sub	r2,r4,r2
10001af8:	1885883a 	add	r2,r3,r2
10001afc:	e0bffc15 	stw	r2,-16(fp)

    switch (z->action) {
10001b00:	e0bffd17 	ldw	r2,-12(fp)
10001b04:	10800517 	ldw	r2,20(r2)
10001b08:	10c00168 	cmpgeui	r3,r2,5
10001b0c:	18004a1e 	bne	r3,zero,10001c38 <draw_zombie+0x3c4>
10001b10:	100690ba 	slli	r3,r2,2
10001b14:	00840034 	movhi	r2,4096
10001b18:	1086ca04 	addi	r2,r2,6952
10001b1c:	1885883a 	add	r2,r3,r2
10001b20:	10800017 	ldw	r2,0(r2)
10001b24:	1000683a 	jmp	r2
10001b28:	10001b3c 	xorhi	zero,r2,108
10001b2c:	10001b94 	ori	zero,r2,110
10001b30:	10001bd8 	cmpnei	zero,r2,111
10001b34:	10001c4c 	andi	zero,r2,113
10001b38:	10001c4c 	andi	zero,r2,113
        case WALK:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_WALK_OFFSET[z->direction][z->frame], 0, flip_x);
10001b3c:	e0bffd17 	ldw	r2,-12(fp)
10001b40:	11000617 	ldw	r4,24(r2)
10001b44:	e0bffd17 	ldw	r2,-12(fp)
10001b48:	10c00717 	ldw	r3,28(r2)
10001b4c:	00840074 	movhi	r2,4097
10001b50:	10928304 	addi	r2,r2,18956
10001b54:	200890fa 	slli	r4,r4,3
10001b58:	20c7883a 	add	r3,r4,r3
10001b5c:	18c7883a 	add	r3,r3,r3
10001b60:	18c7883a 	add	r3,r3,r3
10001b64:	10c5883a 	add	r2,r2,r3
10001b68:	10800017 	ldw	r2,0(r2)
10001b6c:	e0fff617 	ldw	r3,-40(fp)
10001b70:	d8c00215 	stw	r3,8(sp)
10001b74:	d8000115 	stw	zero,4(sp)
10001b78:	d8800015 	stw	r2,0(sp)
10001b7c:	e1fffc17 	ldw	r7,-16(fp)
10001b80:	e1bffb17 	ldw	r6,-20(fp)
10001b84:	e17ffa17 	ldw	r5,-24(fp)
10001b88:	e13ff917 	ldw	r4,-28(fp)
10001b8c:	00021840 	call	10002184 <draw>
            break;
10001b90:	00002f06 	br	10001c50 <draw_zombie+0x3dc>
        case ROTATE:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_WALK_OFFSET[z->direction][0], 0, flip_x);
10001b94:	e0bffd17 	ldw	r2,-12(fp)
10001b98:	10c00617 	ldw	r3,24(r2)
10001b9c:	00840074 	movhi	r2,4097
10001ba0:	10928304 	addi	r2,r2,18956
10001ba4:	1806917a 	slli	r3,r3,5
10001ba8:	10c5883a 	add	r2,r2,r3
10001bac:	10800017 	ldw	r2,0(r2)
10001bb0:	e0fff617 	ldw	r3,-40(fp)
10001bb4:	d8c00215 	stw	r3,8(sp)
10001bb8:	d8000115 	stw	zero,4(sp)
10001bbc:	d8800015 	stw	r2,0(sp)
10001bc0:	e1fffc17 	ldw	r7,-16(fp)
10001bc4:	e1bffb17 	ldw	r6,-20(fp)
10001bc8:	e17ffa17 	ldw	r5,-24(fp)
10001bcc:	e13ff917 	ldw	r4,-28(fp)
10001bd0:	00021840 	call	10002184 <draw>
            break;
10001bd4:	00001e06 	br	10001c50 <draw_zombie+0x3dc>
        case ATTACK:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_ATTACK_OFFSET[z->direction][z->frame], 0, flip_x);
10001bd8:	e0bffd17 	ldw	r2,-12(fp)
10001bdc:	10c00617 	ldw	r3,24(r2)
10001be0:	e0bffd17 	ldw	r2,-12(fp)
10001be4:	14400717 	ldw	r17,28(r2)
10001be8:	04040074 	movhi	r16,4097
10001bec:	8412db04 	addi	r16,r16,19308
10001bf0:	01400604 	movi	r5,24
10001bf4:	1809883a 	mov	r4,r3
10001bf8:	00046600 	call	10004660 <__mulsi3>
10001bfc:	1445883a 	add	r2,r2,r17
10001c00:	1085883a 	add	r2,r2,r2
10001c04:	1085883a 	add	r2,r2,r2
10001c08:	8085883a 	add	r2,r16,r2
10001c0c:	10800017 	ldw	r2,0(r2)
10001c10:	e0fff617 	ldw	r3,-40(fp)
10001c14:	d8c00215 	stw	r3,8(sp)
10001c18:	d8000115 	stw	zero,4(sp)
10001c1c:	d8800015 	stw	r2,0(sp)
10001c20:	e1fffc17 	ldw	r7,-16(fp)
10001c24:	e1bffb17 	ldw	r6,-20(fp)
10001c28:	e17ffa17 	ldw	r5,-24(fp)
10001c2c:	e13ff917 	ldw	r4,-28(fp)
10001c30:	00021840 	call	10002184 <draw>
            break;
10001c34:	00000606 	br	10001c50 <draw_zombie+0x3dc>
            break;
        case DIE:
            // draw(start_x, end_x, start_y, end_y, ZOMBIE_DIE_OFFSET[z->direction][z->frame], 0, flip_x);
            break;
        default:
            printf("INVALID ZOMBIE STATE!\n");
10001c38:	01040074 	movhi	r4,4097
10001c3c:	210f9c04 	addi	r4,r4,15984
10001c40:	00047b40 	call	100047b4 <puts>
            return;
10001c44:	0001883a 	nop
10001c48:	00000106 	br	10001c50 <draw_zombie+0x3dc>
        case HIT:
            // draw(start_x, end_x, start_y, end_y, ZOMBIE_HIT_FRONT_OFFSET[z->direction][z->frame], 0, flip_x);
            break;
        case DIE:
            // draw(start_x, end_x, start_y, end_y, ZOMBIE_DIE_OFFSET[z->direction][z->frame], 0, flip_x);
            break;
10001c4c:	0001883a 	nop
        default:
            printf("INVALID ZOMBIE STATE!\n");
            return;
    }
}
10001c50:	e6fffe04 	addi	sp,fp,-8
10001c54:	dfc00317 	ldw	ra,12(sp)
10001c58:	df000217 	ldw	fp,8(sp)
10001c5c:	dc400117 	ldw	r17,4(sp)
10001c60:	dc000017 	ldw	r16,0(sp)
10001c64:	dec00404 	addi	sp,sp,16
10001c68:	f800283a 	ret

10001c6c <draw_player>:

void draw_player(const player_t *p) {
10001c6c:	defff104 	addi	sp,sp,-60
10001c70:	dfc00e15 	stw	ra,56(sp)
10001c74:	df000d15 	stw	fp,52(sp)
10001c78:	df000d04 	addi	fp,sp,52
10001c7c:	e13fff15 	stw	r4,-4(fp)
    int width, height, flip_x, half_width, half_height;
    switch (p->action) {
10001c80:	e0bfff17 	ldw	r2,-4(fp)
10001c84:	10800617 	ldw	r2,24(r2)
10001c88:	10c000e0 	cmpeqi	r3,r2,3
10001c8c:	18002a1e 	bne	r3,zero,10001d38 <draw_player+0xcc>
10001c90:	10c00120 	cmpeqi	r3,r2,4
10001c94:	18002a1e 	bne	r3,zero,10001d40 <draw_player+0xd4>
10001c98:	1000231e 	bne	r2,zero,10001d28 <draw_player+0xbc>
        case WALK:
            width = PLAYER_WALK_WIDTH[p->direction];
10001c9c:	e0bfff17 	ldw	r2,-4(fp)
10001ca0:	10c00317 	ldw	r3,12(r2)
10001ca4:	00840074 	movhi	r2,4097
10001ca8:	10939b04 	addi	r2,r2,20076
10001cac:	18c7883a 	add	r3,r3,r3
10001cb0:	18c7883a 	add	r3,r3,r3
10001cb4:	10c5883a 	add	r2,r2,r3
10001cb8:	10800017 	ldw	r2,0(r2)
10001cbc:	e0bff615 	stw	r2,-40(fp)
            height = PLAYER_WALK_HEIGHT[p->direction];
10001cc0:	e0bfff17 	ldw	r2,-4(fp)
10001cc4:	10c00317 	ldw	r3,12(r2)
10001cc8:	00840074 	movhi	r2,4097
10001ccc:	1093a304 	addi	r2,r2,20108
10001cd0:	18c7883a 	add	r3,r3,r3
10001cd4:	18c7883a 	add	r3,r3,r3
10001cd8:	10c5883a 	add	r2,r2,r3
10001cdc:	10800017 	ldw	r2,0(r2)
10001ce0:	e0bff715 	stw	r2,-36(fp)
            flip_x = PLAYER_WALK_FLIP_X[p->direction];
10001ce4:	e0bfff17 	ldw	r2,-4(fp)
10001ce8:	10c00317 	ldw	r3,12(r2)
10001cec:	008400b4 	movhi	r2,4098
10001cf0:	10a8fe04 	addi	r2,r2,-23560
10001cf4:	18c7883a 	add	r3,r3,r3
10001cf8:	18c7883a 	add	r3,r3,r3
10001cfc:	10c5883a 	add	r2,r2,r3
10001d00:	10800017 	ldw	r2,0(r2)
10001d04:	e0bff815 	stw	r2,-32(fp)
            if (p->frame >= PLAYER_WALK_FRAME_COUNT) {
10001d08:	e0bfff17 	ldw	r2,-4(fp)
10001d0c:	10800717 	ldw	r2,28(r2)
10001d10:	10800210 	cmplti	r2,r2,8
10001d14:	10000c1e 	bne	r2,zero,10001d48 <draw_player+0xdc>
                printf("EXCEED PLAYER_WALK_FRAME_COUNT!\n");
10001d18:	01040074 	movhi	r4,4097
10001d1c:	210fa204 	addi	r4,r4,16008
10001d20:	00047b40 	call	100047b4 <puts>
                return;
10001d24:	00005006 	br	10001e68 <draw_player+0x1fc>
            //     printf("EXCEED PLAYER_DIE_FRAME_COUNT!\n");
            //     return;
            // }
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
10001d28:	01040074 	movhi	r4,4097
10001d2c:	210f8504 	addi	r4,r4,15892
10001d30:	00047b40 	call	100047b4 <puts>
            return;
10001d34:	00004c06 	br	10001e68 <draw_player+0x1fc>
            // flip_x = PLAYER_HIT_FRONT_FLIP_X[p->direction];
            // if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
            //     printf("EXCEED PLAYER_HIT_FRONT_FRAME_COUNT!\n");
            //     return;
            // }
            break;
10001d38:	0001883a 	nop
10001d3c:	00000306 	br	10001d4c <draw_player+0xe0>
            // flip_x = PLAYER_DIE_FLIP_X[p->direction];
            // if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
            //     printf("EXCEED PLAYER_DIE_FRAME_COUNT!\n");
            //     return;
            // }
            break;
10001d40:	0001883a 	nop
10001d44:	00000106 	br	10001d4c <draw_player+0xe0>
            flip_x = PLAYER_WALK_FLIP_X[p->direction];
            if (p->frame >= PLAYER_WALK_FRAME_COUNT) {
                printf("EXCEED PLAYER_WALK_FRAME_COUNT!\n");
                return;
            }
            break;
10001d48:	0001883a 	nop
        default:
            printf("INVALID PLAYER STATE!\n");
            return;
    }

    half_width = width / 2;
10001d4c:	e0bff617 	ldw	r2,-40(fp)
10001d50:	1006d7fa 	srli	r3,r2,31
10001d54:	1885883a 	add	r2,r3,r2
10001d58:	1005d07a 	srai	r2,r2,1
10001d5c:	e0bff915 	stw	r2,-28(fp)
    half_height = height / 2;
10001d60:	e0bff717 	ldw	r2,-36(fp)
10001d64:	1006d7fa 	srli	r3,r2,31
10001d68:	1885883a 	add	r2,r3,r2
10001d6c:	1005d07a 	srai	r2,r2,1
10001d70:	e0bffa15 	stw	r2,-24(fp)

    int start_x = p->x - half_width;
10001d74:	e0bfff17 	ldw	r2,-4(fp)
10001d78:	10c00017 	ldw	r3,0(r2)
10001d7c:	e0bff917 	ldw	r2,-28(fp)
10001d80:	1885c83a 	sub	r2,r3,r2
10001d84:	e0bffb15 	stw	r2,-20(fp)
    int end_x = p->x + (width - half_width);
10001d88:	e0bfff17 	ldw	r2,-4(fp)
10001d8c:	10c00017 	ldw	r3,0(r2)
10001d90:	e13ff617 	ldw	r4,-40(fp)
10001d94:	e0bff917 	ldw	r2,-28(fp)
10001d98:	2085c83a 	sub	r2,r4,r2
10001d9c:	1885883a 	add	r2,r3,r2
10001da0:	e0bffc15 	stw	r2,-16(fp)
    int start_y = p->y - half_height;
10001da4:	e0bfff17 	ldw	r2,-4(fp)
10001da8:	10c00117 	ldw	r3,4(r2)
10001dac:	e0bffa17 	ldw	r2,-24(fp)
10001db0:	1885c83a 	sub	r2,r3,r2
10001db4:	e0bffd15 	stw	r2,-12(fp)
    int end_y = p->y + (height - half_height);
10001db8:	e0bfff17 	ldw	r2,-4(fp)
10001dbc:	10c00117 	ldw	r3,4(r2)
10001dc0:	e13ff717 	ldw	r4,-36(fp)
10001dc4:	e0bffa17 	ldw	r2,-24(fp)
10001dc8:	2085c83a 	sub	r2,r4,r2
10001dcc:	1885883a 	add	r2,r3,r2
10001dd0:	e0bffe15 	stw	r2,-8(fp)

    switch (p->action) {
10001dd4:	e0bfff17 	ldw	r2,-4(fp)
10001dd8:	10800617 	ldw	r2,24(r2)
10001ddc:	10c000e0 	cmpeqi	r3,r2,3
10001de0:	18001e1e 	bne	r3,zero,10001e5c <draw_player+0x1f0>
10001de4:	10c00120 	cmpeqi	r3,r2,4
10001de8:	18001e1e 	bne	r3,zero,10001e64 <draw_player+0x1f8>
10001dec:	1000161e 	bne	r2,zero,10001e48 <draw_player+0x1dc>
        case WALK:
            draw(start_x, end_x, start_y, end_y, PLAYER_WALK_OFFSET[p->direction][p->frame], 0, flip_x);
10001df0:	e0bfff17 	ldw	r2,-4(fp)
10001df4:	11000317 	ldw	r4,12(r2)
10001df8:	e0bfff17 	ldw	r2,-4(fp)
10001dfc:	10c00717 	ldw	r3,28(r2)
10001e00:	00840074 	movhi	r2,4097
10001e04:	1093ab04 	addi	r2,r2,20140
10001e08:	200890fa 	slli	r4,r4,3
10001e0c:	20c7883a 	add	r3,r4,r3
10001e10:	18c7883a 	add	r3,r3,r3
10001e14:	18c7883a 	add	r3,r3,r3
10001e18:	10c5883a 	add	r2,r2,r3
10001e1c:	10800017 	ldw	r2,0(r2)
10001e20:	e0fff817 	ldw	r3,-32(fp)
10001e24:	d8c00215 	stw	r3,8(sp)
10001e28:	d8000115 	stw	zero,4(sp)
10001e2c:	d8800015 	stw	r2,0(sp)
10001e30:	e1fffe17 	ldw	r7,-8(fp)
10001e34:	e1bffd17 	ldw	r6,-12(fp)
10001e38:	e17ffc17 	ldw	r5,-16(fp)
10001e3c:	e13ffb17 	ldw	r4,-20(fp)
10001e40:	00021840 	call	10002184 <draw>
            break;
10001e44:	00000806 	br	10001e68 <draw_player+0x1fc>
            break;
        case DIE:
            // draw(start_x, end_x, start_y, end_y, PLAYER_DIE_OFFSET[p->direction][p->frame], 0, flip_x);
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
10001e48:	01040074 	movhi	r4,4097
10001e4c:	210f8504 	addi	r4,r4,15892
10001e50:	00047b40 	call	100047b4 <puts>
            return;
10001e54:	0001883a 	nop
10001e58:	00000306 	br	10001e68 <draw_player+0x1fc>
        case WALK:
            draw(start_x, end_x, start_y, end_y, PLAYER_WALK_OFFSET[p->direction][p->frame], 0, flip_x);
            break;
        case HIT:
            // draw(start_x, end_x, start_y, end_y, PLAYER_HIT_FRONT_OFFSET[p->direction][p->frame], 0, flip_x);
            break;
10001e5c:	0001883a 	nop
10001e60:	00000106 	br	10001e68 <draw_player+0x1fc>
        case DIE:
            // draw(start_x, end_x, start_y, end_y, PLAYER_DIE_OFFSET[p->direction][p->frame], 0, flip_x);
            break;
10001e64:	0001883a 	nop
        default:
            printf("INVALID PLAYER STATE!\n");
            return;
    }
}
10001e68:	e037883a 	mov	sp,fp
10001e6c:	dfc00117 	ldw	ra,4(sp)
10001e70:	df000017 	ldw	fp,0(sp)
10001e74:	dec00204 	addi	sp,sp,8
10001e78:	f800283a 	ret

10001e7c <refresh>:

void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {
10001e7c:	defff504 	addi	sp,sp,-44
10001e80:	dfc00a15 	stw	ra,40(sp)
10001e84:	df000915 	stw	fp,36(sp)
10001e88:	dc000815 	stw	r16,32(sp)
10001e8c:	df000904 	addi	fp,sp,36
10001e90:	e13ffb15 	stw	r4,-20(fp)
10001e94:	e17ffc15 	stw	r5,-16(fp)
10001e98:	e1bffd15 	stw	r6,-12(fp)
10001e9c:	e1fffe15 	stw	r7,-8(fp)
    static int add_zombie_counter = 0;
    int i, gx, gy, id;
    for (gy = GRID_Y_COUNT - 1; gy >= 0; gy--) {
10001ea0:	00800384 	movi	r2,14
10001ea4:	e0bff915 	stw	r2,-28(fp)
10001ea8:	00004806 	br	10001fcc <refresh+0x150>
        for (gx = 0; gx < GRID_X_COUNT; gx++) {
10001eac:	e03ff815 	stw	zero,-32(fp)
10001eb0:	00004006 	br	10001fb4 <refresh+0x138>
            id = grid[gx][gy];
10001eb4:	040400b4 	movhi	r16,4098
10001eb8:	84290604 	addi	r16,r16,-23528
10001ebc:	e0bff817 	ldw	r2,-32(fp)
10001ec0:	014003c4 	movi	r5,15
10001ec4:	1009883a 	mov	r4,r2
10001ec8:	00046600 	call	10004660 <__mulsi3>
10001ecc:	1007883a 	mov	r3,r2
10001ed0:	e0bff917 	ldw	r2,-28(fp)
10001ed4:	1885883a 	add	r2,r3,r2
10001ed8:	1085883a 	add	r2,r2,r2
10001edc:	1085883a 	add	r2,r2,r2
10001ee0:	8085883a 	add	r2,r16,r2
10001ee4:	10800017 	ldw	r2,0(r2)
10001ee8:	e0bffa15 	stw	r2,-24(fp)
            if (id != INDEX_NOTHING) {
10001eec:	e0bffa17 	ldw	r2,-24(fp)
10001ef0:	10803fe0 	cmpeqi	r2,r2,255
10001ef4:	10002c1e 	bne	r2,zero,10001fa8 <refresh+0x12c>
                if (id == INDEX_PLAYER_1) {
10001ef8:	e0bffa17 	ldw	r2,-24(fp)
10001efc:	10bfffd8 	cmpnei	r2,r2,-1
10001f00:	10000b1e 	bne	r2,zero,10001f30 <refresh+0xb4>
                    if (should_update) update_player(&player_1, direction_1, attack_1);
10001f04:	e0bffb17 	ldw	r2,-20(fp)
10001f08:	10000526 	beq	r2,zero,10001f20 <refresh+0xa4>
10001f0c:	e1bffe17 	ldw	r6,-8(fp)
10001f10:	e17ffc17 	ldw	r5,-16(fp)
10001f14:	010400b4 	movhi	r4,4098
10001f18:	212ad204 	addi	r4,r4,-21688
10001f1c:	00010980 	call	10001098 <update_player>
                    draw_player(&player_1);
10001f20:	010400b4 	movhi	r4,4098
10001f24:	212ad204 	addi	r4,r4,-21688
10001f28:	0001c6c0 	call	10001c6c <draw_player>
10001f2c:	00001e06 	br	10001fa8 <refresh+0x12c>
                } else if (id == INDEX_PLAYER_2) {
10001f30:	e0bffa17 	ldw	r2,-24(fp)
10001f34:	10bfff98 	cmpnei	r2,r2,-2
10001f38:	10000b1e 	bne	r2,zero,10001f68 <refresh+0xec>
                    if (should_update) update_player(&player_2, direction_2, attack_2);
10001f3c:	e0bffb17 	ldw	r2,-20(fp)
10001f40:	10000526 	beq	r2,zero,10001f58 <refresh+0xdc>
10001f44:	e1800217 	ldw	r6,8(fp)
10001f48:	e17ffd17 	ldw	r5,-12(fp)
10001f4c:	010400b4 	movhi	r4,4098
10001f50:	212adb04 	addi	r4,r4,-21652
10001f54:	00010980 	call	10001098 <update_player>
                    draw_player(&player_2);
10001f58:	010400b4 	movhi	r4,4098
10001f5c:	212adb04 	addi	r4,r4,-21652
10001f60:	0001c6c0 	call	10001c6c <draw_player>
10001f64:	00001006 	br	10001fa8 <refresh+0x12c>
                } else {
                    if (should_update) update_zombie(&zombie[id]);
10001f68:	e0bffb17 	ldw	r2,-20(fp)
10001f6c:	10000726 	beq	r2,zero,10001f8c <refresh+0x110>
10001f70:	e0bffa17 	ldw	r2,-24(fp)
10001f74:	1006917a 	slli	r3,r2,5
10001f78:	008400b4 	movhi	r2,4098
10001f7c:	10aa3204 	addi	r2,r2,-22328
10001f80:	1885883a 	add	r2,r3,r2
10001f84:	1009883a 	mov	r4,r2
10001f88:	00008840 	call	10000884 <update_zombie>
                    draw_zombie(&zombie[id]);
10001f8c:	e0bffa17 	ldw	r2,-24(fp)
10001f90:	1006917a 	slli	r3,r2,5
10001f94:	008400b4 	movhi	r2,4098
10001f98:	10aa3204 	addi	r2,r2,-22328
10001f9c:	1885883a 	add	r2,r3,r2
10001fa0:	1009883a 	mov	r4,r2
10001fa4:	00018740 	call	10001874 <draw_zombie>

void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {
    static int add_zombie_counter = 0;
    int i, gx, gy, id;
    for (gy = GRID_Y_COUNT - 1; gy >= 0; gy--) {
        for (gx = 0; gx < GRID_X_COUNT; gx++) {
10001fa8:	e0bff817 	ldw	r2,-32(fp)
10001fac:	10800044 	addi	r2,r2,1
10001fb0:	e0bff815 	stw	r2,-32(fp)
10001fb4:	e0bff817 	ldw	r2,-32(fp)
10001fb8:	10800510 	cmplti	r2,r2,20
10001fbc:	103fbd1e 	bne	r2,zero,10001eb4 <__alt_data_end+0xf8001eb4>
}

void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {
    static int add_zombie_counter = 0;
    int i, gx, gy, id;
    for (gy = GRID_Y_COUNT - 1; gy >= 0; gy--) {
10001fc0:	e0bff917 	ldw	r2,-28(fp)
10001fc4:	10bfffc4 	addi	r2,r2,-1
10001fc8:	e0bff915 	stw	r2,-28(fp)
10001fcc:	e0bff917 	ldw	r2,-28(fp)
10001fd0:	103fb60e 	bge	r2,zero,10001eac <__alt_data_end+0xf8001eac>
                }
            }
        }
    }

    if (should_update) {
10001fd4:	e0bffb17 	ldw	r2,-20(fp)
10001fd8:	10005226 	beq	r2,zero,10002124 <refresh+0x2a8>
        add_zombie_counter++;
10001fdc:	d0ab5317 	ldw	r2,-21172(gp)
10001fe0:	10800044 	addi	r2,r2,1
10001fe4:	d0ab5315 	stw	r2,-21172(gp)
        if (add_zombie_counter >= ADD_ZOMBIE_INTERVAL) {
10001fe8:	d0ab5317 	ldw	r2,-21172(gp)
10001fec:	10800510 	cmplti	r2,r2,20
10001ff0:	1000371e 	bne	r2,zero,100020d0 <refresh+0x254>
            if ((zombie_appear_counter < MAX_TOTAL_ZOMBIES) && (cur_zombie_counter < MAX_ZOMBIES_ON_SCREEN)) {
10001ff4:	d0ab5117 	ldw	r2,-21180(gp)
10001ff8:	10801908 	cmpgei	r2,r2,100
10001ffc:	1000331e 	bne	r2,zero,100020cc <refresh+0x250>
10002000:	d0ab5217 	ldw	r2,-21176(gp)
10002004:	10800508 	cmpgei	r2,r2,20
10002008:	1000301e 	bne	r2,zero,100020cc <refresh+0x250>
                for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
1000200c:	e03ff715 	stw	zero,-36(fp)
10002010:	00002906 	br	100020b8 <refresh+0x23c>
                    if (zombie[i].enable == 0) {
10002014:	008400b4 	movhi	r2,4098
10002018:	10aa3204 	addi	r2,r2,-22328
1000201c:	e0fff717 	ldw	r3,-36(fp)
10002020:	1806917a 	slli	r3,r3,5
10002024:	10c5883a 	add	r2,r2,r3
10002028:	10800404 	addi	r2,r2,16
1000202c:	10800017 	ldw	r2,0(r2)
10002030:	10001e1e 	bne	r2,zero,100020ac <refresh+0x230>
                        zombie[i].index = cur_zombie_counter;
10002034:	d0eb5217 	ldw	r3,-21176(gp)
10002038:	008400b4 	movhi	r2,4098
1000203c:	10aa3204 	addi	r2,r2,-22328
10002040:	e13ff717 	ldw	r4,-36(fp)
10002044:	2008917a 	slli	r4,r4,5
10002048:	1105883a 	add	r2,r2,r4
1000204c:	10c00015 	stw	r3,0(r2)
                        zombie[i].blood = 100;
10002050:	008400b4 	movhi	r2,4098
10002054:	10aa3204 	addi	r2,r2,-22328
10002058:	e0fff717 	ldw	r3,-36(fp)
1000205c:	1806917a 	slli	r3,r3,5
10002060:	10c5883a 	add	r2,r2,r3
10002064:	10800304 	addi	r2,r2,12
10002068:	00c01904 	movi	r3,100
1000206c:	10c00015 	stw	r3,0(r2)
                        if (try_add_zombie(&zombie[i]) == 0) {
10002070:	e0bff717 	ldw	r2,-36(fp)
10002074:	1006917a 	slli	r3,r2,5
10002078:	008400b4 	movhi	r2,4098
1000207c:	10aa3204 	addi	r2,r2,-22328
10002080:	1885883a 	add	r2,r3,r2
10002084:	1009883a 	mov	r4,r2
10002088:	00017540 	call	10001754 <try_add_zombie>
1000208c:	10000e1e 	bne	r2,zero,100020c8 <refresh+0x24c>
                            cur_zombie_counter++;
10002090:	d0ab5217 	ldw	r2,-21176(gp)
10002094:	10800044 	addi	r2,r2,1
10002098:	d0ab5215 	stw	r2,-21176(gp)
                            zombie_appear_counter++;
1000209c:	d0ab5117 	ldw	r2,-21180(gp)
100020a0:	10800044 	addi	r2,r2,1
100020a4:	d0ab5115 	stw	r2,-21180(gp)
                        }
                        break;
100020a8:	00000706 	br	100020c8 <refresh+0x24c>

    if (should_update) {
        add_zombie_counter++;
        if (add_zombie_counter >= ADD_ZOMBIE_INTERVAL) {
            if ((zombie_appear_counter < MAX_TOTAL_ZOMBIES) && (cur_zombie_counter < MAX_ZOMBIES_ON_SCREEN)) {
                for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
100020ac:	e0bff717 	ldw	r2,-36(fp)
100020b0:	10800044 	addi	r2,r2,1
100020b4:	e0bff715 	stw	r2,-36(fp)
100020b8:	e0bff717 	ldw	r2,-36(fp)
100020bc:	10800510 	cmplti	r2,r2,20
100020c0:	103fd41e 	bne	r2,zero,10002014 <__alt_data_end+0xf8002014>
100020c4:	00000106 	br	100020cc <refresh+0x250>
                        zombie[i].blood = 100;
                        if (try_add_zombie(&zombie[i]) == 0) {
                            cur_zombie_counter++;
                            zombie_appear_counter++;
                        }
                        break;
100020c8:	0001883a 	nop
                    }
                }
            }
            add_zombie_counter = 0;
100020cc:	d02b5315 	stw	zero,-21172(gp)
        }

        if ((player_1.enable == 0) && (player_2.enable == 0)) {
100020d0:	008400b4 	movhi	r2,4098
100020d4:	10aad204 	addi	r2,r2,-21688
100020d8:	10800417 	ldw	r2,16(r2)
100020dc:	1000081e 	bne	r2,zero,10002100 <refresh+0x284>
100020e0:	008400b4 	movhi	r2,4098
100020e4:	10aadb04 	addi	r2,r2,-21652
100020e8:	10800417 	ldw	r2,16(r2)
100020ec:	1000041e 	bne	r2,zero,10002100 <refresh+0x284>
            printf("You are all dead, please restart the game!");
100020f0:	01040074 	movhi	r4,4097
100020f4:	210faa04 	addi	r4,r4,16040
100020f8:	00046b80 	call	100046b8 <printf>
            while (1) {}
100020fc:	003fff06 	br	100020fc <__alt_data_end+0xf80020fc>
        }
        if ((cur_zombie_counter == 0) && (zombie_appear_counter == MAX_TOTAL_ZOMBIES)) {
10002100:	d0ab5217 	ldw	r2,-21176(gp)
10002104:	1000071e 	bne	r2,zero,10002124 <refresh+0x2a8>
10002108:	d0ab5117 	ldw	r2,-21180(gp)
1000210c:	10801918 	cmpnei	r2,r2,100
10002110:	1000041e 	bne	r2,zero,10002124 <refresh+0x2a8>
            printf("Congratulations, you have killed all the zombies!");
10002114:	01040074 	movhi	r4,4097
10002118:	210fb504 	addi	r4,r4,16084
1000211c:	00046b80 	call	100046b8 <printf>
            while (1) {}
10002120:	003fff06 	br	10002120 <__alt_data_end+0xf8002120>
        }
    }
}
10002124:	0001883a 	nop
10002128:	e6ffff04 	addi	sp,fp,-4
1000212c:	dfc00217 	ldw	ra,8(sp)
10002130:	df000117 	ldw	fp,4(sp)
10002134:	dc000017 	ldw	r16,0(sp)
10002138:	dec00304 	addi	sp,sp,12
1000213c:	f800283a 	ret

10002140 <graphic_engine_reset>:

#include "system.h"

volatile unsigned int *ENGINE_REGS = (unsigned int *) (0x40);

void graphic_engine_reset() {
10002140:	deffff04 	addi	sp,sp,-4
10002144:	df000015 	stw	fp,0(sp)
10002148:	d839883a 	mov	fp,sp
	ENGINE_REGS[7] = 0;
1000214c:	d0a00017 	ldw	r2,-32768(gp)
10002150:	10800704 	addi	r2,r2,28
10002154:	10000015 	stw	zero,0(r2)
	while ((ENGINE_REGS[15] & 0x1) != 0) {}  // wait for reset
10002158:	0001883a 	nop
1000215c:	d0a00017 	ldw	r2,-32768(gp)
10002160:	10800f04 	addi	r2,r2,60
10002164:	10800017 	ldw	r2,0(r2)
10002168:	1080004c 	andi	r2,r2,1
1000216c:	103ffb1e 	bne	r2,zero,1000215c <__alt_data_end+0xf800215c>
}
10002170:	0001883a 	nop
10002174:	e037883a 	mov	sp,fp
10002178:	df000017 	ldw	fp,0(sp)
1000217c:	dec00104 	addi	sp,sp,4
10002180:	f800283a 	ret

10002184 <draw>:

void draw(int start_x, int end_x, int start_y, int end_y, int src_offset, int palette, int flip_x) {
10002184:	defffb04 	addi	sp,sp,-20
10002188:	df000415 	stw	fp,16(sp)
1000218c:	df000404 	addi	fp,sp,16
10002190:	e13ffc15 	stw	r4,-16(fp)
10002194:	e17ffd15 	stw	r5,-12(fp)
10002198:	e1bffe15 	stw	r6,-8(fp)
1000219c:	e1ffff15 	stw	r7,-4(fp)

    // Wait for the copy engine to finish last task
//	printf("Start waiting for graphic engine...\n");
	if (ENGINE_REGS[7] == 1) {
100021a0:	d0a00017 	ldw	r2,-32768(gp)
100021a4:	10800704 	addi	r2,r2,28
100021a8:	10800017 	ldw	r2,0(r2)
100021ac:	10800058 	cmpnei	r2,r2,1
100021b0:	10000f1e 	bne	r2,zero,100021f0 <draw+0x6c>
		while ((ENGINE_REGS[15] & 0x1) == 0) {}
100021b4:	0001883a 	nop
100021b8:	d0a00017 	ldw	r2,-32768(gp)
100021bc:	10800f04 	addi	r2,r2,60
100021c0:	10800017 	ldw	r2,0(r2)
100021c4:	1080004c 	andi	r2,r2,1
100021c8:	103ffb26 	beq	r2,zero,100021b8 <__alt_data_end+0xf80021b8>

		// Clear Execute
		ENGINE_REGS[7] = 0;
100021cc:	d0a00017 	ldw	r2,-32768(gp)
100021d0:	10800704 	addi	r2,r2,28
100021d4:	10000015 	stw	zero,0(r2)
		while ((ENGINE_REGS[15] & 0x1) != 0) {}  // wait for reset
100021d8:	0001883a 	nop
100021dc:	d0a00017 	ldw	r2,-32768(gp)
100021e0:	10800f04 	addi	r2,r2,60
100021e4:	10800017 	ldw	r2,0(r2)
100021e8:	1080004c 	andi	r2,r2,1
100021ec:	103ffb1e 	bne	r2,zero,100021dc <__alt_data_end+0xf80021dc>
	}
//    printf("Graphic engine done!\n");

    ENGINE_REGS[0] = start_x;
100021f0:	d0a00017 	ldw	r2,-32768(gp)
100021f4:	e0fffc17 	ldw	r3,-16(fp)
100021f8:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[1] = end_x;
100021fc:	d0a00017 	ldw	r2,-32768(gp)
10002200:	10800104 	addi	r2,r2,4
10002204:	e0fffd17 	ldw	r3,-12(fp)
10002208:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[2] = start_y;
1000220c:	d0a00017 	ldw	r2,-32768(gp)
10002210:	10800204 	addi	r2,r2,8
10002214:	e0fffe17 	ldw	r3,-8(fp)
10002218:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[3] = end_y;
1000221c:	d0a00017 	ldw	r2,-32768(gp)
10002220:	10800304 	addi	r2,r2,12
10002224:	e0ffff17 	ldw	r3,-4(fp)
10002228:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[4] = src_offset;
1000222c:	d0a00017 	ldw	r2,-32768(gp)
10002230:	10800404 	addi	r2,r2,16
10002234:	e0c00117 	ldw	r3,4(fp)
10002238:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[5] = palette;
1000223c:	d0a00017 	ldw	r2,-32768(gp)
10002240:	10800504 	addi	r2,r2,20
10002244:	e0c00217 	ldw	r3,8(fp)
10002248:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[6] = flip_x;
1000224c:	d0a00017 	ldw	r2,-32768(gp)
10002250:	10800604 	addi	r2,r2,24
10002254:	e0c00317 	ldw	r3,12(fp)
10002258:	10c00015 	stw	r3,0(r2)

    // Execute
    ENGINE_REGS[7] = 1;
1000225c:	d0a00017 	ldw	r2,-32768(gp)
10002260:	10800704 	addi	r2,r2,28
10002264:	00c00044 	movi	r3,1
10002268:	10c00015 	stw	r3,0(r2)

    // Let the engine run and C program can do other things
}
1000226c:	0001883a 	nop
10002270:	e037883a 	mov	sp,fp
10002274:	df000017 	ldw	fp,0(sp)
10002278:	dec00104 	addi	sp,sp,4
1000227c:	f800283a 	ret

10002280 <wait_for_next_frame>:

void wait_for_next_frame() {
10002280:	deffff04 	addi	sp,sp,-4
10002284:	df000015 	stw	fp,0(sp)
10002288:	d839883a 	mov	fp,sp

    static unsigned int current_frame = 0;

    // Wait for switch to next frame
    while (current_frame == ENGINE_REGS[14]) {}
1000228c:	0001883a 	nop
10002290:	d0a00017 	ldw	r2,-32768(gp)
10002294:	10800e04 	addi	r2,r2,56
10002298:	10c00017 	ldw	r3,0(r2)
1000229c:	d0ab5417 	ldw	r2,-21168(gp)
100022a0:	18bffb26 	beq	r3,r2,10002290 <__alt_data_end+0xf8002290>

    current_frame = ENGINE_REGS[14];
100022a4:	d0a00017 	ldw	r2,-32768(gp)
100022a8:	10800e17 	ldw	r2,56(r2)
100022ac:	d0ab5415 	stw	r2,-21168(gp)
}
100022b0:	0001883a 	nop
100022b4:	e037883a 	mov	sp,fp
100022b8:	df000017 	ldw	fp,0(sp)
100022bc:	dec00104 	addi	sp,sp,4
100022c0:	f800283a 	ret

100022c4 <io_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void io_init(void)
{
100022c4:	deffff04 	addi	sp,sp,-4
100022c8:	df000015 	stw	fp,0(sp)
100022cc:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100022d0:	00800804 	movi	r2,32
100022d4:	00c00044 	movi	r3,1
100022d8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100022dc:	00800c04 	movi	r2,48
100022e0:	00c00044 	movi	r3,1
100022e4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100022e8:	00802404 	movi	r2,144
100022ec:	00c00044 	movi	r3,1
100022f0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100022f4:	00802004 	movi	r2,128
100022f8:	00c00044 	movi	r3,1
100022fc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10002300:	00802c04 	movi	r2,176
10002304:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10002308:	00802804 	movi	r2,160
1000230c:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10002310:	00800c04 	movi	r2,48
10002314:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10002318:	00800804 	movi	r2,32
1000231c:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10002320:	00800804 	movi	r2,32
10002324:	00c00044 	movi	r3,1
10002328:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000232c:	00800c04 	movi	r2,48
10002330:	00c00044 	movi	r3,1
10002334:	10c00005 	stb	r3,0(r2)
}
10002338:	0001883a 	nop
1000233c:	e037883a 	mov	sp,fp
10002340:	df000017 	ldw	fp,0(sp)
10002344:	dec00104 	addi	sp,sp,4
10002348:	f800283a 	ret

1000234c <io_write>:
 *
 * @note     None
 *
 ******************************************************************************/
void io_write(alt_u8 Address, alt_u16 Data)
{
1000234c:	defffd04 	addi	sp,sp,-12
10002350:	df000215 	stw	fp,8(sp)
10002354:	df000204 	addi	fp,sp,8
10002358:	2007883a 	mov	r3,r4
1000235c:	2805883a 	mov	r2,r5
10002360:	e0fffe05 	stb	r3,-8(fp)
10002364:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10002368:	00802c04 	movi	r2,176
1000236c:	e0fffe03 	ldbu	r3,-8(fp)
10002370:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
10002374:	00800c04 	movi	r2,48
10002378:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
1000237c:	00802004 	movi	r2,128
10002380:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10002384:	00802804 	movi	r2,160
10002388:	e0ffff0b 	ldhu	r3,-4(fp)
1000238c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10002390:	00802004 	movi	r2,128
10002394:	00c00044 	movi	r3,1
10002398:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000239c:	00800c04 	movi	r2,48
100023a0:	00c00044 	movi	r3,1
100023a4:	10c00005 	stb	r3,0(r2)
}
100023a8:	0001883a 	nop
100023ac:	e037883a 	mov	sp,fp
100023b0:	df000017 	ldw	fp,0(sp)
100023b4:	dec00104 	addi	sp,sp,4
100023b8:	f800283a 	ret

100023bc <io_read>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 io_read(alt_u8 Address)
{
100023bc:	defffd04 	addi	sp,sp,-12
100023c0:	df000215 	stw	fp,8(sp)
100023c4:	df000204 	addi	fp,sp,8
100023c8:	2005883a 	mov	r2,r4
100023cc:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
100023d0:	00802c04 	movi	r2,176
100023d4:	e0ffff03 	ldbu	r3,-4(fp)
100023d8:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
100023dc:	00800c04 	movi	r2,48
100023e0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100023e4:	00802404 	movi	r2,144
100023e8:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100023ec:	00802804 	movi	r2,160
100023f0:	10800017 	ldw	r2,0(r2)
100023f4:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1; // Set the read signal back to 1 after reading
100023f8:	00802404 	movi	r2,144
100023fc:	00c00044 	movi	r3,1
10002400:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	*otg_hpi_cs = 1;
10002404:	00800c04 	movi	r2,48
10002408:	00c00044 	movi	r3,1
1000240c:	10c00005 	stb	r3,0(r2)
	return temp;
10002410:	e0bffe0b 	ldhu	r2,-8(fp)
}
10002414:	e037883a 	mov	sp,fp
10002418:	df000017 	ldw	fp,0(sp)
1000241c:	dec00104 	addi	sp,sp,4
10002420:	f800283a 	ret

10002424 <keyboard_init>:
alt_u8 data_size;
alt_u8 hot_plug_count;
alt_u16 code;
alt_u8 fetch_toggle = 0;

void keyboard_init() {
10002424:	defffe04 	addi	sp,sp,-8
10002428:	dfc00115 	stw	ra,4(sp)
1000242c:	df000015 	stw	fp,0(sp)
10002430:	d839883a 	mov	fp,sp
    io_init();
10002434:	00022c40 	call	100022c4 <io_init>
        // usb_write(0xc008,0x000f);
        // usb_read(0xc008);
        usleep(10*10000);
    } */

    printf("USB keyboard setup...\n\n");
10002438:	01040074 	movhi	r4,4097
1000243c:	210fe204 	addi	r4,r4,16264
10002440:	00047b40 	call	100047b4 <puts>

    // ---------------------------------------- SIE1 initial ---------------------------------------------------//
    USB_HOT_PLUG:
    usb_soft_reset();
10002444:	000322c0 	call	1000322c <usb_soft_reset>

    // STEP 1a:
    usb_write(HPI_SIE1_MSG_ADR, 0);
10002448:	000b883a 	mov	r5,zero
1000244c:	01005104 	movi	r4,324
10002450:	00031900 	call	10003190 <usb_write>
    usb_write(HOST1_STAT_REG, 0xFFFF);
10002454:	017fffd4 	movui	r5,65535
10002458:	01302414 	movui	r4,49296
1000245c:	00031900 	call	10003190 <usb_write>

    /* Set HUSB_pEOT time */
    usb_write(HUSB_pEOT, 600);  // adjust the according to your USB device speed
10002460:	01409604 	movi	r5,600
10002464:	01006d04 	movi	r4,436
10002468:	00031900 	call	10003190 <usb_write>

    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;  // | SOFEOP1_TO_HPI_EN;
1000246c:	00811004 	movi	r2,1088
10002470:	d0ab570d 	sth	r2,-21156(gp)
    usb_write(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10002474:	d0ab570b 	ldhu	r2,-21156(gp)
10002478:	10bfffcc 	andi	r2,r2,65535
1000247c:	100b883a 	mov	r5,r2
10002480:	01005084 	movi	r4,322
10002484:	00031900 	call	10003190 <usb_write>

    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN;
10002488:	00808404 	movi	r2,528
1000248c:	d0ab580d 	sth	r2,-21152(gp)
    usb_write(HOST1_IRQ_EN_REG, intStat);
10002490:	d0ab580b 	ldhu	r2,-21152(gp)
10002494:	10bfffcc 	andi	r2,r2,65535
10002498:	100b883a 	mov	r5,r2
1000249c:	01302314 	movui	r4,49292
100024a0:	00031900 	call	10003190 <usb_write>
    // STEP 1a end

    // STEP 1b begin
    usb_write(COMM_R0, 0x0000);  // reset time
100024a4:	000b883a 	mov	r5,zero
100024a8:	01007104 	movi	r4,452
100024ac:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
100024b0:	000b883a 	mov	r5,zero
100024b4:	01007184 	movi	r4,454
100024b8:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
100024bc:	000b883a 	mov	r5,zero
100024c0:	01007204 	movi	r4,456
100024c4:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
100024c8:	000b883a 	mov	r5,zero
100024cc:	01007284 	movi	r4,458
100024d0:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
100024d4:	000b883a 	mov	r5,zero
100024d8:	01007304 	movi	r4,460
100024dc:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
100024e0:	000b883a 	mov	r5,zero
100024e4:	01007384 	movi	r4,462
100024e8:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
100024ec:	000b883a 	mov	r5,zero
100024f0:	01007404 	movi	r4,464
100024f4:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
100024f8:	000b883a 	mov	r5,zero
100024fc:	01007484 	movi	r4,466
10002500:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
10002504:	000b883a 	mov	r5,zero
10002508:	01007504 	movi	r4,468
1000250c:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
10002510:	000b883a 	mov	r5,zero
10002514:	01007584 	movi	r4,470
10002518:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
1000251c:	000b883a 	mov	r5,zero
10002520:	01007604 	movi	r4,472
10002524:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
10002528:	000b883a 	mov	r5,zero
1000252c:	01007684 	movi	r4,474
10002530:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
10002534:	000b883a 	mov	r5,zero
10002538:	01007704 	movi	r4,476
1000253c:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
10002540:	000b883a 	mov	r5,zero
10002544:	01007784 	movi	r4,478
10002548:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT);  // HUSB_SIE1_INIT_INT
1000254c:	01401c84 	movi	r5,114
10002550:	01007084 	movi	r4,450
10002554:	00031900 	call	10003190 <usb_write>
    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10002558:	01738054 	movui	r5,52737
1000255c:	01000044 	movi	r4,1
10002560:	000234c0 	call	1000234c <io_write>

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
10002564:	0001883a 	nop
10002568:	010000c4 	movi	r4,3
1000256c:	00023bc0 	call	100023bc <io_read>
10002570:	10bfffcc 	andi	r2,r2,65535
10002574:	103ffc26 	beq	r2,zero,10002568 <__alt_data_end+0xf8002568>
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002578:	00000806 	br	1000259c <keyboard_init+0x178>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
1000257c:	01000044 	movi	r4,1
10002580:	00023bc0 	call	100023bc <io_read>
10002584:	10bfffcc 	andi	r2,r2,65535
10002588:	100b883a 	mov	r5,r2
1000258c:	01040074 	movhi	r4,4097
10002590:	210fe804 	addi	r4,r4,16288
10002594:	00046b80 	call	100046b8 <printf>
        goto USB_HOT_PLUG;
10002598:	003faa06 	br	10002444 <__alt_data_end+0xf8002444>
    usb_write(COMM_R13, 0x0000);  // r1
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT);  // HUSB_SIE1_INIT_INT
    io_write(HPI_MAILBOX, COMM_EXEC_INT);

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
1000259c:	01000044 	movi	r4,1
100025a0:	00023bc0 	call	100023bc <io_read>
100025a4:	10bfffcc 	andi	r2,r2,65535
100025a8:	1083fb58 	cmpnei	r2,r2,4077
100025ac:	103ff31e 	bne	r2,zero,1000257c <__alt_data_end+0xf800257c>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
        goto USB_HOT_PLUG;
    }
    // STEP 1b end

    printf("STEP 1 Complete");
100025b0:	01040074 	movhi	r4,4097
100025b4:	210ff104 	addi	r4,r4,16324
100025b8:	00046b80 	call	100046b8 <printf>
    // STEP 2 begin
    usb_write(COMM_INT_NUM, HUSB_RESET_INT);  // husb reset
100025bc:	01401d04 	movi	r5,116
100025c0:	01007084 	movi	r4,450
100025c4:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R0, 0x003c);  // reset time
100025c8:	01400f04 	movi	r5,60
100025cc:	01007104 	movi	r4,452
100025d0:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
100025d4:	000b883a 	mov	r5,zero
100025d8:	01007184 	movi	r4,454
100025dc:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
100025e0:	000b883a 	mov	r5,zero
100025e4:	01007204 	movi	r4,456
100025e8:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
100025ec:	000b883a 	mov	r5,zero
100025f0:	01007284 	movi	r4,458
100025f4:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
100025f8:	000b883a 	mov	r5,zero
100025fc:	01007304 	movi	r4,460
10002600:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
10002604:	000b883a 	mov	r5,zero
10002608:	01007384 	movi	r4,462
1000260c:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
10002610:	000b883a 	mov	r5,zero
10002614:	01007404 	movi	r4,464
10002618:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
1000261c:	000b883a 	mov	r5,zero
10002620:	01007484 	movi	r4,466
10002624:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
10002628:	000b883a 	mov	r5,zero
1000262c:	01007504 	movi	r4,468
10002630:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
10002634:	000b883a 	mov	r5,zero
10002638:	01007584 	movi	r4,470
1000263c:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
10002640:	000b883a 	mov	r5,zero
10002644:	01007604 	movi	r4,472
10002648:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
1000264c:	000b883a 	mov	r5,zero
10002650:	01007684 	movi	r4,474
10002654:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
10002658:	000b883a 	mov	r5,zero
1000265c:	01007704 	movi	r4,476
10002660:	00031900 	call	10003190 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
10002664:	000b883a 	mov	r5,zero
10002668:	01007784 	movi	r4,478
1000266c:	00031900 	call	10003190 <usb_write>

    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10002670:	01738054 	movui	r5,52737
10002674:	01000044 	movi	r4,1
10002678:	000234c0 	call	1000234c <io_write>

    while (io_read(HPI_MAILBOX) != COMM_ACK) {
1000267c:	0001883a 	nop
10002680:	01000044 	movi	r4,1
10002684:	00023bc0 	call	100023bc <io_read>
10002688:	10bfffcc 	andi	r2,r2,65535
1000268c:	1083fb58 	cmpnei	r2,r2,4077
10002690:	10000826 	beq	r2,zero,100026b4 <keyboard_init+0x290>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
10002694:	01000044 	movi	r4,1
10002698:	00023bc0 	call	100023bc <io_read>
1000269c:	10bfffcc 	andi	r2,r2,65535
100026a0:	100b883a 	mov	r5,r2
100026a4:	01040074 	movhi	r4,4097
100026a8:	210fe804 	addi	r4,r4,16288
100026ac:	00046b80 	call	100046b8 <printf>
        goto USB_HOT_PLUG;
100026b0:	003f6406 	br	10002444 <__alt_data_end+0xf8002444>
    }
    // STEP 2 end

    ctl_reg = USB1_CTL_REG;
100026b4:	00b02284 	movi	r2,-16246
100026b8:	d0ab550d 	sth	r2,-21164(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
100026bc:	008c0004 	movi	r2,12288
100026c0:	d0ab558d 	sth	r2,-21162(gp)
    fs_device = A_DP_STAT;
100026c4:	00880004 	movi	r2,8192
100026c8:	d0ab560d 	sth	r2,-21160(gp)
    usb_ctl_val = usb_read(ctl_reg);
100026cc:	d0ab550b 	ldhu	r2,-21164(gp)
100026d0:	10bfffcc 	andi	r2,r2,65535
100026d4:	1009883a 	mov	r4,r2
100026d8:	00031e80 	call	100031e8 <usb_read>
100026dc:	d0ab570d 	sth	r2,-21156(gp)

    if (!(usb_ctl_val & no_device)) {
100026e0:	d0eb570b 	ldhu	r3,-21156(gp)
100026e4:	d0ab558b 	ldhu	r2,-21162(gp)
100026e8:	1884703a 	and	r2,r3,r2
100026ec:	10bfffcc 	andi	r2,r2,65535
100026f0:	1000361e 	bne	r2,zero,100027cc <keyboard_init+0x3a8>
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
100026f4:	d02b5885 	stb	zero,-21150(gp)
100026f8:	00000f06 	br	10002738 <keyboard_init+0x314>
            usleep(5 * 1000);
100026fc:	0104e204 	movi	r4,5000
10002700:	0011df80 	call	10011df8 <usleep>
            usb_ctl_val = usb_read(ctl_reg);
10002704:	d0ab550b 	ldhu	r2,-21164(gp)
10002708:	10bfffcc 	andi	r2,r2,65535
1000270c:	1009883a 	mov	r4,r2
10002710:	00031e80 	call	100031e8 <usb_read>
10002714:	d0ab570d 	sth	r2,-21156(gp)
            if (usb_ctl_val & no_device) break;
10002718:	d0eb570b 	ldhu	r3,-21156(gp)
1000271c:	d0ab558b 	ldhu	r2,-21162(gp)
10002720:	1884703a 	and	r2,r3,r2
10002724:	10bfffcc 	andi	r2,r2,65535
10002728:	1000081e 	bne	r2,zero,1000274c <keyboard_init+0x328>
    no_device = (A_DP_STAT | A_DM_STAT);
    fs_device = A_DP_STAT;
    usb_ctl_val = usb_read(ctl_reg);

    if (!(usb_ctl_val & no_device)) {
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
1000272c:	d0ab5883 	ldbu	r2,-21150(gp)
10002730:	10800044 	addi	r2,r2,1
10002734:	d0ab5885 	stb	r2,-21150(gp)
10002738:	d0ab5883 	ldbu	r2,-21150(gp)
1000273c:	10803fcc 	andi	r2,r2,255
10002740:	10800170 	cmpltui	r2,r2,5
10002744:	103fed1e 	bne	r2,zero,100026fc <__alt_data_end+0xf80026fc>
10002748:	00000106 	br	10002750 <keyboard_init+0x32c>
            usleep(5 * 1000);
            usb_ctl_val = usb_read(ctl_reg);
            if (usb_ctl_val & no_device) break;
1000274c:	0001883a 	nop
        }
        if (!(usb_ctl_val & no_device)) {
10002750:	d0eb570b 	ldhu	r3,-21156(gp)
10002754:	d0ab558b 	ldhu	r2,-21162(gp)
10002758:	1884703a 	and	r2,r3,r2
1000275c:	10bfffcc 	andi	r2,r2,65535
10002760:	1000261e 	bne	r2,zero,100027fc <keyboard_init+0x3d8>
            printf("\n[INFO]: no device is present in SIE1!\n");
10002764:	01040074 	movhi	r4,4097
10002768:	210ff504 	addi	r4,r4,16340
1000276c:	00047b40 	call	100047b4 <puts>
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10002770:	01040074 	movhi	r4,4097
10002774:	210fff04 	addi	r4,r4,16380
10002778:	00047b40 	call	100047b4 <puts>
            while (!(usb_ctl_val & no_device)) {
1000277c:	00000d06 	br	100027b4 <keyboard_init+0x390>
                usb_ctl_val = usb_read(ctl_reg);
10002780:	d0ab550b 	ldhu	r2,-21164(gp)
10002784:	10bfffcc 	andi	r2,r2,65535
10002788:	1009883a 	mov	r4,r2
1000278c:	00031e80 	call	100031e8 <usb_read>
10002790:	d0ab570d 	sth	r2,-21156(gp)
                if (usb_ctl_val & no_device)
10002794:	d0eb570b 	ldhu	r3,-21156(gp)
10002798:	d0ab558b 	ldhu	r2,-21162(gp)
1000279c:	1884703a 	and	r2,r3,r2
100027a0:	10bfffcc 	andi	r2,r2,65535
100027a4:	10000126 	beq	r2,zero,100027ac <keyboard_init+0x388>
                    goto USB_HOT_PLUG;
100027a8:	003f2606 	br	10002444 <__alt_data_end+0xf8002444>

                usleep(2000);
100027ac:	0101f404 	movi	r4,2000
100027b0:	0011df80 	call	10011df8 <usleep>
            if (usb_ctl_val & no_device) break;
        }
        if (!(usb_ctl_val & no_device)) {
            printf("\n[INFO]: no device is present in SIE1!\n");
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
            while (!(usb_ctl_val & no_device)) {
100027b4:	d0eb570b 	ldhu	r3,-21156(gp)
100027b8:	d0ab558b 	ldhu	r2,-21162(gp)
100027bc:	1884703a 	and	r2,r3,r2
100027c0:	10bfffcc 	andi	r2,r2,65535
100027c4:	103fee26 	beq	r2,zero,10002780 <__alt_data_end+0xf8002780>
100027c8:	00000c06 	br	100027fc <keyboard_init+0x3d8>
                usleep(2000);
            }
        }
    } else {
        /* check for low speed or full speed by reading D+ and D- lines */
        if (usb_ctl_val & fs_device) {
100027cc:	d0eb570b 	ldhu	r3,-21156(gp)
100027d0:	d0ab560b 	ldhu	r2,-21160(gp)
100027d4:	1884703a 	and	r2,r3,r2
100027d8:	10bfffcc 	andi	r2,r2,65535
100027dc:	10000426 	beq	r2,zero,100027f0 <keyboard_init+0x3cc>
            printf("[INFO]: full speed device\n");
100027e0:	01040074 	movhi	r4,4097
100027e4:	21100b04 	addi	r4,r4,16428
100027e8:	00047b40 	call	100047b4 <puts>
100027ec:	00000306 	br	100027fc <keyboard_init+0x3d8>
        } else {
            printf("[INFO]: low speed device\n");
100027f0:	01040074 	movhi	r4,4097
100027f4:	21101204 	addi	r4,r4,16456
100027f8:	00047b40 	call	100047b4 <puts>
        }
    }

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();
100027fc:	00032e00 	call	100032e0 <usb_set_address>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002800:	00000306 	br	10002810 <keyboard_init+0x3ec>
    {
        usb_set_address();
10002804:	00032e00 	call	100032e0 <usb_set_address>
        usleep(10 * 1000);
10002808:	0109c404 	movi	r4,10000
1000280c:	0011df80 	call	10011df8 <usleep>

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002810:	010000c4 	movi	r4,3
10002814:	00023bc0 	call	100023bc <io_read>
10002818:	10bfffcc 	andi	r2,r2,65535
1000281c:	1080040c 	andi	r2,r2,16
10002820:	103ff826 	beq	r2,zero,10002804 <__alt_data_end+0xf8002804>
    {
        usb_set_address();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002824:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);  // i
10002828:	01414184 	movi	r5,1286
1000282c:	01000084 	movi	r4,2
10002830:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n", io_read(HPI_DATA));
10002834:	0009883a 	mov	r4,zero
10002838:	00023bc0 	call	100023bc <io_read>
1000283c:	10bfffcc 	andi	r2,r2,65535
10002840:	100b883a 	mov	r5,r2
10002844:	01040074 	movhi	r4,4097
10002848:	21101904 	addi	r4,r4,16484
1000284c:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);  // n
10002850:	01414204 	movi	r5,1288
10002854:	01000084 	movi	r4,2
10002858:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
1000285c:	0009883a 	mov	r4,zero
10002860:	00023bc0 	call	100023bc <io_read>
10002864:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n", usb_ctl_val);
10002868:	d0ab570b 	ldhu	r2,-21156(gp)
1000286c:	10bfffcc 	andi	r2,r2,65535
10002870:	100b883a 	mov	r5,r2
10002874:	01040074 	movhi	r4,4097
10002878:	21102404 	addi	r4,r4,16528
1000287c:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) // retries occurred
10002880:	0001883a 	nop
10002884:	d0ab570b 	ldhu	r2,-21156(gp)
10002888:	10bfffcc 	andi	r2,r2,65535
1000288c:	108000d8 	cmpnei	r2,r2,3
10002890:	10000326 	beq	r2,zero,100028a0 <keyboard_init+0x47c>
    {
        usb_ctl_val = usb_get_retry_cnt();
10002894:	00042040 	call	10004204 <usb_get_retry_cnt>
10002898:	d0ab570d 	sth	r2,-21156(gp)

        goto USB_HOT_PLUG;
1000289c:	003ee906 	br	10002444 <__alt_data_end+0xf8002444>
    }

    printf("------------[ENUM PROCESS]:set address done!---------------\n");
100028a0:	01040074 	movhi	r4,4097
100028a4:	21103004 	addi	r4,r4,16576
100028a8:	00047b40 	call	100047b4 <puts>

    // STEP 4 begin
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1
100028ac:	00033e00 	call	100033e0 <usb_get_device_desc1>

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100028b0:	00000306 	br	100028c0 <keyboard_init+0x49c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
100028b4:	00033e00 	call	100033e0 <usb_get_device_desc1>
        usleep(10 * 1000);
100028b8:	0109c404 	movi	r4,10000
100028bc:	0011df80 	call	10011df8 <usleep>
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100028c0:	010000c4 	movi	r4,3
100028c4:	00023bc0 	call	100023bc <io_read>
100028c8:	10bfffcc 	andi	r2,r2,65535
100028cc:	1080040c 	andi	r2,r2,16
100028d0:	103ff826 	beq	r2,zero,100028b4 <__alt_data_end+0xf80028b4>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
100028d4:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
100028d8:	01414184 	movi	r5,1286
100028dc:	01000084 	movi	r4,2
100028e0:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
100028e4:	0009883a 	mov	r4,zero
100028e8:	00023bc0 	call	100023bc <io_read>
100028ec:	10bfffcc 	andi	r2,r2,65535
100028f0:	100b883a 	mov	r5,r2
100028f4:	01040074 	movhi	r4,4097
100028f8:	21103f04 	addi	r4,r4,16636
100028fc:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002900:	01414204 	movi	r5,1288
10002904:	01000084 	movi	r4,2
10002908:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
1000290c:	0009883a 	mov	r4,zero
10002910:	00023bc0 	call	100023bc <io_read>
10002914:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10002918:	d0ab570b 	ldhu	r2,-21156(gp)
1000291c:	10bfffcc 	andi	r2,r2,65535
10002920:	100b883a 	mov	r5,r2
10002924:	01040074 	movhi	r4,4097
10002928:	21104a04 	addi	r4,r4,16680
1000292c:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002930:	00000206 	br	1000293c <keyboard_init+0x518>
        usb_ctl_val = usb_get_retry_cnt();
10002934:	00042040 	call	10004204 <usb_get_retry_cnt>
10002938:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
1000293c:	d0ab570b 	ldhu	r2,-21156(gp)
10002940:	10bfffcc 	andi	r2,r2,65535
10002944:	108000d8 	cmpnei	r2,r2,3
10002948:	103ffa1e 	bne	r2,zero,10002934 <__alt_data_end+0xf8002934>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
1000294c:	01040074 	movhi	r4,4097
10002950:	21105604 	addi	r4,r4,16728
10002954:	00047b40 	call	100047b4 <puts>


    //--------------------------------get device descriptor-2---------------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2
10002958:	00035280 	call	10003528 <usb_get_device_desc2>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
1000295c:	00000306 	br	1000296c <keyboard_init+0x548>
    {
        // resend the get device descriptor
        // get device descriptor
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
10002960:	00035280 	call	10003528 <usb_get_device_desc2>
        usleep(10 * 1000);
10002964:	0109c404 	movi	r4,10000
10002968:	0011df80 	call	10011df8 <usleep>
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
1000296c:	010000c4 	movi	r4,3
10002970:	00023bc0 	call	100023bc <io_read>
10002974:	10bfffcc 	andi	r2,r2,65535
10002978:	1080040c 	andi	r2,r2,16
1000297c:	103ff826 	beq	r2,zero,10002960 <__alt_data_end+0xf8002960>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002980:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002984:	01414184 	movi	r5,1286
10002988:	01000084 	movi	r4,2
1000298c:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
10002990:	0009883a 	mov	r4,zero
10002994:	00023bc0 	call	100023bc <io_read>
10002998:	10bfffcc 	andi	r2,r2,65535
1000299c:	100b883a 	mov	r5,r2
100029a0:	01040074 	movhi	r4,4097
100029a4:	21103f04 	addi	r4,r4,16636
100029a8:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
100029ac:	01414204 	movi	r5,1288
100029b0:	01000084 	movi	r4,2
100029b4:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
100029b8:	0009883a 	mov	r4,zero
100029bc:	00023bc0 	call	100023bc <io_read>
100029c0:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
100029c4:	d0ab570b 	ldhu	r2,-21156(gp)
100029c8:	10bfffcc 	andi	r2,r2,65535
100029cc:	100b883a 	mov	r5,r2
100029d0:	01040074 	movhi	r4,4097
100029d4:	21104a04 	addi	r4,r4,16680
100029d8:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
100029dc:	00000206 	br	100029e8 <keyboard_init+0x5c4>
        usb_ctl_val = usb_get_retry_cnt();
100029e0:	00042040 	call	10004204 <usb_get_retry_cnt>
100029e4:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
100029e8:	d0ab570b 	ldhu	r2,-21156(gp)
100029ec:	10bfffcc 	andi	r2,r2,65535
100029f0:	108000d8 	cmpnei	r2,r2,3
100029f4:	103ffa1e 	bne	r2,zero,100029e0 <__alt_data_end+0xf80029e0>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100029f8:	01040074 	movhi	r4,4097
100029fc:	21106a04 	addi	r4,r4,16808
10002a00:	00047b40 	call	100047b4 <puts>


    // STEP 5 begin
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1
10002a04:	00037000 	call	10003700 <usb_get_config_desc1>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002a08:	00000306 	br	10002a18 <keyboard_init+0x5f4>
    {
        // resend the get device descriptor
        // get device descriptor

        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
10002a0c:	00037000 	call	10003700 <usb_get_config_desc1>
        usleep(10 * 1000);
10002a10:	0109c404 	movi	r4,10000
10002a14:	0011df80 	call	10011df8 <usleep>
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002a18:	010000c4 	movi	r4,3
10002a1c:	00023bc0 	call	100023bc <io_read>
10002a20:	10bfffcc 	andi	r2,r2,65535
10002a24:	1080040c 	andi	r2,r2,16
10002a28:	103ff826 	beq	r2,zero,10002a0c <__alt_data_end+0xf8002a0c>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002a2c:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002a30:	01414184 	movi	r5,1286
10002a34:	01000084 	movi	r4,2
10002a38:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));
10002a3c:	0009883a 	mov	r4,zero
10002a40:	00023bc0 	call	100023bc <io_read>
10002a44:	10bfffcc 	andi	r2,r2,65535
10002a48:	100b883a 	mov	r5,r2
10002a4c:	01040074 	movhi	r4,4097
10002a50:	21107c04 	addi	r4,r4,16880
10002a54:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002a58:	01414204 	movi	r5,1288
10002a5c:	01000084 	movi	r4,2
10002a60:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002a64:	0009883a 	mov	r4,zero
10002a68:	00023bc0 	call	100023bc <io_read>
10002a6c:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
10002a70:	d0ab570b 	ldhu	r2,-21156(gp)
10002a74:	10bfffcc 	andi	r2,r2,65535
10002a78:	100b883a 	mov	r5,r2
10002a7c:	01040074 	movhi	r4,4097
10002a80:	21108704 	addi	r4,r4,16924
10002a84:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002a88:	00000206 	br	10002a94 <keyboard_init+0x670>
        usb_ctl_val = usb_get_retry_cnt();
10002a8c:	00042040 	call	10004204 <usb_get_retry_cnt>
10002a90:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002a94:	d0ab570b 	ldhu	r2,-21156(gp)
10002a98:	10bfffcc 	andi	r2,r2,65535
10002a9c:	108000d8 	cmpnei	r2,r2,3
10002aa0:	103ffa1e 	bne	r2,zero,10002a8c <__alt_data_end+0xf8002a8c>
        usb_ctl_val = usb_get_retry_cnt();
    }
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10002aa4:	01040074 	movhi	r4,4097
10002aa8:	21109304 	addi	r4,r4,16972
10002aac:	00047b40 	call	100047b4 <puts>

    // STEP 6 begin
    //-----------------------------------get configuration descriptor-2------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2
10002ab0:	00038900 	call	10003890 <usb_get_config_desc2>

    usleep(100 * 1000);
10002ab4:	010000b4 	movhi	r4,2
10002ab8:	2121a804 	addi	r4,r4,-31072
10002abc:	0011df80 	call	10011df8 <usleep>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002ac0:	00000306 	br	10002ad0 <keyboard_init+0x6ac>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
10002ac4:	00038900 	call	10003890 <usb_get_config_desc2>
        usleep(10 * 1000);
10002ac8:	0109c404 	movi	r4,10000
10002acc:	0011df80 	call	10011df8 <usleep>
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2

    usleep(100 * 1000);
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002ad0:	010000c4 	movi	r4,3
10002ad4:	00023bc0 	call	100023bc <io_read>
10002ad8:	10bfffcc 	andi	r2,r2,65535
10002adc:	1080040c 	andi	r2,r2,16
10002ae0:	103ff826 	beq	r2,zero,10002ac4 <__alt_data_end+0xf8002ac4>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002ae4:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002ae8:	01414184 	movi	r5,1286
10002aec:	01000084 	movi	r4,2
10002af0:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));
10002af4:	0009883a 	mov	r4,zero
10002af8:	00023bc0 	call	100023bc <io_read>
10002afc:	10bfffcc 	andi	r2,r2,65535
10002b00:	100b883a 	mov	r5,r2
10002b04:	01040074 	movhi	r4,4097
10002b08:	2110a604 	addi	r4,r4,17048
10002b0c:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002b10:	01414204 	movi	r5,1288
10002b14:	01000084 	movi	r4,2
10002b18:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002b1c:	0009883a 	mov	r4,zero
10002b20:	00023bc0 	call	100023bc <io_read>
10002b24:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
10002b28:	d0ab570b 	ldhu	r2,-21156(gp)
10002b2c:	10bfffcc 	andi	r2,r2,65535
10002b30:	100b883a 	mov	r5,r2
10002b34:	01040074 	movhi	r4,4097
10002b38:	2110b104 	addi	r4,r4,17092
10002b3c:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002b40:	00000206 	br	10002b4c <keyboard_init+0x728>
        usb_ctl_val = usb_get_retry_cnt();
10002b44:	00042040 	call	10004204 <usb_get_retry_cnt>
10002b48:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002b4c:	d0ab570b 	ldhu	r2,-21156(gp)
10002b50:	10bfffcc 	andi	r2,r2,65535
10002b54:	108000d8 	cmpnei	r2,r2,3
10002b58:	103ffa1e 	bne	r2,zero,10002b44 <__alt_data_end+0xf8002b44>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10002b5c:	01040074 	movhi	r4,4097
10002b60:	2110bd04 	addi	r4,r4,17140
10002b64:	00047b40 	call	100047b4 <puts>


    // --------------------------------- get device info --------------------------------------------- //

    // TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
    io_write(HPI_ADDR, 0x056c);
10002b68:	01415b04 	movi	r5,1388
10002b6c:	01000084 	movi	r4,2
10002b70:	000234c0 	call	1000234c <io_write>
    code = io_read(HPI_DATA);
10002b74:	0009883a 	mov	r4,zero
10002b78:	00023bc0 	call	100023bc <io_read>
10002b7c:	d0ab590d 	sth	r2,-21148(gp)
    code = code & 0x003;
10002b80:	d0ab590b 	ldhu	r2,-21148(gp)
10002b84:	108000cc 	andi	r2,r2,3
10002b88:	d0ab590d 	sth	r2,-21148(gp)
    printf("\ncode = %x\n", code);
10002b8c:	d0ab590b 	ldhu	r2,-21148(gp)
10002b90:	10bfffcc 	andi	r2,r2,65535
10002b94:	100b883a 	mov	r5,r2
10002b98:	01040074 	movhi	r4,4097
10002b9c:	2110d004 	addi	r4,r4,17216
10002ba0:	00046b80 	call	100046b8 <printf>

    if (code == 0x01) {
10002ba4:	d0ab590b 	ldhu	r2,-21148(gp)
10002ba8:	10bfffcc 	andi	r2,r2,65535
10002bac:	10800058 	cmpnei	r2,r2,1
10002bb0:	1000041e 	bne	r2,zero,10002bc4 <keyboard_init+0x7a0>
        printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10002bb4:	01040074 	movhi	r4,4097
10002bb8:	2110d304 	addi	r4,r4,17228
10002bbc:	00047b40 	call	100047b4 <puts>
10002bc0:	00000306 	br	10002bd0 <keyboard_init+0x7ac>
    } else {
        printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10002bc4:	01040074 	movhi	r4,4097
10002bc8:	2110e204 	addi	r4,r4,17288
10002bcc:	00047b40 	call	100047b4 <puts>
    }

    // TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

    io_write(HPI_ADDR, 0x0576);
10002bd0:	01415d84 	movi	r5,1398
10002bd4:	01000084 	movi	r4,2
10002bd8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x073F);
10002bdc:	0141cfc4 	movi	r5,1855
10002be0:	0009883a 	mov	r4,zero
10002be4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x8105);
10002be8:	01604154 	movui	r5,33029
10002bec:	0009883a 	mov	r4,zero
10002bf0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0003);
10002bf4:	014000c4 	movi	r5,3
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);
10002c00:	01400204 	movi	r5,8
10002c04:	0009883a 	mov	r4,zero
10002c08:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0xAC0A);
10002c0c:	016b0294 	movui	r5,44042
10002c10:	0009883a 	mov	r4,zero
10002c14:	000234c0 	call	1000234c <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0576);  // HUSB_SIE1_pCurrentTDPtr
10002c18:	01415d84 	movi	r5,1398
10002c1c:	01006c04 	movi	r4,432
10002c20:	00031900 	call	10003190 <usb_write>

    // data_size = (io_read(HPI_DATA)>>8)&0x0ff;
    // data_size = 0x08;  //(io_read(HPI_DATA))&0x0ff;
    // usb_print_mem();
    io_write(HPI_ADDR, 0x057c);
10002c24:	01415f04 	movi	r5,1404
10002c28:	01000084 	movi	r4,2
10002c2c:	000234c0 	call	1000234c <io_write>
    data_size = (io_read(HPI_DATA)) & 0x0ff;
10002c30:	0009883a 	mov	r4,zero
10002c34:	00023bc0 	call	100023bc <io_read>
10002c38:	d0ab5785 	stb	r2,-21154(gp)
    printf("[ENUM PROCESS]:data packet size is %d\n", data_size);
10002c3c:	d0ab5783 	ldbu	r2,-21154(gp)
10002c40:	10803fcc 	andi	r2,r2,255
10002c44:	100b883a 	mov	r5,r2
10002c48:	01040074 	movhi	r4,4097
10002c4c:	2110eb04 	addi	r4,r4,17324
10002c50:	00046b80 	call	100046b8 <printf>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration
10002c54:	0003af80 	call	10003af8 <usb_set_config>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002c58:	00000306 	br	10002c68 <keyboard_init+0x844>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
10002c5c:	0003af80 	call	10003af8 <usb_set_config>
        usleep(10 * 1000);
10002c60:	0109c404 	movi	r4,10000
10002c64:	0011df80 	call	10011df8 <usleep>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002c68:	010000c4 	movi	r4,3
10002c6c:	00023bc0 	call	100023bc <io_read>
10002c70:	10bfffcc 	andi	r2,r2,65535
10002c74:	1080040c 	andi	r2,r2,16
10002c78:	103ff826 	beq	r2,zero,10002c5c <__alt_data_end+0xf8002c5c>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002c7c:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002c80:	01414184 	movi	r5,1286
10002c84:	01000084 	movi	r4,2
10002c88:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));
10002c8c:	0009883a 	mov	r4,zero
10002c90:	00023bc0 	call	100023bc <io_read>
10002c94:	10bfffcc 	andi	r2,r2,65535
10002c98:	100b883a 	mov	r5,r2
10002c9c:	01040074 	movhi	r4,4097
10002ca0:	2110f504 	addi	r4,r4,17364
10002ca4:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002ca8:	01414204 	movi	r5,1288
10002cac:	01000084 	movi	r4,2
10002cb0:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002cb4:	0009883a 	mov	r4,zero
10002cb8:	00023bc0 	call	100023bc <io_read>
10002cbc:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
10002cc0:	d0ab570b 	ldhu	r2,-21156(gp)
10002cc4:	10bfffcc 	andi	r2,r2,65535
10002cc8:	100b883a 	mov	r5,r2
10002ccc:	01040074 	movhi	r4,4097
10002cd0:	21110004 	addi	r4,r4,17408
10002cd4:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002cd8:	00000206 	br	10002ce4 <keyboard_init+0x8c0>
        usb_ctl_val = usb_get_retry_cnt();
10002cdc:	00042040 	call	10004204 <usb_get_retry_cnt>
10002ce0:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002ce4:	d0ab570b 	ldhu	r2,-21156(gp)
10002ce8:	10bfffcc 	andi	r2,r2,65535
10002cec:	108000d8 	cmpnei	r2,r2,3
10002cf0:	103ffa1e 	bne	r2,zero,10002cdc <__alt_data_end+0xf8002cdc>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10002cf4:	01040074 	movhi	r4,4097
10002cf8:	21110c04 	addi	r4,r4,17456
10002cfc:	00047b40 	call	100047b4 <puts>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();
10002d00:	0003bf80 	call	10003bf8 <usb_class_request>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002d04:	00000306 	br	10002d14 <keyboard_init+0x8f0>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
10002d08:	0003bf80 	call	10003bf8 <usb_class_request>
        usleep(10 * 1000);
10002d0c:	0109c404 	movi	r4,10000
10002d10:	0011df80 	call	10011df8 <usleep>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002d14:	010000c4 	movi	r4,3
10002d18:	00023bc0 	call	100023bc <io_read>
10002d1c:	10bfffcc 	andi	r2,r2,65535
10002d20:	1080040c 	andi	r2,r2,16
10002d24:	103ff826 	beq	r2,zero,10002d08 <__alt_data_end+0xf8002d08>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002d28:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002d2c:	01414184 	movi	r5,1286
10002d30:	01000084 	movi	r4,2
10002d34:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
10002d38:	0009883a 	mov	r4,zero
10002d3c:	00023bc0 	call	100023bc <io_read>
10002d40:	10bfffcc 	andi	r2,r2,65535
10002d44:	100b883a 	mov	r5,r2
10002d48:	01040074 	movhi	r4,4097
10002d4c:	21111e04 	addi	r4,r4,17528
10002d50:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002d54:	01414204 	movi	r5,1288
10002d58:	01000084 	movi	r4,2
10002d5c:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002d60:	0009883a 	mov	r4,zero
10002d64:	00023bc0 	call	100023bc <io_read>
10002d68:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10002d6c:	d0ab570b 	ldhu	r2,-21156(gp)
10002d70:	10bfffcc 	andi	r2,r2,65535
10002d74:	100b883a 	mov	r5,r2
10002d78:	01040074 	movhi	r4,4097
10002d7c:	21112904 	addi	r4,r4,17572
10002d80:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002d84:	00000206 	br	10002d90 <keyboard_init+0x96c>
        usb_ctl_val = usb_get_retry_cnt();
10002d88:	00042040 	call	10004204 <usb_get_retry_cnt>
10002d8c:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002d90:	d0ab570b 	ldhu	r2,-21156(gp)
10002d94:	10bfffcc 	andi	r2,r2,65535
10002d98:	108000d8 	cmpnei	r2,r2,3
10002d9c:	103ffa1e 	bne	r2,zero,10002d88 <__alt_data_end+0xf8002d88>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10002da0:	01040074 	movhi	r4,4097
10002da4:	21113504 	addi	r4,r4,17620
10002da8:	00047b40 	call	100047b4 <puts>

    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();
10002dac:	0003cf80 	call	10003cf8 <usb_get_hid_desc>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002db0:	00000306 	br	10002dc0 <keyboard_init+0x99c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
10002db4:	0003cf80 	call	10003cf8 <usb_get_hid_desc>
        usleep(10 * 1000);
10002db8:	0109c404 	movi	r4,10000
10002dbc:	0011df80 	call	10011df8 <usleep>
    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002dc0:	010000c4 	movi	r4,3
10002dc4:	00023bc0 	call	100023bc <io_read>
10002dc8:	10bfffcc 	andi	r2,r2,65535
10002dcc:	1080040c 	andi	r2,r2,16
10002dd0:	103ff826 	beq	r2,zero,10002db4 <__alt_data_end+0xf8002db4>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002dd4:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002dd8:	01414184 	movi	r5,1286
10002ddc:	01000084 	movi	r4,2
10002de0:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
10002de4:	0009883a 	mov	r4,zero
10002de8:	00023bc0 	call	100023bc <io_read>
10002dec:	10bfffcc 	andi	r2,r2,65535
10002df0:	100b883a 	mov	r5,r2
10002df4:	01040074 	movhi	r4,4097
10002df8:	21111e04 	addi	r4,r4,17528
10002dfc:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002e00:	01414204 	movi	r5,1288
10002e04:	01000084 	movi	r4,2
10002e08:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002e0c:	0009883a 	mov	r4,zero
10002e10:	00023bc0 	call	100023bc <io_read>
10002e14:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10002e18:	d0ab570b 	ldhu	r2,-21156(gp)
10002e1c:	10bfffcc 	andi	r2,r2,65535
10002e20:	100b883a 	mov	r5,r2
10002e24:	01040074 	movhi	r4,4097
10002e28:	21112904 	addi	r4,r4,17572
10002e2c:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002e30:	00000206 	br	10002e3c <keyboard_init+0xa18>
        usb_ctl_val = usb_get_retry_cnt();
10002e34:	00042040 	call	10004204 <usb_get_retry_cnt>
10002e38:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002e3c:	d0ab570b 	ldhu	r2,-21156(gp)
10002e40:	10bfffcc 	andi	r2,r2,65535
10002e44:	108000d8 	cmpnei	r2,r2,3
10002e48:	103ffa1e 	bne	r2,zero,10002e34 <__alt_data_end+0xf8002e34>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10002e4c:	01040074 	movhi	r4,4097
10002e50:	21114704 	addi	r4,r4,17692
10002e54:	00047b40 	call	100047b4 <puts>

    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
10002e58:	0003e400 	call	10003e40 <usb_get_report_desc>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002e5c:	00000306 	br	10002e6c <keyboard_init+0xa48>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
10002e60:	0003e400 	call	10003e40 <usb_get_report_desc>
        usleep(10 * 1000);
10002e64:	0109c404 	movi	r4,10000
10002e68:	0011df80 	call	10011df8 <usleep>
    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002e6c:	010000c4 	movi	r4,3
10002e70:	00023bc0 	call	100023bc <io_read>
10002e74:	10bfffcc 	andi	r2,r2,65535
10002e78:	1080040c 	andi	r2,r2,16
10002e7c:	103ff826 	beq	r2,zero,10002e60 <__alt_data_end+0xf8002e60>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002e80:	00041800 	call	10004180 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002e84:	01414184 	movi	r5,1286
10002e88:	01000084 	movi	r4,2
10002e8c:	000234c0 	call	1000234c <io_write>
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));
10002e90:	0009883a 	mov	r4,zero
10002e94:	00023bc0 	call	100023bc <io_read>
10002e98:	10bfffcc 	andi	r2,r2,65535
10002e9c:	100b883a 	mov	r5,r2
10002ea0:	01040074 	movhi	r4,4097
10002ea4:	21115b04 	addi	r4,r4,17772
10002ea8:	00046b80 	call	100046b8 <printf>

    io_write(HPI_ADDR, 0x0508);
10002eac:	01414204 	movi	r5,1288
10002eb0:	01000084 	movi	r4,2
10002eb4:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002eb8:	0009883a 	mov	r4,zero
10002ebc:	00023bc0 	call	100023bc <io_read>
10002ec0:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
10002ec4:	d0ab570b 	ldhu	r2,-21156(gp)
10002ec8:	10bfffcc 	andi	r2,r2,65535
10002ecc:	100b883a 	mov	r5,r2
10002ed0:	01040074 	movhi	r4,4097
10002ed4:	21116704 	addi	r4,r4,17820
10002ed8:	00046b80 	call	100046b8 <printf>
    while (usb_ctl_val != 0x03) {
10002edc:	00000206 	br	10002ee8 <keyboard_init+0xac4>
        usb_ctl_val = usb_get_retry_cnt();
10002ee0:	00042040 	call	10004204 <usb_get_retry_cnt>
10002ee4:	d0ab570d 	sth	r2,-21156(gp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002ee8:	d0ab570b 	ldhu	r2,-21156(gp)
10002eec:	10bfffcc 	andi	r2,r2,65535
10002ef0:	108000d8 	cmpnei	r2,r2,3
10002ef4:	103ffa1e 	bne	r2,zero,10002ee0 <__alt_data_end+0xf8002ee0>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10002ef8:	01040074 	movhi	r4,4097
10002efc:	21117304 	addi	r4,r4,17868
10002f00:	00047b40 	call	100047b4 <puts>

    usleep(10000);
10002f04:	0109c404 	movi	r4,10000
10002f08:	0011df80 	call	10011df8 <usleep>
}
10002f0c:	0001883a 	nop
10002f10:	e037883a 	mov	sp,fp
10002f14:	dfc00117 	ldw	ra,4(sp)
10002f18:	df000017 	ldw	fp,0(sp)
10002f1c:	dec00204 	addi	sp,sp,8
10002f20:	f800283a 	ret

10002f24 <keyboard_fetch>:

int keyboard_fetch(alt_u16 *keycode_ptr) {
10002f24:	defffc04 	addi	sp,sp,-16
10002f28:	dfc00315 	stw	ra,12(sp)
10002f2c:	df000215 	stw	fp,8(sp)
10002f30:	dc000115 	stw	r16,4(sp)
10002f34:	df000204 	addi	fp,sp,8
10002f38:	e13ffe15 	stw	r4,-8(fp)

    fetch_toggle = 1 - fetch_toggle;
10002f3c:	d0ab5683 	ldbu	r2,-21158(gp)
10002f40:	00c00044 	movi	r3,1
10002f44:	1885c83a 	sub	r2,r3,r2
10002f48:	d0ab5685 	stb	r2,-21158(gp)

    io_write(HPI_ADDR, 0x0500);  // the start address
10002f4c:	01414004 	movi	r5,1280
10002f50:	01000084 	movi	r4,2
10002f54:	000234c0 	call	1000234c <io_write>
    // data phase IN-1
    io_write(HPI_DATA, 0x051c);  // 500
10002f58:	01414704 	movi	r5,1308
10002f5c:	0009883a 	mov	r4,zero
10002f60:	000234c0 	call	1000234c <io_write>

    io_write(HPI_DATA, 0x000f & data_size);  // 2 data length
10002f64:	d0ab5783 	ldbu	r2,-21154(gp)
10002f68:	10803fcc 	andi	r2,r2,255
10002f6c:	108003cc 	andi	r2,r2,15
10002f70:	100b883a 	mov	r5,r2
10002f74:	0009883a 	mov	r4,zero
10002f78:	000234c0 	call	1000234c <io_write>

    io_write(HPI_DATA, 0x0291);  // 4 // endpoint 1
10002f7c:	0140a444 	movi	r5,657
10002f80:	0009883a 	mov	r4,zero
10002f84:	000234c0 	call	1000234c <io_write>
    if (fetch_toggle) {
10002f88:	d0ab5683 	ldbu	r2,-21158(gp)
10002f8c:	10803fcc 	andi	r2,r2,255
10002f90:	10000426 	beq	r2,zero,10002fa4 <keyboard_fetch+0x80>
        io_write(HPI_DATA, 0x0001);  // 6 // data 1
10002f94:	01400044 	movi	r5,1
10002f98:	0009883a 	mov	r4,zero
10002f9c:	000234c0 	call	1000234c <io_write>
10002fa0:	00000306 	br	10002fb0 <keyboard_fetch+0x8c>
    } else {
        io_write(HPI_DATA, 0x0041);  // 6 // data 1
10002fa4:	01401044 	movi	r5,65
10002fa8:	0009883a 	mov	r4,zero
10002fac:	000234c0 	call	1000234c <io_write>
    }
    io_write(HPI_DATA, 0x0013);  // 8
10002fb0:	014004c4 	movi	r5,19
10002fb4:	0009883a 	mov	r4,zero
10002fb8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);  // a
10002fbc:	000b883a 	mov	r5,zero
10002fc0:	0009883a 	mov	r4,zero
10002fc4:	000234c0 	call	1000234c <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr
10002fc8:	01414004 	movi	r5,1280
10002fcc:	01006c04 	movi	r4,432
10002fd0:	00031900 	call	10003190 <usb_write>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002fd4:	00002206 	br	10003060 <keyboard_fetch+0x13c>
    {
        io_write(HPI_ADDR, 0x0500);  // the start address
10002fd8:	01414004 	movi	r5,1280
10002fdc:	01000084 	movi	r4,2
10002fe0:	000234c0 	call	1000234c <io_write>
        // data phase IN-1
        io_write(HPI_DATA, 0x051c);  // 500
10002fe4:	01414704 	movi	r5,1308
10002fe8:	0009883a 	mov	r4,zero
10002fec:	000234c0 	call	1000234c <io_write>

        io_write(HPI_DATA, 0x000f & data_size);  // 2 data length
10002ff0:	d0ab5783 	ldbu	r2,-21154(gp)
10002ff4:	10803fcc 	andi	r2,r2,255
10002ff8:	108003cc 	andi	r2,r2,15
10002ffc:	100b883a 	mov	r5,r2
10003000:	0009883a 	mov	r4,zero
10003004:	000234c0 	call	1000234c <io_write>

        io_write(HPI_DATA, 0x0291);  // 4 // endpoint 1
10003008:	0140a444 	movi	r5,657
1000300c:	0009883a 	mov	r4,zero
10003010:	000234c0 	call	1000234c <io_write>

        if (fetch_toggle) {
10003014:	d0ab5683 	ldbu	r2,-21158(gp)
10003018:	10803fcc 	andi	r2,r2,255
1000301c:	10000426 	beq	r2,zero,10003030 <keyboard_fetch+0x10c>
            io_write(HPI_DATA, 0x0001);  // 6 // data 1
10003020:	01400044 	movi	r5,1
10003024:	0009883a 	mov	r4,zero
10003028:	000234c0 	call	1000234c <io_write>
1000302c:	00000306 	br	1000303c <keyboard_fetch+0x118>
        } else {
            io_write(HPI_DATA, 0x0041);  // 6 // data 1
10003030:	01401044 	movi	r5,65
10003034:	0009883a 	mov	r4,zero
10003038:	000234c0 	call	1000234c <io_write>
        }

        io_write(HPI_DATA, 0x0013);  // 8
1000303c:	014004c4 	movi	r5,19
10003040:	0009883a 	mov	r4,zero
10003044:	000234c0 	call	1000234c <io_write>
        io_write(HPI_DATA, 0x0000);  //
10003048:	000b883a 	mov	r5,zero
1000304c:	0009883a 	mov	r4,zero
10003050:	000234c0 	call	1000234c <io_write>
        usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr
10003054:	01414004 	movi	r5,1280
10003058:	01006c04 	movi	r4,432
1000305c:	00031900 	call	10003190 <usb_write>
    }
    io_write(HPI_DATA, 0x0013);  // 8
    io_write(HPI_DATA, 0x0000);  // a
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003060:	010000c4 	movi	r4,3
10003064:	00023bc0 	call	100023bc <io_read>
10003068:	10bfffcc 	andi	r2,r2,65535
1000306c:	1080040c 	andi	r2,r2,16
10003070:	103fd926 	beq	r2,zero,10002fd8 <__alt_data_end+0xf8002fd8>

        // NOTE: [liuzikai] disable this sleep so that this procesure won't take too long
        // usleep(10 * 1000);
    }

    usb_ctl_val = usb_wait_td_list_done();
10003074:	00041800 	call	10004180 <usb_wait_td_list_done>
10003078:	d0ab570d 	sth	r2,-21156(gp)

    // The first two keycodes are stored in 0x051E. Other keycodes are in subsequent addresses.
    *keycode_ptr = usb_read(0x051e);
1000307c:	01014784 	movi	r4,1310
10003080:	00031e80 	call	100031e8 <usb_read>
10003084:	1007883a 	mov	r3,r2
10003088:	e0bffe17 	ldw	r2,-8(fp)
1000308c:	10c0000d 	sth	r3,0(r2)
    *(keycode_ptr + 1) = usb_read(0x051f);
10003090:	e0bffe17 	ldw	r2,-8(fp)
10003094:	14000084 	addi	r16,r2,2
10003098:	010147c4 	movi	r4,1311
1000309c:	00031e80 	call	100031e8 <usb_read>
100030a0:	8080000d 	sth	r2,0(r16)
    *(keycode_ptr + 2) = usb_read(0x0520);
100030a4:	e0bffe17 	ldw	r2,-8(fp)
100030a8:	14000104 	addi	r16,r2,4
100030ac:	01014804 	movi	r4,1312
100030b0:	00031e80 	call	100031e8 <usb_read>
100030b4:	8080000d 	sth	r2,0(r16)
    *(keycode_ptr + 3) = usb_read(0x0521);
100030b8:	e0bffe17 	ldw	r2,-8(fp)
100030bc:	14000184 	addi	r16,r2,6
100030c0:	01014844 	movi	r4,1313
100030c4:	00031e80 	call	100031e8 <usb_read>
100030c8:	8080000d 	sth	r2,0(r16)

    // printf("\nThe first two keycode values are %04x\n", *keycode);

    // We only need the first keycode, which is at the lower byte of keycode.
    // Send the keycode to hardware via PIO.
    *keycode_base = *keycode_ptr & 0xffu;
100030cc:	00803004 	movi	r2,192
100030d0:	e0fffe17 	ldw	r3,-8(fp)
100030d4:	18c0000b 	ldhu	r3,0(r3)
100030d8:	10c00005 	stb	r3,0(r2)
            printf("[INFO]: please insert again!!! \n");
            return 1;
        }
    } */

    return 0;
100030dc:	0005883a 	mov	r2,zero
}
100030e0:	e6ffff04 	addi	sp,fp,-4
100030e4:	dfc00217 	ldw	ra,8(sp)
100030e8:	df000117 	ldw	fp,4(sp)
100030ec:	dc000017 	ldw	r16,0(sp)
100030f0:	dec00304 	addi	sp,sp,12
100030f4:	f800283a 	ret

100030f8 <keyboard_hot_plugged>:

int keyboard_hot_plugged() {
100030f8:	defffe04 	addi	sp,sp,-8
100030fc:	dfc00115 	stw	ra,4(sp)
10003100:	df000015 	stw	fp,0(sp)
10003104:	d839883a 	mov	fp,sp
    usb_ctl_val = usb_read(ctl_reg);
10003108:	d0ab550b 	ldhu	r2,-21164(gp)
1000310c:	10bfffcc 	andi	r2,r2,65535
10003110:	1009883a 	mov	r4,r2
10003114:	00031e80 	call	100031e8 <usb_read>
10003118:	d0ab570d 	sth	r2,-21156(gp)
    usleep(5 * 1000);
1000311c:	0104e204 	movi	r4,5000
10003120:	0011df80 	call	10011df8 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
10003124:	d0ab550b 	ldhu	r2,-21164(gp)
10003128:	10bfffcc 	andi	r2,r2,65535
1000312c:	1009883a 	mov	r4,r2
10003130:	00031e80 	call	100031e8 <usb_read>
10003134:	d0ab570d 	sth	r2,-21156(gp)
    usleep(5 * 1000);
10003138:	0104e204 	movi	r4,5000
1000313c:	0011df80 	call	10011df8 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
10003140:	d0ab550b 	ldhu	r2,-21164(gp)
10003144:	10bfffcc 	andi	r2,r2,65535
10003148:	1009883a 	mov	r4,r2
1000314c:	00031e80 	call	100031e8 <usb_read>
10003150:	d0ab570d 	sth	r2,-21156(gp)
    usleep(5 * 1000);
10003154:	0104e204 	movi	r4,5000
10003158:	0011df80 	call	10011df8 <usleep>

    if (usb_ctl_val & no_device) return 1;
1000315c:	d0eb570b 	ldhu	r3,-21156(gp)
10003160:	d0ab558b 	ldhu	r2,-21162(gp)
10003164:	1884703a 	and	r2,r3,r2
10003168:	10bfffcc 	andi	r2,r2,65535
1000316c:	10000226 	beq	r2,zero,10003178 <keyboard_hot_plugged+0x80>
10003170:	00800044 	movi	r2,1
10003174:	00000106 	br	1000317c <keyboard_hot_plugged+0x84>

    return 0;
10003178:	0005883a 	mov	r2,zero
}
1000317c:	e037883a 	mov	sp,fp
10003180:	dfc00117 	ldw	ra,4(sp)
10003184:	df000017 	ldw	fp,0(sp)
10003188:	dec00204 	addi	sp,sp,8
1000318c:	f800283a 	ret

10003190 <usb_write>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_write(alt_u16 Address, alt_u16 Data) {
10003190:	defffc04 	addi	sp,sp,-16
10003194:	dfc00315 	stw	ra,12(sp)
10003198:	df000215 	stw	fp,8(sp)
1000319c:	df000204 	addi	fp,sp,8
100031a0:	2007883a 	mov	r3,r4
100031a4:	2805883a 	mov	r2,r5
100031a8:	e0fffe0d 	sth	r3,-8(fp)
100031ac:	e0bfff0d 	sth	r2,-4(fp)
    io_write(HPI_ADDR, Address);
100031b0:	e0bffe0b 	ldhu	r2,-8(fp)
100031b4:	100b883a 	mov	r5,r2
100031b8:	01000084 	movi	r4,2
100031bc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, Data);
100031c0:	e0bfff0b 	ldhu	r2,-4(fp)
100031c4:	100b883a 	mov	r5,r2
100031c8:	0009883a 	mov	r4,zero
100031cc:	000234c0 	call	1000234c <io_write>
}
100031d0:	0001883a 	nop
100031d4:	e037883a 	mov	sp,fp
100031d8:	dfc00117 	ldw	ra,4(sp)
100031dc:	df000017 	ldw	fp,0(sp)
100031e0:	dec00204 	addi	sp,sp,8
100031e4:	f800283a 	ret

100031e8 <usb_read>:
 * @return   The data read from the specified address
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 usb_read(alt_u16 Address) {
100031e8:	defffd04 	addi	sp,sp,-12
100031ec:	dfc00215 	stw	ra,8(sp)
100031f0:	df000115 	stw	fp,4(sp)
100031f4:	df000104 	addi	fp,sp,4
100031f8:	2005883a 	mov	r2,r4
100031fc:	e0bfff0d 	sth	r2,-4(fp)
    // Write the address into HPI address port register
    io_write(HPI_ADDR, Address);
10003200:	e0bfff0b 	ldhu	r2,-4(fp)
10003204:	100b883a 	mov	r5,r2
10003208:	01000084 	movi	r4,2
1000320c:	000234c0 	call	1000234c <io_write>
    return io_read(HPI_DATA);
10003210:	0009883a 	mov	r4,zero
10003214:	00023bc0 	call	100023bc <io_read>
}
10003218:	e037883a 	mov	sp,fp
1000321c:	dfc00117 	ldw	ra,4(sp)
10003220:	df000017 	ldw	fp,0(sp)
10003224:	dec00204 	addi	sp,sp,8
10003228:	f800283a 	ret

1000322c <usb_soft_reset>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_soft_reset() {
1000322c:	defffe04 	addi	sp,sp,-8
10003230:	dfc00115 	stw	ra,4(sp)
10003234:	df000015 	stw	fp,0(sp)
10003238:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    io_write(HPI_MAILBOX, COMM_RESET); //COMM_JUMP2CODE
1000323c:	017e9414 	movui	r5,64080
10003240:	01000044 	movi	r4,1
10003244:	000234c0 	call	1000234c <io_write>
    usleep(100000);
10003248:	010000b4 	movhi	r4,2
1000324c:	2121a804 	addi	r4,r4,-31072
10003250:	0011df80 	call	10011df8 <usleep>
    printf("[USB INIT]:reset finished!\n");
10003254:	01040074 	movhi	r4,4097
10003258:	21118704 	addi	r4,r4,17948
1000325c:	00047b40 	call	100047b4 <puts>

    usleep(500000);
10003260:	01000234 	movhi	r4,8
10003264:	21284804 	addi	r4,r4,-24288
10003268:	0011df80 	call	10011df8 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
1000326c:	01040074 	movhi	r4,4097
10003270:	21118e04 	addi	r4,r4,17976
10003274:	00047b40 	call	100047b4 <puts>
    io_read(HPI_MAILBOX);
10003278:	01000044 	movi	r4,1
1000327c:	00023bc0 	call	100023bc <io_read>
    io_read(HPI_STATUS);
10003280:	010000c4 	movi	r4,3
10003284:	00023bc0 	call	100023bc <io_read>

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    usb_read(HPI_SIE1_MSG_ADR);
10003288:	01005104 	movi	r4,324
1000328c:	00031e80 	call	100031e8 <usb_read>
    usb_write(HPI_SIE1_MSG_ADR, 0);
10003290:	000b883a 	mov	r5,zero
10003294:	01005104 	movi	r4,324
10003298:	00031900 	call	10003190 <usb_write>
    usb_read(HPI_SIE2_MSG_ADR);
1000329c:	01005204 	movi	r4,328
100032a0:	00031e80 	call	100031e8 <usb_read>
    usb_write(HPI_SIE2_MSG_ADR, 0);
100032a4:	000b883a 	mov	r5,zero
100032a8:	01005204 	movi	r4,328
100032ac:	00031900 	call	10003190 <usb_write>


    usb_write(HOST1_STAT_REG, 0xFFFF);
100032b0:	017fffd4 	movui	r5,65535
100032b4:	01302414 	movui	r4,49296
100032b8:	00031900 	call	10003190 <usb_write>
    usb_write(HOST2_STAT_REG, 0xFFFF);
100032bc:	017fffd4 	movui	r5,65535
100032c0:	01302c14 	movui	r4,49328
100032c4:	00031900 	call	10003190 <usb_write>
}
100032c8:	0001883a 	nop
100032cc:	e037883a 	mov	sp,fp
100032d0:	dfc00117 	ldw	ra,4(sp)
100032d4:	df000017 	ldw	fp,0(sp)
100032d8:	dec00204 	addi	sp,sp,8
100032dc:	f800283a 	ret

100032e0 <usb_set_address>:


void usb_set_address() {
100032e0:	defffe04 	addi	sp,sp,-8
100032e4:	dfc00115 	stw	ra,4(sp)
100032e8:	df000015 	stw	fp,0(sp)
100032ec:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100032f0:	01414004 	movi	r5,1280
100032f4:	01000084 	movi	r4,2
100032f8:	000234c0 	call	1000234c <io_write>
    // TD #1: 6 writes
    io_write(HPI_DATA, 0x050C);
100032fc:	01414304 	movi	r5,1292
10003300:	0009883a 	mov	r4,zero
10003304:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003308:	01400204 	movi	r5,8
1000330c:	0009883a 	mov	r4,zero
10003310:	000234c0 	call	1000234c <io_write>
    // TASK: Complete with 4 more IOWR functions
    io_write(HPI_DATA, 0x00D0);
10003314:	01403404 	movi	r5,208
10003318:	0009883a 	mov	r4,zero
1000331c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003320:	01400044 	movi	r5,1
10003324:	0009883a 	mov	r4,zero
10003328:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
1000332c:	014004c4 	movi	r5,19
10003330:	0009883a 	mov	r4,zero
10003334:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003338:	01414504 	movi	r5,1300
1000333c:	0009883a 	mov	r4,zero
10003340:	000234c0 	call	1000234c <io_write>
    // TD #2: 4 writes
    // TASK: Complete with 4 IOWR functions
    io_write(HPI_DATA, 0x0500);
10003344:	01414004 	movi	r5,1280
10003348:	0009883a 	mov	r4,zero
1000334c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0002);
10003350:	01400084 	movi	r5,2
10003354:	0009883a 	mov	r4,zero
10003358:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
1000335c:	000b883a 	mov	r5,zero
10003360:	0009883a 	mov	r4,zero
10003364:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003368:	000b883a 	mov	r5,zero
1000336c:	0009883a 	mov	r4,zero
10003370:	000234c0 	call	1000234c <io_write>
    // TD #3: 6 writes
    // TASK: Complete with 6 IOWR functions
    io_write(HPI_DATA, 0x0000); //
10003374:	000b883a 	mov	r5,zero
10003378:	0009883a 	mov	r4,zero
1000337c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//
10003380:	000b883a 	mov	r5,zero
10003384:	0009883a 	mov	r4,zero
10003388:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0090);//
1000338c:	01402404 	movi	r5,144
10003390:	0009883a 	mov	r4,zero
10003394:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);
10003398:	01401044 	movi	r5,65
1000339c:	0009883a 	mov	r4,zero
100033a0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
100033a4:	014004c4 	movi	r5,19
100033a8:	0009883a 	mov	r4,zero
100033ac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
100033b0:	000b883a 	mov	r5,zero
100033b4:	0009883a 	mov	r4,zero
100033b8:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100033bc:	01414004 	movi	r5,1280
100033c0:	01006c04 	movi	r4,432
100033c4:	00031900 	call	10003190 <usb_write>
}
100033c8:	0001883a 	nop
100033cc:	e037883a 	mov	sp,fp
100033d0:	dfc00117 	ldw	ra,4(sp)
100033d4:	df000017 	ldw	fp,0(sp)
100033d8:	dec00204 	addi	sp,sp,8
100033dc:	f800283a 	ret

100033e0 <usb_get_device_desc1>:


void usb_get_device_desc1() {
100033e0:	defffe04 	addi	sp,sp,-8
100033e4:	dfc00115 	stw	ra,4(sp)
100033e8:	df000015 	stw	fp,0(sp)
100033ec:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100033f0:	01414004 	movi	r5,1280
100033f4:	01000084 	movi	r4,2
100033f8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
100033fc:	01414304 	movi	r5,1292
10003400:	0009883a 	mov	r4,zero
10003404:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003408:	01400204 	movi	r5,8
1000340c:	0009883a 	mov	r4,zero
10003410:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003414:	0140b404 	movi	r5,720
10003418:	0009883a 	mov	r4,zero
1000341c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003420:	01400044 	movi	r5,1
10003424:	0009883a 	mov	r4,zero
10003428:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
1000342c:	014004c4 	movi	r5,19
10003430:	0009883a 	mov	r4,zero
10003434:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003438:	01414504 	movi	r5,1300
1000343c:	0009883a 	mov	r4,zero
10003440:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003444:	0141a004 	movi	r5,1664
10003448:	0009883a 	mov	r4,zero
1000344c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0100); //device 0x01
10003450:	01404004 	movi	r5,256
10003454:	0009883a 	mov	r4,zero
10003458:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
1000345c:	000b883a 	mov	r5,zero
10003460:	0009883a 	mov	r4,zero
10003464:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);
10003468:	01400204 	movi	r5,8
1000346c:	0009883a 	mov	r4,zero
10003470:	000234c0 	call	1000234c <io_write>

    //data phase IN
    io_write(HPI_DATA, 0x052C); //
10003474:	01414b04 	movi	r5,1324
10003478:	0009883a 	mov	r4,zero
1000347c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//
10003480:	01400204 	movi	r5,8
10003484:	0009883a 	mov	r4,zero
10003488:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//
1000348c:	0140a404 	movi	r5,656
10003490:	0009883a 	mov	r4,zero
10003494:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);
10003498:	01401044 	movi	r5,65
1000349c:	0009883a 	mov	r4,zero
100034a0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
100034a4:	014004c4 	movi	r5,19
100034a8:	0009883a 	mov	r4,zero
100034ac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0520);
100034b0:	01414804 	movi	r5,1312
100034b4:	0009883a 	mov	r4,zero
100034b8:	000234c0 	call	1000234c <io_write>

    //    //status phase
    io_write(HPI_DATA, 0x0000); //don't care
100034bc:	000b883a 	mov	r5,zero
100034c0:	0009883a 	mov	r4,zero
100034c4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//port number
100034c8:	000b883a 	mov	r5,zero
100034cc:	0009883a 	mov	r4,zero
100034d0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0210);//device address
100034d4:	01408404 	movi	r5,528
100034d8:	0009883a 	mov	r4,zero
100034dc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);
100034e0:	01401044 	movi	r5,65
100034e4:	0009883a 	mov	r4,zero
100034e8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
100034ec:	014004c4 	movi	r5,19
100034f0:	0009883a 	mov	r4,zero
100034f4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
100034f8:	000b883a 	mov	r5,zero
100034fc:	0009883a 	mov	r4,zero
10003500:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003504:	01414004 	movi	r5,1280
10003508:	01006c04 	movi	r4,432
1000350c:	00031900 	call	10003190 <usb_write>
}
10003510:	0001883a 	nop
10003514:	e037883a 	mov	sp,fp
10003518:	dfc00117 	ldw	ra,4(sp)
1000351c:	df000017 	ldw	fp,0(sp)
10003520:	dec00204 	addi	sp,sp,8
10003524:	f800283a 	ret

10003528 <usb_get_device_desc2>:

void usb_get_device_desc2() {
10003528:	defffe04 	addi	sp,sp,-8
1000352c:	dfc00115 	stw	ra,4(sp)
10003530:	df000015 	stw	fp,0(sp)
10003534:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003538:	01414004 	movi	r5,1280
1000353c:	01000084 	movi	r4,2
10003540:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
10003544:	01414304 	movi	r5,1292
10003548:	0009883a 	mov	r4,zero
1000354c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003550:	01400204 	movi	r5,8
10003554:	0009883a 	mov	r4,zero
10003558:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
1000355c:	0140b404 	movi	r5,720
10003560:	0009883a 	mov	r4,zero
10003564:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003568:	01400044 	movi	r5,1
1000356c:	0009883a 	mov	r4,zero
10003570:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003574:	014004c4 	movi	r5,19
10003578:	0009883a 	mov	r4,zero
1000357c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003580:	01414504 	movi	r5,1300
10003584:	0009883a 	mov	r4,zero
10003588:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
1000358c:	0141a004 	movi	r5,1664
10003590:	0009883a 	mov	r4,zero
10003594:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0100);//e //device 0x01
10003598:	01404004 	movi	r5,256
1000359c:	0009883a 	mov	r4,zero
100035a0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//0
100035a4:	000b883a 	mov	r5,zero
100035a8:	0009883a 	mov	r4,zero
100035ac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0012);//2
100035b0:	01400484 	movi	r5,18
100035b4:	0009883a 	mov	r4,zero
100035b8:	000234c0 	call	1000234c <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
100035bc:	01415104 	movi	r5,1348
100035c0:	0009883a 	mov	r4,zero
100035c4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//6
100035c8:	01400204 	movi	r5,8
100035cc:	0009883a 	mov	r4,zero
100035d0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
100035d4:	0140a404 	movi	r5,656
100035d8:	0009883a 	mov	r4,zero
100035dc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a
100035e0:	01401044 	movi	r5,65
100035e4:	0009883a 	mov	r4,zero
100035e8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
100035ec:	014004c4 	movi	r5,19
100035f0:	0009883a 	mov	r4,zero
100035f4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0520);//e
100035f8:	01414804 	movi	r5,1312
100035fc:	0009883a 	mov	r4,zero
10003600:	000234c0 	call	1000234c <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
10003604:	01415304 	movi	r5,1356
10003608:	0009883a 	mov	r4,zero
1000360c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003610:	01400204 	movi	r5,8
10003614:	0009883a 	mov	r4,zero
10003618:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//4
1000361c:	0140a404 	movi	r5,656
10003620:	0009883a 	mov	r4,zero
10003624:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//6
10003628:	01400044 	movi	r5,1
1000362c:	0009883a 	mov	r4,zero
10003630:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003634:	014004c4 	movi	r5,19
10003638:	0009883a 	mov	r4,zero
1000363c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003640:	01414b04 	movi	r5,1324
10003644:	0009883a 	mov	r4,zero
10003648:	000234c0 	call	1000234c <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0554); //c
1000364c:	01415504 	movi	r5,1364
10003650:	0009883a 	mov	r4,zero
10003654:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0002);//e
10003658:	01400084 	movi	r5,2
1000365c:	0009883a 	mov	r4,zero
10003660:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//530
10003664:	0140a404 	movi	r5,656
10003668:	0009883a 	mov	r4,zero
1000366c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003670:	01401044 	movi	r5,65
10003674:	0009883a 	mov	r4,zero
10003678:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//4
1000367c:	014004c4 	movi	r5,19
10003680:	0009883a 	mov	r4,zero
10003684:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0538);//6
10003688:	01414e04 	movi	r5,1336
1000368c:	0009883a 	mov	r4,zero
10003690:	000234c0 	call	1000234c <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //538
10003694:	000b883a 	mov	r5,zero
10003698:	0009883a 	mov	r4,zero
1000369c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//a
100036a0:	000b883a 	mov	r5,zero
100036a4:	0009883a 	mov	r4,zero
100036a8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0210);//c
100036ac:	01408404 	movi	r5,528
100036b0:	0009883a 	mov	r4,zero
100036b4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//e
100036b8:	01401044 	movi	r5,65
100036bc:	0009883a 	mov	r4,zero
100036c0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//540
100036c4:	014004c4 	movi	r5,19
100036c8:	0009883a 	mov	r4,zero
100036cc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//2
100036d0:	000b883a 	mov	r5,zero
100036d4:	0009883a 	mov	r4,zero
100036d8:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100036dc:	01414004 	movi	r5,1280
100036e0:	01006c04 	movi	r4,432
100036e4:	00031900 	call	10003190 <usb_write>
}
100036e8:	0001883a 	nop
100036ec:	e037883a 	mov	sp,fp
100036f0:	dfc00117 	ldw	ra,4(sp)
100036f4:	df000017 	ldw	fp,0(sp)
100036f8:	dec00204 	addi	sp,sp,8
100036fc:	f800283a 	ret

10003700 <usb_get_config_desc1>:


void usb_get_config_desc1() {
10003700:	defffe04 	addi	sp,sp,-8
10003704:	dfc00115 	stw	ra,4(sp)
10003708:	df000015 	stw	fp,0(sp)
1000370c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003710:	01414004 	movi	r5,1280
10003714:	01000084 	movi	r4,2
10003718:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
1000371c:	01414304 	movi	r5,1292
10003720:	0009883a 	mov	r4,zero
10003724:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003728:	01400204 	movi	r5,8
1000372c:	0009883a 	mov	r4,zero
10003730:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003734:	0140b404 	movi	r5,720
10003738:	0009883a 	mov	r4,zero
1000373c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003740:	01400044 	movi	r5,1
10003744:	0009883a 	mov	r4,zero
10003748:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
1000374c:	014004c4 	movi	r5,19
10003750:	0009883a 	mov	r4,zero
10003754:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003758:	01414504 	movi	r5,1300
1000375c:	0009883a 	mov	r4,zero
10003760:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003764:	0141a004 	movi	r5,1664
10003768:	0009883a 	mov	r4,zero
1000376c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10003770:	01408004 	movi	r5,512
10003774:	0009883a 	mov	r4,zero
10003778:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//0
1000377c:	000b883a 	mov	r5,zero
10003780:	0009883a 	mov	r4,zero
10003784:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0009);//2
10003788:	01400244 	movi	r5,9
1000378c:	0009883a 	mov	r4,zero
10003790:	000234c0 	call	1000234c <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10003794:	01415104 	movi	r5,1348
10003798:	0009883a 	mov	r4,zero
1000379c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//6
100037a0:	01400204 	movi	r5,8
100037a4:	0009883a 	mov	r4,zero
100037a8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
100037ac:	0140a404 	movi	r5,656
100037b0:	0009883a 	mov	r4,zero
100037b4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a
100037b8:	01401044 	movi	r5,65
100037bc:	0009883a 	mov	r4,zero
100037c0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
100037c4:	014004c4 	movi	r5,19
100037c8:	0009883a 	mov	r4,zero
100037cc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0520);//e
100037d0:	01414804 	movi	r5,1312
100037d4:	0009883a 	mov	r4,zero
100037d8:	000234c0 	call	1000234c <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
100037dc:	01415304 	movi	r5,1356
100037e0:	0009883a 	mov	r4,zero
100037e4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//2
100037e8:	01400044 	movi	r5,1
100037ec:	0009883a 	mov	r4,zero
100037f0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//4
100037f4:	0140a404 	movi	r5,656
100037f8:	0009883a 	mov	r4,zero
100037fc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003800:	01400044 	movi	r5,1
10003804:	0009883a 	mov	r4,zero
10003808:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//8
1000380c:	014004c4 	movi	r5,19
10003810:	0009883a 	mov	r4,zero
10003814:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003818:	01414b04 	movi	r5,1324
1000381c:	0009883a 	mov	r4,zero
10003820:	000234c0 	call	1000234c <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
10003824:	000b883a 	mov	r5,zero
10003828:	0009883a 	mov	r4,zero
1000382c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//e
10003830:	000b883a 	mov	r5,zero
10003834:	0009883a 	mov	r4,zero
10003838:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0210);//530
1000383c:	01408404 	movi	r5,528
10003840:	0009883a 	mov	r4,zero
10003844:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003848:	01401044 	movi	r5,65
1000384c:	0009883a 	mov	r4,zero
10003850:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003854:	014004c4 	movi	r5,19
10003858:	0009883a 	mov	r4,zero
1000385c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//6
10003860:	000b883a 	mov	r5,zero
10003864:	0009883a 	mov	r4,zero
10003868:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000386c:	01414004 	movi	r5,1280
10003870:	01006c04 	movi	r4,432
10003874:	00031900 	call	10003190 <usb_write>
}
10003878:	0001883a 	nop
1000387c:	e037883a 	mov	sp,fp
10003880:	dfc00117 	ldw	ra,4(sp)
10003884:	df000017 	ldw	fp,0(sp)
10003888:	dec00204 	addi	sp,sp,8
1000388c:	f800283a 	ret

10003890 <usb_get_config_desc2>:


void usb_get_config_desc2() {
10003890:	defffe04 	addi	sp,sp,-8
10003894:	dfc00115 	stw	ra,4(sp)
10003898:	df000015 	stw	fp,0(sp)
1000389c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100038a0:	01414004 	movi	r5,1280
100038a4:	01000084 	movi	r4,2
100038a8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
100038ac:	01414304 	movi	r5,1292
100038b0:	0009883a 	mov	r4,zero
100038b4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100038b8:	01400204 	movi	r5,8
100038bc:	0009883a 	mov	r4,zero
100038c0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
100038c4:	0140b404 	movi	r5,720
100038c8:	0009883a 	mov	r4,zero
100038cc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
100038d0:	01400044 	movi	r5,1
100038d4:	0009883a 	mov	r4,zero
100038d8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
100038dc:	014004c4 	movi	r5,19
100038e0:	0009883a 	mov	r4,zero
100038e4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
100038e8:	01414504 	movi	r5,1300
100038ec:	0009883a 	mov	r4,zero
100038f0:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
100038f4:	0141a004 	movi	r5,1664
100038f8:	0009883a 	mov	r4,zero
100038fc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10003900:	01408004 	movi	r5,512
10003904:	0009883a 	mov	r4,zero
10003908:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//0
1000390c:	000b883a 	mov	r5,zero
10003910:	0009883a 	mov	r4,zero
10003914:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x00FF);//2
10003918:	01403fc4 	movi	r5,255
1000391c:	0009883a 	mov	r4,zero
10003920:	000234c0 	call	1000234c <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x055c); //514
10003924:	01415704 	movi	r5,1372
10003928:	0009883a 	mov	r4,zero
1000392c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003930:	01400204 	movi	r5,8
10003934:	0009883a 	mov	r4,zero
10003938:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
1000393c:	0140a404 	movi	r5,656
10003940:	0009883a 	mov	r4,zero
10003944:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003948:	01401044 	movi	r5,65
1000394c:	0009883a 	mov	r4,zero
10003950:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003954:	014004c4 	movi	r5,19
10003958:	0009883a 	mov	r4,zero
1000395c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003960:	01414804 	movi	r5,1312
10003964:	0009883a 	mov	r4,zero
10003968:	000234c0 	call	1000234c <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0564); //520
1000396c:	01415904 	movi	r5,1380
10003970:	0009883a 	mov	r4,zero
10003974:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003978:	01400204 	movi	r5,8
1000397c:	0009883a 	mov	r4,zero
10003980:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003984:	0140a404 	movi	r5,656
10003988:	0009883a 	mov	r4,zero
1000398c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003990:	01400044 	movi	r5,1
10003994:	0009883a 	mov	r4,zero
10003998:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//8
1000399c:	014004c4 	movi	r5,19
100039a0:	0009883a 	mov	r4,zero
100039a4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x052c);//a
100039a8:	01414b04 	movi	r5,1324
100039ac:	0009883a 	mov	r4,zero
100039b0:	000234c0 	call	1000234c <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x056c); //52c
100039b4:	01415b04 	movi	r5,1388
100039b8:	0009883a 	mov	r4,zero
100039bc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//e
100039c0:	01400204 	movi	r5,8
100039c4:	0009883a 	mov	r4,zero
100039c8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//530
100039cc:	0140a404 	movi	r5,656
100039d0:	0009883a 	mov	r4,zero
100039d4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//2
100039d8:	01401044 	movi	r5,65
100039dc:	0009883a 	mov	r4,zero
100039e0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//4
100039e4:	014004c4 	movi	r5,19
100039e8:	0009883a 	mov	r4,zero
100039ec:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0538);//6
100039f0:	01414e04 	movi	r5,1336
100039f4:	0009883a 	mov	r4,zero
100039f8:	000234c0 	call	1000234c <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0574); //538
100039fc:	01415d04 	movi	r5,1396
10003a00:	0009883a 	mov	r4,zero
10003a04:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//a
10003a08:	01400204 	movi	r5,8
10003a0c:	0009883a 	mov	r4,zero
10003a10:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//c
10003a14:	0140a404 	movi	r5,656
10003a18:	0009883a 	mov	r4,zero
10003a1c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10003a20:	01400044 	movi	r5,1
10003a24:	0009883a 	mov	r4,zero
10003a28:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//540
10003a2c:	014004c4 	movi	r5,19
10003a30:	0009883a 	mov	r4,zero
10003a34:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0544);//2
10003a38:	01415104 	movi	r5,1348
10003a3c:	0009883a 	mov	r4,zero
10003a40:	000234c0 	call	1000234c <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x057c); //544
10003a44:	01415f04 	movi	r5,1404
10003a48:	0009883a 	mov	r4,zero
10003a4c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0002);//6
10003a50:	01400084 	movi	r5,2
10003a54:	0009883a 	mov	r4,zero
10003a58:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003a5c:	0140a404 	movi	r5,656
10003a60:	0009883a 	mov	r4,zero
10003a64:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
10003a68:	01401044 	movi	r5,65
10003a6c:	0009883a 	mov	r4,zero
10003a70:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003a74:	014004c4 	movi	r5,19
10003a78:	0009883a 	mov	r4,zero
10003a7c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0550);//e
10003a80:	01415404 	movi	r5,1360
10003a84:	0009883a 	mov	r4,zero
10003a88:	000234c0 	call	1000234c <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //550
10003a8c:	000b883a 	mov	r5,zero
10003a90:	0009883a 	mov	r4,zero
10003a94:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//2
10003a98:	000b883a 	mov	r5,zero
10003a9c:	0009883a 	mov	r4,zero
10003aa0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0210);//4
10003aa4:	01408404 	movi	r5,528
10003aa8:	0009883a 	mov	r4,zero
10003aac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//6
10003ab0:	01401044 	movi	r5,65
10003ab4:	0009883a 	mov	r4,zero
10003ab8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003abc:	014004c4 	movi	r5,19
10003ac0:	0009883a 	mov	r4,zero
10003ac4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//a
10003ac8:	000b883a 	mov	r5,zero
10003acc:	0009883a 	mov	r4,zero
10003ad0:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003ad4:	01414004 	movi	r5,1280
10003ad8:	01006c04 	movi	r4,432
10003adc:	00031900 	call	10003190 <usb_write>
}
10003ae0:	0001883a 	nop
10003ae4:	e037883a 	mov	sp,fp
10003ae8:	dfc00117 	ldw	ra,4(sp)
10003aec:	df000017 	ldw	fp,0(sp)
10003af0:	dec00204 	addi	sp,sp,8
10003af4:	f800283a 	ret

10003af8 <usb_set_config>:

void usb_set_config() {
10003af8:	defffe04 	addi	sp,sp,-8
10003afc:	dfc00115 	stw	ra,4(sp)
10003b00:	df000015 	stw	fp,0(sp)
10003b04:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003b08:	01414004 	movi	r5,1280
10003b0c:	01000084 	movi	r4,2
10003b10:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
10003b14:	01414304 	movi	r5,1292
10003b18:	0009883a 	mov	r4,zero
10003b1c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003b20:	01400204 	movi	r5,8
10003b24:	0009883a 	mov	r4,zero
10003b28:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10003b2c:	0140b404 	movi	r5,720
10003b30:	0009883a 	mov	r4,zero
10003b34:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003b38:	01400044 	movi	r5,1
10003b3c:	0009883a 	mov	r4,zero
10003b40:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003b44:	014004c4 	movi	r5,19
10003b48:	0009883a 	mov	r4,zero
10003b4c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003b50:	01414504 	movi	r5,1300
10003b54:	0009883a 	mov	r4,zero
10003b58:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0900);
10003b5c:	01424004 	movi	r5,2304
10003b60:	0009883a 	mov	r4,zero
10003b64:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//device address
10003b68:	01400044 	movi	r5,1
10003b6c:	0009883a 	mov	r4,zero
10003b70:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003b74:	000b883a 	mov	r5,zero
10003b78:	0009883a 	mov	r4,zero
10003b7c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003b80:	000b883a 	mov	r5,zero
10003b84:	0009883a 	mov	r4,zero
10003b88:	000234c0 	call	1000234c <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10003b8c:	000b883a 	mov	r5,zero
10003b90:	0009883a 	mov	r4,zero
10003b94:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//port number
10003b98:	000b883a 	mov	r5,zero
10003b9c:	0009883a 	mov	r4,zero
10003ba0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//device address
10003ba4:	0140a404 	movi	r5,656
10003ba8:	0009883a 	mov	r4,zero
10003bac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
10003bb0:	01401044 	movi	r5,65
10003bb4:	0009883a 	mov	r4,zero
10003bb8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003bbc:	014004c4 	movi	r5,19
10003bc0:	0009883a 	mov	r4,zero
10003bc4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003bc8:	000b883a 	mov	r5,zero
10003bcc:	0009883a 	mov	r4,zero
10003bd0:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003bd4:	01414004 	movi	r5,1280
10003bd8:	01006c04 	movi	r4,432
10003bdc:	00031900 	call	10003190 <usb_write>

}
10003be0:	0001883a 	nop
10003be4:	e037883a 	mov	sp,fp
10003be8:	dfc00117 	ldw	ra,4(sp)
10003bec:	df000017 	ldw	fp,0(sp)
10003bf0:	dec00204 	addi	sp,sp,8
10003bf4:	f800283a 	ret

10003bf8 <usb_class_request>:

void usb_class_request() {
10003bf8:	defffe04 	addi	sp,sp,-8
10003bfc:	dfc00115 	stw	ra,4(sp)
10003c00:	df000015 	stw	fp,0(sp)
10003c04:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003c08:	01414004 	movi	r5,1280
10003c0c:	01000084 	movi	r4,2
10003c10:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
10003c14:	01414304 	movi	r5,1292
10003c18:	0009883a 	mov	r4,zero
10003c1c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003c20:	01400204 	movi	r5,8
10003c24:	0009883a 	mov	r4,zero
10003c28:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10003c2c:	0140b404 	movi	r5,720
10003c30:	0009883a 	mov	r4,zero
10003c34:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003c38:	01400044 	movi	r5,1
10003c3c:	0009883a 	mov	r4,zero
10003c40:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003c44:	014004c4 	movi	r5,19
10003c48:	0009883a 	mov	r4,zero
10003c4c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003c50:	01414504 	movi	r5,1300
10003c54:	0009883a 	mov	r4,zero
10003c58:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0A21);
10003c5c:	01428844 	movi	r5,2593
10003c60:	0009883a 	mov	r4,zero
10003c64:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//device address
10003c68:	000b883a 	mov	r5,zero
10003c6c:	0009883a 	mov	r4,zero
10003c70:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003c74:	000b883a 	mov	r5,zero
10003c78:	0009883a 	mov	r4,zero
10003c7c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003c80:	000b883a 	mov	r5,zero
10003c84:	0009883a 	mov	r4,zero
10003c88:	000234c0 	call	1000234c <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10003c8c:	000b883a 	mov	r5,zero
10003c90:	0009883a 	mov	r4,zero
10003c94:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//port number /data length
10003c98:	000b883a 	mov	r5,zero
10003c9c:	0009883a 	mov	r4,zero
10003ca0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//device address
10003ca4:	0140a404 	movi	r5,656
10003ca8:	0009883a 	mov	r4,zero
10003cac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
10003cb0:	01401044 	movi	r5,65
10003cb4:	0009883a 	mov	r4,zero
10003cb8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003cbc:	014004c4 	movi	r5,19
10003cc0:	0009883a 	mov	r4,zero
10003cc4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);
10003cc8:	000b883a 	mov	r5,zero
10003ccc:	0009883a 	mov	r4,zero
10003cd0:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003cd4:	01414004 	movi	r5,1280
10003cd8:	01006c04 	movi	r4,432
10003cdc:	00031900 	call	10003190 <usb_write>
}
10003ce0:	0001883a 	nop
10003ce4:	e037883a 	mov	sp,fp
10003ce8:	dfc00117 	ldw	ra,4(sp)
10003cec:	df000017 	ldw	fp,0(sp)
10003cf0:	dec00204 	addi	sp,sp,8
10003cf4:	f800283a 	ret

10003cf8 <usb_get_hid_desc>:


void usb_get_hid_desc() {
10003cf8:	defffe04 	addi	sp,sp,-8
10003cfc:	dfc00115 	stw	ra,4(sp)
10003d00:	df000015 	stw	fp,0(sp)
10003d04:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003d08:	01414004 	movi	r5,1280
10003d0c:	01000084 	movi	r4,2
10003d10:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
10003d14:	01414304 	movi	r5,1292
10003d18:	0009883a 	mov	r4,zero
10003d1c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003d20:	01400204 	movi	r5,8
10003d24:	0009883a 	mov	r4,zero
10003d28:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10003d2c:	0140b404 	movi	r5,720
10003d30:	0009883a 	mov	r4,zero
10003d34:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003d38:	01400044 	movi	r5,1
10003d3c:	0009883a 	mov	r4,zero
10003d40:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003d44:	014004c4 	movi	r5,19
10003d48:	0009883a 	mov	r4,zero
10003d4c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003d50:	01414504 	movi	r5,1300
10003d54:	0009883a 	mov	r4,zero
10003d58:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
10003d5c:	0141a044 	movi	r5,1665
10003d60:	0009883a 	mov	r4,zero
10003d64:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x2100);//e //HID 0x21
10003d68:	01484004 	movi	r5,8448
10003d6c:	0009883a 	mov	r4,zero
10003d70:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003d74:	000b883a 	mov	r5,zero
10003d78:	0009883a 	mov	r4,zero
10003d7c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x007B);//2
10003d80:	01401ec4 	movi	r5,123
10003d84:	0009883a 	mov	r4,zero
10003d88:	000234c0 	call	1000234c <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10003d8c:	01415104 	movi	r5,1348
10003d90:	0009883a 	mov	r4,zero
10003d94:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003d98:	01400204 	movi	r5,8
10003d9c:	0009883a 	mov	r4,zero
10003da0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003da4:	0140a404 	movi	r5,656
10003da8:	0009883a 	mov	r4,zero
10003dac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003db0:	01401044 	movi	r5,65
10003db4:	0009883a 	mov	r4,zero
10003db8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003dbc:	014004c4 	movi	r5,19
10003dc0:	0009883a 	mov	r4,zero
10003dc4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003dc8:	01414804 	movi	r5,1312
10003dcc:	0009883a 	mov	r4,zero
10003dd0:	000234c0 	call	1000234c <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
10003dd4:	000b883a 	mov	r5,zero
10003dd8:	0009883a 	mov	r4,zero
10003ddc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//e
10003de0:	000b883a 	mov	r5,zero
10003de4:	0009883a 	mov	r4,zero
10003de8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0210);//530
10003dec:	01408404 	movi	r5,528
10003df0:	0009883a 	mov	r4,zero
10003df4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003df8:	01401044 	movi	r5,65
10003dfc:	0009883a 	mov	r4,zero
10003e00:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003e04:	014004c4 	movi	r5,19
10003e08:	0009883a 	mov	r4,zero
10003e0c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//6
10003e10:	000b883a 	mov	r5,zero
10003e14:	0009883a 	mov	r4,zero
10003e18:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003e1c:	01414004 	movi	r5,1280
10003e20:	01006c04 	movi	r4,432
10003e24:	00031900 	call	10003190 <usb_write>

}
10003e28:	0001883a 	nop
10003e2c:	e037883a 	mov	sp,fp
10003e30:	dfc00117 	ldw	ra,4(sp)
10003e34:	df000017 	ldw	fp,0(sp)
10003e38:	dec00204 	addi	sp,sp,8
10003e3c:	f800283a 	ret

10003e40 <usb_get_report_desc>:


void usb_get_report_desc() {
10003e40:	defffe04 	addi	sp,sp,-8
10003e44:	dfc00115 	stw	ra,4(sp)
10003e48:	df000015 	stw	fp,0(sp)
10003e4c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003e50:	01414004 	movi	r5,1280
10003e54:	01000084 	movi	r4,2
10003e58:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x050C);
10003e5c:	01414304 	movi	r5,1292
10003e60:	0009883a 	mov	r4,zero
10003e64:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003e68:	01400204 	movi	r5,8
10003e6c:	0009883a 	mov	r4,zero
10003e70:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003e74:	0140b404 	movi	r5,720
10003e78:	0009883a 	mov	r4,zero
10003e7c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);
10003e80:	01400044 	movi	r5,1
10003e84:	0009883a 	mov	r4,zero
10003e88:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);
10003e8c:	014004c4 	movi	r5,19
10003e90:	0009883a 	mov	r4,zero
10003e94:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0514);
10003e98:	01414504 	movi	r5,1300
10003e9c:	0009883a 	mov	r4,zero
10003ea0:	000234c0 	call	1000234c <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
10003ea4:	0141a044 	movi	r5,1665
10003ea8:	0009883a 	mov	r4,zero
10003eac:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x2200);//e //report 0x22
10003eb0:	01488004 	movi	r5,8704
10003eb4:	0009883a 	mov	r4,zero
10003eb8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003ebc:	000b883a 	mov	r5,zero
10003ec0:	0009883a 	mov	r4,zero
10003ec4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x007B);//2
10003ec8:	01401ec4 	movi	r5,123
10003ecc:	0009883a 	mov	r4,zero
10003ed0:	000234c0 	call	1000234c <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0580); //514
10003ed4:	01416004 	movi	r5,1408
10003ed8:	0009883a 	mov	r4,zero
10003edc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003ee0:	01400204 	movi	r5,8
10003ee4:	0009883a 	mov	r4,zero
10003ee8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003eec:	0140a404 	movi	r5,656
10003ef0:	0009883a 	mov	r4,zero
10003ef4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003ef8:	01401044 	movi	r5,65
10003efc:	0009883a 	mov	r4,zero
10003f00:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003f04:	014004c4 	movi	r5,19
10003f08:	0009883a 	mov	r4,zero
10003f0c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003f10:	01414804 	movi	r5,1312
10003f14:	0009883a 	mov	r4,zero
10003f18:	000234c0 	call	1000234c <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0588); //520
10003f1c:	01416204 	movi	r5,1416
10003f20:	0009883a 	mov	r4,zero
10003f24:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003f28:	01400204 	movi	r5,8
10003f2c:	0009883a 	mov	r4,zero
10003f30:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003f34:	0140a404 	movi	r5,656
10003f38:	0009883a 	mov	r4,zero
10003f3c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003f40:	01400044 	movi	r5,1
10003f44:	0009883a 	mov	r4,zero
10003f48:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003f4c:	014004c4 	movi	r5,19
10003f50:	0009883a 	mov	r4,zero
10003f54:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003f58:	01414b04 	movi	r5,1324
10003f5c:	0009883a 	mov	r4,zero
10003f60:	000234c0 	call	1000234c <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0590); //52c
10003f64:	01416404 	movi	r5,1424
10003f68:	0009883a 	mov	r4,zero
10003f6c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//e
10003f70:	01400204 	movi	r5,8
10003f74:	0009883a 	mov	r4,zero
10003f78:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//530
10003f7c:	0140a404 	movi	r5,656
10003f80:	0009883a 	mov	r4,zero
10003f84:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003f88:	01401044 	movi	r5,65
10003f8c:	0009883a 	mov	r4,zero
10003f90:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003f94:	014004c4 	movi	r5,19
10003f98:	0009883a 	mov	r4,zero
10003f9c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0538);//6
10003fa0:	01414e04 	movi	r5,1336
10003fa4:	0009883a 	mov	r4,zero
10003fa8:	000234c0 	call	1000234c <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0598); //538
10003fac:	01416604 	movi	r5,1432
10003fb0:	0009883a 	mov	r4,zero
10003fb4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//a
10003fb8:	01400204 	movi	r5,8
10003fbc:	0009883a 	mov	r4,zero
10003fc0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//c
10003fc4:	0140a404 	movi	r5,656
10003fc8:	0009883a 	mov	r4,zero
10003fcc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10003fd0:	01400044 	movi	r5,1
10003fd4:	0009883a 	mov	r4,zero
10003fd8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//540
10003fdc:	014004c4 	movi	r5,19
10003fe0:	0009883a 	mov	r4,zero
10003fe4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0544);//2
10003fe8:	01415104 	movi	r5,1348
10003fec:	0009883a 	mov	r4,zero
10003ff0:	000234c0 	call	1000234c <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x05a0); //544
10003ff4:	01416804 	movi	r5,1440
10003ff8:	0009883a 	mov	r4,zero
10003ffc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//6
10004000:	01400204 	movi	r5,8
10004004:	0009883a 	mov	r4,zero
10004008:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//8
1000400c:	0140a404 	movi	r5,656
10004010:	0009883a 	mov	r4,zero
10004014:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
10004018:	01401044 	movi	r5,65
1000401c:	0009883a 	mov	r4,zero
10004020:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004024:	014004c4 	movi	r5,19
10004028:	0009883a 	mov	r4,zero
1000402c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0550);//e
10004030:	01415404 	movi	r5,1360
10004034:	0009883a 	mov	r4,zero
10004038:	000234c0 	call	1000234c <io_write>

    //data phase IN-6
    io_write(HPI_DATA, 0x05a8); //550
1000403c:	01416a04 	movi	r5,1448
10004040:	0009883a 	mov	r4,zero
10004044:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//2
10004048:	01400204 	movi	r5,8
1000404c:	0009883a 	mov	r4,zero
10004050:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//4
10004054:	0140a404 	movi	r5,656
10004058:	0009883a 	mov	r4,zero
1000405c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10004060:	01400044 	movi	r5,1
10004064:	0009883a 	mov	r4,zero
10004068:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//8
1000406c:	014004c4 	movi	r5,19
10004070:	0009883a 	mov	r4,zero
10004074:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x055c);//a
10004078:	01415704 	movi	r5,1372
1000407c:	0009883a 	mov	r4,zero
10004080:	000234c0 	call	1000234c <io_write>

    //data phase IN-7
    io_write(HPI_DATA, 0x05b0); //c
10004084:	01416c04 	movi	r5,1456
10004088:	0009883a 	mov	r4,zero
1000408c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0008);//e
10004090:	01400204 	movi	r5,8
10004094:	0009883a 	mov	r4,zero
10004098:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//560
1000409c:	0140a404 	movi	r5,656
100040a0:	0009883a 	mov	r4,zero
100040a4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//2 //data1
100040a8:	01401044 	movi	r5,65
100040ac:	0009883a 	mov	r4,zero
100040b0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//4
100040b4:	014004c4 	movi	r5,19
100040b8:	0009883a 	mov	r4,zero
100040bc:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0568);//6
100040c0:	01415a04 	movi	r5,1384
100040c4:	0009883a 	mov	r4,zero
100040c8:	000234c0 	call	1000234c <io_write>

    //data phase IN-8
    io_write(HPI_DATA, 0x05b8); //8
100040cc:	01416e04 	movi	r5,1464
100040d0:	0009883a 	mov	r4,zero
100040d4:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0003);//a
100040d8:	014000c4 	movi	r5,3
100040dc:	0009883a 	mov	r4,zero
100040e0:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0290);//c
100040e4:	0140a404 	movi	r5,656
100040e8:	0009883a 	mov	r4,zero
100040ec:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
100040f0:	01400044 	movi	r5,1
100040f4:	0009883a 	mov	r4,zero
100040f8:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//570
100040fc:	014004c4 	movi	r5,19
10004100:	0009883a 	mov	r4,zero
10004104:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0574);//2
10004108:	01415d04 	movi	r5,1396
1000410c:	0009883a 	mov	r4,zero
10004110:	000234c0 	call	1000234c <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //574
10004114:	000b883a 	mov	r5,zero
10004118:	0009883a 	mov	r4,zero
1000411c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//6
10004120:	000b883a 	mov	r5,zero
10004124:	0009883a 	mov	r4,zero
10004128:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0210);//8
1000412c:	01408404 	movi	r5,528
10004130:	0009883a 	mov	r4,zero
10004134:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0041);//a
10004138:	01401044 	movi	r5,65
1000413c:	0009883a 	mov	r4,zero
10004140:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004144:	014004c4 	movi	r5,19
10004148:	0009883a 	mov	r4,zero
1000414c:	000234c0 	call	1000234c <io_write>
    io_write(HPI_DATA, 0x0000);//e
10004150:	000b883a 	mov	r5,zero
10004154:	0009883a 	mov	r4,zero
10004158:	000234c0 	call	1000234c <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000415c:	01414004 	movi	r5,1280
10004160:	01006c04 	movi	r4,432
10004164:	00031900 	call	10003190 <usb_write>

}
10004168:	0001883a 	nop
1000416c:	e037883a 	mov	sp,fp
10004170:	dfc00117 	ldw	ra,4(sp)
10004174:	df000017 	ldw	fp,0(sp)
10004178:	dec00204 	addi	sp,sp,8
1000417c:	f800283a 	ret

10004180 <usb_wait_td_list_done>:


alt_u16 usb_wait_td_list_done() {
10004180:	defffd04 	addi	sp,sp,-12
10004184:	dfc00215 	stw	ra,8(sp)
10004188:	df000115 	stw	fp,4(sp)
1000418c:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
10004190:	01005104 	movi	r4,324
10004194:	00031e80 	call	100031e8 <usb_read>
10004198:	e0bfff0d 	sth	r2,-4(fp)
    usb_write(HPI_SIE1_MSG_ADR, 0);
1000419c:	000b883a 	mov	r5,zero
100041a0:	01005104 	movi	r4,324
100041a4:	00031900 	call	10003190 <usb_write>
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100041a8:	00000d06 	br	100041e0 <usb_wait_td_list_done+0x60>
    {
        if (usb_ctl_val == 0x0000) {
100041ac:	e0bfff0b 	ldhu	r2,-4(fp)
100041b0:	10000526 	beq	r2,zero,100041c8 <usb_wait_td_list_done+0x48>
        } else {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100041b4:	e0bfff0b 	ldhu	r2,-4(fp)
100041b8:	100b883a 	mov	r5,r2
100041bc:	01040074 	movhi	r4,4097
100041c0:	21119704 	addi	r4,r4,18012
100041c4:	00046b80 	call	100046b8 <printf>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
100041c8:	01005104 	movi	r4,324
100041cc:	00031e80 	call	100031e8 <usb_read>
100041d0:	e0bfff0d 	sth	r2,-4(fp)
        usb_write(HPI_SIE1_MSG_ADR, 0);
100041d4:	000b883a 	mov	r5,zero
100041d8:	01005104 	movi	r4,324
100041dc:	00031900 	call	10003190 <usb_write>
alt_u16 usb_wait_td_list_done() {
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
    usb_write(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100041e0:	e0bfff0b 	ldhu	r2,-4(fp)
100041e4:	10840018 	cmpnei	r2,r2,4096
100041e8:	103ff01e 	bne	r2,zero,100041ac <__alt_data_end+0xf80041ac>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
        usb_write(HPI_SIE1_MSG_ADR, 0);
    }

    return usb_ctl_val;
100041ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
100041f0:	e037883a 	mov	sp,fp
100041f4:	dfc00117 	ldw	ra,4(sp)
100041f8:	df000017 	ldw	fp,0(sp)
100041fc:	dec00204 	addi	sp,sp,8
10004200:	f800283a 	ret

10004204 <usb_get_retry_cnt>:


alt_u16 usb_get_retry_cnt() {
10004204:	defffd04 	addi	sp,sp,-12
10004208:	dfc00215 	stw	ra,8(sp)
1000420c:	df000115 	stw	fp,4(sp)
10004210:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    io_read(HPI_STATUS);
10004214:	010000c4 	movi	r4,3
10004218:	00023bc0 	call	100023bc <io_read>
    if (usb_read(HPI_SIE1_MSG_ADR) == HUSB_TDListDone) {
1000421c:	01005104 	movi	r4,324
10004220:	00031e80 	call	100031e8 <usb_read>
10004224:	10bfffcc 	andi	r2,r2,65535
10004228:	10840018 	cmpnei	r2,r2,4096
1000422c:	1000091e 	bne	r2,zero,10004254 <usb_get_retry_cnt+0x50>
        usb_write(HPI_SIE1_MSG_ADR, 0);
10004230:	000b883a 	mov	r5,zero
10004234:	01005104 	movi	r4,324
10004238:	00031900 	call	10003190 <usb_write>

        while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  //read sie1 msg register
1000423c:	0001883a 	nop
10004240:	010000c4 	movi	r4,3
10004244:	00023bc0 	call	100023bc <io_read>
10004248:	10bfffcc 	andi	r2,r2,65535
1000424c:	1080040c 	andi	r2,r2,16
10004250:	103ffb26 	beq	r2,zero,10004240 <__alt_data_end+0xf8004240>
        {
        }
    }
    //usleep(1000);
    io_write(HPI_ADDR, 0x0508);
10004254:	01414204 	movi	r5,1288
10004258:	01000084 	movi	r4,2
1000425c:	000234c0 	call	1000234c <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10004260:	0009883a 	mov	r4,zero
10004264:	00023bc0 	call	100023bc <io_read>
10004268:	e0bfff0d 	sth	r2,-4(fp)

    return usb_ctl_val;
1000426c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10004270:	e037883a 	mov	sp,fp
10004274:	dfc00117 	ldw	ra,4(sp)
10004278:	df000017 	ldw	fp,0(sp)
1000427c:	dec00204 	addi	sp,sp,8
10004280:	f800283a 	ret

10004284 <usb_print_mem>:


void usb_print_mem() {
10004284:	defffc04 	addi	sp,sp,-16
10004288:	dfc00315 	stw	ra,12(sp)
1000428c:	df000215 	stw	fp,8(sp)
10004290:	df000204 	addi	fp,sp,8
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
10004294:	01414004 	movi	r5,1280
10004298:	01000084 	movi	r4,2
1000429c:	000234c0 	call	1000234c <io_write>
    for (i = 0; i <= 200; i += 2) {
100042a0:	e03ffe15 	stw	zero,-8(fp)
100042a4:	00000e06 	br	100042e0 <usb_print_mem+0x5c>
        code = io_read(HPI_DATA);
100042a8:	0009883a 	mov	r4,zero
100042ac:	00023bc0 	call	100023bc <io_read>
100042b0:	10bfffcc 	andi	r2,r2,65535
100042b4:	e0bfff15 	stw	r2,-4(fp)
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
100042b8:	e0bffe17 	ldw	r2,-8(fp)
100042bc:	10814004 	addi	r2,r2,1280
100042c0:	e1bfff17 	ldw	r6,-4(fp)
100042c4:	100b883a 	mov	r5,r2
100042c8:	01040074 	movhi	r4,4097
100042cc:	21119f04 	addi	r4,r4,18044
100042d0:	00046b80 	call	100046b8 <printf>


void usb_print_mem() {
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
    for (i = 0; i <= 200; i += 2) {
100042d4:	e0bffe17 	ldw	r2,-8(fp)
100042d8:	10800084 	addi	r2,r2,2
100042dc:	e0bffe15 	stw	r2,-8(fp)
100042e0:	e0bffe17 	ldw	r2,-8(fp)
100042e4:	10803250 	cmplti	r2,r2,201
100042e8:	103fef1e 	bne	r2,zero,100042a8 <__alt_data_end+0xf80042a8>
        code = io_read(HPI_DATA);
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
    }
}
100042ec:	0001883a 	nop
100042f0:	e037883a 	mov	sp,fp
100042f4:	dfc00117 	ldw	ra,4(sp)
100042f8:	df000017 	ldw	fp,0(sp)
100042fc:	dec00204 	addi	sp,sp,8
10004300:	f800283a 	ret

10004304 <keys_to_direction>:
        79,  // Right
        81,  // Down
        80   // Left
};

int keys_to_direction(const unsigned char dkey_pressed[]) {
10004304:	defffe04 	addi	sp,sp,-8
10004308:	df000115 	stw	fp,4(sp)
1000430c:	df000104 	addi	fp,sp,4
10004310:	e13fff15 	stw	r4,-4(fp)
    if (dkey_pressed[0] && dkey_pressed[1]) return 1;
10004314:	e0bfff17 	ldw	r2,-4(fp)
10004318:	10800003 	ldbu	r2,0(r2)
1000431c:	10803fcc 	andi	r2,r2,255
10004320:	10000726 	beq	r2,zero,10004340 <keys_to_direction+0x3c>
10004324:	e0bfff17 	ldw	r2,-4(fp)
10004328:	10800044 	addi	r2,r2,1
1000432c:	10800003 	ldbu	r2,0(r2)
10004330:	10803fcc 	andi	r2,r2,255
10004334:	10000226 	beq	r2,zero,10004340 <keys_to_direction+0x3c>
10004338:	00800044 	movi	r2,1
1000433c:	00003f06 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[1] && dkey_pressed[2]) return 3;
10004340:	e0bfff17 	ldw	r2,-4(fp)
10004344:	10800044 	addi	r2,r2,1
10004348:	10800003 	ldbu	r2,0(r2)
1000434c:	10803fcc 	andi	r2,r2,255
10004350:	10000726 	beq	r2,zero,10004370 <keys_to_direction+0x6c>
10004354:	e0bfff17 	ldw	r2,-4(fp)
10004358:	10800084 	addi	r2,r2,2
1000435c:	10800003 	ldbu	r2,0(r2)
10004360:	10803fcc 	andi	r2,r2,255
10004364:	10000226 	beq	r2,zero,10004370 <keys_to_direction+0x6c>
10004368:	008000c4 	movi	r2,3
1000436c:	00003306 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[2] && dkey_pressed[3]) return 5;
10004370:	e0bfff17 	ldw	r2,-4(fp)
10004374:	10800084 	addi	r2,r2,2
10004378:	10800003 	ldbu	r2,0(r2)
1000437c:	10803fcc 	andi	r2,r2,255
10004380:	10000726 	beq	r2,zero,100043a0 <keys_to_direction+0x9c>
10004384:	e0bfff17 	ldw	r2,-4(fp)
10004388:	108000c4 	addi	r2,r2,3
1000438c:	10800003 	ldbu	r2,0(r2)
10004390:	10803fcc 	andi	r2,r2,255
10004394:	10000226 	beq	r2,zero,100043a0 <keys_to_direction+0x9c>
10004398:	00800144 	movi	r2,5
1000439c:	00002706 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[3] && dkey_pressed[0]) return 7;
100043a0:	e0bfff17 	ldw	r2,-4(fp)
100043a4:	108000c4 	addi	r2,r2,3
100043a8:	10800003 	ldbu	r2,0(r2)
100043ac:	10803fcc 	andi	r2,r2,255
100043b0:	10000626 	beq	r2,zero,100043cc <keys_to_direction+0xc8>
100043b4:	e0bfff17 	ldw	r2,-4(fp)
100043b8:	10800003 	ldbu	r2,0(r2)
100043bc:	10803fcc 	andi	r2,r2,255
100043c0:	10000226 	beq	r2,zero,100043cc <keys_to_direction+0xc8>
100043c4:	008001c4 	movi	r2,7
100043c8:	00001c06 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[0]) return 0;
100043cc:	e0bfff17 	ldw	r2,-4(fp)
100043d0:	10800003 	ldbu	r2,0(r2)
100043d4:	10803fcc 	andi	r2,r2,255
100043d8:	10000226 	beq	r2,zero,100043e4 <keys_to_direction+0xe0>
100043dc:	0005883a 	mov	r2,zero
100043e0:	00001606 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[1]) return 2;
100043e4:	e0bfff17 	ldw	r2,-4(fp)
100043e8:	10800044 	addi	r2,r2,1
100043ec:	10800003 	ldbu	r2,0(r2)
100043f0:	10803fcc 	andi	r2,r2,255
100043f4:	10000226 	beq	r2,zero,10004400 <keys_to_direction+0xfc>
100043f8:	00800084 	movi	r2,2
100043fc:	00000f06 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[2]) return 4;
10004400:	e0bfff17 	ldw	r2,-4(fp)
10004404:	10800084 	addi	r2,r2,2
10004408:	10800003 	ldbu	r2,0(r2)
1000440c:	10803fcc 	andi	r2,r2,255
10004410:	10000226 	beq	r2,zero,1000441c <keys_to_direction+0x118>
10004414:	00800104 	movi	r2,4
10004418:	00000806 	br	1000443c <keys_to_direction+0x138>
    if (dkey_pressed[3]) return 6;
1000441c:	e0bfff17 	ldw	r2,-4(fp)
10004420:	108000c4 	addi	r2,r2,3
10004424:	10800003 	ldbu	r2,0(r2)
10004428:	10803fcc 	andi	r2,r2,255
1000442c:	10000226 	beq	r2,zero,10004438 <keys_to_direction+0x134>
10004430:	00800184 	movi	r2,6
10004434:	00000106 	br	1000443c <keys_to_direction+0x138>
    return -1;
10004438:	00bfffc4 	movi	r2,-1
}
1000443c:	e037883a 	mov	sp,fp
10004440:	df000017 	ldw	fp,0(sp)
10004444:	dec00104 	addi	sp,sp,4
10004448:	f800283a 	ret

1000444c <main>:

int main() {
1000444c:	defff004 	addi	sp,sp,-64
10004450:	dfc00f15 	stw	ra,60(sp)
10004454:	df000e15 	stw	fp,56(sp)
10004458:	df000e04 	addi	fp,sp,56

    keyboard_init();
1000445c:	00024240 	call	10002424 <keyboard_init>
    graphic_engine_reset();
10004460:	00021400 	call	10002140 <graphic_engine_reset>
    init_game();
10004464:	000148c0 	call	1000148c <init_game>

    unsigned char keycode[8];

    unsigned int frame_count = 0;
10004468:	e03ff915 	stw	zero,-28(fp)

    while (1) {

//        if (frame_count == 0) {
            // Fetch keycodes at frame 0
            if (keyboard_fetch((alt_u16 *) (&keycode)) != 0) {
1000446c:	e0bffc04 	addi	r2,fp,-16
10004470:	1009883a 	mov	r4,r2
10004474:	0002f240 	call	10002f24 <keyboard_fetch>
10004478:	10000f26 	beq	r2,zero,100044b8 <main+0x6c>
                // Failed to fetch keycode
                for (int i = 0; i < 8; i++) {
1000447c:	e03ff515 	stw	zero,-44(fp)
10004480:	00000706 	br	100044a0 <main+0x54>
                    keycode[i] = 0;
10004484:	e0fffc04 	addi	r3,fp,-16
10004488:	e0bff517 	ldw	r2,-44(fp)
1000448c:	1885883a 	add	r2,r3,r2
10004490:	10000005 	stb	zero,0(r2)

//        if (frame_count == 0) {
            // Fetch keycodes at frame 0
            if (keyboard_fetch((alt_u16 *) (&keycode)) != 0) {
                // Failed to fetch keycode
                for (int i = 0; i < 8; i++) {
10004494:	e0bff517 	ldw	r2,-44(fp)
10004498:	10800044 	addi	r2,r2,1
1000449c:	e0bff515 	stw	r2,-44(fp)
100044a0:	e0bff517 	ldw	r2,-44(fp)
100044a4:	10800210 	cmplti	r2,r2,8
100044a8:	103ff61e 	bne	r2,zero,10004484 <__alt_data_end+0xf8004484>
                    keycode[i] = 0;
                }
                printf("FAILED TO FETCH KEYCODE!\n");
100044ac:	01040074 	movhi	r4,4097
100044b0:	2111a404 	addi	r4,r4,18064
100044b4:	00047b40 	call	100047b4 <puts>
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
100044b8:	e03ff615 	stw	zero,-40(fp)
100044bc:	00003706 	br	1000459c <main+0x150>
                dkey_pressed_1[key] = dkey_pressed_2[key] = 0;
100044c0:	e0ffff04 	addi	r3,fp,-4
100044c4:	e0bff617 	ldw	r2,-40(fp)
100044c8:	1885883a 	add	r2,r3,r2
100044cc:	10000005 	stb	zero,0(r2)
100044d0:	e0ffff04 	addi	r3,fp,-4
100044d4:	e0bff617 	ldw	r2,-40(fp)
100044d8:	1885883a 	add	r2,r3,r2
100044dc:	10c00003 	ldbu	r3,0(r2)
100044e0:	e13ffe04 	addi	r4,fp,-8
100044e4:	e0bff617 	ldw	r2,-40(fp)
100044e8:	2085883a 	add	r2,r4,r2
100044ec:	10c00005 	stb	r3,0(r2)
                for (int i = 0; i < 8; i++) {
100044f0:	e03ff715 	stw	zero,-36(fp)
100044f4:	00002306 	br	10004584 <main+0x138>
                    if (keycode[i] == DKEY_KEYCODE_1[key]) {
100044f8:	e0fffc04 	addi	r3,fp,-16
100044fc:	e0bff717 	ldw	r2,-36(fp)
10004500:	1885883a 	add	r2,r3,r2
10004504:	11000003 	ldbu	r4,0(r2)
10004508:	e0fff617 	ldw	r3,-40(fp)
1000450c:	d0a00104 	addi	r2,gp,-32764
10004510:	1885883a 	add	r2,r3,r2
10004514:	10800003 	ldbu	r2,0(r2)
10004518:	20c03fcc 	andi	r3,r4,255
1000451c:	10803fcc 	andi	r2,r2,255
10004520:	1880051e 	bne	r3,r2,10004538 <main+0xec>
                        dkey_pressed_1[key] = 1;
10004524:	e0fffe04 	addi	r3,fp,-8
10004528:	e0bff617 	ldw	r2,-40(fp)
1000452c:	1885883a 	add	r2,r3,r2
10004530:	00c00044 	movi	r3,1
10004534:	10c00005 	stb	r3,0(r2)
                    }
                    if (keycode[i] == DKEY_KEYCODE_2[key]) {
10004538:	e0fffc04 	addi	r3,fp,-16
1000453c:	e0bff717 	ldw	r2,-36(fp)
10004540:	1885883a 	add	r2,r3,r2
10004544:	11000003 	ldbu	r4,0(r2)
10004548:	e0fff617 	ldw	r3,-40(fp)
1000454c:	d0a00204 	addi	r2,gp,-32760
10004550:	1885883a 	add	r2,r3,r2
10004554:	10800003 	ldbu	r2,0(r2)
10004558:	20c03fcc 	andi	r3,r4,255
1000455c:	10803fcc 	andi	r2,r2,255
10004560:	1880051e 	bne	r3,r2,10004578 <main+0x12c>
                        dkey_pressed_2[key] = 1;
10004564:	e0ffff04 	addi	r3,fp,-4
10004568:	e0bff617 	ldw	r2,-40(fp)
1000456c:	1885883a 	add	r2,r3,r2
10004570:	00c00044 	movi	r3,1
10004574:	10c00005 	stb	r3,0(r2)
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
                dkey_pressed_1[key] = dkey_pressed_2[key] = 0;
                for (int i = 0; i < 8; i++) {
10004578:	e0bff717 	ldw	r2,-36(fp)
1000457c:	10800044 	addi	r2,r2,1
10004580:	e0bff715 	stw	r2,-36(fp)
10004584:	e0bff717 	ldw	r2,-36(fp)
10004588:	10800210 	cmplti	r2,r2,8
1000458c:	103fda1e 	bne	r2,zero,100044f8 <__alt_data_end+0xf80044f8>
                }
                printf("FAILED TO FETCH KEYCODE!\n");
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
10004590:	e0bff617 	ldw	r2,-40(fp)
10004594:	10800044 	addi	r2,r2,1
10004598:	e0bff615 	stw	r2,-40(fp)
1000459c:	e0bff617 	ldw	r2,-40(fp)
100045a0:	10800110 	cmplti	r2,r2,4
100045a4:	103fc61e 	bne	r2,zero,100044c0 <__alt_data_end+0xf80044c0>
                    if (keycode[i] == DKEY_KEYCODE_2[key]) {
                        dkey_pressed_2[key] = 1;
                    }
                }
            }
            direction_1 = keys_to_direction(dkey_pressed_1);
100045a8:	e0bffe04 	addi	r2,fp,-8
100045ac:	1009883a 	mov	r4,r2
100045b0:	00043040 	call	10004304 <keys_to_direction>
100045b4:	e0bffa15 	stw	r2,-24(fp)
            direction_2 = keys_to_direction(dkey_pressed_2);
100045b8:	e0bfff04 	addi	r2,fp,-4
100045bc:	1009883a 	mov	r4,r2
100045c0:	00043040 	call	10004304 <keys_to_direction>
100045c4:	e0bffb15 	stw	r2,-20(fp)

            attack_1 = attack_2 = 0;
100045c8:	e03ff415 	stw	zero,-48(fp)
100045cc:	e0bff417 	ldw	r2,-48(fp)
100045d0:	e0bff315 	stw	r2,-52(fp)
            for (int i = 0; i < 8; i++) {
100045d4:	e03ff815 	stw	zero,-32(fp)
100045d8:	00001506 	br	10004630 <main+0x1e4>
                if (keycode[i] == 44) {  // Space
100045dc:	e0fffc04 	addi	r3,fp,-16
100045e0:	e0bff817 	ldw	r2,-32(fp)
100045e4:	1885883a 	add	r2,r3,r2
100045e8:	10800003 	ldbu	r2,0(r2)
100045ec:	10803fcc 	andi	r2,r2,255
100045f0:	10800b18 	cmpnei	r2,r2,44
100045f4:	1000021e 	bne	r2,zero,10004600 <main+0x1b4>
                    attack_1 = 1;
100045f8:	00800044 	movi	r2,1
100045fc:	e0bff315 	stw	r2,-52(fp)
                }
                if (keycode[i] == 40) {  // Enter
10004600:	e0fffc04 	addi	r3,fp,-16
10004604:	e0bff817 	ldw	r2,-32(fp)
10004608:	1885883a 	add	r2,r3,r2
1000460c:	10800003 	ldbu	r2,0(r2)
10004610:	10803fcc 	andi	r2,r2,255
10004614:	10800a18 	cmpnei	r2,r2,40
10004618:	1000021e 	bne	r2,zero,10004624 <main+0x1d8>
                    attack_2 = 1;
1000461c:	00800044 	movi	r2,1
10004620:	e0bff415 	stw	r2,-48(fp)
            }
            direction_1 = keys_to_direction(dkey_pressed_1);
            direction_2 = keys_to_direction(dkey_pressed_2);

            attack_1 = attack_2 = 0;
            for (int i = 0; i < 8; i++) {
10004624:	e0bff817 	ldw	r2,-32(fp)
10004628:	10800044 	addi	r2,r2,1
1000462c:	e0bff815 	stw	r2,-32(fp)
10004630:	e0bff817 	ldw	r2,-32(fp)
10004634:	10800210 	cmplti	r2,r2,8
10004638:	103fe81e 	bne	r2,zero,100045dc <__alt_data_end+0xf80045dc>
            }
//        }

//        if (frame_count == 1) {
            // Update game state at frame 1
            refresh(1, direction_1, direction_2, attack_1, attack_2);
1000463c:	e0bff417 	ldw	r2,-48(fp)
10004640:	d8800015 	stw	r2,0(sp)
10004644:	e1fff317 	ldw	r7,-52(fp)
10004648:	e1bffb17 	ldw	r6,-20(fp)
1000464c:	e17ffa17 	ldw	r5,-24(fp)
10004650:	01000044 	movi	r4,1
10004654:	0001e7c0 	call	10001e7c <refresh>
//        if (frame_count == 2) {
//            frame_count = 0;
//        }


        wait_for_next_frame();
10004658:	00022800 	call	10002280 <wait_for_next_frame>
    }
1000465c:	003f8306 	br	1000446c <__alt_data_end+0xf800446c>

10004660 <__mulsi3>:
10004660:	0005883a 	mov	r2,zero
10004664:	20000726 	beq	r4,zero,10004684 <__mulsi3+0x24>
10004668:	20c0004c 	andi	r3,r4,1
1000466c:	2008d07a 	srli	r4,r4,1
10004670:	18000126 	beq	r3,zero,10004678 <__mulsi3+0x18>
10004674:	1145883a 	add	r2,r2,r5
10004678:	294b883a 	add	r5,r5,r5
1000467c:	203ffa1e 	bne	r4,zero,10004668 <__alt_data_end+0xf8004668>
10004680:	f800283a 	ret
10004684:	f800283a 	ret

10004688 <_printf_r>:
10004688:	defffd04 	addi	sp,sp,-12
1000468c:	2805883a 	mov	r2,r5
10004690:	dfc00015 	stw	ra,0(sp)
10004694:	d9800115 	stw	r6,4(sp)
10004698:	d9c00215 	stw	r7,8(sp)
1000469c:	21400217 	ldw	r5,8(r4)
100046a0:	d9c00104 	addi	r7,sp,4
100046a4:	100d883a 	mov	r6,r2
100046a8:	00048600 	call	10004860 <___vfprintf_internal_r>
100046ac:	dfc00017 	ldw	ra,0(sp)
100046b0:	dec00304 	addi	sp,sp,12
100046b4:	f800283a 	ret

100046b8 <printf>:
100046b8:	defffc04 	addi	sp,sp,-16
100046bc:	dfc00015 	stw	ra,0(sp)
100046c0:	d9400115 	stw	r5,4(sp)
100046c4:	d9800215 	stw	r6,8(sp)
100046c8:	d9c00315 	stw	r7,12(sp)
100046cc:	00840074 	movhi	r2,4097
100046d0:	109d9a04 	addi	r2,r2,30312
100046d4:	10800017 	ldw	r2,0(r2)
100046d8:	200b883a 	mov	r5,r4
100046dc:	d9800104 	addi	r6,sp,4
100046e0:	11000217 	ldw	r4,8(r2)
100046e4:	0006b3c0 	call	10006b3c <__vfprintf_internal>
100046e8:	dfc00017 	ldw	ra,0(sp)
100046ec:	dec00404 	addi	sp,sp,16
100046f0:	f800283a 	ret

100046f4 <_puts_r>:
100046f4:	defff604 	addi	sp,sp,-40
100046f8:	dc000715 	stw	r16,28(sp)
100046fc:	2021883a 	mov	r16,r4
10004700:	2809883a 	mov	r4,r5
10004704:	dc400815 	stw	r17,32(sp)
10004708:	dfc00915 	stw	ra,36(sp)
1000470c:	2823883a 	mov	r17,r5
10004710:	00047c80 	call	100047c8 <strlen>
10004714:	10c00044 	addi	r3,r2,1
10004718:	d8800115 	stw	r2,4(sp)
1000471c:	00840074 	movhi	r2,4097
10004720:	1091ab04 	addi	r2,r2,18092
10004724:	d8800215 	stw	r2,8(sp)
10004728:	00800044 	movi	r2,1
1000472c:	d8800315 	stw	r2,12(sp)
10004730:	00800084 	movi	r2,2
10004734:	dc400015 	stw	r17,0(sp)
10004738:	d8c00615 	stw	r3,24(sp)
1000473c:	dec00415 	stw	sp,16(sp)
10004740:	d8800515 	stw	r2,20(sp)
10004744:	80000226 	beq	r16,zero,10004750 <_puts_r+0x5c>
10004748:	80800e17 	ldw	r2,56(r16)
1000474c:	10001426 	beq	r2,zero,100047a0 <_puts_r+0xac>
10004750:	81400217 	ldw	r5,8(r16)
10004754:	2880030b 	ldhu	r2,12(r5)
10004758:	10c8000c 	andi	r3,r2,8192
1000475c:	1800061e 	bne	r3,zero,10004778 <_puts_r+0x84>
10004760:	29001917 	ldw	r4,100(r5)
10004764:	00f7ffc4 	movi	r3,-8193
10004768:	10880014 	ori	r2,r2,8192
1000476c:	20c6703a 	and	r3,r4,r3
10004770:	2880030d 	sth	r2,12(r5)
10004774:	28c01915 	stw	r3,100(r5)
10004778:	d9800404 	addi	r6,sp,16
1000477c:	8009883a 	mov	r4,r16
10004780:	00090a40 	call	100090a4 <__sfvwrite_r>
10004784:	1000091e 	bne	r2,zero,100047ac <_puts_r+0xb8>
10004788:	00800284 	movi	r2,10
1000478c:	dfc00917 	ldw	ra,36(sp)
10004790:	dc400817 	ldw	r17,32(sp)
10004794:	dc000717 	ldw	r16,28(sp)
10004798:	dec00a04 	addi	sp,sp,40
1000479c:	f800283a 	ret
100047a0:	8009883a 	mov	r4,r16
100047a4:	0008c200 	call	10008c20 <__sinit>
100047a8:	003fe906 	br	10004750 <__alt_data_end+0xf8004750>
100047ac:	00bfffc4 	movi	r2,-1
100047b0:	003ff606 	br	1000478c <__alt_data_end+0xf800478c>

100047b4 <puts>:
100047b4:	00840074 	movhi	r2,4097
100047b8:	109d9a04 	addi	r2,r2,30312
100047bc:	200b883a 	mov	r5,r4
100047c0:	11000017 	ldw	r4,0(r2)
100047c4:	00046f41 	jmpi	100046f4 <_puts_r>

100047c8 <strlen>:
100047c8:	208000cc 	andi	r2,r4,3
100047cc:	10002026 	beq	r2,zero,10004850 <strlen+0x88>
100047d0:	20800007 	ldb	r2,0(r4)
100047d4:	10002026 	beq	r2,zero,10004858 <strlen+0x90>
100047d8:	2005883a 	mov	r2,r4
100047dc:	00000206 	br	100047e8 <strlen+0x20>
100047e0:	10c00007 	ldb	r3,0(r2)
100047e4:	18001826 	beq	r3,zero,10004848 <strlen+0x80>
100047e8:	10800044 	addi	r2,r2,1
100047ec:	10c000cc 	andi	r3,r2,3
100047f0:	183ffb1e 	bne	r3,zero,100047e0 <__alt_data_end+0xf80047e0>
100047f4:	10c00017 	ldw	r3,0(r2)
100047f8:	01ffbff4 	movhi	r7,65279
100047fc:	39ffbfc4 	addi	r7,r7,-257
10004800:	00ca303a 	nor	r5,zero,r3
10004804:	01a02074 	movhi	r6,32897
10004808:	19c7883a 	add	r3,r3,r7
1000480c:	31a02004 	addi	r6,r6,-32640
10004810:	1946703a 	and	r3,r3,r5
10004814:	1986703a 	and	r3,r3,r6
10004818:	1800091e 	bne	r3,zero,10004840 <strlen+0x78>
1000481c:	10800104 	addi	r2,r2,4
10004820:	10c00017 	ldw	r3,0(r2)
10004824:	19cb883a 	add	r5,r3,r7
10004828:	00c6303a 	nor	r3,zero,r3
1000482c:	28c6703a 	and	r3,r5,r3
10004830:	1986703a 	and	r3,r3,r6
10004834:	183ff926 	beq	r3,zero,1000481c <__alt_data_end+0xf800481c>
10004838:	00000106 	br	10004840 <strlen+0x78>
1000483c:	10800044 	addi	r2,r2,1
10004840:	10c00007 	ldb	r3,0(r2)
10004844:	183ffd1e 	bne	r3,zero,1000483c <__alt_data_end+0xf800483c>
10004848:	1105c83a 	sub	r2,r2,r4
1000484c:	f800283a 	ret
10004850:	2005883a 	mov	r2,r4
10004854:	003fe706 	br	100047f4 <__alt_data_end+0xf80047f4>
10004858:	0005883a 	mov	r2,zero
1000485c:	f800283a 	ret

10004860 <___vfprintf_internal_r>:
10004860:	deffb804 	addi	sp,sp,-288
10004864:	dfc04715 	stw	ra,284(sp)
10004868:	ddc04515 	stw	r23,276(sp)
1000486c:	dd404315 	stw	r21,268(sp)
10004870:	d9002d15 	stw	r4,180(sp)
10004874:	282f883a 	mov	r23,r5
10004878:	302b883a 	mov	r21,r6
1000487c:	d9c02e15 	stw	r7,184(sp)
10004880:	df004615 	stw	fp,280(sp)
10004884:	dd804415 	stw	r22,272(sp)
10004888:	dd004215 	stw	r20,264(sp)
1000488c:	dcc04115 	stw	r19,260(sp)
10004890:	dc804015 	stw	r18,256(sp)
10004894:	dc403f15 	stw	r17,252(sp)
10004898:	dc003e15 	stw	r16,248(sp)
1000489c:	00097a00 	call	100097a0 <_localeconv_r>
100048a0:	10800017 	ldw	r2,0(r2)
100048a4:	1009883a 	mov	r4,r2
100048a8:	d8803415 	stw	r2,208(sp)
100048ac:	00047c80 	call	100047c8 <strlen>
100048b0:	d8803715 	stw	r2,220(sp)
100048b4:	d8802d17 	ldw	r2,180(sp)
100048b8:	10000226 	beq	r2,zero,100048c4 <___vfprintf_internal_r+0x64>
100048bc:	10800e17 	ldw	r2,56(r2)
100048c0:	1000fb26 	beq	r2,zero,10004cb0 <___vfprintf_internal_r+0x450>
100048c4:	b880030b 	ldhu	r2,12(r23)
100048c8:	10c8000c 	andi	r3,r2,8192
100048cc:	1800061e 	bne	r3,zero,100048e8 <___vfprintf_internal_r+0x88>
100048d0:	b9001917 	ldw	r4,100(r23)
100048d4:	00f7ffc4 	movi	r3,-8193
100048d8:	10880014 	ori	r2,r2,8192
100048dc:	20c6703a 	and	r3,r4,r3
100048e0:	b880030d 	sth	r2,12(r23)
100048e4:	b8c01915 	stw	r3,100(r23)
100048e8:	10c0020c 	andi	r3,r2,8
100048ec:	1800c326 	beq	r3,zero,10004bfc <___vfprintf_internal_r+0x39c>
100048f0:	b8c00417 	ldw	r3,16(r23)
100048f4:	1800c126 	beq	r3,zero,10004bfc <___vfprintf_internal_r+0x39c>
100048f8:	1080068c 	andi	r2,r2,26
100048fc:	00c00284 	movi	r3,10
10004900:	10c0c626 	beq	r2,r3,10004c1c <___vfprintf_internal_r+0x3bc>
10004904:	d8c00404 	addi	r3,sp,16
10004908:	05040074 	movhi	r20,4097
1000490c:	d9001e04 	addi	r4,sp,120
10004910:	a511bc84 	addi	r20,r20,18162
10004914:	d8c01e15 	stw	r3,120(sp)
10004918:	d8002015 	stw	zero,128(sp)
1000491c:	d8001f15 	stw	zero,124(sp)
10004920:	d8003315 	stw	zero,204(sp)
10004924:	d8003615 	stw	zero,216(sp)
10004928:	d8003815 	stw	zero,224(sp)
1000492c:	1811883a 	mov	r8,r3
10004930:	d8003915 	stw	zero,228(sp)
10004934:	d8003a15 	stw	zero,232(sp)
10004938:	d8002f15 	stw	zero,188(sp)
1000493c:	d9002815 	stw	r4,160(sp)
10004940:	a8800007 	ldb	r2,0(r21)
10004944:	10028b26 	beq	r2,zero,10005374 <___vfprintf_internal_r+0xb14>
10004948:	00c00944 	movi	r3,37
1000494c:	a823883a 	mov	r17,r21
10004950:	10c0021e 	bne	r2,r3,1000495c <___vfprintf_internal_r+0xfc>
10004954:	00001406 	br	100049a8 <___vfprintf_internal_r+0x148>
10004958:	10c00326 	beq	r2,r3,10004968 <___vfprintf_internal_r+0x108>
1000495c:	8c400044 	addi	r17,r17,1
10004960:	88800007 	ldb	r2,0(r17)
10004964:	103ffc1e 	bne	r2,zero,10004958 <__alt_data_end+0xf8004958>
10004968:	8d61c83a 	sub	r16,r17,r21
1000496c:	80000e26 	beq	r16,zero,100049a8 <___vfprintf_internal_r+0x148>
10004970:	d8c02017 	ldw	r3,128(sp)
10004974:	d8801f17 	ldw	r2,124(sp)
10004978:	45400015 	stw	r21,0(r8)
1000497c:	1c07883a 	add	r3,r3,r16
10004980:	10800044 	addi	r2,r2,1
10004984:	d8c02015 	stw	r3,128(sp)
10004988:	44000115 	stw	r16,4(r8)
1000498c:	d8801f15 	stw	r2,124(sp)
10004990:	00c001c4 	movi	r3,7
10004994:	1880a916 	blt	r3,r2,10004c3c <___vfprintf_internal_r+0x3dc>
10004998:	42000204 	addi	r8,r8,8
1000499c:	d9402f17 	ldw	r5,188(sp)
100049a0:	2c0b883a 	add	r5,r5,r16
100049a4:	d9402f15 	stw	r5,188(sp)
100049a8:	88800007 	ldb	r2,0(r17)
100049ac:	1000aa26 	beq	r2,zero,10004c58 <___vfprintf_internal_r+0x3f8>
100049b0:	8d400044 	addi	r21,r17,1
100049b4:	8c400047 	ldb	r17,1(r17)
100049b8:	0021883a 	mov	r16,zero
100049bc:	00bfffc4 	movi	r2,-1
100049c0:	0025883a 	mov	r18,zero
100049c4:	dc002905 	stb	r16,164(sp)
100049c8:	d8002785 	stb	zero,158(sp)
100049cc:	d8002b05 	stb	zero,172(sp)
100049d0:	d8802a15 	stw	r2,168(sp)
100049d4:	d8003115 	stw	zero,196(sp)
100049d8:	04c01604 	movi	r19,88
100049dc:	05800244 	movi	r22,9
100049e0:	9021883a 	mov	r16,r18
100049e4:	4039883a 	mov	fp,r8
100049e8:	ad400044 	addi	r21,r21,1
100049ec:	88bff804 	addi	r2,r17,-32
100049f0:	98833236 	bltu	r19,r2,100056bc <___vfprintf_internal_r+0xe5c>
100049f4:	100490ba 	slli	r2,r2,2
100049f8:	00c40034 	movhi	r3,4096
100049fc:	18d28304 	addi	r3,r3,18956
10004a00:	10c5883a 	add	r2,r2,r3
10004a04:	10800017 	ldw	r2,0(r2)
10004a08:	1000683a 	jmp	r2
10004a0c:	100055b4 	orhi	zero,r2,342
10004a10:	100056bc 	xorhi	zero,r2,346
10004a14:	100056bc 	xorhi	zero,r2,346
10004a18:	100055d4 	ori	zero,r2,343
10004a1c:	100056bc 	xorhi	zero,r2,346
10004a20:	100056bc 	xorhi	zero,r2,346
10004a24:	100056bc 	xorhi	zero,r2,346
10004a28:	100056bc 	xorhi	zero,r2,346
10004a2c:	100056bc 	xorhi	zero,r2,346
10004a30:	100056bc 	xorhi	zero,r2,346
10004a34:	10004cbc 	xorhi	zero,r2,306
10004a38:	100054c4 	addi	zero,r2,339
10004a3c:	100056bc 	xorhi	zero,r2,346
10004a40:	10004b80 	call	110004b8 <_gp+0xfe0e60>
10004a44:	10004ce0 	cmpeqi	zero,r2,307
10004a48:	100056bc 	xorhi	zero,r2,346
10004a4c:	10004d30 	cmpltui	zero,r2,308
10004a50:	10004d3c 	xorhi	zero,r2,308
10004a54:	10004d3c 	xorhi	zero,r2,308
10004a58:	10004d3c 	xorhi	zero,r2,308
10004a5c:	10004d3c 	xorhi	zero,r2,308
10004a60:	10004d3c 	xorhi	zero,r2,308
10004a64:	10004d3c 	xorhi	zero,r2,308
10004a68:	10004d3c 	xorhi	zero,r2,308
10004a6c:	10004d3c 	xorhi	zero,r2,308
10004a70:	10004d3c 	xorhi	zero,r2,308
10004a74:	100056bc 	xorhi	zero,r2,346
10004a78:	100056bc 	xorhi	zero,r2,346
10004a7c:	100056bc 	xorhi	zero,r2,346
10004a80:	100056bc 	xorhi	zero,r2,346
10004a84:	100056bc 	xorhi	zero,r2,346
10004a88:	100056bc 	xorhi	zero,r2,346
10004a8c:	100056bc 	xorhi	zero,r2,346
10004a90:	100056bc 	xorhi	zero,r2,346
10004a94:	100056bc 	xorhi	zero,r2,346
10004a98:	100056bc 	xorhi	zero,r2,346
10004a9c:	10004d78 	rdprs	zero,r2,309
10004aa0:	10004e40 	call	110004e4 <_gp+0xfe0e8c>
10004aa4:	100056bc 	xorhi	zero,r2,346
10004aa8:	10004e40 	call	110004e4 <_gp+0xfe0e8c>
10004aac:	100056bc 	xorhi	zero,r2,346
10004ab0:	100056bc 	xorhi	zero,r2,346
10004ab4:	100056bc 	xorhi	zero,r2,346
10004ab8:	100056bc 	xorhi	zero,r2,346
10004abc:	10004eec 	andhi	zero,r2,315
10004ac0:	100056bc 	xorhi	zero,r2,346
10004ac4:	100056bc 	xorhi	zero,r2,346
10004ac8:	10004ef8 	rdprs	zero,r2,315
10004acc:	100056bc 	xorhi	zero,r2,346
10004ad0:	100056bc 	xorhi	zero,r2,346
10004ad4:	100056bc 	xorhi	zero,r2,346
10004ad8:	100056bc 	xorhi	zero,r2,346
10004adc:	100056bc 	xorhi	zero,r2,346
10004ae0:	1000537c 	xorhi	zero,r2,333
10004ae4:	100056bc 	xorhi	zero,r2,346
10004ae8:	100056bc 	xorhi	zero,r2,346
10004aec:	100053e8 	cmpgeui	zero,r2,335
10004af0:	100056bc 	xorhi	zero,r2,346
10004af4:	100056bc 	xorhi	zero,r2,346
10004af8:	100056bc 	xorhi	zero,r2,346
10004afc:	100056bc 	xorhi	zero,r2,346
10004b00:	100056bc 	xorhi	zero,r2,346
10004b04:	100056bc 	xorhi	zero,r2,346
10004b08:	100056bc 	xorhi	zero,r2,346
10004b0c:	100056bc 	xorhi	zero,r2,346
10004b10:	100056bc 	xorhi	zero,r2,346
10004b14:	100056bc 	xorhi	zero,r2,346
10004b18:	10005660 	cmpeqi	zero,r2,345
10004b1c:	100055e0 	cmpeqi	zero,r2,343
10004b20:	10004e40 	call	110004e4 <_gp+0xfe0e8c>
10004b24:	10004e40 	call	110004e4 <_gp+0xfe0e8c>
10004b28:	10004e40 	call	110004e4 <_gp+0xfe0e8c>
10004b2c:	10005600 	call	11000560 <_gp+0xfe0f08>
10004b30:	100055e0 	cmpeqi	zero,r2,343
10004b34:	100056bc 	xorhi	zero,r2,346
10004b38:	100056bc 	xorhi	zero,r2,346
10004b3c:	1000560c 	andi	zero,r2,344
10004b40:	100056bc 	xorhi	zero,r2,346
10004b44:	10005620 	cmpeqi	zero,r2,344
10004b48:	100054a4 	muli	zero,r2,338
10004b4c:	10004b8c 	andi	zero,r2,302
10004b50:	100054dc 	xori	zero,r2,339
10004b54:	100056bc 	xorhi	zero,r2,346
10004b58:	100054e8 	cmpgeui	zero,r2,339
10004b5c:	100056bc 	xorhi	zero,r2,346
10004b60:	1000554c 	andi	zero,r2,341
10004b64:	100056bc 	xorhi	zero,r2,346
10004b68:	100056bc 	xorhi	zero,r2,346
10004b6c:	1000556c 	andhi	zero,r2,341
10004b70:	d8c03117 	ldw	r3,196(sp)
10004b74:	d8802e15 	stw	r2,184(sp)
10004b78:	00c7c83a 	sub	r3,zero,r3
10004b7c:	d8c03115 	stw	r3,196(sp)
10004b80:	84000114 	ori	r16,r16,4
10004b84:	ac400007 	ldb	r17,0(r21)
10004b88:	003f9706 	br	100049e8 <__alt_data_end+0xf80049e8>
10004b8c:	00800c04 	movi	r2,48
10004b90:	d8802705 	stb	r2,156(sp)
10004b94:	00801e04 	movi	r2,120
10004b98:	d8802745 	stb	r2,157(sp)
10004b9c:	d9002a17 	ldw	r4,168(sp)
10004ba0:	d8802e17 	ldw	r2,184(sp)
10004ba4:	d8002785 	stb	zero,158(sp)
10004ba8:	e011883a 	mov	r8,fp
10004bac:	10c00104 	addi	r3,r2,4
10004bb0:	14c00017 	ldw	r19,0(r2)
10004bb4:	002d883a 	mov	r22,zero
10004bb8:	80800094 	ori	r2,r16,2
10004bbc:	2002ca16 	blt	r4,zero,100056e8 <___vfprintf_internal_r+0xe88>
10004bc0:	00bfdfc4 	movi	r2,-129
10004bc4:	80a4703a 	and	r18,r16,r2
10004bc8:	d8c02e15 	stw	r3,184(sp)
10004bcc:	94800094 	ori	r18,r18,2
10004bd0:	9802b41e 	bne	r19,zero,100056a4 <___vfprintf_internal_r+0xe44>
10004bd4:	01440074 	movhi	r5,4097
10004bd8:	2951b504 	addi	r5,r5,18132
10004bdc:	d9403915 	stw	r5,228(sp)
10004be0:	04401e04 	movi	r17,120
10004be4:	d8802a17 	ldw	r2,168(sp)
10004be8:	0039883a 	mov	fp,zero
10004bec:	1001fa26 	beq	r2,zero,100053d8 <___vfprintf_internal_r+0xb78>
10004bf0:	0027883a 	mov	r19,zero
10004bf4:	002d883a 	mov	r22,zero
10004bf8:	00021906 	br	10005460 <___vfprintf_internal_r+0xc00>
10004bfc:	d9002d17 	ldw	r4,180(sp)
10004c00:	b80b883a 	mov	r5,r23
10004c04:	0006c140 	call	10006c14 <__swsetup_r>
10004c08:	1005dc1e 	bne	r2,zero,1000637c <___vfprintf_internal_r+0x1b1c>
10004c0c:	b880030b 	ldhu	r2,12(r23)
10004c10:	00c00284 	movi	r3,10
10004c14:	1080068c 	andi	r2,r2,26
10004c18:	10ff3a1e 	bne	r2,r3,10004904 <__alt_data_end+0xf8004904>
10004c1c:	b880038f 	ldh	r2,14(r23)
10004c20:	103f3816 	blt	r2,zero,10004904 <__alt_data_end+0xf8004904>
10004c24:	d9c02e17 	ldw	r7,184(sp)
10004c28:	d9002d17 	ldw	r4,180(sp)
10004c2c:	a80d883a 	mov	r6,r21
10004c30:	b80b883a 	mov	r5,r23
10004c34:	0006b580 	call	10006b58 <__sbprintf>
10004c38:	00001106 	br	10004c80 <___vfprintf_internal_r+0x420>
10004c3c:	d9002d17 	ldw	r4,180(sp)
10004c40:	d9801e04 	addi	r6,sp,120
10004c44:	b80b883a 	mov	r5,r23
10004c48:	000c0400 	call	1000c040 <__sprint_r>
10004c4c:	1000081e 	bne	r2,zero,10004c70 <___vfprintf_internal_r+0x410>
10004c50:	da000404 	addi	r8,sp,16
10004c54:	003f5106 	br	1000499c <__alt_data_end+0xf800499c>
10004c58:	d8802017 	ldw	r2,128(sp)
10004c5c:	10000426 	beq	r2,zero,10004c70 <___vfprintf_internal_r+0x410>
10004c60:	d9002d17 	ldw	r4,180(sp)
10004c64:	d9801e04 	addi	r6,sp,120
10004c68:	b80b883a 	mov	r5,r23
10004c6c:	000c0400 	call	1000c040 <__sprint_r>
10004c70:	b880030b 	ldhu	r2,12(r23)
10004c74:	1080100c 	andi	r2,r2,64
10004c78:	1005c01e 	bne	r2,zero,1000637c <___vfprintf_internal_r+0x1b1c>
10004c7c:	d8802f17 	ldw	r2,188(sp)
10004c80:	dfc04717 	ldw	ra,284(sp)
10004c84:	df004617 	ldw	fp,280(sp)
10004c88:	ddc04517 	ldw	r23,276(sp)
10004c8c:	dd804417 	ldw	r22,272(sp)
10004c90:	dd404317 	ldw	r21,268(sp)
10004c94:	dd004217 	ldw	r20,264(sp)
10004c98:	dcc04117 	ldw	r19,260(sp)
10004c9c:	dc804017 	ldw	r18,256(sp)
10004ca0:	dc403f17 	ldw	r17,252(sp)
10004ca4:	dc003e17 	ldw	r16,248(sp)
10004ca8:	dec04804 	addi	sp,sp,288
10004cac:	f800283a 	ret
10004cb0:	d9002d17 	ldw	r4,180(sp)
10004cb4:	0008c200 	call	10008c20 <__sinit>
10004cb8:	003f0206 	br	100048c4 <__alt_data_end+0xf80048c4>
10004cbc:	d9002e17 	ldw	r4,184(sp)
10004cc0:	d9402e17 	ldw	r5,184(sp)
10004cc4:	21000017 	ldw	r4,0(r4)
10004cc8:	28800104 	addi	r2,r5,4
10004ccc:	d9003115 	stw	r4,196(sp)
10004cd0:	203fa716 	blt	r4,zero,10004b70 <__alt_data_end+0xf8004b70>
10004cd4:	d8802e15 	stw	r2,184(sp)
10004cd8:	ac400007 	ldb	r17,0(r21)
10004cdc:	003f4206 	br	100049e8 <__alt_data_end+0xf80049e8>
10004ce0:	ac400007 	ldb	r17,0(r21)
10004ce4:	01000a84 	movi	r4,42
10004ce8:	a8c00044 	addi	r3,r21,1
10004cec:	89075826 	beq	r17,r4,10006a50 <___vfprintf_internal_r+0x21f0>
10004cf0:	8cbff404 	addi	r18,r17,-48
10004cf4:	b486ae36 	bltu	r22,r18,100067b0 <___vfprintf_internal_r+0x1f50>
10004cf8:	0009883a 	mov	r4,zero
10004cfc:	1823883a 	mov	r17,r3
10004d00:	01400284 	movi	r5,10
10004d04:	00046600 	call	10004660 <__mulsi3>
10004d08:	88c00007 	ldb	r3,0(r17)
10004d0c:	1489883a 	add	r4,r2,r18
10004d10:	8d400044 	addi	r21,r17,1
10004d14:	1cbff404 	addi	r18,r3,-48
10004d18:	a823883a 	mov	r17,r21
10004d1c:	b4bff82e 	bgeu	r22,r18,10004d00 <__alt_data_end+0xf8004d00>
10004d20:	1823883a 	mov	r17,r3
10004d24:	2005f616 	blt	r4,zero,10006500 <___vfprintf_internal_r+0x1ca0>
10004d28:	d9002a15 	stw	r4,168(sp)
10004d2c:	003f2f06 	br	100049ec <__alt_data_end+0xf80049ec>
10004d30:	84002014 	ori	r16,r16,128
10004d34:	ac400007 	ldb	r17,0(r21)
10004d38:	003f2b06 	br	100049e8 <__alt_data_end+0xf80049e8>
10004d3c:	8cbff404 	addi	r18,r17,-48
10004d40:	d8003115 	stw	zero,196(sp)
10004d44:	0009883a 	mov	r4,zero
10004d48:	a823883a 	mov	r17,r21
10004d4c:	01400284 	movi	r5,10
10004d50:	00046600 	call	10004660 <__mulsi3>
10004d54:	88c00007 	ldb	r3,0(r17)
10004d58:	9089883a 	add	r4,r18,r2
10004d5c:	ad400044 	addi	r21,r21,1
10004d60:	1cbff404 	addi	r18,r3,-48
10004d64:	a823883a 	mov	r17,r21
10004d68:	b4bff82e 	bgeu	r22,r18,10004d4c <__alt_data_end+0xf8004d4c>
10004d6c:	1823883a 	mov	r17,r3
10004d70:	d9003115 	stw	r4,196(sp)
10004d74:	003f1d06 	br	100049ec <__alt_data_end+0xf80049ec>
10004d78:	8025883a 	mov	r18,r16
10004d7c:	dc002903 	ldbu	r16,164(sp)
10004d80:	e011883a 	mov	r8,fp
10004d84:	84003fcc 	andi	r16,r16,255
10004d88:	8007531e 	bne	r16,zero,10006ad8 <___vfprintf_internal_r+0x2278>
10004d8c:	94800414 	ori	r18,r18,16
10004d90:	9080080c 	andi	r2,r18,32
10004d94:	1003a326 	beq	r2,zero,10005c24 <___vfprintf_internal_r+0x13c4>
10004d98:	d9002e17 	ldw	r4,184(sp)
10004d9c:	20800117 	ldw	r2,4(r4)
10004da0:	24c00017 	ldw	r19,0(r4)
10004da4:	21000204 	addi	r4,r4,8
10004da8:	d9002e15 	stw	r4,184(sp)
10004dac:	102d883a 	mov	r22,r2
10004db0:	10047316 	blt	r2,zero,10005f80 <___vfprintf_internal_r+0x1720>
10004db4:	d9002a17 	ldw	r4,168(sp)
10004db8:	df002783 	ldbu	fp,158(sp)
10004dbc:	2003e416 	blt	r4,zero,10005d50 <___vfprintf_internal_r+0x14f0>
10004dc0:	00ffdfc4 	movi	r3,-129
10004dc4:	9d84b03a 	or	r2,r19,r22
10004dc8:	90e4703a 	and	r18,r18,r3
10004dcc:	10018026 	beq	r2,zero,100053d0 <___vfprintf_internal_r+0xb70>
10004dd0:	b003ab26 	beq	r22,zero,10005c80 <___vfprintf_internal_r+0x1420>
10004dd4:	dc402915 	stw	r17,164(sp)
10004dd8:	dc001e04 	addi	r16,sp,120
10004ddc:	b023883a 	mov	r17,r22
10004de0:	402d883a 	mov	r22,r8
10004de4:	9809883a 	mov	r4,r19
10004de8:	880b883a 	mov	r5,r17
10004dec:	01800284 	movi	r6,10
10004df0:	000f883a 	mov	r7,zero
10004df4:	000e5840 	call	1000e584 <__umoddi3>
10004df8:	10800c04 	addi	r2,r2,48
10004dfc:	843fffc4 	addi	r16,r16,-1
10004e00:	9809883a 	mov	r4,r19
10004e04:	880b883a 	mov	r5,r17
10004e08:	80800005 	stb	r2,0(r16)
10004e0c:	01800284 	movi	r6,10
10004e10:	000f883a 	mov	r7,zero
10004e14:	000df880 	call	1000df88 <__udivdi3>
10004e18:	1027883a 	mov	r19,r2
10004e1c:	10c4b03a 	or	r2,r2,r3
10004e20:	1823883a 	mov	r17,r3
10004e24:	103fef1e 	bne	r2,zero,10004de4 <__alt_data_end+0xf8004de4>
10004e28:	d8c02817 	ldw	r3,160(sp)
10004e2c:	dc402917 	ldw	r17,164(sp)
10004e30:	b011883a 	mov	r8,r22
10004e34:	1c07c83a 	sub	r3,r3,r16
10004e38:	d8c02b15 	stw	r3,172(sp)
10004e3c:	00005f06 	br	10004fbc <___vfprintf_internal_r+0x75c>
10004e40:	8025883a 	mov	r18,r16
10004e44:	dc002903 	ldbu	r16,164(sp)
10004e48:	e011883a 	mov	r8,fp
10004e4c:	84003fcc 	andi	r16,r16,255
10004e50:	80071e1e 	bne	r16,zero,10006acc <___vfprintf_internal_r+0x226c>
10004e54:	9080020c 	andi	r2,r18,8
10004e58:	1004af26 	beq	r2,zero,10006118 <___vfprintf_internal_r+0x18b8>
10004e5c:	d9002e17 	ldw	r4,184(sp)
10004e60:	d9402e17 	ldw	r5,184(sp)
10004e64:	d8802e17 	ldw	r2,184(sp)
10004e68:	21000017 	ldw	r4,0(r4)
10004e6c:	29400117 	ldw	r5,4(r5)
10004e70:	10800204 	addi	r2,r2,8
10004e74:	d9003615 	stw	r4,216(sp)
10004e78:	d9403815 	stw	r5,224(sp)
10004e7c:	d8802e15 	stw	r2,184(sp)
10004e80:	d9003617 	ldw	r4,216(sp)
10004e84:	d9403817 	ldw	r5,224(sp)
10004e88:	da003d15 	stw	r8,244(sp)
10004e8c:	04000044 	movi	r16,1
10004e90:	000bc640 	call	1000bc64 <__fpclassifyd>
10004e94:	da003d17 	ldw	r8,244(sp)
10004e98:	1404441e 	bne	r2,r16,10005fac <___vfprintf_internal_r+0x174c>
10004e9c:	d9003617 	ldw	r4,216(sp)
10004ea0:	d9403817 	ldw	r5,224(sp)
10004ea4:	000d883a 	mov	r6,zero
10004ea8:	000f883a 	mov	r7,zero
10004eac:	00100dc0 	call	100100dc <__ledf2>
10004eb0:	da003d17 	ldw	r8,244(sp)
10004eb4:	1005e316 	blt	r2,zero,10006644 <___vfprintf_internal_r+0x1de4>
10004eb8:	df002783 	ldbu	fp,158(sp)
10004ebc:	008011c4 	movi	r2,71
10004ec0:	1445580e 	bge	r2,r17,10006424 <___vfprintf_internal_r+0x1bc4>
10004ec4:	04040074 	movhi	r16,4097
10004ec8:	8411ad04 	addi	r16,r16,18100
10004ecc:	00c000c4 	movi	r3,3
10004ed0:	00bfdfc4 	movi	r2,-129
10004ed4:	d8c02915 	stw	r3,164(sp)
10004ed8:	90a4703a 	and	r18,r18,r2
10004edc:	d8c02b15 	stw	r3,172(sp)
10004ee0:	d8002a15 	stw	zero,168(sp)
10004ee4:	d8003215 	stw	zero,200(sp)
10004ee8:	00003a06 	br	10004fd4 <___vfprintf_internal_r+0x774>
10004eec:	84000214 	ori	r16,r16,8
10004ef0:	ac400007 	ldb	r17,0(r21)
10004ef4:	003ebc06 	br	100049e8 <__alt_data_end+0xf80049e8>
10004ef8:	8025883a 	mov	r18,r16
10004efc:	dc002903 	ldbu	r16,164(sp)
10004f00:	e011883a 	mov	r8,fp
10004f04:	84003fcc 	andi	r16,r16,255
10004f08:	8007001e 	bne	r16,zero,10006b0c <___vfprintf_internal_r+0x22ac>
10004f0c:	94800414 	ori	r18,r18,16
10004f10:	9080080c 	andi	r2,r18,32
10004f14:	1002fa26 	beq	r2,zero,10005b00 <___vfprintf_internal_r+0x12a0>
10004f18:	d9002e17 	ldw	r4,184(sp)
10004f1c:	d9402a17 	ldw	r5,168(sp)
10004f20:	d8002785 	stb	zero,158(sp)
10004f24:	20800204 	addi	r2,r4,8
10004f28:	24c00017 	ldw	r19,0(r4)
10004f2c:	25800117 	ldw	r22,4(r4)
10004f30:	2804b116 	blt	r5,zero,100061f8 <___vfprintf_internal_r+0x1998>
10004f34:	013fdfc4 	movi	r4,-129
10004f38:	9d86b03a 	or	r3,r19,r22
10004f3c:	d8802e15 	stw	r2,184(sp)
10004f40:	9124703a 	and	r18,r18,r4
10004f44:	1802fb1e 	bne	r3,zero,10005b34 <___vfprintf_internal_r+0x12d4>
10004f48:	d8c02a17 	ldw	r3,168(sp)
10004f4c:	0039883a 	mov	fp,zero
10004f50:	1805e526 	beq	r3,zero,100066e8 <___vfprintf_internal_r+0x1e88>
10004f54:	0027883a 	mov	r19,zero
10004f58:	002d883a 	mov	r22,zero
10004f5c:	dc001e04 	addi	r16,sp,120
10004f60:	9806d0fa 	srli	r3,r19,3
10004f64:	b008977a 	slli	r4,r22,29
10004f68:	b02cd0fa 	srli	r22,r22,3
10004f6c:	9cc001cc 	andi	r19,r19,7
10004f70:	98800c04 	addi	r2,r19,48
10004f74:	843fffc4 	addi	r16,r16,-1
10004f78:	20e6b03a 	or	r19,r4,r3
10004f7c:	80800005 	stb	r2,0(r16)
10004f80:	9d86b03a 	or	r3,r19,r22
10004f84:	183ff61e 	bne	r3,zero,10004f60 <__alt_data_end+0xf8004f60>
10004f88:	90c0004c 	andi	r3,r18,1
10004f8c:	18014126 	beq	r3,zero,10005494 <___vfprintf_internal_r+0xc34>
10004f90:	10803fcc 	andi	r2,r2,255
10004f94:	1080201c 	xori	r2,r2,128
10004f98:	10bfe004 	addi	r2,r2,-128
10004f9c:	00c00c04 	movi	r3,48
10004fa0:	10c13c26 	beq	r2,r3,10005494 <___vfprintf_internal_r+0xc34>
10004fa4:	80ffffc5 	stb	r3,-1(r16)
10004fa8:	d8c02817 	ldw	r3,160(sp)
10004fac:	80bfffc4 	addi	r2,r16,-1
10004fb0:	1021883a 	mov	r16,r2
10004fb4:	1887c83a 	sub	r3,r3,r2
10004fb8:	d8c02b15 	stw	r3,172(sp)
10004fbc:	d8802b17 	ldw	r2,172(sp)
10004fc0:	d9002a17 	ldw	r4,168(sp)
10004fc4:	1100010e 	bge	r2,r4,10004fcc <___vfprintf_internal_r+0x76c>
10004fc8:	2005883a 	mov	r2,r4
10004fcc:	d8802915 	stw	r2,164(sp)
10004fd0:	d8003215 	stw	zero,200(sp)
10004fd4:	e7003fcc 	andi	fp,fp,255
10004fd8:	e700201c 	xori	fp,fp,128
10004fdc:	e73fe004 	addi	fp,fp,-128
10004fe0:	e0000326 	beq	fp,zero,10004ff0 <___vfprintf_internal_r+0x790>
10004fe4:	d8c02917 	ldw	r3,164(sp)
10004fe8:	18c00044 	addi	r3,r3,1
10004fec:	d8c02915 	stw	r3,164(sp)
10004ff0:	90c0008c 	andi	r3,r18,2
10004ff4:	d8c02c15 	stw	r3,176(sp)
10004ff8:	18000326 	beq	r3,zero,10005008 <___vfprintf_internal_r+0x7a8>
10004ffc:	d8c02917 	ldw	r3,164(sp)
10005000:	18c00084 	addi	r3,r3,2
10005004:	d8c02915 	stw	r3,164(sp)
10005008:	90c0210c 	andi	r3,r18,132
1000500c:	d8c03015 	stw	r3,192(sp)
10005010:	1801c51e 	bne	r3,zero,10005728 <___vfprintf_internal_r+0xec8>
10005014:	d9003117 	ldw	r4,196(sp)
10005018:	d8c02917 	ldw	r3,164(sp)
1000501c:	20e7c83a 	sub	r19,r4,r3
10005020:	04c1c10e 	bge	zero,r19,10005728 <___vfprintf_internal_r+0xec8>
10005024:	02400404 	movi	r9,16
10005028:	d8c02017 	ldw	r3,128(sp)
1000502c:	d8801f17 	ldw	r2,124(sp)
10005030:	4cc52f0e 	bge	r9,r19,100064f0 <___vfprintf_internal_r+0x1c90>
10005034:	01440074 	movhi	r5,4097
10005038:	2951c084 	addi	r5,r5,18178
1000503c:	dc403b15 	stw	r17,236(sp)
10005040:	d9403515 	stw	r5,212(sp)
10005044:	9823883a 	mov	r17,r19
10005048:	482d883a 	mov	r22,r9
1000504c:	9027883a 	mov	r19,r18
10005050:	070001c4 	movi	fp,7
10005054:	8025883a 	mov	r18,r16
10005058:	dc002d17 	ldw	r16,180(sp)
1000505c:	00000306 	br	1000506c <___vfprintf_internal_r+0x80c>
10005060:	8c7ffc04 	addi	r17,r17,-16
10005064:	42000204 	addi	r8,r8,8
10005068:	b440130e 	bge	r22,r17,100050b8 <___vfprintf_internal_r+0x858>
1000506c:	01040074 	movhi	r4,4097
10005070:	18c00404 	addi	r3,r3,16
10005074:	10800044 	addi	r2,r2,1
10005078:	2111c084 	addi	r4,r4,18178
1000507c:	41000015 	stw	r4,0(r8)
10005080:	45800115 	stw	r22,4(r8)
10005084:	d8c02015 	stw	r3,128(sp)
10005088:	d8801f15 	stw	r2,124(sp)
1000508c:	e0bff40e 	bge	fp,r2,10005060 <__alt_data_end+0xf8005060>
10005090:	d9801e04 	addi	r6,sp,120
10005094:	b80b883a 	mov	r5,r23
10005098:	8009883a 	mov	r4,r16
1000509c:	000c0400 	call	1000c040 <__sprint_r>
100050a0:	103ef31e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
100050a4:	8c7ffc04 	addi	r17,r17,-16
100050a8:	d8c02017 	ldw	r3,128(sp)
100050ac:	d8801f17 	ldw	r2,124(sp)
100050b0:	da000404 	addi	r8,sp,16
100050b4:	b47fed16 	blt	r22,r17,1000506c <__alt_data_end+0xf800506c>
100050b8:	9021883a 	mov	r16,r18
100050bc:	9825883a 	mov	r18,r19
100050c0:	8827883a 	mov	r19,r17
100050c4:	dc403b17 	ldw	r17,236(sp)
100050c8:	d9403517 	ldw	r5,212(sp)
100050cc:	98c7883a 	add	r3,r19,r3
100050d0:	10800044 	addi	r2,r2,1
100050d4:	41400015 	stw	r5,0(r8)
100050d8:	44c00115 	stw	r19,4(r8)
100050dc:	d8c02015 	stw	r3,128(sp)
100050e0:	d8801f15 	stw	r2,124(sp)
100050e4:	010001c4 	movi	r4,7
100050e8:	2082c516 	blt	r4,r2,10005c00 <___vfprintf_internal_r+0x13a0>
100050ec:	df002787 	ldb	fp,158(sp)
100050f0:	42000204 	addi	r8,r8,8
100050f4:	e0000c26 	beq	fp,zero,10005128 <___vfprintf_internal_r+0x8c8>
100050f8:	d8801f17 	ldw	r2,124(sp)
100050fc:	d9002784 	addi	r4,sp,158
10005100:	18c00044 	addi	r3,r3,1
10005104:	10800044 	addi	r2,r2,1
10005108:	41000015 	stw	r4,0(r8)
1000510c:	01000044 	movi	r4,1
10005110:	41000115 	stw	r4,4(r8)
10005114:	d8c02015 	stw	r3,128(sp)
10005118:	d8801f15 	stw	r2,124(sp)
1000511c:	010001c4 	movi	r4,7
10005120:	20825e16 	blt	r4,r2,10005a9c <___vfprintf_internal_r+0x123c>
10005124:	42000204 	addi	r8,r8,8
10005128:	d8802c17 	ldw	r2,176(sp)
1000512c:	10000c26 	beq	r2,zero,10005160 <___vfprintf_internal_r+0x900>
10005130:	d8801f17 	ldw	r2,124(sp)
10005134:	d9002704 	addi	r4,sp,156
10005138:	18c00084 	addi	r3,r3,2
1000513c:	10800044 	addi	r2,r2,1
10005140:	41000015 	stw	r4,0(r8)
10005144:	01000084 	movi	r4,2
10005148:	41000115 	stw	r4,4(r8)
1000514c:	d8c02015 	stw	r3,128(sp)
10005150:	d8801f15 	stw	r2,124(sp)
10005154:	010001c4 	movi	r4,7
10005158:	20825816 	blt	r4,r2,10005abc <___vfprintf_internal_r+0x125c>
1000515c:	42000204 	addi	r8,r8,8
10005160:	d9003017 	ldw	r4,192(sp)
10005164:	00802004 	movi	r2,128
10005168:	2081bb26 	beq	r4,r2,10005858 <___vfprintf_internal_r+0xff8>
1000516c:	d9402a17 	ldw	r5,168(sp)
10005170:	d8802b17 	ldw	r2,172(sp)
10005174:	28adc83a 	sub	r22,r5,r2
10005178:	0580310e 	bge	zero,r22,10005240 <___vfprintf_internal_r+0x9e0>
1000517c:	07000404 	movi	fp,16
10005180:	d8801f17 	ldw	r2,124(sp)
10005184:	e584360e 	bge	fp,r22,10006260 <___vfprintf_internal_r+0x1a00>
10005188:	01440074 	movhi	r5,4097
1000518c:	2951bc84 	addi	r5,r5,18162
10005190:	dc402a15 	stw	r17,168(sp)
10005194:	d9402c15 	stw	r5,176(sp)
10005198:	b023883a 	mov	r17,r22
1000519c:	04c001c4 	movi	r19,7
100051a0:	a82d883a 	mov	r22,r21
100051a4:	902b883a 	mov	r21,r18
100051a8:	8025883a 	mov	r18,r16
100051ac:	dc002d17 	ldw	r16,180(sp)
100051b0:	00000306 	br	100051c0 <___vfprintf_internal_r+0x960>
100051b4:	8c7ffc04 	addi	r17,r17,-16
100051b8:	42000204 	addi	r8,r8,8
100051bc:	e440110e 	bge	fp,r17,10005204 <___vfprintf_internal_r+0x9a4>
100051c0:	18c00404 	addi	r3,r3,16
100051c4:	10800044 	addi	r2,r2,1
100051c8:	45000015 	stw	r20,0(r8)
100051cc:	47000115 	stw	fp,4(r8)
100051d0:	d8c02015 	stw	r3,128(sp)
100051d4:	d8801f15 	stw	r2,124(sp)
100051d8:	98bff60e 	bge	r19,r2,100051b4 <__alt_data_end+0xf80051b4>
100051dc:	d9801e04 	addi	r6,sp,120
100051e0:	b80b883a 	mov	r5,r23
100051e4:	8009883a 	mov	r4,r16
100051e8:	000c0400 	call	1000c040 <__sprint_r>
100051ec:	103ea01e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
100051f0:	8c7ffc04 	addi	r17,r17,-16
100051f4:	d8c02017 	ldw	r3,128(sp)
100051f8:	d8801f17 	ldw	r2,124(sp)
100051fc:	da000404 	addi	r8,sp,16
10005200:	e47fef16 	blt	fp,r17,100051c0 <__alt_data_end+0xf80051c0>
10005204:	9021883a 	mov	r16,r18
10005208:	a825883a 	mov	r18,r21
1000520c:	b02b883a 	mov	r21,r22
10005210:	882d883a 	mov	r22,r17
10005214:	dc402a17 	ldw	r17,168(sp)
10005218:	d9002c17 	ldw	r4,176(sp)
1000521c:	1d87883a 	add	r3,r3,r22
10005220:	10800044 	addi	r2,r2,1
10005224:	41000015 	stw	r4,0(r8)
10005228:	45800115 	stw	r22,4(r8)
1000522c:	d8c02015 	stw	r3,128(sp)
10005230:	d8801f15 	stw	r2,124(sp)
10005234:	010001c4 	movi	r4,7
10005238:	20821016 	blt	r4,r2,10005a7c <___vfprintf_internal_r+0x121c>
1000523c:	42000204 	addi	r8,r8,8
10005240:	9080400c 	andi	r2,r18,256
10005244:	10013a1e 	bne	r2,zero,10005730 <___vfprintf_internal_r+0xed0>
10005248:	d9402b17 	ldw	r5,172(sp)
1000524c:	d8801f17 	ldw	r2,124(sp)
10005250:	44000015 	stw	r16,0(r8)
10005254:	1947883a 	add	r3,r3,r5
10005258:	10800044 	addi	r2,r2,1
1000525c:	41400115 	stw	r5,4(r8)
10005260:	d8c02015 	stw	r3,128(sp)
10005264:	d8801f15 	stw	r2,124(sp)
10005268:	010001c4 	movi	r4,7
1000526c:	2081f516 	blt	r4,r2,10005a44 <___vfprintf_internal_r+0x11e4>
10005270:	42000204 	addi	r8,r8,8
10005274:	9480010c 	andi	r18,r18,4
10005278:	90003226 	beq	r18,zero,10005344 <___vfprintf_internal_r+0xae4>
1000527c:	d9403117 	ldw	r5,196(sp)
10005280:	d8802917 	ldw	r2,164(sp)
10005284:	28a1c83a 	sub	r16,r5,r2
10005288:	04002e0e 	bge	zero,r16,10005344 <___vfprintf_internal_r+0xae4>
1000528c:	04400404 	movi	r17,16
10005290:	d8801f17 	ldw	r2,124(sp)
10005294:	8c04c40e 	bge	r17,r16,100065a8 <___vfprintf_internal_r+0x1d48>
10005298:	01440074 	movhi	r5,4097
1000529c:	2951c084 	addi	r5,r5,18178
100052a0:	d9403515 	stw	r5,212(sp)
100052a4:	048001c4 	movi	r18,7
100052a8:	dcc02d17 	ldw	r19,180(sp)
100052ac:	00000306 	br	100052bc <___vfprintf_internal_r+0xa5c>
100052b0:	843ffc04 	addi	r16,r16,-16
100052b4:	42000204 	addi	r8,r8,8
100052b8:	8c00130e 	bge	r17,r16,10005308 <___vfprintf_internal_r+0xaa8>
100052bc:	01040074 	movhi	r4,4097
100052c0:	18c00404 	addi	r3,r3,16
100052c4:	10800044 	addi	r2,r2,1
100052c8:	2111c084 	addi	r4,r4,18178
100052cc:	41000015 	stw	r4,0(r8)
100052d0:	44400115 	stw	r17,4(r8)
100052d4:	d8c02015 	stw	r3,128(sp)
100052d8:	d8801f15 	stw	r2,124(sp)
100052dc:	90bff40e 	bge	r18,r2,100052b0 <__alt_data_end+0xf80052b0>
100052e0:	d9801e04 	addi	r6,sp,120
100052e4:	b80b883a 	mov	r5,r23
100052e8:	9809883a 	mov	r4,r19
100052ec:	000c0400 	call	1000c040 <__sprint_r>
100052f0:	103e5f1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
100052f4:	843ffc04 	addi	r16,r16,-16
100052f8:	d8c02017 	ldw	r3,128(sp)
100052fc:	d8801f17 	ldw	r2,124(sp)
10005300:	da000404 	addi	r8,sp,16
10005304:	8c3fed16 	blt	r17,r16,100052bc <__alt_data_end+0xf80052bc>
10005308:	d9403517 	ldw	r5,212(sp)
1000530c:	1c07883a 	add	r3,r3,r16
10005310:	10800044 	addi	r2,r2,1
10005314:	41400015 	stw	r5,0(r8)
10005318:	44000115 	stw	r16,4(r8)
1000531c:	d8c02015 	stw	r3,128(sp)
10005320:	d8801f15 	stw	r2,124(sp)
10005324:	010001c4 	movi	r4,7
10005328:	2080060e 	bge	r4,r2,10005344 <___vfprintf_internal_r+0xae4>
1000532c:	d9002d17 	ldw	r4,180(sp)
10005330:	d9801e04 	addi	r6,sp,120
10005334:	b80b883a 	mov	r5,r23
10005338:	000c0400 	call	1000c040 <__sprint_r>
1000533c:	103e4c1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005340:	d8c02017 	ldw	r3,128(sp)
10005344:	d8803117 	ldw	r2,196(sp)
10005348:	d9002917 	ldw	r4,164(sp)
1000534c:	1100010e 	bge	r2,r4,10005354 <___vfprintf_internal_r+0xaf4>
10005350:	2005883a 	mov	r2,r4
10005354:	d9402f17 	ldw	r5,188(sp)
10005358:	288b883a 	add	r5,r5,r2
1000535c:	d9402f15 	stw	r5,188(sp)
10005360:	1801c01e 	bne	r3,zero,10005a64 <___vfprintf_internal_r+0x1204>
10005364:	a8800007 	ldb	r2,0(r21)
10005368:	d8001f15 	stw	zero,124(sp)
1000536c:	da000404 	addi	r8,sp,16
10005370:	103d751e 	bne	r2,zero,10004948 <__alt_data_end+0xf8004948>
10005374:	a823883a 	mov	r17,r21
10005378:	003d8b06 	br	100049a8 <__alt_data_end+0xf80049a8>
1000537c:	8025883a 	mov	r18,r16
10005380:	dc002903 	ldbu	r16,164(sp)
10005384:	e011883a 	mov	r8,fp
10005388:	84003fcc 	andi	r16,r16,255
1000538c:	8005e51e 	bne	r16,zero,10006b24 <___vfprintf_internal_r+0x22c4>
10005390:	94800414 	ori	r18,r18,16
10005394:	9080080c 	andi	r2,r18,32
10005398:	10022b26 	beq	r2,zero,10005c48 <___vfprintf_internal_r+0x13e8>
1000539c:	d9002e17 	ldw	r4,184(sp)
100053a0:	d9402a17 	ldw	r5,168(sp)
100053a4:	d8002785 	stb	zero,158(sp)
100053a8:	20c00204 	addi	r3,r4,8
100053ac:	24c00017 	ldw	r19,0(r4)
100053b0:	25800117 	ldw	r22,4(r4)
100053b4:	28042e16 	blt	r5,zero,10006470 <___vfprintf_internal_r+0x1c10>
100053b8:	013fdfc4 	movi	r4,-129
100053bc:	9d84b03a 	or	r2,r19,r22
100053c0:	d8c02e15 	stw	r3,184(sp)
100053c4:	9124703a 	and	r18,r18,r4
100053c8:	0039883a 	mov	fp,zero
100053cc:	103e801e 	bne	r2,zero,10004dd0 <__alt_data_end+0xf8004dd0>
100053d0:	d9002a17 	ldw	r4,168(sp)
100053d4:	2002e01e 	bne	r4,zero,10005f58 <___vfprintf_internal_r+0x16f8>
100053d8:	d8002a15 	stw	zero,168(sp)
100053dc:	d8002b15 	stw	zero,172(sp)
100053e0:	dc001e04 	addi	r16,sp,120
100053e4:	003ef506 	br	10004fbc <__alt_data_end+0xf8004fbc>
100053e8:	8025883a 	mov	r18,r16
100053ec:	dc002903 	ldbu	r16,164(sp)
100053f0:	e011883a 	mov	r8,fp
100053f4:	84003fcc 	andi	r16,r16,255
100053f8:	8005ba1e 	bne	r16,zero,10006ae4 <___vfprintf_internal_r+0x2284>
100053fc:	01040074 	movhi	r4,4097
10005400:	2111b004 	addi	r4,r4,18112
10005404:	d9003915 	stw	r4,228(sp)
10005408:	9080080c 	andi	r2,r18,32
1000540c:	10006126 	beq	r2,zero,10005594 <___vfprintf_internal_r+0xd34>
10005410:	d9402e17 	ldw	r5,184(sp)
10005414:	2cc00017 	ldw	r19,0(r5)
10005418:	2d800117 	ldw	r22,4(r5)
1000541c:	29400204 	addi	r5,r5,8
10005420:	d9402e15 	stw	r5,184(sp)
10005424:	9080004c 	andi	r2,r18,1
10005428:	1001ac26 	beq	r2,zero,10005adc <___vfprintf_internal_r+0x127c>
1000542c:	9d84b03a 	or	r2,r19,r22
10005430:	10038526 	beq	r2,zero,10006248 <___vfprintf_internal_r+0x19e8>
10005434:	d8c02a17 	ldw	r3,168(sp)
10005438:	00800c04 	movi	r2,48
1000543c:	d8802705 	stb	r2,156(sp)
10005440:	dc402745 	stb	r17,157(sp)
10005444:	d8002785 	stb	zero,158(sp)
10005448:	90800094 	ori	r2,r18,2
1000544c:	18047916 	blt	r3,zero,10006634 <___vfprintf_internal_r+0x1dd4>
10005450:	00bfdfc4 	movi	r2,-129
10005454:	90a4703a 	and	r18,r18,r2
10005458:	94800094 	ori	r18,r18,2
1000545c:	0039883a 	mov	fp,zero
10005460:	d9003917 	ldw	r4,228(sp)
10005464:	dc001e04 	addi	r16,sp,120
10005468:	988003cc 	andi	r2,r19,15
1000546c:	b006973a 	slli	r3,r22,28
10005470:	2085883a 	add	r2,r4,r2
10005474:	9826d13a 	srli	r19,r19,4
10005478:	10800003 	ldbu	r2,0(r2)
1000547c:	b02cd13a 	srli	r22,r22,4
10005480:	843fffc4 	addi	r16,r16,-1
10005484:	1ce6b03a 	or	r19,r3,r19
10005488:	80800005 	stb	r2,0(r16)
1000548c:	9d84b03a 	or	r2,r19,r22
10005490:	103ff51e 	bne	r2,zero,10005468 <__alt_data_end+0xf8005468>
10005494:	d8c02817 	ldw	r3,160(sp)
10005498:	1c07c83a 	sub	r3,r3,r16
1000549c:	d8c02b15 	stw	r3,172(sp)
100054a0:	003ec606 	br	10004fbc <__alt_data_end+0xf8004fbc>
100054a4:	8025883a 	mov	r18,r16
100054a8:	dc002903 	ldbu	r16,164(sp)
100054ac:	e011883a 	mov	r8,fp
100054b0:	84003fcc 	andi	r16,r16,255
100054b4:	803e9626 	beq	r16,zero,10004f10 <__alt_data_end+0xf8004f10>
100054b8:	d8c02b03 	ldbu	r3,172(sp)
100054bc:	d8c02785 	stb	r3,158(sp)
100054c0:	003e9306 	br	10004f10 <__alt_data_end+0xf8004f10>
100054c4:	00c00044 	movi	r3,1
100054c8:	d8c02905 	stb	r3,164(sp)
100054cc:	00c00ac4 	movi	r3,43
100054d0:	d8c02b05 	stb	r3,172(sp)
100054d4:	ac400007 	ldb	r17,0(r21)
100054d8:	003d4306 	br	100049e8 <__alt_data_end+0xf80049e8>
100054dc:	84000814 	ori	r16,r16,32
100054e0:	ac400007 	ldb	r17,0(r21)
100054e4:	003d4006 	br	100049e8 <__alt_data_end+0xf80049e8>
100054e8:	d8802e17 	ldw	r2,184(sp)
100054ec:	8025883a 	mov	r18,r16
100054f0:	d8002785 	stb	zero,158(sp)
100054f4:	14000017 	ldw	r16,0(r2)
100054f8:	e011883a 	mov	r8,fp
100054fc:	14c00104 	addi	r19,r2,4
10005500:	80042d26 	beq	r16,zero,100065b8 <___vfprintf_internal_r+0x1d58>
10005504:	d8c02a17 	ldw	r3,168(sp)
10005508:	1803e416 	blt	r3,zero,1000649c <___vfprintf_internal_r+0x1c3c>
1000550c:	180d883a 	mov	r6,r3
10005510:	000b883a 	mov	r5,zero
10005514:	8009883a 	mov	r4,r16
10005518:	df003d15 	stw	fp,244(sp)
1000551c:	000a1980 	call	1000a198 <memchr>
10005520:	da003d17 	ldw	r8,244(sp)
10005524:	10046826 	beq	r2,zero,100066c8 <___vfprintf_internal_r+0x1e68>
10005528:	1405c83a 	sub	r2,r2,r16
1000552c:	d8802b15 	stw	r2,172(sp)
10005530:	1003e016 	blt	r2,zero,100064b4 <___vfprintf_internal_r+0x1c54>
10005534:	df002783 	ldbu	fp,158(sp)
10005538:	d8802915 	stw	r2,164(sp)
1000553c:	dcc02e15 	stw	r19,184(sp)
10005540:	d8002a15 	stw	zero,168(sp)
10005544:	d8003215 	stw	zero,200(sp)
10005548:	003ea206 	br	10004fd4 <__alt_data_end+0xf8004fd4>
1000554c:	8025883a 	mov	r18,r16
10005550:	dc002903 	ldbu	r16,164(sp)
10005554:	e011883a 	mov	r8,fp
10005558:	84003fcc 	andi	r16,r16,255
1000555c:	803f8d26 	beq	r16,zero,10005394 <__alt_data_end+0xf8005394>
10005560:	d8c02b03 	ldbu	r3,172(sp)
10005564:	d8c02785 	stb	r3,158(sp)
10005568:	003f8a06 	br	10005394 <__alt_data_end+0xf8005394>
1000556c:	8025883a 	mov	r18,r16
10005570:	dc002903 	ldbu	r16,164(sp)
10005574:	e011883a 	mov	r8,fp
10005578:	84003fcc 	andi	r16,r16,255
1000557c:	8005661e 	bne	r16,zero,10006b18 <___vfprintf_internal_r+0x22b8>
10005580:	01040074 	movhi	r4,4097
10005584:	2111b504 	addi	r4,r4,18132
10005588:	d9003915 	stw	r4,228(sp)
1000558c:	9080080c 	andi	r2,r18,32
10005590:	103f9f1e 	bne	r2,zero,10005410 <__alt_data_end+0xf8005410>
10005594:	9080040c 	andi	r2,r18,16
10005598:	1002eb26 	beq	r2,zero,10006148 <___vfprintf_internal_r+0x18e8>
1000559c:	d8802e17 	ldw	r2,184(sp)
100055a0:	002d883a 	mov	r22,zero
100055a4:	14c00017 	ldw	r19,0(r2)
100055a8:	10800104 	addi	r2,r2,4
100055ac:	d8802e15 	stw	r2,184(sp)
100055b0:	003f9c06 	br	10005424 <__alt_data_end+0xf8005424>
100055b4:	d8802b07 	ldb	r2,172(sp)
100055b8:	1002e11e 	bne	r2,zero,10006140 <___vfprintf_internal_r+0x18e0>
100055bc:	00c00044 	movi	r3,1
100055c0:	d8c02905 	stb	r3,164(sp)
100055c4:	00c00804 	movi	r3,32
100055c8:	d8c02b05 	stb	r3,172(sp)
100055cc:	ac400007 	ldb	r17,0(r21)
100055d0:	003d0506 	br	100049e8 <__alt_data_end+0xf80049e8>
100055d4:	84000054 	ori	r16,r16,1
100055d8:	ac400007 	ldb	r17,0(r21)
100055dc:	003d0206 	br	100049e8 <__alt_data_end+0xf80049e8>
100055e0:	8025883a 	mov	r18,r16
100055e4:	dc002903 	ldbu	r16,164(sp)
100055e8:	e011883a 	mov	r8,fp
100055ec:	84003fcc 	andi	r16,r16,255
100055f0:	803de726 	beq	r16,zero,10004d90 <__alt_data_end+0xf8004d90>
100055f4:	d8c02b03 	ldbu	r3,172(sp)
100055f8:	d8c02785 	stb	r3,158(sp)
100055fc:	003de406 	br	10004d90 <__alt_data_end+0xf8004d90>
10005600:	84001014 	ori	r16,r16,64
10005604:	ac400007 	ldb	r17,0(r21)
10005608:	003cf706 	br	100049e8 <__alt_data_end+0xf80049e8>
1000560c:	ac400007 	ldb	r17,0(r21)
10005610:	00801b04 	movi	r2,108
10005614:	88838f26 	beq	r17,r2,10006454 <___vfprintf_internal_r+0x1bf4>
10005618:	84000414 	ori	r16,r16,16
1000561c:	003cf206 	br	100049e8 <__alt_data_end+0xf80049e8>
10005620:	8025883a 	mov	r18,r16
10005624:	dc002903 	ldbu	r16,164(sp)
10005628:	e011883a 	mov	r8,fp
1000562c:	84003fcc 	andi	r16,r16,255
10005630:	80053f1e 	bne	r16,zero,10006b30 <___vfprintf_internal_r+0x22d0>
10005634:	9080080c 	andi	r2,r18,32
10005638:	1002d226 	beq	r2,zero,10006184 <___vfprintf_internal_r+0x1924>
1000563c:	d9002e17 	ldw	r4,184(sp)
10005640:	d9402f17 	ldw	r5,188(sp)
10005644:	20800017 	ldw	r2,0(r4)
10005648:	2807d7fa 	srai	r3,r5,31
1000564c:	21000104 	addi	r4,r4,4
10005650:	d9002e15 	stw	r4,184(sp)
10005654:	11400015 	stw	r5,0(r2)
10005658:	10c00115 	stw	r3,4(r2)
1000565c:	003cb806 	br	10004940 <__alt_data_end+0xf8004940>
10005660:	d8c02e17 	ldw	r3,184(sp)
10005664:	d9002e17 	ldw	r4,184(sp)
10005668:	8025883a 	mov	r18,r16
1000566c:	18800017 	ldw	r2,0(r3)
10005670:	21000104 	addi	r4,r4,4
10005674:	00c00044 	movi	r3,1
10005678:	e011883a 	mov	r8,fp
1000567c:	d8c02915 	stw	r3,164(sp)
10005680:	d8002785 	stb	zero,158(sp)
10005684:	d8801405 	stb	r2,80(sp)
10005688:	d9002e15 	stw	r4,184(sp)
1000568c:	d8c02b15 	stw	r3,172(sp)
10005690:	d8002a15 	stw	zero,168(sp)
10005694:	d8003215 	stw	zero,200(sp)
10005698:	dc001404 	addi	r16,sp,80
1000569c:	0039883a 	mov	fp,zero
100056a0:	003e5306 	br	10004ff0 <__alt_data_end+0xf8004ff0>
100056a4:	01040074 	movhi	r4,4097
100056a8:	2111b504 	addi	r4,r4,18132
100056ac:	0039883a 	mov	fp,zero
100056b0:	d9003915 	stw	r4,228(sp)
100056b4:	04401e04 	movi	r17,120
100056b8:	003f6906 	br	10005460 <__alt_data_end+0xf8005460>
100056bc:	8025883a 	mov	r18,r16
100056c0:	dc002903 	ldbu	r16,164(sp)
100056c4:	e011883a 	mov	r8,fp
100056c8:	84003fcc 	andi	r16,r16,255
100056cc:	8005081e 	bne	r16,zero,10006af0 <___vfprintf_internal_r+0x2290>
100056d0:	883d6126 	beq	r17,zero,10004c58 <__alt_data_end+0xf8004c58>
100056d4:	00c00044 	movi	r3,1
100056d8:	d8c02915 	stw	r3,164(sp)
100056dc:	dc401405 	stb	r17,80(sp)
100056e0:	d8002785 	stb	zero,158(sp)
100056e4:	003fe906 	br	1000568c <__alt_data_end+0xf800568c>
100056e8:	01440074 	movhi	r5,4097
100056ec:	2951b504 	addi	r5,r5,18132
100056f0:	d9403915 	stw	r5,228(sp)
100056f4:	d8c02e15 	stw	r3,184(sp)
100056f8:	1025883a 	mov	r18,r2
100056fc:	04401e04 	movi	r17,120
10005700:	9d84b03a 	or	r2,r19,r22
10005704:	1000fc1e 	bne	r2,zero,10005af8 <___vfprintf_internal_r+0x1298>
10005708:	0039883a 	mov	fp,zero
1000570c:	00800084 	movi	r2,2
10005710:	10803fcc 	andi	r2,r2,255
10005714:	00c00044 	movi	r3,1
10005718:	10c20f26 	beq	r2,r3,10005f58 <___vfprintf_internal_r+0x16f8>
1000571c:	00c00084 	movi	r3,2
10005720:	10fd3326 	beq	r2,r3,10004bf0 <__alt_data_end+0xf8004bf0>
10005724:	003e0b06 	br	10004f54 <__alt_data_end+0xf8004f54>
10005728:	d8c02017 	ldw	r3,128(sp)
1000572c:	003e7106 	br	100050f4 <__alt_data_end+0xf80050f4>
10005730:	00801944 	movi	r2,101
10005734:	14407e0e 	bge	r2,r17,10005930 <___vfprintf_internal_r+0x10d0>
10005738:	d9003617 	ldw	r4,216(sp)
1000573c:	d9403817 	ldw	r5,224(sp)
10005740:	000d883a 	mov	r6,zero
10005744:	000f883a 	mov	r7,zero
10005748:	d8c03c15 	stw	r3,240(sp)
1000574c:	da003d15 	stw	r8,244(sp)
10005750:	000ff780 	call	1000ff78 <__eqdf2>
10005754:	d8c03c17 	ldw	r3,240(sp)
10005758:	da003d17 	ldw	r8,244(sp)
1000575c:	1000f71e 	bne	r2,zero,10005b3c <___vfprintf_internal_r+0x12dc>
10005760:	d8801f17 	ldw	r2,124(sp)
10005764:	01040074 	movhi	r4,4097
10005768:	2111bc04 	addi	r4,r4,18160
1000576c:	18c00044 	addi	r3,r3,1
10005770:	10800044 	addi	r2,r2,1
10005774:	41000015 	stw	r4,0(r8)
10005778:	01000044 	movi	r4,1
1000577c:	41000115 	stw	r4,4(r8)
10005780:	d8c02015 	stw	r3,128(sp)
10005784:	d8801f15 	stw	r2,124(sp)
10005788:	010001c4 	movi	r4,7
1000578c:	2082b816 	blt	r4,r2,10006270 <___vfprintf_internal_r+0x1a10>
10005790:	42000204 	addi	r8,r8,8
10005794:	d8802617 	ldw	r2,152(sp)
10005798:	d9403317 	ldw	r5,204(sp)
1000579c:	11400216 	blt	r2,r5,100057a8 <___vfprintf_internal_r+0xf48>
100057a0:	9080004c 	andi	r2,r18,1
100057a4:	103eb326 	beq	r2,zero,10005274 <__alt_data_end+0xf8005274>
100057a8:	d8803717 	ldw	r2,220(sp)
100057ac:	d9003417 	ldw	r4,208(sp)
100057b0:	d9403717 	ldw	r5,220(sp)
100057b4:	1887883a 	add	r3,r3,r2
100057b8:	d8801f17 	ldw	r2,124(sp)
100057bc:	41000015 	stw	r4,0(r8)
100057c0:	41400115 	stw	r5,4(r8)
100057c4:	10800044 	addi	r2,r2,1
100057c8:	d8c02015 	stw	r3,128(sp)
100057cc:	d8801f15 	stw	r2,124(sp)
100057d0:	010001c4 	movi	r4,7
100057d4:	20832916 	blt	r4,r2,1000647c <___vfprintf_internal_r+0x1c1c>
100057d8:	42000204 	addi	r8,r8,8
100057dc:	d8803317 	ldw	r2,204(sp)
100057e0:	143fffc4 	addi	r16,r2,-1
100057e4:	043ea30e 	bge	zero,r16,10005274 <__alt_data_end+0xf8005274>
100057e8:	04400404 	movi	r17,16
100057ec:	d8801f17 	ldw	r2,124(sp)
100057f0:	8c00880e 	bge	r17,r16,10005a14 <___vfprintf_internal_r+0x11b4>
100057f4:	01440074 	movhi	r5,4097
100057f8:	2951bc84 	addi	r5,r5,18162
100057fc:	d9402c15 	stw	r5,176(sp)
10005800:	058001c4 	movi	r22,7
10005804:	dcc02d17 	ldw	r19,180(sp)
10005808:	00000306 	br	10005818 <___vfprintf_internal_r+0xfb8>
1000580c:	42000204 	addi	r8,r8,8
10005810:	843ffc04 	addi	r16,r16,-16
10005814:	8c00820e 	bge	r17,r16,10005a20 <___vfprintf_internal_r+0x11c0>
10005818:	18c00404 	addi	r3,r3,16
1000581c:	10800044 	addi	r2,r2,1
10005820:	45000015 	stw	r20,0(r8)
10005824:	44400115 	stw	r17,4(r8)
10005828:	d8c02015 	stw	r3,128(sp)
1000582c:	d8801f15 	stw	r2,124(sp)
10005830:	b0bff60e 	bge	r22,r2,1000580c <__alt_data_end+0xf800580c>
10005834:	d9801e04 	addi	r6,sp,120
10005838:	b80b883a 	mov	r5,r23
1000583c:	9809883a 	mov	r4,r19
10005840:	000c0400 	call	1000c040 <__sprint_r>
10005844:	103d0a1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005848:	d8c02017 	ldw	r3,128(sp)
1000584c:	d8801f17 	ldw	r2,124(sp)
10005850:	da000404 	addi	r8,sp,16
10005854:	003fee06 	br	10005810 <__alt_data_end+0xf8005810>
10005858:	d9403117 	ldw	r5,196(sp)
1000585c:	d8802917 	ldw	r2,164(sp)
10005860:	28adc83a 	sub	r22,r5,r2
10005864:	05be410e 	bge	zero,r22,1000516c <__alt_data_end+0xf800516c>
10005868:	07000404 	movi	fp,16
1000586c:	d8801f17 	ldw	r2,124(sp)
10005870:	e5838f0e 	bge	fp,r22,100066b0 <___vfprintf_internal_r+0x1e50>
10005874:	01440074 	movhi	r5,4097
10005878:	2951bc84 	addi	r5,r5,18162
1000587c:	dc403015 	stw	r17,192(sp)
10005880:	d9402c15 	stw	r5,176(sp)
10005884:	b023883a 	mov	r17,r22
10005888:	04c001c4 	movi	r19,7
1000588c:	a82d883a 	mov	r22,r21
10005890:	902b883a 	mov	r21,r18
10005894:	8025883a 	mov	r18,r16
10005898:	dc002d17 	ldw	r16,180(sp)
1000589c:	00000306 	br	100058ac <___vfprintf_internal_r+0x104c>
100058a0:	8c7ffc04 	addi	r17,r17,-16
100058a4:	42000204 	addi	r8,r8,8
100058a8:	e440110e 	bge	fp,r17,100058f0 <___vfprintf_internal_r+0x1090>
100058ac:	18c00404 	addi	r3,r3,16
100058b0:	10800044 	addi	r2,r2,1
100058b4:	45000015 	stw	r20,0(r8)
100058b8:	47000115 	stw	fp,4(r8)
100058bc:	d8c02015 	stw	r3,128(sp)
100058c0:	d8801f15 	stw	r2,124(sp)
100058c4:	98bff60e 	bge	r19,r2,100058a0 <__alt_data_end+0xf80058a0>
100058c8:	d9801e04 	addi	r6,sp,120
100058cc:	b80b883a 	mov	r5,r23
100058d0:	8009883a 	mov	r4,r16
100058d4:	000c0400 	call	1000c040 <__sprint_r>
100058d8:	103ce51e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
100058dc:	8c7ffc04 	addi	r17,r17,-16
100058e0:	d8c02017 	ldw	r3,128(sp)
100058e4:	d8801f17 	ldw	r2,124(sp)
100058e8:	da000404 	addi	r8,sp,16
100058ec:	e47fef16 	blt	fp,r17,100058ac <__alt_data_end+0xf80058ac>
100058f0:	9021883a 	mov	r16,r18
100058f4:	a825883a 	mov	r18,r21
100058f8:	b02b883a 	mov	r21,r22
100058fc:	882d883a 	mov	r22,r17
10005900:	dc403017 	ldw	r17,192(sp)
10005904:	d9002c17 	ldw	r4,176(sp)
10005908:	1d87883a 	add	r3,r3,r22
1000590c:	10800044 	addi	r2,r2,1
10005910:	41000015 	stw	r4,0(r8)
10005914:	45800115 	stw	r22,4(r8)
10005918:	d8c02015 	stw	r3,128(sp)
1000591c:	d8801f15 	stw	r2,124(sp)
10005920:	010001c4 	movi	r4,7
10005924:	20818e16 	blt	r4,r2,10005f60 <___vfprintf_internal_r+0x1700>
10005928:	42000204 	addi	r8,r8,8
1000592c:	003e0f06 	br	1000516c <__alt_data_end+0xf800516c>
10005930:	d9403317 	ldw	r5,204(sp)
10005934:	00800044 	movi	r2,1
10005938:	18c00044 	addi	r3,r3,1
1000593c:	1141530e 	bge	r2,r5,10005e8c <___vfprintf_internal_r+0x162c>
10005940:	dc401f17 	ldw	r17,124(sp)
10005944:	00800044 	movi	r2,1
10005948:	40800115 	stw	r2,4(r8)
1000594c:	8c400044 	addi	r17,r17,1
10005950:	44000015 	stw	r16,0(r8)
10005954:	d8c02015 	stw	r3,128(sp)
10005958:	dc401f15 	stw	r17,124(sp)
1000595c:	008001c4 	movi	r2,7
10005960:	14416b16 	blt	r2,r17,10005f10 <___vfprintf_internal_r+0x16b0>
10005964:	42000204 	addi	r8,r8,8
10005968:	d8803717 	ldw	r2,220(sp)
1000596c:	d9003417 	ldw	r4,208(sp)
10005970:	8c400044 	addi	r17,r17,1
10005974:	10c7883a 	add	r3,r2,r3
10005978:	40800115 	stw	r2,4(r8)
1000597c:	41000015 	stw	r4,0(r8)
10005980:	d8c02015 	stw	r3,128(sp)
10005984:	dc401f15 	stw	r17,124(sp)
10005988:	008001c4 	movi	r2,7
1000598c:	14416916 	blt	r2,r17,10005f34 <___vfprintf_internal_r+0x16d4>
10005990:	45800204 	addi	r22,r8,8
10005994:	d9003617 	ldw	r4,216(sp)
10005998:	d9403817 	ldw	r5,224(sp)
1000599c:	000d883a 	mov	r6,zero
100059a0:	000f883a 	mov	r7,zero
100059a4:	d8c03c15 	stw	r3,240(sp)
100059a8:	000ff780 	call	1000ff78 <__eqdf2>
100059ac:	d8c03c17 	ldw	r3,240(sp)
100059b0:	1000bc26 	beq	r2,zero,10005ca4 <___vfprintf_internal_r+0x1444>
100059b4:	d9403317 	ldw	r5,204(sp)
100059b8:	84000044 	addi	r16,r16,1
100059bc:	8c400044 	addi	r17,r17,1
100059c0:	28bfffc4 	addi	r2,r5,-1
100059c4:	1887883a 	add	r3,r3,r2
100059c8:	b0800115 	stw	r2,4(r22)
100059cc:	b4000015 	stw	r16,0(r22)
100059d0:	d8c02015 	stw	r3,128(sp)
100059d4:	dc401f15 	stw	r17,124(sp)
100059d8:	008001c4 	movi	r2,7
100059dc:	14414316 	blt	r2,r17,10005eec <___vfprintf_internal_r+0x168c>
100059e0:	b5800204 	addi	r22,r22,8
100059e4:	d9003a17 	ldw	r4,232(sp)
100059e8:	df0022c4 	addi	fp,sp,139
100059ec:	8c400044 	addi	r17,r17,1
100059f0:	20c7883a 	add	r3,r4,r3
100059f4:	b7000015 	stw	fp,0(r22)
100059f8:	b1000115 	stw	r4,4(r22)
100059fc:	d8c02015 	stw	r3,128(sp)
10005a00:	dc401f15 	stw	r17,124(sp)
10005a04:	008001c4 	movi	r2,7
10005a08:	14400e16 	blt	r2,r17,10005a44 <___vfprintf_internal_r+0x11e4>
10005a0c:	b2000204 	addi	r8,r22,8
10005a10:	003e1806 	br	10005274 <__alt_data_end+0xf8005274>
10005a14:	01040074 	movhi	r4,4097
10005a18:	2111bc84 	addi	r4,r4,18162
10005a1c:	d9002c15 	stw	r4,176(sp)
10005a20:	d9002c17 	ldw	r4,176(sp)
10005a24:	1c07883a 	add	r3,r3,r16
10005a28:	44000115 	stw	r16,4(r8)
10005a2c:	41000015 	stw	r4,0(r8)
10005a30:	10800044 	addi	r2,r2,1
10005a34:	d8c02015 	stw	r3,128(sp)
10005a38:	d8801f15 	stw	r2,124(sp)
10005a3c:	010001c4 	movi	r4,7
10005a40:	20be0b0e 	bge	r4,r2,10005270 <__alt_data_end+0xf8005270>
10005a44:	d9002d17 	ldw	r4,180(sp)
10005a48:	d9801e04 	addi	r6,sp,120
10005a4c:	b80b883a 	mov	r5,r23
10005a50:	000c0400 	call	1000c040 <__sprint_r>
10005a54:	103c861e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005a58:	d8c02017 	ldw	r3,128(sp)
10005a5c:	da000404 	addi	r8,sp,16
10005a60:	003e0406 	br	10005274 <__alt_data_end+0xf8005274>
10005a64:	d9002d17 	ldw	r4,180(sp)
10005a68:	d9801e04 	addi	r6,sp,120
10005a6c:	b80b883a 	mov	r5,r23
10005a70:	000c0400 	call	1000c040 <__sprint_r>
10005a74:	103e3b26 	beq	r2,zero,10005364 <__alt_data_end+0xf8005364>
10005a78:	003c7d06 	br	10004c70 <__alt_data_end+0xf8004c70>
10005a7c:	d9002d17 	ldw	r4,180(sp)
10005a80:	d9801e04 	addi	r6,sp,120
10005a84:	b80b883a 	mov	r5,r23
10005a88:	000c0400 	call	1000c040 <__sprint_r>
10005a8c:	103c781e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005a90:	d8c02017 	ldw	r3,128(sp)
10005a94:	da000404 	addi	r8,sp,16
10005a98:	003de906 	br	10005240 <__alt_data_end+0xf8005240>
10005a9c:	d9002d17 	ldw	r4,180(sp)
10005aa0:	d9801e04 	addi	r6,sp,120
10005aa4:	b80b883a 	mov	r5,r23
10005aa8:	000c0400 	call	1000c040 <__sprint_r>
10005aac:	103c701e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005ab0:	d8c02017 	ldw	r3,128(sp)
10005ab4:	da000404 	addi	r8,sp,16
10005ab8:	003d9b06 	br	10005128 <__alt_data_end+0xf8005128>
10005abc:	d9002d17 	ldw	r4,180(sp)
10005ac0:	d9801e04 	addi	r6,sp,120
10005ac4:	b80b883a 	mov	r5,r23
10005ac8:	000c0400 	call	1000c040 <__sprint_r>
10005acc:	103c681e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005ad0:	d8c02017 	ldw	r3,128(sp)
10005ad4:	da000404 	addi	r8,sp,16
10005ad8:	003da106 	br	10005160 <__alt_data_end+0xf8005160>
10005adc:	d9402a17 	ldw	r5,168(sp)
10005ae0:	d8002785 	stb	zero,158(sp)
10005ae4:	283f0616 	blt	r5,zero,10005700 <__alt_data_end+0xf8005700>
10005ae8:	00ffdfc4 	movi	r3,-129
10005aec:	9d84b03a 	or	r2,r19,r22
10005af0:	90e4703a 	and	r18,r18,r3
10005af4:	103c3b26 	beq	r2,zero,10004be4 <__alt_data_end+0xf8004be4>
10005af8:	0039883a 	mov	fp,zero
10005afc:	003e5806 	br	10005460 <__alt_data_end+0xf8005460>
10005b00:	9080040c 	andi	r2,r18,16
10005b04:	1001b326 	beq	r2,zero,100061d4 <___vfprintf_internal_r+0x1974>
10005b08:	d8c02e17 	ldw	r3,184(sp)
10005b0c:	d9002a17 	ldw	r4,168(sp)
10005b10:	d8002785 	stb	zero,158(sp)
10005b14:	18800104 	addi	r2,r3,4
10005b18:	1cc00017 	ldw	r19,0(r3)
10005b1c:	002d883a 	mov	r22,zero
10005b20:	2001b516 	blt	r4,zero,100061f8 <___vfprintf_internal_r+0x1998>
10005b24:	00ffdfc4 	movi	r3,-129
10005b28:	d8802e15 	stw	r2,184(sp)
10005b2c:	90e4703a 	and	r18,r18,r3
10005b30:	983d0526 	beq	r19,zero,10004f48 <__alt_data_end+0xf8004f48>
10005b34:	0039883a 	mov	fp,zero
10005b38:	003d0806 	br	10004f5c <__alt_data_end+0xf8004f5c>
10005b3c:	dc402617 	ldw	r17,152(sp)
10005b40:	0441d30e 	bge	zero,r17,10006290 <___vfprintf_internal_r+0x1a30>
10005b44:	dc403217 	ldw	r17,200(sp)
10005b48:	d8803317 	ldw	r2,204(sp)
10005b4c:	1440010e 	bge	r2,r17,10005b54 <___vfprintf_internal_r+0x12f4>
10005b50:	1023883a 	mov	r17,r2
10005b54:	04400a0e 	bge	zero,r17,10005b80 <___vfprintf_internal_r+0x1320>
10005b58:	d8801f17 	ldw	r2,124(sp)
10005b5c:	1c47883a 	add	r3,r3,r17
10005b60:	44000015 	stw	r16,0(r8)
10005b64:	10800044 	addi	r2,r2,1
10005b68:	44400115 	stw	r17,4(r8)
10005b6c:	d8c02015 	stw	r3,128(sp)
10005b70:	d8801f15 	stw	r2,124(sp)
10005b74:	010001c4 	movi	r4,7
10005b78:	20826516 	blt	r4,r2,10006510 <___vfprintf_internal_r+0x1cb0>
10005b7c:	42000204 	addi	r8,r8,8
10005b80:	88026116 	blt	r17,zero,10006508 <___vfprintf_internal_r+0x1ca8>
10005b84:	d9003217 	ldw	r4,200(sp)
10005b88:	2463c83a 	sub	r17,r4,r17
10005b8c:	04407b0e 	bge	zero,r17,10005d7c <___vfprintf_internal_r+0x151c>
10005b90:	05800404 	movi	r22,16
10005b94:	d8801f17 	ldw	r2,124(sp)
10005b98:	b4419d0e 	bge	r22,r17,10006210 <___vfprintf_internal_r+0x19b0>
10005b9c:	01040074 	movhi	r4,4097
10005ba0:	2111bc84 	addi	r4,r4,18162
10005ba4:	d9002c15 	stw	r4,176(sp)
10005ba8:	070001c4 	movi	fp,7
10005bac:	dcc02d17 	ldw	r19,180(sp)
10005bb0:	00000306 	br	10005bc0 <___vfprintf_internal_r+0x1360>
10005bb4:	42000204 	addi	r8,r8,8
10005bb8:	8c7ffc04 	addi	r17,r17,-16
10005bbc:	b441970e 	bge	r22,r17,1000621c <___vfprintf_internal_r+0x19bc>
10005bc0:	18c00404 	addi	r3,r3,16
10005bc4:	10800044 	addi	r2,r2,1
10005bc8:	45000015 	stw	r20,0(r8)
10005bcc:	45800115 	stw	r22,4(r8)
10005bd0:	d8c02015 	stw	r3,128(sp)
10005bd4:	d8801f15 	stw	r2,124(sp)
10005bd8:	e0bff60e 	bge	fp,r2,10005bb4 <__alt_data_end+0xf8005bb4>
10005bdc:	d9801e04 	addi	r6,sp,120
10005be0:	b80b883a 	mov	r5,r23
10005be4:	9809883a 	mov	r4,r19
10005be8:	000c0400 	call	1000c040 <__sprint_r>
10005bec:	103c201e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005bf0:	d8c02017 	ldw	r3,128(sp)
10005bf4:	d8801f17 	ldw	r2,124(sp)
10005bf8:	da000404 	addi	r8,sp,16
10005bfc:	003fee06 	br	10005bb8 <__alt_data_end+0xf8005bb8>
10005c00:	d9002d17 	ldw	r4,180(sp)
10005c04:	d9801e04 	addi	r6,sp,120
10005c08:	b80b883a 	mov	r5,r23
10005c0c:	000c0400 	call	1000c040 <__sprint_r>
10005c10:	103c171e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005c14:	d8c02017 	ldw	r3,128(sp)
10005c18:	df002787 	ldb	fp,158(sp)
10005c1c:	da000404 	addi	r8,sp,16
10005c20:	003d3406 	br	100050f4 <__alt_data_end+0xf80050f4>
10005c24:	9080040c 	andi	r2,r18,16
10005c28:	10016126 	beq	r2,zero,100061b0 <___vfprintf_internal_r+0x1950>
10005c2c:	d9402e17 	ldw	r5,184(sp)
10005c30:	2cc00017 	ldw	r19,0(r5)
10005c34:	29400104 	addi	r5,r5,4
10005c38:	d9402e15 	stw	r5,184(sp)
10005c3c:	982dd7fa 	srai	r22,r19,31
10005c40:	b005883a 	mov	r2,r22
10005c44:	003c5a06 	br	10004db0 <__alt_data_end+0xf8004db0>
10005c48:	9080040c 	andi	r2,r18,16
10005c4c:	10003526 	beq	r2,zero,10005d24 <___vfprintf_internal_r+0x14c4>
10005c50:	d8c02e17 	ldw	r3,184(sp)
10005c54:	d9002a17 	ldw	r4,168(sp)
10005c58:	d8002785 	stb	zero,158(sp)
10005c5c:	18800104 	addi	r2,r3,4
10005c60:	1cc00017 	ldw	r19,0(r3)
10005c64:	002d883a 	mov	r22,zero
10005c68:	20003716 	blt	r4,zero,10005d48 <___vfprintf_internal_r+0x14e8>
10005c6c:	00ffdfc4 	movi	r3,-129
10005c70:	d8802e15 	stw	r2,184(sp)
10005c74:	90e4703a 	and	r18,r18,r3
10005c78:	0039883a 	mov	fp,zero
10005c7c:	983dd426 	beq	r19,zero,100053d0 <__alt_data_end+0xf80053d0>
10005c80:	00800244 	movi	r2,9
10005c84:	14fc5336 	bltu	r2,r19,10004dd4 <__alt_data_end+0xf8004dd4>
10005c88:	d8c02817 	ldw	r3,160(sp)
10005c8c:	dc001dc4 	addi	r16,sp,119
10005c90:	9cc00c04 	addi	r19,r19,48
10005c94:	1c07c83a 	sub	r3,r3,r16
10005c98:	dcc01dc5 	stb	r19,119(sp)
10005c9c:	d8c02b15 	stw	r3,172(sp)
10005ca0:	003cc606 	br	10004fbc <__alt_data_end+0xf8004fbc>
10005ca4:	d8803317 	ldw	r2,204(sp)
10005ca8:	143fffc4 	addi	r16,r2,-1
10005cac:	043f4d0e 	bge	zero,r16,100059e4 <__alt_data_end+0xf80059e4>
10005cb0:	07000404 	movi	fp,16
10005cb4:	e400810e 	bge	fp,r16,10005ebc <___vfprintf_internal_r+0x165c>
10005cb8:	01440074 	movhi	r5,4097
10005cbc:	2951bc84 	addi	r5,r5,18162
10005cc0:	d9402c15 	stw	r5,176(sp)
10005cc4:	01c001c4 	movi	r7,7
10005cc8:	dcc02d17 	ldw	r19,180(sp)
10005ccc:	00000306 	br	10005cdc <___vfprintf_internal_r+0x147c>
10005cd0:	b5800204 	addi	r22,r22,8
10005cd4:	843ffc04 	addi	r16,r16,-16
10005cd8:	e4007b0e 	bge	fp,r16,10005ec8 <___vfprintf_internal_r+0x1668>
10005cdc:	18c00404 	addi	r3,r3,16
10005ce0:	8c400044 	addi	r17,r17,1
10005ce4:	b5000015 	stw	r20,0(r22)
10005ce8:	b7000115 	stw	fp,4(r22)
10005cec:	d8c02015 	stw	r3,128(sp)
10005cf0:	dc401f15 	stw	r17,124(sp)
10005cf4:	3c7ff60e 	bge	r7,r17,10005cd0 <__alt_data_end+0xf8005cd0>
10005cf8:	d9801e04 	addi	r6,sp,120
10005cfc:	b80b883a 	mov	r5,r23
10005d00:	9809883a 	mov	r4,r19
10005d04:	d9c03c15 	stw	r7,240(sp)
10005d08:	000c0400 	call	1000c040 <__sprint_r>
10005d0c:	d9c03c17 	ldw	r7,240(sp)
10005d10:	103bd71e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005d14:	d8c02017 	ldw	r3,128(sp)
10005d18:	dc401f17 	ldw	r17,124(sp)
10005d1c:	dd800404 	addi	r22,sp,16
10005d20:	003fec06 	br	10005cd4 <__alt_data_end+0xf8005cd4>
10005d24:	9080100c 	andi	r2,r18,64
10005d28:	d8002785 	stb	zero,158(sp)
10005d2c:	10010e26 	beq	r2,zero,10006168 <___vfprintf_internal_r+0x1908>
10005d30:	d9402e17 	ldw	r5,184(sp)
10005d34:	d8c02a17 	ldw	r3,168(sp)
10005d38:	002d883a 	mov	r22,zero
10005d3c:	28800104 	addi	r2,r5,4
10005d40:	2cc0000b 	ldhu	r19,0(r5)
10005d44:	183fc90e 	bge	r3,zero,10005c6c <__alt_data_end+0xf8005c6c>
10005d48:	d8802e15 	stw	r2,184(sp)
10005d4c:	0039883a 	mov	fp,zero
10005d50:	9d84b03a 	or	r2,r19,r22
10005d54:	103c1e1e 	bne	r2,zero,10004dd0 <__alt_data_end+0xf8004dd0>
10005d58:	00800044 	movi	r2,1
10005d5c:	003e6c06 	br	10005710 <__alt_data_end+0xf8005710>
10005d60:	d9002d17 	ldw	r4,180(sp)
10005d64:	d9801e04 	addi	r6,sp,120
10005d68:	b80b883a 	mov	r5,r23
10005d6c:	000c0400 	call	1000c040 <__sprint_r>
10005d70:	103bbf1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005d74:	d8c02017 	ldw	r3,128(sp)
10005d78:	da000404 	addi	r8,sp,16
10005d7c:	d9003217 	ldw	r4,200(sp)
10005d80:	d8802617 	ldw	r2,152(sp)
10005d84:	d9403317 	ldw	r5,204(sp)
10005d88:	8123883a 	add	r17,r16,r4
10005d8c:	11400216 	blt	r2,r5,10005d98 <___vfprintf_internal_r+0x1538>
10005d90:	9100004c 	andi	r4,r18,1
10005d94:	20000d26 	beq	r4,zero,10005dcc <___vfprintf_internal_r+0x156c>
10005d98:	d9003717 	ldw	r4,220(sp)
10005d9c:	d9403417 	ldw	r5,208(sp)
10005da0:	1907883a 	add	r3,r3,r4
10005da4:	d9001f17 	ldw	r4,124(sp)
10005da8:	41400015 	stw	r5,0(r8)
10005dac:	d9403717 	ldw	r5,220(sp)
10005db0:	21000044 	addi	r4,r4,1
10005db4:	d8c02015 	stw	r3,128(sp)
10005db8:	41400115 	stw	r5,4(r8)
10005dbc:	d9001f15 	stw	r4,124(sp)
10005dc0:	014001c4 	movi	r5,7
10005dc4:	2901e816 	blt	r5,r4,10006568 <___vfprintf_internal_r+0x1d08>
10005dc8:	42000204 	addi	r8,r8,8
10005dcc:	d9003317 	ldw	r4,204(sp)
10005dd0:	8121883a 	add	r16,r16,r4
10005dd4:	2085c83a 	sub	r2,r4,r2
10005dd8:	8461c83a 	sub	r16,r16,r17
10005ddc:	1400010e 	bge	r2,r16,10005de4 <___vfprintf_internal_r+0x1584>
10005de0:	1021883a 	mov	r16,r2
10005de4:	04000a0e 	bge	zero,r16,10005e10 <___vfprintf_internal_r+0x15b0>
10005de8:	d9001f17 	ldw	r4,124(sp)
10005dec:	1c07883a 	add	r3,r3,r16
10005df0:	44400015 	stw	r17,0(r8)
10005df4:	21000044 	addi	r4,r4,1
10005df8:	44000115 	stw	r16,4(r8)
10005dfc:	d8c02015 	stw	r3,128(sp)
10005e00:	d9001f15 	stw	r4,124(sp)
10005e04:	014001c4 	movi	r5,7
10005e08:	2901fb16 	blt	r5,r4,100065f8 <___vfprintf_internal_r+0x1d98>
10005e0c:	42000204 	addi	r8,r8,8
10005e10:	8001f716 	blt	r16,zero,100065f0 <___vfprintf_internal_r+0x1d90>
10005e14:	1421c83a 	sub	r16,r2,r16
10005e18:	043d160e 	bge	zero,r16,10005274 <__alt_data_end+0xf8005274>
10005e1c:	04400404 	movi	r17,16
10005e20:	d8801f17 	ldw	r2,124(sp)
10005e24:	8c3efb0e 	bge	r17,r16,10005a14 <__alt_data_end+0xf8005a14>
10005e28:	01440074 	movhi	r5,4097
10005e2c:	2951bc84 	addi	r5,r5,18162
10005e30:	d9402c15 	stw	r5,176(sp)
10005e34:	058001c4 	movi	r22,7
10005e38:	dcc02d17 	ldw	r19,180(sp)
10005e3c:	00000306 	br	10005e4c <___vfprintf_internal_r+0x15ec>
10005e40:	42000204 	addi	r8,r8,8
10005e44:	843ffc04 	addi	r16,r16,-16
10005e48:	8c3ef50e 	bge	r17,r16,10005a20 <__alt_data_end+0xf8005a20>
10005e4c:	18c00404 	addi	r3,r3,16
10005e50:	10800044 	addi	r2,r2,1
10005e54:	45000015 	stw	r20,0(r8)
10005e58:	44400115 	stw	r17,4(r8)
10005e5c:	d8c02015 	stw	r3,128(sp)
10005e60:	d8801f15 	stw	r2,124(sp)
10005e64:	b0bff60e 	bge	r22,r2,10005e40 <__alt_data_end+0xf8005e40>
10005e68:	d9801e04 	addi	r6,sp,120
10005e6c:	b80b883a 	mov	r5,r23
10005e70:	9809883a 	mov	r4,r19
10005e74:	000c0400 	call	1000c040 <__sprint_r>
10005e78:	103b7d1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005e7c:	d8c02017 	ldw	r3,128(sp)
10005e80:	d8801f17 	ldw	r2,124(sp)
10005e84:	da000404 	addi	r8,sp,16
10005e88:	003fee06 	br	10005e44 <__alt_data_end+0xf8005e44>
10005e8c:	9088703a 	and	r4,r18,r2
10005e90:	203eab1e 	bne	r4,zero,10005940 <__alt_data_end+0xf8005940>
10005e94:	dc401f17 	ldw	r17,124(sp)
10005e98:	40800115 	stw	r2,4(r8)
10005e9c:	44000015 	stw	r16,0(r8)
10005ea0:	8c400044 	addi	r17,r17,1
10005ea4:	d8c02015 	stw	r3,128(sp)
10005ea8:	dc401f15 	stw	r17,124(sp)
10005eac:	008001c4 	movi	r2,7
10005eb0:	14400e16 	blt	r2,r17,10005eec <___vfprintf_internal_r+0x168c>
10005eb4:	45800204 	addi	r22,r8,8
10005eb8:	003eca06 	br	100059e4 <__alt_data_end+0xf80059e4>
10005ebc:	01040074 	movhi	r4,4097
10005ec0:	2111bc84 	addi	r4,r4,18162
10005ec4:	d9002c15 	stw	r4,176(sp)
10005ec8:	d8802c17 	ldw	r2,176(sp)
10005ecc:	1c07883a 	add	r3,r3,r16
10005ed0:	8c400044 	addi	r17,r17,1
10005ed4:	b0800015 	stw	r2,0(r22)
10005ed8:	b4000115 	stw	r16,4(r22)
10005edc:	d8c02015 	stw	r3,128(sp)
10005ee0:	dc401f15 	stw	r17,124(sp)
10005ee4:	008001c4 	movi	r2,7
10005ee8:	147ebd0e 	bge	r2,r17,100059e0 <__alt_data_end+0xf80059e0>
10005eec:	d9002d17 	ldw	r4,180(sp)
10005ef0:	d9801e04 	addi	r6,sp,120
10005ef4:	b80b883a 	mov	r5,r23
10005ef8:	000c0400 	call	1000c040 <__sprint_r>
10005efc:	103b5c1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005f00:	d8c02017 	ldw	r3,128(sp)
10005f04:	dc401f17 	ldw	r17,124(sp)
10005f08:	dd800404 	addi	r22,sp,16
10005f0c:	003eb506 	br	100059e4 <__alt_data_end+0xf80059e4>
10005f10:	d9002d17 	ldw	r4,180(sp)
10005f14:	d9801e04 	addi	r6,sp,120
10005f18:	b80b883a 	mov	r5,r23
10005f1c:	000c0400 	call	1000c040 <__sprint_r>
10005f20:	103b531e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005f24:	d8c02017 	ldw	r3,128(sp)
10005f28:	dc401f17 	ldw	r17,124(sp)
10005f2c:	da000404 	addi	r8,sp,16
10005f30:	003e8d06 	br	10005968 <__alt_data_end+0xf8005968>
10005f34:	d9002d17 	ldw	r4,180(sp)
10005f38:	d9801e04 	addi	r6,sp,120
10005f3c:	b80b883a 	mov	r5,r23
10005f40:	000c0400 	call	1000c040 <__sprint_r>
10005f44:	103b4a1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005f48:	d8c02017 	ldw	r3,128(sp)
10005f4c:	dc401f17 	ldw	r17,124(sp)
10005f50:	dd800404 	addi	r22,sp,16
10005f54:	003e8f06 	br	10005994 <__alt_data_end+0xf8005994>
10005f58:	0027883a 	mov	r19,zero
10005f5c:	003f4a06 	br	10005c88 <__alt_data_end+0xf8005c88>
10005f60:	d9002d17 	ldw	r4,180(sp)
10005f64:	d9801e04 	addi	r6,sp,120
10005f68:	b80b883a 	mov	r5,r23
10005f6c:	000c0400 	call	1000c040 <__sprint_r>
10005f70:	103b3f1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10005f74:	d8c02017 	ldw	r3,128(sp)
10005f78:	da000404 	addi	r8,sp,16
10005f7c:	003c7b06 	br	1000516c <__alt_data_end+0xf800516c>
10005f80:	d9402a17 	ldw	r5,168(sp)
10005f84:	04e7c83a 	sub	r19,zero,r19
10005f88:	07000b44 	movi	fp,45
10005f8c:	9804c03a 	cmpne	r2,r19,zero
10005f90:	05adc83a 	sub	r22,zero,r22
10005f94:	df002785 	stb	fp,158(sp)
10005f98:	b0adc83a 	sub	r22,r22,r2
10005f9c:	28017b16 	blt	r5,zero,1000658c <___vfprintf_internal_r+0x1d2c>
10005fa0:	00bfdfc4 	movi	r2,-129
10005fa4:	90a4703a 	and	r18,r18,r2
10005fa8:	003b8906 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10005fac:	d9003617 	ldw	r4,216(sp)
10005fb0:	d9403817 	ldw	r5,224(sp)
10005fb4:	da003d15 	stw	r8,244(sp)
10005fb8:	000bc640 	call	1000bc64 <__fpclassifyd>
10005fbc:	da003d17 	ldw	r8,244(sp)
10005fc0:	1000f026 	beq	r2,zero,10006384 <___vfprintf_internal_r+0x1b24>
10005fc4:	d9002a17 	ldw	r4,168(sp)
10005fc8:	05bff7c4 	movi	r22,-33
10005fcc:	00bfffc4 	movi	r2,-1
10005fd0:	8dac703a 	and	r22,r17,r22
10005fd4:	20820026 	beq	r4,r2,100067d8 <___vfprintf_internal_r+0x1f78>
10005fd8:	008011c4 	movi	r2,71
10005fdc:	b081f726 	beq	r22,r2,100067bc <___vfprintf_internal_r+0x1f5c>
10005fe0:	d9003817 	ldw	r4,224(sp)
10005fe4:	90c04014 	ori	r3,r18,256
10005fe8:	d8c02c15 	stw	r3,176(sp)
10005fec:	20021516 	blt	r4,zero,10006844 <___vfprintf_internal_r+0x1fe4>
10005ff0:	dcc03817 	ldw	r19,224(sp)
10005ff4:	d8002905 	stb	zero,164(sp)
10005ff8:	00801984 	movi	r2,102
10005ffc:	8881f926 	beq	r17,r2,100067e4 <___vfprintf_internal_r+0x1f84>
10006000:	00801184 	movi	r2,70
10006004:	88821c26 	beq	r17,r2,10006878 <___vfprintf_internal_r+0x2018>
10006008:	00801144 	movi	r2,69
1000600c:	b081ef26 	beq	r22,r2,100067cc <___vfprintf_internal_r+0x1f6c>
10006010:	d8c02a17 	ldw	r3,168(sp)
10006014:	d8802104 	addi	r2,sp,132
10006018:	d8800315 	stw	r2,12(sp)
1000601c:	d9403617 	ldw	r5,216(sp)
10006020:	d8802504 	addi	r2,sp,148
10006024:	d9002d17 	ldw	r4,180(sp)
10006028:	d8800215 	stw	r2,8(sp)
1000602c:	d8802604 	addi	r2,sp,152
10006030:	d8c00015 	stw	r3,0(sp)
10006034:	d8800115 	stw	r2,4(sp)
10006038:	01c00084 	movi	r7,2
1000603c:	980d883a 	mov	r6,r19
10006040:	d8c03c15 	stw	r3,240(sp)
10006044:	da003d15 	stw	r8,244(sp)
10006048:	0006f900 	call	10006f90 <_dtoa_r>
1000604c:	1021883a 	mov	r16,r2
10006050:	008019c4 	movi	r2,103
10006054:	d8c03c17 	ldw	r3,240(sp)
10006058:	da003d17 	ldw	r8,244(sp)
1000605c:	88817126 	beq	r17,r2,10006624 <___vfprintf_internal_r+0x1dc4>
10006060:	008011c4 	movi	r2,71
10006064:	88829126 	beq	r17,r2,10006aac <___vfprintf_internal_r+0x224c>
10006068:	80f9883a 	add	fp,r16,r3
1000606c:	d9003617 	ldw	r4,216(sp)
10006070:	000d883a 	mov	r6,zero
10006074:	000f883a 	mov	r7,zero
10006078:	980b883a 	mov	r5,r19
1000607c:	da003d15 	stw	r8,244(sp)
10006080:	000ff780 	call	1000ff78 <__eqdf2>
10006084:	da003d17 	ldw	r8,244(sp)
10006088:	10018d26 	beq	r2,zero,100066c0 <___vfprintf_internal_r+0x1e60>
1000608c:	d8802117 	ldw	r2,132(sp)
10006090:	1700062e 	bgeu	r2,fp,100060ac <___vfprintf_internal_r+0x184c>
10006094:	01000c04 	movi	r4,48
10006098:	10c00044 	addi	r3,r2,1
1000609c:	d8c02115 	stw	r3,132(sp)
100060a0:	11000005 	stb	r4,0(r2)
100060a4:	d8802117 	ldw	r2,132(sp)
100060a8:	173ffb36 	bltu	r2,fp,10006098 <__alt_data_end+0xf8006098>
100060ac:	1405c83a 	sub	r2,r2,r16
100060b0:	d8803315 	stw	r2,204(sp)
100060b4:	008011c4 	movi	r2,71
100060b8:	b0817626 	beq	r22,r2,10006694 <___vfprintf_internal_r+0x1e34>
100060bc:	00801944 	movi	r2,101
100060c0:	1442800e 	bge	r2,r17,10006ac4 <___vfprintf_internal_r+0x2264>
100060c4:	d8c02617 	ldw	r3,152(sp)
100060c8:	00801984 	movi	r2,102
100060cc:	d8c03215 	stw	r3,200(sp)
100060d0:	8881fe26 	beq	r17,r2,100068cc <___vfprintf_internal_r+0x206c>
100060d4:	d8c03217 	ldw	r3,200(sp)
100060d8:	d9003317 	ldw	r4,204(sp)
100060dc:	1901dd16 	blt	r3,r4,10006854 <___vfprintf_internal_r+0x1ff4>
100060e0:	9480004c 	andi	r18,r18,1
100060e4:	90022b1e 	bne	r18,zero,10006994 <___vfprintf_internal_r+0x2134>
100060e8:	1805883a 	mov	r2,r3
100060ec:	18028316 	blt	r3,zero,10006afc <___vfprintf_internal_r+0x229c>
100060f0:	d8c03217 	ldw	r3,200(sp)
100060f4:	044019c4 	movi	r17,103
100060f8:	d8c02b15 	stw	r3,172(sp)
100060fc:	df002907 	ldb	fp,164(sp)
10006100:	e001531e 	bne	fp,zero,10006650 <___vfprintf_internal_r+0x1df0>
10006104:	df002783 	ldbu	fp,158(sp)
10006108:	d8802915 	stw	r2,164(sp)
1000610c:	dc802c17 	ldw	r18,176(sp)
10006110:	d8002a15 	stw	zero,168(sp)
10006114:	003baf06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
10006118:	d8c02e17 	ldw	r3,184(sp)
1000611c:	d9002e17 	ldw	r4,184(sp)
10006120:	d9402e17 	ldw	r5,184(sp)
10006124:	18c00017 	ldw	r3,0(r3)
10006128:	21000117 	ldw	r4,4(r4)
1000612c:	29400204 	addi	r5,r5,8
10006130:	d8c03615 	stw	r3,216(sp)
10006134:	d9003815 	stw	r4,224(sp)
10006138:	d9402e15 	stw	r5,184(sp)
1000613c:	003b5006 	br	10004e80 <__alt_data_end+0xf8004e80>
10006140:	ac400007 	ldb	r17,0(r21)
10006144:	003a2806 	br	100049e8 <__alt_data_end+0xf80049e8>
10006148:	9080100c 	andi	r2,r18,64
1000614c:	1000a826 	beq	r2,zero,100063f0 <___vfprintf_internal_r+0x1b90>
10006150:	d8c02e17 	ldw	r3,184(sp)
10006154:	002d883a 	mov	r22,zero
10006158:	1cc0000b 	ldhu	r19,0(r3)
1000615c:	18c00104 	addi	r3,r3,4
10006160:	d8c02e15 	stw	r3,184(sp)
10006164:	003caf06 	br	10005424 <__alt_data_end+0xf8005424>
10006168:	d9002e17 	ldw	r4,184(sp)
1000616c:	d9402a17 	ldw	r5,168(sp)
10006170:	002d883a 	mov	r22,zero
10006174:	20800104 	addi	r2,r4,4
10006178:	24c00017 	ldw	r19,0(r4)
1000617c:	283ebb0e 	bge	r5,zero,10005c6c <__alt_data_end+0xf8005c6c>
10006180:	003ef106 	br	10005d48 <__alt_data_end+0xf8005d48>
10006184:	9080040c 	andi	r2,r18,16
10006188:	1000921e 	bne	r2,zero,100063d4 <___vfprintf_internal_r+0x1b74>
1000618c:	9480100c 	andi	r18,r18,64
10006190:	90013926 	beq	r18,zero,10006678 <___vfprintf_internal_r+0x1e18>
10006194:	d9402e17 	ldw	r5,184(sp)
10006198:	d8c02f17 	ldw	r3,188(sp)
1000619c:	28800017 	ldw	r2,0(r5)
100061a0:	29400104 	addi	r5,r5,4
100061a4:	d9402e15 	stw	r5,184(sp)
100061a8:	10c0000d 	sth	r3,0(r2)
100061ac:	0039e406 	br	10004940 <__alt_data_end+0xf8004940>
100061b0:	9080100c 	andi	r2,r18,64
100061b4:	10008026 	beq	r2,zero,100063b8 <___vfprintf_internal_r+0x1b58>
100061b8:	d8802e17 	ldw	r2,184(sp)
100061bc:	14c0000f 	ldh	r19,0(r2)
100061c0:	10800104 	addi	r2,r2,4
100061c4:	d8802e15 	stw	r2,184(sp)
100061c8:	982dd7fa 	srai	r22,r19,31
100061cc:	b005883a 	mov	r2,r22
100061d0:	003af706 	br	10004db0 <__alt_data_end+0xf8004db0>
100061d4:	9080100c 	andi	r2,r18,64
100061d8:	d8002785 	stb	zero,158(sp)
100061dc:	10008a1e 	bne	r2,zero,10006408 <___vfprintf_internal_r+0x1ba8>
100061e0:	d9002e17 	ldw	r4,184(sp)
100061e4:	d9402a17 	ldw	r5,168(sp)
100061e8:	002d883a 	mov	r22,zero
100061ec:	20800104 	addi	r2,r4,4
100061f0:	24c00017 	ldw	r19,0(r4)
100061f4:	283e4b0e 	bge	r5,zero,10005b24 <__alt_data_end+0xf8005b24>
100061f8:	9d86b03a 	or	r3,r19,r22
100061fc:	d8802e15 	stw	r2,184(sp)
10006200:	183e4c1e 	bne	r3,zero,10005b34 <__alt_data_end+0xf8005b34>
10006204:	0039883a 	mov	fp,zero
10006208:	0005883a 	mov	r2,zero
1000620c:	003d4006 	br	10005710 <__alt_data_end+0xf8005710>
10006210:	01440074 	movhi	r5,4097
10006214:	2951bc84 	addi	r5,r5,18162
10006218:	d9402c15 	stw	r5,176(sp)
1000621c:	d9402c17 	ldw	r5,176(sp)
10006220:	1c47883a 	add	r3,r3,r17
10006224:	10800044 	addi	r2,r2,1
10006228:	41400015 	stw	r5,0(r8)
1000622c:	44400115 	stw	r17,4(r8)
10006230:	d8c02015 	stw	r3,128(sp)
10006234:	d8801f15 	stw	r2,124(sp)
10006238:	010001c4 	movi	r4,7
1000623c:	20bec816 	blt	r4,r2,10005d60 <__alt_data_end+0xf8005d60>
10006240:	42000204 	addi	r8,r8,8
10006244:	003ecd06 	br	10005d7c <__alt_data_end+0xf8005d7c>
10006248:	d9002a17 	ldw	r4,168(sp)
1000624c:	d8002785 	stb	zero,158(sp)
10006250:	203d2d16 	blt	r4,zero,10005708 <__alt_data_end+0xf8005708>
10006254:	00bfdfc4 	movi	r2,-129
10006258:	90a4703a 	and	r18,r18,r2
1000625c:	003a6106 	br	10004be4 <__alt_data_end+0xf8004be4>
10006260:	01040074 	movhi	r4,4097
10006264:	2111bc84 	addi	r4,r4,18162
10006268:	d9002c15 	stw	r4,176(sp)
1000626c:	003bea06 	br	10005218 <__alt_data_end+0xf8005218>
10006270:	d9002d17 	ldw	r4,180(sp)
10006274:	d9801e04 	addi	r6,sp,120
10006278:	b80b883a 	mov	r5,r23
1000627c:	000c0400 	call	1000c040 <__sprint_r>
10006280:	103a7b1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10006284:	d8c02017 	ldw	r3,128(sp)
10006288:	da000404 	addi	r8,sp,16
1000628c:	003d4106 	br	10005794 <__alt_data_end+0xf8005794>
10006290:	d8801f17 	ldw	r2,124(sp)
10006294:	01440074 	movhi	r5,4097
10006298:	01000044 	movi	r4,1
1000629c:	18c00044 	addi	r3,r3,1
100062a0:	10800044 	addi	r2,r2,1
100062a4:	2951bc04 	addi	r5,r5,18160
100062a8:	41000115 	stw	r4,4(r8)
100062ac:	41400015 	stw	r5,0(r8)
100062b0:	d8c02015 	stw	r3,128(sp)
100062b4:	d8801f15 	stw	r2,124(sp)
100062b8:	010001c4 	movi	r4,7
100062bc:	20805c16 	blt	r4,r2,10006430 <___vfprintf_internal_r+0x1bd0>
100062c0:	42000204 	addi	r8,r8,8
100062c4:	8800041e 	bne	r17,zero,100062d8 <___vfprintf_internal_r+0x1a78>
100062c8:	d8803317 	ldw	r2,204(sp)
100062cc:	1000021e 	bne	r2,zero,100062d8 <___vfprintf_internal_r+0x1a78>
100062d0:	9080004c 	andi	r2,r18,1
100062d4:	103be726 	beq	r2,zero,10005274 <__alt_data_end+0xf8005274>
100062d8:	d9003717 	ldw	r4,220(sp)
100062dc:	d8801f17 	ldw	r2,124(sp)
100062e0:	d9403417 	ldw	r5,208(sp)
100062e4:	20c7883a 	add	r3,r4,r3
100062e8:	10800044 	addi	r2,r2,1
100062ec:	41000115 	stw	r4,4(r8)
100062f0:	41400015 	stw	r5,0(r8)
100062f4:	d8c02015 	stw	r3,128(sp)
100062f8:	d8801f15 	stw	r2,124(sp)
100062fc:	010001c4 	movi	r4,7
10006300:	20812116 	blt	r4,r2,10006788 <___vfprintf_internal_r+0x1f28>
10006304:	42000204 	addi	r8,r8,8
10006308:	0463c83a 	sub	r17,zero,r17
1000630c:	0440730e 	bge	zero,r17,100064dc <___vfprintf_internal_r+0x1c7c>
10006310:	05800404 	movi	r22,16
10006314:	b440860e 	bge	r22,r17,10006530 <___vfprintf_internal_r+0x1cd0>
10006318:	01440074 	movhi	r5,4097
1000631c:	2951bc84 	addi	r5,r5,18162
10006320:	d9402c15 	stw	r5,176(sp)
10006324:	070001c4 	movi	fp,7
10006328:	dcc02d17 	ldw	r19,180(sp)
1000632c:	00000306 	br	1000633c <___vfprintf_internal_r+0x1adc>
10006330:	42000204 	addi	r8,r8,8
10006334:	8c7ffc04 	addi	r17,r17,-16
10006338:	b440800e 	bge	r22,r17,1000653c <___vfprintf_internal_r+0x1cdc>
1000633c:	18c00404 	addi	r3,r3,16
10006340:	10800044 	addi	r2,r2,1
10006344:	45000015 	stw	r20,0(r8)
10006348:	45800115 	stw	r22,4(r8)
1000634c:	d8c02015 	stw	r3,128(sp)
10006350:	d8801f15 	stw	r2,124(sp)
10006354:	e0bff60e 	bge	fp,r2,10006330 <__alt_data_end+0xf8006330>
10006358:	d9801e04 	addi	r6,sp,120
1000635c:	b80b883a 	mov	r5,r23
10006360:	9809883a 	mov	r4,r19
10006364:	000c0400 	call	1000c040 <__sprint_r>
10006368:	103a411e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
1000636c:	d8c02017 	ldw	r3,128(sp)
10006370:	d8801f17 	ldw	r2,124(sp)
10006374:	da000404 	addi	r8,sp,16
10006378:	003fee06 	br	10006334 <__alt_data_end+0xf8006334>
1000637c:	00bfffc4 	movi	r2,-1
10006380:	003a3f06 	br	10004c80 <__alt_data_end+0xf8004c80>
10006384:	008011c4 	movi	r2,71
10006388:	1440b816 	blt	r2,r17,1000666c <___vfprintf_internal_r+0x1e0c>
1000638c:	04040074 	movhi	r16,4097
10006390:	8411ae04 	addi	r16,r16,18104
10006394:	00c000c4 	movi	r3,3
10006398:	00bfdfc4 	movi	r2,-129
1000639c:	d8c02915 	stw	r3,164(sp)
100063a0:	90a4703a 	and	r18,r18,r2
100063a4:	df002783 	ldbu	fp,158(sp)
100063a8:	d8c02b15 	stw	r3,172(sp)
100063ac:	d8002a15 	stw	zero,168(sp)
100063b0:	d8003215 	stw	zero,200(sp)
100063b4:	003b0706 	br	10004fd4 <__alt_data_end+0xf8004fd4>
100063b8:	d8c02e17 	ldw	r3,184(sp)
100063bc:	1cc00017 	ldw	r19,0(r3)
100063c0:	18c00104 	addi	r3,r3,4
100063c4:	d8c02e15 	stw	r3,184(sp)
100063c8:	982dd7fa 	srai	r22,r19,31
100063cc:	b005883a 	mov	r2,r22
100063d0:	003a7706 	br	10004db0 <__alt_data_end+0xf8004db0>
100063d4:	d8c02e17 	ldw	r3,184(sp)
100063d8:	d9002f17 	ldw	r4,188(sp)
100063dc:	18800017 	ldw	r2,0(r3)
100063e0:	18c00104 	addi	r3,r3,4
100063e4:	d8c02e15 	stw	r3,184(sp)
100063e8:	11000015 	stw	r4,0(r2)
100063ec:	00395406 	br	10004940 <__alt_data_end+0xf8004940>
100063f0:	d9002e17 	ldw	r4,184(sp)
100063f4:	002d883a 	mov	r22,zero
100063f8:	24c00017 	ldw	r19,0(r4)
100063fc:	21000104 	addi	r4,r4,4
10006400:	d9002e15 	stw	r4,184(sp)
10006404:	003c0706 	br	10005424 <__alt_data_end+0xf8005424>
10006408:	d9402e17 	ldw	r5,184(sp)
1000640c:	d8c02a17 	ldw	r3,168(sp)
10006410:	002d883a 	mov	r22,zero
10006414:	28800104 	addi	r2,r5,4
10006418:	2cc0000b 	ldhu	r19,0(r5)
1000641c:	183dc10e 	bge	r3,zero,10005b24 <__alt_data_end+0xf8005b24>
10006420:	003f7506 	br	100061f8 <__alt_data_end+0xf80061f8>
10006424:	04040074 	movhi	r16,4097
10006428:	8411ac04 	addi	r16,r16,18096
1000642c:	003aa706 	br	10004ecc <__alt_data_end+0xf8004ecc>
10006430:	d9002d17 	ldw	r4,180(sp)
10006434:	d9801e04 	addi	r6,sp,120
10006438:	b80b883a 	mov	r5,r23
1000643c:	000c0400 	call	1000c040 <__sprint_r>
10006440:	103a0b1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10006444:	dc402617 	ldw	r17,152(sp)
10006448:	d8c02017 	ldw	r3,128(sp)
1000644c:	da000404 	addi	r8,sp,16
10006450:	003f9c06 	br	100062c4 <__alt_data_end+0xf80062c4>
10006454:	ac400043 	ldbu	r17,1(r21)
10006458:	84000814 	ori	r16,r16,32
1000645c:	ad400044 	addi	r21,r21,1
10006460:	8c403fcc 	andi	r17,r17,255
10006464:	8c40201c 	xori	r17,r17,128
10006468:	8c7fe004 	addi	r17,r17,-128
1000646c:	00395e06 	br	100049e8 <__alt_data_end+0xf80049e8>
10006470:	d8c02e15 	stw	r3,184(sp)
10006474:	0039883a 	mov	fp,zero
10006478:	003e3506 	br	10005d50 <__alt_data_end+0xf8005d50>
1000647c:	d9002d17 	ldw	r4,180(sp)
10006480:	d9801e04 	addi	r6,sp,120
10006484:	b80b883a 	mov	r5,r23
10006488:	000c0400 	call	1000c040 <__sprint_r>
1000648c:	1039f81e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10006490:	d8c02017 	ldw	r3,128(sp)
10006494:	da000404 	addi	r8,sp,16
10006498:	003cd006 	br	100057dc <__alt_data_end+0xf80057dc>
1000649c:	8009883a 	mov	r4,r16
100064a0:	df003d15 	stw	fp,244(sp)
100064a4:	00047c80 	call	100047c8 <strlen>
100064a8:	d8802b15 	stw	r2,172(sp)
100064ac:	da003d17 	ldw	r8,244(sp)
100064b0:	103c200e 	bge	r2,zero,10005534 <__alt_data_end+0xf8005534>
100064b4:	0005883a 	mov	r2,zero
100064b8:	003c1e06 	br	10005534 <__alt_data_end+0xf8005534>
100064bc:	d9002d17 	ldw	r4,180(sp)
100064c0:	d9801e04 	addi	r6,sp,120
100064c4:	b80b883a 	mov	r5,r23
100064c8:	000c0400 	call	1000c040 <__sprint_r>
100064cc:	1039e81e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
100064d0:	d8c02017 	ldw	r3,128(sp)
100064d4:	d8801f17 	ldw	r2,124(sp)
100064d8:	da000404 	addi	r8,sp,16
100064dc:	d9403317 	ldw	r5,204(sp)
100064e0:	10800044 	addi	r2,r2,1
100064e4:	44000015 	stw	r16,0(r8)
100064e8:	28c7883a 	add	r3,r5,r3
100064ec:	003b5b06 	br	1000525c <__alt_data_end+0xf800525c>
100064f0:	01040074 	movhi	r4,4097
100064f4:	2111c084 	addi	r4,r4,18178
100064f8:	d9003515 	stw	r4,212(sp)
100064fc:	003af206 	br	100050c8 <__alt_data_end+0xf80050c8>
10006500:	013fffc4 	movi	r4,-1
10006504:	003a0806 	br	10004d28 <__alt_data_end+0xf8004d28>
10006508:	0023883a 	mov	r17,zero
1000650c:	003d9d06 	br	10005b84 <__alt_data_end+0xf8005b84>
10006510:	d9002d17 	ldw	r4,180(sp)
10006514:	d9801e04 	addi	r6,sp,120
10006518:	b80b883a 	mov	r5,r23
1000651c:	000c0400 	call	1000c040 <__sprint_r>
10006520:	1039d31e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
10006524:	d8c02017 	ldw	r3,128(sp)
10006528:	da000404 	addi	r8,sp,16
1000652c:	003d9406 	br	10005b80 <__alt_data_end+0xf8005b80>
10006530:	01040074 	movhi	r4,4097
10006534:	2111bc84 	addi	r4,r4,18162
10006538:	d9002c15 	stw	r4,176(sp)
1000653c:	d9002c17 	ldw	r4,176(sp)
10006540:	1c47883a 	add	r3,r3,r17
10006544:	10800044 	addi	r2,r2,1
10006548:	41000015 	stw	r4,0(r8)
1000654c:	44400115 	stw	r17,4(r8)
10006550:	d8c02015 	stw	r3,128(sp)
10006554:	d8801f15 	stw	r2,124(sp)
10006558:	010001c4 	movi	r4,7
1000655c:	20bfd716 	blt	r4,r2,100064bc <__alt_data_end+0xf80064bc>
10006560:	42000204 	addi	r8,r8,8
10006564:	003fdd06 	br	100064dc <__alt_data_end+0xf80064dc>
10006568:	d9002d17 	ldw	r4,180(sp)
1000656c:	d9801e04 	addi	r6,sp,120
10006570:	b80b883a 	mov	r5,r23
10006574:	000c0400 	call	1000c040 <__sprint_r>
10006578:	1039bd1e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
1000657c:	d8802617 	ldw	r2,152(sp)
10006580:	d8c02017 	ldw	r3,128(sp)
10006584:	da000404 	addi	r8,sp,16
10006588:	003e1006 	br	10005dcc <__alt_data_end+0xf8005dcc>
1000658c:	00800044 	movi	r2,1
10006590:	10803fcc 	andi	r2,r2,255
10006594:	00c00044 	movi	r3,1
10006598:	10fa0d26 	beq	r2,r3,10004dd0 <__alt_data_end+0xf8004dd0>
1000659c:	00c00084 	movi	r3,2
100065a0:	10fbaf26 	beq	r2,r3,10005460 <__alt_data_end+0xf8005460>
100065a4:	003a6d06 	br	10004f5c <__alt_data_end+0xf8004f5c>
100065a8:	01040074 	movhi	r4,4097
100065ac:	2111c084 	addi	r4,r4,18178
100065b0:	d9003515 	stw	r4,212(sp)
100065b4:	003b5406 	br	10005308 <__alt_data_end+0xf8005308>
100065b8:	d8802a17 	ldw	r2,168(sp)
100065bc:	00c00184 	movi	r3,6
100065c0:	1880012e 	bgeu	r3,r2,100065c8 <___vfprintf_internal_r+0x1d68>
100065c4:	1805883a 	mov	r2,r3
100065c8:	d8802b15 	stw	r2,172(sp)
100065cc:	1000ef16 	blt	r2,zero,1000698c <___vfprintf_internal_r+0x212c>
100065d0:	04040074 	movhi	r16,4097
100065d4:	d8802915 	stw	r2,164(sp)
100065d8:	dcc02e15 	stw	r19,184(sp)
100065dc:	d8002a15 	stw	zero,168(sp)
100065e0:	d8003215 	stw	zero,200(sp)
100065e4:	8411ba04 	addi	r16,r16,18152
100065e8:	0039883a 	mov	fp,zero
100065ec:	003a8006 	br	10004ff0 <__alt_data_end+0xf8004ff0>
100065f0:	0021883a 	mov	r16,zero
100065f4:	003e0706 	br	10005e14 <__alt_data_end+0xf8005e14>
100065f8:	d9002d17 	ldw	r4,180(sp)
100065fc:	d9801e04 	addi	r6,sp,120
10006600:	b80b883a 	mov	r5,r23
10006604:	000c0400 	call	1000c040 <__sprint_r>
10006608:	1039991e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
1000660c:	d8802617 	ldw	r2,152(sp)
10006610:	d9403317 	ldw	r5,204(sp)
10006614:	d8c02017 	ldw	r3,128(sp)
10006618:	da000404 	addi	r8,sp,16
1000661c:	2885c83a 	sub	r2,r5,r2
10006620:	003dfb06 	br	10005e10 <__alt_data_end+0xf8005e10>
10006624:	9080004c 	andi	r2,r18,1
10006628:	103e8f1e 	bne	r2,zero,10006068 <__alt_data_end+0xf8006068>
1000662c:	d8802117 	ldw	r2,132(sp)
10006630:	003e9e06 	br	100060ac <__alt_data_end+0xf80060ac>
10006634:	1025883a 	mov	r18,r2
10006638:	0039883a 	mov	fp,zero
1000663c:	00800084 	movi	r2,2
10006640:	003fd306 	br	10006590 <__alt_data_end+0xf8006590>
10006644:	07000b44 	movi	fp,45
10006648:	df002785 	stb	fp,158(sp)
1000664c:	003a1b06 	br	10004ebc <__alt_data_end+0xf8004ebc>
10006650:	00c00b44 	movi	r3,45
10006654:	d8c02785 	stb	r3,158(sp)
10006658:	d8802915 	stw	r2,164(sp)
1000665c:	dc802c17 	ldw	r18,176(sp)
10006660:	d8002a15 	stw	zero,168(sp)
10006664:	07000b44 	movi	fp,45
10006668:	003a5e06 	br	10004fe4 <__alt_data_end+0xf8004fe4>
1000666c:	04040074 	movhi	r16,4097
10006670:	8411af04 	addi	r16,r16,18108
10006674:	003f4706 	br	10006394 <__alt_data_end+0xf8006394>
10006678:	d9002e17 	ldw	r4,184(sp)
1000667c:	d9402f17 	ldw	r5,188(sp)
10006680:	20800017 	ldw	r2,0(r4)
10006684:	21000104 	addi	r4,r4,4
10006688:	d9002e15 	stw	r4,184(sp)
1000668c:	11400015 	stw	r5,0(r2)
10006690:	0038ab06 	br	10004940 <__alt_data_end+0xf8004940>
10006694:	dd802617 	ldw	r22,152(sp)
10006698:	00bfff44 	movi	r2,-3
1000669c:	b0801c16 	blt	r22,r2,10006710 <___vfprintf_internal_r+0x1eb0>
100066a0:	d9402a17 	ldw	r5,168(sp)
100066a4:	2d801a16 	blt	r5,r22,10006710 <___vfprintf_internal_r+0x1eb0>
100066a8:	dd803215 	stw	r22,200(sp)
100066ac:	003e8906 	br	100060d4 <__alt_data_end+0xf80060d4>
100066b0:	01040074 	movhi	r4,4097
100066b4:	2111bc84 	addi	r4,r4,18162
100066b8:	d9002c15 	stw	r4,176(sp)
100066bc:	003c9106 	br	10005904 <__alt_data_end+0xf8005904>
100066c0:	e005883a 	mov	r2,fp
100066c4:	003e7906 	br	100060ac <__alt_data_end+0xf80060ac>
100066c8:	d9002a17 	ldw	r4,168(sp)
100066cc:	df002783 	ldbu	fp,158(sp)
100066d0:	dcc02e15 	stw	r19,184(sp)
100066d4:	d9002915 	stw	r4,164(sp)
100066d8:	d9002b15 	stw	r4,172(sp)
100066dc:	d8002a15 	stw	zero,168(sp)
100066e0:	d8003215 	stw	zero,200(sp)
100066e4:	003a3b06 	br	10004fd4 <__alt_data_end+0xf8004fd4>
100066e8:	9080004c 	andi	r2,r18,1
100066ec:	0039883a 	mov	fp,zero
100066f0:	10000426 	beq	r2,zero,10006704 <___vfprintf_internal_r+0x1ea4>
100066f4:	00800c04 	movi	r2,48
100066f8:	dc001dc4 	addi	r16,sp,119
100066fc:	d8801dc5 	stb	r2,119(sp)
10006700:	003b6406 	br	10005494 <__alt_data_end+0xf8005494>
10006704:	d8002b15 	stw	zero,172(sp)
10006708:	dc001e04 	addi	r16,sp,120
1000670c:	003a2b06 	br	10004fbc <__alt_data_end+0xf8004fbc>
10006710:	8c7fff84 	addi	r17,r17,-2
10006714:	b5bfffc4 	addi	r22,r22,-1
10006718:	dd802615 	stw	r22,152(sp)
1000671c:	dc4022c5 	stb	r17,139(sp)
10006720:	b000bf16 	blt	r22,zero,10006a20 <___vfprintf_internal_r+0x21c0>
10006724:	00800ac4 	movi	r2,43
10006728:	d8802305 	stb	r2,140(sp)
1000672c:	00800244 	movi	r2,9
10006730:	15807016 	blt	r2,r22,100068f4 <___vfprintf_internal_r+0x2094>
10006734:	00800c04 	movi	r2,48
10006738:	b5800c04 	addi	r22,r22,48
1000673c:	d8802345 	stb	r2,141(sp)
10006740:	dd802385 	stb	r22,142(sp)
10006744:	d88023c4 	addi	r2,sp,143
10006748:	df0022c4 	addi	fp,sp,139
1000674c:	d8c03317 	ldw	r3,204(sp)
10006750:	1739c83a 	sub	fp,r2,fp
10006754:	d9003317 	ldw	r4,204(sp)
10006758:	e0c7883a 	add	r3,fp,r3
1000675c:	df003a15 	stw	fp,232(sp)
10006760:	d8c02b15 	stw	r3,172(sp)
10006764:	00800044 	movi	r2,1
10006768:	1100b30e 	bge	r2,r4,10006a38 <___vfprintf_internal_r+0x21d8>
1000676c:	d8c02b17 	ldw	r3,172(sp)
10006770:	18c00044 	addi	r3,r3,1
10006774:	d8c02b15 	stw	r3,172(sp)
10006778:	1805883a 	mov	r2,r3
1000677c:	1800ac16 	blt	r3,zero,10006a30 <___vfprintf_internal_r+0x21d0>
10006780:	d8003215 	stw	zero,200(sp)
10006784:	003e5d06 	br	100060fc <__alt_data_end+0xf80060fc>
10006788:	d9002d17 	ldw	r4,180(sp)
1000678c:	d9801e04 	addi	r6,sp,120
10006790:	b80b883a 	mov	r5,r23
10006794:	000c0400 	call	1000c040 <__sprint_r>
10006798:	1039351e 	bne	r2,zero,10004c70 <__alt_data_end+0xf8004c70>
1000679c:	dc402617 	ldw	r17,152(sp)
100067a0:	d8c02017 	ldw	r3,128(sp)
100067a4:	d8801f17 	ldw	r2,124(sp)
100067a8:	da000404 	addi	r8,sp,16
100067ac:	003ed606 	br	10006308 <__alt_data_end+0xf8006308>
100067b0:	182b883a 	mov	r21,r3
100067b4:	d8002a15 	stw	zero,168(sp)
100067b8:	00388c06 	br	100049ec <__alt_data_end+0xf80049ec>
100067bc:	d8802a17 	ldw	r2,168(sp)
100067c0:	103e071e 	bne	r2,zero,10005fe0 <__alt_data_end+0xf8005fe0>
100067c4:	dc002a15 	stw	r16,168(sp)
100067c8:	003e0506 	br	10005fe0 <__alt_data_end+0xf8005fe0>
100067cc:	d9002a17 	ldw	r4,168(sp)
100067d0:	20c00044 	addi	r3,r4,1
100067d4:	003e0f06 	br	10006014 <__alt_data_end+0xf8006014>
100067d8:	01400184 	movi	r5,6
100067dc:	d9402a15 	stw	r5,168(sp)
100067e0:	003dff06 	br	10005fe0 <__alt_data_end+0xf8005fe0>
100067e4:	d8802104 	addi	r2,sp,132
100067e8:	d8800315 	stw	r2,12(sp)
100067ec:	d8802504 	addi	r2,sp,148
100067f0:	d8800215 	stw	r2,8(sp)
100067f4:	d8802604 	addi	r2,sp,152
100067f8:	d8800115 	stw	r2,4(sp)
100067fc:	d8802a17 	ldw	r2,168(sp)
10006800:	d9403617 	ldw	r5,216(sp)
10006804:	d9002d17 	ldw	r4,180(sp)
10006808:	d8800015 	stw	r2,0(sp)
1000680c:	01c000c4 	movi	r7,3
10006810:	980d883a 	mov	r6,r19
10006814:	da003d15 	stw	r8,244(sp)
10006818:	0006f900 	call	10006f90 <_dtoa_r>
1000681c:	d8c02a17 	ldw	r3,168(sp)
10006820:	da003d17 	ldw	r8,244(sp)
10006824:	1021883a 	mov	r16,r2
10006828:	10f9883a 	add	fp,r2,r3
1000682c:	81000007 	ldb	r4,0(r16)
10006830:	00800c04 	movi	r2,48
10006834:	20805e26 	beq	r4,r2,100069b0 <___vfprintf_internal_r+0x2150>
10006838:	d8c02617 	ldw	r3,152(sp)
1000683c:	e0f9883a 	add	fp,fp,r3
10006840:	003e0a06 	br	1000606c <__alt_data_end+0xf800606c>
10006844:	00c00b44 	movi	r3,45
10006848:	24e0003c 	xorhi	r19,r4,32768
1000684c:	d8c02905 	stb	r3,164(sp)
10006850:	003de906 	br	10005ff8 <__alt_data_end+0xf8005ff8>
10006854:	d8c03217 	ldw	r3,200(sp)
10006858:	00c07a0e 	bge	zero,r3,10006a44 <___vfprintf_internal_r+0x21e4>
1000685c:	00800044 	movi	r2,1
10006860:	d9003317 	ldw	r4,204(sp)
10006864:	1105883a 	add	r2,r2,r4
10006868:	d8802b15 	stw	r2,172(sp)
1000686c:	10004e16 	blt	r2,zero,100069a8 <___vfprintf_internal_r+0x2148>
10006870:	044019c4 	movi	r17,103
10006874:	003e2106 	br	100060fc <__alt_data_end+0xf80060fc>
10006878:	d9002a17 	ldw	r4,168(sp)
1000687c:	d8802104 	addi	r2,sp,132
10006880:	d8800315 	stw	r2,12(sp)
10006884:	d9000015 	stw	r4,0(sp)
10006888:	d8802504 	addi	r2,sp,148
1000688c:	d9403617 	ldw	r5,216(sp)
10006890:	d9002d17 	ldw	r4,180(sp)
10006894:	d8800215 	stw	r2,8(sp)
10006898:	d8802604 	addi	r2,sp,152
1000689c:	d8800115 	stw	r2,4(sp)
100068a0:	01c000c4 	movi	r7,3
100068a4:	980d883a 	mov	r6,r19
100068a8:	da003d15 	stw	r8,244(sp)
100068ac:	0006f900 	call	10006f90 <_dtoa_r>
100068b0:	d8c02a17 	ldw	r3,168(sp)
100068b4:	da003d17 	ldw	r8,244(sp)
100068b8:	1021883a 	mov	r16,r2
100068bc:	00801184 	movi	r2,70
100068c0:	80f9883a 	add	fp,r16,r3
100068c4:	88bfd926 	beq	r17,r2,1000682c <__alt_data_end+0xf800682c>
100068c8:	003de806 	br	1000606c <__alt_data_end+0xf800606c>
100068cc:	d9002a17 	ldw	r4,168(sp)
100068d0:	00c04d0e 	bge	zero,r3,10006a08 <___vfprintf_internal_r+0x21a8>
100068d4:	2000441e 	bne	r4,zero,100069e8 <___vfprintf_internal_r+0x2188>
100068d8:	9480004c 	andi	r18,r18,1
100068dc:	9000421e 	bne	r18,zero,100069e8 <___vfprintf_internal_r+0x2188>
100068e0:	1805883a 	mov	r2,r3
100068e4:	18006f16 	blt	r3,zero,10006aa4 <___vfprintf_internal_r+0x2244>
100068e8:	d8c03217 	ldw	r3,200(sp)
100068ec:	d8c02b15 	stw	r3,172(sp)
100068f0:	003e0206 	br	100060fc <__alt_data_end+0xf80060fc>
100068f4:	df0022c4 	addi	fp,sp,139
100068f8:	dc002a15 	stw	r16,168(sp)
100068fc:	4027883a 	mov	r19,r8
10006900:	e021883a 	mov	r16,fp
10006904:	b009883a 	mov	r4,r22
10006908:	01400284 	movi	r5,10
1000690c:	000ebcc0 	call	1000ebcc <__modsi3>
10006910:	10800c04 	addi	r2,r2,48
10006914:	843fffc4 	addi	r16,r16,-1
10006918:	b009883a 	mov	r4,r22
1000691c:	01400284 	movi	r5,10
10006920:	80800005 	stb	r2,0(r16)
10006924:	000eb480 	call	1000eb48 <__divsi3>
10006928:	102d883a 	mov	r22,r2
1000692c:	00800244 	movi	r2,9
10006930:	15bff416 	blt	r2,r22,10006904 <__alt_data_end+0xf8006904>
10006934:	9811883a 	mov	r8,r19
10006938:	b0800c04 	addi	r2,r22,48
1000693c:	8027883a 	mov	r19,r16
10006940:	997fffc4 	addi	r5,r19,-1
10006944:	98bfffc5 	stb	r2,-1(r19)
10006948:	dc002a17 	ldw	r16,168(sp)
1000694c:	2f006d2e 	bgeu	r5,fp,10006b04 <___vfprintf_internal_r+0x22a4>
10006950:	d9c02384 	addi	r7,sp,142
10006954:	3ccfc83a 	sub	r7,r7,r19
10006958:	d9002344 	addi	r4,sp,141
1000695c:	e1cf883a 	add	r7,fp,r7
10006960:	00000106 	br	10006968 <___vfprintf_internal_r+0x2108>
10006964:	28800003 	ldbu	r2,0(r5)
10006968:	20800005 	stb	r2,0(r4)
1000696c:	21000044 	addi	r4,r4,1
10006970:	29400044 	addi	r5,r5,1
10006974:	393ffb1e 	bne	r7,r4,10006964 <__alt_data_end+0xf8006964>
10006978:	d8802304 	addi	r2,sp,140
1000697c:	14c5c83a 	sub	r2,r2,r19
10006980:	d8c02344 	addi	r3,sp,141
10006984:	1885883a 	add	r2,r3,r2
10006988:	003f7006 	br	1000674c <__alt_data_end+0xf800674c>
1000698c:	0005883a 	mov	r2,zero
10006990:	003f0f06 	br	100065d0 <__alt_data_end+0xf80065d0>
10006994:	d8c03217 	ldw	r3,200(sp)
10006998:	18c00044 	addi	r3,r3,1
1000699c:	d8c02b15 	stw	r3,172(sp)
100069a0:	1805883a 	mov	r2,r3
100069a4:	183fb20e 	bge	r3,zero,10006870 <__alt_data_end+0xf8006870>
100069a8:	0005883a 	mov	r2,zero
100069ac:	003fb006 	br	10006870 <__alt_data_end+0xf8006870>
100069b0:	d9003617 	ldw	r4,216(sp)
100069b4:	000d883a 	mov	r6,zero
100069b8:	000f883a 	mov	r7,zero
100069bc:	980b883a 	mov	r5,r19
100069c0:	d8c03c15 	stw	r3,240(sp)
100069c4:	da003d15 	stw	r8,244(sp)
100069c8:	000ff780 	call	1000ff78 <__eqdf2>
100069cc:	d8c03c17 	ldw	r3,240(sp)
100069d0:	da003d17 	ldw	r8,244(sp)
100069d4:	103f9826 	beq	r2,zero,10006838 <__alt_data_end+0xf8006838>
100069d8:	00800044 	movi	r2,1
100069dc:	10c7c83a 	sub	r3,r2,r3
100069e0:	d8c02615 	stw	r3,152(sp)
100069e4:	003f9506 	br	1000683c <__alt_data_end+0xf800683c>
100069e8:	d9002a17 	ldw	r4,168(sp)
100069ec:	d8c03217 	ldw	r3,200(sp)
100069f0:	20800044 	addi	r2,r4,1
100069f4:	1885883a 	add	r2,r3,r2
100069f8:	d8802b15 	stw	r2,172(sp)
100069fc:	103dbf0e 	bge	r2,zero,100060fc <__alt_data_end+0xf80060fc>
10006a00:	0005883a 	mov	r2,zero
10006a04:	003dbd06 	br	100060fc <__alt_data_end+0xf80060fc>
10006a08:	2000201e 	bne	r4,zero,10006a8c <___vfprintf_internal_r+0x222c>
10006a0c:	9480004c 	andi	r18,r18,1
10006a10:	90001e1e 	bne	r18,zero,10006a8c <___vfprintf_internal_r+0x222c>
10006a14:	00800044 	movi	r2,1
10006a18:	d8802b15 	stw	r2,172(sp)
10006a1c:	003db706 	br	100060fc <__alt_data_end+0xf80060fc>
10006a20:	00800b44 	movi	r2,45
10006a24:	05adc83a 	sub	r22,zero,r22
10006a28:	d8802305 	stb	r2,140(sp)
10006a2c:	003f3f06 	br	1000672c <__alt_data_end+0xf800672c>
10006a30:	0005883a 	mov	r2,zero
10006a34:	003f5206 	br	10006780 <__alt_data_end+0xf8006780>
10006a38:	90a4703a 	and	r18,r18,r2
10006a3c:	903f4e26 	beq	r18,zero,10006778 <__alt_data_end+0xf8006778>
10006a40:	003f4a06 	br	1000676c <__alt_data_end+0xf800676c>
10006a44:	00800084 	movi	r2,2
10006a48:	10c5c83a 	sub	r2,r2,r3
10006a4c:	003f8406 	br	10006860 <__alt_data_end+0xf8006860>
10006a50:	d9402e17 	ldw	r5,184(sp)
10006a54:	d9002e17 	ldw	r4,184(sp)
10006a58:	ac400043 	ldbu	r17,1(r21)
10006a5c:	29400017 	ldw	r5,0(r5)
10006a60:	20800104 	addi	r2,r4,4
10006a64:	d8802e15 	stw	r2,184(sp)
10006a68:	d9402a15 	stw	r5,168(sp)
10006a6c:	182b883a 	mov	r21,r3
10006a70:	283e7b0e 	bge	r5,zero,10006460 <__alt_data_end+0xf8006460>
10006a74:	8c403fcc 	andi	r17,r17,255
10006a78:	017fffc4 	movi	r5,-1
10006a7c:	8c40201c 	xori	r17,r17,128
10006a80:	d9402a15 	stw	r5,168(sp)
10006a84:	8c7fe004 	addi	r17,r17,-128
10006a88:	0037d706 	br	100049e8 <__alt_data_end+0xf80049e8>
10006a8c:	d8c02a17 	ldw	r3,168(sp)
10006a90:	18c00084 	addi	r3,r3,2
10006a94:	d8c02b15 	stw	r3,172(sp)
10006a98:	1805883a 	mov	r2,r3
10006a9c:	183d970e 	bge	r3,zero,100060fc <__alt_data_end+0xf80060fc>
10006aa0:	003fd706 	br	10006a00 <__alt_data_end+0xf8006a00>
10006aa4:	0005883a 	mov	r2,zero
10006aa8:	003f8f06 	br	100068e8 <__alt_data_end+0xf80068e8>
10006aac:	9080004c 	andi	r2,r18,1
10006ab0:	103f821e 	bne	r2,zero,100068bc <__alt_data_end+0xf80068bc>
10006ab4:	d8802117 	ldw	r2,132(sp)
10006ab8:	1405c83a 	sub	r2,r2,r16
10006abc:	d8803315 	stw	r2,204(sp)
10006ac0:	b47ef426 	beq	r22,r17,10006694 <__alt_data_end+0xf8006694>
10006ac4:	dd802617 	ldw	r22,152(sp)
10006ac8:	003f1206 	br	10006714 <__alt_data_end+0xf8006714>
10006acc:	d8c02b03 	ldbu	r3,172(sp)
10006ad0:	d8c02785 	stb	r3,158(sp)
10006ad4:	0038df06 	br	10004e54 <__alt_data_end+0xf8004e54>
10006ad8:	d8c02b03 	ldbu	r3,172(sp)
10006adc:	d8c02785 	stb	r3,158(sp)
10006ae0:	0038aa06 	br	10004d8c <__alt_data_end+0xf8004d8c>
10006ae4:	d8c02b03 	ldbu	r3,172(sp)
10006ae8:	d8c02785 	stb	r3,158(sp)
10006aec:	003a4306 	br	100053fc <__alt_data_end+0xf80053fc>
10006af0:	d8c02b03 	ldbu	r3,172(sp)
10006af4:	d8c02785 	stb	r3,158(sp)
10006af8:	003af506 	br	100056d0 <__alt_data_end+0xf80056d0>
10006afc:	0005883a 	mov	r2,zero
10006b00:	003d7b06 	br	100060f0 <__alt_data_end+0xf80060f0>
10006b04:	d8802344 	addi	r2,sp,141
10006b08:	003f1006 	br	1000674c <__alt_data_end+0xf800674c>
10006b0c:	d8c02b03 	ldbu	r3,172(sp)
10006b10:	d8c02785 	stb	r3,158(sp)
10006b14:	0038fd06 	br	10004f0c <__alt_data_end+0xf8004f0c>
10006b18:	d8c02b03 	ldbu	r3,172(sp)
10006b1c:	d8c02785 	stb	r3,158(sp)
10006b20:	003a9706 	br	10005580 <__alt_data_end+0xf8005580>
10006b24:	d8c02b03 	ldbu	r3,172(sp)
10006b28:	d8c02785 	stb	r3,158(sp)
10006b2c:	003a1806 	br	10005390 <__alt_data_end+0xf8005390>
10006b30:	d8c02b03 	ldbu	r3,172(sp)
10006b34:	d8c02785 	stb	r3,158(sp)
10006b38:	003abe06 	br	10005634 <__alt_data_end+0xf8005634>

10006b3c <__vfprintf_internal>:
10006b3c:	00840074 	movhi	r2,4097
10006b40:	109d9a04 	addi	r2,r2,30312
10006b44:	300f883a 	mov	r7,r6
10006b48:	280d883a 	mov	r6,r5
10006b4c:	200b883a 	mov	r5,r4
10006b50:	11000017 	ldw	r4,0(r2)
10006b54:	00048601 	jmpi	10004860 <___vfprintf_internal_r>

10006b58 <__sbprintf>:
10006b58:	2880030b 	ldhu	r2,12(r5)
10006b5c:	2ac01917 	ldw	r11,100(r5)
10006b60:	2a80038b 	ldhu	r10,14(r5)
10006b64:	2a400717 	ldw	r9,28(r5)
10006b68:	2a000917 	ldw	r8,36(r5)
10006b6c:	defee204 	addi	sp,sp,-1144
10006b70:	00c10004 	movi	r3,1024
10006b74:	dc011a15 	stw	r16,1128(sp)
10006b78:	10bfff4c 	andi	r2,r2,65533
10006b7c:	2821883a 	mov	r16,r5
10006b80:	d8cb883a 	add	r5,sp,r3
10006b84:	dc811c15 	stw	r18,1136(sp)
10006b88:	dc411b15 	stw	r17,1132(sp)
10006b8c:	dfc11d15 	stw	ra,1140(sp)
10006b90:	2025883a 	mov	r18,r4
10006b94:	d881030d 	sth	r2,1036(sp)
10006b98:	dac11915 	stw	r11,1124(sp)
10006b9c:	da81038d 	sth	r10,1038(sp)
10006ba0:	da410715 	stw	r9,1052(sp)
10006ba4:	da010915 	stw	r8,1060(sp)
10006ba8:	dec10015 	stw	sp,1024(sp)
10006bac:	dec10415 	stw	sp,1040(sp)
10006bb0:	d8c10215 	stw	r3,1032(sp)
10006bb4:	d8c10515 	stw	r3,1044(sp)
10006bb8:	d8010615 	stw	zero,1048(sp)
10006bbc:	00048600 	call	10004860 <___vfprintf_internal_r>
10006bc0:	1023883a 	mov	r17,r2
10006bc4:	10000416 	blt	r2,zero,10006bd8 <__sbprintf+0x80>
10006bc8:	d9410004 	addi	r5,sp,1024
10006bcc:	9009883a 	mov	r4,r18
10006bd0:	00088340 	call	10008834 <_fflush_r>
10006bd4:	10000d1e 	bne	r2,zero,10006c0c <__sbprintf+0xb4>
10006bd8:	d881030b 	ldhu	r2,1036(sp)
10006bdc:	1080100c 	andi	r2,r2,64
10006be0:	10000326 	beq	r2,zero,10006bf0 <__sbprintf+0x98>
10006be4:	8080030b 	ldhu	r2,12(r16)
10006be8:	10801014 	ori	r2,r2,64
10006bec:	8080030d 	sth	r2,12(r16)
10006bf0:	8805883a 	mov	r2,r17
10006bf4:	dfc11d17 	ldw	ra,1140(sp)
10006bf8:	dc811c17 	ldw	r18,1136(sp)
10006bfc:	dc411b17 	ldw	r17,1132(sp)
10006c00:	dc011a17 	ldw	r16,1128(sp)
10006c04:	dec11e04 	addi	sp,sp,1144
10006c08:	f800283a 	ret
10006c0c:	047fffc4 	movi	r17,-1
10006c10:	003ff106 	br	10006bd8 <__alt_data_end+0xf8006bd8>

10006c14 <__swsetup_r>:
10006c14:	00840074 	movhi	r2,4097
10006c18:	defffd04 	addi	sp,sp,-12
10006c1c:	109d9a04 	addi	r2,r2,30312
10006c20:	dc400115 	stw	r17,4(sp)
10006c24:	2023883a 	mov	r17,r4
10006c28:	11000017 	ldw	r4,0(r2)
10006c2c:	dc000015 	stw	r16,0(sp)
10006c30:	dfc00215 	stw	ra,8(sp)
10006c34:	2821883a 	mov	r16,r5
10006c38:	20000226 	beq	r4,zero,10006c44 <__swsetup_r+0x30>
10006c3c:	20800e17 	ldw	r2,56(r4)
10006c40:	10003126 	beq	r2,zero,10006d08 <__swsetup_r+0xf4>
10006c44:	8080030b 	ldhu	r2,12(r16)
10006c48:	10c0020c 	andi	r3,r2,8
10006c4c:	1009883a 	mov	r4,r2
10006c50:	18000f26 	beq	r3,zero,10006c90 <__swsetup_r+0x7c>
10006c54:	80c00417 	ldw	r3,16(r16)
10006c58:	18001526 	beq	r3,zero,10006cb0 <__swsetup_r+0x9c>
10006c5c:	1100004c 	andi	r4,r2,1
10006c60:	20001c1e 	bne	r4,zero,10006cd4 <__swsetup_r+0xc0>
10006c64:	1080008c 	andi	r2,r2,2
10006c68:	1000291e 	bne	r2,zero,10006d10 <__swsetup_r+0xfc>
10006c6c:	80800517 	ldw	r2,20(r16)
10006c70:	80800215 	stw	r2,8(r16)
10006c74:	18001c26 	beq	r3,zero,10006ce8 <__swsetup_r+0xd4>
10006c78:	0005883a 	mov	r2,zero
10006c7c:	dfc00217 	ldw	ra,8(sp)
10006c80:	dc400117 	ldw	r17,4(sp)
10006c84:	dc000017 	ldw	r16,0(sp)
10006c88:	dec00304 	addi	sp,sp,12
10006c8c:	f800283a 	ret
10006c90:	2080040c 	andi	r2,r4,16
10006c94:	10002e26 	beq	r2,zero,10006d50 <__swsetup_r+0x13c>
10006c98:	2080010c 	andi	r2,r4,4
10006c9c:	10001e1e 	bne	r2,zero,10006d18 <__swsetup_r+0x104>
10006ca0:	80c00417 	ldw	r3,16(r16)
10006ca4:	20800214 	ori	r2,r4,8
10006ca8:	8080030d 	sth	r2,12(r16)
10006cac:	183feb1e 	bne	r3,zero,10006c5c <__alt_data_end+0xf8006c5c>
10006cb0:	1100a00c 	andi	r4,r2,640
10006cb4:	01408004 	movi	r5,512
10006cb8:	217fe826 	beq	r4,r5,10006c5c <__alt_data_end+0xf8006c5c>
10006cbc:	800b883a 	mov	r5,r16
10006cc0:	8809883a 	mov	r4,r17
10006cc4:	00097d00 	call	100097d0 <__smakebuf_r>
10006cc8:	8080030b 	ldhu	r2,12(r16)
10006ccc:	80c00417 	ldw	r3,16(r16)
10006cd0:	003fe206 	br	10006c5c <__alt_data_end+0xf8006c5c>
10006cd4:	80800517 	ldw	r2,20(r16)
10006cd8:	80000215 	stw	zero,8(r16)
10006cdc:	0085c83a 	sub	r2,zero,r2
10006ce0:	80800615 	stw	r2,24(r16)
10006ce4:	183fe41e 	bne	r3,zero,10006c78 <__alt_data_end+0xf8006c78>
10006ce8:	80c0030b 	ldhu	r3,12(r16)
10006cec:	0005883a 	mov	r2,zero
10006cf0:	1900200c 	andi	r4,r3,128
10006cf4:	203fe126 	beq	r4,zero,10006c7c <__alt_data_end+0xf8006c7c>
10006cf8:	18c01014 	ori	r3,r3,64
10006cfc:	80c0030d 	sth	r3,12(r16)
10006d00:	00bfffc4 	movi	r2,-1
10006d04:	003fdd06 	br	10006c7c <__alt_data_end+0xf8006c7c>
10006d08:	0008c200 	call	10008c20 <__sinit>
10006d0c:	003fcd06 	br	10006c44 <__alt_data_end+0xf8006c44>
10006d10:	0005883a 	mov	r2,zero
10006d14:	003fd606 	br	10006c70 <__alt_data_end+0xf8006c70>
10006d18:	81400c17 	ldw	r5,48(r16)
10006d1c:	28000626 	beq	r5,zero,10006d38 <__swsetup_r+0x124>
10006d20:	80801004 	addi	r2,r16,64
10006d24:	28800326 	beq	r5,r2,10006d34 <__swsetup_r+0x120>
10006d28:	8809883a 	mov	r4,r17
10006d2c:	0008d940 	call	10008d94 <_free_r>
10006d30:	8100030b 	ldhu	r4,12(r16)
10006d34:	80000c15 	stw	zero,48(r16)
10006d38:	80c00417 	ldw	r3,16(r16)
10006d3c:	00bff6c4 	movi	r2,-37
10006d40:	1108703a 	and	r4,r2,r4
10006d44:	80000115 	stw	zero,4(r16)
10006d48:	80c00015 	stw	r3,0(r16)
10006d4c:	003fd506 	br	10006ca4 <__alt_data_end+0xf8006ca4>
10006d50:	00800244 	movi	r2,9
10006d54:	88800015 	stw	r2,0(r17)
10006d58:	20801014 	ori	r2,r4,64
10006d5c:	8080030d 	sth	r2,12(r16)
10006d60:	00bfffc4 	movi	r2,-1
10006d64:	003fc506 	br	10006c7c <__alt_data_end+0xf8006c7c>

10006d68 <quorem>:
10006d68:	defff204 	addi	sp,sp,-56
10006d6c:	ddc00b15 	stw	r23,44(sp)
10006d70:	20800417 	ldw	r2,16(r4)
10006d74:	2dc00417 	ldw	r23,16(r5)
10006d78:	dfc00d15 	stw	ra,52(sp)
10006d7c:	df000c15 	stw	fp,48(sp)
10006d80:	dd800a15 	stw	r22,40(sp)
10006d84:	dd400915 	stw	r21,36(sp)
10006d88:	dd000815 	stw	r20,32(sp)
10006d8c:	dcc00715 	stw	r19,28(sp)
10006d90:	dc800615 	stw	r18,24(sp)
10006d94:	dc400515 	stw	r17,20(sp)
10006d98:	dc000415 	stw	r16,16(sp)
10006d9c:	15c07a16 	blt	r2,r23,10006f88 <quorem+0x220>
10006da0:	bdffffc4 	addi	r23,r23,-1
10006da4:	bde9883a 	add	r20,r23,r23
10006da8:	28c00504 	addi	r3,r5,20
10006dac:	a529883a 	add	r20,r20,r20
10006db0:	1d39883a 	add	fp,r3,r20
10006db4:	24c00504 	addi	r19,r4,20
10006db8:	d9400215 	stw	r5,8(sp)
10006dbc:	9d29883a 	add	r20,r19,r20
10006dc0:	e1400017 	ldw	r5,0(fp)
10006dc4:	d9000015 	stw	r4,0(sp)
10006dc8:	a1000017 	ldw	r4,0(r20)
10006dcc:	29400044 	addi	r5,r5,1
10006dd0:	d8c00115 	stw	r3,4(sp)
10006dd4:	dd000315 	stw	r20,12(sp)
10006dd8:	000ec400 	call	1000ec40 <__udivsi3>
10006ddc:	1025883a 	mov	r18,r2
10006de0:	10003026 	beq	r2,zero,10006ea4 <quorem+0x13c>
10006de4:	dc400117 	ldw	r17,4(sp)
10006de8:	9829883a 	mov	r20,r19
10006dec:	002d883a 	mov	r22,zero
10006df0:	0021883a 	mov	r16,zero
10006df4:	8d400017 	ldw	r21,0(r17)
10006df8:	900b883a 	mov	r5,r18
10006dfc:	8c400104 	addi	r17,r17,4
10006e00:	a93fffcc 	andi	r4,r21,65535
10006e04:	00046600 	call	10004660 <__mulsi3>
10006e08:	a808d43a 	srli	r4,r21,16
10006e0c:	900b883a 	mov	r5,r18
10006e10:	15ad883a 	add	r22,r2,r22
10006e14:	00046600 	call	10004660 <__mulsi3>
10006e18:	a1000017 	ldw	r4,0(r20)
10006e1c:	b00cd43a 	srli	r6,r22,16
10006e20:	b0ffffcc 	andi	r3,r22,65535
10006e24:	217fffcc 	andi	r5,r4,65535
10006e28:	2c21883a 	add	r16,r5,r16
10006e2c:	80c7c83a 	sub	r3,r16,r3
10006e30:	2008d43a 	srli	r4,r4,16
10006e34:	1185883a 	add	r2,r2,r6
10006e38:	1821d43a 	srai	r16,r3,16
10006e3c:	117fffcc 	andi	r5,r2,65535
10006e40:	2149c83a 	sub	r4,r4,r5
10006e44:	2421883a 	add	r16,r4,r16
10006e48:	8008943a 	slli	r4,r16,16
10006e4c:	18ffffcc 	andi	r3,r3,65535
10006e50:	102cd43a 	srli	r22,r2,16
10006e54:	20c8b03a 	or	r4,r4,r3
10006e58:	a1000015 	stw	r4,0(r20)
10006e5c:	8021d43a 	srai	r16,r16,16
10006e60:	a5000104 	addi	r20,r20,4
10006e64:	e47fe32e 	bgeu	fp,r17,10006df4 <__alt_data_end+0xf8006df4>
10006e68:	d8c00317 	ldw	r3,12(sp)
10006e6c:	18800017 	ldw	r2,0(r3)
10006e70:	10000c1e 	bne	r2,zero,10006ea4 <quorem+0x13c>
10006e74:	18bfff04 	addi	r2,r3,-4
10006e78:	9880082e 	bgeu	r19,r2,10006e9c <quorem+0x134>
10006e7c:	18ffff17 	ldw	r3,-4(r3)
10006e80:	18000326 	beq	r3,zero,10006e90 <quorem+0x128>
10006e84:	00000506 	br	10006e9c <quorem+0x134>
10006e88:	10c00017 	ldw	r3,0(r2)
10006e8c:	1800031e 	bne	r3,zero,10006e9c <quorem+0x134>
10006e90:	10bfff04 	addi	r2,r2,-4
10006e94:	bdffffc4 	addi	r23,r23,-1
10006e98:	98bffb36 	bltu	r19,r2,10006e88 <__alt_data_end+0xf8006e88>
10006e9c:	d8c00017 	ldw	r3,0(sp)
10006ea0:	1dc00415 	stw	r23,16(r3)
10006ea4:	d9400217 	ldw	r5,8(sp)
10006ea8:	d9000017 	ldw	r4,0(sp)
10006eac:	000afcc0 	call	1000afcc <__mcmp>
10006eb0:	10002816 	blt	r2,zero,10006f54 <quorem+0x1ec>
10006eb4:	dc400117 	ldw	r17,4(sp)
10006eb8:	94800044 	addi	r18,r18,1
10006ebc:	980d883a 	mov	r6,r19
10006ec0:	0007883a 	mov	r3,zero
10006ec4:	31000017 	ldw	r4,0(r6)
10006ec8:	89400017 	ldw	r5,0(r17)
10006ecc:	31800104 	addi	r6,r6,4
10006ed0:	20bfffcc 	andi	r2,r4,65535
10006ed4:	10c7883a 	add	r3,r2,r3
10006ed8:	28bfffcc 	andi	r2,r5,65535
10006edc:	1885c83a 	sub	r2,r3,r2
10006ee0:	280ad43a 	srli	r5,r5,16
10006ee4:	2008d43a 	srli	r4,r4,16
10006ee8:	1007d43a 	srai	r3,r2,16
10006eec:	10bfffcc 	andi	r2,r2,65535
10006ef0:	2149c83a 	sub	r4,r4,r5
10006ef4:	20c9883a 	add	r4,r4,r3
10006ef8:	200a943a 	slli	r5,r4,16
10006efc:	8c400104 	addi	r17,r17,4
10006f00:	2007d43a 	srai	r3,r4,16
10006f04:	2884b03a 	or	r2,r5,r2
10006f08:	30bfff15 	stw	r2,-4(r6)
10006f0c:	e47fed2e 	bgeu	fp,r17,10006ec4 <__alt_data_end+0xf8006ec4>
10006f10:	bdc5883a 	add	r2,r23,r23
10006f14:	1085883a 	add	r2,r2,r2
10006f18:	9887883a 	add	r3,r19,r2
10006f1c:	18800017 	ldw	r2,0(r3)
10006f20:	10000c1e 	bne	r2,zero,10006f54 <quorem+0x1ec>
10006f24:	18bfff04 	addi	r2,r3,-4
10006f28:	9880082e 	bgeu	r19,r2,10006f4c <quorem+0x1e4>
10006f2c:	18ffff17 	ldw	r3,-4(r3)
10006f30:	18000326 	beq	r3,zero,10006f40 <quorem+0x1d8>
10006f34:	00000506 	br	10006f4c <quorem+0x1e4>
10006f38:	10c00017 	ldw	r3,0(r2)
10006f3c:	1800031e 	bne	r3,zero,10006f4c <quorem+0x1e4>
10006f40:	10bfff04 	addi	r2,r2,-4
10006f44:	bdffffc4 	addi	r23,r23,-1
10006f48:	98bffb36 	bltu	r19,r2,10006f38 <__alt_data_end+0xf8006f38>
10006f4c:	d8c00017 	ldw	r3,0(sp)
10006f50:	1dc00415 	stw	r23,16(r3)
10006f54:	9005883a 	mov	r2,r18
10006f58:	dfc00d17 	ldw	ra,52(sp)
10006f5c:	df000c17 	ldw	fp,48(sp)
10006f60:	ddc00b17 	ldw	r23,44(sp)
10006f64:	dd800a17 	ldw	r22,40(sp)
10006f68:	dd400917 	ldw	r21,36(sp)
10006f6c:	dd000817 	ldw	r20,32(sp)
10006f70:	dcc00717 	ldw	r19,28(sp)
10006f74:	dc800617 	ldw	r18,24(sp)
10006f78:	dc400517 	ldw	r17,20(sp)
10006f7c:	dc000417 	ldw	r16,16(sp)
10006f80:	dec00e04 	addi	sp,sp,56
10006f84:	f800283a 	ret
10006f88:	0005883a 	mov	r2,zero
10006f8c:	003ff206 	br	10006f58 <__alt_data_end+0xf8006f58>

10006f90 <_dtoa_r>:
10006f90:	20801017 	ldw	r2,64(r4)
10006f94:	deffde04 	addi	sp,sp,-136
10006f98:	df002015 	stw	fp,128(sp)
10006f9c:	dcc01b15 	stw	r19,108(sp)
10006fa0:	dc801a15 	stw	r18,104(sp)
10006fa4:	dc401915 	stw	r17,100(sp)
10006fa8:	dc001815 	stw	r16,96(sp)
10006fac:	dfc02115 	stw	ra,132(sp)
10006fb0:	ddc01f15 	stw	r23,124(sp)
10006fb4:	dd801e15 	stw	r22,120(sp)
10006fb8:	dd401d15 	stw	r21,116(sp)
10006fbc:	dd001c15 	stw	r20,112(sp)
10006fc0:	d9c00315 	stw	r7,12(sp)
10006fc4:	2039883a 	mov	fp,r4
10006fc8:	3023883a 	mov	r17,r6
10006fcc:	2825883a 	mov	r18,r5
10006fd0:	dc002417 	ldw	r16,144(sp)
10006fd4:	3027883a 	mov	r19,r6
10006fd8:	10000826 	beq	r2,zero,10006ffc <_dtoa_r+0x6c>
10006fdc:	21801117 	ldw	r6,68(r4)
10006fe0:	00c00044 	movi	r3,1
10006fe4:	100b883a 	mov	r5,r2
10006fe8:	1986983a 	sll	r3,r3,r6
10006fec:	11800115 	stw	r6,4(r2)
10006ff0:	10c00215 	stw	r3,8(r2)
10006ff4:	000a6f00 	call	1000a6f0 <_Bfree>
10006ff8:	e0001015 	stw	zero,64(fp)
10006ffc:	88002e16 	blt	r17,zero,100070b8 <_dtoa_r+0x128>
10007000:	80000015 	stw	zero,0(r16)
10007004:	889ffc2c 	andhi	r2,r17,32752
10007008:	00dffc34 	movhi	r3,32752
1000700c:	10c01c26 	beq	r2,r3,10007080 <_dtoa_r+0xf0>
10007010:	000d883a 	mov	r6,zero
10007014:	000f883a 	mov	r7,zero
10007018:	9009883a 	mov	r4,r18
1000701c:	980b883a 	mov	r5,r19
10007020:	000ff780 	call	1000ff78 <__eqdf2>
10007024:	10002b1e 	bne	r2,zero,100070d4 <_dtoa_r+0x144>
10007028:	d9c02317 	ldw	r7,140(sp)
1000702c:	00800044 	movi	r2,1
10007030:	38800015 	stw	r2,0(r7)
10007034:	d8802517 	ldw	r2,148(sp)
10007038:	10019e26 	beq	r2,zero,100076b4 <_dtoa_r+0x724>
1000703c:	d8c02517 	ldw	r3,148(sp)
10007040:	00840074 	movhi	r2,4097
10007044:	1091bc44 	addi	r2,r2,18161
10007048:	18800015 	stw	r2,0(r3)
1000704c:	10bfffc4 	addi	r2,r2,-1
10007050:	dfc02117 	ldw	ra,132(sp)
10007054:	df002017 	ldw	fp,128(sp)
10007058:	ddc01f17 	ldw	r23,124(sp)
1000705c:	dd801e17 	ldw	r22,120(sp)
10007060:	dd401d17 	ldw	r21,116(sp)
10007064:	dd001c17 	ldw	r20,112(sp)
10007068:	dcc01b17 	ldw	r19,108(sp)
1000706c:	dc801a17 	ldw	r18,104(sp)
10007070:	dc401917 	ldw	r17,100(sp)
10007074:	dc001817 	ldw	r16,96(sp)
10007078:	dec02204 	addi	sp,sp,136
1000707c:	f800283a 	ret
10007080:	d8c02317 	ldw	r3,140(sp)
10007084:	0089c3c4 	movi	r2,9999
10007088:	18800015 	stw	r2,0(r3)
1000708c:	90017726 	beq	r18,zero,1000766c <_dtoa_r+0x6dc>
10007090:	00840074 	movhi	r2,4097
10007094:	1091c804 	addi	r2,r2,18208
10007098:	d9002517 	ldw	r4,148(sp)
1000709c:	203fec26 	beq	r4,zero,10007050 <__alt_data_end+0xf8007050>
100070a0:	10c000c7 	ldb	r3,3(r2)
100070a4:	1801781e 	bne	r3,zero,10007688 <_dtoa_r+0x6f8>
100070a8:	10c000c4 	addi	r3,r2,3
100070ac:	d9802517 	ldw	r6,148(sp)
100070b0:	30c00015 	stw	r3,0(r6)
100070b4:	003fe606 	br	10007050 <__alt_data_end+0xf8007050>
100070b8:	04e00034 	movhi	r19,32768
100070bc:	9cffffc4 	addi	r19,r19,-1
100070c0:	00800044 	movi	r2,1
100070c4:	8ce6703a 	and	r19,r17,r19
100070c8:	80800015 	stw	r2,0(r16)
100070cc:	9823883a 	mov	r17,r19
100070d0:	003fcc06 	br	10007004 <__alt_data_end+0xf8007004>
100070d4:	d8800204 	addi	r2,sp,8
100070d8:	d8800015 	stw	r2,0(sp)
100070dc:	d9c00104 	addi	r7,sp,4
100070e0:	900b883a 	mov	r5,r18
100070e4:	980d883a 	mov	r6,r19
100070e8:	e009883a 	mov	r4,fp
100070ec:	8820d53a 	srli	r16,r17,20
100070f0:	000b3980 	call	1000b398 <__d2b>
100070f4:	d8800915 	stw	r2,36(sp)
100070f8:	8001651e 	bne	r16,zero,10007690 <_dtoa_r+0x700>
100070fc:	dd800217 	ldw	r22,8(sp)
10007100:	dc000117 	ldw	r16,4(sp)
10007104:	00800804 	movi	r2,32
10007108:	b421883a 	add	r16,r22,r16
1000710c:	80c10c84 	addi	r3,r16,1074
10007110:	10c2d10e 	bge	r2,r3,10007c58 <_dtoa_r+0xcc8>
10007114:	00801004 	movi	r2,64
10007118:	81010484 	addi	r4,r16,1042
1000711c:	10c7c83a 	sub	r3,r2,r3
10007120:	9108d83a 	srl	r4,r18,r4
10007124:	88e2983a 	sll	r17,r17,r3
10007128:	2448b03a 	or	r4,r4,r17
1000712c:	00114940 	call	10011494 <__floatunsidf>
10007130:	017f8434 	movhi	r5,65040
10007134:	01800044 	movi	r6,1
10007138:	1009883a 	mov	r4,r2
1000713c:	194b883a 	add	r5,r3,r5
10007140:	843fffc4 	addi	r16,r16,-1
10007144:	d9801115 	stw	r6,68(sp)
10007148:	000d883a 	mov	r6,zero
1000714c:	01cffe34 	movhi	r7,16376
10007150:	0010a3c0 	call	10010a3c <__subdf3>
10007154:	0198dbf4 	movhi	r6,25455
10007158:	01cff4f4 	movhi	r7,16339
1000715c:	3190d844 	addi	r6,r6,17249
10007160:	39e1e9c4 	addi	r7,r7,-30809
10007164:	1009883a 	mov	r4,r2
10007168:	180b883a 	mov	r5,r3
1000716c:	00101d00 	call	100101d0 <__muldf3>
10007170:	01a2d874 	movhi	r6,35681
10007174:	01cff1f4 	movhi	r7,16327
10007178:	31b22cc4 	addi	r6,r6,-14157
1000717c:	39e28a04 	addi	r7,r7,-30168
10007180:	180b883a 	mov	r5,r3
10007184:	1009883a 	mov	r4,r2
10007188:	000ecfc0 	call	1000ecfc <__adddf3>
1000718c:	8009883a 	mov	r4,r16
10007190:	1029883a 	mov	r20,r2
10007194:	1823883a 	mov	r17,r3
10007198:	00113b80 	call	100113b8 <__floatsidf>
1000719c:	019427f4 	movhi	r6,20639
100071a0:	01cff4f4 	movhi	r7,16339
100071a4:	319e7ec4 	addi	r6,r6,31227
100071a8:	39d104c4 	addi	r7,r7,17427
100071ac:	1009883a 	mov	r4,r2
100071b0:	180b883a 	mov	r5,r3
100071b4:	00101d00 	call	100101d0 <__muldf3>
100071b8:	100d883a 	mov	r6,r2
100071bc:	180f883a 	mov	r7,r3
100071c0:	a009883a 	mov	r4,r20
100071c4:	880b883a 	mov	r5,r17
100071c8:	000ecfc0 	call	1000ecfc <__adddf3>
100071cc:	1009883a 	mov	r4,r2
100071d0:	180b883a 	mov	r5,r3
100071d4:	1029883a 	mov	r20,r2
100071d8:	1823883a 	mov	r17,r3
100071dc:	00113380 	call	10011338 <__fixdfsi>
100071e0:	000d883a 	mov	r6,zero
100071e4:	000f883a 	mov	r7,zero
100071e8:	a009883a 	mov	r4,r20
100071ec:	880b883a 	mov	r5,r17
100071f0:	d8800515 	stw	r2,20(sp)
100071f4:	00100dc0 	call	100100dc <__ledf2>
100071f8:	10028716 	blt	r2,zero,10007c18 <_dtoa_r+0xc88>
100071fc:	d8c00517 	ldw	r3,20(sp)
10007200:	00800584 	movi	r2,22
10007204:	10c27536 	bltu	r2,r3,10007bdc <_dtoa_r+0xc4c>
10007208:	180490fa 	slli	r2,r3,3
1000720c:	00c40074 	movhi	r3,4097
10007210:	18d1e404 	addi	r3,r3,18320
10007214:	1885883a 	add	r2,r3,r2
10007218:	11000017 	ldw	r4,0(r2)
1000721c:	11400117 	ldw	r5,4(r2)
10007220:	900d883a 	mov	r6,r18
10007224:	980f883a 	mov	r7,r19
10007228:	00100000 	call	10010000 <__gedf2>
1000722c:	00828d0e 	bge	zero,r2,10007c64 <_dtoa_r+0xcd4>
10007230:	d9000517 	ldw	r4,20(sp)
10007234:	d8000e15 	stw	zero,56(sp)
10007238:	213fffc4 	addi	r4,r4,-1
1000723c:	d9000515 	stw	r4,20(sp)
10007240:	b42dc83a 	sub	r22,r22,r16
10007244:	b5bfffc4 	addi	r22,r22,-1
10007248:	b0026f16 	blt	r22,zero,10007c08 <_dtoa_r+0xc78>
1000724c:	d8000815 	stw	zero,32(sp)
10007250:	d9c00517 	ldw	r7,20(sp)
10007254:	38026416 	blt	r7,zero,10007be8 <_dtoa_r+0xc58>
10007258:	b1ed883a 	add	r22,r22,r7
1000725c:	d9c00d15 	stw	r7,52(sp)
10007260:	d8000a15 	stw	zero,40(sp)
10007264:	d9800317 	ldw	r6,12(sp)
10007268:	00800244 	movi	r2,9
1000726c:	11811436 	bltu	r2,r6,100076c0 <_dtoa_r+0x730>
10007270:	00800144 	movi	r2,5
10007274:	1184e10e 	bge	r2,r6,100085fc <_dtoa_r+0x166c>
10007278:	31bfff04 	addi	r6,r6,-4
1000727c:	d9800315 	stw	r6,12(sp)
10007280:	0023883a 	mov	r17,zero
10007284:	d9800317 	ldw	r6,12(sp)
10007288:	008000c4 	movi	r2,3
1000728c:	30836726 	beq	r6,r2,1000802c <_dtoa_r+0x109c>
10007290:	1183410e 	bge	r2,r6,10007f98 <_dtoa_r+0x1008>
10007294:	d9c00317 	ldw	r7,12(sp)
10007298:	00800104 	movi	r2,4
1000729c:	38827c26 	beq	r7,r2,10007c90 <_dtoa_r+0xd00>
100072a0:	00800144 	movi	r2,5
100072a4:	3884c41e 	bne	r7,r2,100085b8 <_dtoa_r+0x1628>
100072a8:	00800044 	movi	r2,1
100072ac:	d8800b15 	stw	r2,44(sp)
100072b0:	d8c00517 	ldw	r3,20(sp)
100072b4:	d9002217 	ldw	r4,136(sp)
100072b8:	1907883a 	add	r3,r3,r4
100072bc:	19800044 	addi	r6,r3,1
100072c0:	d8c00c15 	stw	r3,48(sp)
100072c4:	d9800615 	stw	r6,24(sp)
100072c8:	0183a40e 	bge	zero,r6,1000815c <_dtoa_r+0x11cc>
100072cc:	d9800617 	ldw	r6,24(sp)
100072d0:	3021883a 	mov	r16,r6
100072d4:	e0001115 	stw	zero,68(fp)
100072d8:	008005c4 	movi	r2,23
100072dc:	1184c92e 	bgeu	r2,r6,10008604 <_dtoa_r+0x1674>
100072e0:	00c00044 	movi	r3,1
100072e4:	00800104 	movi	r2,4
100072e8:	1085883a 	add	r2,r2,r2
100072ec:	11000504 	addi	r4,r2,20
100072f0:	180b883a 	mov	r5,r3
100072f4:	18c00044 	addi	r3,r3,1
100072f8:	313ffb2e 	bgeu	r6,r4,100072e8 <__alt_data_end+0xf80072e8>
100072fc:	e1401115 	stw	r5,68(fp)
10007300:	e009883a 	mov	r4,fp
10007304:	000a6480 	call	1000a648 <_Balloc>
10007308:	d8800715 	stw	r2,28(sp)
1000730c:	e0801015 	stw	r2,64(fp)
10007310:	00800384 	movi	r2,14
10007314:	1400f736 	bltu	r2,r16,100076f4 <_dtoa_r+0x764>
10007318:	8800f626 	beq	r17,zero,100076f4 <_dtoa_r+0x764>
1000731c:	d9c00517 	ldw	r7,20(sp)
10007320:	01c39a0e 	bge	zero,r7,1000818c <_dtoa_r+0x11fc>
10007324:	388003cc 	andi	r2,r7,15
10007328:	100490fa 	slli	r2,r2,3
1000732c:	382bd13a 	srai	r21,r7,4
10007330:	00c40074 	movhi	r3,4097
10007334:	18d1e404 	addi	r3,r3,18320
10007338:	1885883a 	add	r2,r3,r2
1000733c:	a8c0040c 	andi	r3,r21,16
10007340:	12400017 	ldw	r9,0(r2)
10007344:	12000117 	ldw	r8,4(r2)
10007348:	18037926 	beq	r3,zero,10008130 <_dtoa_r+0x11a0>
1000734c:	00840074 	movhi	r2,4097
10007350:	1091da04 	addi	r2,r2,18280
10007354:	11800817 	ldw	r6,32(r2)
10007358:	11c00917 	ldw	r7,36(r2)
1000735c:	9009883a 	mov	r4,r18
10007360:	980b883a 	mov	r5,r19
10007364:	da001715 	stw	r8,92(sp)
10007368:	da401615 	stw	r9,88(sp)
1000736c:	000f5a80 	call	1000f5a8 <__divdf3>
10007370:	da001717 	ldw	r8,92(sp)
10007374:	da401617 	ldw	r9,88(sp)
10007378:	ad4003cc 	andi	r21,r21,15
1000737c:	040000c4 	movi	r16,3
10007380:	1023883a 	mov	r17,r2
10007384:	1829883a 	mov	r20,r3
10007388:	a8001126 	beq	r21,zero,100073d0 <_dtoa_r+0x440>
1000738c:	05c40074 	movhi	r23,4097
10007390:	bdd1da04 	addi	r23,r23,18280
10007394:	4805883a 	mov	r2,r9
10007398:	4007883a 	mov	r3,r8
1000739c:	a980004c 	andi	r6,r21,1
100073a0:	1009883a 	mov	r4,r2
100073a4:	a82bd07a 	srai	r21,r21,1
100073a8:	180b883a 	mov	r5,r3
100073ac:	30000426 	beq	r6,zero,100073c0 <_dtoa_r+0x430>
100073b0:	b9800017 	ldw	r6,0(r23)
100073b4:	b9c00117 	ldw	r7,4(r23)
100073b8:	84000044 	addi	r16,r16,1
100073bc:	00101d00 	call	100101d0 <__muldf3>
100073c0:	bdc00204 	addi	r23,r23,8
100073c4:	a83ff51e 	bne	r21,zero,1000739c <__alt_data_end+0xf800739c>
100073c8:	1013883a 	mov	r9,r2
100073cc:	1811883a 	mov	r8,r3
100073d0:	480d883a 	mov	r6,r9
100073d4:	400f883a 	mov	r7,r8
100073d8:	8809883a 	mov	r4,r17
100073dc:	a00b883a 	mov	r5,r20
100073e0:	000f5a80 	call	1000f5a8 <__divdf3>
100073e4:	d8800f15 	stw	r2,60(sp)
100073e8:	d8c01015 	stw	r3,64(sp)
100073ec:	d8c00e17 	ldw	r3,56(sp)
100073f0:	18000626 	beq	r3,zero,1000740c <_dtoa_r+0x47c>
100073f4:	d9000f17 	ldw	r4,60(sp)
100073f8:	d9401017 	ldw	r5,64(sp)
100073fc:	000d883a 	mov	r6,zero
10007400:	01cffc34 	movhi	r7,16368
10007404:	00100dc0 	call	100100dc <__ledf2>
10007408:	10040b16 	blt	r2,zero,10008438 <_dtoa_r+0x14a8>
1000740c:	8009883a 	mov	r4,r16
10007410:	00113b80 	call	100113b8 <__floatsidf>
10007414:	d9800f17 	ldw	r6,60(sp)
10007418:	d9c01017 	ldw	r7,64(sp)
1000741c:	1009883a 	mov	r4,r2
10007420:	180b883a 	mov	r5,r3
10007424:	00101d00 	call	100101d0 <__muldf3>
10007428:	000d883a 	mov	r6,zero
1000742c:	01d00734 	movhi	r7,16412
10007430:	1009883a 	mov	r4,r2
10007434:	180b883a 	mov	r5,r3
10007438:	000ecfc0 	call	1000ecfc <__adddf3>
1000743c:	1021883a 	mov	r16,r2
10007440:	d8800617 	ldw	r2,24(sp)
10007444:	047f3034 	movhi	r17,64704
10007448:	1c63883a 	add	r17,r3,r17
1000744c:	10031826 	beq	r2,zero,100080b0 <_dtoa_r+0x1120>
10007450:	d8c00517 	ldw	r3,20(sp)
10007454:	db000617 	ldw	r12,24(sp)
10007458:	d8c01315 	stw	r3,76(sp)
1000745c:	d9000b17 	ldw	r4,44(sp)
10007460:	20038f26 	beq	r4,zero,100082a0 <_dtoa_r+0x1310>
10007464:	60bfffc4 	addi	r2,r12,-1
10007468:	100490fa 	slli	r2,r2,3
1000746c:	00c40074 	movhi	r3,4097
10007470:	18d1e404 	addi	r3,r3,18320
10007474:	1885883a 	add	r2,r3,r2
10007478:	11800017 	ldw	r6,0(r2)
1000747c:	11c00117 	ldw	r7,4(r2)
10007480:	d8800717 	ldw	r2,28(sp)
10007484:	0009883a 	mov	r4,zero
10007488:	014ff834 	movhi	r5,16352
1000748c:	db001615 	stw	r12,88(sp)
10007490:	15c00044 	addi	r23,r2,1
10007494:	000f5a80 	call	1000f5a8 <__divdf3>
10007498:	800d883a 	mov	r6,r16
1000749c:	880f883a 	mov	r7,r17
100074a0:	1009883a 	mov	r4,r2
100074a4:	180b883a 	mov	r5,r3
100074a8:	0010a3c0 	call	10010a3c <__subdf3>
100074ac:	d9401017 	ldw	r5,64(sp)
100074b0:	d9000f17 	ldw	r4,60(sp)
100074b4:	102b883a 	mov	r21,r2
100074b8:	d8c01215 	stw	r3,72(sp)
100074bc:	00113380 	call	10011338 <__fixdfsi>
100074c0:	1009883a 	mov	r4,r2
100074c4:	1029883a 	mov	r20,r2
100074c8:	00113b80 	call	100113b8 <__floatsidf>
100074cc:	d9000f17 	ldw	r4,60(sp)
100074d0:	d9401017 	ldw	r5,64(sp)
100074d4:	100d883a 	mov	r6,r2
100074d8:	180f883a 	mov	r7,r3
100074dc:	0010a3c0 	call	10010a3c <__subdf3>
100074e0:	1823883a 	mov	r17,r3
100074e4:	d8c00717 	ldw	r3,28(sp)
100074e8:	d9401217 	ldw	r5,72(sp)
100074ec:	a2000c04 	addi	r8,r20,48
100074f0:	1021883a 	mov	r16,r2
100074f4:	1a000005 	stb	r8,0(r3)
100074f8:	800d883a 	mov	r6,r16
100074fc:	880f883a 	mov	r7,r17
10007500:	a809883a 	mov	r4,r21
10007504:	4029883a 	mov	r20,r8
10007508:	00100000 	call	10010000 <__gedf2>
1000750c:	00841d16 	blt	zero,r2,10008584 <_dtoa_r+0x15f4>
10007510:	800d883a 	mov	r6,r16
10007514:	880f883a 	mov	r7,r17
10007518:	0009883a 	mov	r4,zero
1000751c:	014ffc34 	movhi	r5,16368
10007520:	0010a3c0 	call	10010a3c <__subdf3>
10007524:	d9401217 	ldw	r5,72(sp)
10007528:	100d883a 	mov	r6,r2
1000752c:	180f883a 	mov	r7,r3
10007530:	a809883a 	mov	r4,r21
10007534:	00100000 	call	10010000 <__gedf2>
10007538:	db001617 	ldw	r12,88(sp)
1000753c:	00840e16 	blt	zero,r2,10008578 <_dtoa_r+0x15e8>
10007540:	00800044 	movi	r2,1
10007544:	13006b0e 	bge	r2,r12,100076f4 <_dtoa_r+0x764>
10007548:	d9000717 	ldw	r4,28(sp)
1000754c:	dd800f15 	stw	r22,60(sp)
10007550:	dcc01015 	stw	r19,64(sp)
10007554:	2319883a 	add	r12,r4,r12
10007558:	dcc01217 	ldw	r19,72(sp)
1000755c:	602d883a 	mov	r22,r12
10007560:	dc801215 	stw	r18,72(sp)
10007564:	b825883a 	mov	r18,r23
10007568:	00000906 	br	10007590 <_dtoa_r+0x600>
1000756c:	0010a3c0 	call	10010a3c <__subdf3>
10007570:	a80d883a 	mov	r6,r21
10007574:	980f883a 	mov	r7,r19
10007578:	1009883a 	mov	r4,r2
1000757c:	180b883a 	mov	r5,r3
10007580:	00100dc0 	call	100100dc <__ledf2>
10007584:	1003e816 	blt	r2,zero,10008528 <_dtoa_r+0x1598>
10007588:	b825883a 	mov	r18,r23
1000758c:	bd83e926 	beq	r23,r22,10008534 <_dtoa_r+0x15a4>
10007590:	a809883a 	mov	r4,r21
10007594:	980b883a 	mov	r5,r19
10007598:	000d883a 	mov	r6,zero
1000759c:	01d00934 	movhi	r7,16420
100075a0:	00101d00 	call	100101d0 <__muldf3>
100075a4:	000d883a 	mov	r6,zero
100075a8:	01d00934 	movhi	r7,16420
100075ac:	8009883a 	mov	r4,r16
100075b0:	880b883a 	mov	r5,r17
100075b4:	102b883a 	mov	r21,r2
100075b8:	1827883a 	mov	r19,r3
100075bc:	00101d00 	call	100101d0 <__muldf3>
100075c0:	180b883a 	mov	r5,r3
100075c4:	1009883a 	mov	r4,r2
100075c8:	1821883a 	mov	r16,r3
100075cc:	1023883a 	mov	r17,r2
100075d0:	00113380 	call	10011338 <__fixdfsi>
100075d4:	1009883a 	mov	r4,r2
100075d8:	1029883a 	mov	r20,r2
100075dc:	00113b80 	call	100113b8 <__floatsidf>
100075e0:	8809883a 	mov	r4,r17
100075e4:	800b883a 	mov	r5,r16
100075e8:	100d883a 	mov	r6,r2
100075ec:	180f883a 	mov	r7,r3
100075f0:	0010a3c0 	call	10010a3c <__subdf3>
100075f4:	a5000c04 	addi	r20,r20,48
100075f8:	a80d883a 	mov	r6,r21
100075fc:	980f883a 	mov	r7,r19
10007600:	1009883a 	mov	r4,r2
10007604:	180b883a 	mov	r5,r3
10007608:	95000005 	stb	r20,0(r18)
1000760c:	1021883a 	mov	r16,r2
10007610:	1823883a 	mov	r17,r3
10007614:	00100dc0 	call	100100dc <__ledf2>
10007618:	bdc00044 	addi	r23,r23,1
1000761c:	800d883a 	mov	r6,r16
10007620:	880f883a 	mov	r7,r17
10007624:	0009883a 	mov	r4,zero
10007628:	014ffc34 	movhi	r5,16368
1000762c:	103fcf0e 	bge	r2,zero,1000756c <__alt_data_end+0xf800756c>
10007630:	d8c01317 	ldw	r3,76(sp)
10007634:	d8c00515 	stw	r3,20(sp)
10007638:	d9400917 	ldw	r5,36(sp)
1000763c:	e009883a 	mov	r4,fp
10007640:	000a6f00 	call	1000a6f0 <_Bfree>
10007644:	d9000517 	ldw	r4,20(sp)
10007648:	d9802317 	ldw	r6,140(sp)
1000764c:	d9c02517 	ldw	r7,148(sp)
10007650:	b8000005 	stb	zero,0(r23)
10007654:	20800044 	addi	r2,r4,1
10007658:	30800015 	stw	r2,0(r6)
1000765c:	3802aa26 	beq	r7,zero,10008108 <_dtoa_r+0x1178>
10007660:	3dc00015 	stw	r23,0(r7)
10007664:	d8800717 	ldw	r2,28(sp)
10007668:	003e7906 	br	10007050 <__alt_data_end+0xf8007050>
1000766c:	00800434 	movhi	r2,16
10007670:	10bfffc4 	addi	r2,r2,-1
10007674:	88a2703a 	and	r17,r17,r2
10007678:	883e851e 	bne	r17,zero,10007090 <__alt_data_end+0xf8007090>
1000767c:	00840074 	movhi	r2,4097
10007680:	1091c504 	addi	r2,r2,18196
10007684:	003e8406 	br	10007098 <__alt_data_end+0xf8007098>
10007688:	10c00204 	addi	r3,r2,8
1000768c:	003e8706 	br	100070ac <__alt_data_end+0xf80070ac>
10007690:	01400434 	movhi	r5,16
10007694:	297fffc4 	addi	r5,r5,-1
10007698:	994a703a 	and	r5,r19,r5
1000769c:	9009883a 	mov	r4,r18
100076a0:	843f0044 	addi	r16,r16,-1023
100076a4:	294ffc34 	orhi	r5,r5,16368
100076a8:	dd800217 	ldw	r22,8(sp)
100076ac:	d8001115 	stw	zero,68(sp)
100076b0:	003ea506 	br	10007148 <__alt_data_end+0xf8007148>
100076b4:	00840074 	movhi	r2,4097
100076b8:	1091bc04 	addi	r2,r2,18160
100076bc:	003e6406 	br	10007050 <__alt_data_end+0xf8007050>
100076c0:	e0001115 	stw	zero,68(fp)
100076c4:	000b883a 	mov	r5,zero
100076c8:	e009883a 	mov	r4,fp
100076cc:	000a6480 	call	1000a648 <_Balloc>
100076d0:	01bfffc4 	movi	r6,-1
100076d4:	01c00044 	movi	r7,1
100076d8:	d8800715 	stw	r2,28(sp)
100076dc:	d9800c15 	stw	r6,48(sp)
100076e0:	e0801015 	stw	r2,64(fp)
100076e4:	d8000315 	stw	zero,12(sp)
100076e8:	d9c00b15 	stw	r7,44(sp)
100076ec:	d9800615 	stw	r6,24(sp)
100076f0:	d8002215 	stw	zero,136(sp)
100076f4:	d8800117 	ldw	r2,4(sp)
100076f8:	10008916 	blt	r2,zero,10007920 <_dtoa_r+0x990>
100076fc:	d9000517 	ldw	r4,20(sp)
10007700:	00c00384 	movi	r3,14
10007704:	19008616 	blt	r3,r4,10007920 <_dtoa_r+0x990>
10007708:	200490fa 	slli	r2,r4,3
1000770c:	00c40074 	movhi	r3,4097
10007710:	d9802217 	ldw	r6,136(sp)
10007714:	18d1e404 	addi	r3,r3,18320
10007718:	1885883a 	add	r2,r3,r2
1000771c:	14000017 	ldw	r16,0(r2)
10007720:	14400117 	ldw	r17,4(r2)
10007724:	30016316 	blt	r6,zero,10007cb4 <_dtoa_r+0xd24>
10007728:	800d883a 	mov	r6,r16
1000772c:	880f883a 	mov	r7,r17
10007730:	9009883a 	mov	r4,r18
10007734:	980b883a 	mov	r5,r19
10007738:	000f5a80 	call	1000f5a8 <__divdf3>
1000773c:	180b883a 	mov	r5,r3
10007740:	1009883a 	mov	r4,r2
10007744:	00113380 	call	10011338 <__fixdfsi>
10007748:	1009883a 	mov	r4,r2
1000774c:	102b883a 	mov	r21,r2
10007750:	00113b80 	call	100113b8 <__floatsidf>
10007754:	800d883a 	mov	r6,r16
10007758:	880f883a 	mov	r7,r17
1000775c:	1009883a 	mov	r4,r2
10007760:	180b883a 	mov	r5,r3
10007764:	00101d00 	call	100101d0 <__muldf3>
10007768:	100d883a 	mov	r6,r2
1000776c:	180f883a 	mov	r7,r3
10007770:	9009883a 	mov	r4,r18
10007774:	980b883a 	mov	r5,r19
10007778:	0010a3c0 	call	10010a3c <__subdf3>
1000777c:	d9c00717 	ldw	r7,28(sp)
10007780:	1009883a 	mov	r4,r2
10007784:	a8800c04 	addi	r2,r21,48
10007788:	38800005 	stb	r2,0(r7)
1000778c:	3dc00044 	addi	r23,r7,1
10007790:	d9c00617 	ldw	r7,24(sp)
10007794:	01800044 	movi	r6,1
10007798:	180b883a 	mov	r5,r3
1000779c:	2005883a 	mov	r2,r4
100077a0:	39803826 	beq	r7,r6,10007884 <_dtoa_r+0x8f4>
100077a4:	000d883a 	mov	r6,zero
100077a8:	01d00934 	movhi	r7,16420
100077ac:	00101d00 	call	100101d0 <__muldf3>
100077b0:	000d883a 	mov	r6,zero
100077b4:	000f883a 	mov	r7,zero
100077b8:	1009883a 	mov	r4,r2
100077bc:	180b883a 	mov	r5,r3
100077c0:	1025883a 	mov	r18,r2
100077c4:	1827883a 	mov	r19,r3
100077c8:	000ff780 	call	1000ff78 <__eqdf2>
100077cc:	103f9a26 	beq	r2,zero,10007638 <__alt_data_end+0xf8007638>
100077d0:	d9c00617 	ldw	r7,24(sp)
100077d4:	d8c00717 	ldw	r3,28(sp)
100077d8:	b829883a 	mov	r20,r23
100077dc:	38bfffc4 	addi	r2,r7,-1
100077e0:	18ad883a 	add	r22,r3,r2
100077e4:	00000a06 	br	10007810 <_dtoa_r+0x880>
100077e8:	00101d00 	call	100101d0 <__muldf3>
100077ec:	000d883a 	mov	r6,zero
100077f0:	000f883a 	mov	r7,zero
100077f4:	1009883a 	mov	r4,r2
100077f8:	180b883a 	mov	r5,r3
100077fc:	1025883a 	mov	r18,r2
10007800:	1827883a 	mov	r19,r3
10007804:	b829883a 	mov	r20,r23
10007808:	000ff780 	call	1000ff78 <__eqdf2>
1000780c:	103f8a26 	beq	r2,zero,10007638 <__alt_data_end+0xf8007638>
10007810:	800d883a 	mov	r6,r16
10007814:	880f883a 	mov	r7,r17
10007818:	9009883a 	mov	r4,r18
1000781c:	980b883a 	mov	r5,r19
10007820:	000f5a80 	call	1000f5a8 <__divdf3>
10007824:	180b883a 	mov	r5,r3
10007828:	1009883a 	mov	r4,r2
1000782c:	00113380 	call	10011338 <__fixdfsi>
10007830:	1009883a 	mov	r4,r2
10007834:	102b883a 	mov	r21,r2
10007838:	00113b80 	call	100113b8 <__floatsidf>
1000783c:	800d883a 	mov	r6,r16
10007840:	880f883a 	mov	r7,r17
10007844:	1009883a 	mov	r4,r2
10007848:	180b883a 	mov	r5,r3
1000784c:	00101d00 	call	100101d0 <__muldf3>
10007850:	100d883a 	mov	r6,r2
10007854:	180f883a 	mov	r7,r3
10007858:	9009883a 	mov	r4,r18
1000785c:	980b883a 	mov	r5,r19
10007860:	0010a3c0 	call	10010a3c <__subdf3>
10007864:	aa000c04 	addi	r8,r21,48
10007868:	a2000005 	stb	r8,0(r20)
1000786c:	000d883a 	mov	r6,zero
10007870:	01d00934 	movhi	r7,16420
10007874:	1009883a 	mov	r4,r2
10007878:	180b883a 	mov	r5,r3
1000787c:	a5c00044 	addi	r23,r20,1
10007880:	b53fd91e 	bne	r22,r20,100077e8 <__alt_data_end+0xf80077e8>
10007884:	100d883a 	mov	r6,r2
10007888:	180f883a 	mov	r7,r3
1000788c:	1009883a 	mov	r4,r2
10007890:	180b883a 	mov	r5,r3
10007894:	000ecfc0 	call	1000ecfc <__adddf3>
10007898:	100d883a 	mov	r6,r2
1000789c:	180f883a 	mov	r7,r3
100078a0:	8009883a 	mov	r4,r16
100078a4:	880b883a 	mov	r5,r17
100078a8:	1027883a 	mov	r19,r2
100078ac:	1825883a 	mov	r18,r3
100078b0:	00100dc0 	call	100100dc <__ledf2>
100078b4:	10000816 	blt	r2,zero,100078d8 <_dtoa_r+0x948>
100078b8:	980d883a 	mov	r6,r19
100078bc:	900f883a 	mov	r7,r18
100078c0:	8009883a 	mov	r4,r16
100078c4:	880b883a 	mov	r5,r17
100078c8:	000ff780 	call	1000ff78 <__eqdf2>
100078cc:	103f5a1e 	bne	r2,zero,10007638 <__alt_data_end+0xf8007638>
100078d0:	ad40004c 	andi	r21,r21,1
100078d4:	a83f5826 	beq	r21,zero,10007638 <__alt_data_end+0xf8007638>
100078d8:	bd3fffc3 	ldbu	r20,-1(r23)
100078dc:	b8bfffc4 	addi	r2,r23,-1
100078e0:	1007883a 	mov	r3,r2
100078e4:	01400e44 	movi	r5,57
100078e8:	d9800717 	ldw	r6,28(sp)
100078ec:	00000506 	br	10007904 <_dtoa_r+0x974>
100078f0:	18ffffc4 	addi	r3,r3,-1
100078f4:	11824726 	beq	r2,r6,10008214 <_dtoa_r+0x1284>
100078f8:	1d000003 	ldbu	r20,0(r3)
100078fc:	102f883a 	mov	r23,r2
10007900:	10bfffc4 	addi	r2,r2,-1
10007904:	a1003fcc 	andi	r4,r20,255
10007908:	2100201c 	xori	r4,r4,128
1000790c:	213fe004 	addi	r4,r4,-128
10007910:	217ff726 	beq	r4,r5,100078f0 <__alt_data_end+0xf80078f0>
10007914:	a2000044 	addi	r8,r20,1
10007918:	12000005 	stb	r8,0(r2)
1000791c:	003f4606 	br	10007638 <__alt_data_end+0xf8007638>
10007920:	d9000b17 	ldw	r4,44(sp)
10007924:	2000c826 	beq	r4,zero,10007c48 <_dtoa_r+0xcb8>
10007928:	d9800317 	ldw	r6,12(sp)
1000792c:	00c00044 	movi	r3,1
10007930:	1980f90e 	bge	r3,r6,10007d18 <_dtoa_r+0xd88>
10007934:	d8800617 	ldw	r2,24(sp)
10007938:	d8c00a17 	ldw	r3,40(sp)
1000793c:	157fffc4 	addi	r21,r2,-1
10007940:	1d41f316 	blt	r3,r21,10008110 <_dtoa_r+0x1180>
10007944:	1d6bc83a 	sub	r21,r3,r21
10007948:	d9c00617 	ldw	r7,24(sp)
1000794c:	3802aa16 	blt	r7,zero,100083f8 <_dtoa_r+0x1468>
10007950:	dd000817 	ldw	r20,32(sp)
10007954:	d8800617 	ldw	r2,24(sp)
10007958:	d8c00817 	ldw	r3,32(sp)
1000795c:	01400044 	movi	r5,1
10007960:	e009883a 	mov	r4,fp
10007964:	1887883a 	add	r3,r3,r2
10007968:	d8c00815 	stw	r3,32(sp)
1000796c:	b0ad883a 	add	r22,r22,r2
10007970:	000aa7c0 	call	1000aa7c <__i2b>
10007974:	1023883a 	mov	r17,r2
10007978:	a0000826 	beq	r20,zero,1000799c <_dtoa_r+0xa0c>
1000797c:	0580070e 	bge	zero,r22,1000799c <_dtoa_r+0xa0c>
10007980:	a005883a 	mov	r2,r20
10007984:	b500b916 	blt	r22,r20,10007c6c <_dtoa_r+0xcdc>
10007988:	d9000817 	ldw	r4,32(sp)
1000798c:	a0a9c83a 	sub	r20,r20,r2
10007990:	b0adc83a 	sub	r22,r22,r2
10007994:	2089c83a 	sub	r4,r4,r2
10007998:	d9000815 	stw	r4,32(sp)
1000799c:	d9800a17 	ldw	r6,40(sp)
100079a0:	0181810e 	bge	zero,r6,10007fa8 <_dtoa_r+0x1018>
100079a4:	d9c00b17 	ldw	r7,44(sp)
100079a8:	3800b326 	beq	r7,zero,10007c78 <_dtoa_r+0xce8>
100079ac:	a800b226 	beq	r21,zero,10007c78 <_dtoa_r+0xce8>
100079b0:	880b883a 	mov	r5,r17
100079b4:	a80d883a 	mov	r6,r21
100079b8:	e009883a 	mov	r4,fp
100079bc:	000ad440 	call	1000ad44 <__pow5mult>
100079c0:	d9800917 	ldw	r6,36(sp)
100079c4:	100b883a 	mov	r5,r2
100079c8:	e009883a 	mov	r4,fp
100079cc:	1023883a 	mov	r17,r2
100079d0:	000aab80 	call	1000aab8 <__multiply>
100079d4:	1021883a 	mov	r16,r2
100079d8:	d8800a17 	ldw	r2,40(sp)
100079dc:	d9400917 	ldw	r5,36(sp)
100079e0:	e009883a 	mov	r4,fp
100079e4:	1545c83a 	sub	r2,r2,r21
100079e8:	d8800a15 	stw	r2,40(sp)
100079ec:	000a6f00 	call	1000a6f0 <_Bfree>
100079f0:	d8c00a17 	ldw	r3,40(sp)
100079f4:	18009f1e 	bne	r3,zero,10007c74 <_dtoa_r+0xce4>
100079f8:	05c00044 	movi	r23,1
100079fc:	e009883a 	mov	r4,fp
10007a00:	b80b883a 	mov	r5,r23
10007a04:	000aa7c0 	call	1000aa7c <__i2b>
10007a08:	d9000d17 	ldw	r4,52(sp)
10007a0c:	102b883a 	mov	r21,r2
10007a10:	2000ce26 	beq	r4,zero,10007d4c <_dtoa_r+0xdbc>
10007a14:	200d883a 	mov	r6,r4
10007a18:	100b883a 	mov	r5,r2
10007a1c:	e009883a 	mov	r4,fp
10007a20:	000ad440 	call	1000ad44 <__pow5mult>
10007a24:	d9800317 	ldw	r6,12(sp)
10007a28:	102b883a 	mov	r21,r2
10007a2c:	b981810e 	bge	r23,r6,10008034 <_dtoa_r+0x10a4>
10007a30:	0027883a 	mov	r19,zero
10007a34:	a8800417 	ldw	r2,16(r21)
10007a38:	05c00804 	movi	r23,32
10007a3c:	10800104 	addi	r2,r2,4
10007a40:	1085883a 	add	r2,r2,r2
10007a44:	1085883a 	add	r2,r2,r2
10007a48:	a885883a 	add	r2,r21,r2
10007a4c:	11000017 	ldw	r4,0(r2)
10007a50:	000a9640 	call	1000a964 <__hi0bits>
10007a54:	b885c83a 	sub	r2,r23,r2
10007a58:	1585883a 	add	r2,r2,r22
10007a5c:	108007cc 	andi	r2,r2,31
10007a60:	1000b326 	beq	r2,zero,10007d30 <_dtoa_r+0xda0>
10007a64:	00c00804 	movi	r3,32
10007a68:	1887c83a 	sub	r3,r3,r2
10007a6c:	01000104 	movi	r4,4
10007a70:	20c2cd0e 	bge	r4,r3,100085a8 <_dtoa_r+0x1618>
10007a74:	00c00704 	movi	r3,28
10007a78:	1885c83a 	sub	r2,r3,r2
10007a7c:	d8c00817 	ldw	r3,32(sp)
10007a80:	a0a9883a 	add	r20,r20,r2
10007a84:	b0ad883a 	add	r22,r22,r2
10007a88:	1887883a 	add	r3,r3,r2
10007a8c:	d8c00815 	stw	r3,32(sp)
10007a90:	d9800817 	ldw	r6,32(sp)
10007a94:	0180040e 	bge	zero,r6,10007aa8 <_dtoa_r+0xb18>
10007a98:	800b883a 	mov	r5,r16
10007a9c:	e009883a 	mov	r4,fp
10007aa0:	000ae840 	call	1000ae84 <__lshift>
10007aa4:	1021883a 	mov	r16,r2
10007aa8:	0580050e 	bge	zero,r22,10007ac0 <_dtoa_r+0xb30>
10007aac:	a80b883a 	mov	r5,r21
10007ab0:	b00d883a 	mov	r6,r22
10007ab4:	e009883a 	mov	r4,fp
10007ab8:	000ae840 	call	1000ae84 <__lshift>
10007abc:	102b883a 	mov	r21,r2
10007ac0:	d9c00e17 	ldw	r7,56(sp)
10007ac4:	3801211e 	bne	r7,zero,10007f4c <_dtoa_r+0xfbc>
10007ac8:	d9800617 	ldw	r6,24(sp)
10007acc:	0181380e 	bge	zero,r6,10007fb0 <_dtoa_r+0x1020>
10007ad0:	d8c00b17 	ldw	r3,44(sp)
10007ad4:	1800ab1e 	bne	r3,zero,10007d84 <_dtoa_r+0xdf4>
10007ad8:	dc800717 	ldw	r18,28(sp)
10007adc:	dcc00617 	ldw	r19,24(sp)
10007ae0:	9029883a 	mov	r20,r18
10007ae4:	00000206 	br	10007af0 <_dtoa_r+0xb60>
10007ae8:	000a7180 	call	1000a718 <__multadd>
10007aec:	1021883a 	mov	r16,r2
10007af0:	a80b883a 	mov	r5,r21
10007af4:	8009883a 	mov	r4,r16
10007af8:	0006d680 	call	10006d68 <quorem>
10007afc:	10800c04 	addi	r2,r2,48
10007b00:	90800005 	stb	r2,0(r18)
10007b04:	94800044 	addi	r18,r18,1
10007b08:	9507c83a 	sub	r3,r18,r20
10007b0c:	000f883a 	mov	r7,zero
10007b10:	01800284 	movi	r6,10
10007b14:	800b883a 	mov	r5,r16
10007b18:	e009883a 	mov	r4,fp
10007b1c:	1cfff216 	blt	r3,r19,10007ae8 <__alt_data_end+0xf8007ae8>
10007b20:	1011883a 	mov	r8,r2
10007b24:	d8800617 	ldw	r2,24(sp)
10007b28:	0082370e 	bge	zero,r2,10008408 <_dtoa_r+0x1478>
10007b2c:	d9000717 	ldw	r4,28(sp)
10007b30:	0025883a 	mov	r18,zero
10007b34:	20af883a 	add	r23,r4,r2
10007b38:	01800044 	movi	r6,1
10007b3c:	800b883a 	mov	r5,r16
10007b40:	e009883a 	mov	r4,fp
10007b44:	da001715 	stw	r8,92(sp)
10007b48:	000ae840 	call	1000ae84 <__lshift>
10007b4c:	a80b883a 	mov	r5,r21
10007b50:	1009883a 	mov	r4,r2
10007b54:	d8800915 	stw	r2,36(sp)
10007b58:	000afcc0 	call	1000afcc <__mcmp>
10007b5c:	da001717 	ldw	r8,92(sp)
10007b60:	0081800e 	bge	zero,r2,10008164 <_dtoa_r+0x11d4>
10007b64:	b93fffc3 	ldbu	r4,-1(r23)
10007b68:	b8bfffc4 	addi	r2,r23,-1
10007b6c:	1007883a 	mov	r3,r2
10007b70:	01800e44 	movi	r6,57
10007b74:	d9c00717 	ldw	r7,28(sp)
10007b78:	00000506 	br	10007b90 <_dtoa_r+0xc00>
10007b7c:	18ffffc4 	addi	r3,r3,-1
10007b80:	11c12326 	beq	r2,r7,10008010 <_dtoa_r+0x1080>
10007b84:	19000003 	ldbu	r4,0(r3)
10007b88:	102f883a 	mov	r23,r2
10007b8c:	10bfffc4 	addi	r2,r2,-1
10007b90:	21403fcc 	andi	r5,r4,255
10007b94:	2940201c 	xori	r5,r5,128
10007b98:	297fe004 	addi	r5,r5,-128
10007b9c:	29bff726 	beq	r5,r6,10007b7c <__alt_data_end+0xf8007b7c>
10007ba0:	21000044 	addi	r4,r4,1
10007ba4:	11000005 	stb	r4,0(r2)
10007ba8:	a80b883a 	mov	r5,r21
10007bac:	e009883a 	mov	r4,fp
10007bb0:	000a6f00 	call	1000a6f0 <_Bfree>
10007bb4:	883ea026 	beq	r17,zero,10007638 <__alt_data_end+0xf8007638>
10007bb8:	90000426 	beq	r18,zero,10007bcc <_dtoa_r+0xc3c>
10007bbc:	94400326 	beq	r18,r17,10007bcc <_dtoa_r+0xc3c>
10007bc0:	900b883a 	mov	r5,r18
10007bc4:	e009883a 	mov	r4,fp
10007bc8:	000a6f00 	call	1000a6f0 <_Bfree>
10007bcc:	880b883a 	mov	r5,r17
10007bd0:	e009883a 	mov	r4,fp
10007bd4:	000a6f00 	call	1000a6f0 <_Bfree>
10007bd8:	003e9706 	br	10007638 <__alt_data_end+0xf8007638>
10007bdc:	01800044 	movi	r6,1
10007be0:	d9800e15 	stw	r6,56(sp)
10007be4:	003d9606 	br	10007240 <__alt_data_end+0xf8007240>
10007be8:	d8800817 	ldw	r2,32(sp)
10007bec:	d8c00517 	ldw	r3,20(sp)
10007bf0:	d8000d15 	stw	zero,52(sp)
10007bf4:	10c5c83a 	sub	r2,r2,r3
10007bf8:	00c9c83a 	sub	r4,zero,r3
10007bfc:	d8800815 	stw	r2,32(sp)
10007c00:	d9000a15 	stw	r4,40(sp)
10007c04:	003d9706 	br	10007264 <__alt_data_end+0xf8007264>
10007c08:	05adc83a 	sub	r22,zero,r22
10007c0c:	dd800815 	stw	r22,32(sp)
10007c10:	002d883a 	mov	r22,zero
10007c14:	003d8e06 	br	10007250 <__alt_data_end+0xf8007250>
10007c18:	d9000517 	ldw	r4,20(sp)
10007c1c:	00113b80 	call	100113b8 <__floatsidf>
10007c20:	100d883a 	mov	r6,r2
10007c24:	180f883a 	mov	r7,r3
10007c28:	a009883a 	mov	r4,r20
10007c2c:	880b883a 	mov	r5,r17
10007c30:	000ff780 	call	1000ff78 <__eqdf2>
10007c34:	103d7126 	beq	r2,zero,100071fc <__alt_data_end+0xf80071fc>
10007c38:	d9c00517 	ldw	r7,20(sp)
10007c3c:	39ffffc4 	addi	r7,r7,-1
10007c40:	d9c00515 	stw	r7,20(sp)
10007c44:	003d6d06 	br	100071fc <__alt_data_end+0xf80071fc>
10007c48:	dd400a17 	ldw	r21,40(sp)
10007c4c:	dd000817 	ldw	r20,32(sp)
10007c50:	0023883a 	mov	r17,zero
10007c54:	003f4806 	br	10007978 <__alt_data_end+0xf8007978>
10007c58:	10e3c83a 	sub	r17,r2,r3
10007c5c:	9448983a 	sll	r4,r18,r17
10007c60:	003d3206 	br	1000712c <__alt_data_end+0xf800712c>
10007c64:	d8000e15 	stw	zero,56(sp)
10007c68:	003d7506 	br	10007240 <__alt_data_end+0xf8007240>
10007c6c:	b005883a 	mov	r2,r22
10007c70:	003f4506 	br	10007988 <__alt_data_end+0xf8007988>
10007c74:	dc000915 	stw	r16,36(sp)
10007c78:	d9800a17 	ldw	r6,40(sp)
10007c7c:	d9400917 	ldw	r5,36(sp)
10007c80:	e009883a 	mov	r4,fp
10007c84:	000ad440 	call	1000ad44 <__pow5mult>
10007c88:	1021883a 	mov	r16,r2
10007c8c:	003f5a06 	br	100079f8 <__alt_data_end+0xf80079f8>
10007c90:	01c00044 	movi	r7,1
10007c94:	d9c00b15 	stw	r7,44(sp)
10007c98:	d8802217 	ldw	r2,136(sp)
10007c9c:	0081280e 	bge	zero,r2,10008140 <_dtoa_r+0x11b0>
10007ca0:	100d883a 	mov	r6,r2
10007ca4:	1021883a 	mov	r16,r2
10007ca8:	d8800c15 	stw	r2,48(sp)
10007cac:	d8800615 	stw	r2,24(sp)
10007cb0:	003d8806 	br	100072d4 <__alt_data_end+0xf80072d4>
10007cb4:	d8800617 	ldw	r2,24(sp)
10007cb8:	00be9b16 	blt	zero,r2,10007728 <__alt_data_end+0xf8007728>
10007cbc:	10010f1e 	bne	r2,zero,100080fc <_dtoa_r+0x116c>
10007cc0:	880b883a 	mov	r5,r17
10007cc4:	000d883a 	mov	r6,zero
10007cc8:	01d00534 	movhi	r7,16404
10007ccc:	8009883a 	mov	r4,r16
10007cd0:	00101d00 	call	100101d0 <__muldf3>
10007cd4:	900d883a 	mov	r6,r18
10007cd8:	980f883a 	mov	r7,r19
10007cdc:	1009883a 	mov	r4,r2
10007ce0:	180b883a 	mov	r5,r3
10007ce4:	00100000 	call	10010000 <__gedf2>
10007ce8:	002b883a 	mov	r21,zero
10007cec:	0023883a 	mov	r17,zero
10007cf0:	1000bf16 	blt	r2,zero,10007ff0 <_dtoa_r+0x1060>
10007cf4:	d9802217 	ldw	r6,136(sp)
10007cf8:	ddc00717 	ldw	r23,28(sp)
10007cfc:	018c303a 	nor	r6,zero,r6
10007d00:	d9800515 	stw	r6,20(sp)
10007d04:	a80b883a 	mov	r5,r21
10007d08:	e009883a 	mov	r4,fp
10007d0c:	000a6f00 	call	1000a6f0 <_Bfree>
10007d10:	883e4926 	beq	r17,zero,10007638 <__alt_data_end+0xf8007638>
10007d14:	003fad06 	br	10007bcc <__alt_data_end+0xf8007bcc>
10007d18:	d9c01117 	ldw	r7,68(sp)
10007d1c:	3801bc26 	beq	r7,zero,10008410 <_dtoa_r+0x1480>
10007d20:	10810cc4 	addi	r2,r2,1075
10007d24:	dd400a17 	ldw	r21,40(sp)
10007d28:	dd000817 	ldw	r20,32(sp)
10007d2c:	003f0a06 	br	10007958 <__alt_data_end+0xf8007958>
10007d30:	00800704 	movi	r2,28
10007d34:	d9000817 	ldw	r4,32(sp)
10007d38:	a0a9883a 	add	r20,r20,r2
10007d3c:	b0ad883a 	add	r22,r22,r2
10007d40:	2089883a 	add	r4,r4,r2
10007d44:	d9000815 	stw	r4,32(sp)
10007d48:	003f5106 	br	10007a90 <__alt_data_end+0xf8007a90>
10007d4c:	d8c00317 	ldw	r3,12(sp)
10007d50:	b8c1fc0e 	bge	r23,r3,10008544 <_dtoa_r+0x15b4>
10007d54:	0027883a 	mov	r19,zero
10007d58:	b805883a 	mov	r2,r23
10007d5c:	003f3e06 	br	10007a58 <__alt_data_end+0xf8007a58>
10007d60:	880b883a 	mov	r5,r17
10007d64:	e009883a 	mov	r4,fp
10007d68:	000f883a 	mov	r7,zero
10007d6c:	01800284 	movi	r6,10
10007d70:	000a7180 	call	1000a718 <__multadd>
10007d74:	d9000c17 	ldw	r4,48(sp)
10007d78:	1023883a 	mov	r17,r2
10007d7c:	0102040e 	bge	zero,r4,10008590 <_dtoa_r+0x1600>
10007d80:	d9000615 	stw	r4,24(sp)
10007d84:	0500050e 	bge	zero,r20,10007d9c <_dtoa_r+0xe0c>
10007d88:	880b883a 	mov	r5,r17
10007d8c:	a00d883a 	mov	r6,r20
10007d90:	e009883a 	mov	r4,fp
10007d94:	000ae840 	call	1000ae84 <__lshift>
10007d98:	1023883a 	mov	r17,r2
10007d9c:	9801241e 	bne	r19,zero,10008230 <_dtoa_r+0x12a0>
10007da0:	8829883a 	mov	r20,r17
10007da4:	d9000617 	ldw	r4,24(sp)
10007da8:	dcc00717 	ldw	r19,28(sp)
10007dac:	9480004c 	andi	r18,r18,1
10007db0:	20bfffc4 	addi	r2,r4,-1
10007db4:	9885883a 	add	r2,r19,r2
10007db8:	d8800415 	stw	r2,16(sp)
10007dbc:	dc800615 	stw	r18,24(sp)
10007dc0:	a80b883a 	mov	r5,r21
10007dc4:	8009883a 	mov	r4,r16
10007dc8:	0006d680 	call	10006d68 <quorem>
10007dcc:	880b883a 	mov	r5,r17
10007dd0:	8009883a 	mov	r4,r16
10007dd4:	102f883a 	mov	r23,r2
10007dd8:	000afcc0 	call	1000afcc <__mcmp>
10007ddc:	a80b883a 	mov	r5,r21
10007de0:	a00d883a 	mov	r6,r20
10007de4:	e009883a 	mov	r4,fp
10007de8:	102d883a 	mov	r22,r2
10007dec:	000b02c0 	call	1000b02c <__mdiff>
10007df0:	1007883a 	mov	r3,r2
10007df4:	10800317 	ldw	r2,12(r2)
10007df8:	bc800c04 	addi	r18,r23,48
10007dfc:	180b883a 	mov	r5,r3
10007e00:	10004e1e 	bne	r2,zero,10007f3c <_dtoa_r+0xfac>
10007e04:	8009883a 	mov	r4,r16
10007e08:	d8c01615 	stw	r3,88(sp)
10007e0c:	000afcc0 	call	1000afcc <__mcmp>
10007e10:	d8c01617 	ldw	r3,88(sp)
10007e14:	e009883a 	mov	r4,fp
10007e18:	d8801615 	stw	r2,88(sp)
10007e1c:	180b883a 	mov	r5,r3
10007e20:	000a6f00 	call	1000a6f0 <_Bfree>
10007e24:	d8801617 	ldw	r2,88(sp)
10007e28:	1000041e 	bne	r2,zero,10007e3c <_dtoa_r+0xeac>
10007e2c:	d9800317 	ldw	r6,12(sp)
10007e30:	3000021e 	bne	r6,zero,10007e3c <_dtoa_r+0xeac>
10007e34:	d8c00617 	ldw	r3,24(sp)
10007e38:	18003726 	beq	r3,zero,10007f18 <_dtoa_r+0xf88>
10007e3c:	b0002016 	blt	r22,zero,10007ec0 <_dtoa_r+0xf30>
10007e40:	b000041e 	bne	r22,zero,10007e54 <_dtoa_r+0xec4>
10007e44:	d9000317 	ldw	r4,12(sp)
10007e48:	2000021e 	bne	r4,zero,10007e54 <_dtoa_r+0xec4>
10007e4c:	d8c00617 	ldw	r3,24(sp)
10007e50:	18001b26 	beq	r3,zero,10007ec0 <_dtoa_r+0xf30>
10007e54:	00810716 	blt	zero,r2,10008274 <_dtoa_r+0x12e4>
10007e58:	d8c00417 	ldw	r3,16(sp)
10007e5c:	9d800044 	addi	r22,r19,1
10007e60:	9c800005 	stb	r18,0(r19)
10007e64:	b02f883a 	mov	r23,r22
10007e68:	98c10626 	beq	r19,r3,10008284 <_dtoa_r+0x12f4>
10007e6c:	800b883a 	mov	r5,r16
10007e70:	000f883a 	mov	r7,zero
10007e74:	01800284 	movi	r6,10
10007e78:	e009883a 	mov	r4,fp
10007e7c:	000a7180 	call	1000a718 <__multadd>
10007e80:	1021883a 	mov	r16,r2
10007e84:	000f883a 	mov	r7,zero
10007e88:	01800284 	movi	r6,10
10007e8c:	880b883a 	mov	r5,r17
10007e90:	e009883a 	mov	r4,fp
10007e94:	8d002526 	beq	r17,r20,10007f2c <_dtoa_r+0xf9c>
10007e98:	000a7180 	call	1000a718 <__multadd>
10007e9c:	a00b883a 	mov	r5,r20
10007ea0:	000f883a 	mov	r7,zero
10007ea4:	01800284 	movi	r6,10
10007ea8:	e009883a 	mov	r4,fp
10007eac:	1023883a 	mov	r17,r2
10007eb0:	000a7180 	call	1000a718 <__multadd>
10007eb4:	1029883a 	mov	r20,r2
10007eb8:	b027883a 	mov	r19,r22
10007ebc:	003fc006 	br	10007dc0 <__alt_data_end+0xf8007dc0>
10007ec0:	9011883a 	mov	r8,r18
10007ec4:	00800e0e 	bge	zero,r2,10007f00 <_dtoa_r+0xf70>
10007ec8:	800b883a 	mov	r5,r16
10007ecc:	01800044 	movi	r6,1
10007ed0:	e009883a 	mov	r4,fp
10007ed4:	da001715 	stw	r8,92(sp)
10007ed8:	000ae840 	call	1000ae84 <__lshift>
10007edc:	a80b883a 	mov	r5,r21
10007ee0:	1009883a 	mov	r4,r2
10007ee4:	1021883a 	mov	r16,r2
10007ee8:	000afcc0 	call	1000afcc <__mcmp>
10007eec:	da001717 	ldw	r8,92(sp)
10007ef0:	0081960e 	bge	zero,r2,1000854c <_dtoa_r+0x15bc>
10007ef4:	00800e44 	movi	r2,57
10007ef8:	40817026 	beq	r8,r2,100084bc <_dtoa_r+0x152c>
10007efc:	ba000c44 	addi	r8,r23,49
10007f00:	8825883a 	mov	r18,r17
10007f04:	9dc00044 	addi	r23,r19,1
10007f08:	9a000005 	stb	r8,0(r19)
10007f0c:	a023883a 	mov	r17,r20
10007f10:	dc000915 	stw	r16,36(sp)
10007f14:	003f2406 	br	10007ba8 <__alt_data_end+0xf8007ba8>
10007f18:	00800e44 	movi	r2,57
10007f1c:	9011883a 	mov	r8,r18
10007f20:	90816626 	beq	r18,r2,100084bc <_dtoa_r+0x152c>
10007f24:	05bff516 	blt	zero,r22,10007efc <__alt_data_end+0xf8007efc>
10007f28:	003ff506 	br	10007f00 <__alt_data_end+0xf8007f00>
10007f2c:	000a7180 	call	1000a718 <__multadd>
10007f30:	1023883a 	mov	r17,r2
10007f34:	1029883a 	mov	r20,r2
10007f38:	003fdf06 	br	10007eb8 <__alt_data_end+0xf8007eb8>
10007f3c:	e009883a 	mov	r4,fp
10007f40:	000a6f00 	call	1000a6f0 <_Bfree>
10007f44:	00800044 	movi	r2,1
10007f48:	003fbc06 	br	10007e3c <__alt_data_end+0xf8007e3c>
10007f4c:	a80b883a 	mov	r5,r21
10007f50:	8009883a 	mov	r4,r16
10007f54:	000afcc0 	call	1000afcc <__mcmp>
10007f58:	103edb0e 	bge	r2,zero,10007ac8 <__alt_data_end+0xf8007ac8>
10007f5c:	800b883a 	mov	r5,r16
10007f60:	000f883a 	mov	r7,zero
10007f64:	01800284 	movi	r6,10
10007f68:	e009883a 	mov	r4,fp
10007f6c:	000a7180 	call	1000a718 <__multadd>
10007f70:	1021883a 	mov	r16,r2
10007f74:	d8800517 	ldw	r2,20(sp)
10007f78:	d8c00b17 	ldw	r3,44(sp)
10007f7c:	10bfffc4 	addi	r2,r2,-1
10007f80:	d8800515 	stw	r2,20(sp)
10007f84:	183f761e 	bne	r3,zero,10007d60 <__alt_data_end+0xf8007d60>
10007f88:	d9000c17 	ldw	r4,48(sp)
10007f8c:	0101730e 	bge	zero,r4,1000855c <_dtoa_r+0x15cc>
10007f90:	d9000615 	stw	r4,24(sp)
10007f94:	003ed006 	br	10007ad8 <__alt_data_end+0xf8007ad8>
10007f98:	00800084 	movi	r2,2
10007f9c:	3081861e 	bne	r6,r2,100085b8 <_dtoa_r+0x1628>
10007fa0:	d8000b15 	stw	zero,44(sp)
10007fa4:	003f3c06 	br	10007c98 <__alt_data_end+0xf8007c98>
10007fa8:	dc000917 	ldw	r16,36(sp)
10007fac:	003e9206 	br	100079f8 <__alt_data_end+0xf80079f8>
10007fb0:	d9c00317 	ldw	r7,12(sp)
10007fb4:	00800084 	movi	r2,2
10007fb8:	11fec50e 	bge	r2,r7,10007ad0 <__alt_data_end+0xf8007ad0>
10007fbc:	d9000617 	ldw	r4,24(sp)
10007fc0:	20013c1e 	bne	r4,zero,100084b4 <_dtoa_r+0x1524>
10007fc4:	a80b883a 	mov	r5,r21
10007fc8:	000f883a 	mov	r7,zero
10007fcc:	01800144 	movi	r6,5
10007fd0:	e009883a 	mov	r4,fp
10007fd4:	000a7180 	call	1000a718 <__multadd>
10007fd8:	100b883a 	mov	r5,r2
10007fdc:	8009883a 	mov	r4,r16
10007fe0:	102b883a 	mov	r21,r2
10007fe4:	000afcc0 	call	1000afcc <__mcmp>
10007fe8:	dc000915 	stw	r16,36(sp)
10007fec:	00bf410e 	bge	zero,r2,10007cf4 <__alt_data_end+0xf8007cf4>
10007ff0:	d9c00717 	ldw	r7,28(sp)
10007ff4:	00800c44 	movi	r2,49
10007ff8:	38800005 	stb	r2,0(r7)
10007ffc:	d8800517 	ldw	r2,20(sp)
10008000:	3dc00044 	addi	r23,r7,1
10008004:	10800044 	addi	r2,r2,1
10008008:	d8800515 	stw	r2,20(sp)
1000800c:	003f3d06 	br	10007d04 <__alt_data_end+0xf8007d04>
10008010:	d9800517 	ldw	r6,20(sp)
10008014:	d9c00717 	ldw	r7,28(sp)
10008018:	00800c44 	movi	r2,49
1000801c:	31800044 	addi	r6,r6,1
10008020:	d9800515 	stw	r6,20(sp)
10008024:	38800005 	stb	r2,0(r7)
10008028:	003edf06 	br	10007ba8 <__alt_data_end+0xf8007ba8>
1000802c:	d8000b15 	stw	zero,44(sp)
10008030:	003c9f06 	br	100072b0 <__alt_data_end+0xf80072b0>
10008034:	903e7e1e 	bne	r18,zero,10007a30 <__alt_data_end+0xf8007a30>
10008038:	00800434 	movhi	r2,16
1000803c:	10bfffc4 	addi	r2,r2,-1
10008040:	9884703a 	and	r2,r19,r2
10008044:	1000ea1e 	bne	r2,zero,100083f0 <_dtoa_r+0x1460>
10008048:	9cdffc2c 	andhi	r19,r19,32752
1000804c:	9800e826 	beq	r19,zero,100083f0 <_dtoa_r+0x1460>
10008050:	d9c00817 	ldw	r7,32(sp)
10008054:	b5800044 	addi	r22,r22,1
10008058:	04c00044 	movi	r19,1
1000805c:	39c00044 	addi	r7,r7,1
10008060:	d9c00815 	stw	r7,32(sp)
10008064:	d8800d17 	ldw	r2,52(sp)
10008068:	103e721e 	bne	r2,zero,10007a34 <__alt_data_end+0xf8007a34>
1000806c:	00800044 	movi	r2,1
10008070:	003e7906 	br	10007a58 <__alt_data_end+0xf8007a58>
10008074:	8009883a 	mov	r4,r16
10008078:	00113b80 	call	100113b8 <__floatsidf>
1000807c:	d9800f17 	ldw	r6,60(sp)
10008080:	d9c01017 	ldw	r7,64(sp)
10008084:	1009883a 	mov	r4,r2
10008088:	180b883a 	mov	r5,r3
1000808c:	00101d00 	call	100101d0 <__muldf3>
10008090:	000d883a 	mov	r6,zero
10008094:	01d00734 	movhi	r7,16412
10008098:	1009883a 	mov	r4,r2
1000809c:	180b883a 	mov	r5,r3
100080a0:	000ecfc0 	call	1000ecfc <__adddf3>
100080a4:	047f3034 	movhi	r17,64704
100080a8:	1021883a 	mov	r16,r2
100080ac:	1c63883a 	add	r17,r3,r17
100080b0:	d9000f17 	ldw	r4,60(sp)
100080b4:	d9401017 	ldw	r5,64(sp)
100080b8:	000d883a 	mov	r6,zero
100080bc:	01d00534 	movhi	r7,16404
100080c0:	0010a3c0 	call	10010a3c <__subdf3>
100080c4:	800d883a 	mov	r6,r16
100080c8:	880f883a 	mov	r7,r17
100080cc:	1009883a 	mov	r4,r2
100080d0:	180b883a 	mov	r5,r3
100080d4:	102b883a 	mov	r21,r2
100080d8:	1829883a 	mov	r20,r3
100080dc:	00100000 	call	10010000 <__gedf2>
100080e0:	00806c16 	blt	zero,r2,10008294 <_dtoa_r+0x1304>
100080e4:	89e0003c 	xorhi	r7,r17,32768
100080e8:	800d883a 	mov	r6,r16
100080ec:	a809883a 	mov	r4,r21
100080f0:	a00b883a 	mov	r5,r20
100080f4:	00100dc0 	call	100100dc <__ledf2>
100080f8:	103d7e0e 	bge	r2,zero,100076f4 <__alt_data_end+0xf80076f4>
100080fc:	002b883a 	mov	r21,zero
10008100:	0023883a 	mov	r17,zero
10008104:	003efb06 	br	10007cf4 <__alt_data_end+0xf8007cf4>
10008108:	d8800717 	ldw	r2,28(sp)
1000810c:	003bd006 	br	10007050 <__alt_data_end+0xf8007050>
10008110:	d9000a17 	ldw	r4,40(sp)
10008114:	d9800d17 	ldw	r6,52(sp)
10008118:	dd400a15 	stw	r21,40(sp)
1000811c:	a905c83a 	sub	r2,r21,r4
10008120:	308d883a 	add	r6,r6,r2
10008124:	d9800d15 	stw	r6,52(sp)
10008128:	002b883a 	mov	r21,zero
1000812c:	003e0606 	br	10007948 <__alt_data_end+0xf8007948>
10008130:	9023883a 	mov	r17,r18
10008134:	9829883a 	mov	r20,r19
10008138:	04000084 	movi	r16,2
1000813c:	003c9206 	br	10007388 <__alt_data_end+0xf8007388>
10008140:	04000044 	movi	r16,1
10008144:	dc000c15 	stw	r16,48(sp)
10008148:	dc000615 	stw	r16,24(sp)
1000814c:	dc002215 	stw	r16,136(sp)
10008150:	e0001115 	stw	zero,68(fp)
10008154:	000b883a 	mov	r5,zero
10008158:	003c6906 	br	10007300 <__alt_data_end+0xf8007300>
1000815c:	3021883a 	mov	r16,r6
10008160:	003ffb06 	br	10008150 <__alt_data_end+0xf8008150>
10008164:	1000021e 	bne	r2,zero,10008170 <_dtoa_r+0x11e0>
10008168:	4200004c 	andi	r8,r8,1
1000816c:	403e7d1e 	bne	r8,zero,10007b64 <__alt_data_end+0xf8007b64>
10008170:	01000c04 	movi	r4,48
10008174:	00000106 	br	1000817c <_dtoa_r+0x11ec>
10008178:	102f883a 	mov	r23,r2
1000817c:	b8bfffc4 	addi	r2,r23,-1
10008180:	10c00007 	ldb	r3,0(r2)
10008184:	193ffc26 	beq	r3,r4,10008178 <__alt_data_end+0xf8008178>
10008188:	003e8706 	br	10007ba8 <__alt_data_end+0xf8007ba8>
1000818c:	d8800517 	ldw	r2,20(sp)
10008190:	00a3c83a 	sub	r17,zero,r2
10008194:	8800a426 	beq	r17,zero,10008428 <_dtoa_r+0x1498>
10008198:	888003cc 	andi	r2,r17,15
1000819c:	100490fa 	slli	r2,r2,3
100081a0:	00c40074 	movhi	r3,4097
100081a4:	18d1e404 	addi	r3,r3,18320
100081a8:	1885883a 	add	r2,r3,r2
100081ac:	11800017 	ldw	r6,0(r2)
100081b0:	11c00117 	ldw	r7,4(r2)
100081b4:	9009883a 	mov	r4,r18
100081b8:	980b883a 	mov	r5,r19
100081bc:	8823d13a 	srai	r17,r17,4
100081c0:	00101d00 	call	100101d0 <__muldf3>
100081c4:	d8800f15 	stw	r2,60(sp)
100081c8:	d8c01015 	stw	r3,64(sp)
100081cc:	8800e826 	beq	r17,zero,10008570 <_dtoa_r+0x15e0>
100081d0:	05040074 	movhi	r20,4097
100081d4:	a511da04 	addi	r20,r20,18280
100081d8:	04000084 	movi	r16,2
100081dc:	8980004c 	andi	r6,r17,1
100081e0:	1009883a 	mov	r4,r2
100081e4:	8823d07a 	srai	r17,r17,1
100081e8:	180b883a 	mov	r5,r3
100081ec:	30000426 	beq	r6,zero,10008200 <_dtoa_r+0x1270>
100081f0:	a1800017 	ldw	r6,0(r20)
100081f4:	a1c00117 	ldw	r7,4(r20)
100081f8:	84000044 	addi	r16,r16,1
100081fc:	00101d00 	call	100101d0 <__muldf3>
10008200:	a5000204 	addi	r20,r20,8
10008204:	883ff51e 	bne	r17,zero,100081dc <__alt_data_end+0xf80081dc>
10008208:	d8800f15 	stw	r2,60(sp)
1000820c:	d8c01015 	stw	r3,64(sp)
10008210:	003c7606 	br	100073ec <__alt_data_end+0xf80073ec>
10008214:	00c00c04 	movi	r3,48
10008218:	10c00005 	stb	r3,0(r2)
1000821c:	d8c00517 	ldw	r3,20(sp)
10008220:	bd3fffc3 	ldbu	r20,-1(r23)
10008224:	18c00044 	addi	r3,r3,1
10008228:	d8c00515 	stw	r3,20(sp)
1000822c:	003db906 	br	10007914 <__alt_data_end+0xf8007914>
10008230:	89400117 	ldw	r5,4(r17)
10008234:	e009883a 	mov	r4,fp
10008238:	000a6480 	call	1000a648 <_Balloc>
1000823c:	89800417 	ldw	r6,16(r17)
10008240:	89400304 	addi	r5,r17,12
10008244:	11000304 	addi	r4,r2,12
10008248:	31800084 	addi	r6,r6,2
1000824c:	318d883a 	add	r6,r6,r6
10008250:	318d883a 	add	r6,r6,r6
10008254:	1027883a 	mov	r19,r2
10008258:	000a27c0 	call	1000a27c <memcpy>
1000825c:	01800044 	movi	r6,1
10008260:	980b883a 	mov	r5,r19
10008264:	e009883a 	mov	r4,fp
10008268:	000ae840 	call	1000ae84 <__lshift>
1000826c:	1029883a 	mov	r20,r2
10008270:	003ecc06 	br	10007da4 <__alt_data_end+0xf8007da4>
10008274:	00800e44 	movi	r2,57
10008278:	90809026 	beq	r18,r2,100084bc <_dtoa_r+0x152c>
1000827c:	92000044 	addi	r8,r18,1
10008280:	003f1f06 	br	10007f00 <__alt_data_end+0xf8007f00>
10008284:	9011883a 	mov	r8,r18
10008288:	8825883a 	mov	r18,r17
1000828c:	a023883a 	mov	r17,r20
10008290:	003e2906 	br	10007b38 <__alt_data_end+0xf8007b38>
10008294:	002b883a 	mov	r21,zero
10008298:	0023883a 	mov	r17,zero
1000829c:	003f5406 	br	10007ff0 <__alt_data_end+0xf8007ff0>
100082a0:	61bfffc4 	addi	r6,r12,-1
100082a4:	300490fa 	slli	r2,r6,3
100082a8:	00c40074 	movhi	r3,4097
100082ac:	18d1e404 	addi	r3,r3,18320
100082b0:	1885883a 	add	r2,r3,r2
100082b4:	11000017 	ldw	r4,0(r2)
100082b8:	11400117 	ldw	r5,4(r2)
100082bc:	d8800717 	ldw	r2,28(sp)
100082c0:	880f883a 	mov	r7,r17
100082c4:	d9801215 	stw	r6,72(sp)
100082c8:	800d883a 	mov	r6,r16
100082cc:	db001615 	stw	r12,88(sp)
100082d0:	15c00044 	addi	r23,r2,1
100082d4:	00101d00 	call	100101d0 <__muldf3>
100082d8:	d9401017 	ldw	r5,64(sp)
100082dc:	d9000f17 	ldw	r4,60(sp)
100082e0:	d8c01515 	stw	r3,84(sp)
100082e4:	d8801415 	stw	r2,80(sp)
100082e8:	00113380 	call	10011338 <__fixdfsi>
100082ec:	1009883a 	mov	r4,r2
100082f0:	1021883a 	mov	r16,r2
100082f4:	00113b80 	call	100113b8 <__floatsidf>
100082f8:	d9000f17 	ldw	r4,60(sp)
100082fc:	d9401017 	ldw	r5,64(sp)
10008300:	100d883a 	mov	r6,r2
10008304:	180f883a 	mov	r7,r3
10008308:	0010a3c0 	call	10010a3c <__subdf3>
1000830c:	1829883a 	mov	r20,r3
10008310:	d8c00717 	ldw	r3,28(sp)
10008314:	84000c04 	addi	r16,r16,48
10008318:	1023883a 	mov	r17,r2
1000831c:	1c000005 	stb	r16,0(r3)
10008320:	db001617 	ldw	r12,88(sp)
10008324:	00800044 	movi	r2,1
10008328:	60802226 	beq	r12,r2,100083b4 <_dtoa_r+0x1424>
1000832c:	d9c00717 	ldw	r7,28(sp)
10008330:	8805883a 	mov	r2,r17
10008334:	b82b883a 	mov	r21,r23
10008338:	3b19883a 	add	r12,r7,r12
1000833c:	6023883a 	mov	r17,r12
10008340:	a007883a 	mov	r3,r20
10008344:	dc800f15 	stw	r18,60(sp)
10008348:	000d883a 	mov	r6,zero
1000834c:	01d00934 	movhi	r7,16420
10008350:	1009883a 	mov	r4,r2
10008354:	180b883a 	mov	r5,r3
10008358:	00101d00 	call	100101d0 <__muldf3>
1000835c:	180b883a 	mov	r5,r3
10008360:	1009883a 	mov	r4,r2
10008364:	1829883a 	mov	r20,r3
10008368:	1025883a 	mov	r18,r2
1000836c:	00113380 	call	10011338 <__fixdfsi>
10008370:	1009883a 	mov	r4,r2
10008374:	1021883a 	mov	r16,r2
10008378:	00113b80 	call	100113b8 <__floatsidf>
1000837c:	100d883a 	mov	r6,r2
10008380:	180f883a 	mov	r7,r3
10008384:	9009883a 	mov	r4,r18
10008388:	a00b883a 	mov	r5,r20
1000838c:	84000c04 	addi	r16,r16,48
10008390:	0010a3c0 	call	10010a3c <__subdf3>
10008394:	ad400044 	addi	r21,r21,1
10008398:	ac3fffc5 	stb	r16,-1(r21)
1000839c:	ac7fea1e 	bne	r21,r17,10008348 <__alt_data_end+0xf8008348>
100083a0:	1023883a 	mov	r17,r2
100083a4:	d8801217 	ldw	r2,72(sp)
100083a8:	dc800f17 	ldw	r18,60(sp)
100083ac:	1829883a 	mov	r20,r3
100083b0:	b8af883a 	add	r23,r23,r2
100083b4:	d9001417 	ldw	r4,80(sp)
100083b8:	d9401517 	ldw	r5,84(sp)
100083bc:	000d883a 	mov	r6,zero
100083c0:	01cff834 	movhi	r7,16352
100083c4:	000ecfc0 	call	1000ecfc <__adddf3>
100083c8:	880d883a 	mov	r6,r17
100083cc:	a00f883a 	mov	r7,r20
100083d0:	1009883a 	mov	r4,r2
100083d4:	180b883a 	mov	r5,r3
100083d8:	00100dc0 	call	100100dc <__ledf2>
100083dc:	10003e0e 	bge	r2,zero,100084d8 <_dtoa_r+0x1548>
100083e0:	d9001317 	ldw	r4,76(sp)
100083e4:	bd3fffc3 	ldbu	r20,-1(r23)
100083e8:	d9000515 	stw	r4,20(sp)
100083ec:	003d3b06 	br	100078dc <__alt_data_end+0xf80078dc>
100083f0:	0027883a 	mov	r19,zero
100083f4:	003f1b06 	br	10008064 <__alt_data_end+0xf8008064>
100083f8:	d8800817 	ldw	r2,32(sp)
100083fc:	11e9c83a 	sub	r20,r2,r7
10008400:	0005883a 	mov	r2,zero
10008404:	003d5406 	br	10007958 <__alt_data_end+0xf8007958>
10008408:	00800044 	movi	r2,1
1000840c:	003dc706 	br	10007b2c <__alt_data_end+0xf8007b2c>
10008410:	d8c00217 	ldw	r3,8(sp)
10008414:	00800d84 	movi	r2,54
10008418:	dd400a17 	ldw	r21,40(sp)
1000841c:	10c5c83a 	sub	r2,r2,r3
10008420:	dd000817 	ldw	r20,32(sp)
10008424:	003d4c06 	br	10007958 <__alt_data_end+0xf8007958>
10008428:	dc800f15 	stw	r18,60(sp)
1000842c:	dcc01015 	stw	r19,64(sp)
10008430:	04000084 	movi	r16,2
10008434:	003bed06 	br	100073ec <__alt_data_end+0xf80073ec>
10008438:	d9000617 	ldw	r4,24(sp)
1000843c:	203f0d26 	beq	r4,zero,10008074 <__alt_data_end+0xf8008074>
10008440:	d9800c17 	ldw	r6,48(sp)
10008444:	01bcab0e 	bge	zero,r6,100076f4 <__alt_data_end+0xf80076f4>
10008448:	d9401017 	ldw	r5,64(sp)
1000844c:	d9000f17 	ldw	r4,60(sp)
10008450:	000d883a 	mov	r6,zero
10008454:	01d00934 	movhi	r7,16420
10008458:	00101d00 	call	100101d0 <__muldf3>
1000845c:	81000044 	addi	r4,r16,1
10008460:	d8800f15 	stw	r2,60(sp)
10008464:	d8c01015 	stw	r3,64(sp)
10008468:	00113b80 	call	100113b8 <__floatsidf>
1000846c:	d9800f17 	ldw	r6,60(sp)
10008470:	d9c01017 	ldw	r7,64(sp)
10008474:	1009883a 	mov	r4,r2
10008478:	180b883a 	mov	r5,r3
1000847c:	00101d00 	call	100101d0 <__muldf3>
10008480:	01d00734 	movhi	r7,16412
10008484:	000d883a 	mov	r6,zero
10008488:	1009883a 	mov	r4,r2
1000848c:	180b883a 	mov	r5,r3
10008490:	000ecfc0 	call	1000ecfc <__adddf3>
10008494:	d9c00517 	ldw	r7,20(sp)
10008498:	047f3034 	movhi	r17,64704
1000849c:	1021883a 	mov	r16,r2
100084a0:	39ffffc4 	addi	r7,r7,-1
100084a4:	d9c01315 	stw	r7,76(sp)
100084a8:	1c63883a 	add	r17,r3,r17
100084ac:	db000c17 	ldw	r12,48(sp)
100084b0:	003bea06 	br	1000745c <__alt_data_end+0xf800745c>
100084b4:	dc000915 	stw	r16,36(sp)
100084b8:	003e0e06 	br	10007cf4 <__alt_data_end+0xf8007cf4>
100084bc:	01000e44 	movi	r4,57
100084c0:	8825883a 	mov	r18,r17
100084c4:	9dc00044 	addi	r23,r19,1
100084c8:	99000005 	stb	r4,0(r19)
100084cc:	a023883a 	mov	r17,r20
100084d0:	dc000915 	stw	r16,36(sp)
100084d4:	003da406 	br	10007b68 <__alt_data_end+0xf8007b68>
100084d8:	d9801417 	ldw	r6,80(sp)
100084dc:	d9c01517 	ldw	r7,84(sp)
100084e0:	0009883a 	mov	r4,zero
100084e4:	014ff834 	movhi	r5,16352
100084e8:	0010a3c0 	call	10010a3c <__subdf3>
100084ec:	880d883a 	mov	r6,r17
100084f0:	a00f883a 	mov	r7,r20
100084f4:	1009883a 	mov	r4,r2
100084f8:	180b883a 	mov	r5,r3
100084fc:	00100000 	call	10010000 <__gedf2>
10008500:	00bc7c0e 	bge	zero,r2,100076f4 <__alt_data_end+0xf80076f4>
10008504:	01000c04 	movi	r4,48
10008508:	00000106 	br	10008510 <_dtoa_r+0x1580>
1000850c:	102f883a 	mov	r23,r2
10008510:	b8bfffc4 	addi	r2,r23,-1
10008514:	10c00007 	ldb	r3,0(r2)
10008518:	193ffc26 	beq	r3,r4,1000850c <__alt_data_end+0xf800850c>
1000851c:	d9801317 	ldw	r6,76(sp)
10008520:	d9800515 	stw	r6,20(sp)
10008524:	003c4406 	br	10007638 <__alt_data_end+0xf8007638>
10008528:	d9801317 	ldw	r6,76(sp)
1000852c:	d9800515 	stw	r6,20(sp)
10008530:	003cea06 	br	100078dc <__alt_data_end+0xf80078dc>
10008534:	dd800f17 	ldw	r22,60(sp)
10008538:	dcc01017 	ldw	r19,64(sp)
1000853c:	dc801217 	ldw	r18,72(sp)
10008540:	003c6c06 	br	100076f4 <__alt_data_end+0xf80076f4>
10008544:	903e031e 	bne	r18,zero,10007d54 <__alt_data_end+0xf8007d54>
10008548:	003ebb06 	br	10008038 <__alt_data_end+0xf8008038>
1000854c:	103e6c1e 	bne	r2,zero,10007f00 <__alt_data_end+0xf8007f00>
10008550:	4080004c 	andi	r2,r8,1
10008554:	103e6a26 	beq	r2,zero,10007f00 <__alt_data_end+0xf8007f00>
10008558:	003e6606 	br	10007ef4 <__alt_data_end+0xf8007ef4>
1000855c:	d8c00317 	ldw	r3,12(sp)
10008560:	00800084 	movi	r2,2
10008564:	10c02916 	blt	r2,r3,1000860c <_dtoa_r+0x167c>
10008568:	d9000c17 	ldw	r4,48(sp)
1000856c:	003e8806 	br	10007f90 <__alt_data_end+0xf8007f90>
10008570:	04000084 	movi	r16,2
10008574:	003b9d06 	br	100073ec <__alt_data_end+0xf80073ec>
10008578:	d9001317 	ldw	r4,76(sp)
1000857c:	d9000515 	stw	r4,20(sp)
10008580:	003cd606 	br	100078dc <__alt_data_end+0xf80078dc>
10008584:	d8801317 	ldw	r2,76(sp)
10008588:	d8800515 	stw	r2,20(sp)
1000858c:	003c2a06 	br	10007638 <__alt_data_end+0xf8007638>
10008590:	d9800317 	ldw	r6,12(sp)
10008594:	00800084 	movi	r2,2
10008598:	11801516 	blt	r2,r6,100085f0 <_dtoa_r+0x1660>
1000859c:	d9c00c17 	ldw	r7,48(sp)
100085a0:	d9c00615 	stw	r7,24(sp)
100085a4:	003df706 	br	10007d84 <__alt_data_end+0xf8007d84>
100085a8:	193d3926 	beq	r3,r4,10007a90 <__alt_data_end+0xf8007a90>
100085ac:	00c00f04 	movi	r3,60
100085b0:	1885c83a 	sub	r2,r3,r2
100085b4:	003ddf06 	br	10007d34 <__alt_data_end+0xf8007d34>
100085b8:	e009883a 	mov	r4,fp
100085bc:	e0001115 	stw	zero,68(fp)
100085c0:	000b883a 	mov	r5,zero
100085c4:	000a6480 	call	1000a648 <_Balloc>
100085c8:	d8800715 	stw	r2,28(sp)
100085cc:	d8c00717 	ldw	r3,28(sp)
100085d0:	00bfffc4 	movi	r2,-1
100085d4:	01000044 	movi	r4,1
100085d8:	d8800c15 	stw	r2,48(sp)
100085dc:	e0c01015 	stw	r3,64(fp)
100085e0:	d9000b15 	stw	r4,44(sp)
100085e4:	d8800615 	stw	r2,24(sp)
100085e8:	d8002215 	stw	zero,136(sp)
100085ec:	003c4106 	br	100076f4 <__alt_data_end+0xf80076f4>
100085f0:	d8c00c17 	ldw	r3,48(sp)
100085f4:	d8c00615 	stw	r3,24(sp)
100085f8:	003e7006 	br	10007fbc <__alt_data_end+0xf8007fbc>
100085fc:	04400044 	movi	r17,1
10008600:	003b2006 	br	10007284 <__alt_data_end+0xf8007284>
10008604:	000b883a 	mov	r5,zero
10008608:	003b3d06 	br	10007300 <__alt_data_end+0xf8007300>
1000860c:	d8800c17 	ldw	r2,48(sp)
10008610:	d8800615 	stw	r2,24(sp)
10008614:	003e6906 	br	10007fbc <__alt_data_end+0xf8007fbc>

10008618 <__sflush_r>:
10008618:	2880030b 	ldhu	r2,12(r5)
1000861c:	defffb04 	addi	sp,sp,-20
10008620:	dcc00315 	stw	r19,12(sp)
10008624:	dc400115 	stw	r17,4(sp)
10008628:	dfc00415 	stw	ra,16(sp)
1000862c:	dc800215 	stw	r18,8(sp)
10008630:	dc000015 	stw	r16,0(sp)
10008634:	10c0020c 	andi	r3,r2,8
10008638:	2823883a 	mov	r17,r5
1000863c:	2027883a 	mov	r19,r4
10008640:	1800311e 	bne	r3,zero,10008708 <__sflush_r+0xf0>
10008644:	28c00117 	ldw	r3,4(r5)
10008648:	10820014 	ori	r2,r2,2048
1000864c:	2880030d 	sth	r2,12(r5)
10008650:	00c04b0e 	bge	zero,r3,10008780 <__sflush_r+0x168>
10008654:	8a000a17 	ldw	r8,40(r17)
10008658:	40002326 	beq	r8,zero,100086e8 <__sflush_r+0xd0>
1000865c:	9c000017 	ldw	r16,0(r19)
10008660:	10c4000c 	andi	r3,r2,4096
10008664:	98000015 	stw	zero,0(r19)
10008668:	18004826 	beq	r3,zero,1000878c <__sflush_r+0x174>
1000866c:	89801417 	ldw	r6,80(r17)
10008670:	10c0010c 	andi	r3,r2,4
10008674:	18000626 	beq	r3,zero,10008690 <__sflush_r+0x78>
10008678:	88c00117 	ldw	r3,4(r17)
1000867c:	88800c17 	ldw	r2,48(r17)
10008680:	30cdc83a 	sub	r6,r6,r3
10008684:	10000226 	beq	r2,zero,10008690 <__sflush_r+0x78>
10008688:	88800f17 	ldw	r2,60(r17)
1000868c:	308dc83a 	sub	r6,r6,r2
10008690:	89400717 	ldw	r5,28(r17)
10008694:	000f883a 	mov	r7,zero
10008698:	9809883a 	mov	r4,r19
1000869c:	403ee83a 	callr	r8
100086a0:	00ffffc4 	movi	r3,-1
100086a4:	10c04426 	beq	r2,r3,100087b8 <__sflush_r+0x1a0>
100086a8:	88c0030b 	ldhu	r3,12(r17)
100086ac:	89000417 	ldw	r4,16(r17)
100086b0:	88000115 	stw	zero,4(r17)
100086b4:	197dffcc 	andi	r5,r3,63487
100086b8:	8940030d 	sth	r5,12(r17)
100086bc:	89000015 	stw	r4,0(r17)
100086c0:	18c4000c 	andi	r3,r3,4096
100086c4:	18002c1e 	bne	r3,zero,10008778 <__sflush_r+0x160>
100086c8:	89400c17 	ldw	r5,48(r17)
100086cc:	9c000015 	stw	r16,0(r19)
100086d0:	28000526 	beq	r5,zero,100086e8 <__sflush_r+0xd0>
100086d4:	88801004 	addi	r2,r17,64
100086d8:	28800226 	beq	r5,r2,100086e4 <__sflush_r+0xcc>
100086dc:	9809883a 	mov	r4,r19
100086e0:	0008d940 	call	10008d94 <_free_r>
100086e4:	88000c15 	stw	zero,48(r17)
100086e8:	0005883a 	mov	r2,zero
100086ec:	dfc00417 	ldw	ra,16(sp)
100086f0:	dcc00317 	ldw	r19,12(sp)
100086f4:	dc800217 	ldw	r18,8(sp)
100086f8:	dc400117 	ldw	r17,4(sp)
100086fc:	dc000017 	ldw	r16,0(sp)
10008700:	dec00504 	addi	sp,sp,20
10008704:	f800283a 	ret
10008708:	2c800417 	ldw	r18,16(r5)
1000870c:	903ff626 	beq	r18,zero,100086e8 <__alt_data_end+0xf80086e8>
10008710:	2c000017 	ldw	r16,0(r5)
10008714:	108000cc 	andi	r2,r2,3
10008718:	2c800015 	stw	r18,0(r5)
1000871c:	84a1c83a 	sub	r16,r16,r18
10008720:	1000131e 	bne	r2,zero,10008770 <__sflush_r+0x158>
10008724:	28800517 	ldw	r2,20(r5)
10008728:	88800215 	stw	r2,8(r17)
1000872c:	04000316 	blt	zero,r16,1000873c <__sflush_r+0x124>
10008730:	003fed06 	br	100086e8 <__alt_data_end+0xf80086e8>
10008734:	90a5883a 	add	r18,r18,r2
10008738:	043feb0e 	bge	zero,r16,100086e8 <__alt_data_end+0xf80086e8>
1000873c:	88800917 	ldw	r2,36(r17)
10008740:	89400717 	ldw	r5,28(r17)
10008744:	800f883a 	mov	r7,r16
10008748:	900d883a 	mov	r6,r18
1000874c:	9809883a 	mov	r4,r19
10008750:	103ee83a 	callr	r2
10008754:	80a1c83a 	sub	r16,r16,r2
10008758:	00bff616 	blt	zero,r2,10008734 <__alt_data_end+0xf8008734>
1000875c:	88c0030b 	ldhu	r3,12(r17)
10008760:	00bfffc4 	movi	r2,-1
10008764:	18c01014 	ori	r3,r3,64
10008768:	88c0030d 	sth	r3,12(r17)
1000876c:	003fdf06 	br	100086ec <__alt_data_end+0xf80086ec>
10008770:	0005883a 	mov	r2,zero
10008774:	003fec06 	br	10008728 <__alt_data_end+0xf8008728>
10008778:	88801415 	stw	r2,80(r17)
1000877c:	003fd206 	br	100086c8 <__alt_data_end+0xf80086c8>
10008780:	28c00f17 	ldw	r3,60(r5)
10008784:	00ffb316 	blt	zero,r3,10008654 <__alt_data_end+0xf8008654>
10008788:	003fd706 	br	100086e8 <__alt_data_end+0xf80086e8>
1000878c:	89400717 	ldw	r5,28(r17)
10008790:	000d883a 	mov	r6,zero
10008794:	01c00044 	movi	r7,1
10008798:	9809883a 	mov	r4,r19
1000879c:	403ee83a 	callr	r8
100087a0:	100d883a 	mov	r6,r2
100087a4:	00bfffc4 	movi	r2,-1
100087a8:	30801426 	beq	r6,r2,100087fc <__sflush_r+0x1e4>
100087ac:	8880030b 	ldhu	r2,12(r17)
100087b0:	8a000a17 	ldw	r8,40(r17)
100087b4:	003fae06 	br	10008670 <__alt_data_end+0xf8008670>
100087b8:	98c00017 	ldw	r3,0(r19)
100087bc:	183fba26 	beq	r3,zero,100086a8 <__alt_data_end+0xf80086a8>
100087c0:	01000744 	movi	r4,29
100087c4:	19000626 	beq	r3,r4,100087e0 <__sflush_r+0x1c8>
100087c8:	01000584 	movi	r4,22
100087cc:	19000426 	beq	r3,r4,100087e0 <__sflush_r+0x1c8>
100087d0:	88c0030b 	ldhu	r3,12(r17)
100087d4:	18c01014 	ori	r3,r3,64
100087d8:	88c0030d 	sth	r3,12(r17)
100087dc:	003fc306 	br	100086ec <__alt_data_end+0xf80086ec>
100087e0:	8880030b 	ldhu	r2,12(r17)
100087e4:	88c00417 	ldw	r3,16(r17)
100087e8:	88000115 	stw	zero,4(r17)
100087ec:	10bdffcc 	andi	r2,r2,63487
100087f0:	8880030d 	sth	r2,12(r17)
100087f4:	88c00015 	stw	r3,0(r17)
100087f8:	003fb306 	br	100086c8 <__alt_data_end+0xf80086c8>
100087fc:	98800017 	ldw	r2,0(r19)
10008800:	103fea26 	beq	r2,zero,100087ac <__alt_data_end+0xf80087ac>
10008804:	00c00744 	movi	r3,29
10008808:	10c00226 	beq	r2,r3,10008814 <__sflush_r+0x1fc>
1000880c:	00c00584 	movi	r3,22
10008810:	10c0031e 	bne	r2,r3,10008820 <__sflush_r+0x208>
10008814:	9c000015 	stw	r16,0(r19)
10008818:	0005883a 	mov	r2,zero
1000881c:	003fb306 	br	100086ec <__alt_data_end+0xf80086ec>
10008820:	88c0030b 	ldhu	r3,12(r17)
10008824:	3005883a 	mov	r2,r6
10008828:	18c01014 	ori	r3,r3,64
1000882c:	88c0030d 	sth	r3,12(r17)
10008830:	003fae06 	br	100086ec <__alt_data_end+0xf80086ec>

10008834 <_fflush_r>:
10008834:	defffd04 	addi	sp,sp,-12
10008838:	dc000115 	stw	r16,4(sp)
1000883c:	dfc00215 	stw	ra,8(sp)
10008840:	2021883a 	mov	r16,r4
10008844:	20000226 	beq	r4,zero,10008850 <_fflush_r+0x1c>
10008848:	20800e17 	ldw	r2,56(r4)
1000884c:	10000c26 	beq	r2,zero,10008880 <_fflush_r+0x4c>
10008850:	2880030f 	ldh	r2,12(r5)
10008854:	1000051e 	bne	r2,zero,1000886c <_fflush_r+0x38>
10008858:	0005883a 	mov	r2,zero
1000885c:	dfc00217 	ldw	ra,8(sp)
10008860:	dc000117 	ldw	r16,4(sp)
10008864:	dec00304 	addi	sp,sp,12
10008868:	f800283a 	ret
1000886c:	8009883a 	mov	r4,r16
10008870:	dfc00217 	ldw	ra,8(sp)
10008874:	dc000117 	ldw	r16,4(sp)
10008878:	dec00304 	addi	sp,sp,12
1000887c:	00086181 	jmpi	10008618 <__sflush_r>
10008880:	d9400015 	stw	r5,0(sp)
10008884:	0008c200 	call	10008c20 <__sinit>
10008888:	d9400017 	ldw	r5,0(sp)
1000888c:	003ff006 	br	10008850 <__alt_data_end+0xf8008850>

10008890 <fflush>:
10008890:	20000526 	beq	r4,zero,100088a8 <fflush+0x18>
10008894:	00840074 	movhi	r2,4097
10008898:	109d9a04 	addi	r2,r2,30312
1000889c:	200b883a 	mov	r5,r4
100088a0:	11000017 	ldw	r4,0(r2)
100088a4:	00088341 	jmpi	10008834 <_fflush_r>
100088a8:	00840074 	movhi	r2,4097
100088ac:	109d9904 	addi	r2,r2,30308
100088b0:	11000017 	ldw	r4,0(r2)
100088b4:	01440074 	movhi	r5,4097
100088b8:	29620d04 	addi	r5,r5,-30668
100088bc:	00096301 	jmpi	10009630 <_fwalk_reent>

100088c0 <__fp_unlock>:
100088c0:	0005883a 	mov	r2,zero
100088c4:	f800283a 	ret

100088c8 <_cleanup_r>:
100088c8:	01440074 	movhi	r5,4097
100088cc:	2975f304 	addi	r5,r5,-10292
100088d0:	00096301 	jmpi	10009630 <_fwalk_reent>

100088d4 <__sinit.part.1>:
100088d4:	defff704 	addi	sp,sp,-36
100088d8:	00c40074 	movhi	r3,4097
100088dc:	dfc00815 	stw	ra,32(sp)
100088e0:	ddc00715 	stw	r23,28(sp)
100088e4:	dd800615 	stw	r22,24(sp)
100088e8:	dd400515 	stw	r21,20(sp)
100088ec:	dd000415 	stw	r20,16(sp)
100088f0:	dcc00315 	stw	r19,12(sp)
100088f4:	dc800215 	stw	r18,8(sp)
100088f8:	dc400115 	stw	r17,4(sp)
100088fc:	dc000015 	stw	r16,0(sp)
10008900:	18e23204 	addi	r3,r3,-30520
10008904:	24000117 	ldw	r16,4(r4)
10008908:	20c00f15 	stw	r3,60(r4)
1000890c:	2080bb04 	addi	r2,r4,748
10008910:	00c000c4 	movi	r3,3
10008914:	20c0b915 	stw	r3,740(r4)
10008918:	2080ba15 	stw	r2,744(r4)
1000891c:	2000b815 	stw	zero,736(r4)
10008920:	05c00204 	movi	r23,8
10008924:	00800104 	movi	r2,4
10008928:	2025883a 	mov	r18,r4
1000892c:	b80d883a 	mov	r6,r23
10008930:	81001704 	addi	r4,r16,92
10008934:	000b883a 	mov	r5,zero
10008938:	80000015 	stw	zero,0(r16)
1000893c:	80000115 	stw	zero,4(r16)
10008940:	80000215 	stw	zero,8(r16)
10008944:	8080030d 	sth	r2,12(r16)
10008948:	80001915 	stw	zero,100(r16)
1000894c:	8000038d 	sth	zero,14(r16)
10008950:	80000415 	stw	zero,16(r16)
10008954:	80000515 	stw	zero,20(r16)
10008958:	80000615 	stw	zero,24(r16)
1000895c:	000a5200 	call	1000a520 <memset>
10008960:	05840074 	movhi	r22,4097
10008964:	94400217 	ldw	r17,8(r18)
10008968:	05440074 	movhi	r21,4097
1000896c:	05040074 	movhi	r20,4097
10008970:	04c40074 	movhi	r19,4097
10008974:	b5af4b04 	addi	r22,r22,-17108
10008978:	ad6f6204 	addi	r21,r21,-17016
1000897c:	a52f8104 	addi	r20,r20,-16892
10008980:	9cef9804 	addi	r19,r19,-16800
10008984:	85800815 	stw	r22,32(r16)
10008988:	85400915 	stw	r21,36(r16)
1000898c:	85000a15 	stw	r20,40(r16)
10008990:	84c00b15 	stw	r19,44(r16)
10008994:	84000715 	stw	r16,28(r16)
10008998:	00800284 	movi	r2,10
1000899c:	8880030d 	sth	r2,12(r17)
100089a0:	00800044 	movi	r2,1
100089a4:	b80d883a 	mov	r6,r23
100089a8:	89001704 	addi	r4,r17,92
100089ac:	000b883a 	mov	r5,zero
100089b0:	88000015 	stw	zero,0(r17)
100089b4:	88000115 	stw	zero,4(r17)
100089b8:	88000215 	stw	zero,8(r17)
100089bc:	88001915 	stw	zero,100(r17)
100089c0:	8880038d 	sth	r2,14(r17)
100089c4:	88000415 	stw	zero,16(r17)
100089c8:	88000515 	stw	zero,20(r17)
100089cc:	88000615 	stw	zero,24(r17)
100089d0:	000a5200 	call	1000a520 <memset>
100089d4:	94000317 	ldw	r16,12(r18)
100089d8:	00800484 	movi	r2,18
100089dc:	8c400715 	stw	r17,28(r17)
100089e0:	8d800815 	stw	r22,32(r17)
100089e4:	8d400915 	stw	r21,36(r17)
100089e8:	8d000a15 	stw	r20,40(r17)
100089ec:	8cc00b15 	stw	r19,44(r17)
100089f0:	8080030d 	sth	r2,12(r16)
100089f4:	00800084 	movi	r2,2
100089f8:	80000015 	stw	zero,0(r16)
100089fc:	80000115 	stw	zero,4(r16)
10008a00:	80000215 	stw	zero,8(r16)
10008a04:	80001915 	stw	zero,100(r16)
10008a08:	8080038d 	sth	r2,14(r16)
10008a0c:	80000415 	stw	zero,16(r16)
10008a10:	80000515 	stw	zero,20(r16)
10008a14:	80000615 	stw	zero,24(r16)
10008a18:	b80d883a 	mov	r6,r23
10008a1c:	000b883a 	mov	r5,zero
10008a20:	81001704 	addi	r4,r16,92
10008a24:	000a5200 	call	1000a520 <memset>
10008a28:	00800044 	movi	r2,1
10008a2c:	84000715 	stw	r16,28(r16)
10008a30:	85800815 	stw	r22,32(r16)
10008a34:	85400915 	stw	r21,36(r16)
10008a38:	85000a15 	stw	r20,40(r16)
10008a3c:	84c00b15 	stw	r19,44(r16)
10008a40:	90800e15 	stw	r2,56(r18)
10008a44:	dfc00817 	ldw	ra,32(sp)
10008a48:	ddc00717 	ldw	r23,28(sp)
10008a4c:	dd800617 	ldw	r22,24(sp)
10008a50:	dd400517 	ldw	r21,20(sp)
10008a54:	dd000417 	ldw	r20,16(sp)
10008a58:	dcc00317 	ldw	r19,12(sp)
10008a5c:	dc800217 	ldw	r18,8(sp)
10008a60:	dc400117 	ldw	r17,4(sp)
10008a64:	dc000017 	ldw	r16,0(sp)
10008a68:	dec00904 	addi	sp,sp,36
10008a6c:	f800283a 	ret

10008a70 <__fp_lock>:
10008a70:	0005883a 	mov	r2,zero
10008a74:	f800283a 	ret

10008a78 <__sfmoreglue>:
10008a78:	defffc04 	addi	sp,sp,-16
10008a7c:	dc800215 	stw	r18,8(sp)
10008a80:	2825883a 	mov	r18,r5
10008a84:	dc000015 	stw	r16,0(sp)
10008a88:	01401a04 	movi	r5,104
10008a8c:	2021883a 	mov	r16,r4
10008a90:	913fffc4 	addi	r4,r18,-1
10008a94:	dfc00315 	stw	ra,12(sp)
10008a98:	dc400115 	stw	r17,4(sp)
10008a9c:	00046600 	call	10004660 <__mulsi3>
10008aa0:	8009883a 	mov	r4,r16
10008aa4:	11401d04 	addi	r5,r2,116
10008aa8:	1023883a 	mov	r17,r2
10008aac:	000998c0 	call	1000998c <_malloc_r>
10008ab0:	1021883a 	mov	r16,r2
10008ab4:	10000726 	beq	r2,zero,10008ad4 <__sfmoreglue+0x5c>
10008ab8:	11000304 	addi	r4,r2,12
10008abc:	10000015 	stw	zero,0(r2)
10008ac0:	14800115 	stw	r18,4(r2)
10008ac4:	11000215 	stw	r4,8(r2)
10008ac8:	89801a04 	addi	r6,r17,104
10008acc:	000b883a 	mov	r5,zero
10008ad0:	000a5200 	call	1000a520 <memset>
10008ad4:	8005883a 	mov	r2,r16
10008ad8:	dfc00317 	ldw	ra,12(sp)
10008adc:	dc800217 	ldw	r18,8(sp)
10008ae0:	dc400117 	ldw	r17,4(sp)
10008ae4:	dc000017 	ldw	r16,0(sp)
10008ae8:	dec00404 	addi	sp,sp,16
10008aec:	f800283a 	ret

10008af0 <__sfp>:
10008af0:	defffb04 	addi	sp,sp,-20
10008af4:	dc000015 	stw	r16,0(sp)
10008af8:	04040074 	movhi	r16,4097
10008afc:	841d9904 	addi	r16,r16,30308
10008b00:	dcc00315 	stw	r19,12(sp)
10008b04:	2027883a 	mov	r19,r4
10008b08:	81000017 	ldw	r4,0(r16)
10008b0c:	dfc00415 	stw	ra,16(sp)
10008b10:	dc800215 	stw	r18,8(sp)
10008b14:	20800e17 	ldw	r2,56(r4)
10008b18:	dc400115 	stw	r17,4(sp)
10008b1c:	1000021e 	bne	r2,zero,10008b28 <__sfp+0x38>
10008b20:	00088d40 	call	100088d4 <__sinit.part.1>
10008b24:	81000017 	ldw	r4,0(r16)
10008b28:	2480b804 	addi	r18,r4,736
10008b2c:	047fffc4 	movi	r17,-1
10008b30:	91000117 	ldw	r4,4(r18)
10008b34:	94000217 	ldw	r16,8(r18)
10008b38:	213fffc4 	addi	r4,r4,-1
10008b3c:	20000a16 	blt	r4,zero,10008b68 <__sfp+0x78>
10008b40:	8080030f 	ldh	r2,12(r16)
10008b44:	10000c26 	beq	r2,zero,10008b78 <__sfp+0x88>
10008b48:	80c01d04 	addi	r3,r16,116
10008b4c:	00000206 	br	10008b58 <__sfp+0x68>
10008b50:	18bfe60f 	ldh	r2,-104(r3)
10008b54:	10000826 	beq	r2,zero,10008b78 <__sfp+0x88>
10008b58:	213fffc4 	addi	r4,r4,-1
10008b5c:	1c3ffd04 	addi	r16,r3,-12
10008b60:	18c01a04 	addi	r3,r3,104
10008b64:	247ffa1e 	bne	r4,r17,10008b50 <__alt_data_end+0xf8008b50>
10008b68:	90800017 	ldw	r2,0(r18)
10008b6c:	10001d26 	beq	r2,zero,10008be4 <__sfp+0xf4>
10008b70:	1025883a 	mov	r18,r2
10008b74:	003fee06 	br	10008b30 <__alt_data_end+0xf8008b30>
10008b78:	00bfffc4 	movi	r2,-1
10008b7c:	8080038d 	sth	r2,14(r16)
10008b80:	00800044 	movi	r2,1
10008b84:	8080030d 	sth	r2,12(r16)
10008b88:	80001915 	stw	zero,100(r16)
10008b8c:	80000015 	stw	zero,0(r16)
10008b90:	80000215 	stw	zero,8(r16)
10008b94:	80000115 	stw	zero,4(r16)
10008b98:	80000415 	stw	zero,16(r16)
10008b9c:	80000515 	stw	zero,20(r16)
10008ba0:	80000615 	stw	zero,24(r16)
10008ba4:	01800204 	movi	r6,8
10008ba8:	000b883a 	mov	r5,zero
10008bac:	81001704 	addi	r4,r16,92
10008bb0:	000a5200 	call	1000a520 <memset>
10008bb4:	8005883a 	mov	r2,r16
10008bb8:	80000c15 	stw	zero,48(r16)
10008bbc:	80000d15 	stw	zero,52(r16)
10008bc0:	80001115 	stw	zero,68(r16)
10008bc4:	80001215 	stw	zero,72(r16)
10008bc8:	dfc00417 	ldw	ra,16(sp)
10008bcc:	dcc00317 	ldw	r19,12(sp)
10008bd0:	dc800217 	ldw	r18,8(sp)
10008bd4:	dc400117 	ldw	r17,4(sp)
10008bd8:	dc000017 	ldw	r16,0(sp)
10008bdc:	dec00504 	addi	sp,sp,20
10008be0:	f800283a 	ret
10008be4:	01400104 	movi	r5,4
10008be8:	9809883a 	mov	r4,r19
10008bec:	0008a780 	call	10008a78 <__sfmoreglue>
10008bf0:	90800015 	stw	r2,0(r18)
10008bf4:	103fde1e 	bne	r2,zero,10008b70 <__alt_data_end+0xf8008b70>
10008bf8:	00800304 	movi	r2,12
10008bfc:	98800015 	stw	r2,0(r19)
10008c00:	0005883a 	mov	r2,zero
10008c04:	003ff006 	br	10008bc8 <__alt_data_end+0xf8008bc8>

10008c08 <_cleanup>:
10008c08:	00840074 	movhi	r2,4097
10008c0c:	109d9904 	addi	r2,r2,30308
10008c10:	11000017 	ldw	r4,0(r2)
10008c14:	01440074 	movhi	r5,4097
10008c18:	2975f304 	addi	r5,r5,-10292
10008c1c:	00096301 	jmpi	10009630 <_fwalk_reent>

10008c20 <__sinit>:
10008c20:	20800e17 	ldw	r2,56(r4)
10008c24:	10000126 	beq	r2,zero,10008c2c <__sinit+0xc>
10008c28:	f800283a 	ret
10008c2c:	00088d41 	jmpi	100088d4 <__sinit.part.1>

10008c30 <__sfp_lock_acquire>:
10008c30:	f800283a 	ret

10008c34 <__sfp_lock_release>:
10008c34:	f800283a 	ret

10008c38 <__sinit_lock_acquire>:
10008c38:	f800283a 	ret

10008c3c <__sinit_lock_release>:
10008c3c:	f800283a 	ret

10008c40 <__fp_lock_all>:
10008c40:	00840074 	movhi	r2,4097
10008c44:	109d9a04 	addi	r2,r2,30312
10008c48:	11000017 	ldw	r4,0(r2)
10008c4c:	01440074 	movhi	r5,4097
10008c50:	29629c04 	addi	r5,r5,-30096
10008c54:	000956c1 	jmpi	1000956c <_fwalk>

10008c58 <__fp_unlock_all>:
10008c58:	00840074 	movhi	r2,4097
10008c5c:	109d9a04 	addi	r2,r2,30312
10008c60:	11000017 	ldw	r4,0(r2)
10008c64:	01440074 	movhi	r5,4097
10008c68:	29623004 	addi	r5,r5,-30528
10008c6c:	000956c1 	jmpi	1000956c <_fwalk>

10008c70 <_malloc_trim_r>:
10008c70:	defffb04 	addi	sp,sp,-20
10008c74:	dcc00315 	stw	r19,12(sp)
10008c78:	04c40074 	movhi	r19,4097
10008c7c:	dc800215 	stw	r18,8(sp)
10008c80:	dc400115 	stw	r17,4(sp)
10008c84:	dc000015 	stw	r16,0(sp)
10008c88:	dfc00415 	stw	ra,16(sp)
10008c8c:	2821883a 	mov	r16,r5
10008c90:	9cd81204 	addi	r19,r19,24648
10008c94:	2025883a 	mov	r18,r4
10008c98:	0011b3c0 	call	10011b3c <__malloc_lock>
10008c9c:	98800217 	ldw	r2,8(r19)
10008ca0:	14400117 	ldw	r17,4(r2)
10008ca4:	00bfff04 	movi	r2,-4
10008ca8:	88a2703a 	and	r17,r17,r2
10008cac:	8c21c83a 	sub	r16,r17,r16
10008cb0:	8403fbc4 	addi	r16,r16,4079
10008cb4:	8020d33a 	srli	r16,r16,12
10008cb8:	0083ffc4 	movi	r2,4095
10008cbc:	843fffc4 	addi	r16,r16,-1
10008cc0:	8020933a 	slli	r16,r16,12
10008cc4:	1400060e 	bge	r2,r16,10008ce0 <_malloc_trim_r+0x70>
10008cc8:	000b883a 	mov	r5,zero
10008ccc:	9009883a 	mov	r4,r18
10008cd0:	000bcd80 	call	1000bcd8 <_sbrk_r>
10008cd4:	98c00217 	ldw	r3,8(r19)
10008cd8:	1c47883a 	add	r3,r3,r17
10008cdc:	10c00a26 	beq	r2,r3,10008d08 <_malloc_trim_r+0x98>
10008ce0:	9009883a 	mov	r4,r18
10008ce4:	0011b600 	call	10011b60 <__malloc_unlock>
10008ce8:	0005883a 	mov	r2,zero
10008cec:	dfc00417 	ldw	ra,16(sp)
10008cf0:	dcc00317 	ldw	r19,12(sp)
10008cf4:	dc800217 	ldw	r18,8(sp)
10008cf8:	dc400117 	ldw	r17,4(sp)
10008cfc:	dc000017 	ldw	r16,0(sp)
10008d00:	dec00504 	addi	sp,sp,20
10008d04:	f800283a 	ret
10008d08:	040bc83a 	sub	r5,zero,r16
10008d0c:	9009883a 	mov	r4,r18
10008d10:	000bcd80 	call	1000bcd8 <_sbrk_r>
10008d14:	00ffffc4 	movi	r3,-1
10008d18:	10c00d26 	beq	r2,r3,10008d50 <_malloc_trim_r+0xe0>
10008d1c:	00c400b4 	movhi	r3,4098
10008d20:	18eaf404 	addi	r3,r3,-21552
10008d24:	18800017 	ldw	r2,0(r3)
10008d28:	99000217 	ldw	r4,8(r19)
10008d2c:	8c23c83a 	sub	r17,r17,r16
10008d30:	8c400054 	ori	r17,r17,1
10008d34:	1421c83a 	sub	r16,r2,r16
10008d38:	24400115 	stw	r17,4(r4)
10008d3c:	9009883a 	mov	r4,r18
10008d40:	1c000015 	stw	r16,0(r3)
10008d44:	0011b600 	call	10011b60 <__malloc_unlock>
10008d48:	00800044 	movi	r2,1
10008d4c:	003fe706 	br	10008cec <__alt_data_end+0xf8008cec>
10008d50:	000b883a 	mov	r5,zero
10008d54:	9009883a 	mov	r4,r18
10008d58:	000bcd80 	call	1000bcd8 <_sbrk_r>
10008d5c:	99000217 	ldw	r4,8(r19)
10008d60:	014003c4 	movi	r5,15
10008d64:	1107c83a 	sub	r3,r2,r4
10008d68:	28ffdd0e 	bge	r5,r3,10008ce0 <__alt_data_end+0xf8008ce0>
10008d6c:	01440074 	movhi	r5,4097
10008d70:	295d9c04 	addi	r5,r5,30320
10008d74:	29400017 	ldw	r5,0(r5)
10008d78:	18c00054 	ori	r3,r3,1
10008d7c:	20c00115 	stw	r3,4(r4)
10008d80:	00c400b4 	movhi	r3,4098
10008d84:	1145c83a 	sub	r2,r2,r5
10008d88:	18eaf404 	addi	r3,r3,-21552
10008d8c:	18800015 	stw	r2,0(r3)
10008d90:	003fd306 	br	10008ce0 <__alt_data_end+0xf8008ce0>

10008d94 <_free_r>:
10008d94:	28004126 	beq	r5,zero,10008e9c <_free_r+0x108>
10008d98:	defffd04 	addi	sp,sp,-12
10008d9c:	dc400115 	stw	r17,4(sp)
10008da0:	dc000015 	stw	r16,0(sp)
10008da4:	2023883a 	mov	r17,r4
10008da8:	2821883a 	mov	r16,r5
10008dac:	dfc00215 	stw	ra,8(sp)
10008db0:	0011b3c0 	call	10011b3c <__malloc_lock>
10008db4:	81ffff17 	ldw	r7,-4(r16)
10008db8:	00bfff84 	movi	r2,-2
10008dbc:	01040074 	movhi	r4,4097
10008dc0:	81bffe04 	addi	r6,r16,-8
10008dc4:	3884703a 	and	r2,r7,r2
10008dc8:	21181204 	addi	r4,r4,24648
10008dcc:	308b883a 	add	r5,r6,r2
10008dd0:	2a400117 	ldw	r9,4(r5)
10008dd4:	22000217 	ldw	r8,8(r4)
10008dd8:	00ffff04 	movi	r3,-4
10008ddc:	48c6703a 	and	r3,r9,r3
10008de0:	2a005726 	beq	r5,r8,10008f40 <_free_r+0x1ac>
10008de4:	28c00115 	stw	r3,4(r5)
10008de8:	39c0004c 	andi	r7,r7,1
10008dec:	3800091e 	bne	r7,zero,10008e14 <_free_r+0x80>
10008df0:	823ffe17 	ldw	r8,-8(r16)
10008df4:	22400204 	addi	r9,r4,8
10008df8:	320dc83a 	sub	r6,r6,r8
10008dfc:	31c00217 	ldw	r7,8(r6)
10008e00:	1205883a 	add	r2,r2,r8
10008e04:	3a406526 	beq	r7,r9,10008f9c <_free_r+0x208>
10008e08:	32000317 	ldw	r8,12(r6)
10008e0c:	3a000315 	stw	r8,12(r7)
10008e10:	41c00215 	stw	r7,8(r8)
10008e14:	28cf883a 	add	r7,r5,r3
10008e18:	39c00117 	ldw	r7,4(r7)
10008e1c:	39c0004c 	andi	r7,r7,1
10008e20:	38003a26 	beq	r7,zero,10008f0c <_free_r+0x178>
10008e24:	10c00054 	ori	r3,r2,1
10008e28:	30c00115 	stw	r3,4(r6)
10008e2c:	3087883a 	add	r3,r6,r2
10008e30:	18800015 	stw	r2,0(r3)
10008e34:	00c07fc4 	movi	r3,511
10008e38:	18801936 	bltu	r3,r2,10008ea0 <_free_r+0x10c>
10008e3c:	1004d0fa 	srli	r2,r2,3
10008e40:	01c00044 	movi	r7,1
10008e44:	21400117 	ldw	r5,4(r4)
10008e48:	10c00044 	addi	r3,r2,1
10008e4c:	18c7883a 	add	r3,r3,r3
10008e50:	1005d0ba 	srai	r2,r2,2
10008e54:	18c7883a 	add	r3,r3,r3
10008e58:	18c7883a 	add	r3,r3,r3
10008e5c:	1907883a 	add	r3,r3,r4
10008e60:	3884983a 	sll	r2,r7,r2
10008e64:	19c00017 	ldw	r7,0(r3)
10008e68:	1a3ffe04 	addi	r8,r3,-8
10008e6c:	1144b03a 	or	r2,r2,r5
10008e70:	32000315 	stw	r8,12(r6)
10008e74:	31c00215 	stw	r7,8(r6)
10008e78:	20800115 	stw	r2,4(r4)
10008e7c:	19800015 	stw	r6,0(r3)
10008e80:	39800315 	stw	r6,12(r7)
10008e84:	8809883a 	mov	r4,r17
10008e88:	dfc00217 	ldw	ra,8(sp)
10008e8c:	dc400117 	ldw	r17,4(sp)
10008e90:	dc000017 	ldw	r16,0(sp)
10008e94:	dec00304 	addi	sp,sp,12
10008e98:	0011b601 	jmpi	10011b60 <__malloc_unlock>
10008e9c:	f800283a 	ret
10008ea0:	100ad27a 	srli	r5,r2,9
10008ea4:	00c00104 	movi	r3,4
10008ea8:	19404a36 	bltu	r3,r5,10008fd4 <_free_r+0x240>
10008eac:	100ad1ba 	srli	r5,r2,6
10008eb0:	28c00e44 	addi	r3,r5,57
10008eb4:	18c7883a 	add	r3,r3,r3
10008eb8:	29400e04 	addi	r5,r5,56
10008ebc:	18c7883a 	add	r3,r3,r3
10008ec0:	18c7883a 	add	r3,r3,r3
10008ec4:	1909883a 	add	r4,r3,r4
10008ec8:	20c00017 	ldw	r3,0(r4)
10008ecc:	01c40074 	movhi	r7,4097
10008ed0:	213ffe04 	addi	r4,r4,-8
10008ed4:	39d81204 	addi	r7,r7,24648
10008ed8:	20c04426 	beq	r4,r3,10008fec <_free_r+0x258>
10008edc:	01ffff04 	movi	r7,-4
10008ee0:	19400117 	ldw	r5,4(r3)
10008ee4:	29ca703a 	and	r5,r5,r7
10008ee8:	1140022e 	bgeu	r2,r5,10008ef4 <_free_r+0x160>
10008eec:	18c00217 	ldw	r3,8(r3)
10008ef0:	20fffb1e 	bne	r4,r3,10008ee0 <__alt_data_end+0xf8008ee0>
10008ef4:	19000317 	ldw	r4,12(r3)
10008ef8:	31000315 	stw	r4,12(r6)
10008efc:	30c00215 	stw	r3,8(r6)
10008f00:	21800215 	stw	r6,8(r4)
10008f04:	19800315 	stw	r6,12(r3)
10008f08:	003fde06 	br	10008e84 <__alt_data_end+0xf8008e84>
10008f0c:	29c00217 	ldw	r7,8(r5)
10008f10:	10c5883a 	add	r2,r2,r3
10008f14:	00c40074 	movhi	r3,4097
10008f18:	18d81404 	addi	r3,r3,24656
10008f1c:	38c03b26 	beq	r7,r3,1000900c <_free_r+0x278>
10008f20:	2a000317 	ldw	r8,12(r5)
10008f24:	11400054 	ori	r5,r2,1
10008f28:	3087883a 	add	r3,r6,r2
10008f2c:	3a000315 	stw	r8,12(r7)
10008f30:	41c00215 	stw	r7,8(r8)
10008f34:	31400115 	stw	r5,4(r6)
10008f38:	18800015 	stw	r2,0(r3)
10008f3c:	003fbd06 	br	10008e34 <__alt_data_end+0xf8008e34>
10008f40:	39c0004c 	andi	r7,r7,1
10008f44:	10c5883a 	add	r2,r2,r3
10008f48:	3800071e 	bne	r7,zero,10008f68 <_free_r+0x1d4>
10008f4c:	81fffe17 	ldw	r7,-8(r16)
10008f50:	31cdc83a 	sub	r6,r6,r7
10008f54:	30c00317 	ldw	r3,12(r6)
10008f58:	31400217 	ldw	r5,8(r6)
10008f5c:	11c5883a 	add	r2,r2,r7
10008f60:	28c00315 	stw	r3,12(r5)
10008f64:	19400215 	stw	r5,8(r3)
10008f68:	10c00054 	ori	r3,r2,1
10008f6c:	30c00115 	stw	r3,4(r6)
10008f70:	00c40074 	movhi	r3,4097
10008f74:	18dd9d04 	addi	r3,r3,30324
10008f78:	18c00017 	ldw	r3,0(r3)
10008f7c:	21800215 	stw	r6,8(r4)
10008f80:	10ffc036 	bltu	r2,r3,10008e84 <__alt_data_end+0xf8008e84>
10008f84:	008400b4 	movhi	r2,4098
10008f88:	10a8f504 	addi	r2,r2,-23596
10008f8c:	11400017 	ldw	r5,0(r2)
10008f90:	8809883a 	mov	r4,r17
10008f94:	0008c700 	call	10008c70 <_malloc_trim_r>
10008f98:	003fba06 	br	10008e84 <__alt_data_end+0xf8008e84>
10008f9c:	28c9883a 	add	r4,r5,r3
10008fa0:	21000117 	ldw	r4,4(r4)
10008fa4:	2100004c 	andi	r4,r4,1
10008fa8:	2000391e 	bne	r4,zero,10009090 <_free_r+0x2fc>
10008fac:	29c00217 	ldw	r7,8(r5)
10008fb0:	29000317 	ldw	r4,12(r5)
10008fb4:	1885883a 	add	r2,r3,r2
10008fb8:	10c00054 	ori	r3,r2,1
10008fbc:	39000315 	stw	r4,12(r7)
10008fc0:	21c00215 	stw	r7,8(r4)
10008fc4:	30c00115 	stw	r3,4(r6)
10008fc8:	308d883a 	add	r6,r6,r2
10008fcc:	30800015 	stw	r2,0(r6)
10008fd0:	003fac06 	br	10008e84 <__alt_data_end+0xf8008e84>
10008fd4:	00c00504 	movi	r3,20
10008fd8:	19401536 	bltu	r3,r5,10009030 <_free_r+0x29c>
10008fdc:	28c01704 	addi	r3,r5,92
10008fe0:	18c7883a 	add	r3,r3,r3
10008fe4:	294016c4 	addi	r5,r5,91
10008fe8:	003fb406 	br	10008ebc <__alt_data_end+0xf8008ebc>
10008fec:	280bd0ba 	srai	r5,r5,2
10008ff0:	00c00044 	movi	r3,1
10008ff4:	38800117 	ldw	r2,4(r7)
10008ff8:	194a983a 	sll	r5,r3,r5
10008ffc:	2007883a 	mov	r3,r4
10009000:	2884b03a 	or	r2,r5,r2
10009004:	38800115 	stw	r2,4(r7)
10009008:	003fbb06 	br	10008ef8 <__alt_data_end+0xf8008ef8>
1000900c:	21800515 	stw	r6,20(r4)
10009010:	21800415 	stw	r6,16(r4)
10009014:	10c00054 	ori	r3,r2,1
10009018:	31c00315 	stw	r7,12(r6)
1000901c:	31c00215 	stw	r7,8(r6)
10009020:	30c00115 	stw	r3,4(r6)
10009024:	308d883a 	add	r6,r6,r2
10009028:	30800015 	stw	r2,0(r6)
1000902c:	003f9506 	br	10008e84 <__alt_data_end+0xf8008e84>
10009030:	00c01504 	movi	r3,84
10009034:	19400536 	bltu	r3,r5,1000904c <_free_r+0x2b8>
10009038:	100ad33a 	srli	r5,r2,12
1000903c:	28c01bc4 	addi	r3,r5,111
10009040:	18c7883a 	add	r3,r3,r3
10009044:	29401b84 	addi	r5,r5,110
10009048:	003f9c06 	br	10008ebc <__alt_data_end+0xf8008ebc>
1000904c:	00c05504 	movi	r3,340
10009050:	19400536 	bltu	r3,r5,10009068 <_free_r+0x2d4>
10009054:	100ad3fa 	srli	r5,r2,15
10009058:	28c01e04 	addi	r3,r5,120
1000905c:	18c7883a 	add	r3,r3,r3
10009060:	29401dc4 	addi	r5,r5,119
10009064:	003f9506 	br	10008ebc <__alt_data_end+0xf8008ebc>
10009068:	00c15504 	movi	r3,1364
1000906c:	19400536 	bltu	r3,r5,10009084 <_free_r+0x2f0>
10009070:	100ad4ba 	srli	r5,r2,18
10009074:	28c01f44 	addi	r3,r5,125
10009078:	18c7883a 	add	r3,r3,r3
1000907c:	29401f04 	addi	r5,r5,124
10009080:	003f8e06 	br	10008ebc <__alt_data_end+0xf8008ebc>
10009084:	00c03f84 	movi	r3,254
10009088:	01401f84 	movi	r5,126
1000908c:	003f8b06 	br	10008ebc <__alt_data_end+0xf8008ebc>
10009090:	10c00054 	ori	r3,r2,1
10009094:	30c00115 	stw	r3,4(r6)
10009098:	308d883a 	add	r6,r6,r2
1000909c:	30800015 	stw	r2,0(r6)
100090a0:	003f7806 	br	10008e84 <__alt_data_end+0xf8008e84>

100090a4 <__sfvwrite_r>:
100090a4:	30800217 	ldw	r2,8(r6)
100090a8:	10006726 	beq	r2,zero,10009248 <__sfvwrite_r+0x1a4>
100090ac:	28c0030b 	ldhu	r3,12(r5)
100090b0:	defff404 	addi	sp,sp,-48
100090b4:	dd400715 	stw	r21,28(sp)
100090b8:	dd000615 	stw	r20,24(sp)
100090bc:	dc000215 	stw	r16,8(sp)
100090c0:	dfc00b15 	stw	ra,44(sp)
100090c4:	df000a15 	stw	fp,40(sp)
100090c8:	ddc00915 	stw	r23,36(sp)
100090cc:	dd800815 	stw	r22,32(sp)
100090d0:	dcc00515 	stw	r19,20(sp)
100090d4:	dc800415 	stw	r18,16(sp)
100090d8:	dc400315 	stw	r17,12(sp)
100090dc:	1880020c 	andi	r2,r3,8
100090e0:	2821883a 	mov	r16,r5
100090e4:	202b883a 	mov	r21,r4
100090e8:	3029883a 	mov	r20,r6
100090ec:	10002726 	beq	r2,zero,1000918c <__sfvwrite_r+0xe8>
100090f0:	28800417 	ldw	r2,16(r5)
100090f4:	10002526 	beq	r2,zero,1000918c <__sfvwrite_r+0xe8>
100090f8:	1880008c 	andi	r2,r3,2
100090fc:	a4400017 	ldw	r17,0(r20)
10009100:	10002a26 	beq	r2,zero,100091ac <__sfvwrite_r+0x108>
10009104:	05a00034 	movhi	r22,32768
10009108:	0027883a 	mov	r19,zero
1000910c:	0025883a 	mov	r18,zero
10009110:	b5bf0004 	addi	r22,r22,-1024
10009114:	980d883a 	mov	r6,r19
10009118:	a809883a 	mov	r4,r21
1000911c:	90004626 	beq	r18,zero,10009238 <__sfvwrite_r+0x194>
10009120:	900f883a 	mov	r7,r18
10009124:	b480022e 	bgeu	r22,r18,10009130 <__sfvwrite_r+0x8c>
10009128:	01e00034 	movhi	r7,32768
1000912c:	39ff0004 	addi	r7,r7,-1024
10009130:	80800917 	ldw	r2,36(r16)
10009134:	81400717 	ldw	r5,28(r16)
10009138:	103ee83a 	callr	r2
1000913c:	00805a0e 	bge	zero,r2,100092a8 <__sfvwrite_r+0x204>
10009140:	a0c00217 	ldw	r3,8(r20)
10009144:	98a7883a 	add	r19,r19,r2
10009148:	90a5c83a 	sub	r18,r18,r2
1000914c:	1885c83a 	sub	r2,r3,r2
10009150:	a0800215 	stw	r2,8(r20)
10009154:	103fef1e 	bne	r2,zero,10009114 <__alt_data_end+0xf8009114>
10009158:	0005883a 	mov	r2,zero
1000915c:	dfc00b17 	ldw	ra,44(sp)
10009160:	df000a17 	ldw	fp,40(sp)
10009164:	ddc00917 	ldw	r23,36(sp)
10009168:	dd800817 	ldw	r22,32(sp)
1000916c:	dd400717 	ldw	r21,28(sp)
10009170:	dd000617 	ldw	r20,24(sp)
10009174:	dcc00517 	ldw	r19,20(sp)
10009178:	dc800417 	ldw	r18,16(sp)
1000917c:	dc400317 	ldw	r17,12(sp)
10009180:	dc000217 	ldw	r16,8(sp)
10009184:	dec00c04 	addi	sp,sp,48
10009188:	f800283a 	ret
1000918c:	800b883a 	mov	r5,r16
10009190:	a809883a 	mov	r4,r21
10009194:	0006c140 	call	10006c14 <__swsetup_r>
10009198:	1000ee1e 	bne	r2,zero,10009554 <__sfvwrite_r+0x4b0>
1000919c:	80c0030b 	ldhu	r3,12(r16)
100091a0:	a4400017 	ldw	r17,0(r20)
100091a4:	1880008c 	andi	r2,r3,2
100091a8:	103fd61e 	bne	r2,zero,10009104 <__alt_data_end+0xf8009104>
100091ac:	1880004c 	andi	r2,r3,1
100091b0:	1000421e 	bne	r2,zero,100092bc <__sfvwrite_r+0x218>
100091b4:	0039883a 	mov	fp,zero
100091b8:	0025883a 	mov	r18,zero
100091bc:	90001a26 	beq	r18,zero,10009228 <__sfvwrite_r+0x184>
100091c0:	1880800c 	andi	r2,r3,512
100091c4:	84c00217 	ldw	r19,8(r16)
100091c8:	10002126 	beq	r2,zero,10009250 <__sfvwrite_r+0x1ac>
100091cc:	982f883a 	mov	r23,r19
100091d0:	94c09636 	bltu	r18,r19,1000942c <__sfvwrite_r+0x388>
100091d4:	1881200c 	andi	r2,r3,1152
100091d8:	1000a11e 	bne	r2,zero,10009460 <__sfvwrite_r+0x3bc>
100091dc:	81000017 	ldw	r4,0(r16)
100091e0:	b80d883a 	mov	r6,r23
100091e4:	e00b883a 	mov	r5,fp
100091e8:	000a3c40 	call	1000a3c4 <memmove>
100091ec:	80c00217 	ldw	r3,8(r16)
100091f0:	81000017 	ldw	r4,0(r16)
100091f4:	9005883a 	mov	r2,r18
100091f8:	1ce7c83a 	sub	r19,r3,r19
100091fc:	25cf883a 	add	r7,r4,r23
10009200:	84c00215 	stw	r19,8(r16)
10009204:	81c00015 	stw	r7,0(r16)
10009208:	a0c00217 	ldw	r3,8(r20)
1000920c:	e0b9883a 	add	fp,fp,r2
10009210:	90a5c83a 	sub	r18,r18,r2
10009214:	18a7c83a 	sub	r19,r3,r2
10009218:	a4c00215 	stw	r19,8(r20)
1000921c:	983fce26 	beq	r19,zero,10009158 <__alt_data_end+0xf8009158>
10009220:	80c0030b 	ldhu	r3,12(r16)
10009224:	903fe61e 	bne	r18,zero,100091c0 <__alt_data_end+0xf80091c0>
10009228:	8f000017 	ldw	fp,0(r17)
1000922c:	8c800117 	ldw	r18,4(r17)
10009230:	8c400204 	addi	r17,r17,8
10009234:	003fe106 	br	100091bc <__alt_data_end+0xf80091bc>
10009238:	8cc00017 	ldw	r19,0(r17)
1000923c:	8c800117 	ldw	r18,4(r17)
10009240:	8c400204 	addi	r17,r17,8
10009244:	003fb306 	br	10009114 <__alt_data_end+0xf8009114>
10009248:	0005883a 	mov	r2,zero
1000924c:	f800283a 	ret
10009250:	81000017 	ldw	r4,0(r16)
10009254:	80800417 	ldw	r2,16(r16)
10009258:	11005a36 	bltu	r2,r4,100093c4 <__sfvwrite_r+0x320>
1000925c:	85c00517 	ldw	r23,20(r16)
10009260:	95c05836 	bltu	r18,r23,100093c4 <__sfvwrite_r+0x320>
10009264:	00a00034 	movhi	r2,32768
10009268:	10bfffc4 	addi	r2,r2,-1
1000926c:	9009883a 	mov	r4,r18
10009270:	1480012e 	bgeu	r2,r18,10009278 <__sfvwrite_r+0x1d4>
10009274:	1009883a 	mov	r4,r2
10009278:	b80b883a 	mov	r5,r23
1000927c:	000eb480 	call	1000eb48 <__divsi3>
10009280:	b80b883a 	mov	r5,r23
10009284:	1009883a 	mov	r4,r2
10009288:	00046600 	call	10004660 <__mulsi3>
1000928c:	81400717 	ldw	r5,28(r16)
10009290:	80c00917 	ldw	r3,36(r16)
10009294:	100f883a 	mov	r7,r2
10009298:	e00d883a 	mov	r6,fp
1000929c:	a809883a 	mov	r4,r21
100092a0:	183ee83a 	callr	r3
100092a4:	00bfd816 	blt	zero,r2,10009208 <__alt_data_end+0xf8009208>
100092a8:	8080030b 	ldhu	r2,12(r16)
100092ac:	10801014 	ori	r2,r2,64
100092b0:	8080030d 	sth	r2,12(r16)
100092b4:	00bfffc4 	movi	r2,-1
100092b8:	003fa806 	br	1000915c <__alt_data_end+0xf800915c>
100092bc:	0027883a 	mov	r19,zero
100092c0:	0011883a 	mov	r8,zero
100092c4:	0039883a 	mov	fp,zero
100092c8:	0025883a 	mov	r18,zero
100092cc:	90001f26 	beq	r18,zero,1000934c <__sfvwrite_r+0x2a8>
100092d0:	40005a26 	beq	r8,zero,1000943c <__sfvwrite_r+0x398>
100092d4:	982d883a 	mov	r22,r19
100092d8:	94c0012e 	bgeu	r18,r19,100092e0 <__sfvwrite_r+0x23c>
100092dc:	902d883a 	mov	r22,r18
100092e0:	81000017 	ldw	r4,0(r16)
100092e4:	80800417 	ldw	r2,16(r16)
100092e8:	b02f883a 	mov	r23,r22
100092ec:	81c00517 	ldw	r7,20(r16)
100092f0:	1100032e 	bgeu	r2,r4,10009300 <__sfvwrite_r+0x25c>
100092f4:	80c00217 	ldw	r3,8(r16)
100092f8:	38c7883a 	add	r3,r7,r3
100092fc:	1d801816 	blt	r3,r22,10009360 <__sfvwrite_r+0x2bc>
10009300:	b1c03e16 	blt	r22,r7,100093fc <__sfvwrite_r+0x358>
10009304:	80800917 	ldw	r2,36(r16)
10009308:	81400717 	ldw	r5,28(r16)
1000930c:	e00d883a 	mov	r6,fp
10009310:	da000115 	stw	r8,4(sp)
10009314:	a809883a 	mov	r4,r21
10009318:	103ee83a 	callr	r2
1000931c:	102f883a 	mov	r23,r2
10009320:	da000117 	ldw	r8,4(sp)
10009324:	00bfe00e 	bge	zero,r2,100092a8 <__alt_data_end+0xf80092a8>
10009328:	9de7c83a 	sub	r19,r19,r23
1000932c:	98001f26 	beq	r19,zero,100093ac <__sfvwrite_r+0x308>
10009330:	a0800217 	ldw	r2,8(r20)
10009334:	e5f9883a 	add	fp,fp,r23
10009338:	95e5c83a 	sub	r18,r18,r23
1000933c:	15efc83a 	sub	r23,r2,r23
10009340:	a5c00215 	stw	r23,8(r20)
10009344:	b83f8426 	beq	r23,zero,10009158 <__alt_data_end+0xf8009158>
10009348:	903fe11e 	bne	r18,zero,100092d0 <__alt_data_end+0xf80092d0>
1000934c:	8f000017 	ldw	fp,0(r17)
10009350:	8c800117 	ldw	r18,4(r17)
10009354:	0011883a 	mov	r8,zero
10009358:	8c400204 	addi	r17,r17,8
1000935c:	003fdb06 	br	100092cc <__alt_data_end+0xf80092cc>
10009360:	180d883a 	mov	r6,r3
10009364:	e00b883a 	mov	r5,fp
10009368:	da000115 	stw	r8,4(sp)
1000936c:	d8c00015 	stw	r3,0(sp)
10009370:	000a3c40 	call	1000a3c4 <memmove>
10009374:	d8c00017 	ldw	r3,0(sp)
10009378:	80800017 	ldw	r2,0(r16)
1000937c:	800b883a 	mov	r5,r16
10009380:	a809883a 	mov	r4,r21
10009384:	10c5883a 	add	r2,r2,r3
10009388:	80800015 	stw	r2,0(r16)
1000938c:	d8c00015 	stw	r3,0(sp)
10009390:	00088340 	call	10008834 <_fflush_r>
10009394:	d8c00017 	ldw	r3,0(sp)
10009398:	da000117 	ldw	r8,4(sp)
1000939c:	103fc21e 	bne	r2,zero,100092a8 <__alt_data_end+0xf80092a8>
100093a0:	182f883a 	mov	r23,r3
100093a4:	9de7c83a 	sub	r19,r19,r23
100093a8:	983fe11e 	bne	r19,zero,10009330 <__alt_data_end+0xf8009330>
100093ac:	800b883a 	mov	r5,r16
100093b0:	a809883a 	mov	r4,r21
100093b4:	00088340 	call	10008834 <_fflush_r>
100093b8:	103fbb1e 	bne	r2,zero,100092a8 <__alt_data_end+0xf80092a8>
100093bc:	0011883a 	mov	r8,zero
100093c0:	003fdb06 	br	10009330 <__alt_data_end+0xf8009330>
100093c4:	94c0012e 	bgeu	r18,r19,100093cc <__sfvwrite_r+0x328>
100093c8:	9027883a 	mov	r19,r18
100093cc:	980d883a 	mov	r6,r19
100093d0:	e00b883a 	mov	r5,fp
100093d4:	000a3c40 	call	1000a3c4 <memmove>
100093d8:	80800217 	ldw	r2,8(r16)
100093dc:	80c00017 	ldw	r3,0(r16)
100093e0:	14c5c83a 	sub	r2,r2,r19
100093e4:	1cc7883a 	add	r3,r3,r19
100093e8:	80800215 	stw	r2,8(r16)
100093ec:	80c00015 	stw	r3,0(r16)
100093f0:	10004326 	beq	r2,zero,10009500 <__sfvwrite_r+0x45c>
100093f4:	9805883a 	mov	r2,r19
100093f8:	003f8306 	br	10009208 <__alt_data_end+0xf8009208>
100093fc:	b00d883a 	mov	r6,r22
10009400:	e00b883a 	mov	r5,fp
10009404:	da000115 	stw	r8,4(sp)
10009408:	000a3c40 	call	1000a3c4 <memmove>
1000940c:	80800217 	ldw	r2,8(r16)
10009410:	80c00017 	ldw	r3,0(r16)
10009414:	da000117 	ldw	r8,4(sp)
10009418:	1585c83a 	sub	r2,r2,r22
1000941c:	1dad883a 	add	r22,r3,r22
10009420:	80800215 	stw	r2,8(r16)
10009424:	85800015 	stw	r22,0(r16)
10009428:	003fbf06 	br	10009328 <__alt_data_end+0xf8009328>
1000942c:	81000017 	ldw	r4,0(r16)
10009430:	9027883a 	mov	r19,r18
10009434:	902f883a 	mov	r23,r18
10009438:	003f6906 	br	100091e0 <__alt_data_end+0xf80091e0>
1000943c:	900d883a 	mov	r6,r18
10009440:	01400284 	movi	r5,10
10009444:	e009883a 	mov	r4,fp
10009448:	000a1980 	call	1000a198 <memchr>
1000944c:	10003e26 	beq	r2,zero,10009548 <__sfvwrite_r+0x4a4>
10009450:	10800044 	addi	r2,r2,1
10009454:	1727c83a 	sub	r19,r2,fp
10009458:	02000044 	movi	r8,1
1000945c:	003f9d06 	br	100092d4 <__alt_data_end+0xf80092d4>
10009460:	80800517 	ldw	r2,20(r16)
10009464:	81400417 	ldw	r5,16(r16)
10009468:	81c00017 	ldw	r7,0(r16)
1000946c:	10a7883a 	add	r19,r2,r2
10009470:	9885883a 	add	r2,r19,r2
10009474:	1026d7fa 	srli	r19,r2,31
10009478:	396dc83a 	sub	r22,r7,r5
1000947c:	b1000044 	addi	r4,r22,1
10009480:	9885883a 	add	r2,r19,r2
10009484:	1027d07a 	srai	r19,r2,1
10009488:	2485883a 	add	r2,r4,r18
1000948c:	980d883a 	mov	r6,r19
10009490:	9880022e 	bgeu	r19,r2,1000949c <__sfvwrite_r+0x3f8>
10009494:	1027883a 	mov	r19,r2
10009498:	100d883a 	mov	r6,r2
1000949c:	18c1000c 	andi	r3,r3,1024
100094a0:	18001c26 	beq	r3,zero,10009514 <__sfvwrite_r+0x470>
100094a4:	300b883a 	mov	r5,r6
100094a8:	a809883a 	mov	r4,r21
100094ac:	000998c0 	call	1000998c <_malloc_r>
100094b0:	102f883a 	mov	r23,r2
100094b4:	10002926 	beq	r2,zero,1000955c <__sfvwrite_r+0x4b8>
100094b8:	81400417 	ldw	r5,16(r16)
100094bc:	b00d883a 	mov	r6,r22
100094c0:	1009883a 	mov	r4,r2
100094c4:	000a27c0 	call	1000a27c <memcpy>
100094c8:	8080030b 	ldhu	r2,12(r16)
100094cc:	00fedfc4 	movi	r3,-1153
100094d0:	10c4703a 	and	r2,r2,r3
100094d4:	10802014 	ori	r2,r2,128
100094d8:	8080030d 	sth	r2,12(r16)
100094dc:	bd89883a 	add	r4,r23,r22
100094e0:	9d8fc83a 	sub	r7,r19,r22
100094e4:	85c00415 	stw	r23,16(r16)
100094e8:	84c00515 	stw	r19,20(r16)
100094ec:	81000015 	stw	r4,0(r16)
100094f0:	9027883a 	mov	r19,r18
100094f4:	81c00215 	stw	r7,8(r16)
100094f8:	902f883a 	mov	r23,r18
100094fc:	003f3806 	br	100091e0 <__alt_data_end+0xf80091e0>
10009500:	800b883a 	mov	r5,r16
10009504:	a809883a 	mov	r4,r21
10009508:	00088340 	call	10008834 <_fflush_r>
1000950c:	103fb926 	beq	r2,zero,100093f4 <__alt_data_end+0xf80093f4>
10009510:	003f6506 	br	100092a8 <__alt_data_end+0xf80092a8>
10009514:	a809883a 	mov	r4,r21
10009518:	000b7000 	call	1000b700 <_realloc_r>
1000951c:	102f883a 	mov	r23,r2
10009520:	103fee1e 	bne	r2,zero,100094dc <__alt_data_end+0xf80094dc>
10009524:	81400417 	ldw	r5,16(r16)
10009528:	a809883a 	mov	r4,r21
1000952c:	0008d940 	call	10008d94 <_free_r>
10009530:	8080030b 	ldhu	r2,12(r16)
10009534:	00ffdfc4 	movi	r3,-129
10009538:	1884703a 	and	r2,r3,r2
1000953c:	00c00304 	movi	r3,12
10009540:	a8c00015 	stw	r3,0(r21)
10009544:	003f5906 	br	100092ac <__alt_data_end+0xf80092ac>
10009548:	94c00044 	addi	r19,r18,1
1000954c:	02000044 	movi	r8,1
10009550:	003f6006 	br	100092d4 <__alt_data_end+0xf80092d4>
10009554:	00bfffc4 	movi	r2,-1
10009558:	003f0006 	br	1000915c <__alt_data_end+0xf800915c>
1000955c:	00800304 	movi	r2,12
10009560:	a8800015 	stw	r2,0(r21)
10009564:	8080030b 	ldhu	r2,12(r16)
10009568:	003f5006 	br	100092ac <__alt_data_end+0xf80092ac>

1000956c <_fwalk>:
1000956c:	defff704 	addi	sp,sp,-36
10009570:	dd000415 	stw	r20,16(sp)
10009574:	dfc00815 	stw	ra,32(sp)
10009578:	ddc00715 	stw	r23,28(sp)
1000957c:	dd800615 	stw	r22,24(sp)
10009580:	dd400515 	stw	r21,20(sp)
10009584:	dcc00315 	stw	r19,12(sp)
10009588:	dc800215 	stw	r18,8(sp)
1000958c:	dc400115 	stw	r17,4(sp)
10009590:	dc000015 	stw	r16,0(sp)
10009594:	2500b804 	addi	r20,r4,736
10009598:	a0002326 	beq	r20,zero,10009628 <_fwalk+0xbc>
1000959c:	282b883a 	mov	r21,r5
100095a0:	002f883a 	mov	r23,zero
100095a4:	05800044 	movi	r22,1
100095a8:	04ffffc4 	movi	r19,-1
100095ac:	a4400117 	ldw	r17,4(r20)
100095b0:	a4800217 	ldw	r18,8(r20)
100095b4:	8c7fffc4 	addi	r17,r17,-1
100095b8:	88000d16 	blt	r17,zero,100095f0 <_fwalk+0x84>
100095bc:	94000304 	addi	r16,r18,12
100095c0:	94800384 	addi	r18,r18,14
100095c4:	8080000b 	ldhu	r2,0(r16)
100095c8:	8c7fffc4 	addi	r17,r17,-1
100095cc:	813ffd04 	addi	r4,r16,-12
100095d0:	b080042e 	bgeu	r22,r2,100095e4 <_fwalk+0x78>
100095d4:	9080000f 	ldh	r2,0(r18)
100095d8:	14c00226 	beq	r2,r19,100095e4 <_fwalk+0x78>
100095dc:	a83ee83a 	callr	r21
100095e0:	b8aeb03a 	or	r23,r23,r2
100095e4:	84001a04 	addi	r16,r16,104
100095e8:	94801a04 	addi	r18,r18,104
100095ec:	8cfff51e 	bne	r17,r19,100095c4 <__alt_data_end+0xf80095c4>
100095f0:	a5000017 	ldw	r20,0(r20)
100095f4:	a03fed1e 	bne	r20,zero,100095ac <__alt_data_end+0xf80095ac>
100095f8:	b805883a 	mov	r2,r23
100095fc:	dfc00817 	ldw	ra,32(sp)
10009600:	ddc00717 	ldw	r23,28(sp)
10009604:	dd800617 	ldw	r22,24(sp)
10009608:	dd400517 	ldw	r21,20(sp)
1000960c:	dd000417 	ldw	r20,16(sp)
10009610:	dcc00317 	ldw	r19,12(sp)
10009614:	dc800217 	ldw	r18,8(sp)
10009618:	dc400117 	ldw	r17,4(sp)
1000961c:	dc000017 	ldw	r16,0(sp)
10009620:	dec00904 	addi	sp,sp,36
10009624:	f800283a 	ret
10009628:	002f883a 	mov	r23,zero
1000962c:	003ff206 	br	100095f8 <__alt_data_end+0xf80095f8>

10009630 <_fwalk_reent>:
10009630:	defff704 	addi	sp,sp,-36
10009634:	dd000415 	stw	r20,16(sp)
10009638:	dfc00815 	stw	ra,32(sp)
1000963c:	ddc00715 	stw	r23,28(sp)
10009640:	dd800615 	stw	r22,24(sp)
10009644:	dd400515 	stw	r21,20(sp)
10009648:	dcc00315 	stw	r19,12(sp)
1000964c:	dc800215 	stw	r18,8(sp)
10009650:	dc400115 	stw	r17,4(sp)
10009654:	dc000015 	stw	r16,0(sp)
10009658:	2500b804 	addi	r20,r4,736
1000965c:	a0002326 	beq	r20,zero,100096ec <_fwalk_reent+0xbc>
10009660:	282b883a 	mov	r21,r5
10009664:	2027883a 	mov	r19,r4
10009668:	002f883a 	mov	r23,zero
1000966c:	05800044 	movi	r22,1
10009670:	04bfffc4 	movi	r18,-1
10009674:	a4400117 	ldw	r17,4(r20)
10009678:	a4000217 	ldw	r16,8(r20)
1000967c:	8c7fffc4 	addi	r17,r17,-1
10009680:	88000c16 	blt	r17,zero,100096b4 <_fwalk_reent+0x84>
10009684:	84000304 	addi	r16,r16,12
10009688:	8080000b 	ldhu	r2,0(r16)
1000968c:	8c7fffc4 	addi	r17,r17,-1
10009690:	817ffd04 	addi	r5,r16,-12
10009694:	b080052e 	bgeu	r22,r2,100096ac <_fwalk_reent+0x7c>
10009698:	8080008f 	ldh	r2,2(r16)
1000969c:	9809883a 	mov	r4,r19
100096a0:	14800226 	beq	r2,r18,100096ac <_fwalk_reent+0x7c>
100096a4:	a83ee83a 	callr	r21
100096a8:	b8aeb03a 	or	r23,r23,r2
100096ac:	84001a04 	addi	r16,r16,104
100096b0:	8cbff51e 	bne	r17,r18,10009688 <__alt_data_end+0xf8009688>
100096b4:	a5000017 	ldw	r20,0(r20)
100096b8:	a03fee1e 	bne	r20,zero,10009674 <__alt_data_end+0xf8009674>
100096bc:	b805883a 	mov	r2,r23
100096c0:	dfc00817 	ldw	ra,32(sp)
100096c4:	ddc00717 	ldw	r23,28(sp)
100096c8:	dd800617 	ldw	r22,24(sp)
100096cc:	dd400517 	ldw	r21,20(sp)
100096d0:	dd000417 	ldw	r20,16(sp)
100096d4:	dcc00317 	ldw	r19,12(sp)
100096d8:	dc800217 	ldw	r18,8(sp)
100096dc:	dc400117 	ldw	r17,4(sp)
100096e0:	dc000017 	ldw	r16,0(sp)
100096e4:	dec00904 	addi	sp,sp,36
100096e8:	f800283a 	ret
100096ec:	002f883a 	mov	r23,zero
100096f0:	003ff206 	br	100096bc <__alt_data_end+0xf80096bc>

100096f4 <_setlocale_r>:
100096f4:	30001b26 	beq	r6,zero,10009764 <_setlocale_r+0x70>
100096f8:	01440074 	movhi	r5,4097
100096fc:	defffe04 	addi	sp,sp,-8
10009700:	2951ca04 	addi	r5,r5,18216
10009704:	3009883a 	mov	r4,r6
10009708:	dc000015 	stw	r16,0(sp)
1000970c:	dfc00115 	stw	ra,4(sp)
10009710:	3021883a 	mov	r16,r6
10009714:	000be680 	call	1000be68 <strcmp>
10009718:	1000061e 	bne	r2,zero,10009734 <_setlocale_r+0x40>
1000971c:	00840074 	movhi	r2,4097
10009720:	1091c904 	addi	r2,r2,18212
10009724:	dfc00117 	ldw	ra,4(sp)
10009728:	dc000017 	ldw	r16,0(sp)
1000972c:	dec00204 	addi	sp,sp,8
10009730:	f800283a 	ret
10009734:	01440074 	movhi	r5,4097
10009738:	2951c904 	addi	r5,r5,18212
1000973c:	8009883a 	mov	r4,r16
10009740:	000be680 	call	1000be68 <strcmp>
10009744:	103ff526 	beq	r2,zero,1000971c <__alt_data_end+0xf800971c>
10009748:	01440074 	movhi	r5,4097
1000974c:	2951b404 	addi	r5,r5,18128
10009750:	8009883a 	mov	r4,r16
10009754:	000be680 	call	1000be68 <strcmp>
10009758:	103ff026 	beq	r2,zero,1000971c <__alt_data_end+0xf800971c>
1000975c:	0005883a 	mov	r2,zero
10009760:	003ff006 	br	10009724 <__alt_data_end+0xf8009724>
10009764:	00840074 	movhi	r2,4097
10009768:	1091c904 	addi	r2,r2,18212
1000976c:	f800283a 	ret

10009770 <__locale_charset>:
10009770:	00840074 	movhi	r2,4097
10009774:	1097fc04 	addi	r2,r2,24560
10009778:	f800283a 	ret

1000977c <__locale_mb_cur_max>:
1000977c:	00840074 	movhi	r2,4097
10009780:	109d9b04 	addi	r2,r2,30316
10009784:	10800017 	ldw	r2,0(r2)
10009788:	f800283a 	ret

1000978c <__locale_msgcharset>:
1000978c:	00840074 	movhi	r2,4097
10009790:	1097f404 	addi	r2,r2,24528
10009794:	f800283a 	ret

10009798 <__locale_cjk_lang>:
10009798:	0005883a 	mov	r2,zero
1000979c:	f800283a 	ret

100097a0 <_localeconv_r>:
100097a0:	00840074 	movhi	r2,4097
100097a4:	10980404 	addi	r2,r2,24592
100097a8:	f800283a 	ret

100097ac <setlocale>:
100097ac:	00840074 	movhi	r2,4097
100097b0:	109d9a04 	addi	r2,r2,30312
100097b4:	280d883a 	mov	r6,r5
100097b8:	200b883a 	mov	r5,r4
100097bc:	11000017 	ldw	r4,0(r2)
100097c0:	00096f41 	jmpi	100096f4 <_setlocale_r>

100097c4 <localeconv>:
100097c4:	00840074 	movhi	r2,4097
100097c8:	10980404 	addi	r2,r2,24592
100097cc:	f800283a 	ret

100097d0 <__smakebuf_r>:
100097d0:	2880030b 	ldhu	r2,12(r5)
100097d4:	10c0008c 	andi	r3,r2,2
100097d8:	1800411e 	bne	r3,zero,100098e0 <__smakebuf_r+0x110>
100097dc:	deffec04 	addi	sp,sp,-80
100097e0:	dc000f15 	stw	r16,60(sp)
100097e4:	2821883a 	mov	r16,r5
100097e8:	2940038f 	ldh	r5,14(r5)
100097ec:	dc401015 	stw	r17,64(sp)
100097f0:	dfc01315 	stw	ra,76(sp)
100097f4:	dcc01215 	stw	r19,72(sp)
100097f8:	dc801115 	stw	r18,68(sp)
100097fc:	2023883a 	mov	r17,r4
10009800:	28001c16 	blt	r5,zero,10009874 <__smakebuf_r+0xa4>
10009804:	d80d883a 	mov	r6,sp
10009808:	000dad80 	call	1000dad8 <_fstat_r>
1000980c:	10001816 	blt	r2,zero,10009870 <__smakebuf_r+0xa0>
10009810:	d8800117 	ldw	r2,4(sp)
10009814:	00e00014 	movui	r3,32768
10009818:	10bc000c 	andi	r2,r2,61440
1000981c:	14c80020 	cmpeqi	r19,r2,8192
10009820:	10c03726 	beq	r2,r3,10009900 <__smakebuf_r+0x130>
10009824:	80c0030b 	ldhu	r3,12(r16)
10009828:	18c20014 	ori	r3,r3,2048
1000982c:	80c0030d 	sth	r3,12(r16)
10009830:	00c80004 	movi	r3,8192
10009834:	10c0521e 	bne	r2,r3,10009980 <__smakebuf_r+0x1b0>
10009838:	8140038f 	ldh	r5,14(r16)
1000983c:	8809883a 	mov	r4,r17
10009840:	000db340 	call	1000db34 <_isatty_r>
10009844:	10004c26 	beq	r2,zero,10009978 <__smakebuf_r+0x1a8>
10009848:	8080030b 	ldhu	r2,12(r16)
1000984c:	80c010c4 	addi	r3,r16,67
10009850:	80c00015 	stw	r3,0(r16)
10009854:	10800054 	ori	r2,r2,1
10009858:	8080030d 	sth	r2,12(r16)
1000985c:	00800044 	movi	r2,1
10009860:	80c00415 	stw	r3,16(r16)
10009864:	80800515 	stw	r2,20(r16)
10009868:	04810004 	movi	r18,1024
1000986c:	00000706 	br	1000988c <__smakebuf_r+0xbc>
10009870:	8080030b 	ldhu	r2,12(r16)
10009874:	10c0200c 	andi	r3,r2,128
10009878:	18001f1e 	bne	r3,zero,100098f8 <__smakebuf_r+0x128>
1000987c:	04810004 	movi	r18,1024
10009880:	10820014 	ori	r2,r2,2048
10009884:	8080030d 	sth	r2,12(r16)
10009888:	0027883a 	mov	r19,zero
1000988c:	900b883a 	mov	r5,r18
10009890:	8809883a 	mov	r4,r17
10009894:	000998c0 	call	1000998c <_malloc_r>
10009898:	10002c26 	beq	r2,zero,1000994c <__smakebuf_r+0x17c>
1000989c:	80c0030b 	ldhu	r3,12(r16)
100098a0:	01040074 	movhi	r4,4097
100098a4:	21223204 	addi	r4,r4,-30520
100098a8:	89000f15 	stw	r4,60(r17)
100098ac:	18c02014 	ori	r3,r3,128
100098b0:	80c0030d 	sth	r3,12(r16)
100098b4:	80800015 	stw	r2,0(r16)
100098b8:	80800415 	stw	r2,16(r16)
100098bc:	84800515 	stw	r18,20(r16)
100098c0:	98001a1e 	bne	r19,zero,1000992c <__smakebuf_r+0x15c>
100098c4:	dfc01317 	ldw	ra,76(sp)
100098c8:	dcc01217 	ldw	r19,72(sp)
100098cc:	dc801117 	ldw	r18,68(sp)
100098d0:	dc401017 	ldw	r17,64(sp)
100098d4:	dc000f17 	ldw	r16,60(sp)
100098d8:	dec01404 	addi	sp,sp,80
100098dc:	f800283a 	ret
100098e0:	288010c4 	addi	r2,r5,67
100098e4:	28800015 	stw	r2,0(r5)
100098e8:	28800415 	stw	r2,16(r5)
100098ec:	00800044 	movi	r2,1
100098f0:	28800515 	stw	r2,20(r5)
100098f4:	f800283a 	ret
100098f8:	04801004 	movi	r18,64
100098fc:	003fe006 	br	10009880 <__alt_data_end+0xf8009880>
10009900:	81000a17 	ldw	r4,40(r16)
10009904:	00c40074 	movhi	r3,4097
10009908:	18ef8104 	addi	r3,r3,-16892
1000990c:	20ffc51e 	bne	r4,r3,10009824 <__alt_data_end+0xf8009824>
10009910:	8080030b 	ldhu	r2,12(r16)
10009914:	04810004 	movi	r18,1024
10009918:	84801315 	stw	r18,76(r16)
1000991c:	1484b03a 	or	r2,r2,r18
10009920:	8080030d 	sth	r2,12(r16)
10009924:	0027883a 	mov	r19,zero
10009928:	003fd806 	br	1000988c <__alt_data_end+0xf800988c>
1000992c:	8140038f 	ldh	r5,14(r16)
10009930:	8809883a 	mov	r4,r17
10009934:	000db340 	call	1000db34 <_isatty_r>
10009938:	103fe226 	beq	r2,zero,100098c4 <__alt_data_end+0xf80098c4>
1000993c:	8080030b 	ldhu	r2,12(r16)
10009940:	10800054 	ori	r2,r2,1
10009944:	8080030d 	sth	r2,12(r16)
10009948:	003fde06 	br	100098c4 <__alt_data_end+0xf80098c4>
1000994c:	8080030b 	ldhu	r2,12(r16)
10009950:	10c0800c 	andi	r3,r2,512
10009954:	183fdb1e 	bne	r3,zero,100098c4 <__alt_data_end+0xf80098c4>
10009958:	10800094 	ori	r2,r2,2
1000995c:	80c010c4 	addi	r3,r16,67
10009960:	8080030d 	sth	r2,12(r16)
10009964:	00800044 	movi	r2,1
10009968:	80c00015 	stw	r3,0(r16)
1000996c:	80c00415 	stw	r3,16(r16)
10009970:	80800515 	stw	r2,20(r16)
10009974:	003fd306 	br	100098c4 <__alt_data_end+0xf80098c4>
10009978:	04810004 	movi	r18,1024
1000997c:	003fc306 	br	1000988c <__alt_data_end+0xf800988c>
10009980:	0027883a 	mov	r19,zero
10009984:	04810004 	movi	r18,1024
10009988:	003fc006 	br	1000988c <__alt_data_end+0xf800988c>

1000998c <_malloc_r>:
1000998c:	defff504 	addi	sp,sp,-44
10009990:	dc800315 	stw	r18,12(sp)
10009994:	dfc00a15 	stw	ra,40(sp)
10009998:	df000915 	stw	fp,36(sp)
1000999c:	ddc00815 	stw	r23,32(sp)
100099a0:	dd800715 	stw	r22,28(sp)
100099a4:	dd400615 	stw	r21,24(sp)
100099a8:	dd000515 	stw	r20,20(sp)
100099ac:	dcc00415 	stw	r19,16(sp)
100099b0:	dc400215 	stw	r17,8(sp)
100099b4:	dc000115 	stw	r16,4(sp)
100099b8:	288002c4 	addi	r2,r5,11
100099bc:	00c00584 	movi	r3,22
100099c0:	2025883a 	mov	r18,r4
100099c4:	18807f2e 	bgeu	r3,r2,10009bc4 <_malloc_r+0x238>
100099c8:	047ffe04 	movi	r17,-8
100099cc:	1462703a 	and	r17,r2,r17
100099d0:	8800a316 	blt	r17,zero,10009c60 <_malloc_r+0x2d4>
100099d4:	8940a236 	bltu	r17,r5,10009c60 <_malloc_r+0x2d4>
100099d8:	0011b3c0 	call	10011b3c <__malloc_lock>
100099dc:	00807dc4 	movi	r2,503
100099e0:	1441e92e 	bgeu	r2,r17,1000a188 <_malloc_r+0x7fc>
100099e4:	8804d27a 	srli	r2,r17,9
100099e8:	1000a126 	beq	r2,zero,10009c70 <_malloc_r+0x2e4>
100099ec:	00c00104 	movi	r3,4
100099f0:	18811e36 	bltu	r3,r2,10009e6c <_malloc_r+0x4e0>
100099f4:	8804d1ba 	srli	r2,r17,6
100099f8:	12000e44 	addi	r8,r2,57
100099fc:	11c00e04 	addi	r7,r2,56
10009a00:	4209883a 	add	r4,r8,r8
10009a04:	04c40074 	movhi	r19,4097
10009a08:	2109883a 	add	r4,r4,r4
10009a0c:	9cd81204 	addi	r19,r19,24648
10009a10:	2109883a 	add	r4,r4,r4
10009a14:	9909883a 	add	r4,r19,r4
10009a18:	24000117 	ldw	r16,4(r4)
10009a1c:	213ffe04 	addi	r4,r4,-8
10009a20:	24009726 	beq	r4,r16,10009c80 <_malloc_r+0x2f4>
10009a24:	80800117 	ldw	r2,4(r16)
10009a28:	01bfff04 	movi	r6,-4
10009a2c:	014003c4 	movi	r5,15
10009a30:	1184703a 	and	r2,r2,r6
10009a34:	1447c83a 	sub	r3,r2,r17
10009a38:	28c00716 	blt	r5,r3,10009a58 <_malloc_r+0xcc>
10009a3c:	1800920e 	bge	r3,zero,10009c88 <_malloc_r+0x2fc>
10009a40:	84000317 	ldw	r16,12(r16)
10009a44:	24008e26 	beq	r4,r16,10009c80 <_malloc_r+0x2f4>
10009a48:	80800117 	ldw	r2,4(r16)
10009a4c:	1184703a 	and	r2,r2,r6
10009a50:	1447c83a 	sub	r3,r2,r17
10009a54:	28fff90e 	bge	r5,r3,10009a3c <__alt_data_end+0xf8009a3c>
10009a58:	3809883a 	mov	r4,r7
10009a5c:	01840074 	movhi	r6,4097
10009a60:	9c000417 	ldw	r16,16(r19)
10009a64:	31981204 	addi	r6,r6,24648
10009a68:	32000204 	addi	r8,r6,8
10009a6c:	82013426 	beq	r16,r8,10009f40 <_malloc_r+0x5b4>
10009a70:	80c00117 	ldw	r3,4(r16)
10009a74:	00bfff04 	movi	r2,-4
10009a78:	188e703a 	and	r7,r3,r2
10009a7c:	3c45c83a 	sub	r2,r7,r17
10009a80:	00c003c4 	movi	r3,15
10009a84:	18811f16 	blt	r3,r2,10009f04 <_malloc_r+0x578>
10009a88:	32000515 	stw	r8,20(r6)
10009a8c:	32000415 	stw	r8,16(r6)
10009a90:	10007f0e 	bge	r2,zero,10009c90 <_malloc_r+0x304>
10009a94:	00807fc4 	movi	r2,511
10009a98:	11c0fd36 	bltu	r2,r7,10009e90 <_malloc_r+0x504>
10009a9c:	3806d0fa 	srli	r3,r7,3
10009aa0:	01c00044 	movi	r7,1
10009aa4:	30800117 	ldw	r2,4(r6)
10009aa8:	19400044 	addi	r5,r3,1
10009aac:	294b883a 	add	r5,r5,r5
10009ab0:	1807d0ba 	srai	r3,r3,2
10009ab4:	294b883a 	add	r5,r5,r5
10009ab8:	294b883a 	add	r5,r5,r5
10009abc:	298b883a 	add	r5,r5,r6
10009ac0:	38c6983a 	sll	r3,r7,r3
10009ac4:	29c00017 	ldw	r7,0(r5)
10009ac8:	2a7ffe04 	addi	r9,r5,-8
10009acc:	1886b03a 	or	r3,r3,r2
10009ad0:	82400315 	stw	r9,12(r16)
10009ad4:	81c00215 	stw	r7,8(r16)
10009ad8:	30c00115 	stw	r3,4(r6)
10009adc:	2c000015 	stw	r16,0(r5)
10009ae0:	3c000315 	stw	r16,12(r7)
10009ae4:	2005d0ba 	srai	r2,r4,2
10009ae8:	01400044 	movi	r5,1
10009aec:	288a983a 	sll	r5,r5,r2
10009af0:	19406f36 	bltu	r3,r5,10009cb0 <_malloc_r+0x324>
10009af4:	28c4703a 	and	r2,r5,r3
10009af8:	10000a1e 	bne	r2,zero,10009b24 <_malloc_r+0x198>
10009afc:	00bfff04 	movi	r2,-4
10009b00:	294b883a 	add	r5,r5,r5
10009b04:	2088703a 	and	r4,r4,r2
10009b08:	28c4703a 	and	r2,r5,r3
10009b0c:	21000104 	addi	r4,r4,4
10009b10:	1000041e 	bne	r2,zero,10009b24 <_malloc_r+0x198>
10009b14:	294b883a 	add	r5,r5,r5
10009b18:	28c4703a 	and	r2,r5,r3
10009b1c:	21000104 	addi	r4,r4,4
10009b20:	103ffc26 	beq	r2,zero,10009b14 <__alt_data_end+0xf8009b14>
10009b24:	02bfff04 	movi	r10,-4
10009b28:	024003c4 	movi	r9,15
10009b2c:	21800044 	addi	r6,r4,1
10009b30:	318d883a 	add	r6,r6,r6
10009b34:	318d883a 	add	r6,r6,r6
10009b38:	318d883a 	add	r6,r6,r6
10009b3c:	998d883a 	add	r6,r19,r6
10009b40:	333ffe04 	addi	r12,r6,-8
10009b44:	2017883a 	mov	r11,r4
10009b48:	31800104 	addi	r6,r6,4
10009b4c:	34000017 	ldw	r16,0(r6)
10009b50:	31fffd04 	addi	r7,r6,-12
10009b54:	81c0041e 	bne	r16,r7,10009b68 <_malloc_r+0x1dc>
10009b58:	0000fb06 	br	10009f48 <_malloc_r+0x5bc>
10009b5c:	1801030e 	bge	r3,zero,10009f6c <_malloc_r+0x5e0>
10009b60:	84000317 	ldw	r16,12(r16)
10009b64:	81c0f826 	beq	r16,r7,10009f48 <_malloc_r+0x5bc>
10009b68:	80800117 	ldw	r2,4(r16)
10009b6c:	1284703a 	and	r2,r2,r10
10009b70:	1447c83a 	sub	r3,r2,r17
10009b74:	48fff90e 	bge	r9,r3,10009b5c <__alt_data_end+0xf8009b5c>
10009b78:	80800317 	ldw	r2,12(r16)
10009b7c:	81000217 	ldw	r4,8(r16)
10009b80:	89400054 	ori	r5,r17,1
10009b84:	81400115 	stw	r5,4(r16)
10009b88:	20800315 	stw	r2,12(r4)
10009b8c:	11000215 	stw	r4,8(r2)
10009b90:	8463883a 	add	r17,r16,r17
10009b94:	9c400515 	stw	r17,20(r19)
10009b98:	9c400415 	stw	r17,16(r19)
10009b9c:	18800054 	ori	r2,r3,1
10009ba0:	88800115 	stw	r2,4(r17)
10009ba4:	8a000315 	stw	r8,12(r17)
10009ba8:	8a000215 	stw	r8,8(r17)
10009bac:	88e3883a 	add	r17,r17,r3
10009bb0:	88c00015 	stw	r3,0(r17)
10009bb4:	9009883a 	mov	r4,r18
10009bb8:	0011b600 	call	10011b60 <__malloc_unlock>
10009bbc:	80800204 	addi	r2,r16,8
10009bc0:	00001b06 	br	10009c30 <_malloc_r+0x2a4>
10009bc4:	04400404 	movi	r17,16
10009bc8:	89402536 	bltu	r17,r5,10009c60 <_malloc_r+0x2d4>
10009bcc:	0011b3c0 	call	10011b3c <__malloc_lock>
10009bd0:	00800184 	movi	r2,6
10009bd4:	01000084 	movi	r4,2
10009bd8:	04c40074 	movhi	r19,4097
10009bdc:	1085883a 	add	r2,r2,r2
10009be0:	9cd81204 	addi	r19,r19,24648
10009be4:	1085883a 	add	r2,r2,r2
10009be8:	9885883a 	add	r2,r19,r2
10009bec:	14000117 	ldw	r16,4(r2)
10009bf0:	10fffe04 	addi	r3,r2,-8
10009bf4:	80c0d926 	beq	r16,r3,10009f5c <_malloc_r+0x5d0>
10009bf8:	80c00117 	ldw	r3,4(r16)
10009bfc:	81000317 	ldw	r4,12(r16)
10009c00:	00bfff04 	movi	r2,-4
10009c04:	1884703a 	and	r2,r3,r2
10009c08:	81400217 	ldw	r5,8(r16)
10009c0c:	8085883a 	add	r2,r16,r2
10009c10:	10c00117 	ldw	r3,4(r2)
10009c14:	29000315 	stw	r4,12(r5)
10009c18:	21400215 	stw	r5,8(r4)
10009c1c:	18c00054 	ori	r3,r3,1
10009c20:	10c00115 	stw	r3,4(r2)
10009c24:	9009883a 	mov	r4,r18
10009c28:	0011b600 	call	10011b60 <__malloc_unlock>
10009c2c:	80800204 	addi	r2,r16,8
10009c30:	dfc00a17 	ldw	ra,40(sp)
10009c34:	df000917 	ldw	fp,36(sp)
10009c38:	ddc00817 	ldw	r23,32(sp)
10009c3c:	dd800717 	ldw	r22,28(sp)
10009c40:	dd400617 	ldw	r21,24(sp)
10009c44:	dd000517 	ldw	r20,20(sp)
10009c48:	dcc00417 	ldw	r19,16(sp)
10009c4c:	dc800317 	ldw	r18,12(sp)
10009c50:	dc400217 	ldw	r17,8(sp)
10009c54:	dc000117 	ldw	r16,4(sp)
10009c58:	dec00b04 	addi	sp,sp,44
10009c5c:	f800283a 	ret
10009c60:	00800304 	movi	r2,12
10009c64:	90800015 	stw	r2,0(r18)
10009c68:	0005883a 	mov	r2,zero
10009c6c:	003ff006 	br	10009c30 <__alt_data_end+0xf8009c30>
10009c70:	01002004 	movi	r4,128
10009c74:	02001004 	movi	r8,64
10009c78:	01c00fc4 	movi	r7,63
10009c7c:	003f6106 	br	10009a04 <__alt_data_end+0xf8009a04>
10009c80:	4009883a 	mov	r4,r8
10009c84:	003f7506 	br	10009a5c <__alt_data_end+0xf8009a5c>
10009c88:	81000317 	ldw	r4,12(r16)
10009c8c:	003fde06 	br	10009c08 <__alt_data_end+0xf8009c08>
10009c90:	81c5883a 	add	r2,r16,r7
10009c94:	11400117 	ldw	r5,4(r2)
10009c98:	9009883a 	mov	r4,r18
10009c9c:	29400054 	ori	r5,r5,1
10009ca0:	11400115 	stw	r5,4(r2)
10009ca4:	0011b600 	call	10011b60 <__malloc_unlock>
10009ca8:	80800204 	addi	r2,r16,8
10009cac:	003fe006 	br	10009c30 <__alt_data_end+0xf8009c30>
10009cb0:	9c000217 	ldw	r16,8(r19)
10009cb4:	00bfff04 	movi	r2,-4
10009cb8:	85800117 	ldw	r22,4(r16)
10009cbc:	b0ac703a 	and	r22,r22,r2
10009cc0:	b4400336 	bltu	r22,r17,10009cd0 <_malloc_r+0x344>
10009cc4:	b445c83a 	sub	r2,r22,r17
10009cc8:	00c003c4 	movi	r3,15
10009ccc:	18805d16 	blt	r3,r2,10009e44 <_malloc_r+0x4b8>
10009cd0:	05c40074 	movhi	r23,4097
10009cd4:	008400b4 	movhi	r2,4098
10009cd8:	10a8f504 	addi	r2,r2,-23596
10009cdc:	bddd9c04 	addi	r23,r23,30320
10009ce0:	15400017 	ldw	r21,0(r2)
10009ce4:	b8c00017 	ldw	r3,0(r23)
10009ce8:	00bfffc4 	movi	r2,-1
10009cec:	858d883a 	add	r6,r16,r22
10009cf0:	8d6b883a 	add	r21,r17,r21
10009cf4:	1880ea26 	beq	r3,r2,1000a0a0 <_malloc_r+0x714>
10009cf8:	ad4403c4 	addi	r21,r21,4111
10009cfc:	00bc0004 	movi	r2,-4096
10009d00:	a8aa703a 	and	r21,r21,r2
10009d04:	a80b883a 	mov	r5,r21
10009d08:	9009883a 	mov	r4,r18
10009d0c:	d9800015 	stw	r6,0(sp)
10009d10:	000bcd80 	call	1000bcd8 <_sbrk_r>
10009d14:	1029883a 	mov	r20,r2
10009d18:	00bfffc4 	movi	r2,-1
10009d1c:	d9800017 	ldw	r6,0(sp)
10009d20:	a080e826 	beq	r20,r2,1000a0c4 <_malloc_r+0x738>
10009d24:	a180a636 	bltu	r20,r6,10009fc0 <_malloc_r+0x634>
10009d28:	070400b4 	movhi	fp,4098
10009d2c:	e72af404 	addi	fp,fp,-21552
10009d30:	e0800017 	ldw	r2,0(fp)
10009d34:	a887883a 	add	r3,r21,r2
10009d38:	e0c00015 	stw	r3,0(fp)
10009d3c:	3500e626 	beq	r6,r20,1000a0d8 <_malloc_r+0x74c>
10009d40:	b9000017 	ldw	r4,0(r23)
10009d44:	00bfffc4 	movi	r2,-1
10009d48:	2080ee26 	beq	r4,r2,1000a104 <_malloc_r+0x778>
10009d4c:	a185c83a 	sub	r2,r20,r6
10009d50:	10c5883a 	add	r2,r2,r3
10009d54:	e0800015 	stw	r2,0(fp)
10009d58:	a0c001cc 	andi	r3,r20,7
10009d5c:	1800bc26 	beq	r3,zero,1000a050 <_malloc_r+0x6c4>
10009d60:	a0e9c83a 	sub	r20,r20,r3
10009d64:	00840204 	movi	r2,4104
10009d68:	a5000204 	addi	r20,r20,8
10009d6c:	10c7c83a 	sub	r3,r2,r3
10009d70:	a545883a 	add	r2,r20,r21
10009d74:	1083ffcc 	andi	r2,r2,4095
10009d78:	18abc83a 	sub	r21,r3,r2
10009d7c:	a80b883a 	mov	r5,r21
10009d80:	9009883a 	mov	r4,r18
10009d84:	000bcd80 	call	1000bcd8 <_sbrk_r>
10009d88:	00ffffc4 	movi	r3,-1
10009d8c:	10c0e126 	beq	r2,r3,1000a114 <_malloc_r+0x788>
10009d90:	1505c83a 	sub	r2,r2,r20
10009d94:	1545883a 	add	r2,r2,r21
10009d98:	10800054 	ori	r2,r2,1
10009d9c:	e0c00017 	ldw	r3,0(fp)
10009da0:	9d000215 	stw	r20,8(r19)
10009da4:	a0800115 	stw	r2,4(r20)
10009da8:	a8c7883a 	add	r3,r21,r3
10009dac:	e0c00015 	stw	r3,0(fp)
10009db0:	84c00e26 	beq	r16,r19,10009dec <_malloc_r+0x460>
10009db4:	018003c4 	movi	r6,15
10009db8:	3580a72e 	bgeu	r6,r22,1000a058 <_malloc_r+0x6cc>
10009dbc:	81400117 	ldw	r5,4(r16)
10009dc0:	013ffe04 	movi	r4,-8
10009dc4:	b0bffd04 	addi	r2,r22,-12
10009dc8:	1104703a 	and	r2,r2,r4
10009dcc:	2900004c 	andi	r4,r5,1
10009dd0:	2088b03a 	or	r4,r4,r2
10009dd4:	81000115 	stw	r4,4(r16)
10009dd8:	01400144 	movi	r5,5
10009ddc:	8089883a 	add	r4,r16,r2
10009de0:	21400115 	stw	r5,4(r4)
10009de4:	21400215 	stw	r5,8(r4)
10009de8:	3080cd36 	bltu	r6,r2,1000a120 <_malloc_r+0x794>
10009dec:	008400b4 	movhi	r2,4098
10009df0:	10a8f404 	addi	r2,r2,-23600
10009df4:	11000017 	ldw	r4,0(r2)
10009df8:	20c0012e 	bgeu	r4,r3,10009e00 <_malloc_r+0x474>
10009dfc:	10c00015 	stw	r3,0(r2)
10009e00:	008400b4 	movhi	r2,4098
10009e04:	10a8f304 	addi	r2,r2,-23604
10009e08:	11000017 	ldw	r4,0(r2)
10009e0c:	9c000217 	ldw	r16,8(r19)
10009e10:	20c0012e 	bgeu	r4,r3,10009e18 <_malloc_r+0x48c>
10009e14:	10c00015 	stw	r3,0(r2)
10009e18:	80c00117 	ldw	r3,4(r16)
10009e1c:	00bfff04 	movi	r2,-4
10009e20:	1886703a 	and	r3,r3,r2
10009e24:	1c45c83a 	sub	r2,r3,r17
10009e28:	1c400236 	bltu	r3,r17,10009e34 <_malloc_r+0x4a8>
10009e2c:	00c003c4 	movi	r3,15
10009e30:	18800416 	blt	r3,r2,10009e44 <_malloc_r+0x4b8>
10009e34:	9009883a 	mov	r4,r18
10009e38:	0011b600 	call	10011b60 <__malloc_unlock>
10009e3c:	0005883a 	mov	r2,zero
10009e40:	003f7b06 	br	10009c30 <__alt_data_end+0xf8009c30>
10009e44:	88c00054 	ori	r3,r17,1
10009e48:	80c00115 	stw	r3,4(r16)
10009e4c:	8463883a 	add	r17,r16,r17
10009e50:	10800054 	ori	r2,r2,1
10009e54:	9c400215 	stw	r17,8(r19)
10009e58:	88800115 	stw	r2,4(r17)
10009e5c:	9009883a 	mov	r4,r18
10009e60:	0011b600 	call	10011b60 <__malloc_unlock>
10009e64:	80800204 	addi	r2,r16,8
10009e68:	003f7106 	br	10009c30 <__alt_data_end+0xf8009c30>
10009e6c:	00c00504 	movi	r3,20
10009e70:	18804a2e 	bgeu	r3,r2,10009f9c <_malloc_r+0x610>
10009e74:	00c01504 	movi	r3,84
10009e78:	18806e36 	bltu	r3,r2,1000a034 <_malloc_r+0x6a8>
10009e7c:	8804d33a 	srli	r2,r17,12
10009e80:	12001bc4 	addi	r8,r2,111
10009e84:	11c01b84 	addi	r7,r2,110
10009e88:	4209883a 	add	r4,r8,r8
10009e8c:	003edd06 	br	10009a04 <__alt_data_end+0xf8009a04>
10009e90:	3804d27a 	srli	r2,r7,9
10009e94:	00c00104 	movi	r3,4
10009e98:	1880442e 	bgeu	r3,r2,10009fac <_malloc_r+0x620>
10009e9c:	00c00504 	movi	r3,20
10009ea0:	18808136 	bltu	r3,r2,1000a0a8 <_malloc_r+0x71c>
10009ea4:	11401704 	addi	r5,r2,92
10009ea8:	10c016c4 	addi	r3,r2,91
10009eac:	294b883a 	add	r5,r5,r5
10009eb0:	294b883a 	add	r5,r5,r5
10009eb4:	294b883a 	add	r5,r5,r5
10009eb8:	994b883a 	add	r5,r19,r5
10009ebc:	28800017 	ldw	r2,0(r5)
10009ec0:	01840074 	movhi	r6,4097
10009ec4:	297ffe04 	addi	r5,r5,-8
10009ec8:	31981204 	addi	r6,r6,24648
10009ecc:	28806526 	beq	r5,r2,1000a064 <_malloc_r+0x6d8>
10009ed0:	01bfff04 	movi	r6,-4
10009ed4:	10c00117 	ldw	r3,4(r2)
10009ed8:	1986703a 	and	r3,r3,r6
10009edc:	38c0022e 	bgeu	r7,r3,10009ee8 <_malloc_r+0x55c>
10009ee0:	10800217 	ldw	r2,8(r2)
10009ee4:	28bffb1e 	bne	r5,r2,10009ed4 <__alt_data_end+0xf8009ed4>
10009ee8:	11400317 	ldw	r5,12(r2)
10009eec:	98c00117 	ldw	r3,4(r19)
10009ef0:	81400315 	stw	r5,12(r16)
10009ef4:	80800215 	stw	r2,8(r16)
10009ef8:	2c000215 	stw	r16,8(r5)
10009efc:	14000315 	stw	r16,12(r2)
10009f00:	003ef806 	br	10009ae4 <__alt_data_end+0xf8009ae4>
10009f04:	88c00054 	ori	r3,r17,1
10009f08:	80c00115 	stw	r3,4(r16)
10009f0c:	8463883a 	add	r17,r16,r17
10009f10:	34400515 	stw	r17,20(r6)
10009f14:	34400415 	stw	r17,16(r6)
10009f18:	10c00054 	ori	r3,r2,1
10009f1c:	8a000315 	stw	r8,12(r17)
10009f20:	8a000215 	stw	r8,8(r17)
10009f24:	88c00115 	stw	r3,4(r17)
10009f28:	88a3883a 	add	r17,r17,r2
10009f2c:	88800015 	stw	r2,0(r17)
10009f30:	9009883a 	mov	r4,r18
10009f34:	0011b600 	call	10011b60 <__malloc_unlock>
10009f38:	80800204 	addi	r2,r16,8
10009f3c:	003f3c06 	br	10009c30 <__alt_data_end+0xf8009c30>
10009f40:	30c00117 	ldw	r3,4(r6)
10009f44:	003ee706 	br	10009ae4 <__alt_data_end+0xf8009ae4>
10009f48:	5ac00044 	addi	r11,r11,1
10009f4c:	588000cc 	andi	r2,r11,3
10009f50:	31800204 	addi	r6,r6,8
10009f54:	103efd1e 	bne	r2,zero,10009b4c <__alt_data_end+0xf8009b4c>
10009f58:	00002406 	br	10009fec <_malloc_r+0x660>
10009f5c:	14000317 	ldw	r16,12(r2)
10009f60:	143f251e 	bne	r2,r16,10009bf8 <__alt_data_end+0xf8009bf8>
10009f64:	21000084 	addi	r4,r4,2
10009f68:	003ebc06 	br	10009a5c <__alt_data_end+0xf8009a5c>
10009f6c:	8085883a 	add	r2,r16,r2
10009f70:	10c00117 	ldw	r3,4(r2)
10009f74:	81000317 	ldw	r4,12(r16)
10009f78:	81400217 	ldw	r5,8(r16)
10009f7c:	18c00054 	ori	r3,r3,1
10009f80:	10c00115 	stw	r3,4(r2)
10009f84:	29000315 	stw	r4,12(r5)
10009f88:	21400215 	stw	r5,8(r4)
10009f8c:	9009883a 	mov	r4,r18
10009f90:	0011b600 	call	10011b60 <__malloc_unlock>
10009f94:	80800204 	addi	r2,r16,8
10009f98:	003f2506 	br	10009c30 <__alt_data_end+0xf8009c30>
10009f9c:	12001704 	addi	r8,r2,92
10009fa0:	11c016c4 	addi	r7,r2,91
10009fa4:	4209883a 	add	r4,r8,r8
10009fa8:	003e9606 	br	10009a04 <__alt_data_end+0xf8009a04>
10009fac:	3804d1ba 	srli	r2,r7,6
10009fb0:	11400e44 	addi	r5,r2,57
10009fb4:	10c00e04 	addi	r3,r2,56
10009fb8:	294b883a 	add	r5,r5,r5
10009fbc:	003fbc06 	br	10009eb0 <__alt_data_end+0xf8009eb0>
10009fc0:	84ff5926 	beq	r16,r19,10009d28 <__alt_data_end+0xf8009d28>
10009fc4:	00840074 	movhi	r2,4097
10009fc8:	10981204 	addi	r2,r2,24648
10009fcc:	14000217 	ldw	r16,8(r2)
10009fd0:	00bfff04 	movi	r2,-4
10009fd4:	80c00117 	ldw	r3,4(r16)
10009fd8:	1886703a 	and	r3,r3,r2
10009fdc:	003f9106 	br	10009e24 <__alt_data_end+0xf8009e24>
10009fe0:	60800217 	ldw	r2,8(r12)
10009fe4:	213fffc4 	addi	r4,r4,-1
10009fe8:	1300651e 	bne	r2,r12,1000a180 <_malloc_r+0x7f4>
10009fec:	208000cc 	andi	r2,r4,3
10009ff0:	633ffe04 	addi	r12,r12,-8
10009ff4:	103ffa1e 	bne	r2,zero,10009fe0 <__alt_data_end+0xf8009fe0>
10009ff8:	98800117 	ldw	r2,4(r19)
10009ffc:	0146303a 	nor	r3,zero,r5
1000a000:	1884703a 	and	r2,r3,r2
1000a004:	98800115 	stw	r2,4(r19)
1000a008:	294b883a 	add	r5,r5,r5
1000a00c:	117f2836 	bltu	r2,r5,10009cb0 <__alt_data_end+0xf8009cb0>
1000a010:	283f2726 	beq	r5,zero,10009cb0 <__alt_data_end+0xf8009cb0>
1000a014:	2886703a 	and	r3,r5,r2
1000a018:	5809883a 	mov	r4,r11
1000a01c:	183ec31e 	bne	r3,zero,10009b2c <__alt_data_end+0xf8009b2c>
1000a020:	294b883a 	add	r5,r5,r5
1000a024:	2886703a 	and	r3,r5,r2
1000a028:	21000104 	addi	r4,r4,4
1000a02c:	183ffc26 	beq	r3,zero,1000a020 <__alt_data_end+0xf800a020>
1000a030:	003ebe06 	br	10009b2c <__alt_data_end+0xf8009b2c>
1000a034:	00c05504 	movi	r3,340
1000a038:	18801236 	bltu	r3,r2,1000a084 <_malloc_r+0x6f8>
1000a03c:	8804d3fa 	srli	r2,r17,15
1000a040:	12001e04 	addi	r8,r2,120
1000a044:	11c01dc4 	addi	r7,r2,119
1000a048:	4209883a 	add	r4,r8,r8
1000a04c:	003e6d06 	br	10009a04 <__alt_data_end+0xf8009a04>
1000a050:	00c40004 	movi	r3,4096
1000a054:	003f4606 	br	10009d70 <__alt_data_end+0xf8009d70>
1000a058:	00800044 	movi	r2,1
1000a05c:	a0800115 	stw	r2,4(r20)
1000a060:	003f7406 	br	10009e34 <__alt_data_end+0xf8009e34>
1000a064:	1805d0ba 	srai	r2,r3,2
1000a068:	01c00044 	movi	r7,1
1000a06c:	30c00117 	ldw	r3,4(r6)
1000a070:	388e983a 	sll	r7,r7,r2
1000a074:	2805883a 	mov	r2,r5
1000a078:	38c6b03a 	or	r3,r7,r3
1000a07c:	30c00115 	stw	r3,4(r6)
1000a080:	003f9b06 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000a084:	00c15504 	movi	r3,1364
1000a088:	18801a36 	bltu	r3,r2,1000a0f4 <_malloc_r+0x768>
1000a08c:	8804d4ba 	srli	r2,r17,18
1000a090:	12001f44 	addi	r8,r2,125
1000a094:	11c01f04 	addi	r7,r2,124
1000a098:	4209883a 	add	r4,r8,r8
1000a09c:	003e5906 	br	10009a04 <__alt_data_end+0xf8009a04>
1000a0a0:	ad400404 	addi	r21,r21,16
1000a0a4:	003f1706 	br	10009d04 <__alt_data_end+0xf8009d04>
1000a0a8:	00c01504 	movi	r3,84
1000a0ac:	18802336 	bltu	r3,r2,1000a13c <_malloc_r+0x7b0>
1000a0b0:	3804d33a 	srli	r2,r7,12
1000a0b4:	11401bc4 	addi	r5,r2,111
1000a0b8:	10c01b84 	addi	r3,r2,110
1000a0bc:	294b883a 	add	r5,r5,r5
1000a0c0:	003f7b06 	br	10009eb0 <__alt_data_end+0xf8009eb0>
1000a0c4:	9c000217 	ldw	r16,8(r19)
1000a0c8:	00bfff04 	movi	r2,-4
1000a0cc:	80c00117 	ldw	r3,4(r16)
1000a0d0:	1886703a 	and	r3,r3,r2
1000a0d4:	003f5306 	br	10009e24 <__alt_data_end+0xf8009e24>
1000a0d8:	3083ffcc 	andi	r2,r6,4095
1000a0dc:	103f181e 	bne	r2,zero,10009d40 <__alt_data_end+0xf8009d40>
1000a0e0:	99000217 	ldw	r4,8(r19)
1000a0e4:	b545883a 	add	r2,r22,r21
1000a0e8:	10800054 	ori	r2,r2,1
1000a0ec:	20800115 	stw	r2,4(r4)
1000a0f0:	003f3e06 	br	10009dec <__alt_data_end+0xf8009dec>
1000a0f4:	01003f84 	movi	r4,254
1000a0f8:	02001fc4 	movi	r8,127
1000a0fc:	01c01f84 	movi	r7,126
1000a100:	003e4006 	br	10009a04 <__alt_data_end+0xf8009a04>
1000a104:	00840074 	movhi	r2,4097
1000a108:	109d9c04 	addi	r2,r2,30320
1000a10c:	15000015 	stw	r20,0(r2)
1000a110:	003f1106 	br	10009d58 <__alt_data_end+0xf8009d58>
1000a114:	00800044 	movi	r2,1
1000a118:	002b883a 	mov	r21,zero
1000a11c:	003f1f06 	br	10009d9c <__alt_data_end+0xf8009d9c>
1000a120:	81400204 	addi	r5,r16,8
1000a124:	9009883a 	mov	r4,r18
1000a128:	0008d940 	call	10008d94 <_free_r>
1000a12c:	008400b4 	movhi	r2,4098
1000a130:	10aaf404 	addi	r2,r2,-21552
1000a134:	10c00017 	ldw	r3,0(r2)
1000a138:	003f2c06 	br	10009dec <__alt_data_end+0xf8009dec>
1000a13c:	00c05504 	movi	r3,340
1000a140:	18800536 	bltu	r3,r2,1000a158 <_malloc_r+0x7cc>
1000a144:	3804d3fa 	srli	r2,r7,15
1000a148:	11401e04 	addi	r5,r2,120
1000a14c:	10c01dc4 	addi	r3,r2,119
1000a150:	294b883a 	add	r5,r5,r5
1000a154:	003f5606 	br	10009eb0 <__alt_data_end+0xf8009eb0>
1000a158:	00c15504 	movi	r3,1364
1000a15c:	18800536 	bltu	r3,r2,1000a174 <_malloc_r+0x7e8>
1000a160:	3804d4ba 	srli	r2,r7,18
1000a164:	11401f44 	addi	r5,r2,125
1000a168:	10c01f04 	addi	r3,r2,124
1000a16c:	294b883a 	add	r5,r5,r5
1000a170:	003f4f06 	br	10009eb0 <__alt_data_end+0xf8009eb0>
1000a174:	01403f84 	movi	r5,254
1000a178:	00c01f84 	movi	r3,126
1000a17c:	003f4c06 	br	10009eb0 <__alt_data_end+0xf8009eb0>
1000a180:	98800117 	ldw	r2,4(r19)
1000a184:	003fa006 	br	1000a008 <__alt_data_end+0xf800a008>
1000a188:	8808d0fa 	srli	r4,r17,3
1000a18c:	20800044 	addi	r2,r4,1
1000a190:	1085883a 	add	r2,r2,r2
1000a194:	003e9006 	br	10009bd8 <__alt_data_end+0xf8009bd8>

1000a198 <memchr>:
1000a198:	208000cc 	andi	r2,r4,3
1000a19c:	280f883a 	mov	r7,r5
1000a1a0:	10003426 	beq	r2,zero,1000a274 <memchr+0xdc>
1000a1a4:	30bfffc4 	addi	r2,r6,-1
1000a1a8:	30001a26 	beq	r6,zero,1000a214 <memchr+0x7c>
1000a1ac:	20c00003 	ldbu	r3,0(r4)
1000a1b0:	29803fcc 	andi	r6,r5,255
1000a1b4:	30c0051e 	bne	r6,r3,1000a1cc <memchr+0x34>
1000a1b8:	00001806 	br	1000a21c <memchr+0x84>
1000a1bc:	10001526 	beq	r2,zero,1000a214 <memchr+0x7c>
1000a1c0:	20c00003 	ldbu	r3,0(r4)
1000a1c4:	10bfffc4 	addi	r2,r2,-1
1000a1c8:	30c01426 	beq	r6,r3,1000a21c <memchr+0x84>
1000a1cc:	21000044 	addi	r4,r4,1
1000a1d0:	20c000cc 	andi	r3,r4,3
1000a1d4:	183ff91e 	bne	r3,zero,1000a1bc <__alt_data_end+0xf800a1bc>
1000a1d8:	020000c4 	movi	r8,3
1000a1dc:	40801136 	bltu	r8,r2,1000a224 <memchr+0x8c>
1000a1e0:	10000c26 	beq	r2,zero,1000a214 <memchr+0x7c>
1000a1e4:	20c00003 	ldbu	r3,0(r4)
1000a1e8:	29403fcc 	andi	r5,r5,255
1000a1ec:	28c00b26 	beq	r5,r3,1000a21c <memchr+0x84>
1000a1f0:	20c00044 	addi	r3,r4,1
1000a1f4:	39803fcc 	andi	r6,r7,255
1000a1f8:	2089883a 	add	r4,r4,r2
1000a1fc:	00000306 	br	1000a20c <memchr+0x74>
1000a200:	18c00044 	addi	r3,r3,1
1000a204:	197fffc3 	ldbu	r5,-1(r3)
1000a208:	31400526 	beq	r6,r5,1000a220 <memchr+0x88>
1000a20c:	1805883a 	mov	r2,r3
1000a210:	20fffb1e 	bne	r4,r3,1000a200 <__alt_data_end+0xf800a200>
1000a214:	0005883a 	mov	r2,zero
1000a218:	f800283a 	ret
1000a21c:	2005883a 	mov	r2,r4
1000a220:	f800283a 	ret
1000a224:	28c03fcc 	andi	r3,r5,255
1000a228:	1812923a 	slli	r9,r3,8
1000a22c:	02ffbff4 	movhi	r11,65279
1000a230:	02a02074 	movhi	r10,32897
1000a234:	48d2b03a 	or	r9,r9,r3
1000a238:	4806943a 	slli	r3,r9,16
1000a23c:	5affbfc4 	addi	r11,r11,-257
1000a240:	52a02004 	addi	r10,r10,-32640
1000a244:	48d2b03a 	or	r9,r9,r3
1000a248:	20c00017 	ldw	r3,0(r4)
1000a24c:	48c6f03a 	xor	r3,r9,r3
1000a250:	1acd883a 	add	r6,r3,r11
1000a254:	00c6303a 	nor	r3,zero,r3
1000a258:	30c6703a 	and	r3,r6,r3
1000a25c:	1a86703a 	and	r3,r3,r10
1000a260:	183fe01e 	bne	r3,zero,1000a1e4 <__alt_data_end+0xf800a1e4>
1000a264:	10bfff04 	addi	r2,r2,-4
1000a268:	21000104 	addi	r4,r4,4
1000a26c:	40bff636 	bltu	r8,r2,1000a248 <__alt_data_end+0xf800a248>
1000a270:	003fdb06 	br	1000a1e0 <__alt_data_end+0xf800a1e0>
1000a274:	3005883a 	mov	r2,r6
1000a278:	003fd706 	br	1000a1d8 <__alt_data_end+0xf800a1d8>

1000a27c <memcpy>:
1000a27c:	defffd04 	addi	sp,sp,-12
1000a280:	dfc00215 	stw	ra,8(sp)
1000a284:	dc400115 	stw	r17,4(sp)
1000a288:	dc000015 	stw	r16,0(sp)
1000a28c:	00c003c4 	movi	r3,15
1000a290:	2005883a 	mov	r2,r4
1000a294:	1980452e 	bgeu	r3,r6,1000a3ac <memcpy+0x130>
1000a298:	2906b03a 	or	r3,r5,r4
1000a29c:	18c000cc 	andi	r3,r3,3
1000a2a0:	1800441e 	bne	r3,zero,1000a3b4 <memcpy+0x138>
1000a2a4:	347ffc04 	addi	r17,r6,-16
1000a2a8:	8822d13a 	srli	r17,r17,4
1000a2ac:	28c00104 	addi	r3,r5,4
1000a2b0:	23400104 	addi	r13,r4,4
1000a2b4:	8820913a 	slli	r16,r17,4
1000a2b8:	2b000204 	addi	r12,r5,8
1000a2bc:	22c00204 	addi	r11,r4,8
1000a2c0:	84000504 	addi	r16,r16,20
1000a2c4:	2a800304 	addi	r10,r5,12
1000a2c8:	22400304 	addi	r9,r4,12
1000a2cc:	2c21883a 	add	r16,r5,r16
1000a2d0:	2811883a 	mov	r8,r5
1000a2d4:	200f883a 	mov	r7,r4
1000a2d8:	41000017 	ldw	r4,0(r8)
1000a2dc:	1fc00017 	ldw	ra,0(r3)
1000a2e0:	63c00017 	ldw	r15,0(r12)
1000a2e4:	39000015 	stw	r4,0(r7)
1000a2e8:	53800017 	ldw	r14,0(r10)
1000a2ec:	6fc00015 	stw	ra,0(r13)
1000a2f0:	5bc00015 	stw	r15,0(r11)
1000a2f4:	4b800015 	stw	r14,0(r9)
1000a2f8:	18c00404 	addi	r3,r3,16
1000a2fc:	39c00404 	addi	r7,r7,16
1000a300:	42000404 	addi	r8,r8,16
1000a304:	6b400404 	addi	r13,r13,16
1000a308:	63000404 	addi	r12,r12,16
1000a30c:	5ac00404 	addi	r11,r11,16
1000a310:	52800404 	addi	r10,r10,16
1000a314:	4a400404 	addi	r9,r9,16
1000a318:	1c3fef1e 	bne	r3,r16,1000a2d8 <__alt_data_end+0xf800a2d8>
1000a31c:	89c00044 	addi	r7,r17,1
1000a320:	380e913a 	slli	r7,r7,4
1000a324:	310003cc 	andi	r4,r6,15
1000a328:	02c000c4 	movi	r11,3
1000a32c:	11c7883a 	add	r3,r2,r7
1000a330:	29cb883a 	add	r5,r5,r7
1000a334:	5900212e 	bgeu	r11,r4,1000a3bc <memcpy+0x140>
1000a338:	1813883a 	mov	r9,r3
1000a33c:	2811883a 	mov	r8,r5
1000a340:	200f883a 	mov	r7,r4
1000a344:	42800017 	ldw	r10,0(r8)
1000a348:	4a400104 	addi	r9,r9,4
1000a34c:	39ffff04 	addi	r7,r7,-4
1000a350:	4abfff15 	stw	r10,-4(r9)
1000a354:	42000104 	addi	r8,r8,4
1000a358:	59fffa36 	bltu	r11,r7,1000a344 <__alt_data_end+0xf800a344>
1000a35c:	213fff04 	addi	r4,r4,-4
1000a360:	2008d0ba 	srli	r4,r4,2
1000a364:	318000cc 	andi	r6,r6,3
1000a368:	21000044 	addi	r4,r4,1
1000a36c:	2109883a 	add	r4,r4,r4
1000a370:	2109883a 	add	r4,r4,r4
1000a374:	1907883a 	add	r3,r3,r4
1000a378:	290b883a 	add	r5,r5,r4
1000a37c:	30000626 	beq	r6,zero,1000a398 <memcpy+0x11c>
1000a380:	198d883a 	add	r6,r3,r6
1000a384:	29c00003 	ldbu	r7,0(r5)
1000a388:	18c00044 	addi	r3,r3,1
1000a38c:	29400044 	addi	r5,r5,1
1000a390:	19ffffc5 	stb	r7,-1(r3)
1000a394:	19bffb1e 	bne	r3,r6,1000a384 <__alt_data_end+0xf800a384>
1000a398:	dfc00217 	ldw	ra,8(sp)
1000a39c:	dc400117 	ldw	r17,4(sp)
1000a3a0:	dc000017 	ldw	r16,0(sp)
1000a3a4:	dec00304 	addi	sp,sp,12
1000a3a8:	f800283a 	ret
1000a3ac:	2007883a 	mov	r3,r4
1000a3b0:	003ff206 	br	1000a37c <__alt_data_end+0xf800a37c>
1000a3b4:	2007883a 	mov	r3,r4
1000a3b8:	003ff106 	br	1000a380 <__alt_data_end+0xf800a380>
1000a3bc:	200d883a 	mov	r6,r4
1000a3c0:	003fee06 	br	1000a37c <__alt_data_end+0xf800a37c>

1000a3c4 <memmove>:
1000a3c4:	2005883a 	mov	r2,r4
1000a3c8:	29000b2e 	bgeu	r5,r4,1000a3f8 <memmove+0x34>
1000a3cc:	298f883a 	add	r7,r5,r6
1000a3d0:	21c0092e 	bgeu	r4,r7,1000a3f8 <memmove+0x34>
1000a3d4:	2187883a 	add	r3,r4,r6
1000a3d8:	198bc83a 	sub	r5,r3,r6
1000a3dc:	30004826 	beq	r6,zero,1000a500 <memmove+0x13c>
1000a3e0:	39ffffc4 	addi	r7,r7,-1
1000a3e4:	39000003 	ldbu	r4,0(r7)
1000a3e8:	18ffffc4 	addi	r3,r3,-1
1000a3ec:	19000005 	stb	r4,0(r3)
1000a3f0:	28fffb1e 	bne	r5,r3,1000a3e0 <__alt_data_end+0xf800a3e0>
1000a3f4:	f800283a 	ret
1000a3f8:	00c003c4 	movi	r3,15
1000a3fc:	1980412e 	bgeu	r3,r6,1000a504 <memmove+0x140>
1000a400:	2886b03a 	or	r3,r5,r2
1000a404:	18c000cc 	andi	r3,r3,3
1000a408:	1800401e 	bne	r3,zero,1000a50c <memmove+0x148>
1000a40c:	33fffc04 	addi	r15,r6,-16
1000a410:	781ed13a 	srli	r15,r15,4
1000a414:	28c00104 	addi	r3,r5,4
1000a418:	13400104 	addi	r13,r2,4
1000a41c:	781c913a 	slli	r14,r15,4
1000a420:	2b000204 	addi	r12,r5,8
1000a424:	12c00204 	addi	r11,r2,8
1000a428:	73800504 	addi	r14,r14,20
1000a42c:	2a800304 	addi	r10,r5,12
1000a430:	12400304 	addi	r9,r2,12
1000a434:	2b9d883a 	add	r14,r5,r14
1000a438:	2811883a 	mov	r8,r5
1000a43c:	100f883a 	mov	r7,r2
1000a440:	41000017 	ldw	r4,0(r8)
1000a444:	39c00404 	addi	r7,r7,16
1000a448:	18c00404 	addi	r3,r3,16
1000a44c:	393ffc15 	stw	r4,-16(r7)
1000a450:	193ffc17 	ldw	r4,-16(r3)
1000a454:	6b400404 	addi	r13,r13,16
1000a458:	5ac00404 	addi	r11,r11,16
1000a45c:	693ffc15 	stw	r4,-16(r13)
1000a460:	61000017 	ldw	r4,0(r12)
1000a464:	4a400404 	addi	r9,r9,16
1000a468:	42000404 	addi	r8,r8,16
1000a46c:	593ffc15 	stw	r4,-16(r11)
1000a470:	51000017 	ldw	r4,0(r10)
1000a474:	63000404 	addi	r12,r12,16
1000a478:	52800404 	addi	r10,r10,16
1000a47c:	493ffc15 	stw	r4,-16(r9)
1000a480:	1bbfef1e 	bne	r3,r14,1000a440 <__alt_data_end+0xf800a440>
1000a484:	79000044 	addi	r4,r15,1
1000a488:	2008913a 	slli	r4,r4,4
1000a48c:	328003cc 	andi	r10,r6,15
1000a490:	02c000c4 	movi	r11,3
1000a494:	1107883a 	add	r3,r2,r4
1000a498:	290b883a 	add	r5,r5,r4
1000a49c:	5a801e2e 	bgeu	r11,r10,1000a518 <memmove+0x154>
1000a4a0:	1813883a 	mov	r9,r3
1000a4a4:	2811883a 	mov	r8,r5
1000a4a8:	500f883a 	mov	r7,r10
1000a4ac:	41000017 	ldw	r4,0(r8)
1000a4b0:	4a400104 	addi	r9,r9,4
1000a4b4:	39ffff04 	addi	r7,r7,-4
1000a4b8:	493fff15 	stw	r4,-4(r9)
1000a4bc:	42000104 	addi	r8,r8,4
1000a4c0:	59fffa36 	bltu	r11,r7,1000a4ac <__alt_data_end+0xf800a4ac>
1000a4c4:	513fff04 	addi	r4,r10,-4
1000a4c8:	2008d0ba 	srli	r4,r4,2
1000a4cc:	318000cc 	andi	r6,r6,3
1000a4d0:	21000044 	addi	r4,r4,1
1000a4d4:	2109883a 	add	r4,r4,r4
1000a4d8:	2109883a 	add	r4,r4,r4
1000a4dc:	1907883a 	add	r3,r3,r4
1000a4e0:	290b883a 	add	r5,r5,r4
1000a4e4:	30000b26 	beq	r6,zero,1000a514 <memmove+0x150>
1000a4e8:	198d883a 	add	r6,r3,r6
1000a4ec:	29c00003 	ldbu	r7,0(r5)
1000a4f0:	18c00044 	addi	r3,r3,1
1000a4f4:	29400044 	addi	r5,r5,1
1000a4f8:	19ffffc5 	stb	r7,-1(r3)
1000a4fc:	19bffb1e 	bne	r3,r6,1000a4ec <__alt_data_end+0xf800a4ec>
1000a500:	f800283a 	ret
1000a504:	1007883a 	mov	r3,r2
1000a508:	003ff606 	br	1000a4e4 <__alt_data_end+0xf800a4e4>
1000a50c:	1007883a 	mov	r3,r2
1000a510:	003ff506 	br	1000a4e8 <__alt_data_end+0xf800a4e8>
1000a514:	f800283a 	ret
1000a518:	500d883a 	mov	r6,r10
1000a51c:	003ff106 	br	1000a4e4 <__alt_data_end+0xf800a4e4>

1000a520 <memset>:
1000a520:	20c000cc 	andi	r3,r4,3
1000a524:	2005883a 	mov	r2,r4
1000a528:	18004426 	beq	r3,zero,1000a63c <memset+0x11c>
1000a52c:	31ffffc4 	addi	r7,r6,-1
1000a530:	30004026 	beq	r6,zero,1000a634 <memset+0x114>
1000a534:	2813883a 	mov	r9,r5
1000a538:	200d883a 	mov	r6,r4
1000a53c:	2007883a 	mov	r3,r4
1000a540:	00000406 	br	1000a554 <memset+0x34>
1000a544:	3a3fffc4 	addi	r8,r7,-1
1000a548:	31800044 	addi	r6,r6,1
1000a54c:	38003926 	beq	r7,zero,1000a634 <memset+0x114>
1000a550:	400f883a 	mov	r7,r8
1000a554:	18c00044 	addi	r3,r3,1
1000a558:	32400005 	stb	r9,0(r6)
1000a55c:	1a0000cc 	andi	r8,r3,3
1000a560:	403ff81e 	bne	r8,zero,1000a544 <__alt_data_end+0xf800a544>
1000a564:	010000c4 	movi	r4,3
1000a568:	21c02d2e 	bgeu	r4,r7,1000a620 <memset+0x100>
1000a56c:	29003fcc 	andi	r4,r5,255
1000a570:	200c923a 	slli	r6,r4,8
1000a574:	3108b03a 	or	r4,r6,r4
1000a578:	200c943a 	slli	r6,r4,16
1000a57c:	218cb03a 	or	r6,r4,r6
1000a580:	010003c4 	movi	r4,15
1000a584:	21c0182e 	bgeu	r4,r7,1000a5e8 <memset+0xc8>
1000a588:	3b3ffc04 	addi	r12,r7,-16
1000a58c:	6018d13a 	srli	r12,r12,4
1000a590:	1a000104 	addi	r8,r3,4
1000a594:	1ac00204 	addi	r11,r3,8
1000a598:	6008913a 	slli	r4,r12,4
1000a59c:	1a800304 	addi	r10,r3,12
1000a5a0:	1813883a 	mov	r9,r3
1000a5a4:	21000504 	addi	r4,r4,20
1000a5a8:	1909883a 	add	r4,r3,r4
1000a5ac:	49800015 	stw	r6,0(r9)
1000a5b0:	41800015 	stw	r6,0(r8)
1000a5b4:	59800015 	stw	r6,0(r11)
1000a5b8:	51800015 	stw	r6,0(r10)
1000a5bc:	42000404 	addi	r8,r8,16
1000a5c0:	4a400404 	addi	r9,r9,16
1000a5c4:	5ac00404 	addi	r11,r11,16
1000a5c8:	52800404 	addi	r10,r10,16
1000a5cc:	413ff71e 	bne	r8,r4,1000a5ac <__alt_data_end+0xf800a5ac>
1000a5d0:	63000044 	addi	r12,r12,1
1000a5d4:	6018913a 	slli	r12,r12,4
1000a5d8:	39c003cc 	andi	r7,r7,15
1000a5dc:	010000c4 	movi	r4,3
1000a5e0:	1b07883a 	add	r3,r3,r12
1000a5e4:	21c00e2e 	bgeu	r4,r7,1000a620 <memset+0x100>
1000a5e8:	1813883a 	mov	r9,r3
1000a5ec:	3811883a 	mov	r8,r7
1000a5f0:	010000c4 	movi	r4,3
1000a5f4:	49800015 	stw	r6,0(r9)
1000a5f8:	423fff04 	addi	r8,r8,-4
1000a5fc:	4a400104 	addi	r9,r9,4
1000a600:	223ffc36 	bltu	r4,r8,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a604:	393fff04 	addi	r4,r7,-4
1000a608:	2008d0ba 	srli	r4,r4,2
1000a60c:	39c000cc 	andi	r7,r7,3
1000a610:	21000044 	addi	r4,r4,1
1000a614:	2109883a 	add	r4,r4,r4
1000a618:	2109883a 	add	r4,r4,r4
1000a61c:	1907883a 	add	r3,r3,r4
1000a620:	38000526 	beq	r7,zero,1000a638 <memset+0x118>
1000a624:	19cf883a 	add	r7,r3,r7
1000a628:	19400005 	stb	r5,0(r3)
1000a62c:	18c00044 	addi	r3,r3,1
1000a630:	38fffd1e 	bne	r7,r3,1000a628 <__alt_data_end+0xf800a628>
1000a634:	f800283a 	ret
1000a638:	f800283a 	ret
1000a63c:	2007883a 	mov	r3,r4
1000a640:	300f883a 	mov	r7,r6
1000a644:	003fc706 	br	1000a564 <__alt_data_end+0xf800a564>

1000a648 <_Balloc>:
1000a648:	20801317 	ldw	r2,76(r4)
1000a64c:	defffc04 	addi	sp,sp,-16
1000a650:	dc400115 	stw	r17,4(sp)
1000a654:	dc000015 	stw	r16,0(sp)
1000a658:	dfc00315 	stw	ra,12(sp)
1000a65c:	dc800215 	stw	r18,8(sp)
1000a660:	2023883a 	mov	r17,r4
1000a664:	2821883a 	mov	r16,r5
1000a668:	10000f26 	beq	r2,zero,1000a6a8 <_Balloc+0x60>
1000a66c:	8407883a 	add	r3,r16,r16
1000a670:	18c7883a 	add	r3,r3,r3
1000a674:	10c7883a 	add	r3,r2,r3
1000a678:	18800017 	ldw	r2,0(r3)
1000a67c:	10001126 	beq	r2,zero,1000a6c4 <_Balloc+0x7c>
1000a680:	11000017 	ldw	r4,0(r2)
1000a684:	19000015 	stw	r4,0(r3)
1000a688:	10000415 	stw	zero,16(r2)
1000a68c:	10000315 	stw	zero,12(r2)
1000a690:	dfc00317 	ldw	ra,12(sp)
1000a694:	dc800217 	ldw	r18,8(sp)
1000a698:	dc400117 	ldw	r17,4(sp)
1000a69c:	dc000017 	ldw	r16,0(sp)
1000a6a0:	dec00404 	addi	sp,sp,16
1000a6a4:	f800283a 	ret
1000a6a8:	01800844 	movi	r6,33
1000a6ac:	01400104 	movi	r5,4
1000a6b0:	000d6f00 	call	1000d6f0 <_calloc_r>
1000a6b4:	88801315 	stw	r2,76(r17)
1000a6b8:	103fec1e 	bne	r2,zero,1000a66c <__alt_data_end+0xf800a66c>
1000a6bc:	0005883a 	mov	r2,zero
1000a6c0:	003ff306 	br	1000a690 <__alt_data_end+0xf800a690>
1000a6c4:	01400044 	movi	r5,1
1000a6c8:	2c24983a 	sll	r18,r5,r16
1000a6cc:	8809883a 	mov	r4,r17
1000a6d0:	91800144 	addi	r6,r18,5
1000a6d4:	318d883a 	add	r6,r6,r6
1000a6d8:	318d883a 	add	r6,r6,r6
1000a6dc:	000d6f00 	call	1000d6f0 <_calloc_r>
1000a6e0:	103ff626 	beq	r2,zero,1000a6bc <__alt_data_end+0xf800a6bc>
1000a6e4:	14000115 	stw	r16,4(r2)
1000a6e8:	14800215 	stw	r18,8(r2)
1000a6ec:	003fe606 	br	1000a688 <__alt_data_end+0xf800a688>

1000a6f0 <_Bfree>:
1000a6f0:	28000826 	beq	r5,zero,1000a714 <_Bfree+0x24>
1000a6f4:	28c00117 	ldw	r3,4(r5)
1000a6f8:	20801317 	ldw	r2,76(r4)
1000a6fc:	18c7883a 	add	r3,r3,r3
1000a700:	18c7883a 	add	r3,r3,r3
1000a704:	10c5883a 	add	r2,r2,r3
1000a708:	10c00017 	ldw	r3,0(r2)
1000a70c:	28c00015 	stw	r3,0(r5)
1000a710:	11400015 	stw	r5,0(r2)
1000a714:	f800283a 	ret

1000a718 <__multadd>:
1000a718:	defff704 	addi	sp,sp,-36
1000a71c:	dc800215 	stw	r18,8(sp)
1000a720:	2c800417 	ldw	r18,16(r5)
1000a724:	dd800615 	stw	r22,24(sp)
1000a728:	dd400515 	stw	r21,20(sp)
1000a72c:	dd000415 	stw	r20,16(sp)
1000a730:	dcc00315 	stw	r19,12(sp)
1000a734:	dc400115 	stw	r17,4(sp)
1000a738:	dc000015 	stw	r16,0(sp)
1000a73c:	dfc00815 	stw	ra,32(sp)
1000a740:	ddc00715 	stw	r23,28(sp)
1000a744:	2827883a 	mov	r19,r5
1000a748:	2029883a 	mov	r20,r4
1000a74c:	3023883a 	mov	r17,r6
1000a750:	3821883a 	mov	r16,r7
1000a754:	2d400504 	addi	r21,r5,20
1000a758:	002d883a 	mov	r22,zero
1000a75c:	adc00017 	ldw	r23,0(r21)
1000a760:	880b883a 	mov	r5,r17
1000a764:	ad400104 	addi	r21,r21,4
1000a768:	b93fffcc 	andi	r4,r23,65535
1000a76c:	00046600 	call	10004660 <__mulsi3>
1000a770:	b808d43a 	srli	r4,r23,16
1000a774:	880b883a 	mov	r5,r17
1000a778:	1421883a 	add	r16,r2,r16
1000a77c:	00046600 	call	10004660 <__mulsi3>
1000a780:	800ed43a 	srli	r7,r16,16
1000a784:	80ffffcc 	andi	r3,r16,65535
1000a788:	b5800044 	addi	r22,r22,1
1000a78c:	11c5883a 	add	r2,r2,r7
1000a790:	100e943a 	slli	r7,r2,16
1000a794:	1020d43a 	srli	r16,r2,16
1000a798:	38c7883a 	add	r3,r7,r3
1000a79c:	a8ffff15 	stw	r3,-4(r21)
1000a7a0:	b4bfee16 	blt	r22,r18,1000a75c <__alt_data_end+0xf800a75c>
1000a7a4:	80000926 	beq	r16,zero,1000a7cc <__multadd+0xb4>
1000a7a8:	98800217 	ldw	r2,8(r19)
1000a7ac:	9080130e 	bge	r18,r2,1000a7fc <__multadd+0xe4>
1000a7b0:	90800144 	addi	r2,r18,5
1000a7b4:	1085883a 	add	r2,r2,r2
1000a7b8:	1085883a 	add	r2,r2,r2
1000a7bc:	9885883a 	add	r2,r19,r2
1000a7c0:	14000015 	stw	r16,0(r2)
1000a7c4:	94800044 	addi	r18,r18,1
1000a7c8:	9c800415 	stw	r18,16(r19)
1000a7cc:	9805883a 	mov	r2,r19
1000a7d0:	dfc00817 	ldw	ra,32(sp)
1000a7d4:	ddc00717 	ldw	r23,28(sp)
1000a7d8:	dd800617 	ldw	r22,24(sp)
1000a7dc:	dd400517 	ldw	r21,20(sp)
1000a7e0:	dd000417 	ldw	r20,16(sp)
1000a7e4:	dcc00317 	ldw	r19,12(sp)
1000a7e8:	dc800217 	ldw	r18,8(sp)
1000a7ec:	dc400117 	ldw	r17,4(sp)
1000a7f0:	dc000017 	ldw	r16,0(sp)
1000a7f4:	dec00904 	addi	sp,sp,36
1000a7f8:	f800283a 	ret
1000a7fc:	99400117 	ldw	r5,4(r19)
1000a800:	a009883a 	mov	r4,r20
1000a804:	29400044 	addi	r5,r5,1
1000a808:	000a6480 	call	1000a648 <_Balloc>
1000a80c:	99800417 	ldw	r6,16(r19)
1000a810:	99400304 	addi	r5,r19,12
1000a814:	11000304 	addi	r4,r2,12
1000a818:	31800084 	addi	r6,r6,2
1000a81c:	318d883a 	add	r6,r6,r6
1000a820:	318d883a 	add	r6,r6,r6
1000a824:	1023883a 	mov	r17,r2
1000a828:	000a27c0 	call	1000a27c <memcpy>
1000a82c:	98000a26 	beq	r19,zero,1000a858 <__multadd+0x140>
1000a830:	98c00117 	ldw	r3,4(r19)
1000a834:	a0801317 	ldw	r2,76(r20)
1000a838:	18c7883a 	add	r3,r3,r3
1000a83c:	18c7883a 	add	r3,r3,r3
1000a840:	10c5883a 	add	r2,r2,r3
1000a844:	10c00017 	ldw	r3,0(r2)
1000a848:	98c00015 	stw	r3,0(r19)
1000a84c:	14c00015 	stw	r19,0(r2)
1000a850:	8827883a 	mov	r19,r17
1000a854:	003fd606 	br	1000a7b0 <__alt_data_end+0xf800a7b0>
1000a858:	8827883a 	mov	r19,r17
1000a85c:	003fd406 	br	1000a7b0 <__alt_data_end+0xf800a7b0>

1000a860 <__s2b>:
1000a860:	defff904 	addi	sp,sp,-28
1000a864:	dc400115 	stw	r17,4(sp)
1000a868:	dc000015 	stw	r16,0(sp)
1000a86c:	2023883a 	mov	r17,r4
1000a870:	2821883a 	mov	r16,r5
1000a874:	39000204 	addi	r4,r7,8
1000a878:	01400244 	movi	r5,9
1000a87c:	dcc00315 	stw	r19,12(sp)
1000a880:	dc800215 	stw	r18,8(sp)
1000a884:	dfc00615 	stw	ra,24(sp)
1000a888:	dd400515 	stw	r21,20(sp)
1000a88c:	dd000415 	stw	r20,16(sp)
1000a890:	3825883a 	mov	r18,r7
1000a894:	3027883a 	mov	r19,r6
1000a898:	000eb480 	call	1000eb48 <__divsi3>
1000a89c:	00c00044 	movi	r3,1
1000a8a0:	000b883a 	mov	r5,zero
1000a8a4:	1880030e 	bge	r3,r2,1000a8b4 <__s2b+0x54>
1000a8a8:	18c7883a 	add	r3,r3,r3
1000a8ac:	29400044 	addi	r5,r5,1
1000a8b0:	18bffd16 	blt	r3,r2,1000a8a8 <__alt_data_end+0xf800a8a8>
1000a8b4:	8809883a 	mov	r4,r17
1000a8b8:	000a6480 	call	1000a648 <_Balloc>
1000a8bc:	d8c00717 	ldw	r3,28(sp)
1000a8c0:	10c00515 	stw	r3,20(r2)
1000a8c4:	00c00044 	movi	r3,1
1000a8c8:	10c00415 	stw	r3,16(r2)
1000a8cc:	00c00244 	movi	r3,9
1000a8d0:	1cc0210e 	bge	r3,r19,1000a958 <__s2b+0xf8>
1000a8d4:	80eb883a 	add	r21,r16,r3
1000a8d8:	a829883a 	mov	r20,r21
1000a8dc:	84e1883a 	add	r16,r16,r19
1000a8e0:	a1c00007 	ldb	r7,0(r20)
1000a8e4:	01800284 	movi	r6,10
1000a8e8:	a5000044 	addi	r20,r20,1
1000a8ec:	100b883a 	mov	r5,r2
1000a8f0:	39fff404 	addi	r7,r7,-48
1000a8f4:	8809883a 	mov	r4,r17
1000a8f8:	000a7180 	call	1000a718 <__multadd>
1000a8fc:	a43ff81e 	bne	r20,r16,1000a8e0 <__alt_data_end+0xf800a8e0>
1000a900:	ace1883a 	add	r16,r21,r19
1000a904:	843ffe04 	addi	r16,r16,-8
1000a908:	9c800a0e 	bge	r19,r18,1000a934 <__s2b+0xd4>
1000a90c:	94e5c83a 	sub	r18,r18,r19
1000a910:	84a5883a 	add	r18,r16,r18
1000a914:	81c00007 	ldb	r7,0(r16)
1000a918:	01800284 	movi	r6,10
1000a91c:	84000044 	addi	r16,r16,1
1000a920:	100b883a 	mov	r5,r2
1000a924:	39fff404 	addi	r7,r7,-48
1000a928:	8809883a 	mov	r4,r17
1000a92c:	000a7180 	call	1000a718 <__multadd>
1000a930:	84bff81e 	bne	r16,r18,1000a914 <__alt_data_end+0xf800a914>
1000a934:	dfc00617 	ldw	ra,24(sp)
1000a938:	dd400517 	ldw	r21,20(sp)
1000a93c:	dd000417 	ldw	r20,16(sp)
1000a940:	dcc00317 	ldw	r19,12(sp)
1000a944:	dc800217 	ldw	r18,8(sp)
1000a948:	dc400117 	ldw	r17,4(sp)
1000a94c:	dc000017 	ldw	r16,0(sp)
1000a950:	dec00704 	addi	sp,sp,28
1000a954:	f800283a 	ret
1000a958:	84000284 	addi	r16,r16,10
1000a95c:	1827883a 	mov	r19,r3
1000a960:	003fe906 	br	1000a908 <__alt_data_end+0xf800a908>

1000a964 <__hi0bits>:
1000a964:	20bfffec 	andhi	r2,r4,65535
1000a968:	1000141e 	bne	r2,zero,1000a9bc <__hi0bits+0x58>
1000a96c:	2008943a 	slli	r4,r4,16
1000a970:	00800404 	movi	r2,16
1000a974:	20ffc02c 	andhi	r3,r4,65280
1000a978:	1800021e 	bne	r3,zero,1000a984 <__hi0bits+0x20>
1000a97c:	2008923a 	slli	r4,r4,8
1000a980:	10800204 	addi	r2,r2,8
1000a984:	20fc002c 	andhi	r3,r4,61440
1000a988:	1800021e 	bne	r3,zero,1000a994 <__hi0bits+0x30>
1000a98c:	2008913a 	slli	r4,r4,4
1000a990:	10800104 	addi	r2,r2,4
1000a994:	20f0002c 	andhi	r3,r4,49152
1000a998:	1800031e 	bne	r3,zero,1000a9a8 <__hi0bits+0x44>
1000a99c:	2109883a 	add	r4,r4,r4
1000a9a0:	10800084 	addi	r2,r2,2
1000a9a4:	2109883a 	add	r4,r4,r4
1000a9a8:	20000316 	blt	r4,zero,1000a9b8 <__hi0bits+0x54>
1000a9ac:	2110002c 	andhi	r4,r4,16384
1000a9b0:	2000041e 	bne	r4,zero,1000a9c4 <__hi0bits+0x60>
1000a9b4:	00800804 	movi	r2,32
1000a9b8:	f800283a 	ret
1000a9bc:	0005883a 	mov	r2,zero
1000a9c0:	003fec06 	br	1000a974 <__alt_data_end+0xf800a974>
1000a9c4:	10800044 	addi	r2,r2,1
1000a9c8:	f800283a 	ret

1000a9cc <__lo0bits>:
1000a9cc:	20c00017 	ldw	r3,0(r4)
1000a9d0:	188001cc 	andi	r2,r3,7
1000a9d4:	10000826 	beq	r2,zero,1000a9f8 <__lo0bits+0x2c>
1000a9d8:	1880004c 	andi	r2,r3,1
1000a9dc:	1000211e 	bne	r2,zero,1000aa64 <__lo0bits+0x98>
1000a9e0:	1880008c 	andi	r2,r3,2
1000a9e4:	1000211e 	bne	r2,zero,1000aa6c <__lo0bits+0xa0>
1000a9e8:	1806d0ba 	srli	r3,r3,2
1000a9ec:	00800084 	movi	r2,2
1000a9f0:	20c00015 	stw	r3,0(r4)
1000a9f4:	f800283a 	ret
1000a9f8:	18bfffcc 	andi	r2,r3,65535
1000a9fc:	10001326 	beq	r2,zero,1000aa4c <__lo0bits+0x80>
1000aa00:	0005883a 	mov	r2,zero
1000aa04:	19403fcc 	andi	r5,r3,255
1000aa08:	2800021e 	bne	r5,zero,1000aa14 <__lo0bits+0x48>
1000aa0c:	1806d23a 	srli	r3,r3,8
1000aa10:	10800204 	addi	r2,r2,8
1000aa14:	194003cc 	andi	r5,r3,15
1000aa18:	2800021e 	bne	r5,zero,1000aa24 <__lo0bits+0x58>
1000aa1c:	1806d13a 	srli	r3,r3,4
1000aa20:	10800104 	addi	r2,r2,4
1000aa24:	194000cc 	andi	r5,r3,3
1000aa28:	2800021e 	bne	r5,zero,1000aa34 <__lo0bits+0x68>
1000aa2c:	1806d0ba 	srli	r3,r3,2
1000aa30:	10800084 	addi	r2,r2,2
1000aa34:	1940004c 	andi	r5,r3,1
1000aa38:	2800081e 	bne	r5,zero,1000aa5c <__lo0bits+0x90>
1000aa3c:	1806d07a 	srli	r3,r3,1
1000aa40:	1800051e 	bne	r3,zero,1000aa58 <__lo0bits+0x8c>
1000aa44:	00800804 	movi	r2,32
1000aa48:	f800283a 	ret
1000aa4c:	1806d43a 	srli	r3,r3,16
1000aa50:	00800404 	movi	r2,16
1000aa54:	003feb06 	br	1000aa04 <__alt_data_end+0xf800aa04>
1000aa58:	10800044 	addi	r2,r2,1
1000aa5c:	20c00015 	stw	r3,0(r4)
1000aa60:	f800283a 	ret
1000aa64:	0005883a 	mov	r2,zero
1000aa68:	f800283a 	ret
1000aa6c:	1806d07a 	srli	r3,r3,1
1000aa70:	00800044 	movi	r2,1
1000aa74:	20c00015 	stw	r3,0(r4)
1000aa78:	f800283a 	ret

1000aa7c <__i2b>:
1000aa7c:	defffd04 	addi	sp,sp,-12
1000aa80:	dc000015 	stw	r16,0(sp)
1000aa84:	04000044 	movi	r16,1
1000aa88:	dc400115 	stw	r17,4(sp)
1000aa8c:	2823883a 	mov	r17,r5
1000aa90:	800b883a 	mov	r5,r16
1000aa94:	dfc00215 	stw	ra,8(sp)
1000aa98:	000a6480 	call	1000a648 <_Balloc>
1000aa9c:	14400515 	stw	r17,20(r2)
1000aaa0:	14000415 	stw	r16,16(r2)
1000aaa4:	dfc00217 	ldw	ra,8(sp)
1000aaa8:	dc400117 	ldw	r17,4(sp)
1000aaac:	dc000017 	ldw	r16,0(sp)
1000aab0:	dec00304 	addi	sp,sp,12
1000aab4:	f800283a 	ret

1000aab8 <__multiply>:
1000aab8:	deffef04 	addi	sp,sp,-68
1000aabc:	dc400815 	stw	r17,32(sp)
1000aac0:	dc000715 	stw	r16,28(sp)
1000aac4:	34400417 	ldw	r17,16(r6)
1000aac8:	2c000417 	ldw	r16,16(r5)
1000aacc:	dd800d15 	stw	r22,52(sp)
1000aad0:	dc800915 	stw	r18,36(sp)
1000aad4:	dfc01015 	stw	ra,64(sp)
1000aad8:	df000f15 	stw	fp,60(sp)
1000aadc:	ddc00e15 	stw	r23,56(sp)
1000aae0:	dd400c15 	stw	r21,48(sp)
1000aae4:	dd000b15 	stw	r20,44(sp)
1000aae8:	dcc00a15 	stw	r19,40(sp)
1000aaec:	2825883a 	mov	r18,r5
1000aaf0:	302d883a 	mov	r22,r6
1000aaf4:	8440050e 	bge	r16,r17,1000ab0c <__multiply+0x54>
1000aaf8:	8007883a 	mov	r3,r16
1000aafc:	3025883a 	mov	r18,r6
1000ab00:	8821883a 	mov	r16,r17
1000ab04:	282d883a 	mov	r22,r5
1000ab08:	1823883a 	mov	r17,r3
1000ab0c:	90800217 	ldw	r2,8(r18)
1000ab10:	8447883a 	add	r3,r16,r17
1000ab14:	d8c00215 	stw	r3,8(sp)
1000ab18:	91400117 	ldw	r5,4(r18)
1000ab1c:	10c0010e 	bge	r2,r3,1000ab24 <__multiply+0x6c>
1000ab20:	29400044 	addi	r5,r5,1
1000ab24:	000a6480 	call	1000a648 <_Balloc>
1000ab28:	d8c00217 	ldw	r3,8(sp)
1000ab2c:	d8800615 	stw	r2,24(sp)
1000ab30:	18eb883a 	add	r21,r3,r3
1000ab34:	ad6b883a 	add	r21,r21,r21
1000ab38:	10c00504 	addi	r3,r2,20
1000ab3c:	1d6b883a 	add	r21,r3,r21
1000ab40:	d8c00115 	stw	r3,4(sp)
1000ab44:	dd400315 	stw	r21,12(sp)
1000ab48:	1805883a 	mov	r2,r3
1000ab4c:	1d40042e 	bgeu	r3,r21,1000ab60 <__multiply+0xa8>
1000ab50:	d8c00317 	ldw	r3,12(sp)
1000ab54:	10000015 	stw	zero,0(r2)
1000ab58:	10800104 	addi	r2,r2,4
1000ab5c:	10fffc36 	bltu	r2,r3,1000ab50 <__alt_data_end+0xf800ab50>
1000ab60:	8c63883a 	add	r17,r17,r17
1000ab64:	b5800504 	addi	r22,r22,20
1000ab68:	8c63883a 	add	r17,r17,r17
1000ab6c:	94800504 	addi	r18,r18,20
1000ab70:	8421883a 	add	r16,r16,r16
1000ab74:	b463883a 	add	r17,r22,r17
1000ab78:	8421883a 	add	r16,r16,r16
1000ab7c:	dd800015 	stw	r22,0(sp)
1000ab80:	dc800415 	stw	r18,16(sp)
1000ab84:	dc400515 	stw	r17,20(sp)
1000ab88:	9429883a 	add	r20,r18,r16
1000ab8c:	b4404f2e 	bgeu	r22,r17,1000accc <__multiply+0x214>
1000ab90:	d8c00017 	ldw	r3,0(sp)
1000ab94:	1c800017 	ldw	r18,0(r3)
1000ab98:	947fffcc 	andi	r17,r18,65535
1000ab9c:	88001e26 	beq	r17,zero,1000ac18 <__multiply+0x160>
1000aba0:	dd800117 	ldw	r22,4(sp)
1000aba4:	dd400417 	ldw	r21,16(sp)
1000aba8:	0027883a 	mov	r19,zero
1000abac:	ac800017 	ldw	r18,0(r21)
1000abb0:	b4000017 	ldw	r16,0(r22)
1000abb4:	880b883a 	mov	r5,r17
1000abb8:	913fffcc 	andi	r4,r18,65535
1000abbc:	00046600 	call	10004660 <__mulsi3>
1000abc0:	9008d43a 	srli	r4,r18,16
1000abc4:	84bfffcc 	andi	r18,r16,65535
1000abc8:	1485883a 	add	r2,r2,r18
1000abcc:	14e5883a 	add	r18,r2,r19
1000abd0:	8020d43a 	srli	r16,r16,16
1000abd4:	9026d43a 	srli	r19,r18,16
1000abd8:	880b883a 	mov	r5,r17
1000abdc:	00046600 	call	10004660 <__mulsi3>
1000abe0:	1405883a 	add	r2,r2,r16
1000abe4:	14e1883a 	add	r16,r2,r19
1000abe8:	90ffffcc 	andi	r3,r18,65535
1000abec:	8024943a 	slli	r18,r16,16
1000abf0:	ad400104 	addi	r21,r21,4
1000abf4:	b005883a 	mov	r2,r22
1000abf8:	90c6b03a 	or	r3,r18,r3
1000abfc:	b0c00015 	stw	r3,0(r22)
1000ac00:	8026d43a 	srli	r19,r16,16
1000ac04:	b5800104 	addi	r22,r22,4
1000ac08:	ad3fe836 	bltu	r21,r20,1000abac <__alt_data_end+0xf800abac>
1000ac0c:	d8c00017 	ldw	r3,0(sp)
1000ac10:	14c00115 	stw	r19,4(r2)
1000ac14:	1c800017 	ldw	r18,0(r3)
1000ac18:	9024d43a 	srli	r18,r18,16
1000ac1c:	90002226 	beq	r18,zero,1000aca8 <__multiply+0x1f0>
1000ac20:	d8c00117 	ldw	r3,4(sp)
1000ac24:	dd800417 	ldw	r22,16(sp)
1000ac28:	002f883a 	mov	r23,zero
1000ac2c:	1f000017 	ldw	fp,0(r3)
1000ac30:	1823883a 	mov	r17,r3
1000ac34:	182b883a 	mov	r21,r3
1000ac38:	e021883a 	mov	r16,fp
1000ac3c:	00000106 	br	1000ac44 <__multiply+0x18c>
1000ac40:	982b883a 	mov	r21,r19
1000ac44:	b100000b 	ldhu	r4,0(r22)
1000ac48:	8020d43a 	srli	r16,r16,16
1000ac4c:	900b883a 	mov	r5,r18
1000ac50:	00046600 	call	10004660 <__mulsi3>
1000ac54:	1405883a 	add	r2,r2,r16
1000ac58:	15ef883a 	add	r23,r2,r23
1000ac5c:	b804943a 	slli	r2,r23,16
1000ac60:	e0ffffcc 	andi	r3,fp,65535
1000ac64:	8c400104 	addi	r17,r17,4
1000ac68:	10c6b03a 	or	r3,r2,r3
1000ac6c:	88ffff15 	stw	r3,-4(r17)
1000ac70:	b5800104 	addi	r22,r22,4
1000ac74:	b13fff17 	ldw	r4,-4(r22)
1000ac78:	acc00104 	addi	r19,r21,4
1000ac7c:	900b883a 	mov	r5,r18
1000ac80:	2008d43a 	srli	r4,r4,16
1000ac84:	9c000017 	ldw	r16,0(r19)
1000ac88:	00046600 	call	10004660 <__mulsi3>
1000ac8c:	b806d43a 	srli	r3,r23,16
1000ac90:	813fffcc 	andi	r4,r16,65535
1000ac94:	1105883a 	add	r2,r2,r4
1000ac98:	10f9883a 	add	fp,r2,r3
1000ac9c:	e02ed43a 	srli	r23,fp,16
1000aca0:	b53fe736 	bltu	r22,r20,1000ac40 <__alt_data_end+0xf800ac40>
1000aca4:	af000115 	stw	fp,4(r21)
1000aca8:	d8c00017 	ldw	r3,0(sp)
1000acac:	d9000517 	ldw	r4,20(sp)
1000acb0:	18c00104 	addi	r3,r3,4
1000acb4:	d8c00015 	stw	r3,0(sp)
1000acb8:	d8c00117 	ldw	r3,4(sp)
1000acbc:	18c00104 	addi	r3,r3,4
1000acc0:	d8c00115 	stw	r3,4(sp)
1000acc4:	d8c00017 	ldw	r3,0(sp)
1000acc8:	193fb136 	bltu	r3,r4,1000ab90 <__alt_data_end+0xf800ab90>
1000accc:	d8c00217 	ldw	r3,8(sp)
1000acd0:	00c00c0e 	bge	zero,r3,1000ad04 <__multiply+0x24c>
1000acd4:	d8c00317 	ldw	r3,12(sp)
1000acd8:	18bfff17 	ldw	r2,-4(r3)
1000acdc:	1d7fff04 	addi	r21,r3,-4
1000ace0:	10000326 	beq	r2,zero,1000acf0 <__multiply+0x238>
1000ace4:	00000706 	br	1000ad04 <__multiply+0x24c>
1000ace8:	a8800017 	ldw	r2,0(r21)
1000acec:	1000051e 	bne	r2,zero,1000ad04 <__multiply+0x24c>
1000acf0:	d8c00217 	ldw	r3,8(sp)
1000acf4:	ad7fff04 	addi	r21,r21,-4
1000acf8:	18ffffc4 	addi	r3,r3,-1
1000acfc:	d8c00215 	stw	r3,8(sp)
1000ad00:	183ff91e 	bne	r3,zero,1000ace8 <__alt_data_end+0xf800ace8>
1000ad04:	d8c00617 	ldw	r3,24(sp)
1000ad08:	d9000217 	ldw	r4,8(sp)
1000ad0c:	1805883a 	mov	r2,r3
1000ad10:	19000415 	stw	r4,16(r3)
1000ad14:	dfc01017 	ldw	ra,64(sp)
1000ad18:	df000f17 	ldw	fp,60(sp)
1000ad1c:	ddc00e17 	ldw	r23,56(sp)
1000ad20:	dd800d17 	ldw	r22,52(sp)
1000ad24:	dd400c17 	ldw	r21,48(sp)
1000ad28:	dd000b17 	ldw	r20,44(sp)
1000ad2c:	dcc00a17 	ldw	r19,40(sp)
1000ad30:	dc800917 	ldw	r18,36(sp)
1000ad34:	dc400817 	ldw	r17,32(sp)
1000ad38:	dc000717 	ldw	r16,28(sp)
1000ad3c:	dec01104 	addi	sp,sp,68
1000ad40:	f800283a 	ret

1000ad44 <__pow5mult>:
1000ad44:	defffa04 	addi	sp,sp,-24
1000ad48:	dcc00315 	stw	r19,12(sp)
1000ad4c:	dc000015 	stw	r16,0(sp)
1000ad50:	dfc00515 	stw	ra,20(sp)
1000ad54:	dd000415 	stw	r20,16(sp)
1000ad58:	dc800215 	stw	r18,8(sp)
1000ad5c:	dc400115 	stw	r17,4(sp)
1000ad60:	308000cc 	andi	r2,r6,3
1000ad64:	3021883a 	mov	r16,r6
1000ad68:	2027883a 	mov	r19,r4
1000ad6c:	10002f1e 	bne	r2,zero,1000ae2c <__pow5mult+0xe8>
1000ad70:	2825883a 	mov	r18,r5
1000ad74:	8021d0ba 	srai	r16,r16,2
1000ad78:	80001a26 	beq	r16,zero,1000ade4 <__pow5mult+0xa0>
1000ad7c:	9c401217 	ldw	r17,72(r19)
1000ad80:	8800061e 	bne	r17,zero,1000ad9c <__pow5mult+0x58>
1000ad84:	00003406 	br	1000ae58 <__pow5mult+0x114>
1000ad88:	8021d07a 	srai	r16,r16,1
1000ad8c:	80001526 	beq	r16,zero,1000ade4 <__pow5mult+0xa0>
1000ad90:	88800017 	ldw	r2,0(r17)
1000ad94:	10001c26 	beq	r2,zero,1000ae08 <__pow5mult+0xc4>
1000ad98:	1023883a 	mov	r17,r2
1000ad9c:	8080004c 	andi	r2,r16,1
1000ada0:	103ff926 	beq	r2,zero,1000ad88 <__alt_data_end+0xf800ad88>
1000ada4:	880d883a 	mov	r6,r17
1000ada8:	900b883a 	mov	r5,r18
1000adac:	9809883a 	mov	r4,r19
1000adb0:	000aab80 	call	1000aab8 <__multiply>
1000adb4:	90001b26 	beq	r18,zero,1000ae24 <__pow5mult+0xe0>
1000adb8:	91000117 	ldw	r4,4(r18)
1000adbc:	98c01317 	ldw	r3,76(r19)
1000adc0:	8021d07a 	srai	r16,r16,1
1000adc4:	2109883a 	add	r4,r4,r4
1000adc8:	2109883a 	add	r4,r4,r4
1000adcc:	1907883a 	add	r3,r3,r4
1000add0:	19000017 	ldw	r4,0(r3)
1000add4:	91000015 	stw	r4,0(r18)
1000add8:	1c800015 	stw	r18,0(r3)
1000addc:	1025883a 	mov	r18,r2
1000ade0:	803feb1e 	bne	r16,zero,1000ad90 <__alt_data_end+0xf800ad90>
1000ade4:	9005883a 	mov	r2,r18
1000ade8:	dfc00517 	ldw	ra,20(sp)
1000adec:	dd000417 	ldw	r20,16(sp)
1000adf0:	dcc00317 	ldw	r19,12(sp)
1000adf4:	dc800217 	ldw	r18,8(sp)
1000adf8:	dc400117 	ldw	r17,4(sp)
1000adfc:	dc000017 	ldw	r16,0(sp)
1000ae00:	dec00604 	addi	sp,sp,24
1000ae04:	f800283a 	ret
1000ae08:	880d883a 	mov	r6,r17
1000ae0c:	880b883a 	mov	r5,r17
1000ae10:	9809883a 	mov	r4,r19
1000ae14:	000aab80 	call	1000aab8 <__multiply>
1000ae18:	88800015 	stw	r2,0(r17)
1000ae1c:	10000015 	stw	zero,0(r2)
1000ae20:	003fdd06 	br	1000ad98 <__alt_data_end+0xf800ad98>
1000ae24:	1025883a 	mov	r18,r2
1000ae28:	003fd706 	br	1000ad88 <__alt_data_end+0xf800ad88>
1000ae2c:	10bfffc4 	addi	r2,r2,-1
1000ae30:	1085883a 	add	r2,r2,r2
1000ae34:	00c40074 	movhi	r3,4097
1000ae38:	18d1cd04 	addi	r3,r3,18228
1000ae3c:	1085883a 	add	r2,r2,r2
1000ae40:	1885883a 	add	r2,r3,r2
1000ae44:	11800017 	ldw	r6,0(r2)
1000ae48:	000f883a 	mov	r7,zero
1000ae4c:	000a7180 	call	1000a718 <__multadd>
1000ae50:	1025883a 	mov	r18,r2
1000ae54:	003fc706 	br	1000ad74 <__alt_data_end+0xf800ad74>
1000ae58:	05000044 	movi	r20,1
1000ae5c:	a00b883a 	mov	r5,r20
1000ae60:	9809883a 	mov	r4,r19
1000ae64:	000a6480 	call	1000a648 <_Balloc>
1000ae68:	1023883a 	mov	r17,r2
1000ae6c:	00809c44 	movi	r2,625
1000ae70:	88800515 	stw	r2,20(r17)
1000ae74:	8d000415 	stw	r20,16(r17)
1000ae78:	9c401215 	stw	r17,72(r19)
1000ae7c:	88000015 	stw	zero,0(r17)
1000ae80:	003fc606 	br	1000ad9c <__alt_data_end+0xf800ad9c>

1000ae84 <__lshift>:
1000ae84:	defff904 	addi	sp,sp,-28
1000ae88:	dd400515 	stw	r21,20(sp)
1000ae8c:	dcc00315 	stw	r19,12(sp)
1000ae90:	302bd17a 	srai	r21,r6,5
1000ae94:	2cc00417 	ldw	r19,16(r5)
1000ae98:	28800217 	ldw	r2,8(r5)
1000ae9c:	dd000415 	stw	r20,16(sp)
1000aea0:	ace7883a 	add	r19,r21,r19
1000aea4:	dc800215 	stw	r18,8(sp)
1000aea8:	dc400115 	stw	r17,4(sp)
1000aeac:	dc000015 	stw	r16,0(sp)
1000aeb0:	dfc00615 	stw	ra,24(sp)
1000aeb4:	9c000044 	addi	r16,r19,1
1000aeb8:	2823883a 	mov	r17,r5
1000aebc:	3029883a 	mov	r20,r6
1000aec0:	2025883a 	mov	r18,r4
1000aec4:	29400117 	ldw	r5,4(r5)
1000aec8:	1400030e 	bge	r2,r16,1000aed8 <__lshift+0x54>
1000aecc:	1085883a 	add	r2,r2,r2
1000aed0:	29400044 	addi	r5,r5,1
1000aed4:	143ffd16 	blt	r2,r16,1000aecc <__alt_data_end+0xf800aecc>
1000aed8:	9009883a 	mov	r4,r18
1000aedc:	000a6480 	call	1000a648 <_Balloc>
1000aee0:	10c00504 	addi	r3,r2,20
1000aee4:	0540070e 	bge	zero,r21,1000af04 <__lshift+0x80>
1000aee8:	ad6b883a 	add	r21,r21,r21
1000aeec:	ad6b883a 	add	r21,r21,r21
1000aef0:	1809883a 	mov	r4,r3
1000aef4:	1d47883a 	add	r3,r3,r21
1000aef8:	20000015 	stw	zero,0(r4)
1000aefc:	21000104 	addi	r4,r4,4
1000af00:	193ffd1e 	bne	r3,r4,1000aef8 <__alt_data_end+0xf800aef8>
1000af04:	8a000417 	ldw	r8,16(r17)
1000af08:	89000504 	addi	r4,r17,20
1000af0c:	a18007cc 	andi	r6,r20,31
1000af10:	4211883a 	add	r8,r8,r8
1000af14:	4211883a 	add	r8,r8,r8
1000af18:	2211883a 	add	r8,r4,r8
1000af1c:	30002326 	beq	r6,zero,1000afac <__lshift+0x128>
1000af20:	02400804 	movi	r9,32
1000af24:	4993c83a 	sub	r9,r9,r6
1000af28:	000b883a 	mov	r5,zero
1000af2c:	21c00017 	ldw	r7,0(r4)
1000af30:	1815883a 	mov	r10,r3
1000af34:	18c00104 	addi	r3,r3,4
1000af38:	398e983a 	sll	r7,r7,r6
1000af3c:	21000104 	addi	r4,r4,4
1000af40:	394ab03a 	or	r5,r7,r5
1000af44:	197fff15 	stw	r5,-4(r3)
1000af48:	217fff17 	ldw	r5,-4(r4)
1000af4c:	2a4ad83a 	srl	r5,r5,r9
1000af50:	223ff636 	bltu	r4,r8,1000af2c <__alt_data_end+0xf800af2c>
1000af54:	51400115 	stw	r5,4(r10)
1000af58:	28001a1e 	bne	r5,zero,1000afc4 <__lshift+0x140>
1000af5c:	843fffc4 	addi	r16,r16,-1
1000af60:	14000415 	stw	r16,16(r2)
1000af64:	88000826 	beq	r17,zero,1000af88 <__lshift+0x104>
1000af68:	89000117 	ldw	r4,4(r17)
1000af6c:	90c01317 	ldw	r3,76(r18)
1000af70:	2109883a 	add	r4,r4,r4
1000af74:	2109883a 	add	r4,r4,r4
1000af78:	1907883a 	add	r3,r3,r4
1000af7c:	19000017 	ldw	r4,0(r3)
1000af80:	89000015 	stw	r4,0(r17)
1000af84:	1c400015 	stw	r17,0(r3)
1000af88:	dfc00617 	ldw	ra,24(sp)
1000af8c:	dd400517 	ldw	r21,20(sp)
1000af90:	dd000417 	ldw	r20,16(sp)
1000af94:	dcc00317 	ldw	r19,12(sp)
1000af98:	dc800217 	ldw	r18,8(sp)
1000af9c:	dc400117 	ldw	r17,4(sp)
1000afa0:	dc000017 	ldw	r16,0(sp)
1000afa4:	dec00704 	addi	sp,sp,28
1000afa8:	f800283a 	ret
1000afac:	21400017 	ldw	r5,0(r4)
1000afb0:	18c00104 	addi	r3,r3,4
1000afb4:	21000104 	addi	r4,r4,4
1000afb8:	197fff15 	stw	r5,-4(r3)
1000afbc:	223ffb36 	bltu	r4,r8,1000afac <__alt_data_end+0xf800afac>
1000afc0:	003fe606 	br	1000af5c <__alt_data_end+0xf800af5c>
1000afc4:	9c000084 	addi	r16,r19,2
1000afc8:	003fe406 	br	1000af5c <__alt_data_end+0xf800af5c>

1000afcc <__mcmp>:
1000afcc:	20800417 	ldw	r2,16(r4)
1000afd0:	28c00417 	ldw	r3,16(r5)
1000afd4:	10c5c83a 	sub	r2,r2,r3
1000afd8:	1000111e 	bne	r2,zero,1000b020 <__mcmp+0x54>
1000afdc:	18c7883a 	add	r3,r3,r3
1000afe0:	18c7883a 	add	r3,r3,r3
1000afe4:	21000504 	addi	r4,r4,20
1000afe8:	29400504 	addi	r5,r5,20
1000afec:	20c5883a 	add	r2,r4,r3
1000aff0:	28cb883a 	add	r5,r5,r3
1000aff4:	00000106 	br	1000affc <__mcmp+0x30>
1000aff8:	20800a2e 	bgeu	r4,r2,1000b024 <__mcmp+0x58>
1000affc:	10bfff04 	addi	r2,r2,-4
1000b000:	297fff04 	addi	r5,r5,-4
1000b004:	11800017 	ldw	r6,0(r2)
1000b008:	28c00017 	ldw	r3,0(r5)
1000b00c:	30fffa26 	beq	r6,r3,1000aff8 <__alt_data_end+0xf800aff8>
1000b010:	30c00236 	bltu	r6,r3,1000b01c <__mcmp+0x50>
1000b014:	00800044 	movi	r2,1
1000b018:	f800283a 	ret
1000b01c:	00bfffc4 	movi	r2,-1
1000b020:	f800283a 	ret
1000b024:	0005883a 	mov	r2,zero
1000b028:	f800283a 	ret

1000b02c <__mdiff>:
1000b02c:	28c00417 	ldw	r3,16(r5)
1000b030:	30800417 	ldw	r2,16(r6)
1000b034:	defffa04 	addi	sp,sp,-24
1000b038:	dcc00315 	stw	r19,12(sp)
1000b03c:	dc800215 	stw	r18,8(sp)
1000b040:	dfc00515 	stw	ra,20(sp)
1000b044:	dd000415 	stw	r20,16(sp)
1000b048:	dc400115 	stw	r17,4(sp)
1000b04c:	dc000015 	stw	r16,0(sp)
1000b050:	1887c83a 	sub	r3,r3,r2
1000b054:	2825883a 	mov	r18,r5
1000b058:	3027883a 	mov	r19,r6
1000b05c:	1800141e 	bne	r3,zero,1000b0b0 <__mdiff+0x84>
1000b060:	1085883a 	add	r2,r2,r2
1000b064:	1085883a 	add	r2,r2,r2
1000b068:	2a000504 	addi	r8,r5,20
1000b06c:	34000504 	addi	r16,r6,20
1000b070:	4087883a 	add	r3,r8,r2
1000b074:	8085883a 	add	r2,r16,r2
1000b078:	00000106 	br	1000b080 <__mdiff+0x54>
1000b07c:	40c0592e 	bgeu	r8,r3,1000b1e4 <__mdiff+0x1b8>
1000b080:	18ffff04 	addi	r3,r3,-4
1000b084:	10bfff04 	addi	r2,r2,-4
1000b088:	19c00017 	ldw	r7,0(r3)
1000b08c:	11400017 	ldw	r5,0(r2)
1000b090:	397ffa26 	beq	r7,r5,1000b07c <__alt_data_end+0xf800b07c>
1000b094:	3940592e 	bgeu	r7,r5,1000b1fc <__mdiff+0x1d0>
1000b098:	9005883a 	mov	r2,r18
1000b09c:	4023883a 	mov	r17,r8
1000b0a0:	9825883a 	mov	r18,r19
1000b0a4:	05000044 	movi	r20,1
1000b0a8:	1027883a 	mov	r19,r2
1000b0ac:	00000406 	br	1000b0c0 <__mdiff+0x94>
1000b0b0:	18005616 	blt	r3,zero,1000b20c <__mdiff+0x1e0>
1000b0b4:	34400504 	addi	r17,r6,20
1000b0b8:	2c000504 	addi	r16,r5,20
1000b0bc:	0029883a 	mov	r20,zero
1000b0c0:	91400117 	ldw	r5,4(r18)
1000b0c4:	000a6480 	call	1000a648 <_Balloc>
1000b0c8:	92400417 	ldw	r9,16(r18)
1000b0cc:	9b000417 	ldw	r12,16(r19)
1000b0d0:	12c00504 	addi	r11,r2,20
1000b0d4:	4a51883a 	add	r8,r9,r9
1000b0d8:	6319883a 	add	r12,r12,r12
1000b0dc:	4211883a 	add	r8,r8,r8
1000b0e0:	6319883a 	add	r12,r12,r12
1000b0e4:	15000315 	stw	r20,12(r2)
1000b0e8:	8211883a 	add	r8,r16,r8
1000b0ec:	8b19883a 	add	r12,r17,r12
1000b0f0:	0007883a 	mov	r3,zero
1000b0f4:	81400017 	ldw	r5,0(r16)
1000b0f8:	89c00017 	ldw	r7,0(r17)
1000b0fc:	59800104 	addi	r6,r11,4
1000b100:	293fffcc 	andi	r4,r5,65535
1000b104:	20c7883a 	add	r3,r4,r3
1000b108:	393fffcc 	andi	r4,r7,65535
1000b10c:	1909c83a 	sub	r4,r3,r4
1000b110:	280ad43a 	srli	r5,r5,16
1000b114:	380ed43a 	srli	r7,r7,16
1000b118:	2007d43a 	srai	r3,r4,16
1000b11c:	213fffcc 	andi	r4,r4,65535
1000b120:	29cbc83a 	sub	r5,r5,r7
1000b124:	28c7883a 	add	r3,r5,r3
1000b128:	180a943a 	slli	r5,r3,16
1000b12c:	8c400104 	addi	r17,r17,4
1000b130:	84000104 	addi	r16,r16,4
1000b134:	2908b03a 	or	r4,r5,r4
1000b138:	59000015 	stw	r4,0(r11)
1000b13c:	1807d43a 	srai	r3,r3,16
1000b140:	3015883a 	mov	r10,r6
1000b144:	3017883a 	mov	r11,r6
1000b148:	8b3fea36 	bltu	r17,r12,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b14c:	8200162e 	bgeu	r16,r8,1000b1a8 <__mdiff+0x17c>
1000b150:	8017883a 	mov	r11,r16
1000b154:	59400017 	ldw	r5,0(r11)
1000b158:	31800104 	addi	r6,r6,4
1000b15c:	5ac00104 	addi	r11,r11,4
1000b160:	293fffcc 	andi	r4,r5,65535
1000b164:	20c7883a 	add	r3,r4,r3
1000b168:	280ed43a 	srli	r7,r5,16
1000b16c:	180bd43a 	srai	r5,r3,16
1000b170:	193fffcc 	andi	r4,r3,65535
1000b174:	3947883a 	add	r3,r7,r5
1000b178:	180a943a 	slli	r5,r3,16
1000b17c:	1807d43a 	srai	r3,r3,16
1000b180:	2908b03a 	or	r4,r5,r4
1000b184:	313fff15 	stw	r4,-4(r6)
1000b188:	5a3ff236 	bltu	r11,r8,1000b154 <__alt_data_end+0xf800b154>
1000b18c:	0406303a 	nor	r3,zero,r16
1000b190:	1a07883a 	add	r3,r3,r8
1000b194:	1806d0ba 	srli	r3,r3,2
1000b198:	18c00044 	addi	r3,r3,1
1000b19c:	18c7883a 	add	r3,r3,r3
1000b1a0:	18c7883a 	add	r3,r3,r3
1000b1a4:	50d5883a 	add	r10,r10,r3
1000b1a8:	50ffff04 	addi	r3,r10,-4
1000b1ac:	2000041e 	bne	r4,zero,1000b1c0 <__mdiff+0x194>
1000b1b0:	18ffff04 	addi	r3,r3,-4
1000b1b4:	19000017 	ldw	r4,0(r3)
1000b1b8:	4a7fffc4 	addi	r9,r9,-1
1000b1bc:	203ffc26 	beq	r4,zero,1000b1b0 <__alt_data_end+0xf800b1b0>
1000b1c0:	12400415 	stw	r9,16(r2)
1000b1c4:	dfc00517 	ldw	ra,20(sp)
1000b1c8:	dd000417 	ldw	r20,16(sp)
1000b1cc:	dcc00317 	ldw	r19,12(sp)
1000b1d0:	dc800217 	ldw	r18,8(sp)
1000b1d4:	dc400117 	ldw	r17,4(sp)
1000b1d8:	dc000017 	ldw	r16,0(sp)
1000b1dc:	dec00604 	addi	sp,sp,24
1000b1e0:	f800283a 	ret
1000b1e4:	000b883a 	mov	r5,zero
1000b1e8:	000a6480 	call	1000a648 <_Balloc>
1000b1ec:	00c00044 	movi	r3,1
1000b1f0:	10c00415 	stw	r3,16(r2)
1000b1f4:	10000515 	stw	zero,20(r2)
1000b1f8:	003ff206 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b1fc:	8023883a 	mov	r17,r16
1000b200:	0029883a 	mov	r20,zero
1000b204:	4021883a 	mov	r16,r8
1000b208:	003fad06 	br	1000b0c0 <__alt_data_end+0xf800b0c0>
1000b20c:	9005883a 	mov	r2,r18
1000b210:	94400504 	addi	r17,r18,20
1000b214:	9c000504 	addi	r16,r19,20
1000b218:	9825883a 	mov	r18,r19
1000b21c:	05000044 	movi	r20,1
1000b220:	1027883a 	mov	r19,r2
1000b224:	003fa606 	br	1000b0c0 <__alt_data_end+0xf800b0c0>

1000b228 <__ulp>:
1000b228:	295ffc2c 	andhi	r5,r5,32752
1000b22c:	00bf3034 	movhi	r2,64704
1000b230:	2887883a 	add	r3,r5,r2
1000b234:	00c0020e 	bge	zero,r3,1000b240 <__ulp+0x18>
1000b238:	0005883a 	mov	r2,zero
1000b23c:	f800283a 	ret
1000b240:	00c7c83a 	sub	r3,zero,r3
1000b244:	1807d53a 	srai	r3,r3,20
1000b248:	008004c4 	movi	r2,19
1000b24c:	10c00b0e 	bge	r2,r3,1000b27c <__ulp+0x54>
1000b250:	18bffb04 	addi	r2,r3,-20
1000b254:	01000784 	movi	r4,30
1000b258:	0007883a 	mov	r3,zero
1000b25c:	20800516 	blt	r4,r2,1000b274 <__ulp+0x4c>
1000b260:	010007c4 	movi	r4,31
1000b264:	2089c83a 	sub	r4,r4,r2
1000b268:	00800044 	movi	r2,1
1000b26c:	1104983a 	sll	r2,r2,r4
1000b270:	f800283a 	ret
1000b274:	00800044 	movi	r2,1
1000b278:	f800283a 	ret
1000b27c:	01400234 	movhi	r5,8
1000b280:	28c7d83a 	sra	r3,r5,r3
1000b284:	0005883a 	mov	r2,zero
1000b288:	f800283a 	ret

1000b28c <__b2d>:
1000b28c:	defffa04 	addi	sp,sp,-24
1000b290:	dc000015 	stw	r16,0(sp)
1000b294:	24000417 	ldw	r16,16(r4)
1000b298:	dc400115 	stw	r17,4(sp)
1000b29c:	24400504 	addi	r17,r4,20
1000b2a0:	8421883a 	add	r16,r16,r16
1000b2a4:	8421883a 	add	r16,r16,r16
1000b2a8:	8c21883a 	add	r16,r17,r16
1000b2ac:	dc800215 	stw	r18,8(sp)
1000b2b0:	84bfff17 	ldw	r18,-4(r16)
1000b2b4:	dd000415 	stw	r20,16(sp)
1000b2b8:	dcc00315 	stw	r19,12(sp)
1000b2bc:	9009883a 	mov	r4,r18
1000b2c0:	2829883a 	mov	r20,r5
1000b2c4:	dfc00515 	stw	ra,20(sp)
1000b2c8:	000a9640 	call	1000a964 <__hi0bits>
1000b2cc:	00c00804 	movi	r3,32
1000b2d0:	1889c83a 	sub	r4,r3,r2
1000b2d4:	a1000015 	stw	r4,0(r20)
1000b2d8:	01000284 	movi	r4,10
1000b2dc:	84ffff04 	addi	r19,r16,-4
1000b2e0:	20801216 	blt	r4,r2,1000b32c <__b2d+0xa0>
1000b2e4:	018002c4 	movi	r6,11
1000b2e8:	308dc83a 	sub	r6,r6,r2
1000b2ec:	9186d83a 	srl	r3,r18,r6
1000b2f0:	18cffc34 	orhi	r3,r3,16368
1000b2f4:	8cc0212e 	bgeu	r17,r19,1000b37c <__b2d+0xf0>
1000b2f8:	813ffe17 	ldw	r4,-8(r16)
1000b2fc:	218cd83a 	srl	r6,r4,r6
1000b300:	10800544 	addi	r2,r2,21
1000b304:	9084983a 	sll	r2,r18,r2
1000b308:	1184b03a 	or	r2,r2,r6
1000b30c:	dfc00517 	ldw	ra,20(sp)
1000b310:	dd000417 	ldw	r20,16(sp)
1000b314:	dcc00317 	ldw	r19,12(sp)
1000b318:	dc800217 	ldw	r18,8(sp)
1000b31c:	dc400117 	ldw	r17,4(sp)
1000b320:	dc000017 	ldw	r16,0(sp)
1000b324:	dec00604 	addi	sp,sp,24
1000b328:	f800283a 	ret
1000b32c:	8cc00f2e 	bgeu	r17,r19,1000b36c <__b2d+0xe0>
1000b330:	117ffd44 	addi	r5,r2,-11
1000b334:	80bffe17 	ldw	r2,-8(r16)
1000b338:	28000e26 	beq	r5,zero,1000b374 <__b2d+0xe8>
1000b33c:	1949c83a 	sub	r4,r3,r5
1000b340:	9164983a 	sll	r18,r18,r5
1000b344:	1106d83a 	srl	r3,r2,r4
1000b348:	81bffe04 	addi	r6,r16,-8
1000b34c:	948ffc34 	orhi	r18,r18,16368
1000b350:	90c6b03a 	or	r3,r18,r3
1000b354:	89800e2e 	bgeu	r17,r6,1000b390 <__b2d+0x104>
1000b358:	81bffd17 	ldw	r6,-12(r16)
1000b35c:	1144983a 	sll	r2,r2,r5
1000b360:	310ad83a 	srl	r5,r6,r4
1000b364:	2884b03a 	or	r2,r5,r2
1000b368:	003fe806 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b36c:	10bffd44 	addi	r2,r2,-11
1000b370:	1000041e 	bne	r2,zero,1000b384 <__b2d+0xf8>
1000b374:	90cffc34 	orhi	r3,r18,16368
1000b378:	003fe406 	br	1000b30c <__alt_data_end+0xf800b30c>
1000b37c:	000d883a 	mov	r6,zero
1000b380:	003fdf06 	br	1000b300 <__alt_data_end+0xf800b300>
1000b384:	90a4983a 	sll	r18,r18,r2
1000b388:	0005883a 	mov	r2,zero
1000b38c:	003ff906 	br	1000b374 <__alt_data_end+0xf800b374>
1000b390:	1144983a 	sll	r2,r2,r5
1000b394:	003fdd06 	br	1000b30c <__alt_data_end+0xf800b30c>

1000b398 <__d2b>:
1000b398:	defff804 	addi	sp,sp,-32
1000b39c:	dc000215 	stw	r16,8(sp)
1000b3a0:	3021883a 	mov	r16,r6
1000b3a4:	dc400315 	stw	r17,12(sp)
1000b3a8:	8022907a 	slli	r17,r16,1
1000b3ac:	dd000615 	stw	r20,24(sp)
1000b3b0:	2829883a 	mov	r20,r5
1000b3b4:	01400044 	movi	r5,1
1000b3b8:	dcc00515 	stw	r19,20(sp)
1000b3bc:	dc800415 	stw	r18,16(sp)
1000b3c0:	dfc00715 	stw	ra,28(sp)
1000b3c4:	3825883a 	mov	r18,r7
1000b3c8:	8822d57a 	srli	r17,r17,21
1000b3cc:	000a6480 	call	1000a648 <_Balloc>
1000b3d0:	1027883a 	mov	r19,r2
1000b3d4:	00800434 	movhi	r2,16
1000b3d8:	10bfffc4 	addi	r2,r2,-1
1000b3dc:	808c703a 	and	r6,r16,r2
1000b3e0:	88000126 	beq	r17,zero,1000b3e8 <__d2b+0x50>
1000b3e4:	31800434 	orhi	r6,r6,16
1000b3e8:	d9800015 	stw	r6,0(sp)
1000b3ec:	a0002426 	beq	r20,zero,1000b480 <__d2b+0xe8>
1000b3f0:	d9000104 	addi	r4,sp,4
1000b3f4:	dd000115 	stw	r20,4(sp)
1000b3f8:	000a9cc0 	call	1000a9cc <__lo0bits>
1000b3fc:	d8c00017 	ldw	r3,0(sp)
1000b400:	10002f1e 	bne	r2,zero,1000b4c0 <__d2b+0x128>
1000b404:	d9000117 	ldw	r4,4(sp)
1000b408:	99000515 	stw	r4,20(r19)
1000b40c:	1821003a 	cmpeq	r16,r3,zero
1000b410:	01000084 	movi	r4,2
1000b414:	2421c83a 	sub	r16,r4,r16
1000b418:	98c00615 	stw	r3,24(r19)
1000b41c:	9c000415 	stw	r16,16(r19)
1000b420:	88001f1e 	bne	r17,zero,1000b4a0 <__d2b+0x108>
1000b424:	10bef384 	addi	r2,r2,-1074
1000b428:	90800015 	stw	r2,0(r18)
1000b42c:	00900034 	movhi	r2,16384
1000b430:	10bfffc4 	addi	r2,r2,-1
1000b434:	8085883a 	add	r2,r16,r2
1000b438:	1085883a 	add	r2,r2,r2
1000b43c:	1085883a 	add	r2,r2,r2
1000b440:	9885883a 	add	r2,r19,r2
1000b444:	11000517 	ldw	r4,20(r2)
1000b448:	8020917a 	slli	r16,r16,5
1000b44c:	000a9640 	call	1000a964 <__hi0bits>
1000b450:	d8c00817 	ldw	r3,32(sp)
1000b454:	8085c83a 	sub	r2,r16,r2
1000b458:	18800015 	stw	r2,0(r3)
1000b45c:	9805883a 	mov	r2,r19
1000b460:	dfc00717 	ldw	ra,28(sp)
1000b464:	dd000617 	ldw	r20,24(sp)
1000b468:	dcc00517 	ldw	r19,20(sp)
1000b46c:	dc800417 	ldw	r18,16(sp)
1000b470:	dc400317 	ldw	r17,12(sp)
1000b474:	dc000217 	ldw	r16,8(sp)
1000b478:	dec00804 	addi	sp,sp,32
1000b47c:	f800283a 	ret
1000b480:	d809883a 	mov	r4,sp
1000b484:	000a9cc0 	call	1000a9cc <__lo0bits>
1000b488:	d8c00017 	ldw	r3,0(sp)
1000b48c:	04000044 	movi	r16,1
1000b490:	9c000415 	stw	r16,16(r19)
1000b494:	98c00515 	stw	r3,20(r19)
1000b498:	10800804 	addi	r2,r2,32
1000b49c:	883fe126 	beq	r17,zero,1000b424 <__alt_data_end+0xf800b424>
1000b4a0:	00c00d44 	movi	r3,53
1000b4a4:	8c7ef344 	addi	r17,r17,-1075
1000b4a8:	88a3883a 	add	r17,r17,r2
1000b4ac:	1885c83a 	sub	r2,r3,r2
1000b4b0:	d8c00817 	ldw	r3,32(sp)
1000b4b4:	94400015 	stw	r17,0(r18)
1000b4b8:	18800015 	stw	r2,0(r3)
1000b4bc:	003fe706 	br	1000b45c <__alt_data_end+0xf800b45c>
1000b4c0:	01000804 	movi	r4,32
1000b4c4:	2089c83a 	sub	r4,r4,r2
1000b4c8:	1908983a 	sll	r4,r3,r4
1000b4cc:	d9400117 	ldw	r5,4(sp)
1000b4d0:	1886d83a 	srl	r3,r3,r2
1000b4d4:	2148b03a 	or	r4,r4,r5
1000b4d8:	99000515 	stw	r4,20(r19)
1000b4dc:	d8c00015 	stw	r3,0(sp)
1000b4e0:	003fca06 	br	1000b40c <__alt_data_end+0xf800b40c>

1000b4e4 <__ratio>:
1000b4e4:	defff904 	addi	sp,sp,-28
1000b4e8:	dc400315 	stw	r17,12(sp)
1000b4ec:	2823883a 	mov	r17,r5
1000b4f0:	d9400104 	addi	r5,sp,4
1000b4f4:	dfc00615 	stw	ra,24(sp)
1000b4f8:	dcc00515 	stw	r19,20(sp)
1000b4fc:	dc800415 	stw	r18,16(sp)
1000b500:	2027883a 	mov	r19,r4
1000b504:	dc000215 	stw	r16,8(sp)
1000b508:	000b28c0 	call	1000b28c <__b2d>
1000b50c:	d80b883a 	mov	r5,sp
1000b510:	8809883a 	mov	r4,r17
1000b514:	1025883a 	mov	r18,r2
1000b518:	1821883a 	mov	r16,r3
1000b51c:	000b28c0 	call	1000b28c <__b2d>
1000b520:	8a000417 	ldw	r8,16(r17)
1000b524:	99000417 	ldw	r4,16(r19)
1000b528:	d9400117 	ldw	r5,4(sp)
1000b52c:	2209c83a 	sub	r4,r4,r8
1000b530:	2010917a 	slli	r8,r4,5
1000b534:	d9000017 	ldw	r4,0(sp)
1000b538:	2909c83a 	sub	r4,r5,r4
1000b53c:	4109883a 	add	r4,r8,r4
1000b540:	01000e0e 	bge	zero,r4,1000b57c <__ratio+0x98>
1000b544:	2008953a 	slli	r4,r4,20
1000b548:	2421883a 	add	r16,r4,r16
1000b54c:	100d883a 	mov	r6,r2
1000b550:	180f883a 	mov	r7,r3
1000b554:	9009883a 	mov	r4,r18
1000b558:	800b883a 	mov	r5,r16
1000b55c:	000f5a80 	call	1000f5a8 <__divdf3>
1000b560:	dfc00617 	ldw	ra,24(sp)
1000b564:	dcc00517 	ldw	r19,20(sp)
1000b568:	dc800417 	ldw	r18,16(sp)
1000b56c:	dc400317 	ldw	r17,12(sp)
1000b570:	dc000217 	ldw	r16,8(sp)
1000b574:	dec00704 	addi	sp,sp,28
1000b578:	f800283a 	ret
1000b57c:	2008953a 	slli	r4,r4,20
1000b580:	1907c83a 	sub	r3,r3,r4
1000b584:	003ff106 	br	1000b54c <__alt_data_end+0xf800b54c>

1000b588 <_mprec_log10>:
1000b588:	defffe04 	addi	sp,sp,-8
1000b58c:	dc000015 	stw	r16,0(sp)
1000b590:	dfc00115 	stw	ra,4(sp)
1000b594:	008005c4 	movi	r2,23
1000b598:	2021883a 	mov	r16,r4
1000b59c:	11000d0e 	bge	r2,r4,1000b5d4 <_mprec_log10+0x4c>
1000b5a0:	0005883a 	mov	r2,zero
1000b5a4:	00cffc34 	movhi	r3,16368
1000b5a8:	843fffc4 	addi	r16,r16,-1
1000b5ac:	000d883a 	mov	r6,zero
1000b5b0:	01d00934 	movhi	r7,16420
1000b5b4:	1009883a 	mov	r4,r2
1000b5b8:	180b883a 	mov	r5,r3
1000b5bc:	00101d00 	call	100101d0 <__muldf3>
1000b5c0:	803ff91e 	bne	r16,zero,1000b5a8 <__alt_data_end+0xf800b5a8>
1000b5c4:	dfc00117 	ldw	ra,4(sp)
1000b5c8:	dc000017 	ldw	r16,0(sp)
1000b5cc:	dec00204 	addi	sp,sp,8
1000b5d0:	f800283a 	ret
1000b5d4:	202090fa 	slli	r16,r4,3
1000b5d8:	00840074 	movhi	r2,4097
1000b5dc:	1091e404 	addi	r2,r2,18320
1000b5e0:	1421883a 	add	r16,r2,r16
1000b5e4:	80800017 	ldw	r2,0(r16)
1000b5e8:	80c00117 	ldw	r3,4(r16)
1000b5ec:	dfc00117 	ldw	ra,4(sp)
1000b5f0:	dc000017 	ldw	r16,0(sp)
1000b5f4:	dec00204 	addi	sp,sp,8
1000b5f8:	f800283a 	ret

1000b5fc <__copybits>:
1000b5fc:	297fffc4 	addi	r5,r5,-1
1000b600:	280fd17a 	srai	r7,r5,5
1000b604:	30c00417 	ldw	r3,16(r6)
1000b608:	30800504 	addi	r2,r6,20
1000b60c:	39c00044 	addi	r7,r7,1
1000b610:	18c7883a 	add	r3,r3,r3
1000b614:	39cf883a 	add	r7,r7,r7
1000b618:	18c7883a 	add	r3,r3,r3
1000b61c:	39cf883a 	add	r7,r7,r7
1000b620:	10c7883a 	add	r3,r2,r3
1000b624:	21cf883a 	add	r7,r4,r7
1000b628:	10c00d2e 	bgeu	r2,r3,1000b660 <__copybits+0x64>
1000b62c:	200b883a 	mov	r5,r4
1000b630:	12000017 	ldw	r8,0(r2)
1000b634:	29400104 	addi	r5,r5,4
1000b638:	10800104 	addi	r2,r2,4
1000b63c:	2a3fff15 	stw	r8,-4(r5)
1000b640:	10fffb36 	bltu	r2,r3,1000b630 <__alt_data_end+0xf800b630>
1000b644:	1985c83a 	sub	r2,r3,r6
1000b648:	10bffac4 	addi	r2,r2,-21
1000b64c:	1004d0ba 	srli	r2,r2,2
1000b650:	10800044 	addi	r2,r2,1
1000b654:	1085883a 	add	r2,r2,r2
1000b658:	1085883a 	add	r2,r2,r2
1000b65c:	2089883a 	add	r4,r4,r2
1000b660:	21c0032e 	bgeu	r4,r7,1000b670 <__copybits+0x74>
1000b664:	20000015 	stw	zero,0(r4)
1000b668:	21000104 	addi	r4,r4,4
1000b66c:	21fffd36 	bltu	r4,r7,1000b664 <__alt_data_end+0xf800b664>
1000b670:	f800283a 	ret

1000b674 <__any_on>:
1000b674:	20c00417 	ldw	r3,16(r4)
1000b678:	2805d17a 	srai	r2,r5,5
1000b67c:	21000504 	addi	r4,r4,20
1000b680:	18800d0e 	bge	r3,r2,1000b6b8 <__any_on+0x44>
1000b684:	18c7883a 	add	r3,r3,r3
1000b688:	18c7883a 	add	r3,r3,r3
1000b68c:	20c7883a 	add	r3,r4,r3
1000b690:	20c0192e 	bgeu	r4,r3,1000b6f8 <__any_on+0x84>
1000b694:	18bfff17 	ldw	r2,-4(r3)
1000b698:	18ffff04 	addi	r3,r3,-4
1000b69c:	1000041e 	bne	r2,zero,1000b6b0 <__any_on+0x3c>
1000b6a0:	20c0142e 	bgeu	r4,r3,1000b6f4 <__any_on+0x80>
1000b6a4:	18ffff04 	addi	r3,r3,-4
1000b6a8:	19400017 	ldw	r5,0(r3)
1000b6ac:	283ffc26 	beq	r5,zero,1000b6a0 <__alt_data_end+0xf800b6a0>
1000b6b0:	00800044 	movi	r2,1
1000b6b4:	f800283a 	ret
1000b6b8:	10c00a0e 	bge	r2,r3,1000b6e4 <__any_on+0x70>
1000b6bc:	1085883a 	add	r2,r2,r2
1000b6c0:	1085883a 	add	r2,r2,r2
1000b6c4:	294007cc 	andi	r5,r5,31
1000b6c8:	2087883a 	add	r3,r4,r2
1000b6cc:	283ff026 	beq	r5,zero,1000b690 <__alt_data_end+0xf800b690>
1000b6d0:	19800017 	ldw	r6,0(r3)
1000b6d4:	3144d83a 	srl	r2,r6,r5
1000b6d8:	114a983a 	sll	r5,r2,r5
1000b6dc:	317ff41e 	bne	r6,r5,1000b6b0 <__alt_data_end+0xf800b6b0>
1000b6e0:	003feb06 	br	1000b690 <__alt_data_end+0xf800b690>
1000b6e4:	1085883a 	add	r2,r2,r2
1000b6e8:	1085883a 	add	r2,r2,r2
1000b6ec:	2087883a 	add	r3,r4,r2
1000b6f0:	003fe706 	br	1000b690 <__alt_data_end+0xf800b690>
1000b6f4:	f800283a 	ret
1000b6f8:	0005883a 	mov	r2,zero
1000b6fc:	f800283a 	ret

1000b700 <_realloc_r>:
1000b700:	defff604 	addi	sp,sp,-40
1000b704:	dc800215 	stw	r18,8(sp)
1000b708:	dfc00915 	stw	ra,36(sp)
1000b70c:	df000815 	stw	fp,32(sp)
1000b710:	ddc00715 	stw	r23,28(sp)
1000b714:	dd800615 	stw	r22,24(sp)
1000b718:	dd400515 	stw	r21,20(sp)
1000b71c:	dd000415 	stw	r20,16(sp)
1000b720:	dcc00315 	stw	r19,12(sp)
1000b724:	dc400115 	stw	r17,4(sp)
1000b728:	dc000015 	stw	r16,0(sp)
1000b72c:	3025883a 	mov	r18,r6
1000b730:	2800b726 	beq	r5,zero,1000ba10 <_realloc_r+0x310>
1000b734:	282b883a 	mov	r21,r5
1000b738:	2029883a 	mov	r20,r4
1000b73c:	0011b3c0 	call	10011b3c <__malloc_lock>
1000b740:	a8bfff17 	ldw	r2,-4(r21)
1000b744:	043fff04 	movi	r16,-4
1000b748:	90c002c4 	addi	r3,r18,11
1000b74c:	01000584 	movi	r4,22
1000b750:	acfffe04 	addi	r19,r21,-8
1000b754:	1420703a 	and	r16,r2,r16
1000b758:	20c0332e 	bgeu	r4,r3,1000b828 <_realloc_r+0x128>
1000b75c:	047ffe04 	movi	r17,-8
1000b760:	1c62703a 	and	r17,r3,r17
1000b764:	8807883a 	mov	r3,r17
1000b768:	88005816 	blt	r17,zero,1000b8cc <_realloc_r+0x1cc>
1000b76c:	8c805736 	bltu	r17,r18,1000b8cc <_realloc_r+0x1cc>
1000b770:	80c0300e 	bge	r16,r3,1000b834 <_realloc_r+0x134>
1000b774:	07040074 	movhi	fp,4097
1000b778:	e7181204 	addi	fp,fp,24648
1000b77c:	e1c00217 	ldw	r7,8(fp)
1000b780:	9c09883a 	add	r4,r19,r16
1000b784:	22000117 	ldw	r8,4(r4)
1000b788:	21c06326 	beq	r4,r7,1000b918 <_realloc_r+0x218>
1000b78c:	017fff84 	movi	r5,-2
1000b790:	414a703a 	and	r5,r8,r5
1000b794:	214b883a 	add	r5,r4,r5
1000b798:	29800117 	ldw	r6,4(r5)
1000b79c:	3180004c 	andi	r6,r6,1
1000b7a0:	30003f26 	beq	r6,zero,1000b8a0 <_realloc_r+0x1a0>
1000b7a4:	1080004c 	andi	r2,r2,1
1000b7a8:	10008326 	beq	r2,zero,1000b9b8 <_realloc_r+0x2b8>
1000b7ac:	900b883a 	mov	r5,r18
1000b7b0:	a009883a 	mov	r4,r20
1000b7b4:	000998c0 	call	1000998c <_malloc_r>
1000b7b8:	1025883a 	mov	r18,r2
1000b7bc:	10011e26 	beq	r2,zero,1000bc38 <_realloc_r+0x538>
1000b7c0:	a93fff17 	ldw	r4,-4(r21)
1000b7c4:	10fffe04 	addi	r3,r2,-8
1000b7c8:	00bfff84 	movi	r2,-2
1000b7cc:	2084703a 	and	r2,r4,r2
1000b7d0:	9885883a 	add	r2,r19,r2
1000b7d4:	1880ee26 	beq	r3,r2,1000bb90 <_realloc_r+0x490>
1000b7d8:	81bfff04 	addi	r6,r16,-4
1000b7dc:	00800904 	movi	r2,36
1000b7e0:	1180b836 	bltu	r2,r6,1000bac4 <_realloc_r+0x3c4>
1000b7e4:	00c004c4 	movi	r3,19
1000b7e8:	19809636 	bltu	r3,r6,1000ba44 <_realloc_r+0x344>
1000b7ec:	9005883a 	mov	r2,r18
1000b7f0:	a807883a 	mov	r3,r21
1000b7f4:	19000017 	ldw	r4,0(r3)
1000b7f8:	11000015 	stw	r4,0(r2)
1000b7fc:	19000117 	ldw	r4,4(r3)
1000b800:	11000115 	stw	r4,4(r2)
1000b804:	18c00217 	ldw	r3,8(r3)
1000b808:	10c00215 	stw	r3,8(r2)
1000b80c:	a80b883a 	mov	r5,r21
1000b810:	a009883a 	mov	r4,r20
1000b814:	0008d940 	call	10008d94 <_free_r>
1000b818:	a009883a 	mov	r4,r20
1000b81c:	0011b600 	call	10011b60 <__malloc_unlock>
1000b820:	9005883a 	mov	r2,r18
1000b824:	00001206 	br	1000b870 <_realloc_r+0x170>
1000b828:	00c00404 	movi	r3,16
1000b82c:	1823883a 	mov	r17,r3
1000b830:	003fce06 	br	1000b76c <__alt_data_end+0xf800b76c>
1000b834:	a825883a 	mov	r18,r21
1000b838:	8445c83a 	sub	r2,r16,r17
1000b83c:	00c003c4 	movi	r3,15
1000b840:	18802636 	bltu	r3,r2,1000b8dc <_realloc_r+0x1dc>
1000b844:	99800117 	ldw	r6,4(r19)
1000b848:	9c07883a 	add	r3,r19,r16
1000b84c:	3180004c 	andi	r6,r6,1
1000b850:	3420b03a 	or	r16,r6,r16
1000b854:	9c000115 	stw	r16,4(r19)
1000b858:	18800117 	ldw	r2,4(r3)
1000b85c:	10800054 	ori	r2,r2,1
1000b860:	18800115 	stw	r2,4(r3)
1000b864:	a009883a 	mov	r4,r20
1000b868:	0011b600 	call	10011b60 <__malloc_unlock>
1000b86c:	9005883a 	mov	r2,r18
1000b870:	dfc00917 	ldw	ra,36(sp)
1000b874:	df000817 	ldw	fp,32(sp)
1000b878:	ddc00717 	ldw	r23,28(sp)
1000b87c:	dd800617 	ldw	r22,24(sp)
1000b880:	dd400517 	ldw	r21,20(sp)
1000b884:	dd000417 	ldw	r20,16(sp)
1000b888:	dcc00317 	ldw	r19,12(sp)
1000b88c:	dc800217 	ldw	r18,8(sp)
1000b890:	dc400117 	ldw	r17,4(sp)
1000b894:	dc000017 	ldw	r16,0(sp)
1000b898:	dec00a04 	addi	sp,sp,40
1000b89c:	f800283a 	ret
1000b8a0:	017fff04 	movi	r5,-4
1000b8a4:	414a703a 	and	r5,r8,r5
1000b8a8:	814d883a 	add	r6,r16,r5
1000b8ac:	30c01f16 	blt	r6,r3,1000b92c <_realloc_r+0x22c>
1000b8b0:	20800317 	ldw	r2,12(r4)
1000b8b4:	20c00217 	ldw	r3,8(r4)
1000b8b8:	a825883a 	mov	r18,r21
1000b8bc:	3021883a 	mov	r16,r6
1000b8c0:	18800315 	stw	r2,12(r3)
1000b8c4:	10c00215 	stw	r3,8(r2)
1000b8c8:	003fdb06 	br	1000b838 <__alt_data_end+0xf800b838>
1000b8cc:	00800304 	movi	r2,12
1000b8d0:	a0800015 	stw	r2,0(r20)
1000b8d4:	0005883a 	mov	r2,zero
1000b8d8:	003fe506 	br	1000b870 <__alt_data_end+0xf800b870>
1000b8dc:	98c00117 	ldw	r3,4(r19)
1000b8e0:	9c4b883a 	add	r5,r19,r17
1000b8e4:	11000054 	ori	r4,r2,1
1000b8e8:	18c0004c 	andi	r3,r3,1
1000b8ec:	1c62b03a 	or	r17,r3,r17
1000b8f0:	9c400115 	stw	r17,4(r19)
1000b8f4:	29000115 	stw	r4,4(r5)
1000b8f8:	2885883a 	add	r2,r5,r2
1000b8fc:	10c00117 	ldw	r3,4(r2)
1000b900:	29400204 	addi	r5,r5,8
1000b904:	a009883a 	mov	r4,r20
1000b908:	18c00054 	ori	r3,r3,1
1000b90c:	10c00115 	stw	r3,4(r2)
1000b910:	0008d940 	call	10008d94 <_free_r>
1000b914:	003fd306 	br	1000b864 <__alt_data_end+0xf800b864>
1000b918:	017fff04 	movi	r5,-4
1000b91c:	414a703a 	and	r5,r8,r5
1000b920:	89800404 	addi	r6,r17,16
1000b924:	8151883a 	add	r8,r16,r5
1000b928:	4180590e 	bge	r8,r6,1000ba90 <_realloc_r+0x390>
1000b92c:	1080004c 	andi	r2,r2,1
1000b930:	103f9e1e 	bne	r2,zero,1000b7ac <__alt_data_end+0xf800b7ac>
1000b934:	adbffe17 	ldw	r22,-8(r21)
1000b938:	00bfff04 	movi	r2,-4
1000b93c:	9dadc83a 	sub	r22,r19,r22
1000b940:	b1800117 	ldw	r6,4(r22)
1000b944:	3084703a 	and	r2,r6,r2
1000b948:	20002026 	beq	r4,zero,1000b9cc <_realloc_r+0x2cc>
1000b94c:	80af883a 	add	r23,r16,r2
1000b950:	b96f883a 	add	r23,r23,r5
1000b954:	21c05f26 	beq	r4,r7,1000bad4 <_realloc_r+0x3d4>
1000b958:	b8c01c16 	blt	r23,r3,1000b9cc <_realloc_r+0x2cc>
1000b95c:	20800317 	ldw	r2,12(r4)
1000b960:	20c00217 	ldw	r3,8(r4)
1000b964:	81bfff04 	addi	r6,r16,-4
1000b968:	01000904 	movi	r4,36
1000b96c:	18800315 	stw	r2,12(r3)
1000b970:	10c00215 	stw	r3,8(r2)
1000b974:	b0c00217 	ldw	r3,8(r22)
1000b978:	b0800317 	ldw	r2,12(r22)
1000b97c:	b4800204 	addi	r18,r22,8
1000b980:	18800315 	stw	r2,12(r3)
1000b984:	10c00215 	stw	r3,8(r2)
1000b988:	21801b36 	bltu	r4,r6,1000b9f8 <_realloc_r+0x2f8>
1000b98c:	008004c4 	movi	r2,19
1000b990:	1180352e 	bgeu	r2,r6,1000ba68 <_realloc_r+0x368>
1000b994:	a8800017 	ldw	r2,0(r21)
1000b998:	b0800215 	stw	r2,8(r22)
1000b99c:	a8800117 	ldw	r2,4(r21)
1000b9a0:	b0800315 	stw	r2,12(r22)
1000b9a4:	008006c4 	movi	r2,27
1000b9a8:	11807f36 	bltu	r2,r6,1000bba8 <_realloc_r+0x4a8>
1000b9ac:	b0800404 	addi	r2,r22,16
1000b9b0:	ad400204 	addi	r21,r21,8
1000b9b4:	00002d06 	br	1000ba6c <_realloc_r+0x36c>
1000b9b8:	adbffe17 	ldw	r22,-8(r21)
1000b9bc:	00bfff04 	movi	r2,-4
1000b9c0:	9dadc83a 	sub	r22,r19,r22
1000b9c4:	b1000117 	ldw	r4,4(r22)
1000b9c8:	2084703a 	and	r2,r4,r2
1000b9cc:	b03f7726 	beq	r22,zero,1000b7ac <__alt_data_end+0xf800b7ac>
1000b9d0:	80af883a 	add	r23,r16,r2
1000b9d4:	b8ff7516 	blt	r23,r3,1000b7ac <__alt_data_end+0xf800b7ac>
1000b9d8:	b0800317 	ldw	r2,12(r22)
1000b9dc:	b0c00217 	ldw	r3,8(r22)
1000b9e0:	81bfff04 	addi	r6,r16,-4
1000b9e4:	01000904 	movi	r4,36
1000b9e8:	18800315 	stw	r2,12(r3)
1000b9ec:	10c00215 	stw	r3,8(r2)
1000b9f0:	b4800204 	addi	r18,r22,8
1000b9f4:	21bfe52e 	bgeu	r4,r6,1000b98c <__alt_data_end+0xf800b98c>
1000b9f8:	a80b883a 	mov	r5,r21
1000b9fc:	9009883a 	mov	r4,r18
1000ba00:	000a3c40 	call	1000a3c4 <memmove>
1000ba04:	b821883a 	mov	r16,r23
1000ba08:	b027883a 	mov	r19,r22
1000ba0c:	003f8a06 	br	1000b838 <__alt_data_end+0xf800b838>
1000ba10:	300b883a 	mov	r5,r6
1000ba14:	dfc00917 	ldw	ra,36(sp)
1000ba18:	df000817 	ldw	fp,32(sp)
1000ba1c:	ddc00717 	ldw	r23,28(sp)
1000ba20:	dd800617 	ldw	r22,24(sp)
1000ba24:	dd400517 	ldw	r21,20(sp)
1000ba28:	dd000417 	ldw	r20,16(sp)
1000ba2c:	dcc00317 	ldw	r19,12(sp)
1000ba30:	dc800217 	ldw	r18,8(sp)
1000ba34:	dc400117 	ldw	r17,4(sp)
1000ba38:	dc000017 	ldw	r16,0(sp)
1000ba3c:	dec00a04 	addi	sp,sp,40
1000ba40:	000998c1 	jmpi	1000998c <_malloc_r>
1000ba44:	a8c00017 	ldw	r3,0(r21)
1000ba48:	90c00015 	stw	r3,0(r18)
1000ba4c:	a8c00117 	ldw	r3,4(r21)
1000ba50:	90c00115 	stw	r3,4(r18)
1000ba54:	00c006c4 	movi	r3,27
1000ba58:	19804536 	bltu	r3,r6,1000bb70 <_realloc_r+0x470>
1000ba5c:	90800204 	addi	r2,r18,8
1000ba60:	a8c00204 	addi	r3,r21,8
1000ba64:	003f6306 	br	1000b7f4 <__alt_data_end+0xf800b7f4>
1000ba68:	9005883a 	mov	r2,r18
1000ba6c:	a8c00017 	ldw	r3,0(r21)
1000ba70:	b821883a 	mov	r16,r23
1000ba74:	b027883a 	mov	r19,r22
1000ba78:	10c00015 	stw	r3,0(r2)
1000ba7c:	a8c00117 	ldw	r3,4(r21)
1000ba80:	10c00115 	stw	r3,4(r2)
1000ba84:	a8c00217 	ldw	r3,8(r21)
1000ba88:	10c00215 	stw	r3,8(r2)
1000ba8c:	003f6a06 	br	1000b838 <__alt_data_end+0xf800b838>
1000ba90:	9c67883a 	add	r19,r19,r17
1000ba94:	4445c83a 	sub	r2,r8,r17
1000ba98:	e4c00215 	stw	r19,8(fp)
1000ba9c:	10800054 	ori	r2,r2,1
1000baa0:	98800115 	stw	r2,4(r19)
1000baa4:	a8bfff17 	ldw	r2,-4(r21)
1000baa8:	a009883a 	mov	r4,r20
1000baac:	1080004c 	andi	r2,r2,1
1000bab0:	1462b03a 	or	r17,r2,r17
1000bab4:	ac7fff15 	stw	r17,-4(r21)
1000bab8:	0011b600 	call	10011b60 <__malloc_unlock>
1000babc:	a805883a 	mov	r2,r21
1000bac0:	003f6b06 	br	1000b870 <__alt_data_end+0xf800b870>
1000bac4:	a80b883a 	mov	r5,r21
1000bac8:	9009883a 	mov	r4,r18
1000bacc:	000a3c40 	call	1000a3c4 <memmove>
1000bad0:	003f4e06 	br	1000b80c <__alt_data_end+0xf800b80c>
1000bad4:	89000404 	addi	r4,r17,16
1000bad8:	b93fbc16 	blt	r23,r4,1000b9cc <__alt_data_end+0xf800b9cc>
1000badc:	b0800317 	ldw	r2,12(r22)
1000bae0:	b0c00217 	ldw	r3,8(r22)
1000bae4:	81bfff04 	addi	r6,r16,-4
1000bae8:	01000904 	movi	r4,36
1000baec:	18800315 	stw	r2,12(r3)
1000baf0:	10c00215 	stw	r3,8(r2)
1000baf4:	b4800204 	addi	r18,r22,8
1000baf8:	21804336 	bltu	r4,r6,1000bc08 <_realloc_r+0x508>
1000bafc:	008004c4 	movi	r2,19
1000bb00:	11803f2e 	bgeu	r2,r6,1000bc00 <_realloc_r+0x500>
1000bb04:	a8800017 	ldw	r2,0(r21)
1000bb08:	b0800215 	stw	r2,8(r22)
1000bb0c:	a8800117 	ldw	r2,4(r21)
1000bb10:	b0800315 	stw	r2,12(r22)
1000bb14:	008006c4 	movi	r2,27
1000bb18:	11803f36 	bltu	r2,r6,1000bc18 <_realloc_r+0x518>
1000bb1c:	b0800404 	addi	r2,r22,16
1000bb20:	ad400204 	addi	r21,r21,8
1000bb24:	a8c00017 	ldw	r3,0(r21)
1000bb28:	10c00015 	stw	r3,0(r2)
1000bb2c:	a8c00117 	ldw	r3,4(r21)
1000bb30:	10c00115 	stw	r3,4(r2)
1000bb34:	a8c00217 	ldw	r3,8(r21)
1000bb38:	10c00215 	stw	r3,8(r2)
1000bb3c:	b447883a 	add	r3,r22,r17
1000bb40:	bc45c83a 	sub	r2,r23,r17
1000bb44:	e0c00215 	stw	r3,8(fp)
1000bb48:	10800054 	ori	r2,r2,1
1000bb4c:	18800115 	stw	r2,4(r3)
1000bb50:	b0800117 	ldw	r2,4(r22)
1000bb54:	a009883a 	mov	r4,r20
1000bb58:	1080004c 	andi	r2,r2,1
1000bb5c:	1462b03a 	or	r17,r2,r17
1000bb60:	b4400115 	stw	r17,4(r22)
1000bb64:	0011b600 	call	10011b60 <__malloc_unlock>
1000bb68:	9005883a 	mov	r2,r18
1000bb6c:	003f4006 	br	1000b870 <__alt_data_end+0xf800b870>
1000bb70:	a8c00217 	ldw	r3,8(r21)
1000bb74:	90c00215 	stw	r3,8(r18)
1000bb78:	a8c00317 	ldw	r3,12(r21)
1000bb7c:	90c00315 	stw	r3,12(r18)
1000bb80:	30801126 	beq	r6,r2,1000bbc8 <_realloc_r+0x4c8>
1000bb84:	90800404 	addi	r2,r18,16
1000bb88:	a8c00404 	addi	r3,r21,16
1000bb8c:	003f1906 	br	1000b7f4 <__alt_data_end+0xf800b7f4>
1000bb90:	90ffff17 	ldw	r3,-4(r18)
1000bb94:	00bfff04 	movi	r2,-4
1000bb98:	a825883a 	mov	r18,r21
1000bb9c:	1884703a 	and	r2,r3,r2
1000bba0:	80a1883a 	add	r16,r16,r2
1000bba4:	003f2406 	br	1000b838 <__alt_data_end+0xf800b838>
1000bba8:	a8800217 	ldw	r2,8(r21)
1000bbac:	b0800415 	stw	r2,16(r22)
1000bbb0:	a8800317 	ldw	r2,12(r21)
1000bbb4:	b0800515 	stw	r2,20(r22)
1000bbb8:	31000a26 	beq	r6,r4,1000bbe4 <_realloc_r+0x4e4>
1000bbbc:	b0800604 	addi	r2,r22,24
1000bbc0:	ad400404 	addi	r21,r21,16
1000bbc4:	003fa906 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bbc8:	a9000417 	ldw	r4,16(r21)
1000bbcc:	90800604 	addi	r2,r18,24
1000bbd0:	a8c00604 	addi	r3,r21,24
1000bbd4:	91000415 	stw	r4,16(r18)
1000bbd8:	a9000517 	ldw	r4,20(r21)
1000bbdc:	91000515 	stw	r4,20(r18)
1000bbe0:	003f0406 	br	1000b7f4 <__alt_data_end+0xf800b7f4>
1000bbe4:	a8c00417 	ldw	r3,16(r21)
1000bbe8:	ad400604 	addi	r21,r21,24
1000bbec:	b0800804 	addi	r2,r22,32
1000bbf0:	b0c00615 	stw	r3,24(r22)
1000bbf4:	a8ffff17 	ldw	r3,-4(r21)
1000bbf8:	b0c00715 	stw	r3,28(r22)
1000bbfc:	003f9b06 	br	1000ba6c <__alt_data_end+0xf800ba6c>
1000bc00:	9005883a 	mov	r2,r18
1000bc04:	003fc706 	br	1000bb24 <__alt_data_end+0xf800bb24>
1000bc08:	a80b883a 	mov	r5,r21
1000bc0c:	9009883a 	mov	r4,r18
1000bc10:	000a3c40 	call	1000a3c4 <memmove>
1000bc14:	003fc906 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000bc18:	a8800217 	ldw	r2,8(r21)
1000bc1c:	b0800415 	stw	r2,16(r22)
1000bc20:	a8800317 	ldw	r2,12(r21)
1000bc24:	b0800515 	stw	r2,20(r22)
1000bc28:	31000726 	beq	r6,r4,1000bc48 <_realloc_r+0x548>
1000bc2c:	b0800604 	addi	r2,r22,24
1000bc30:	ad400404 	addi	r21,r21,16
1000bc34:	003fbb06 	br	1000bb24 <__alt_data_end+0xf800bb24>
1000bc38:	a009883a 	mov	r4,r20
1000bc3c:	0011b600 	call	10011b60 <__malloc_unlock>
1000bc40:	0005883a 	mov	r2,zero
1000bc44:	003f0a06 	br	1000b870 <__alt_data_end+0xf800b870>
1000bc48:	a8c00417 	ldw	r3,16(r21)
1000bc4c:	ad400604 	addi	r21,r21,24
1000bc50:	b0800804 	addi	r2,r22,32
1000bc54:	b0c00615 	stw	r3,24(r22)
1000bc58:	a8ffff17 	ldw	r3,-4(r21)
1000bc5c:	b0c00715 	stw	r3,28(r22)
1000bc60:	003fb006 	br	1000bb24 <__alt_data_end+0xf800bb24>

1000bc64 <__fpclassifyd>:
1000bc64:	00a00034 	movhi	r2,32768
1000bc68:	10bfffc4 	addi	r2,r2,-1
1000bc6c:	2884703a 	and	r2,r5,r2
1000bc70:	10000726 	beq	r2,zero,1000bc90 <__fpclassifyd+0x2c>
1000bc74:	00fffc34 	movhi	r3,65520
1000bc78:	019ff834 	movhi	r6,32736
1000bc7c:	28c7883a 	add	r3,r5,r3
1000bc80:	31bfffc4 	addi	r6,r6,-1
1000bc84:	30c00536 	bltu	r6,r3,1000bc9c <__fpclassifyd+0x38>
1000bc88:	00800104 	movi	r2,4
1000bc8c:	f800283a 	ret
1000bc90:	2000021e 	bne	r4,zero,1000bc9c <__fpclassifyd+0x38>
1000bc94:	00800084 	movi	r2,2
1000bc98:	f800283a 	ret
1000bc9c:	00dffc34 	movhi	r3,32752
1000bca0:	019ff834 	movhi	r6,32736
1000bca4:	28cb883a 	add	r5,r5,r3
1000bca8:	31bfffc4 	addi	r6,r6,-1
1000bcac:	317ff62e 	bgeu	r6,r5,1000bc88 <__alt_data_end+0xf800bc88>
1000bcb0:	01400434 	movhi	r5,16
1000bcb4:	297fffc4 	addi	r5,r5,-1
1000bcb8:	28800236 	bltu	r5,r2,1000bcc4 <__fpclassifyd+0x60>
1000bcbc:	008000c4 	movi	r2,3
1000bcc0:	f800283a 	ret
1000bcc4:	10c00226 	beq	r2,r3,1000bcd0 <__fpclassifyd+0x6c>
1000bcc8:	0005883a 	mov	r2,zero
1000bccc:	f800283a 	ret
1000bcd0:	2005003a 	cmpeq	r2,r4,zero
1000bcd4:	f800283a 	ret

1000bcd8 <_sbrk_r>:
1000bcd8:	defffd04 	addi	sp,sp,-12
1000bcdc:	dc000015 	stw	r16,0(sp)
1000bce0:	040400b4 	movhi	r16,4098
1000bce4:	dc400115 	stw	r17,4(sp)
1000bce8:	8428f604 	addi	r16,r16,-23592
1000bcec:	2023883a 	mov	r17,r4
1000bcf0:	2809883a 	mov	r4,r5
1000bcf4:	dfc00215 	stw	ra,8(sp)
1000bcf8:	80000015 	stw	zero,0(r16)
1000bcfc:	0011d480 	call	10011d48 <sbrk>
1000bd00:	00ffffc4 	movi	r3,-1
1000bd04:	10c00526 	beq	r2,r3,1000bd1c <_sbrk_r+0x44>
1000bd08:	dfc00217 	ldw	ra,8(sp)
1000bd0c:	dc400117 	ldw	r17,4(sp)
1000bd10:	dc000017 	ldw	r16,0(sp)
1000bd14:	dec00304 	addi	sp,sp,12
1000bd18:	f800283a 	ret
1000bd1c:	80c00017 	ldw	r3,0(r16)
1000bd20:	183ff926 	beq	r3,zero,1000bd08 <__alt_data_end+0xf800bd08>
1000bd24:	88c00015 	stw	r3,0(r17)
1000bd28:	003ff706 	br	1000bd08 <__alt_data_end+0xf800bd08>

1000bd2c <__sread>:
1000bd2c:	defffe04 	addi	sp,sp,-8
1000bd30:	dc000015 	stw	r16,0(sp)
1000bd34:	2821883a 	mov	r16,r5
1000bd38:	2940038f 	ldh	r5,14(r5)
1000bd3c:	dfc00115 	stw	ra,4(sp)
1000bd40:	000dbe80 	call	1000dbe8 <_read_r>
1000bd44:	10000716 	blt	r2,zero,1000bd64 <__sread+0x38>
1000bd48:	80c01417 	ldw	r3,80(r16)
1000bd4c:	1887883a 	add	r3,r3,r2
1000bd50:	80c01415 	stw	r3,80(r16)
1000bd54:	dfc00117 	ldw	ra,4(sp)
1000bd58:	dc000017 	ldw	r16,0(sp)
1000bd5c:	dec00204 	addi	sp,sp,8
1000bd60:	f800283a 	ret
1000bd64:	80c0030b 	ldhu	r3,12(r16)
1000bd68:	18fbffcc 	andi	r3,r3,61439
1000bd6c:	80c0030d 	sth	r3,12(r16)
1000bd70:	dfc00117 	ldw	ra,4(sp)
1000bd74:	dc000017 	ldw	r16,0(sp)
1000bd78:	dec00204 	addi	sp,sp,8
1000bd7c:	f800283a 	ret

1000bd80 <__seofread>:
1000bd80:	0005883a 	mov	r2,zero
1000bd84:	f800283a 	ret

1000bd88 <__swrite>:
1000bd88:	2880030b 	ldhu	r2,12(r5)
1000bd8c:	defffb04 	addi	sp,sp,-20
1000bd90:	dcc00315 	stw	r19,12(sp)
1000bd94:	dc800215 	stw	r18,8(sp)
1000bd98:	dc400115 	stw	r17,4(sp)
1000bd9c:	dc000015 	stw	r16,0(sp)
1000bda0:	dfc00415 	stw	ra,16(sp)
1000bda4:	10c0400c 	andi	r3,r2,256
1000bda8:	2821883a 	mov	r16,r5
1000bdac:	2023883a 	mov	r17,r4
1000bdb0:	3025883a 	mov	r18,r6
1000bdb4:	3827883a 	mov	r19,r7
1000bdb8:	18000526 	beq	r3,zero,1000bdd0 <__swrite+0x48>
1000bdbc:	2940038f 	ldh	r5,14(r5)
1000bdc0:	01c00084 	movi	r7,2
1000bdc4:	000d883a 	mov	r6,zero
1000bdc8:	000db880 	call	1000db88 <_lseek_r>
1000bdcc:	8080030b 	ldhu	r2,12(r16)
1000bdd0:	8140038f 	ldh	r5,14(r16)
1000bdd4:	10bbffcc 	andi	r2,r2,61439
1000bdd8:	980f883a 	mov	r7,r19
1000bddc:	900d883a 	mov	r6,r18
1000bde0:	8809883a 	mov	r4,r17
1000bde4:	8080030d 	sth	r2,12(r16)
1000bde8:	dfc00417 	ldw	ra,16(sp)
1000bdec:	dcc00317 	ldw	r19,12(sp)
1000bdf0:	dc800217 	ldw	r18,8(sp)
1000bdf4:	dc400117 	ldw	r17,4(sp)
1000bdf8:	dc000017 	ldw	r16,0(sp)
1000bdfc:	dec00504 	addi	sp,sp,20
1000be00:	000d63c1 	jmpi	1000d63c <_write_r>

1000be04 <__sseek>:
1000be04:	defffe04 	addi	sp,sp,-8
1000be08:	dc000015 	stw	r16,0(sp)
1000be0c:	2821883a 	mov	r16,r5
1000be10:	2940038f 	ldh	r5,14(r5)
1000be14:	dfc00115 	stw	ra,4(sp)
1000be18:	000db880 	call	1000db88 <_lseek_r>
1000be1c:	00ffffc4 	movi	r3,-1
1000be20:	10c00826 	beq	r2,r3,1000be44 <__sseek+0x40>
1000be24:	80c0030b 	ldhu	r3,12(r16)
1000be28:	80801415 	stw	r2,80(r16)
1000be2c:	18c40014 	ori	r3,r3,4096
1000be30:	80c0030d 	sth	r3,12(r16)
1000be34:	dfc00117 	ldw	ra,4(sp)
1000be38:	dc000017 	ldw	r16,0(sp)
1000be3c:	dec00204 	addi	sp,sp,8
1000be40:	f800283a 	ret
1000be44:	80c0030b 	ldhu	r3,12(r16)
1000be48:	18fbffcc 	andi	r3,r3,61439
1000be4c:	80c0030d 	sth	r3,12(r16)
1000be50:	dfc00117 	ldw	ra,4(sp)
1000be54:	dc000017 	ldw	r16,0(sp)
1000be58:	dec00204 	addi	sp,sp,8
1000be5c:	f800283a 	ret

1000be60 <__sclose>:
1000be60:	2940038f 	ldh	r5,14(r5)
1000be64:	000d69c1 	jmpi	1000d69c <_close_r>

1000be68 <strcmp>:
1000be68:	2144b03a 	or	r2,r4,r5
1000be6c:	108000cc 	andi	r2,r2,3
1000be70:	1000171e 	bne	r2,zero,1000bed0 <strcmp+0x68>
1000be74:	20800017 	ldw	r2,0(r4)
1000be78:	28c00017 	ldw	r3,0(r5)
1000be7c:	10c0141e 	bne	r2,r3,1000bed0 <strcmp+0x68>
1000be80:	027fbff4 	movhi	r9,65279
1000be84:	4a7fbfc4 	addi	r9,r9,-257
1000be88:	0086303a 	nor	r3,zero,r2
1000be8c:	02202074 	movhi	r8,32897
1000be90:	1245883a 	add	r2,r2,r9
1000be94:	42202004 	addi	r8,r8,-32640
1000be98:	10c4703a 	and	r2,r2,r3
1000be9c:	1204703a 	and	r2,r2,r8
1000bea0:	10000226 	beq	r2,zero,1000beac <strcmp+0x44>
1000bea4:	00002306 	br	1000bf34 <strcmp+0xcc>
1000bea8:	1000221e 	bne	r2,zero,1000bf34 <strcmp+0xcc>
1000beac:	21000104 	addi	r4,r4,4
1000beb0:	20c00017 	ldw	r3,0(r4)
1000beb4:	29400104 	addi	r5,r5,4
1000beb8:	29800017 	ldw	r6,0(r5)
1000bebc:	1a4f883a 	add	r7,r3,r9
1000bec0:	00c4303a 	nor	r2,zero,r3
1000bec4:	3884703a 	and	r2,r7,r2
1000bec8:	1204703a 	and	r2,r2,r8
1000becc:	19bff626 	beq	r3,r6,1000bea8 <__alt_data_end+0xf800bea8>
1000bed0:	20800003 	ldbu	r2,0(r4)
1000bed4:	10c03fcc 	andi	r3,r2,255
1000bed8:	18c0201c 	xori	r3,r3,128
1000bedc:	18ffe004 	addi	r3,r3,-128
1000bee0:	18000c26 	beq	r3,zero,1000bf14 <strcmp+0xac>
1000bee4:	29800007 	ldb	r6,0(r5)
1000bee8:	19800326 	beq	r3,r6,1000bef8 <strcmp+0x90>
1000beec:	00001306 	br	1000bf3c <strcmp+0xd4>
1000bef0:	29800007 	ldb	r6,0(r5)
1000bef4:	11800b1e 	bne	r2,r6,1000bf24 <strcmp+0xbc>
1000bef8:	21000044 	addi	r4,r4,1
1000befc:	20c00003 	ldbu	r3,0(r4)
1000bf00:	29400044 	addi	r5,r5,1
1000bf04:	18803fcc 	andi	r2,r3,255
1000bf08:	1080201c 	xori	r2,r2,128
1000bf0c:	10bfe004 	addi	r2,r2,-128
1000bf10:	103ff71e 	bne	r2,zero,1000bef0 <__alt_data_end+0xf800bef0>
1000bf14:	0007883a 	mov	r3,zero
1000bf18:	28800003 	ldbu	r2,0(r5)
1000bf1c:	1885c83a 	sub	r2,r3,r2
1000bf20:	f800283a 	ret
1000bf24:	28800003 	ldbu	r2,0(r5)
1000bf28:	18c03fcc 	andi	r3,r3,255
1000bf2c:	1885c83a 	sub	r2,r3,r2
1000bf30:	f800283a 	ret
1000bf34:	0005883a 	mov	r2,zero
1000bf38:	f800283a 	ret
1000bf3c:	10c03fcc 	andi	r3,r2,255
1000bf40:	003ff506 	br	1000bf18 <__alt_data_end+0xf800bf18>

1000bf44 <__sprint_r.part.0>:
1000bf44:	28801917 	ldw	r2,100(r5)
1000bf48:	defff604 	addi	sp,sp,-40
1000bf4c:	dd400515 	stw	r21,20(sp)
1000bf50:	dfc00915 	stw	ra,36(sp)
1000bf54:	df000815 	stw	fp,32(sp)
1000bf58:	ddc00715 	stw	r23,28(sp)
1000bf5c:	dd800615 	stw	r22,24(sp)
1000bf60:	dd000415 	stw	r20,16(sp)
1000bf64:	dcc00315 	stw	r19,12(sp)
1000bf68:	dc800215 	stw	r18,8(sp)
1000bf6c:	dc400115 	stw	r17,4(sp)
1000bf70:	dc000015 	stw	r16,0(sp)
1000bf74:	1088000c 	andi	r2,r2,8192
1000bf78:	302b883a 	mov	r21,r6
1000bf7c:	10002e26 	beq	r2,zero,1000c038 <__sprint_r.part.0+0xf4>
1000bf80:	30800217 	ldw	r2,8(r6)
1000bf84:	35800017 	ldw	r22,0(r6)
1000bf88:	10002926 	beq	r2,zero,1000c030 <__sprint_r.part.0+0xec>
1000bf8c:	2827883a 	mov	r19,r5
1000bf90:	2029883a 	mov	r20,r4
1000bf94:	b5c00104 	addi	r23,r22,4
1000bf98:	04bfffc4 	movi	r18,-1
1000bf9c:	bc400017 	ldw	r17,0(r23)
1000bfa0:	b4000017 	ldw	r16,0(r22)
1000bfa4:	0039883a 	mov	fp,zero
1000bfa8:	8822d0ba 	srli	r17,r17,2
1000bfac:	8800031e 	bne	r17,zero,1000bfbc <__sprint_r.part.0+0x78>
1000bfb0:	00001806 	br	1000c014 <__sprint_r.part.0+0xd0>
1000bfb4:	84000104 	addi	r16,r16,4
1000bfb8:	8f001526 	beq	r17,fp,1000c010 <__sprint_r.part.0+0xcc>
1000bfbc:	81400017 	ldw	r5,0(r16)
1000bfc0:	980d883a 	mov	r6,r19
1000bfc4:	a009883a 	mov	r4,r20
1000bfc8:	000da340 	call	1000da34 <_fputwc_r>
1000bfcc:	e7000044 	addi	fp,fp,1
1000bfd0:	14bff81e 	bne	r2,r18,1000bfb4 <__alt_data_end+0xf800bfb4>
1000bfd4:	9005883a 	mov	r2,r18
1000bfd8:	a8000215 	stw	zero,8(r21)
1000bfdc:	a8000115 	stw	zero,4(r21)
1000bfe0:	dfc00917 	ldw	ra,36(sp)
1000bfe4:	df000817 	ldw	fp,32(sp)
1000bfe8:	ddc00717 	ldw	r23,28(sp)
1000bfec:	dd800617 	ldw	r22,24(sp)
1000bff0:	dd400517 	ldw	r21,20(sp)
1000bff4:	dd000417 	ldw	r20,16(sp)
1000bff8:	dcc00317 	ldw	r19,12(sp)
1000bffc:	dc800217 	ldw	r18,8(sp)
1000c000:	dc400117 	ldw	r17,4(sp)
1000c004:	dc000017 	ldw	r16,0(sp)
1000c008:	dec00a04 	addi	sp,sp,40
1000c00c:	f800283a 	ret
1000c010:	a8800217 	ldw	r2,8(r21)
1000c014:	8c63883a 	add	r17,r17,r17
1000c018:	8c63883a 	add	r17,r17,r17
1000c01c:	1445c83a 	sub	r2,r2,r17
1000c020:	a8800215 	stw	r2,8(r21)
1000c024:	b5800204 	addi	r22,r22,8
1000c028:	bdc00204 	addi	r23,r23,8
1000c02c:	103fdb1e 	bne	r2,zero,1000bf9c <__alt_data_end+0xf800bf9c>
1000c030:	0005883a 	mov	r2,zero
1000c034:	003fe806 	br	1000bfd8 <__alt_data_end+0xf800bfd8>
1000c038:	00090a40 	call	100090a4 <__sfvwrite_r>
1000c03c:	003fe606 	br	1000bfd8 <__alt_data_end+0xf800bfd8>

1000c040 <__sprint_r>:
1000c040:	30c00217 	ldw	r3,8(r6)
1000c044:	18000126 	beq	r3,zero,1000c04c <__sprint_r+0xc>
1000c048:	000bf441 	jmpi	1000bf44 <__sprint_r.part.0>
1000c04c:	30000115 	stw	zero,4(r6)
1000c050:	0005883a 	mov	r2,zero
1000c054:	f800283a 	ret

1000c058 <___vfiprintf_internal_r>:
1000c058:	deffca04 	addi	sp,sp,-216
1000c05c:	dd403115 	stw	r21,196(sp)
1000c060:	dfc03515 	stw	ra,212(sp)
1000c064:	df003415 	stw	fp,208(sp)
1000c068:	ddc03315 	stw	r23,204(sp)
1000c06c:	dd803215 	stw	r22,200(sp)
1000c070:	dd003015 	stw	r20,192(sp)
1000c074:	dcc02f15 	stw	r19,188(sp)
1000c078:	dc802e15 	stw	r18,184(sp)
1000c07c:	dc402d15 	stw	r17,180(sp)
1000c080:	dc002c15 	stw	r16,176(sp)
1000c084:	d9002115 	stw	r4,132(sp)
1000c088:	d9402015 	stw	r5,128(sp)
1000c08c:	d9c02215 	stw	r7,136(sp)
1000c090:	302b883a 	mov	r21,r6
1000c094:	20000226 	beq	r4,zero,1000c0a0 <___vfiprintf_internal_r+0x48>
1000c098:	20800e17 	ldw	r2,56(r4)
1000c09c:	1000cf26 	beq	r2,zero,1000c3dc <___vfiprintf_internal_r+0x384>
1000c0a0:	d8c02017 	ldw	r3,128(sp)
1000c0a4:	1880030b 	ldhu	r2,12(r3)
1000c0a8:	10c8000c 	andi	r3,r2,8192
1000c0ac:	1800071e 	bne	r3,zero,1000c0cc <___vfiprintf_internal_r+0x74>
1000c0b0:	d9402017 	ldw	r5,128(sp)
1000c0b4:	00f7ffc4 	movi	r3,-8193
1000c0b8:	10880014 	ori	r2,r2,8192
1000c0bc:	29001917 	ldw	r4,100(r5)
1000c0c0:	2880030d 	sth	r2,12(r5)
1000c0c4:	20c6703a 	and	r3,r4,r3
1000c0c8:	28c01915 	stw	r3,100(r5)
1000c0cc:	10c0020c 	andi	r3,r2,8
1000c0d0:	1800a526 	beq	r3,zero,1000c368 <___vfiprintf_internal_r+0x310>
1000c0d4:	d9002017 	ldw	r4,128(sp)
1000c0d8:	20c00417 	ldw	r3,16(r4)
1000c0dc:	1800a226 	beq	r3,zero,1000c368 <___vfiprintf_internal_r+0x310>
1000c0e0:	1080068c 	andi	r2,r2,26
1000c0e4:	00c00284 	movi	r3,10
1000c0e8:	10c0a826 	beq	r2,r3,1000c38c <___vfiprintf_internal_r+0x334>
1000c0ec:	d9001a04 	addi	r4,sp,104
1000c0f0:	d94019c4 	addi	r5,sp,103
1000c0f4:	04840074 	movhi	r18,4097
1000c0f8:	2145c83a 	sub	r2,r4,r5
1000c0fc:	94921604 	addi	r18,r18,18520
1000c100:	d9001e15 	stw	r4,120(sp)
1000c104:	d9401f15 	stw	r5,124(sp)
1000c108:	dec01a15 	stw	sp,104(sp)
1000c10c:	d8001c15 	stw	zero,112(sp)
1000c110:	d8001b15 	stw	zero,108(sp)
1000c114:	d811883a 	mov	r8,sp
1000c118:	d8002615 	stw	zero,152(sp)
1000c11c:	d8002415 	stw	zero,144(sp)
1000c120:	d8802815 	stw	r2,160(sp)
1000c124:	a82d883a 	mov	r22,r21
1000c128:	b0800007 	ldb	r2,0(r22)
1000c12c:	10040d26 	beq	r2,zero,1000d164 <___vfiprintf_internal_r+0x110c>
1000c130:	00c00944 	movi	r3,37
1000c134:	b029883a 	mov	r20,r22
1000c138:	10c0021e 	bne	r2,r3,1000c144 <___vfiprintf_internal_r+0xec>
1000c13c:	00001606 	br	1000c198 <___vfiprintf_internal_r+0x140>
1000c140:	10c00326 	beq	r2,r3,1000c150 <___vfiprintf_internal_r+0xf8>
1000c144:	a5000044 	addi	r20,r20,1
1000c148:	a0800007 	ldb	r2,0(r20)
1000c14c:	103ffc1e 	bne	r2,zero,1000c140 <__alt_data_end+0xf800c140>
1000c150:	a5a1c83a 	sub	r16,r20,r22
1000c154:	80001026 	beq	r16,zero,1000c198 <___vfiprintf_internal_r+0x140>
1000c158:	d8c01c17 	ldw	r3,112(sp)
1000c15c:	d8801b17 	ldw	r2,108(sp)
1000c160:	45800015 	stw	r22,0(r8)
1000c164:	80c7883a 	add	r3,r16,r3
1000c168:	10800044 	addi	r2,r2,1
1000c16c:	44000115 	stw	r16,4(r8)
1000c170:	d8c01c15 	stw	r3,112(sp)
1000c174:	d8801b15 	stw	r2,108(sp)
1000c178:	010001c4 	movi	r4,7
1000c17c:	2080750e 	bge	r4,r2,1000c354 <___vfiprintf_internal_r+0x2fc>
1000c180:	1803951e 	bne	r3,zero,1000cfd8 <___vfiprintf_internal_r+0xf80>
1000c184:	d8c02417 	ldw	r3,144(sp)
1000c188:	d8001b15 	stw	zero,108(sp)
1000c18c:	d811883a 	mov	r8,sp
1000c190:	1c07883a 	add	r3,r3,r16
1000c194:	d8c02415 	stw	r3,144(sp)
1000c198:	a0800007 	ldb	r2,0(r20)
1000c19c:	1002e026 	beq	r2,zero,1000cd20 <___vfiprintf_internal_r+0xcc8>
1000c1a0:	a5800044 	addi	r22,r20,1
1000c1a4:	a0c00047 	ldb	r3,1(r20)
1000c1a8:	d8001d85 	stb	zero,118(sp)
1000c1ac:	0027883a 	mov	r19,zero
1000c1b0:	d8002305 	stb	zero,140(sp)
1000c1b4:	043fffc4 	movi	r16,-1
1000c1b8:	d8002515 	stw	zero,148(sp)
1000c1bc:	0023883a 	mov	r17,zero
1000c1c0:	05001604 	movi	r20,88
1000c1c4:	05400244 	movi	r21,9
1000c1c8:	402f883a 	mov	r23,r8
1000c1cc:	b5800044 	addi	r22,r22,1
1000c1d0:	18bff804 	addi	r2,r3,-32
1000c1d4:	a0827736 	bltu	r20,r2,1000cbb4 <___vfiprintf_internal_r+0xb5c>
1000c1d8:	100490ba 	slli	r2,r2,2
1000c1dc:	01040074 	movhi	r4,4097
1000c1e0:	21307c04 	addi	r4,r4,-15888
1000c1e4:	1105883a 	add	r2,r2,r4
1000c1e8:	10800017 	ldw	r2,0(r2)
1000c1ec:	1000683a 	jmp	r2
1000c1f0:	1000c8b4 	orhi	zero,r2,802
1000c1f4:	1000cbb4 	orhi	zero,r2,814
1000c1f8:	1000cbb4 	orhi	zero,r2,814
1000c1fc:	1000c8d0 	cmplti	zero,r2,803
1000c200:	1000cbb4 	orhi	zero,r2,814
1000c204:	1000cbb4 	orhi	zero,r2,814
1000c208:	1000cbb4 	orhi	zero,r2,814
1000c20c:	1000cbb4 	orhi	zero,r2,814
1000c210:	1000cbb4 	orhi	zero,r2,814
1000c214:	1000cbb4 	orhi	zero,r2,814
1000c218:	1000cad8 	cmpnei	zero,r2,811
1000c21c:	1000cafc 	xorhi	zero,r2,811
1000c220:	1000cbb4 	orhi	zero,r2,814
1000c224:	1000c3f4 	orhi	zero,r2,783
1000c228:	1000cb10 	cmplti	zero,r2,812
1000c22c:	1000cbb4 	orhi	zero,r2,814
1000c230:	1000c8dc 	xori	zero,r2,803
1000c234:	1000c8e8 	cmpgeui	zero,r2,803
1000c238:	1000c8e8 	cmpgeui	zero,r2,803
1000c23c:	1000c8e8 	cmpgeui	zero,r2,803
1000c240:	1000c8e8 	cmpgeui	zero,r2,803
1000c244:	1000c8e8 	cmpgeui	zero,r2,803
1000c248:	1000c8e8 	cmpgeui	zero,r2,803
1000c24c:	1000c8e8 	cmpgeui	zero,r2,803
1000c250:	1000c8e8 	cmpgeui	zero,r2,803
1000c254:	1000c8e8 	cmpgeui	zero,r2,803
1000c258:	1000cbb4 	orhi	zero,r2,814
1000c25c:	1000cbb4 	orhi	zero,r2,814
1000c260:	1000cbb4 	orhi	zero,r2,814
1000c264:	1000cbb4 	orhi	zero,r2,814
1000c268:	1000cbb4 	orhi	zero,r2,814
1000c26c:	1000cbb4 	orhi	zero,r2,814
1000c270:	1000cbb4 	orhi	zero,r2,814
1000c274:	1000cbb4 	orhi	zero,r2,814
1000c278:	1000cbb4 	orhi	zero,r2,814
1000c27c:	1000cbb4 	orhi	zero,r2,814
1000c280:	1000c928 	cmpgeui	zero,r2,804
1000c284:	1000cbb4 	orhi	zero,r2,814
1000c288:	1000cbb4 	orhi	zero,r2,814
1000c28c:	1000cbb4 	orhi	zero,r2,814
1000c290:	1000cbb4 	orhi	zero,r2,814
1000c294:	1000cbb4 	orhi	zero,r2,814
1000c298:	1000cbb4 	orhi	zero,r2,814
1000c29c:	1000cbb4 	orhi	zero,r2,814
1000c2a0:	1000cbb4 	orhi	zero,r2,814
1000c2a4:	1000cbb4 	orhi	zero,r2,814
1000c2a8:	1000cbb4 	orhi	zero,r2,814
1000c2ac:	1000c964 	muli	zero,r2,805
1000c2b0:	1000cbb4 	orhi	zero,r2,814
1000c2b4:	1000cbb4 	orhi	zero,r2,814
1000c2b8:	1000cbb4 	orhi	zero,r2,814
1000c2bc:	1000cbb4 	orhi	zero,r2,814
1000c2c0:	1000cbb4 	orhi	zero,r2,814
1000c2c4:	1000c9c0 	call	11000c9c <_gp+0xfe1644>
1000c2c8:	1000cbb4 	orhi	zero,r2,814
1000c2cc:	1000cbb4 	orhi	zero,r2,814
1000c2d0:	1000ca34 	orhi	zero,r2,808
1000c2d4:	1000cbb4 	orhi	zero,r2,814
1000c2d8:	1000cbb4 	orhi	zero,r2,814
1000c2dc:	1000cbb4 	orhi	zero,r2,814
1000c2e0:	1000cbb4 	orhi	zero,r2,814
1000c2e4:	1000cbb4 	orhi	zero,r2,814
1000c2e8:	1000cbb4 	orhi	zero,r2,814
1000c2ec:	1000cbb4 	orhi	zero,r2,814
1000c2f0:	1000cbb4 	orhi	zero,r2,814
1000c2f4:	1000cbb4 	orhi	zero,r2,814
1000c2f8:	1000cbb4 	orhi	zero,r2,814
1000c2fc:	1000c7dc 	xori	zero,r2,799
1000c300:	1000c80c 	andi	zero,r2,800
1000c304:	1000cbb4 	orhi	zero,r2,814
1000c308:	1000cbb4 	orhi	zero,r2,814
1000c30c:	1000cbb4 	orhi	zero,r2,814
1000c310:	1000cb5c 	xori	zero,r2,813
1000c314:	1000c80c 	andi	zero,r2,800
1000c318:	1000cbb4 	orhi	zero,r2,814
1000c31c:	1000cbb4 	orhi	zero,r2,814
1000c320:	1000c6b4 	orhi	zero,r2,794
1000c324:	1000cbb4 	orhi	zero,r2,814
1000c328:	1000c6c8 	cmpgei	zero,r2,795
1000c32c:	1000c700 	call	11000c70 <_gp+0xfe1618>
1000c330:	1000c400 	call	11000c40 <_gp+0xfe15e8>
1000c334:	1000c6a8 	cmpgeui	zero,r2,794
1000c338:	1000cbb4 	orhi	zero,r2,814
1000c33c:	1000ca74 	orhi	zero,r2,809
1000c340:	1000cbb4 	orhi	zero,r2,814
1000c344:	1000cac0 	call	11000cac <_gp+0xfe1654>
1000c348:	1000cbb4 	orhi	zero,r2,814
1000c34c:	1000cbb4 	orhi	zero,r2,814
1000c350:	1000c784 	addi	zero,r2,798
1000c354:	42000204 	addi	r8,r8,8
1000c358:	d8c02417 	ldw	r3,144(sp)
1000c35c:	1c07883a 	add	r3,r3,r16
1000c360:	d8c02415 	stw	r3,144(sp)
1000c364:	003f8c06 	br	1000c198 <__alt_data_end+0xf800c198>
1000c368:	d9402017 	ldw	r5,128(sp)
1000c36c:	d9002117 	ldw	r4,132(sp)
1000c370:	0006c140 	call	10006c14 <__swsetup_r>
1000c374:	1003c11e 	bne	r2,zero,1000d27c <___vfiprintf_internal_r+0x1224>
1000c378:	d9402017 	ldw	r5,128(sp)
1000c37c:	00c00284 	movi	r3,10
1000c380:	2880030b 	ldhu	r2,12(r5)
1000c384:	1080068c 	andi	r2,r2,26
1000c388:	10ff581e 	bne	r2,r3,1000c0ec <__alt_data_end+0xf800c0ec>
1000c38c:	d8c02017 	ldw	r3,128(sp)
1000c390:	1880038f 	ldh	r2,14(r3)
1000c394:	103f5516 	blt	r2,zero,1000c0ec <__alt_data_end+0xf800c0ec>
1000c398:	d9c02217 	ldw	r7,136(sp)
1000c39c:	d9002117 	ldw	r4,132(sp)
1000c3a0:	a80d883a 	mov	r6,r21
1000c3a4:	180b883a 	mov	r5,r3
1000c3a8:	000d5800 	call	1000d580 <__sbprintf>
1000c3ac:	dfc03517 	ldw	ra,212(sp)
1000c3b0:	df003417 	ldw	fp,208(sp)
1000c3b4:	ddc03317 	ldw	r23,204(sp)
1000c3b8:	dd803217 	ldw	r22,200(sp)
1000c3bc:	dd403117 	ldw	r21,196(sp)
1000c3c0:	dd003017 	ldw	r20,192(sp)
1000c3c4:	dcc02f17 	ldw	r19,188(sp)
1000c3c8:	dc802e17 	ldw	r18,184(sp)
1000c3cc:	dc402d17 	ldw	r17,180(sp)
1000c3d0:	dc002c17 	ldw	r16,176(sp)
1000c3d4:	dec03604 	addi	sp,sp,216
1000c3d8:	f800283a 	ret
1000c3dc:	0008c200 	call	10008c20 <__sinit>
1000c3e0:	003f2f06 	br	1000c0a0 <__alt_data_end+0xf800c0a0>
1000c3e4:	d8c02517 	ldw	r3,148(sp)
1000c3e8:	d8802215 	stw	r2,136(sp)
1000c3ec:	00c7c83a 	sub	r3,zero,r3
1000c3f0:	d8c02515 	stw	r3,148(sp)
1000c3f4:	8c400114 	ori	r17,r17,4
1000c3f8:	b0c00007 	ldb	r3,0(r22)
1000c3fc:	003f7306 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000c400:	00800c04 	movi	r2,48
1000c404:	d9402217 	ldw	r5,136(sp)
1000c408:	d8801d05 	stb	r2,116(sp)
1000c40c:	00801e04 	movi	r2,120
1000c410:	d8801d45 	stb	r2,117(sp)
1000c414:	d8001d85 	stb	zero,118(sp)
1000c418:	b811883a 	mov	r8,r23
1000c41c:	28c00104 	addi	r3,r5,4
1000c420:	2cc00017 	ldw	r19,0(r5)
1000c424:	0029883a 	mov	r20,zero
1000c428:	88800094 	ori	r2,r17,2
1000c42c:	80032516 	blt	r16,zero,1000d0c4 <___vfiprintf_internal_r+0x106c>
1000c430:	00bfdfc4 	movi	r2,-129
1000c434:	88a2703a 	and	r17,r17,r2
1000c438:	d8c02215 	stw	r3,136(sp)
1000c43c:	8c400094 	ori	r17,r17,2
1000c440:	98032a1e 	bne	r19,zero,1000d0ec <___vfiprintf_internal_r+0x1094>
1000c444:	00840074 	movhi	r2,4097
1000c448:	1091b504 	addi	r2,r2,18132
1000c44c:	d8802615 	stw	r2,152(sp)
1000c450:	002b883a 	mov	r21,zero
1000c454:	8001741e 	bne	r16,zero,1000ca28 <___vfiprintf_internal_r+0x9d0>
1000c458:	0021883a 	mov	r16,zero
1000c45c:	0029883a 	mov	r20,zero
1000c460:	ddc01a04 	addi	r23,sp,104
1000c464:	8027883a 	mov	r19,r16
1000c468:	8500010e 	bge	r16,r20,1000c470 <___vfiprintf_internal_r+0x418>
1000c46c:	a027883a 	mov	r19,r20
1000c470:	ad403fcc 	andi	r21,r21,255
1000c474:	ad40201c 	xori	r21,r21,128
1000c478:	ad7fe004 	addi	r21,r21,-128
1000c47c:	a8000126 	beq	r21,zero,1000c484 <___vfiprintf_internal_r+0x42c>
1000c480:	9cc00044 	addi	r19,r19,1
1000c484:	89c0008c 	andi	r7,r17,2
1000c488:	38000126 	beq	r7,zero,1000c490 <___vfiprintf_internal_r+0x438>
1000c48c:	9cc00084 	addi	r19,r19,2
1000c490:	88c0210c 	andi	r3,r17,132
1000c494:	1801dd1e 	bne	r3,zero,1000cc0c <___vfiprintf_internal_r+0xbb4>
1000c498:	d9402517 	ldw	r5,148(sp)
1000c49c:	2cebc83a 	sub	r21,r5,r19
1000c4a0:	0541da0e 	bge	zero,r21,1000cc0c <___vfiprintf_internal_r+0xbb4>
1000c4a4:	07000404 	movi	fp,16
1000c4a8:	d8801c17 	ldw	r2,112(sp)
1000c4ac:	e543be0e 	bge	fp,r21,1000d3a8 <___vfiprintf_internal_r+0x1350>
1000c4b0:	01440074 	movhi	r5,4097
1000c4b4:	29521a04 	addi	r5,r5,18536
1000c4b8:	dc002715 	stw	r16,156(sp)
1000c4bc:	d9801b17 	ldw	r6,108(sp)
1000c4c0:	a821883a 	mov	r16,r21
1000c4c4:	d9402315 	stw	r5,140(sp)
1000c4c8:	028001c4 	movi	r10,7
1000c4cc:	d9c02915 	stw	r7,164(sp)
1000c4d0:	182b883a 	mov	r21,r3
1000c4d4:	00000506 	br	1000c4ec <___vfiprintf_internal_r+0x494>
1000c4d8:	31000084 	addi	r4,r6,2
1000c4dc:	42000204 	addi	r8,r8,8
1000c4e0:	180d883a 	mov	r6,r3
1000c4e4:	843ffc04 	addi	r16,r16,-16
1000c4e8:	e4000f0e 	bge	fp,r16,1000c528 <___vfiprintf_internal_r+0x4d0>
1000c4ec:	01040074 	movhi	r4,4097
1000c4f0:	10800404 	addi	r2,r2,16
1000c4f4:	30c00044 	addi	r3,r6,1
1000c4f8:	21121a04 	addi	r4,r4,18536
1000c4fc:	41000015 	stw	r4,0(r8)
1000c500:	47000115 	stw	fp,4(r8)
1000c504:	d8801c15 	stw	r2,112(sp)
1000c508:	d8c01b15 	stw	r3,108(sp)
1000c50c:	50fff20e 	bge	r10,r3,1000c4d8 <__alt_data_end+0xf800c4d8>
1000c510:	1001b21e 	bne	r2,zero,1000cbdc <___vfiprintf_internal_r+0xb84>
1000c514:	843ffc04 	addi	r16,r16,-16
1000c518:	000d883a 	mov	r6,zero
1000c51c:	01000044 	movi	r4,1
1000c520:	d811883a 	mov	r8,sp
1000c524:	e43ff116 	blt	fp,r16,1000c4ec <__alt_data_end+0xf800c4ec>
1000c528:	a807883a 	mov	r3,r21
1000c52c:	d9c02917 	ldw	r7,164(sp)
1000c530:	802b883a 	mov	r21,r16
1000c534:	dc002717 	ldw	r16,156(sp)
1000c538:	d9402317 	ldw	r5,140(sp)
1000c53c:	a885883a 	add	r2,r21,r2
1000c540:	45400115 	stw	r21,4(r8)
1000c544:	41400015 	stw	r5,0(r8)
1000c548:	d8801c15 	stw	r2,112(sp)
1000c54c:	d9001b15 	stw	r4,108(sp)
1000c550:	014001c4 	movi	r5,7
1000c554:	29026216 	blt	r5,r4,1000cee0 <___vfiprintf_internal_r+0xe88>
1000c558:	d9801d87 	ldb	r6,118(sp)
1000c55c:	42000204 	addi	r8,r8,8
1000c560:	21400044 	addi	r5,r4,1
1000c564:	3001ae1e 	bne	r6,zero,1000cc20 <___vfiprintf_internal_r+0xbc8>
1000c568:	3801bb26 	beq	r7,zero,1000cc58 <___vfiprintf_internal_r+0xc00>
1000c56c:	d9001d04 	addi	r4,sp,116
1000c570:	10800084 	addi	r2,r2,2
1000c574:	41000015 	stw	r4,0(r8)
1000c578:	01000084 	movi	r4,2
1000c57c:	41000115 	stw	r4,4(r8)
1000c580:	d8801c15 	stw	r2,112(sp)
1000c584:	d9401b15 	stw	r5,108(sp)
1000c588:	010001c4 	movi	r4,7
1000c58c:	2142680e 	bge	r4,r5,1000cf30 <___vfiprintf_internal_r+0xed8>
1000c590:	1002b11e 	bne	r2,zero,1000d058 <___vfiprintf_internal_r+0x1000>
1000c594:	01802004 	movi	r6,128
1000c598:	01400044 	movi	r5,1
1000c59c:	0009883a 	mov	r4,zero
1000c5a0:	d811883a 	mov	r8,sp
1000c5a4:	1981ae1e 	bne	r3,r6,1000cc60 <___vfiprintf_internal_r+0xc08>
1000c5a8:	d8c02517 	ldw	r3,148(sp)
1000c5ac:	1cf9c83a 	sub	fp,r3,r19
1000c5b0:	0701ab0e 	bge	zero,fp,1000cc60 <___vfiprintf_internal_r+0xc08>
1000c5b4:	05400404 	movi	r21,16
1000c5b8:	af03a90e 	bge	r21,fp,1000d460 <___vfiprintf_internal_r+0x1408>
1000c5bc:	01440074 	movhi	r5,4097
1000c5c0:	29521604 	addi	r5,r5,18520
1000c5c4:	d9402315 	stw	r5,140(sp)
1000c5c8:	01c001c4 	movi	r7,7
1000c5cc:	00000506 	br	1000c5e4 <___vfiprintf_internal_r+0x58c>
1000c5d0:	21800084 	addi	r6,r4,2
1000c5d4:	42000204 	addi	r8,r8,8
1000c5d8:	1809883a 	mov	r4,r3
1000c5dc:	e73ffc04 	addi	fp,fp,-16
1000c5e0:	af000d0e 	bge	r21,fp,1000c618 <___vfiprintf_internal_r+0x5c0>
1000c5e4:	10800404 	addi	r2,r2,16
1000c5e8:	20c00044 	addi	r3,r4,1
1000c5ec:	44800015 	stw	r18,0(r8)
1000c5f0:	45400115 	stw	r21,4(r8)
1000c5f4:	d8801c15 	stw	r2,112(sp)
1000c5f8:	d8c01b15 	stw	r3,108(sp)
1000c5fc:	38fff40e 	bge	r7,r3,1000c5d0 <__alt_data_end+0xf800c5d0>
1000c600:	10022b1e 	bne	r2,zero,1000ceb0 <___vfiprintf_internal_r+0xe58>
1000c604:	e73ffc04 	addi	fp,fp,-16
1000c608:	01800044 	movi	r6,1
1000c60c:	0009883a 	mov	r4,zero
1000c610:	d811883a 	mov	r8,sp
1000c614:	af3ff316 	blt	r21,fp,1000c5e4 <__alt_data_end+0xf800c5e4>
1000c618:	d8c02317 	ldw	r3,140(sp)
1000c61c:	1705883a 	add	r2,r2,fp
1000c620:	47000115 	stw	fp,4(r8)
1000c624:	40c00015 	stw	r3,0(r8)
1000c628:	d8801c15 	stw	r2,112(sp)
1000c62c:	d9801b15 	stw	r6,108(sp)
1000c630:	00c001c4 	movi	r3,7
1000c634:	19829416 	blt	r3,r6,1000d088 <___vfiprintf_internal_r+0x1030>
1000c638:	8521c83a 	sub	r16,r16,r20
1000c63c:	42000204 	addi	r8,r8,8
1000c640:	31400044 	addi	r5,r6,1
1000c644:	3009883a 	mov	r4,r6
1000c648:	04018716 	blt	zero,r16,1000cc68 <___vfiprintf_internal_r+0xc10>
1000c64c:	a085883a 	add	r2,r20,r2
1000c650:	45c00015 	stw	r23,0(r8)
1000c654:	45000115 	stw	r20,4(r8)
1000c658:	d8801c15 	stw	r2,112(sp)
1000c65c:	d9401b15 	stw	r5,108(sp)
1000c660:	00c001c4 	movi	r3,7
1000c664:	1941c20e 	bge	r3,r5,1000cd70 <___vfiprintf_internal_r+0xd18>
1000c668:	1002531e 	bne	r2,zero,1000cfb8 <___vfiprintf_internal_r+0xf60>
1000c66c:	d8001b15 	stw	zero,108(sp)
1000c670:	8c40010c 	andi	r17,r17,4
1000c674:	88023226 	beq	r17,zero,1000cf40 <___vfiprintf_internal_r+0xee8>
1000c678:	d9002517 	ldw	r4,148(sp)
1000c67c:	24e3c83a 	sub	r17,r4,r19
1000c680:	04432916 	blt	zero,r17,1000d328 <___vfiprintf_internal_r+0x12d0>
1000c684:	d8802517 	ldw	r2,148(sp)
1000c688:	14c0010e 	bge	r2,r19,1000c690 <___vfiprintf_internal_r+0x638>
1000c68c:	9805883a 	mov	r2,r19
1000c690:	d8c02417 	ldw	r3,144(sp)
1000c694:	1887883a 	add	r3,r3,r2
1000c698:	d8c02415 	stw	r3,144(sp)
1000c69c:	d8001b15 	stw	zero,108(sp)
1000c6a0:	d811883a 	mov	r8,sp
1000c6a4:	003ea006 	br	1000c128 <__alt_data_end+0xf800c128>
1000c6a8:	8c400814 	ori	r17,r17,32
1000c6ac:	b0c00007 	ldb	r3,0(r22)
1000c6b0:	003ec606 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000c6b4:	b0c00007 	ldb	r3,0(r22)
1000c6b8:	00801b04 	movi	r2,108
1000c6bc:	18832026 	beq	r3,r2,1000d340 <___vfiprintf_internal_r+0x12e8>
1000c6c0:	8c400414 	ori	r17,r17,16
1000c6c4:	003ec106 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000c6c8:	9cc03fcc 	andi	r19,r19,255
1000c6cc:	b811883a 	mov	r8,r23
1000c6d0:	9803981e 	bne	r19,zero,1000d534 <___vfiprintf_internal_r+0x14dc>
1000c6d4:	8880080c 	andi	r2,r17,32
1000c6d8:	1002be26 	beq	r2,zero,1000d1d4 <___vfiprintf_internal_r+0x117c>
1000c6dc:	d9002217 	ldw	r4,136(sp)
1000c6e0:	d9402417 	ldw	r5,144(sp)
1000c6e4:	20800017 	ldw	r2,0(r4)
1000c6e8:	2807d7fa 	srai	r3,r5,31
1000c6ec:	21000104 	addi	r4,r4,4
1000c6f0:	d9002215 	stw	r4,136(sp)
1000c6f4:	11400015 	stw	r5,0(r2)
1000c6f8:	10c00115 	stw	r3,4(r2)
1000c6fc:	003e8a06 	br	1000c128 <__alt_data_end+0xf800c128>
1000c700:	9cc03fcc 	andi	r19,r19,255
1000c704:	b811883a 	mov	r8,r23
1000c708:	9803871e 	bne	r19,zero,1000d528 <___vfiprintf_internal_r+0x14d0>
1000c70c:	8880080c 	andi	r2,r17,32
1000c710:	10009a26 	beq	r2,zero,1000c97c <___vfiprintf_internal_r+0x924>
1000c714:	d9002217 	ldw	r4,136(sp)
1000c718:	d8001d85 	stb	zero,118(sp)
1000c71c:	20800204 	addi	r2,r4,8
1000c720:	24c00017 	ldw	r19,0(r4)
1000c724:	25000117 	ldw	r20,4(r4)
1000c728:	8002a416 	blt	r16,zero,1000d1bc <___vfiprintf_internal_r+0x1164>
1000c72c:	013fdfc4 	movi	r4,-129
1000c730:	9d06b03a 	or	r3,r19,r20
1000c734:	d8802215 	stw	r2,136(sp)
1000c738:	8922703a 	and	r17,r17,r4
1000c73c:	18009b26 	beq	r3,zero,1000c9ac <___vfiprintf_internal_r+0x954>
1000c740:	002b883a 	mov	r21,zero
1000c744:	ddc01a04 	addi	r23,sp,104
1000c748:	9806d0fa 	srli	r3,r19,3
1000c74c:	a008977a 	slli	r4,r20,29
1000c750:	a028d0fa 	srli	r20,r20,3
1000c754:	9cc001cc 	andi	r19,r19,7
1000c758:	98800c04 	addi	r2,r19,48
1000c75c:	bdffffc4 	addi	r23,r23,-1
1000c760:	20e6b03a 	or	r19,r4,r3
1000c764:	b8800005 	stb	r2,0(r23)
1000c768:	9d06b03a 	or	r3,r19,r20
1000c76c:	183ff61e 	bne	r3,zero,1000c748 <__alt_data_end+0xf800c748>
1000c770:	88c0004c 	andi	r3,r17,1
1000c774:	18021f1e 	bne	r3,zero,1000cff4 <___vfiprintf_internal_r+0xf9c>
1000c778:	d9401e17 	ldw	r5,120(sp)
1000c77c:	2de9c83a 	sub	r20,r5,r23
1000c780:	003f3806 	br	1000c464 <__alt_data_end+0xf800c464>
1000c784:	9cc03fcc 	andi	r19,r19,255
1000c788:	b811883a 	mov	r8,r23
1000c78c:	98034f1e 	bne	r19,zero,1000d4cc <___vfiprintf_internal_r+0x1474>
1000c790:	00840074 	movhi	r2,4097
1000c794:	1091b504 	addi	r2,r2,18132
1000c798:	d8802615 	stw	r2,152(sp)
1000c79c:	8880080c 	andi	r2,r17,32
1000c7a0:	1000ac26 	beq	r2,zero,1000ca54 <___vfiprintf_internal_r+0x9fc>
1000c7a4:	d9002217 	ldw	r4,136(sp)
1000c7a8:	24c00017 	ldw	r19,0(r4)
1000c7ac:	25000117 	ldw	r20,4(r4)
1000c7b0:	21000204 	addi	r4,r4,8
1000c7b4:	d9002215 	stw	r4,136(sp)
1000c7b8:	8880004c 	andi	r2,r17,1
1000c7bc:	1001e726 	beq	r2,zero,1000cf5c <___vfiprintf_internal_r+0xf04>
1000c7c0:	9d04b03a 	or	r2,r19,r20
1000c7c4:	10025c1e 	bne	r2,zero,1000d138 <___vfiprintf_internal_r+0x10e0>
1000c7c8:	d8001d85 	stb	zero,118(sp)
1000c7cc:	80024416 	blt	r16,zero,1000d0e0 <___vfiprintf_internal_r+0x1088>
1000c7d0:	00bfdfc4 	movi	r2,-129
1000c7d4:	88a2703a 	and	r17,r17,r2
1000c7d8:	003f1d06 	br	1000c450 <__alt_data_end+0xf800c450>
1000c7dc:	d8c02217 	ldw	r3,136(sp)
1000c7e0:	04c00044 	movi	r19,1
1000c7e4:	b811883a 	mov	r8,r23
1000c7e8:	18800017 	ldw	r2,0(r3)
1000c7ec:	18c00104 	addi	r3,r3,4
1000c7f0:	d8001d85 	stb	zero,118(sp)
1000c7f4:	d8801005 	stb	r2,64(sp)
1000c7f8:	d8c02215 	stw	r3,136(sp)
1000c7fc:	9829883a 	mov	r20,r19
1000c800:	ddc01004 	addi	r23,sp,64
1000c804:	0021883a 	mov	r16,zero
1000c808:	003f1e06 	br	1000c484 <__alt_data_end+0xf800c484>
1000c80c:	9cc03fcc 	andi	r19,r19,255
1000c810:	b811883a 	mov	r8,r23
1000c814:	9803331e 	bne	r19,zero,1000d4e4 <___vfiprintf_internal_r+0x148c>
1000c818:	8880080c 	andi	r2,r17,32
1000c81c:	10004826 	beq	r2,zero,1000c940 <___vfiprintf_internal_r+0x8e8>
1000c820:	d9002217 	ldw	r4,136(sp)
1000c824:	20800117 	ldw	r2,4(r4)
1000c828:	24c00017 	ldw	r19,0(r4)
1000c82c:	21000204 	addi	r4,r4,8
1000c830:	d9002215 	stw	r4,136(sp)
1000c834:	1029883a 	mov	r20,r2
1000c838:	10024c16 	blt	r2,zero,1000d16c <___vfiprintf_internal_r+0x1114>
1000c83c:	dd401d83 	ldbu	r21,118(sp)
1000c840:	80007116 	blt	r16,zero,1000ca08 <___vfiprintf_internal_r+0x9b0>
1000c844:	00ffdfc4 	movi	r3,-129
1000c848:	9d04b03a 	or	r2,r19,r20
1000c84c:	88e2703a 	and	r17,r17,r3
1000c850:	1000d126 	beq	r2,zero,1000cb98 <___vfiprintf_internal_r+0xb40>
1000c854:	a0023526 	beq	r20,zero,1000d12c <___vfiprintf_internal_r+0x10d4>
1000c858:	ddc01a04 	addi	r23,sp,104
1000c85c:	4039883a 	mov	fp,r8
1000c860:	9809883a 	mov	r4,r19
1000c864:	a00b883a 	mov	r5,r20
1000c868:	01800284 	movi	r6,10
1000c86c:	000f883a 	mov	r7,zero
1000c870:	000e5840 	call	1000e584 <__umoddi3>
1000c874:	10800c04 	addi	r2,r2,48
1000c878:	bdffffc4 	addi	r23,r23,-1
1000c87c:	9809883a 	mov	r4,r19
1000c880:	a00b883a 	mov	r5,r20
1000c884:	b8800005 	stb	r2,0(r23)
1000c888:	01800284 	movi	r6,10
1000c88c:	000f883a 	mov	r7,zero
1000c890:	000df880 	call	1000df88 <__udivdi3>
1000c894:	1027883a 	mov	r19,r2
1000c898:	10c4b03a 	or	r2,r2,r3
1000c89c:	1829883a 	mov	r20,r3
1000c8a0:	103fef1e 	bne	r2,zero,1000c860 <__alt_data_end+0xf800c860>
1000c8a4:	d9001e17 	ldw	r4,120(sp)
1000c8a8:	e011883a 	mov	r8,fp
1000c8ac:	25e9c83a 	sub	r20,r4,r23
1000c8b0:	003eec06 	br	1000c464 <__alt_data_end+0xf800c464>
1000c8b4:	d8802307 	ldb	r2,140(sp)
1000c8b8:	1002361e 	bne	r2,zero,1000d194 <___vfiprintf_internal_r+0x113c>
1000c8bc:	00c00804 	movi	r3,32
1000c8c0:	d8c02305 	stb	r3,140(sp)
1000c8c4:	04c00044 	movi	r19,1
1000c8c8:	b0c00007 	ldb	r3,0(r22)
1000c8cc:	003e3f06 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000c8d0:	8c400054 	ori	r17,r17,1
1000c8d4:	b0c00007 	ldb	r3,0(r22)
1000c8d8:	003e3c06 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000c8dc:	8c402014 	ori	r17,r17,128
1000c8e0:	b0c00007 	ldb	r3,0(r22)
1000c8e4:	003e3906 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000c8e8:	dc002715 	stw	r16,156(sp)
1000c8ec:	d8002515 	stw	zero,148(sp)
1000c8f0:	1f3ff404 	addi	fp,r3,-48
1000c8f4:	0009883a 	mov	r4,zero
1000c8f8:	b021883a 	mov	r16,r22
1000c8fc:	01400284 	movi	r5,10
1000c900:	00046600 	call	10004660 <__mulsi3>
1000c904:	80c00007 	ldb	r3,0(r16)
1000c908:	e089883a 	add	r4,fp,r2
1000c90c:	b5800044 	addi	r22,r22,1
1000c910:	1f3ff404 	addi	fp,r3,-48
1000c914:	b021883a 	mov	r16,r22
1000c918:	af3ff82e 	bgeu	r21,fp,1000c8fc <__alt_data_end+0xf800c8fc>
1000c91c:	d9002515 	stw	r4,148(sp)
1000c920:	dc002717 	ldw	r16,156(sp)
1000c924:	003e2a06 	br	1000c1d0 <__alt_data_end+0xf800c1d0>
1000c928:	9cc03fcc 	andi	r19,r19,255
1000c92c:	b811883a 	mov	r8,r23
1000c930:	9802e91e 	bne	r19,zero,1000d4d8 <___vfiprintf_internal_r+0x1480>
1000c934:	8c400414 	ori	r17,r17,16
1000c938:	8880080c 	andi	r2,r17,32
1000c93c:	103fb81e 	bne	r2,zero,1000c820 <__alt_data_end+0xf800c820>
1000c940:	8880040c 	andi	r2,r17,16
1000c944:	10022e26 	beq	r2,zero,1000d200 <___vfiprintf_internal_r+0x11a8>
1000c948:	d9402217 	ldw	r5,136(sp)
1000c94c:	2cc00017 	ldw	r19,0(r5)
1000c950:	29400104 	addi	r5,r5,4
1000c954:	d9402215 	stw	r5,136(sp)
1000c958:	9829d7fa 	srai	r20,r19,31
1000c95c:	a005883a 	mov	r2,r20
1000c960:	003fb506 	br	1000c838 <__alt_data_end+0xf800c838>
1000c964:	9cc03fcc 	andi	r19,r19,255
1000c968:	b811883a 	mov	r8,r23
1000c96c:	9802fa1e 	bne	r19,zero,1000d558 <___vfiprintf_internal_r+0x1500>
1000c970:	8c400414 	ori	r17,r17,16
1000c974:	8880080c 	andi	r2,r17,32
1000c978:	103f661e 	bne	r2,zero,1000c714 <__alt_data_end+0xf800c714>
1000c97c:	8880040c 	andi	r2,r17,16
1000c980:	10020626 	beq	r2,zero,1000d19c <___vfiprintf_internal_r+0x1144>
1000c984:	d9402217 	ldw	r5,136(sp)
1000c988:	d8001d85 	stb	zero,118(sp)
1000c98c:	0029883a 	mov	r20,zero
1000c990:	28800104 	addi	r2,r5,4
1000c994:	2cc00017 	ldw	r19,0(r5)
1000c998:	80020816 	blt	r16,zero,1000d1bc <___vfiprintf_internal_r+0x1164>
1000c99c:	00ffdfc4 	movi	r3,-129
1000c9a0:	d8802215 	stw	r2,136(sp)
1000c9a4:	88e2703a 	and	r17,r17,r3
1000c9a8:	983f651e 	bne	r19,zero,1000c740 <__alt_data_end+0xf800c740>
1000c9ac:	002b883a 	mov	r21,zero
1000c9b0:	8002cf26 	beq	r16,zero,1000d4f0 <___vfiprintf_internal_r+0x1498>
1000c9b4:	0027883a 	mov	r19,zero
1000c9b8:	0029883a 	mov	r20,zero
1000c9bc:	003f6106 	br	1000c744 <__alt_data_end+0xf800c744>
1000c9c0:	9cc03fcc 	andi	r19,r19,255
1000c9c4:	b811883a 	mov	r8,r23
1000c9c8:	9802e01e 	bne	r19,zero,1000d54c <___vfiprintf_internal_r+0x14f4>
1000c9cc:	8c400414 	ori	r17,r17,16
1000c9d0:	8880080c 	andi	r2,r17,32
1000c9d4:	1000641e 	bne	r2,zero,1000cb68 <___vfiprintf_internal_r+0xb10>
1000c9d8:	8880040c 	andi	r2,r17,16
1000c9dc:	1001c81e 	bne	r2,zero,1000d100 <___vfiprintf_internal_r+0x10a8>
1000c9e0:	8880100c 	andi	r2,r17,64
1000c9e4:	d8001d85 	stb	zero,118(sp)
1000c9e8:	1002281e 	bne	r2,zero,1000d28c <___vfiprintf_internal_r+0x1234>
1000c9ec:	d9002217 	ldw	r4,136(sp)
1000c9f0:	0029883a 	mov	r20,zero
1000c9f4:	20800104 	addi	r2,r4,4
1000c9f8:	24c00017 	ldw	r19,0(r4)
1000c9fc:	8001c60e 	bge	r16,zero,1000d118 <___vfiprintf_internal_r+0x10c0>
1000ca00:	d8802215 	stw	r2,136(sp)
1000ca04:	002b883a 	mov	r21,zero
1000ca08:	9d04b03a 	or	r2,r19,r20
1000ca0c:	103f911e 	bne	r2,zero,1000c854 <__alt_data_end+0xf800c854>
1000ca10:	00800044 	movi	r2,1
1000ca14:	10803fcc 	andi	r2,r2,255
1000ca18:	00c00044 	movi	r3,1
1000ca1c:	10c05f26 	beq	r2,r3,1000cb9c <___vfiprintf_internal_r+0xb44>
1000ca20:	00c00084 	movi	r3,2
1000ca24:	10ffe31e 	bne	r2,r3,1000c9b4 <__alt_data_end+0xf800c9b4>
1000ca28:	0027883a 	mov	r19,zero
1000ca2c:	0029883a 	mov	r20,zero
1000ca30:	00015106 	br	1000cf78 <___vfiprintf_internal_r+0xf20>
1000ca34:	9cc03fcc 	andi	r19,r19,255
1000ca38:	b811883a 	mov	r8,r23
1000ca3c:	9802c01e 	bne	r19,zero,1000d540 <___vfiprintf_internal_r+0x14e8>
1000ca40:	01440074 	movhi	r5,4097
1000ca44:	2951b004 	addi	r5,r5,18112
1000ca48:	d9402615 	stw	r5,152(sp)
1000ca4c:	8880080c 	andi	r2,r17,32
1000ca50:	103f541e 	bne	r2,zero,1000c7a4 <__alt_data_end+0xf800c7a4>
1000ca54:	8880040c 	andi	r2,r17,16
1000ca58:	1001f226 	beq	r2,zero,1000d224 <___vfiprintf_internal_r+0x11cc>
1000ca5c:	d9402217 	ldw	r5,136(sp)
1000ca60:	0029883a 	mov	r20,zero
1000ca64:	2cc00017 	ldw	r19,0(r5)
1000ca68:	29400104 	addi	r5,r5,4
1000ca6c:	d9402215 	stw	r5,136(sp)
1000ca70:	003f5106 	br	1000c7b8 <__alt_data_end+0xf800c7b8>
1000ca74:	d8c02217 	ldw	r3,136(sp)
1000ca78:	b811883a 	mov	r8,r23
1000ca7c:	d8001d85 	stb	zero,118(sp)
1000ca80:	1dc00017 	ldw	r23,0(r3)
1000ca84:	1f000104 	addi	fp,r3,4
1000ca88:	b8025926 	beq	r23,zero,1000d3f0 <___vfiprintf_internal_r+0x1398>
1000ca8c:	80023316 	blt	r16,zero,1000d35c <___vfiprintf_internal_r+0x1304>
1000ca90:	800d883a 	mov	r6,r16
1000ca94:	000b883a 	mov	r5,zero
1000ca98:	b809883a 	mov	r4,r23
1000ca9c:	da002a15 	stw	r8,168(sp)
1000caa0:	000a1980 	call	1000a198 <memchr>
1000caa4:	da002a17 	ldw	r8,168(sp)
1000caa8:	10026826 	beq	r2,zero,1000d44c <___vfiprintf_internal_r+0x13f4>
1000caac:	15e9c83a 	sub	r20,r2,r23
1000cab0:	dd401d83 	ldbu	r21,118(sp)
1000cab4:	df002215 	stw	fp,136(sp)
1000cab8:	0021883a 	mov	r16,zero
1000cabc:	003e6906 	br	1000c464 <__alt_data_end+0xf800c464>
1000cac0:	9cc03fcc 	andi	r19,r19,255
1000cac4:	b811883a 	mov	r8,r23
1000cac8:	983fc126 	beq	r19,zero,1000c9d0 <__alt_data_end+0xf800c9d0>
1000cacc:	d8c02303 	ldbu	r3,140(sp)
1000cad0:	d8c01d85 	stb	r3,118(sp)
1000cad4:	003fbe06 	br	1000c9d0 <__alt_data_end+0xf800c9d0>
1000cad8:	d9002217 	ldw	r4,136(sp)
1000cadc:	d9402217 	ldw	r5,136(sp)
1000cae0:	21000017 	ldw	r4,0(r4)
1000cae4:	28800104 	addi	r2,r5,4
1000cae8:	d9002515 	stw	r4,148(sp)
1000caec:	203e3d16 	blt	r4,zero,1000c3e4 <__alt_data_end+0xf800c3e4>
1000caf0:	d8802215 	stw	r2,136(sp)
1000caf4:	b0c00007 	ldb	r3,0(r22)
1000caf8:	003db406 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000cafc:	00c00ac4 	movi	r3,43
1000cb00:	d8c02305 	stb	r3,140(sp)
1000cb04:	04c00044 	movi	r19,1
1000cb08:	b0c00007 	ldb	r3,0(r22)
1000cb0c:	003daf06 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000cb10:	b0c00007 	ldb	r3,0(r22)
1000cb14:	01000a84 	movi	r4,42
1000cb18:	b4000044 	addi	r16,r22,1
1000cb1c:	19025e26 	beq	r3,r4,1000d498 <___vfiprintf_internal_r+0x1440>
1000cb20:	1f3ff404 	addi	fp,r3,-48
1000cb24:	0009883a 	mov	r4,zero
1000cb28:	af025236 	bltu	r21,fp,1000d474 <___vfiprintf_internal_r+0x141c>
1000cb2c:	01400284 	movi	r5,10
1000cb30:	00046600 	call	10004660 <__mulsi3>
1000cb34:	80c00007 	ldb	r3,0(r16)
1000cb38:	1709883a 	add	r4,r2,fp
1000cb3c:	85800044 	addi	r22,r16,1
1000cb40:	1f3ff404 	addi	fp,r3,-48
1000cb44:	b021883a 	mov	r16,r22
1000cb48:	af3ff82e 	bgeu	r21,fp,1000cb2c <__alt_data_end+0xf800cb2c>
1000cb4c:	2021883a 	mov	r16,r4
1000cb50:	203d9f0e 	bge	r4,zero,1000c1d0 <__alt_data_end+0xf800c1d0>
1000cb54:	043fffc4 	movi	r16,-1
1000cb58:	003d9d06 	br	1000c1d0 <__alt_data_end+0xf800c1d0>
1000cb5c:	8c401014 	ori	r17,r17,64
1000cb60:	b0c00007 	ldb	r3,0(r22)
1000cb64:	003d9906 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000cb68:	d9002217 	ldw	r4,136(sp)
1000cb6c:	d8001d85 	stb	zero,118(sp)
1000cb70:	20c00204 	addi	r3,r4,8
1000cb74:	24c00017 	ldw	r19,0(r4)
1000cb78:	25000117 	ldw	r20,4(r4)
1000cb7c:	8001e716 	blt	r16,zero,1000d31c <___vfiprintf_internal_r+0x12c4>
1000cb80:	013fdfc4 	movi	r4,-129
1000cb84:	9d04b03a 	or	r2,r19,r20
1000cb88:	d8c02215 	stw	r3,136(sp)
1000cb8c:	8922703a 	and	r17,r17,r4
1000cb90:	002b883a 	mov	r21,zero
1000cb94:	103f2f1e 	bne	r2,zero,1000c854 <__alt_data_end+0xf800c854>
1000cb98:	803e2f26 	beq	r16,zero,1000c458 <__alt_data_end+0xf800c458>
1000cb9c:	0027883a 	mov	r19,zero
1000cba0:	9cc00c04 	addi	r19,r19,48
1000cba4:	dcc019c5 	stb	r19,103(sp)
1000cba8:	dd002817 	ldw	r20,160(sp)
1000cbac:	ddc019c4 	addi	r23,sp,103
1000cbb0:	003e2c06 	br	1000c464 <__alt_data_end+0xf800c464>
1000cbb4:	9cc03fcc 	andi	r19,r19,255
1000cbb8:	b811883a 	mov	r8,r23
1000cbbc:	9802571e 	bne	r19,zero,1000d51c <___vfiprintf_internal_r+0x14c4>
1000cbc0:	18005726 	beq	r3,zero,1000cd20 <___vfiprintf_internal_r+0xcc8>
1000cbc4:	04c00044 	movi	r19,1
1000cbc8:	d8c01005 	stb	r3,64(sp)
1000cbcc:	d8001d85 	stb	zero,118(sp)
1000cbd0:	9829883a 	mov	r20,r19
1000cbd4:	ddc01004 	addi	r23,sp,64
1000cbd8:	003f0a06 	br	1000c804 <__alt_data_end+0xf800c804>
1000cbdc:	d9402017 	ldw	r5,128(sp)
1000cbe0:	d9002117 	ldw	r4,132(sp)
1000cbe4:	d9801a04 	addi	r6,sp,104
1000cbe8:	da802a15 	stw	r10,168(sp)
1000cbec:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cbf0:	da802a17 	ldw	r10,168(sp)
1000cbf4:	1000501e 	bne	r2,zero,1000cd38 <___vfiprintf_internal_r+0xce0>
1000cbf8:	d9801b17 	ldw	r6,108(sp)
1000cbfc:	d8801c17 	ldw	r2,112(sp)
1000cc00:	d811883a 	mov	r8,sp
1000cc04:	31000044 	addi	r4,r6,1
1000cc08:	003e3606 	br	1000c4e4 <__alt_data_end+0xf800c4e4>
1000cc0c:	d9001b17 	ldw	r4,108(sp)
1000cc10:	d8801c17 	ldw	r2,112(sp)
1000cc14:	21400044 	addi	r5,r4,1
1000cc18:	d9801d87 	ldb	r6,118(sp)
1000cc1c:	303e5226 	beq	r6,zero,1000c568 <__alt_data_end+0xf800c568>
1000cc20:	01800044 	movi	r6,1
1000cc24:	d9001d84 	addi	r4,sp,118
1000cc28:	1185883a 	add	r2,r2,r6
1000cc2c:	41000015 	stw	r4,0(r8)
1000cc30:	41800115 	stw	r6,4(r8)
1000cc34:	d8801c15 	stw	r2,112(sp)
1000cc38:	d9401b15 	stw	r5,108(sp)
1000cc3c:	010001c4 	movi	r4,7
1000cc40:	2140b00e 	bge	r4,r5,1000cf04 <___vfiprintf_internal_r+0xeac>
1000cc44:	1000f61e 	bne	r2,zero,1000d020 <___vfiprintf_internal_r+0xfc8>
1000cc48:	3800b31e 	bne	r7,zero,1000cf18 <___vfiprintf_internal_r+0xec0>
1000cc4c:	0009883a 	mov	r4,zero
1000cc50:	300b883a 	mov	r5,r6
1000cc54:	d811883a 	mov	r8,sp
1000cc58:	01802004 	movi	r6,128
1000cc5c:	19be5226 	beq	r3,r6,1000c5a8 <__alt_data_end+0xf800c5a8>
1000cc60:	8521c83a 	sub	r16,r16,r20
1000cc64:	043e790e 	bge	zero,r16,1000c64c <__alt_data_end+0xf800c64c>
1000cc68:	05400404 	movi	r21,16
1000cc6c:	ac01b00e 	bge	r21,r16,1000d330 <___vfiprintf_internal_r+0x12d8>
1000cc70:	01440074 	movhi	r5,4097
1000cc74:	29521604 	addi	r5,r5,18520
1000cc78:	d9402315 	stw	r5,140(sp)
1000cc7c:	070001c4 	movi	fp,7
1000cc80:	00000506 	br	1000cc98 <___vfiprintf_internal_r+0xc40>
1000cc84:	21400084 	addi	r5,r4,2
1000cc88:	42000204 	addi	r8,r8,8
1000cc8c:	1809883a 	mov	r4,r3
1000cc90:	843ffc04 	addi	r16,r16,-16
1000cc94:	ac000d0e 	bge	r21,r16,1000cccc <___vfiprintf_internal_r+0xc74>
1000cc98:	10800404 	addi	r2,r2,16
1000cc9c:	20c00044 	addi	r3,r4,1
1000cca0:	44800015 	stw	r18,0(r8)
1000cca4:	45400115 	stw	r21,4(r8)
1000cca8:	d8801c15 	stw	r2,112(sp)
1000ccac:	d8c01b15 	stw	r3,108(sp)
1000ccb0:	e0fff40e 	bge	fp,r3,1000cc84 <__alt_data_end+0xf800cc84>
1000ccb4:	1000101e 	bne	r2,zero,1000ccf8 <___vfiprintf_internal_r+0xca0>
1000ccb8:	843ffc04 	addi	r16,r16,-16
1000ccbc:	01400044 	movi	r5,1
1000ccc0:	0009883a 	mov	r4,zero
1000ccc4:	d811883a 	mov	r8,sp
1000ccc8:	ac3ff316 	blt	r21,r16,1000cc98 <__alt_data_end+0xf800cc98>
1000cccc:	d8c02317 	ldw	r3,140(sp)
1000ccd0:	1405883a 	add	r2,r2,r16
1000ccd4:	44000115 	stw	r16,4(r8)
1000ccd8:	40c00015 	stw	r3,0(r8)
1000ccdc:	d8801c15 	stw	r2,112(sp)
1000cce0:	d9401b15 	stw	r5,108(sp)
1000cce4:	00c001c4 	movi	r3,7
1000cce8:	19401916 	blt	r3,r5,1000cd50 <___vfiprintf_internal_r+0xcf8>
1000ccec:	42000204 	addi	r8,r8,8
1000ccf0:	29400044 	addi	r5,r5,1
1000ccf4:	003e5506 	br	1000c64c <__alt_data_end+0xf800c64c>
1000ccf8:	d9402017 	ldw	r5,128(sp)
1000ccfc:	d9002117 	ldw	r4,132(sp)
1000cd00:	d9801a04 	addi	r6,sp,104
1000cd04:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cd08:	10000b1e 	bne	r2,zero,1000cd38 <___vfiprintf_internal_r+0xce0>
1000cd0c:	d9001b17 	ldw	r4,108(sp)
1000cd10:	d8801c17 	ldw	r2,112(sp)
1000cd14:	d811883a 	mov	r8,sp
1000cd18:	21400044 	addi	r5,r4,1
1000cd1c:	003fdc06 	br	1000cc90 <__alt_data_end+0xf800cc90>
1000cd20:	d8801c17 	ldw	r2,112(sp)
1000cd24:	10000426 	beq	r2,zero,1000cd38 <___vfiprintf_internal_r+0xce0>
1000cd28:	d9402017 	ldw	r5,128(sp)
1000cd2c:	d9002117 	ldw	r4,132(sp)
1000cd30:	d9801a04 	addi	r6,sp,104
1000cd34:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cd38:	d9402017 	ldw	r5,128(sp)
1000cd3c:	2880030b 	ldhu	r2,12(r5)
1000cd40:	1080100c 	andi	r2,r2,64
1000cd44:	10014d1e 	bne	r2,zero,1000d27c <___vfiprintf_internal_r+0x1224>
1000cd48:	d8802417 	ldw	r2,144(sp)
1000cd4c:	003d9706 	br	1000c3ac <__alt_data_end+0xf800c3ac>
1000cd50:	1000d21e 	bne	r2,zero,1000d09c <___vfiprintf_internal_r+0x1044>
1000cd54:	00c00044 	movi	r3,1
1000cd58:	a005883a 	mov	r2,r20
1000cd5c:	ddc00015 	stw	r23,0(sp)
1000cd60:	dd000115 	stw	r20,4(sp)
1000cd64:	dd001c15 	stw	r20,112(sp)
1000cd68:	d8c01b15 	stw	r3,108(sp)
1000cd6c:	d811883a 	mov	r8,sp
1000cd70:	42000204 	addi	r8,r8,8
1000cd74:	8c40010c 	andi	r17,r17,4
1000cd78:	88004026 	beq	r17,zero,1000ce7c <___vfiprintf_internal_r+0xe24>
1000cd7c:	d9002517 	ldw	r4,148(sp)
1000cd80:	24e3c83a 	sub	r17,r4,r19
1000cd84:	04403d0e 	bge	zero,r17,1000ce7c <___vfiprintf_internal_r+0xe24>
1000cd88:	04000404 	movi	r16,16
1000cd8c:	8441a90e 	bge	r16,r17,1000d434 <___vfiprintf_internal_r+0x13dc>
1000cd90:	00c40074 	movhi	r3,4097
1000cd94:	18d21a04 	addi	r3,r3,18536
1000cd98:	d9001b17 	ldw	r4,108(sp)
1000cd9c:	d8c02315 	stw	r3,140(sp)
1000cda0:	050001c4 	movi	r20,7
1000cda4:	dd402117 	ldw	r21,132(sp)
1000cda8:	ddc02017 	ldw	r23,128(sp)
1000cdac:	00000506 	br	1000cdc4 <___vfiprintf_internal_r+0xd6c>
1000cdb0:	21400084 	addi	r5,r4,2
1000cdb4:	42000204 	addi	r8,r8,8
1000cdb8:	1809883a 	mov	r4,r3
1000cdbc:	8c7ffc04 	addi	r17,r17,-16
1000cdc0:	84400f0e 	bge	r16,r17,1000ce00 <___vfiprintf_internal_r+0xda8>
1000cdc4:	01440074 	movhi	r5,4097
1000cdc8:	10800404 	addi	r2,r2,16
1000cdcc:	20c00044 	addi	r3,r4,1
1000cdd0:	29521a04 	addi	r5,r5,18536
1000cdd4:	41400015 	stw	r5,0(r8)
1000cdd8:	44000115 	stw	r16,4(r8)
1000cddc:	d8801c15 	stw	r2,112(sp)
1000cde0:	d8c01b15 	stw	r3,108(sp)
1000cde4:	a0fff20e 	bge	r20,r3,1000cdb0 <__alt_data_end+0xf800cdb0>
1000cde8:	1000141e 	bne	r2,zero,1000ce3c <___vfiprintf_internal_r+0xde4>
1000cdec:	8c7ffc04 	addi	r17,r17,-16
1000cdf0:	01400044 	movi	r5,1
1000cdf4:	0009883a 	mov	r4,zero
1000cdf8:	d811883a 	mov	r8,sp
1000cdfc:	847ff116 	blt	r16,r17,1000cdc4 <__alt_data_end+0xf800cdc4>
1000ce00:	d8c02317 	ldw	r3,140(sp)
1000ce04:	1445883a 	add	r2,r2,r17
1000ce08:	44400115 	stw	r17,4(r8)
1000ce0c:	40c00015 	stw	r3,0(r8)
1000ce10:	d8801c15 	stw	r2,112(sp)
1000ce14:	d9401b15 	stw	r5,108(sp)
1000ce18:	00c001c4 	movi	r3,7
1000ce1c:	1940170e 	bge	r3,r5,1000ce7c <___vfiprintf_internal_r+0xe24>
1000ce20:	1000101e 	bne	r2,zero,1000ce64 <___vfiprintf_internal_r+0xe0c>
1000ce24:	d8802517 	ldw	r2,148(sp)
1000ce28:	14c11616 	blt	r2,r19,1000d284 <___vfiprintf_internal_r+0x122c>
1000ce2c:	d9002417 	ldw	r4,144(sp)
1000ce30:	2089883a 	add	r4,r4,r2
1000ce34:	d9002415 	stw	r4,144(sp)
1000ce38:	003e1806 	br	1000c69c <__alt_data_end+0xf800c69c>
1000ce3c:	d9801a04 	addi	r6,sp,104
1000ce40:	b80b883a 	mov	r5,r23
1000ce44:	a809883a 	mov	r4,r21
1000ce48:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000ce4c:	103fba1e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000ce50:	d9001b17 	ldw	r4,108(sp)
1000ce54:	d8801c17 	ldw	r2,112(sp)
1000ce58:	d811883a 	mov	r8,sp
1000ce5c:	21400044 	addi	r5,r4,1
1000ce60:	003fd606 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000ce64:	d9402017 	ldw	r5,128(sp)
1000ce68:	d9002117 	ldw	r4,132(sp)
1000ce6c:	d9801a04 	addi	r6,sp,104
1000ce70:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000ce74:	103fb01e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000ce78:	d8801c17 	ldw	r2,112(sp)
1000ce7c:	d8c02517 	ldw	r3,148(sp)
1000ce80:	1cc0010e 	bge	r3,r19,1000ce88 <___vfiprintf_internal_r+0xe30>
1000ce84:	9807883a 	mov	r3,r19
1000ce88:	d9002417 	ldw	r4,144(sp)
1000ce8c:	20c9883a 	add	r4,r4,r3
1000ce90:	d9002415 	stw	r4,144(sp)
1000ce94:	103e0126 	beq	r2,zero,1000c69c <__alt_data_end+0xf800c69c>
1000ce98:	d9402017 	ldw	r5,128(sp)
1000ce9c:	d9002117 	ldw	r4,132(sp)
1000cea0:	d9801a04 	addi	r6,sp,104
1000cea4:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cea8:	103dfc26 	beq	r2,zero,1000c69c <__alt_data_end+0xf800c69c>
1000ceac:	003fa206 	br	1000cd38 <__alt_data_end+0xf800cd38>
1000ceb0:	d9402017 	ldw	r5,128(sp)
1000ceb4:	d9002117 	ldw	r4,132(sp)
1000ceb8:	d9801a04 	addi	r6,sp,104
1000cebc:	d9c02b15 	stw	r7,172(sp)
1000cec0:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cec4:	d9c02b17 	ldw	r7,172(sp)
1000cec8:	103f9b1e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000cecc:	d9001b17 	ldw	r4,108(sp)
1000ced0:	d8801c17 	ldw	r2,112(sp)
1000ced4:	d811883a 	mov	r8,sp
1000ced8:	21800044 	addi	r6,r4,1
1000cedc:	003dbf06 	br	1000c5dc <__alt_data_end+0xf800c5dc>
1000cee0:	1000d81e 	bne	r2,zero,1000d244 <___vfiprintf_internal_r+0x11ec>
1000cee4:	d9001d87 	ldb	r4,118(sp)
1000cee8:	20000a26 	beq	r4,zero,1000cf14 <___vfiprintf_internal_r+0xebc>
1000ceec:	00800044 	movi	r2,1
1000cef0:	d9001d84 	addi	r4,sp,118
1000cef4:	100b883a 	mov	r5,r2
1000cef8:	d9000015 	stw	r4,0(sp)
1000cefc:	d8800115 	stw	r2,4(sp)
1000cf00:	d811883a 	mov	r8,sp
1000cf04:	2809883a 	mov	r4,r5
1000cf08:	42000204 	addi	r8,r8,8
1000cf0c:	29400044 	addi	r5,r5,1
1000cf10:	003d9506 	br	1000c568 <__alt_data_end+0xf800c568>
1000cf14:	3800fd26 	beq	r7,zero,1000d30c <___vfiprintf_internal_r+0x12b4>
1000cf18:	00800084 	movi	r2,2
1000cf1c:	d9001d04 	addi	r4,sp,116
1000cf20:	d9000015 	stw	r4,0(sp)
1000cf24:	d8800115 	stw	r2,4(sp)
1000cf28:	01400044 	movi	r5,1
1000cf2c:	d811883a 	mov	r8,sp
1000cf30:	2809883a 	mov	r4,r5
1000cf34:	42000204 	addi	r8,r8,8
1000cf38:	29400044 	addi	r5,r5,1
1000cf3c:	003f4606 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000cf40:	d8802517 	ldw	r2,148(sp)
1000cf44:	14c0010e 	bge	r2,r19,1000cf4c <___vfiprintf_internal_r+0xef4>
1000cf48:	9805883a 	mov	r2,r19
1000cf4c:	d9402417 	ldw	r5,144(sp)
1000cf50:	288b883a 	add	r5,r5,r2
1000cf54:	d9402415 	stw	r5,144(sp)
1000cf58:	003dd006 	br	1000c69c <__alt_data_end+0xf800c69c>
1000cf5c:	d8001d85 	stb	zero,118(sp)
1000cf60:	80005d16 	blt	r16,zero,1000d0d8 <___vfiprintf_internal_r+0x1080>
1000cf64:	00ffdfc4 	movi	r3,-129
1000cf68:	9d04b03a 	or	r2,r19,r20
1000cf6c:	88e2703a 	and	r17,r17,r3
1000cf70:	103d3726 	beq	r2,zero,1000c450 <__alt_data_end+0xf800c450>
1000cf74:	002b883a 	mov	r21,zero
1000cf78:	d9002617 	ldw	r4,152(sp)
1000cf7c:	ddc01a04 	addi	r23,sp,104
1000cf80:	988003cc 	andi	r2,r19,15
1000cf84:	a006973a 	slli	r3,r20,28
1000cf88:	2085883a 	add	r2,r4,r2
1000cf8c:	9826d13a 	srli	r19,r19,4
1000cf90:	10800003 	ldbu	r2,0(r2)
1000cf94:	a028d13a 	srli	r20,r20,4
1000cf98:	bdffffc4 	addi	r23,r23,-1
1000cf9c:	1ce6b03a 	or	r19,r3,r19
1000cfa0:	b8800005 	stb	r2,0(r23)
1000cfa4:	9d04b03a 	or	r2,r19,r20
1000cfa8:	103ff51e 	bne	r2,zero,1000cf80 <__alt_data_end+0xf800cf80>
1000cfac:	d8801e17 	ldw	r2,120(sp)
1000cfb0:	15e9c83a 	sub	r20,r2,r23
1000cfb4:	003d2b06 	br	1000c464 <__alt_data_end+0xf800c464>
1000cfb8:	d9402017 	ldw	r5,128(sp)
1000cfbc:	d9002117 	ldw	r4,132(sp)
1000cfc0:	d9801a04 	addi	r6,sp,104
1000cfc4:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cfc8:	103f5b1e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000cfcc:	d8801c17 	ldw	r2,112(sp)
1000cfd0:	d811883a 	mov	r8,sp
1000cfd4:	003f6706 	br	1000cd74 <__alt_data_end+0xf800cd74>
1000cfd8:	d9402017 	ldw	r5,128(sp)
1000cfdc:	d9002117 	ldw	r4,132(sp)
1000cfe0:	d9801a04 	addi	r6,sp,104
1000cfe4:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000cfe8:	103f531e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000cfec:	d811883a 	mov	r8,sp
1000cff0:	003cd906 	br	1000c358 <__alt_data_end+0xf800c358>
1000cff4:	10803fcc 	andi	r2,r2,255
1000cff8:	1080201c 	xori	r2,r2,128
1000cffc:	10bfe004 	addi	r2,r2,-128
1000d000:	00c00c04 	movi	r3,48
1000d004:	10ffe926 	beq	r2,r3,1000cfac <__alt_data_end+0xf800cfac>
1000d008:	b8ffffc5 	stb	r3,-1(r23)
1000d00c:	d8c01e17 	ldw	r3,120(sp)
1000d010:	b8bfffc4 	addi	r2,r23,-1
1000d014:	102f883a 	mov	r23,r2
1000d018:	18a9c83a 	sub	r20,r3,r2
1000d01c:	003d1106 	br	1000c464 <__alt_data_end+0xf800c464>
1000d020:	d9402017 	ldw	r5,128(sp)
1000d024:	d9002117 	ldw	r4,132(sp)
1000d028:	d9801a04 	addi	r6,sp,104
1000d02c:	d8c02a15 	stw	r3,168(sp)
1000d030:	d9c02b15 	stw	r7,172(sp)
1000d034:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000d038:	d8c02a17 	ldw	r3,168(sp)
1000d03c:	d9c02b17 	ldw	r7,172(sp)
1000d040:	103f3d1e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d044:	d9001b17 	ldw	r4,108(sp)
1000d048:	d8801c17 	ldw	r2,112(sp)
1000d04c:	d811883a 	mov	r8,sp
1000d050:	21400044 	addi	r5,r4,1
1000d054:	003d4406 	br	1000c568 <__alt_data_end+0xf800c568>
1000d058:	d9402017 	ldw	r5,128(sp)
1000d05c:	d9002117 	ldw	r4,132(sp)
1000d060:	d9801a04 	addi	r6,sp,104
1000d064:	d8c02a15 	stw	r3,168(sp)
1000d068:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000d06c:	d8c02a17 	ldw	r3,168(sp)
1000d070:	103f311e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d074:	d9001b17 	ldw	r4,108(sp)
1000d078:	d8801c17 	ldw	r2,112(sp)
1000d07c:	d811883a 	mov	r8,sp
1000d080:	21400044 	addi	r5,r4,1
1000d084:	003ef406 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000d088:	1000bd1e 	bne	r2,zero,1000d380 <___vfiprintf_internal_r+0x1328>
1000d08c:	01400044 	movi	r5,1
1000d090:	0009883a 	mov	r4,zero
1000d094:	d811883a 	mov	r8,sp
1000d098:	003ef106 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000d09c:	d9402017 	ldw	r5,128(sp)
1000d0a0:	d9002117 	ldw	r4,132(sp)
1000d0a4:	d9801a04 	addi	r6,sp,104
1000d0a8:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000d0ac:	103f221e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d0b0:	d9401b17 	ldw	r5,108(sp)
1000d0b4:	d8801c17 	ldw	r2,112(sp)
1000d0b8:	d811883a 	mov	r8,sp
1000d0bc:	29400044 	addi	r5,r5,1
1000d0c0:	003d6206 	br	1000c64c <__alt_data_end+0xf800c64c>
1000d0c4:	01440074 	movhi	r5,4097
1000d0c8:	2951b504 	addi	r5,r5,18132
1000d0cc:	d9402615 	stw	r5,152(sp)
1000d0d0:	d8c02215 	stw	r3,136(sp)
1000d0d4:	1023883a 	mov	r17,r2
1000d0d8:	9d04b03a 	or	r2,r19,r20
1000d0dc:	103fa51e 	bne	r2,zero,1000cf74 <__alt_data_end+0xf800cf74>
1000d0e0:	002b883a 	mov	r21,zero
1000d0e4:	00800084 	movi	r2,2
1000d0e8:	003e4a06 	br	1000ca14 <__alt_data_end+0xf800ca14>
1000d0ec:	01440074 	movhi	r5,4097
1000d0f0:	2951b504 	addi	r5,r5,18132
1000d0f4:	002b883a 	mov	r21,zero
1000d0f8:	d9402615 	stw	r5,152(sp)
1000d0fc:	003f9e06 	br	1000cf78 <__alt_data_end+0xf800cf78>
1000d100:	d9402217 	ldw	r5,136(sp)
1000d104:	d8001d85 	stb	zero,118(sp)
1000d108:	0029883a 	mov	r20,zero
1000d10c:	28800104 	addi	r2,r5,4
1000d110:	2cc00017 	ldw	r19,0(r5)
1000d114:	803e3a16 	blt	r16,zero,1000ca00 <__alt_data_end+0xf800ca00>
1000d118:	00ffdfc4 	movi	r3,-129
1000d11c:	d8802215 	stw	r2,136(sp)
1000d120:	88e2703a 	and	r17,r17,r3
1000d124:	002b883a 	mov	r21,zero
1000d128:	983e9b26 	beq	r19,zero,1000cb98 <__alt_data_end+0xf800cb98>
1000d12c:	00800244 	movi	r2,9
1000d130:	14fdc936 	bltu	r2,r19,1000c858 <__alt_data_end+0xf800c858>
1000d134:	003e9a06 	br	1000cba0 <__alt_data_end+0xf800cba0>
1000d138:	00800c04 	movi	r2,48
1000d13c:	d8c01d45 	stb	r3,117(sp)
1000d140:	d8801d05 	stb	r2,116(sp)
1000d144:	d8001d85 	stb	zero,118(sp)
1000d148:	88c00094 	ori	r3,r17,2
1000d14c:	80009c16 	blt	r16,zero,1000d3c0 <___vfiprintf_internal_r+0x1368>
1000d150:	00bfdfc4 	movi	r2,-129
1000d154:	88a2703a 	and	r17,r17,r2
1000d158:	8c400094 	ori	r17,r17,2
1000d15c:	002b883a 	mov	r21,zero
1000d160:	003f8506 	br	1000cf78 <__alt_data_end+0xf800cf78>
1000d164:	b029883a 	mov	r20,r22
1000d168:	003c0b06 	br	1000c198 <__alt_data_end+0xf800c198>
1000d16c:	04e7c83a 	sub	r19,zero,r19
1000d170:	05400b44 	movi	r21,45
1000d174:	9804c03a 	cmpne	r2,r19,zero
1000d178:	0529c83a 	sub	r20,zero,r20
1000d17c:	dd401d85 	stb	r21,118(sp)
1000d180:	a0a9c83a 	sub	r20,r20,r2
1000d184:	80009716 	blt	r16,zero,1000d3e4 <___vfiprintf_internal_r+0x138c>
1000d188:	00bfdfc4 	movi	r2,-129
1000d18c:	88a2703a 	and	r17,r17,r2
1000d190:	003db006 	br	1000c854 <__alt_data_end+0xf800c854>
1000d194:	b0c00007 	ldb	r3,0(r22)
1000d198:	003c0c06 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000d19c:	8880100c 	andi	r2,r17,64
1000d1a0:	d8001d85 	stb	zero,118(sp)
1000d1a4:	1000461e 	bne	r2,zero,1000d2c0 <___vfiprintf_internal_r+0x1268>
1000d1a8:	d9002217 	ldw	r4,136(sp)
1000d1ac:	0029883a 	mov	r20,zero
1000d1b0:	20800104 	addi	r2,r4,4
1000d1b4:	24c00017 	ldw	r19,0(r4)
1000d1b8:	803df80e 	bge	r16,zero,1000c99c <__alt_data_end+0xf800c99c>
1000d1bc:	9d06b03a 	or	r3,r19,r20
1000d1c0:	d8802215 	stw	r2,136(sp)
1000d1c4:	183d5e1e 	bne	r3,zero,1000c740 <__alt_data_end+0xf800c740>
1000d1c8:	002b883a 	mov	r21,zero
1000d1cc:	0005883a 	mov	r2,zero
1000d1d0:	003e1006 	br	1000ca14 <__alt_data_end+0xf800ca14>
1000d1d4:	8880040c 	andi	r2,r17,16
1000d1d8:	1000321e 	bne	r2,zero,1000d2a4 <___vfiprintf_internal_r+0x124c>
1000d1dc:	8c40100c 	andi	r17,r17,64
1000d1e0:	88008d26 	beq	r17,zero,1000d418 <___vfiprintf_internal_r+0x13c0>
1000d1e4:	d9402217 	ldw	r5,136(sp)
1000d1e8:	d8c02417 	ldw	r3,144(sp)
1000d1ec:	28800017 	ldw	r2,0(r5)
1000d1f0:	29400104 	addi	r5,r5,4
1000d1f4:	d9402215 	stw	r5,136(sp)
1000d1f8:	10c0000d 	sth	r3,0(r2)
1000d1fc:	003bca06 	br	1000c128 <__alt_data_end+0xf800c128>
1000d200:	8880100c 	andi	r2,r17,64
1000d204:	10003a26 	beq	r2,zero,1000d2f0 <___vfiprintf_internal_r+0x1298>
1000d208:	d8802217 	ldw	r2,136(sp)
1000d20c:	14c0000f 	ldh	r19,0(r2)
1000d210:	10800104 	addi	r2,r2,4
1000d214:	d8802215 	stw	r2,136(sp)
1000d218:	9829d7fa 	srai	r20,r19,31
1000d21c:	a005883a 	mov	r2,r20
1000d220:	003d8506 	br	1000c838 <__alt_data_end+0xf800c838>
1000d224:	8880100c 	andi	r2,r17,64
1000d228:	10002b26 	beq	r2,zero,1000d2d8 <___vfiprintf_internal_r+0x1280>
1000d22c:	d8802217 	ldw	r2,136(sp)
1000d230:	0029883a 	mov	r20,zero
1000d234:	14c0000b 	ldhu	r19,0(r2)
1000d238:	10800104 	addi	r2,r2,4
1000d23c:	d8802215 	stw	r2,136(sp)
1000d240:	003d5d06 	br	1000c7b8 <__alt_data_end+0xf800c7b8>
1000d244:	d9402017 	ldw	r5,128(sp)
1000d248:	d9002117 	ldw	r4,132(sp)
1000d24c:	d9801a04 	addi	r6,sp,104
1000d250:	d8c02a15 	stw	r3,168(sp)
1000d254:	d9c02b15 	stw	r7,172(sp)
1000d258:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000d25c:	d8c02a17 	ldw	r3,168(sp)
1000d260:	d9c02b17 	ldw	r7,172(sp)
1000d264:	103eb41e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d268:	d9001b17 	ldw	r4,108(sp)
1000d26c:	d8801c17 	ldw	r2,112(sp)
1000d270:	d811883a 	mov	r8,sp
1000d274:	21400044 	addi	r5,r4,1
1000d278:	003e6706 	br	1000cc18 <__alt_data_end+0xf800cc18>
1000d27c:	00bfffc4 	movi	r2,-1
1000d280:	003c4a06 	br	1000c3ac <__alt_data_end+0xf800c3ac>
1000d284:	9805883a 	mov	r2,r19
1000d288:	003ee806 	br	1000ce2c <__alt_data_end+0xf800ce2c>
1000d28c:	d8c02217 	ldw	r3,136(sp)
1000d290:	0029883a 	mov	r20,zero
1000d294:	18800104 	addi	r2,r3,4
1000d298:	1cc0000b 	ldhu	r19,0(r3)
1000d29c:	803f9e0e 	bge	r16,zero,1000d118 <__alt_data_end+0xf800d118>
1000d2a0:	003dd706 	br	1000ca00 <__alt_data_end+0xf800ca00>
1000d2a4:	d8c02217 	ldw	r3,136(sp)
1000d2a8:	d9002417 	ldw	r4,144(sp)
1000d2ac:	18800017 	ldw	r2,0(r3)
1000d2b0:	18c00104 	addi	r3,r3,4
1000d2b4:	d8c02215 	stw	r3,136(sp)
1000d2b8:	11000015 	stw	r4,0(r2)
1000d2bc:	003b9a06 	br	1000c128 <__alt_data_end+0xf800c128>
1000d2c0:	d8c02217 	ldw	r3,136(sp)
1000d2c4:	0029883a 	mov	r20,zero
1000d2c8:	18800104 	addi	r2,r3,4
1000d2cc:	1cc0000b 	ldhu	r19,0(r3)
1000d2d0:	803db20e 	bge	r16,zero,1000c99c <__alt_data_end+0xf800c99c>
1000d2d4:	003fb906 	br	1000d1bc <__alt_data_end+0xf800d1bc>
1000d2d8:	d9002217 	ldw	r4,136(sp)
1000d2dc:	0029883a 	mov	r20,zero
1000d2e0:	24c00017 	ldw	r19,0(r4)
1000d2e4:	21000104 	addi	r4,r4,4
1000d2e8:	d9002215 	stw	r4,136(sp)
1000d2ec:	003d3206 	br	1000c7b8 <__alt_data_end+0xf800c7b8>
1000d2f0:	d8c02217 	ldw	r3,136(sp)
1000d2f4:	1cc00017 	ldw	r19,0(r3)
1000d2f8:	18c00104 	addi	r3,r3,4
1000d2fc:	d8c02215 	stw	r3,136(sp)
1000d300:	9829d7fa 	srai	r20,r19,31
1000d304:	a005883a 	mov	r2,r20
1000d308:	003d4b06 	br	1000c838 <__alt_data_end+0xf800c838>
1000d30c:	0009883a 	mov	r4,zero
1000d310:	01400044 	movi	r5,1
1000d314:	d811883a 	mov	r8,sp
1000d318:	003e4f06 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000d31c:	d8c02215 	stw	r3,136(sp)
1000d320:	002b883a 	mov	r21,zero
1000d324:	003db806 	br	1000ca08 <__alt_data_end+0xf800ca08>
1000d328:	d811883a 	mov	r8,sp
1000d32c:	003e9606 	br	1000cd88 <__alt_data_end+0xf800cd88>
1000d330:	01040074 	movhi	r4,4097
1000d334:	21121604 	addi	r4,r4,18520
1000d338:	d9002315 	stw	r4,140(sp)
1000d33c:	003e6306 	br	1000cccc <__alt_data_end+0xf800cccc>
1000d340:	b0c00043 	ldbu	r3,1(r22)
1000d344:	8c400814 	ori	r17,r17,32
1000d348:	b5800044 	addi	r22,r22,1
1000d34c:	18c03fcc 	andi	r3,r3,255
1000d350:	18c0201c 	xori	r3,r3,128
1000d354:	18ffe004 	addi	r3,r3,-128
1000d358:	003b9c06 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000d35c:	b809883a 	mov	r4,r23
1000d360:	da002a15 	stw	r8,168(sp)
1000d364:	00047c80 	call	100047c8 <strlen>
1000d368:	1029883a 	mov	r20,r2
1000d36c:	dd401d83 	ldbu	r21,118(sp)
1000d370:	df002215 	stw	fp,136(sp)
1000d374:	0021883a 	mov	r16,zero
1000d378:	da002a17 	ldw	r8,168(sp)
1000d37c:	003c3906 	br	1000c464 <__alt_data_end+0xf800c464>
1000d380:	d9402017 	ldw	r5,128(sp)
1000d384:	d9002117 	ldw	r4,132(sp)
1000d388:	d9801a04 	addi	r6,sp,104
1000d38c:	000bf440 	call	1000bf44 <__sprint_r.part.0>
1000d390:	103e691e 	bne	r2,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000d394:	d9001b17 	ldw	r4,108(sp)
1000d398:	d8801c17 	ldw	r2,112(sp)
1000d39c:	d811883a 	mov	r8,sp
1000d3a0:	21400044 	addi	r5,r4,1
1000d3a4:	003e2e06 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000d3a8:	01040074 	movhi	r4,4097
1000d3ac:	21121a04 	addi	r4,r4,18536
1000d3b0:	d9002315 	stw	r4,140(sp)
1000d3b4:	d9001b17 	ldw	r4,108(sp)
1000d3b8:	21000044 	addi	r4,r4,1
1000d3bc:	003c5e06 	br	1000c538 <__alt_data_end+0xf800c538>
1000d3c0:	002b883a 	mov	r21,zero
1000d3c4:	00800084 	movi	r2,2
1000d3c8:	10803fcc 	andi	r2,r2,255
1000d3cc:	01000044 	movi	r4,1
1000d3d0:	11002b26 	beq	r2,r4,1000d480 <___vfiprintf_internal_r+0x1428>
1000d3d4:	01000084 	movi	r4,2
1000d3d8:	11002b1e 	bne	r2,r4,1000d488 <___vfiprintf_internal_r+0x1430>
1000d3dc:	1823883a 	mov	r17,r3
1000d3e0:	003ee506 	br	1000cf78 <__alt_data_end+0xf800cf78>
1000d3e4:	8807883a 	mov	r3,r17
1000d3e8:	00800044 	movi	r2,1
1000d3ec:	003ff606 	br	1000d3c8 <__alt_data_end+0xf800d3c8>
1000d3f0:	00800184 	movi	r2,6
1000d3f4:	1400012e 	bgeu	r2,r16,1000d3fc <___vfiprintf_internal_r+0x13a4>
1000d3f8:	1021883a 	mov	r16,r2
1000d3fc:	8029883a 	mov	r20,r16
1000d400:	8027883a 	mov	r19,r16
1000d404:	80002216 	blt	r16,zero,1000d490 <___vfiprintf_internal_r+0x1438>
1000d408:	05c40074 	movhi	r23,4097
1000d40c:	df002215 	stw	fp,136(sp)
1000d410:	bdd1ba04 	addi	r23,r23,18152
1000d414:	003cfb06 	br	1000c804 <__alt_data_end+0xf800c804>
1000d418:	d9002217 	ldw	r4,136(sp)
1000d41c:	d9402417 	ldw	r5,144(sp)
1000d420:	20800017 	ldw	r2,0(r4)
1000d424:	21000104 	addi	r4,r4,4
1000d428:	d9002215 	stw	r4,136(sp)
1000d42c:	11400015 	stw	r5,0(r2)
1000d430:	003b3d06 	br	1000c128 <__alt_data_end+0xf800c128>
1000d434:	01440074 	movhi	r5,4097
1000d438:	29521a04 	addi	r5,r5,18536
1000d43c:	d9402315 	stw	r5,140(sp)
1000d440:	d9401b17 	ldw	r5,108(sp)
1000d444:	29400044 	addi	r5,r5,1
1000d448:	003e6d06 	br	1000ce00 <__alt_data_end+0xf800ce00>
1000d44c:	8029883a 	mov	r20,r16
1000d450:	dd401d83 	ldbu	r21,118(sp)
1000d454:	df002215 	stw	fp,136(sp)
1000d458:	0021883a 	mov	r16,zero
1000d45c:	003c0106 	br	1000c464 <__alt_data_end+0xf800c464>
1000d460:	00c40074 	movhi	r3,4097
1000d464:	18d21604 	addi	r3,r3,18520
1000d468:	d8c02315 	stw	r3,140(sp)
1000d46c:	280d883a 	mov	r6,r5
1000d470:	003c6906 	br	1000c618 <__alt_data_end+0xf800c618>
1000d474:	802d883a 	mov	r22,r16
1000d478:	0021883a 	mov	r16,zero
1000d47c:	003b5406 	br	1000c1d0 <__alt_data_end+0xf800c1d0>
1000d480:	1823883a 	mov	r17,r3
1000d484:	003cf306 	br	1000c854 <__alt_data_end+0xf800c854>
1000d488:	1823883a 	mov	r17,r3
1000d48c:	003cad06 	br	1000c744 <__alt_data_end+0xf800c744>
1000d490:	0027883a 	mov	r19,zero
1000d494:	003fdc06 	br	1000d408 <__alt_data_end+0xf800d408>
1000d498:	d9402217 	ldw	r5,136(sp)
1000d49c:	8005883a 	mov	r2,r16
1000d4a0:	b0c00043 	ldbu	r3,1(r22)
1000d4a4:	2c000017 	ldw	r16,0(r5)
1000d4a8:	29000104 	addi	r4,r5,4
1000d4ac:	d9002215 	stw	r4,136(sp)
1000d4b0:	102d883a 	mov	r22,r2
1000d4b4:	803fa50e 	bge	r16,zero,1000d34c <__alt_data_end+0xf800d34c>
1000d4b8:	18c03fcc 	andi	r3,r3,255
1000d4bc:	18c0201c 	xori	r3,r3,128
1000d4c0:	043fffc4 	movi	r16,-1
1000d4c4:	18ffe004 	addi	r3,r3,-128
1000d4c8:	003b4006 	br	1000c1cc <__alt_data_end+0xf800c1cc>
1000d4cc:	d9402303 	ldbu	r5,140(sp)
1000d4d0:	d9401d85 	stb	r5,118(sp)
1000d4d4:	003cae06 	br	1000c790 <__alt_data_end+0xf800c790>
1000d4d8:	d8c02303 	ldbu	r3,140(sp)
1000d4dc:	d8c01d85 	stb	r3,118(sp)
1000d4e0:	003d1406 	br	1000c934 <__alt_data_end+0xf800c934>
1000d4e4:	d8c02303 	ldbu	r3,140(sp)
1000d4e8:	d8c01d85 	stb	r3,118(sp)
1000d4ec:	003cca06 	br	1000c818 <__alt_data_end+0xf800c818>
1000d4f0:	8880004c 	andi	r2,r17,1
1000d4f4:	002b883a 	mov	r21,zero
1000d4f8:	10000526 	beq	r2,zero,1000d510 <___vfiprintf_internal_r+0x14b8>
1000d4fc:	00800c04 	movi	r2,48
1000d500:	d88019c5 	stb	r2,103(sp)
1000d504:	dd002817 	ldw	r20,160(sp)
1000d508:	ddc019c4 	addi	r23,sp,103
1000d50c:	003bd506 	br	1000c464 <__alt_data_end+0xf800c464>
1000d510:	0029883a 	mov	r20,zero
1000d514:	ddc01a04 	addi	r23,sp,104
1000d518:	003bd206 	br	1000c464 <__alt_data_end+0xf800c464>
1000d51c:	d9002303 	ldbu	r4,140(sp)
1000d520:	d9001d85 	stb	r4,118(sp)
1000d524:	003da606 	br	1000cbc0 <__alt_data_end+0xf800cbc0>
1000d528:	d8c02303 	ldbu	r3,140(sp)
1000d52c:	d8c01d85 	stb	r3,118(sp)
1000d530:	003c7606 	br	1000c70c <__alt_data_end+0xf800c70c>
1000d534:	d8c02303 	ldbu	r3,140(sp)
1000d538:	d8c01d85 	stb	r3,118(sp)
1000d53c:	003c6506 	br	1000c6d4 <__alt_data_end+0xf800c6d4>
1000d540:	d9002303 	ldbu	r4,140(sp)
1000d544:	d9001d85 	stb	r4,118(sp)
1000d548:	003d3d06 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000d54c:	d8c02303 	ldbu	r3,140(sp)
1000d550:	d8c01d85 	stb	r3,118(sp)
1000d554:	003d1d06 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d558:	d8c02303 	ldbu	r3,140(sp)
1000d55c:	d8c01d85 	stb	r3,118(sp)
1000d560:	003d0306 	br	1000c970 <__alt_data_end+0xf800c970>

1000d564 <__vfiprintf_internal>:
1000d564:	00840074 	movhi	r2,4097
1000d568:	109d9a04 	addi	r2,r2,30312
1000d56c:	300f883a 	mov	r7,r6
1000d570:	280d883a 	mov	r6,r5
1000d574:	200b883a 	mov	r5,r4
1000d578:	11000017 	ldw	r4,0(r2)
1000d57c:	000c0581 	jmpi	1000c058 <___vfiprintf_internal_r>

1000d580 <__sbprintf>:
1000d580:	2880030b 	ldhu	r2,12(r5)
1000d584:	2ac01917 	ldw	r11,100(r5)
1000d588:	2a80038b 	ldhu	r10,14(r5)
1000d58c:	2a400717 	ldw	r9,28(r5)
1000d590:	2a000917 	ldw	r8,36(r5)
1000d594:	defee204 	addi	sp,sp,-1144
1000d598:	00c10004 	movi	r3,1024
1000d59c:	dc011a15 	stw	r16,1128(sp)
1000d5a0:	10bfff4c 	andi	r2,r2,65533
1000d5a4:	2821883a 	mov	r16,r5
1000d5a8:	d8cb883a 	add	r5,sp,r3
1000d5ac:	dc811c15 	stw	r18,1136(sp)
1000d5b0:	dc411b15 	stw	r17,1132(sp)
1000d5b4:	dfc11d15 	stw	ra,1140(sp)
1000d5b8:	2025883a 	mov	r18,r4
1000d5bc:	d881030d 	sth	r2,1036(sp)
1000d5c0:	dac11915 	stw	r11,1124(sp)
1000d5c4:	da81038d 	sth	r10,1038(sp)
1000d5c8:	da410715 	stw	r9,1052(sp)
1000d5cc:	da010915 	stw	r8,1060(sp)
1000d5d0:	dec10015 	stw	sp,1024(sp)
1000d5d4:	dec10415 	stw	sp,1040(sp)
1000d5d8:	d8c10215 	stw	r3,1032(sp)
1000d5dc:	d8c10515 	stw	r3,1044(sp)
1000d5e0:	d8010615 	stw	zero,1048(sp)
1000d5e4:	000c0580 	call	1000c058 <___vfiprintf_internal_r>
1000d5e8:	1023883a 	mov	r17,r2
1000d5ec:	10000416 	blt	r2,zero,1000d600 <__sbprintf+0x80>
1000d5f0:	d9410004 	addi	r5,sp,1024
1000d5f4:	9009883a 	mov	r4,r18
1000d5f8:	00088340 	call	10008834 <_fflush_r>
1000d5fc:	10000d1e 	bne	r2,zero,1000d634 <__sbprintf+0xb4>
1000d600:	d881030b 	ldhu	r2,1036(sp)
1000d604:	1080100c 	andi	r2,r2,64
1000d608:	10000326 	beq	r2,zero,1000d618 <__sbprintf+0x98>
1000d60c:	8080030b 	ldhu	r2,12(r16)
1000d610:	10801014 	ori	r2,r2,64
1000d614:	8080030d 	sth	r2,12(r16)
1000d618:	8805883a 	mov	r2,r17
1000d61c:	dfc11d17 	ldw	ra,1140(sp)
1000d620:	dc811c17 	ldw	r18,1136(sp)
1000d624:	dc411b17 	ldw	r17,1132(sp)
1000d628:	dc011a17 	ldw	r16,1128(sp)
1000d62c:	dec11e04 	addi	sp,sp,1144
1000d630:	f800283a 	ret
1000d634:	047fffc4 	movi	r17,-1
1000d638:	003ff106 	br	1000d600 <__alt_data_end+0xf800d600>

1000d63c <_write_r>:
1000d63c:	defffd04 	addi	sp,sp,-12
1000d640:	2805883a 	mov	r2,r5
1000d644:	dc000015 	stw	r16,0(sp)
1000d648:	040400b4 	movhi	r16,4098
1000d64c:	dc400115 	stw	r17,4(sp)
1000d650:	300b883a 	mov	r5,r6
1000d654:	8428f604 	addi	r16,r16,-23592
1000d658:	2023883a 	mov	r17,r4
1000d65c:	380d883a 	mov	r6,r7
1000d660:	1009883a 	mov	r4,r2
1000d664:	dfc00215 	stw	ra,8(sp)
1000d668:	80000015 	stw	zero,0(r16)
1000d66c:	0011e640 	call	10011e64 <write>
1000d670:	00ffffc4 	movi	r3,-1
1000d674:	10c00526 	beq	r2,r3,1000d68c <_write_r+0x50>
1000d678:	dfc00217 	ldw	ra,8(sp)
1000d67c:	dc400117 	ldw	r17,4(sp)
1000d680:	dc000017 	ldw	r16,0(sp)
1000d684:	dec00304 	addi	sp,sp,12
1000d688:	f800283a 	ret
1000d68c:	80c00017 	ldw	r3,0(r16)
1000d690:	183ff926 	beq	r3,zero,1000d678 <__alt_data_end+0xf800d678>
1000d694:	88c00015 	stw	r3,0(r17)
1000d698:	003ff706 	br	1000d678 <__alt_data_end+0xf800d678>

1000d69c <_close_r>:
1000d69c:	defffd04 	addi	sp,sp,-12
1000d6a0:	dc000015 	stw	r16,0(sp)
1000d6a4:	040400b4 	movhi	r16,4098
1000d6a8:	dc400115 	stw	r17,4(sp)
1000d6ac:	8428f604 	addi	r16,r16,-23592
1000d6b0:	2023883a 	mov	r17,r4
1000d6b4:	2809883a 	mov	r4,r5
1000d6b8:	dfc00215 	stw	ra,8(sp)
1000d6bc:	80000015 	stw	zero,0(r16)
1000d6c0:	00115dc0 	call	100115dc <close>
1000d6c4:	00ffffc4 	movi	r3,-1
1000d6c8:	10c00526 	beq	r2,r3,1000d6e0 <_close_r+0x44>
1000d6cc:	dfc00217 	ldw	ra,8(sp)
1000d6d0:	dc400117 	ldw	r17,4(sp)
1000d6d4:	dc000017 	ldw	r16,0(sp)
1000d6d8:	dec00304 	addi	sp,sp,12
1000d6dc:	f800283a 	ret
1000d6e0:	80c00017 	ldw	r3,0(r16)
1000d6e4:	183ff926 	beq	r3,zero,1000d6cc <__alt_data_end+0xf800d6cc>
1000d6e8:	88c00015 	stw	r3,0(r17)
1000d6ec:	003ff706 	br	1000d6cc <__alt_data_end+0xf800d6cc>

1000d6f0 <_calloc_r>:
1000d6f0:	defffe04 	addi	sp,sp,-8
1000d6f4:	2805883a 	mov	r2,r5
1000d6f8:	dc000015 	stw	r16,0(sp)
1000d6fc:	300b883a 	mov	r5,r6
1000d700:	2021883a 	mov	r16,r4
1000d704:	1009883a 	mov	r4,r2
1000d708:	dfc00115 	stw	ra,4(sp)
1000d70c:	00046600 	call	10004660 <__mulsi3>
1000d710:	100b883a 	mov	r5,r2
1000d714:	8009883a 	mov	r4,r16
1000d718:	000998c0 	call	1000998c <_malloc_r>
1000d71c:	10002926 	beq	r2,zero,1000d7c4 <_calloc_r+0xd4>
1000d720:	11bfff17 	ldw	r6,-4(r2)
1000d724:	1021883a 	mov	r16,r2
1000d728:	00bfff04 	movi	r2,-4
1000d72c:	308c703a 	and	r6,r6,r2
1000d730:	00c00904 	movi	r3,36
1000d734:	308d883a 	add	r6,r6,r2
1000d738:	19801636 	bltu	r3,r6,1000d794 <_calloc_r+0xa4>
1000d73c:	008004c4 	movi	r2,19
1000d740:	11800b2e 	bgeu	r2,r6,1000d770 <_calloc_r+0x80>
1000d744:	80000015 	stw	zero,0(r16)
1000d748:	80000115 	stw	zero,4(r16)
1000d74c:	008006c4 	movi	r2,27
1000d750:	11801a2e 	bgeu	r2,r6,1000d7bc <_calloc_r+0xcc>
1000d754:	80000215 	stw	zero,8(r16)
1000d758:	80000315 	stw	zero,12(r16)
1000d75c:	30c0151e 	bne	r6,r3,1000d7b4 <_calloc_r+0xc4>
1000d760:	80000415 	stw	zero,16(r16)
1000d764:	80800604 	addi	r2,r16,24
1000d768:	80000515 	stw	zero,20(r16)
1000d76c:	00000106 	br	1000d774 <_calloc_r+0x84>
1000d770:	8005883a 	mov	r2,r16
1000d774:	10000015 	stw	zero,0(r2)
1000d778:	10000115 	stw	zero,4(r2)
1000d77c:	10000215 	stw	zero,8(r2)
1000d780:	8005883a 	mov	r2,r16
1000d784:	dfc00117 	ldw	ra,4(sp)
1000d788:	dc000017 	ldw	r16,0(sp)
1000d78c:	dec00204 	addi	sp,sp,8
1000d790:	f800283a 	ret
1000d794:	000b883a 	mov	r5,zero
1000d798:	8009883a 	mov	r4,r16
1000d79c:	000a5200 	call	1000a520 <memset>
1000d7a0:	8005883a 	mov	r2,r16
1000d7a4:	dfc00117 	ldw	ra,4(sp)
1000d7a8:	dc000017 	ldw	r16,0(sp)
1000d7ac:	dec00204 	addi	sp,sp,8
1000d7b0:	f800283a 	ret
1000d7b4:	80800404 	addi	r2,r16,16
1000d7b8:	003fee06 	br	1000d774 <__alt_data_end+0xf800d774>
1000d7bc:	80800204 	addi	r2,r16,8
1000d7c0:	003fec06 	br	1000d774 <__alt_data_end+0xf800d774>
1000d7c4:	0005883a 	mov	r2,zero
1000d7c8:	003fee06 	br	1000d784 <__alt_data_end+0xf800d784>

1000d7cc <_fclose_r>:
1000d7cc:	28003926 	beq	r5,zero,1000d8b4 <_fclose_r+0xe8>
1000d7d0:	defffc04 	addi	sp,sp,-16
1000d7d4:	dc400115 	stw	r17,4(sp)
1000d7d8:	dc000015 	stw	r16,0(sp)
1000d7dc:	dfc00315 	stw	ra,12(sp)
1000d7e0:	dc800215 	stw	r18,8(sp)
1000d7e4:	2023883a 	mov	r17,r4
1000d7e8:	2821883a 	mov	r16,r5
1000d7ec:	20000226 	beq	r4,zero,1000d7f8 <_fclose_r+0x2c>
1000d7f0:	20800e17 	ldw	r2,56(r4)
1000d7f4:	10002726 	beq	r2,zero,1000d894 <_fclose_r+0xc8>
1000d7f8:	8080030f 	ldh	r2,12(r16)
1000d7fc:	1000071e 	bne	r2,zero,1000d81c <_fclose_r+0x50>
1000d800:	0005883a 	mov	r2,zero
1000d804:	dfc00317 	ldw	ra,12(sp)
1000d808:	dc800217 	ldw	r18,8(sp)
1000d80c:	dc400117 	ldw	r17,4(sp)
1000d810:	dc000017 	ldw	r16,0(sp)
1000d814:	dec00404 	addi	sp,sp,16
1000d818:	f800283a 	ret
1000d81c:	800b883a 	mov	r5,r16
1000d820:	8809883a 	mov	r4,r17
1000d824:	00086180 	call	10008618 <__sflush_r>
1000d828:	1025883a 	mov	r18,r2
1000d82c:	80800b17 	ldw	r2,44(r16)
1000d830:	10000426 	beq	r2,zero,1000d844 <_fclose_r+0x78>
1000d834:	81400717 	ldw	r5,28(r16)
1000d838:	8809883a 	mov	r4,r17
1000d83c:	103ee83a 	callr	r2
1000d840:	10001616 	blt	r2,zero,1000d89c <_fclose_r+0xd0>
1000d844:	8080030b 	ldhu	r2,12(r16)
1000d848:	1080200c 	andi	r2,r2,128
1000d84c:	1000151e 	bne	r2,zero,1000d8a4 <_fclose_r+0xd8>
1000d850:	81400c17 	ldw	r5,48(r16)
1000d854:	28000526 	beq	r5,zero,1000d86c <_fclose_r+0xa0>
1000d858:	80801004 	addi	r2,r16,64
1000d85c:	28800226 	beq	r5,r2,1000d868 <_fclose_r+0x9c>
1000d860:	8809883a 	mov	r4,r17
1000d864:	0008d940 	call	10008d94 <_free_r>
1000d868:	80000c15 	stw	zero,48(r16)
1000d86c:	81401117 	ldw	r5,68(r16)
1000d870:	28000326 	beq	r5,zero,1000d880 <_fclose_r+0xb4>
1000d874:	8809883a 	mov	r4,r17
1000d878:	0008d940 	call	10008d94 <_free_r>
1000d87c:	80001115 	stw	zero,68(r16)
1000d880:	0008c300 	call	10008c30 <__sfp_lock_acquire>
1000d884:	8000030d 	sth	zero,12(r16)
1000d888:	0008c340 	call	10008c34 <__sfp_lock_release>
1000d88c:	9005883a 	mov	r2,r18
1000d890:	003fdc06 	br	1000d804 <__alt_data_end+0xf800d804>
1000d894:	0008c200 	call	10008c20 <__sinit>
1000d898:	003fd706 	br	1000d7f8 <__alt_data_end+0xf800d7f8>
1000d89c:	04bfffc4 	movi	r18,-1
1000d8a0:	003fe806 	br	1000d844 <__alt_data_end+0xf800d844>
1000d8a4:	81400417 	ldw	r5,16(r16)
1000d8a8:	8809883a 	mov	r4,r17
1000d8ac:	0008d940 	call	10008d94 <_free_r>
1000d8b0:	003fe706 	br	1000d850 <__alt_data_end+0xf800d850>
1000d8b4:	0005883a 	mov	r2,zero
1000d8b8:	f800283a 	ret

1000d8bc <fclose>:
1000d8bc:	00840074 	movhi	r2,4097
1000d8c0:	109d9a04 	addi	r2,r2,30312
1000d8c4:	200b883a 	mov	r5,r4
1000d8c8:	11000017 	ldw	r4,0(r2)
1000d8cc:	000d7cc1 	jmpi	1000d7cc <_fclose_r>

1000d8d0 <__fputwc>:
1000d8d0:	defff804 	addi	sp,sp,-32
1000d8d4:	dcc00415 	stw	r19,16(sp)
1000d8d8:	dc800315 	stw	r18,12(sp)
1000d8dc:	dc000115 	stw	r16,4(sp)
1000d8e0:	dfc00715 	stw	ra,28(sp)
1000d8e4:	dd400615 	stw	r21,24(sp)
1000d8e8:	dd000515 	stw	r20,20(sp)
1000d8ec:	dc400215 	stw	r17,8(sp)
1000d8f0:	2027883a 	mov	r19,r4
1000d8f4:	2825883a 	mov	r18,r5
1000d8f8:	3021883a 	mov	r16,r6
1000d8fc:	000977c0 	call	1000977c <__locale_mb_cur_max>
1000d900:	00c00044 	movi	r3,1
1000d904:	10c03e26 	beq	r2,r3,1000da00 <__fputwc+0x130>
1000d908:	81c01704 	addi	r7,r16,92
1000d90c:	900d883a 	mov	r6,r18
1000d910:	d80b883a 	mov	r5,sp
1000d914:	9809883a 	mov	r4,r19
1000d918:	000dda00 	call	1000dda0 <_wcrtomb_r>
1000d91c:	1029883a 	mov	r20,r2
1000d920:	00bfffc4 	movi	r2,-1
1000d924:	a0802026 	beq	r20,r2,1000d9a8 <__fputwc+0xd8>
1000d928:	d9400003 	ldbu	r5,0(sp)
1000d92c:	a0001c26 	beq	r20,zero,1000d9a0 <__fputwc+0xd0>
1000d930:	0023883a 	mov	r17,zero
1000d934:	05400284 	movi	r21,10
1000d938:	00000906 	br	1000d960 <__fputwc+0x90>
1000d93c:	80800017 	ldw	r2,0(r16)
1000d940:	11400005 	stb	r5,0(r2)
1000d944:	80c00017 	ldw	r3,0(r16)
1000d948:	18c00044 	addi	r3,r3,1
1000d94c:	80c00015 	stw	r3,0(r16)
1000d950:	8c400044 	addi	r17,r17,1
1000d954:	dc45883a 	add	r2,sp,r17
1000d958:	8d00112e 	bgeu	r17,r20,1000d9a0 <__fputwc+0xd0>
1000d95c:	11400003 	ldbu	r5,0(r2)
1000d960:	80c00217 	ldw	r3,8(r16)
1000d964:	18ffffc4 	addi	r3,r3,-1
1000d968:	80c00215 	stw	r3,8(r16)
1000d96c:	183ff30e 	bge	r3,zero,1000d93c <__alt_data_end+0xf800d93c>
1000d970:	80800617 	ldw	r2,24(r16)
1000d974:	18801916 	blt	r3,r2,1000d9dc <__fputwc+0x10c>
1000d978:	80800017 	ldw	r2,0(r16)
1000d97c:	11400005 	stb	r5,0(r2)
1000d980:	80800017 	ldw	r2,0(r16)
1000d984:	10c00003 	ldbu	r3,0(r2)
1000d988:	10800044 	addi	r2,r2,1
1000d98c:	1d402326 	beq	r3,r21,1000da1c <__fputwc+0x14c>
1000d990:	80800015 	stw	r2,0(r16)
1000d994:	8c400044 	addi	r17,r17,1
1000d998:	dc45883a 	add	r2,sp,r17
1000d99c:	8d3fef36 	bltu	r17,r20,1000d95c <__alt_data_end+0xf800d95c>
1000d9a0:	9005883a 	mov	r2,r18
1000d9a4:	00000406 	br	1000d9b8 <__fputwc+0xe8>
1000d9a8:	80c0030b 	ldhu	r3,12(r16)
1000d9ac:	a005883a 	mov	r2,r20
1000d9b0:	18c01014 	ori	r3,r3,64
1000d9b4:	80c0030d 	sth	r3,12(r16)
1000d9b8:	dfc00717 	ldw	ra,28(sp)
1000d9bc:	dd400617 	ldw	r21,24(sp)
1000d9c0:	dd000517 	ldw	r20,20(sp)
1000d9c4:	dcc00417 	ldw	r19,16(sp)
1000d9c8:	dc800317 	ldw	r18,12(sp)
1000d9cc:	dc400217 	ldw	r17,8(sp)
1000d9d0:	dc000117 	ldw	r16,4(sp)
1000d9d4:	dec00804 	addi	sp,sp,32
1000d9d8:	f800283a 	ret
1000d9dc:	800d883a 	mov	r6,r16
1000d9e0:	29403fcc 	andi	r5,r5,255
1000d9e4:	9809883a 	mov	r4,r19
1000d9e8:	000dc480 	call	1000dc48 <__swbuf_r>
1000d9ec:	10bfffe0 	cmpeqi	r2,r2,-1
1000d9f0:	10803fcc 	andi	r2,r2,255
1000d9f4:	103fd626 	beq	r2,zero,1000d950 <__alt_data_end+0xf800d950>
1000d9f8:	00bfffc4 	movi	r2,-1
1000d9fc:	003fee06 	br	1000d9b8 <__alt_data_end+0xf800d9b8>
1000da00:	90ffffc4 	addi	r3,r18,-1
1000da04:	01003f84 	movi	r4,254
1000da08:	20ffbf36 	bltu	r4,r3,1000d908 <__alt_data_end+0xf800d908>
1000da0c:	900b883a 	mov	r5,r18
1000da10:	dc800005 	stb	r18,0(sp)
1000da14:	1029883a 	mov	r20,r2
1000da18:	003fc506 	br	1000d930 <__alt_data_end+0xf800d930>
1000da1c:	800d883a 	mov	r6,r16
1000da20:	a80b883a 	mov	r5,r21
1000da24:	9809883a 	mov	r4,r19
1000da28:	000dc480 	call	1000dc48 <__swbuf_r>
1000da2c:	10bfffe0 	cmpeqi	r2,r2,-1
1000da30:	003fef06 	br	1000d9f0 <__alt_data_end+0xf800d9f0>

1000da34 <_fputwc_r>:
1000da34:	3080030b 	ldhu	r2,12(r6)
1000da38:	10c8000c 	andi	r3,r2,8192
1000da3c:	1800051e 	bne	r3,zero,1000da54 <_fputwc_r+0x20>
1000da40:	30c01917 	ldw	r3,100(r6)
1000da44:	10880014 	ori	r2,r2,8192
1000da48:	3080030d 	sth	r2,12(r6)
1000da4c:	18880014 	ori	r2,r3,8192
1000da50:	30801915 	stw	r2,100(r6)
1000da54:	000d8d01 	jmpi	1000d8d0 <__fputwc>

1000da58 <fputwc>:
1000da58:	00840074 	movhi	r2,4097
1000da5c:	defffc04 	addi	sp,sp,-16
1000da60:	109d9a04 	addi	r2,r2,30312
1000da64:	dc000115 	stw	r16,4(sp)
1000da68:	14000017 	ldw	r16,0(r2)
1000da6c:	dc400215 	stw	r17,8(sp)
1000da70:	dfc00315 	stw	ra,12(sp)
1000da74:	2023883a 	mov	r17,r4
1000da78:	80000226 	beq	r16,zero,1000da84 <fputwc+0x2c>
1000da7c:	80800e17 	ldw	r2,56(r16)
1000da80:	10001026 	beq	r2,zero,1000dac4 <fputwc+0x6c>
1000da84:	2880030b 	ldhu	r2,12(r5)
1000da88:	10c8000c 	andi	r3,r2,8192
1000da8c:	1800051e 	bne	r3,zero,1000daa4 <fputwc+0x4c>
1000da90:	28c01917 	ldw	r3,100(r5)
1000da94:	10880014 	ori	r2,r2,8192
1000da98:	2880030d 	sth	r2,12(r5)
1000da9c:	18880014 	ori	r2,r3,8192
1000daa0:	28801915 	stw	r2,100(r5)
1000daa4:	280d883a 	mov	r6,r5
1000daa8:	8009883a 	mov	r4,r16
1000daac:	880b883a 	mov	r5,r17
1000dab0:	dfc00317 	ldw	ra,12(sp)
1000dab4:	dc400217 	ldw	r17,8(sp)
1000dab8:	dc000117 	ldw	r16,4(sp)
1000dabc:	dec00404 	addi	sp,sp,16
1000dac0:	000d8d01 	jmpi	1000d8d0 <__fputwc>
1000dac4:	8009883a 	mov	r4,r16
1000dac8:	d9400015 	stw	r5,0(sp)
1000dacc:	0008c200 	call	10008c20 <__sinit>
1000dad0:	d9400017 	ldw	r5,0(sp)
1000dad4:	003feb06 	br	1000da84 <__alt_data_end+0xf800da84>

1000dad8 <_fstat_r>:
1000dad8:	defffd04 	addi	sp,sp,-12
1000dadc:	2805883a 	mov	r2,r5
1000dae0:	dc000015 	stw	r16,0(sp)
1000dae4:	040400b4 	movhi	r16,4098
1000dae8:	dc400115 	stw	r17,4(sp)
1000daec:	8428f604 	addi	r16,r16,-23592
1000daf0:	2023883a 	mov	r17,r4
1000daf4:	300b883a 	mov	r5,r6
1000daf8:	1009883a 	mov	r4,r2
1000dafc:	dfc00215 	stw	ra,8(sp)
1000db00:	80000015 	stw	zero,0(r16)
1000db04:	001171c0 	call	1001171c <fstat>
1000db08:	00ffffc4 	movi	r3,-1
1000db0c:	10c00526 	beq	r2,r3,1000db24 <_fstat_r+0x4c>
1000db10:	dfc00217 	ldw	ra,8(sp)
1000db14:	dc400117 	ldw	r17,4(sp)
1000db18:	dc000017 	ldw	r16,0(sp)
1000db1c:	dec00304 	addi	sp,sp,12
1000db20:	f800283a 	ret
1000db24:	80c00017 	ldw	r3,0(r16)
1000db28:	183ff926 	beq	r3,zero,1000db10 <__alt_data_end+0xf800db10>
1000db2c:	88c00015 	stw	r3,0(r17)
1000db30:	003ff706 	br	1000db10 <__alt_data_end+0xf800db10>

1000db34 <_isatty_r>:
1000db34:	defffd04 	addi	sp,sp,-12
1000db38:	dc000015 	stw	r16,0(sp)
1000db3c:	040400b4 	movhi	r16,4098
1000db40:	dc400115 	stw	r17,4(sp)
1000db44:	8428f604 	addi	r16,r16,-23592
1000db48:	2023883a 	mov	r17,r4
1000db4c:	2809883a 	mov	r4,r5
1000db50:	dfc00215 	stw	ra,8(sp)
1000db54:	80000015 	stw	zero,0(r16)
1000db58:	00118100 	call	10011810 <isatty>
1000db5c:	00ffffc4 	movi	r3,-1
1000db60:	10c00526 	beq	r2,r3,1000db78 <_isatty_r+0x44>
1000db64:	dfc00217 	ldw	ra,8(sp)
1000db68:	dc400117 	ldw	r17,4(sp)
1000db6c:	dc000017 	ldw	r16,0(sp)
1000db70:	dec00304 	addi	sp,sp,12
1000db74:	f800283a 	ret
1000db78:	80c00017 	ldw	r3,0(r16)
1000db7c:	183ff926 	beq	r3,zero,1000db64 <__alt_data_end+0xf800db64>
1000db80:	88c00015 	stw	r3,0(r17)
1000db84:	003ff706 	br	1000db64 <__alt_data_end+0xf800db64>

1000db88 <_lseek_r>:
1000db88:	defffd04 	addi	sp,sp,-12
1000db8c:	2805883a 	mov	r2,r5
1000db90:	dc000015 	stw	r16,0(sp)
1000db94:	040400b4 	movhi	r16,4098
1000db98:	dc400115 	stw	r17,4(sp)
1000db9c:	300b883a 	mov	r5,r6
1000dba0:	8428f604 	addi	r16,r16,-23592
1000dba4:	2023883a 	mov	r17,r4
1000dba8:	380d883a 	mov	r6,r7
1000dbac:	1009883a 	mov	r4,r2
1000dbb0:	dfc00215 	stw	ra,8(sp)
1000dbb4:	80000015 	stw	zero,0(r16)
1000dbb8:	00119e40 	call	100119e4 <lseek>
1000dbbc:	00ffffc4 	movi	r3,-1
1000dbc0:	10c00526 	beq	r2,r3,1000dbd8 <_lseek_r+0x50>
1000dbc4:	dfc00217 	ldw	ra,8(sp)
1000dbc8:	dc400117 	ldw	r17,4(sp)
1000dbcc:	dc000017 	ldw	r16,0(sp)
1000dbd0:	dec00304 	addi	sp,sp,12
1000dbd4:	f800283a 	ret
1000dbd8:	80c00017 	ldw	r3,0(r16)
1000dbdc:	183ff926 	beq	r3,zero,1000dbc4 <__alt_data_end+0xf800dbc4>
1000dbe0:	88c00015 	stw	r3,0(r17)
1000dbe4:	003ff706 	br	1000dbc4 <__alt_data_end+0xf800dbc4>

1000dbe8 <_read_r>:
1000dbe8:	defffd04 	addi	sp,sp,-12
1000dbec:	2805883a 	mov	r2,r5
1000dbf0:	dc000015 	stw	r16,0(sp)
1000dbf4:	040400b4 	movhi	r16,4098
1000dbf8:	dc400115 	stw	r17,4(sp)
1000dbfc:	300b883a 	mov	r5,r6
1000dc00:	8428f604 	addi	r16,r16,-23592
1000dc04:	2023883a 	mov	r17,r4
1000dc08:	380d883a 	mov	r6,r7
1000dc0c:	1009883a 	mov	r4,r2
1000dc10:	dfc00215 	stw	ra,8(sp)
1000dc14:	80000015 	stw	zero,0(r16)
1000dc18:	0011bc00 	call	10011bc0 <read>
1000dc1c:	00ffffc4 	movi	r3,-1
1000dc20:	10c00526 	beq	r2,r3,1000dc38 <_read_r+0x50>
1000dc24:	dfc00217 	ldw	ra,8(sp)
1000dc28:	dc400117 	ldw	r17,4(sp)
1000dc2c:	dc000017 	ldw	r16,0(sp)
1000dc30:	dec00304 	addi	sp,sp,12
1000dc34:	f800283a 	ret
1000dc38:	80c00017 	ldw	r3,0(r16)
1000dc3c:	183ff926 	beq	r3,zero,1000dc24 <__alt_data_end+0xf800dc24>
1000dc40:	88c00015 	stw	r3,0(r17)
1000dc44:	003ff706 	br	1000dc24 <__alt_data_end+0xf800dc24>

1000dc48 <__swbuf_r>:
1000dc48:	defffb04 	addi	sp,sp,-20
1000dc4c:	dcc00315 	stw	r19,12(sp)
1000dc50:	dc800215 	stw	r18,8(sp)
1000dc54:	dc000015 	stw	r16,0(sp)
1000dc58:	dfc00415 	stw	ra,16(sp)
1000dc5c:	dc400115 	stw	r17,4(sp)
1000dc60:	2025883a 	mov	r18,r4
1000dc64:	2827883a 	mov	r19,r5
1000dc68:	3021883a 	mov	r16,r6
1000dc6c:	20000226 	beq	r4,zero,1000dc78 <__swbuf_r+0x30>
1000dc70:	20800e17 	ldw	r2,56(r4)
1000dc74:	10004226 	beq	r2,zero,1000dd80 <__swbuf_r+0x138>
1000dc78:	80800617 	ldw	r2,24(r16)
1000dc7c:	8100030b 	ldhu	r4,12(r16)
1000dc80:	80800215 	stw	r2,8(r16)
1000dc84:	2080020c 	andi	r2,r4,8
1000dc88:	10003626 	beq	r2,zero,1000dd64 <__swbuf_r+0x11c>
1000dc8c:	80c00417 	ldw	r3,16(r16)
1000dc90:	18003426 	beq	r3,zero,1000dd64 <__swbuf_r+0x11c>
1000dc94:	2088000c 	andi	r2,r4,8192
1000dc98:	9c403fcc 	andi	r17,r19,255
1000dc9c:	10001a26 	beq	r2,zero,1000dd08 <__swbuf_r+0xc0>
1000dca0:	80800017 	ldw	r2,0(r16)
1000dca4:	81000517 	ldw	r4,20(r16)
1000dca8:	10c7c83a 	sub	r3,r2,r3
1000dcac:	1900200e 	bge	r3,r4,1000dd30 <__swbuf_r+0xe8>
1000dcb0:	18c00044 	addi	r3,r3,1
1000dcb4:	81000217 	ldw	r4,8(r16)
1000dcb8:	11400044 	addi	r5,r2,1
1000dcbc:	81400015 	stw	r5,0(r16)
1000dcc0:	213fffc4 	addi	r4,r4,-1
1000dcc4:	81000215 	stw	r4,8(r16)
1000dcc8:	14c00005 	stb	r19,0(r2)
1000dccc:	80800517 	ldw	r2,20(r16)
1000dcd0:	10c01e26 	beq	r2,r3,1000dd4c <__swbuf_r+0x104>
1000dcd4:	8080030b 	ldhu	r2,12(r16)
1000dcd8:	1080004c 	andi	r2,r2,1
1000dcdc:	10000226 	beq	r2,zero,1000dce8 <__swbuf_r+0xa0>
1000dce0:	00800284 	movi	r2,10
1000dce4:	88801926 	beq	r17,r2,1000dd4c <__swbuf_r+0x104>
1000dce8:	8805883a 	mov	r2,r17
1000dcec:	dfc00417 	ldw	ra,16(sp)
1000dcf0:	dcc00317 	ldw	r19,12(sp)
1000dcf4:	dc800217 	ldw	r18,8(sp)
1000dcf8:	dc400117 	ldw	r17,4(sp)
1000dcfc:	dc000017 	ldw	r16,0(sp)
1000dd00:	dec00504 	addi	sp,sp,20
1000dd04:	f800283a 	ret
1000dd08:	81401917 	ldw	r5,100(r16)
1000dd0c:	00b7ffc4 	movi	r2,-8193
1000dd10:	21080014 	ori	r4,r4,8192
1000dd14:	2884703a 	and	r2,r5,r2
1000dd18:	80801915 	stw	r2,100(r16)
1000dd1c:	80800017 	ldw	r2,0(r16)
1000dd20:	8100030d 	sth	r4,12(r16)
1000dd24:	81000517 	ldw	r4,20(r16)
1000dd28:	10c7c83a 	sub	r3,r2,r3
1000dd2c:	193fe016 	blt	r3,r4,1000dcb0 <__alt_data_end+0xf800dcb0>
1000dd30:	800b883a 	mov	r5,r16
1000dd34:	9009883a 	mov	r4,r18
1000dd38:	00088340 	call	10008834 <_fflush_r>
1000dd3c:	1000071e 	bne	r2,zero,1000dd5c <__swbuf_r+0x114>
1000dd40:	80800017 	ldw	r2,0(r16)
1000dd44:	00c00044 	movi	r3,1
1000dd48:	003fda06 	br	1000dcb4 <__alt_data_end+0xf800dcb4>
1000dd4c:	800b883a 	mov	r5,r16
1000dd50:	9009883a 	mov	r4,r18
1000dd54:	00088340 	call	10008834 <_fflush_r>
1000dd58:	103fe326 	beq	r2,zero,1000dce8 <__alt_data_end+0xf800dce8>
1000dd5c:	00bfffc4 	movi	r2,-1
1000dd60:	003fe206 	br	1000dcec <__alt_data_end+0xf800dcec>
1000dd64:	800b883a 	mov	r5,r16
1000dd68:	9009883a 	mov	r4,r18
1000dd6c:	0006c140 	call	10006c14 <__swsetup_r>
1000dd70:	103ffa1e 	bne	r2,zero,1000dd5c <__alt_data_end+0xf800dd5c>
1000dd74:	8100030b 	ldhu	r4,12(r16)
1000dd78:	80c00417 	ldw	r3,16(r16)
1000dd7c:	003fc506 	br	1000dc94 <__alt_data_end+0xf800dc94>
1000dd80:	0008c200 	call	10008c20 <__sinit>
1000dd84:	003fbc06 	br	1000dc78 <__alt_data_end+0xf800dc78>

1000dd88 <__swbuf>:
1000dd88:	00840074 	movhi	r2,4097
1000dd8c:	109d9a04 	addi	r2,r2,30312
1000dd90:	280d883a 	mov	r6,r5
1000dd94:	200b883a 	mov	r5,r4
1000dd98:	11000017 	ldw	r4,0(r2)
1000dd9c:	000dc481 	jmpi	1000dc48 <__swbuf_r>

1000dda0 <_wcrtomb_r>:
1000dda0:	defff604 	addi	sp,sp,-40
1000dda4:	00840074 	movhi	r2,4097
1000dda8:	dc800815 	stw	r18,32(sp)
1000ddac:	dc400715 	stw	r17,28(sp)
1000ddb0:	dc000615 	stw	r16,24(sp)
1000ddb4:	109d9e04 	addi	r2,r2,30328
1000ddb8:	dfc00915 	stw	ra,36(sp)
1000ddbc:	2021883a 	mov	r16,r4
1000ddc0:	3823883a 	mov	r17,r7
1000ddc4:	14800017 	ldw	r18,0(r2)
1000ddc8:	28001426 	beq	r5,zero,1000de1c <_wcrtomb_r+0x7c>
1000ddcc:	d9400415 	stw	r5,16(sp)
1000ddd0:	d9800515 	stw	r6,20(sp)
1000ddd4:	00097700 	call	10009770 <__locale_charset>
1000ddd8:	d9800517 	ldw	r6,20(sp)
1000dddc:	d9400417 	ldw	r5,16(sp)
1000dde0:	100f883a 	mov	r7,r2
1000dde4:	dc400015 	stw	r17,0(sp)
1000dde8:	8009883a 	mov	r4,r16
1000ddec:	903ee83a 	callr	r18
1000ddf0:	00ffffc4 	movi	r3,-1
1000ddf4:	10c0031e 	bne	r2,r3,1000de04 <_wcrtomb_r+0x64>
1000ddf8:	88000015 	stw	zero,0(r17)
1000ddfc:	00c02284 	movi	r3,138
1000de00:	80c00015 	stw	r3,0(r16)
1000de04:	dfc00917 	ldw	ra,36(sp)
1000de08:	dc800817 	ldw	r18,32(sp)
1000de0c:	dc400717 	ldw	r17,28(sp)
1000de10:	dc000617 	ldw	r16,24(sp)
1000de14:	dec00a04 	addi	sp,sp,40
1000de18:	f800283a 	ret
1000de1c:	00097700 	call	10009770 <__locale_charset>
1000de20:	100f883a 	mov	r7,r2
1000de24:	dc400015 	stw	r17,0(sp)
1000de28:	000d883a 	mov	r6,zero
1000de2c:	d9400104 	addi	r5,sp,4
1000de30:	8009883a 	mov	r4,r16
1000de34:	903ee83a 	callr	r18
1000de38:	003fed06 	br	1000ddf0 <__alt_data_end+0xf800ddf0>

1000de3c <wcrtomb>:
1000de3c:	defff604 	addi	sp,sp,-40
1000de40:	00840074 	movhi	r2,4097
1000de44:	dc800615 	stw	r18,24(sp)
1000de48:	dc400515 	stw	r17,20(sp)
1000de4c:	109d9a04 	addi	r2,r2,30312
1000de50:	dfc00915 	stw	ra,36(sp)
1000de54:	dd000815 	stw	r20,32(sp)
1000de58:	dcc00715 	stw	r19,28(sp)
1000de5c:	dc000415 	stw	r16,16(sp)
1000de60:	3025883a 	mov	r18,r6
1000de64:	14400017 	ldw	r17,0(r2)
1000de68:	20001926 	beq	r4,zero,1000ded0 <wcrtomb+0x94>
1000de6c:	00840074 	movhi	r2,4097
1000de70:	109d9e04 	addi	r2,r2,30328
1000de74:	15000017 	ldw	r20,0(r2)
1000de78:	2021883a 	mov	r16,r4
1000de7c:	2827883a 	mov	r19,r5
1000de80:	00097700 	call	10009770 <__locale_charset>
1000de84:	100f883a 	mov	r7,r2
1000de88:	dc800015 	stw	r18,0(sp)
1000de8c:	980d883a 	mov	r6,r19
1000de90:	800b883a 	mov	r5,r16
1000de94:	8809883a 	mov	r4,r17
1000de98:	a03ee83a 	callr	r20
1000de9c:	00ffffc4 	movi	r3,-1
1000dea0:	10c0031e 	bne	r2,r3,1000deb0 <wcrtomb+0x74>
1000dea4:	90000015 	stw	zero,0(r18)
1000dea8:	00c02284 	movi	r3,138
1000deac:	88c00015 	stw	r3,0(r17)
1000deb0:	dfc00917 	ldw	ra,36(sp)
1000deb4:	dd000817 	ldw	r20,32(sp)
1000deb8:	dcc00717 	ldw	r19,28(sp)
1000debc:	dc800617 	ldw	r18,24(sp)
1000dec0:	dc400517 	ldw	r17,20(sp)
1000dec4:	dc000417 	ldw	r16,16(sp)
1000dec8:	dec00a04 	addi	sp,sp,40
1000decc:	f800283a 	ret
1000ded0:	00840074 	movhi	r2,4097
1000ded4:	109d9e04 	addi	r2,r2,30328
1000ded8:	14000017 	ldw	r16,0(r2)
1000dedc:	00097700 	call	10009770 <__locale_charset>
1000dee0:	100f883a 	mov	r7,r2
1000dee4:	dc800015 	stw	r18,0(sp)
1000dee8:	000d883a 	mov	r6,zero
1000deec:	d9400104 	addi	r5,sp,4
1000def0:	8809883a 	mov	r4,r17
1000def4:	803ee83a 	callr	r16
1000def8:	003fe806 	br	1000de9c <__alt_data_end+0xf800de9c>

1000defc <__ascii_wctomb>:
1000defc:	28000526 	beq	r5,zero,1000df14 <__ascii_wctomb+0x18>
1000df00:	00803fc4 	movi	r2,255
1000df04:	11800536 	bltu	r2,r6,1000df1c <__ascii_wctomb+0x20>
1000df08:	29800005 	stb	r6,0(r5)
1000df0c:	00800044 	movi	r2,1
1000df10:	f800283a 	ret
1000df14:	0005883a 	mov	r2,zero
1000df18:	f800283a 	ret
1000df1c:	00802284 	movi	r2,138
1000df20:	20800015 	stw	r2,0(r4)
1000df24:	00bfffc4 	movi	r2,-1
1000df28:	f800283a 	ret

1000df2c <_wctomb_r>:
1000df2c:	00840074 	movhi	r2,4097
1000df30:	defff904 	addi	sp,sp,-28
1000df34:	109d9e04 	addi	r2,r2,30328
1000df38:	dfc00615 	stw	ra,24(sp)
1000df3c:	dc400515 	stw	r17,20(sp)
1000df40:	dc000415 	stw	r16,16(sp)
1000df44:	3823883a 	mov	r17,r7
1000df48:	14000017 	ldw	r16,0(r2)
1000df4c:	d9000115 	stw	r4,4(sp)
1000df50:	d9400215 	stw	r5,8(sp)
1000df54:	d9800315 	stw	r6,12(sp)
1000df58:	00097700 	call	10009770 <__locale_charset>
1000df5c:	d9800317 	ldw	r6,12(sp)
1000df60:	d9400217 	ldw	r5,8(sp)
1000df64:	d9000117 	ldw	r4,4(sp)
1000df68:	100f883a 	mov	r7,r2
1000df6c:	dc400015 	stw	r17,0(sp)
1000df70:	803ee83a 	callr	r16
1000df74:	dfc00617 	ldw	ra,24(sp)
1000df78:	dc400517 	ldw	r17,20(sp)
1000df7c:	dc000417 	ldw	r16,16(sp)
1000df80:	dec00704 	addi	sp,sp,28
1000df84:	f800283a 	ret

1000df88 <__udivdi3>:
1000df88:	defff404 	addi	sp,sp,-48
1000df8c:	dcc00515 	stw	r19,20(sp)
1000df90:	dc000215 	stw	r16,8(sp)
1000df94:	dfc00b15 	stw	ra,44(sp)
1000df98:	df000a15 	stw	fp,40(sp)
1000df9c:	ddc00915 	stw	r23,36(sp)
1000dfa0:	dd800815 	stw	r22,32(sp)
1000dfa4:	dd400715 	stw	r21,28(sp)
1000dfa8:	dd000615 	stw	r20,24(sp)
1000dfac:	dc800415 	stw	r18,16(sp)
1000dfb0:	dc400315 	stw	r17,12(sp)
1000dfb4:	2027883a 	mov	r19,r4
1000dfb8:	2821883a 	mov	r16,r5
1000dfbc:	3800461e 	bne	r7,zero,1000e0d8 <__udivdi3+0x150>
1000dfc0:	3023883a 	mov	r17,r6
1000dfc4:	2025883a 	mov	r18,r4
1000dfc8:	2980572e 	bgeu	r5,r6,1000e128 <__udivdi3+0x1a0>
1000dfcc:	00bfffd4 	movui	r2,65535
1000dfd0:	282d883a 	mov	r22,r5
1000dfd4:	1180b236 	bltu	r2,r6,1000e2a0 <__udivdi3+0x318>
1000dfd8:	00803fc4 	movi	r2,255
1000dfdc:	1185803a 	cmpltu	r2,r2,r6
1000dfe0:	100490fa 	slli	r2,r2,3
1000dfe4:	3086d83a 	srl	r3,r6,r2
1000dfe8:	01040074 	movhi	r4,4097
1000dfec:	21121e04 	addi	r4,r4,18552
1000dff0:	20c7883a 	add	r3,r4,r3
1000dff4:	18c00003 	ldbu	r3,0(r3)
1000dff8:	1885883a 	add	r2,r3,r2
1000dffc:	00c00804 	movi	r3,32
1000e000:	1887c83a 	sub	r3,r3,r2
1000e004:	18000526 	beq	r3,zero,1000e01c <__udivdi3+0x94>
1000e008:	80e0983a 	sll	r16,r16,r3
1000e00c:	9884d83a 	srl	r2,r19,r2
1000e010:	30e2983a 	sll	r17,r6,r3
1000e014:	98e4983a 	sll	r18,r19,r3
1000e018:	142cb03a 	or	r22,r2,r16
1000e01c:	882ad43a 	srli	r21,r17,16
1000e020:	b009883a 	mov	r4,r22
1000e024:	8d3fffcc 	andi	r20,r17,65535
1000e028:	a80b883a 	mov	r5,r21
1000e02c:	000eca40 	call	1000eca4 <__umodsi3>
1000e030:	b009883a 	mov	r4,r22
1000e034:	a80b883a 	mov	r5,r21
1000e038:	1027883a 	mov	r19,r2
1000e03c:	000ec400 	call	1000ec40 <__udivsi3>
1000e040:	100b883a 	mov	r5,r2
1000e044:	a009883a 	mov	r4,r20
1000e048:	102d883a 	mov	r22,r2
1000e04c:	00046600 	call	10004660 <__mulsi3>
1000e050:	9826943a 	slli	r19,r19,16
1000e054:	9006d43a 	srli	r3,r18,16
1000e058:	1cc6b03a 	or	r3,r3,r19
1000e05c:	1880052e 	bgeu	r3,r2,1000e074 <__udivdi3+0xec>
1000e060:	1c47883a 	add	r3,r3,r17
1000e064:	b13fffc4 	addi	r4,r22,-1
1000e068:	1c400136 	bltu	r3,r17,1000e070 <__udivdi3+0xe8>
1000e06c:	18814236 	bltu	r3,r2,1000e578 <__udivdi3+0x5f0>
1000e070:	202d883a 	mov	r22,r4
1000e074:	18a1c83a 	sub	r16,r3,r2
1000e078:	8009883a 	mov	r4,r16
1000e07c:	a80b883a 	mov	r5,r21
1000e080:	000eca40 	call	1000eca4 <__umodsi3>
1000e084:	1027883a 	mov	r19,r2
1000e088:	8009883a 	mov	r4,r16
1000e08c:	a80b883a 	mov	r5,r21
1000e090:	9826943a 	slli	r19,r19,16
1000e094:	000ec400 	call	1000ec40 <__udivsi3>
1000e098:	100b883a 	mov	r5,r2
1000e09c:	a009883a 	mov	r4,r20
1000e0a0:	94bfffcc 	andi	r18,r18,65535
1000e0a4:	1021883a 	mov	r16,r2
1000e0a8:	94e4b03a 	or	r18,r18,r19
1000e0ac:	00046600 	call	10004660 <__mulsi3>
1000e0b0:	9080052e 	bgeu	r18,r2,1000e0c8 <__udivdi3+0x140>
1000e0b4:	8ca5883a 	add	r18,r17,r18
1000e0b8:	80ffffc4 	addi	r3,r16,-1
1000e0bc:	94410c36 	bltu	r18,r17,1000e4f0 <__udivdi3+0x568>
1000e0c0:	90810b2e 	bgeu	r18,r2,1000e4f0 <__udivdi3+0x568>
1000e0c4:	843fff84 	addi	r16,r16,-2
1000e0c8:	b004943a 	slli	r2,r22,16
1000e0cc:	0007883a 	mov	r3,zero
1000e0d0:	1404b03a 	or	r2,r2,r16
1000e0d4:	00005e06 	br	1000e250 <__udivdi3+0x2c8>
1000e0d8:	29c05b36 	bltu	r5,r7,1000e248 <__udivdi3+0x2c0>
1000e0dc:	00bfffd4 	movui	r2,65535
1000e0e0:	11c0672e 	bgeu	r2,r7,1000e280 <__udivdi3+0x2f8>
1000e0e4:	00804034 	movhi	r2,256
1000e0e8:	10bfffc4 	addi	r2,r2,-1
1000e0ec:	11c10a36 	bltu	r2,r7,1000e518 <__udivdi3+0x590>
1000e0f0:	00800404 	movi	r2,16
1000e0f4:	3886d83a 	srl	r3,r7,r2
1000e0f8:	01040074 	movhi	r4,4097
1000e0fc:	21121e04 	addi	r4,r4,18552
1000e100:	20c7883a 	add	r3,r4,r3
1000e104:	18c00003 	ldbu	r3,0(r3)
1000e108:	05c00804 	movi	r23,32
1000e10c:	1885883a 	add	r2,r3,r2
1000e110:	b8afc83a 	sub	r23,r23,r2
1000e114:	b800671e 	bne	r23,zero,1000e2b4 <__udivdi3+0x32c>
1000e118:	3c010536 	bltu	r7,r16,1000e530 <__udivdi3+0x5a8>
1000e11c:	9985403a 	cmpgeu	r2,r19,r6
1000e120:	0007883a 	mov	r3,zero
1000e124:	00004a06 	br	1000e250 <__udivdi3+0x2c8>
1000e128:	3000041e 	bne	r6,zero,1000e13c <__udivdi3+0x1b4>
1000e12c:	000b883a 	mov	r5,zero
1000e130:	01000044 	movi	r4,1
1000e134:	000ec400 	call	1000ec40 <__udivsi3>
1000e138:	1023883a 	mov	r17,r2
1000e13c:	00bfffd4 	movui	r2,65535
1000e140:	1440532e 	bgeu	r2,r17,1000e290 <__udivdi3+0x308>
1000e144:	00804034 	movhi	r2,256
1000e148:	10bfffc4 	addi	r2,r2,-1
1000e14c:	1440f436 	bltu	r2,r17,1000e520 <__udivdi3+0x598>
1000e150:	00800404 	movi	r2,16
1000e154:	8886d83a 	srl	r3,r17,r2
1000e158:	01040074 	movhi	r4,4097
1000e15c:	21121e04 	addi	r4,r4,18552
1000e160:	20c7883a 	add	r3,r4,r3
1000e164:	18c00003 	ldbu	r3,0(r3)
1000e168:	1885883a 	add	r2,r3,r2
1000e16c:	00c00804 	movi	r3,32
1000e170:	1887c83a 	sub	r3,r3,r2
1000e174:	1800a51e 	bne	r3,zero,1000e40c <__udivdi3+0x484>
1000e178:	882ad43a 	srli	r21,r17,16
1000e17c:	8461c83a 	sub	r16,r16,r17
1000e180:	8d3fffcc 	andi	r20,r17,65535
1000e184:	00c00044 	movi	r3,1
1000e188:	a80b883a 	mov	r5,r21
1000e18c:	8009883a 	mov	r4,r16
1000e190:	d8c00115 	stw	r3,4(sp)
1000e194:	000eca40 	call	1000eca4 <__umodsi3>
1000e198:	a80b883a 	mov	r5,r21
1000e19c:	8009883a 	mov	r4,r16
1000e1a0:	1027883a 	mov	r19,r2
1000e1a4:	000ec400 	call	1000ec40 <__udivsi3>
1000e1a8:	a00b883a 	mov	r5,r20
1000e1ac:	1009883a 	mov	r4,r2
1000e1b0:	102d883a 	mov	r22,r2
1000e1b4:	00046600 	call	10004660 <__mulsi3>
1000e1b8:	9826943a 	slli	r19,r19,16
1000e1bc:	900ed43a 	srli	r7,r18,16
1000e1c0:	d8c00117 	ldw	r3,4(sp)
1000e1c4:	3cceb03a 	or	r7,r7,r19
1000e1c8:	3880052e 	bgeu	r7,r2,1000e1e0 <__udivdi3+0x258>
1000e1cc:	3c4f883a 	add	r7,r7,r17
1000e1d0:	b13fffc4 	addi	r4,r22,-1
1000e1d4:	3c400136 	bltu	r7,r17,1000e1dc <__udivdi3+0x254>
1000e1d8:	3880e436 	bltu	r7,r2,1000e56c <__udivdi3+0x5e4>
1000e1dc:	202d883a 	mov	r22,r4
1000e1e0:	38a1c83a 	sub	r16,r7,r2
1000e1e4:	8009883a 	mov	r4,r16
1000e1e8:	a80b883a 	mov	r5,r21
1000e1ec:	d8c00115 	stw	r3,4(sp)
1000e1f0:	000eca40 	call	1000eca4 <__umodsi3>
1000e1f4:	1027883a 	mov	r19,r2
1000e1f8:	8009883a 	mov	r4,r16
1000e1fc:	a80b883a 	mov	r5,r21
1000e200:	9826943a 	slli	r19,r19,16
1000e204:	000ec400 	call	1000ec40 <__udivsi3>
1000e208:	a00b883a 	mov	r5,r20
1000e20c:	1009883a 	mov	r4,r2
1000e210:	94bfffcc 	andi	r18,r18,65535
1000e214:	1021883a 	mov	r16,r2
1000e218:	94e4b03a 	or	r18,r18,r19
1000e21c:	00046600 	call	10004660 <__mulsi3>
1000e220:	d8c00117 	ldw	r3,4(sp)
1000e224:	9080052e 	bgeu	r18,r2,1000e23c <__udivdi3+0x2b4>
1000e228:	8ca5883a 	add	r18,r17,r18
1000e22c:	813fffc4 	addi	r4,r16,-1
1000e230:	9440ad36 	bltu	r18,r17,1000e4e8 <__udivdi3+0x560>
1000e234:	9080ac2e 	bgeu	r18,r2,1000e4e8 <__udivdi3+0x560>
1000e238:	843fff84 	addi	r16,r16,-2
1000e23c:	b004943a 	slli	r2,r22,16
1000e240:	1404b03a 	or	r2,r2,r16
1000e244:	00000206 	br	1000e250 <__udivdi3+0x2c8>
1000e248:	0007883a 	mov	r3,zero
1000e24c:	0005883a 	mov	r2,zero
1000e250:	dfc00b17 	ldw	ra,44(sp)
1000e254:	df000a17 	ldw	fp,40(sp)
1000e258:	ddc00917 	ldw	r23,36(sp)
1000e25c:	dd800817 	ldw	r22,32(sp)
1000e260:	dd400717 	ldw	r21,28(sp)
1000e264:	dd000617 	ldw	r20,24(sp)
1000e268:	dcc00517 	ldw	r19,20(sp)
1000e26c:	dc800417 	ldw	r18,16(sp)
1000e270:	dc400317 	ldw	r17,12(sp)
1000e274:	dc000217 	ldw	r16,8(sp)
1000e278:	dec00c04 	addi	sp,sp,48
1000e27c:	f800283a 	ret
1000e280:	00803fc4 	movi	r2,255
1000e284:	11c5803a 	cmpltu	r2,r2,r7
1000e288:	100490fa 	slli	r2,r2,3
1000e28c:	003f9906 	br	1000e0f4 <__alt_data_end+0xf800e0f4>
1000e290:	00803fc4 	movi	r2,255
1000e294:	1445803a 	cmpltu	r2,r2,r17
1000e298:	100490fa 	slli	r2,r2,3
1000e29c:	003fad06 	br	1000e154 <__alt_data_end+0xf800e154>
1000e2a0:	00804034 	movhi	r2,256
1000e2a4:	10bfffc4 	addi	r2,r2,-1
1000e2a8:	11809f36 	bltu	r2,r6,1000e528 <__udivdi3+0x5a0>
1000e2ac:	00800404 	movi	r2,16
1000e2b0:	003f4c06 	br	1000dfe4 <__alt_data_end+0xf800dfe4>
1000e2b4:	3dce983a 	sll	r7,r7,r23
1000e2b8:	30b8d83a 	srl	fp,r6,r2
1000e2bc:	80a2d83a 	srl	r17,r16,r2
1000e2c0:	35cc983a 	sll	r6,r6,r23
1000e2c4:	3f38b03a 	or	fp,r7,fp
1000e2c8:	e024d43a 	srli	r18,fp,16
1000e2cc:	9884d83a 	srl	r2,r19,r2
1000e2d0:	85e0983a 	sll	r16,r16,r23
1000e2d4:	8809883a 	mov	r4,r17
1000e2d8:	900b883a 	mov	r5,r18
1000e2dc:	d9800015 	stw	r6,0(sp)
1000e2e0:	1420b03a 	or	r16,r2,r16
1000e2e4:	000eca40 	call	1000eca4 <__umodsi3>
1000e2e8:	900b883a 	mov	r5,r18
1000e2ec:	8809883a 	mov	r4,r17
1000e2f0:	1029883a 	mov	r20,r2
1000e2f4:	e5bfffcc 	andi	r22,fp,65535
1000e2f8:	000ec400 	call	1000ec40 <__udivsi3>
1000e2fc:	100b883a 	mov	r5,r2
1000e300:	b009883a 	mov	r4,r22
1000e304:	102b883a 	mov	r21,r2
1000e308:	00046600 	call	10004660 <__mulsi3>
1000e30c:	a028943a 	slli	r20,r20,16
1000e310:	8006d43a 	srli	r3,r16,16
1000e314:	1d06b03a 	or	r3,r3,r20
1000e318:	1880042e 	bgeu	r3,r2,1000e32c <__udivdi3+0x3a4>
1000e31c:	1f07883a 	add	r3,r3,fp
1000e320:	a93fffc4 	addi	r4,r21,-1
1000e324:	1f00892e 	bgeu	r3,fp,1000e54c <__udivdi3+0x5c4>
1000e328:	202b883a 	mov	r21,r4
1000e32c:	18a3c83a 	sub	r17,r3,r2
1000e330:	8809883a 	mov	r4,r17
1000e334:	900b883a 	mov	r5,r18
1000e338:	000eca40 	call	1000eca4 <__umodsi3>
1000e33c:	1029883a 	mov	r20,r2
1000e340:	8809883a 	mov	r4,r17
1000e344:	900b883a 	mov	r5,r18
1000e348:	a028943a 	slli	r20,r20,16
1000e34c:	000ec400 	call	1000ec40 <__udivsi3>
1000e350:	100b883a 	mov	r5,r2
1000e354:	b009883a 	mov	r4,r22
1000e358:	843fffcc 	andi	r16,r16,65535
1000e35c:	1023883a 	mov	r17,r2
1000e360:	8520b03a 	or	r16,r16,r20
1000e364:	00046600 	call	10004660 <__mulsi3>
1000e368:	8080042e 	bgeu	r16,r2,1000e37c <__udivdi3+0x3f4>
1000e36c:	8721883a 	add	r16,r16,fp
1000e370:	88ffffc4 	addi	r3,r17,-1
1000e374:	8700712e 	bgeu	r16,fp,1000e53c <__udivdi3+0x5b4>
1000e378:	1823883a 	mov	r17,r3
1000e37c:	a80e943a 	slli	r7,r21,16
1000e380:	d8c00017 	ldw	r3,0(sp)
1000e384:	80a1c83a 	sub	r16,r16,r2
1000e388:	3c64b03a 	or	r18,r7,r17
1000e38c:	1d3fffcc 	andi	r20,r3,65535
1000e390:	9022d43a 	srli	r17,r18,16
1000e394:	95bfffcc 	andi	r22,r18,65535
1000e398:	a00b883a 	mov	r5,r20
1000e39c:	b009883a 	mov	r4,r22
1000e3a0:	182ad43a 	srli	r21,r3,16
1000e3a4:	00046600 	call	10004660 <__mulsi3>
1000e3a8:	a00b883a 	mov	r5,r20
1000e3ac:	8809883a 	mov	r4,r17
1000e3b0:	1039883a 	mov	fp,r2
1000e3b4:	00046600 	call	10004660 <__mulsi3>
1000e3b8:	8809883a 	mov	r4,r17
1000e3bc:	a80b883a 	mov	r5,r21
1000e3c0:	1029883a 	mov	r20,r2
1000e3c4:	00046600 	call	10004660 <__mulsi3>
1000e3c8:	a80b883a 	mov	r5,r21
1000e3cc:	b009883a 	mov	r4,r22
1000e3d0:	1023883a 	mov	r17,r2
1000e3d4:	00046600 	call	10004660 <__mulsi3>
1000e3d8:	e006d43a 	srli	r3,fp,16
1000e3dc:	1505883a 	add	r2,r2,r20
1000e3e0:	1887883a 	add	r3,r3,r2
1000e3e4:	1d00022e 	bgeu	r3,r20,1000e3f0 <__udivdi3+0x468>
1000e3e8:	00800074 	movhi	r2,1
1000e3ec:	88a3883a 	add	r17,r17,r2
1000e3f0:	1804d43a 	srli	r2,r3,16
1000e3f4:	1463883a 	add	r17,r2,r17
1000e3f8:	84404436 	bltu	r16,r17,1000e50c <__udivdi3+0x584>
1000e3fc:	84403e26 	beq	r16,r17,1000e4f8 <__udivdi3+0x570>
1000e400:	9005883a 	mov	r2,r18
1000e404:	0007883a 	mov	r3,zero
1000e408:	003f9106 	br	1000e250 <__alt_data_end+0xf800e250>
1000e40c:	88e2983a 	sll	r17,r17,r3
1000e410:	80aed83a 	srl	r23,r16,r2
1000e414:	80e0983a 	sll	r16,r16,r3
1000e418:	882ad43a 	srli	r21,r17,16
1000e41c:	9884d83a 	srl	r2,r19,r2
1000e420:	b809883a 	mov	r4,r23
1000e424:	a80b883a 	mov	r5,r21
1000e428:	98e4983a 	sll	r18,r19,r3
1000e42c:	142cb03a 	or	r22,r2,r16
1000e430:	000eca40 	call	1000eca4 <__umodsi3>
1000e434:	b809883a 	mov	r4,r23
1000e438:	a80b883a 	mov	r5,r21
1000e43c:	1027883a 	mov	r19,r2
1000e440:	8d3fffcc 	andi	r20,r17,65535
1000e444:	000ec400 	call	1000ec40 <__udivsi3>
1000e448:	a009883a 	mov	r4,r20
1000e44c:	100b883a 	mov	r5,r2
1000e450:	102f883a 	mov	r23,r2
1000e454:	00046600 	call	10004660 <__mulsi3>
1000e458:	9826943a 	slli	r19,r19,16
1000e45c:	b008d43a 	srli	r4,r22,16
1000e460:	24c8b03a 	or	r4,r4,r19
1000e464:	2080062e 	bgeu	r4,r2,1000e480 <__udivdi3+0x4f8>
1000e468:	2449883a 	add	r4,r4,r17
1000e46c:	b8ffffc4 	addi	r3,r23,-1
1000e470:	24403c36 	bltu	r4,r17,1000e564 <__udivdi3+0x5dc>
1000e474:	20803b2e 	bgeu	r4,r2,1000e564 <__udivdi3+0x5dc>
1000e478:	bdffff84 	addi	r23,r23,-2
1000e47c:	2449883a 	add	r4,r4,r17
1000e480:	20a1c83a 	sub	r16,r4,r2
1000e484:	a80b883a 	mov	r5,r21
1000e488:	8009883a 	mov	r4,r16
1000e48c:	000eca40 	call	1000eca4 <__umodsi3>
1000e490:	a80b883a 	mov	r5,r21
1000e494:	8009883a 	mov	r4,r16
1000e498:	1027883a 	mov	r19,r2
1000e49c:	000ec400 	call	1000ec40 <__udivsi3>
1000e4a0:	a009883a 	mov	r4,r20
1000e4a4:	100b883a 	mov	r5,r2
1000e4a8:	9826943a 	slli	r19,r19,16
1000e4ac:	1039883a 	mov	fp,r2
1000e4b0:	00046600 	call	10004660 <__mulsi3>
1000e4b4:	b13fffcc 	andi	r4,r22,65535
1000e4b8:	24c8b03a 	or	r4,r4,r19
1000e4bc:	2080062e 	bgeu	r4,r2,1000e4d8 <__udivdi3+0x550>
1000e4c0:	2449883a 	add	r4,r4,r17
1000e4c4:	e0ffffc4 	addi	r3,fp,-1
1000e4c8:	24402436 	bltu	r4,r17,1000e55c <__udivdi3+0x5d4>
1000e4cc:	2080232e 	bgeu	r4,r2,1000e55c <__udivdi3+0x5d4>
1000e4d0:	e73fff84 	addi	fp,fp,-2
1000e4d4:	2449883a 	add	r4,r4,r17
1000e4d8:	b82e943a 	slli	r23,r23,16
1000e4dc:	20a1c83a 	sub	r16,r4,r2
1000e4e0:	bf06b03a 	or	r3,r23,fp
1000e4e4:	003f2806 	br	1000e188 <__alt_data_end+0xf800e188>
1000e4e8:	2021883a 	mov	r16,r4
1000e4ec:	003f5306 	br	1000e23c <__alt_data_end+0xf800e23c>
1000e4f0:	1821883a 	mov	r16,r3
1000e4f4:	003ef406 	br	1000e0c8 <__alt_data_end+0xf800e0c8>
1000e4f8:	1806943a 	slli	r3,r3,16
1000e4fc:	9de6983a 	sll	r19,r19,r23
1000e500:	e73fffcc 	andi	fp,fp,65535
1000e504:	1f07883a 	add	r3,r3,fp
1000e508:	98ffbd2e 	bgeu	r19,r3,1000e400 <__alt_data_end+0xf800e400>
1000e50c:	90bfffc4 	addi	r2,r18,-1
1000e510:	0007883a 	mov	r3,zero
1000e514:	003f4e06 	br	1000e250 <__alt_data_end+0xf800e250>
1000e518:	00800604 	movi	r2,24
1000e51c:	003ef506 	br	1000e0f4 <__alt_data_end+0xf800e0f4>
1000e520:	00800604 	movi	r2,24
1000e524:	003f0b06 	br	1000e154 <__alt_data_end+0xf800e154>
1000e528:	00800604 	movi	r2,24
1000e52c:	003ead06 	br	1000dfe4 <__alt_data_end+0xf800dfe4>
1000e530:	0007883a 	mov	r3,zero
1000e534:	00800044 	movi	r2,1
1000e538:	003f4506 	br	1000e250 <__alt_data_end+0xf800e250>
1000e53c:	80bf8e2e 	bgeu	r16,r2,1000e378 <__alt_data_end+0xf800e378>
1000e540:	8c7fff84 	addi	r17,r17,-2
1000e544:	8721883a 	add	r16,r16,fp
1000e548:	003f8c06 	br	1000e37c <__alt_data_end+0xf800e37c>
1000e54c:	18bf762e 	bgeu	r3,r2,1000e328 <__alt_data_end+0xf800e328>
1000e550:	ad7fff84 	addi	r21,r21,-2
1000e554:	1f07883a 	add	r3,r3,fp
1000e558:	003f7406 	br	1000e32c <__alt_data_end+0xf800e32c>
1000e55c:	1839883a 	mov	fp,r3
1000e560:	003fdd06 	br	1000e4d8 <__alt_data_end+0xf800e4d8>
1000e564:	182f883a 	mov	r23,r3
1000e568:	003fc506 	br	1000e480 <__alt_data_end+0xf800e480>
1000e56c:	b5bfff84 	addi	r22,r22,-2
1000e570:	3c4f883a 	add	r7,r7,r17
1000e574:	003f1a06 	br	1000e1e0 <__alt_data_end+0xf800e1e0>
1000e578:	b5bfff84 	addi	r22,r22,-2
1000e57c:	1c47883a 	add	r3,r3,r17
1000e580:	003ebc06 	br	1000e074 <__alt_data_end+0xf800e074>

1000e584 <__umoddi3>:
1000e584:	defff304 	addi	sp,sp,-52
1000e588:	df000b15 	stw	fp,44(sp)
1000e58c:	dc400415 	stw	r17,16(sp)
1000e590:	dc000315 	stw	r16,12(sp)
1000e594:	dfc00c15 	stw	ra,48(sp)
1000e598:	ddc00a15 	stw	r23,40(sp)
1000e59c:	dd800915 	stw	r22,36(sp)
1000e5a0:	dd400815 	stw	r21,32(sp)
1000e5a4:	dd000715 	stw	r20,28(sp)
1000e5a8:	dcc00615 	stw	r19,24(sp)
1000e5ac:	dc800515 	stw	r18,20(sp)
1000e5b0:	2021883a 	mov	r16,r4
1000e5b4:	2823883a 	mov	r17,r5
1000e5b8:	2839883a 	mov	fp,r5
1000e5bc:	3800401e 	bne	r7,zero,1000e6c0 <__umoddi3+0x13c>
1000e5c0:	3027883a 	mov	r19,r6
1000e5c4:	2029883a 	mov	r20,r4
1000e5c8:	2980552e 	bgeu	r5,r6,1000e720 <__umoddi3+0x19c>
1000e5cc:	00bfffd4 	movui	r2,65535
1000e5d0:	1180a236 	bltu	r2,r6,1000e85c <__umoddi3+0x2d8>
1000e5d4:	01003fc4 	movi	r4,255
1000e5d8:	2189803a 	cmpltu	r4,r4,r6
1000e5dc:	200890fa 	slli	r4,r4,3
1000e5e0:	3104d83a 	srl	r2,r6,r4
1000e5e4:	00c40074 	movhi	r3,4097
1000e5e8:	18d21e04 	addi	r3,r3,18552
1000e5ec:	1885883a 	add	r2,r3,r2
1000e5f0:	10c00003 	ldbu	r3,0(r2)
1000e5f4:	00800804 	movi	r2,32
1000e5f8:	1909883a 	add	r4,r3,r4
1000e5fc:	1125c83a 	sub	r18,r2,r4
1000e600:	90000526 	beq	r18,zero,1000e618 <__umoddi3+0x94>
1000e604:	8ca2983a 	sll	r17,r17,r18
1000e608:	8108d83a 	srl	r4,r16,r4
1000e60c:	34a6983a 	sll	r19,r6,r18
1000e610:	84a8983a 	sll	r20,r16,r18
1000e614:	2478b03a 	or	fp,r4,r17
1000e618:	982cd43a 	srli	r22,r19,16
1000e61c:	e009883a 	mov	r4,fp
1000e620:	9dffffcc 	andi	r23,r19,65535
1000e624:	b00b883a 	mov	r5,r22
1000e628:	000eca40 	call	1000eca4 <__umodsi3>
1000e62c:	b00b883a 	mov	r5,r22
1000e630:	e009883a 	mov	r4,fp
1000e634:	102b883a 	mov	r21,r2
1000e638:	000ec400 	call	1000ec40 <__udivsi3>
1000e63c:	100b883a 	mov	r5,r2
1000e640:	b809883a 	mov	r4,r23
1000e644:	00046600 	call	10004660 <__mulsi3>
1000e648:	a82a943a 	slli	r21,r21,16
1000e64c:	a006d43a 	srli	r3,r20,16
1000e650:	1d46b03a 	or	r3,r3,r21
1000e654:	1880032e 	bgeu	r3,r2,1000e664 <__umoddi3+0xe0>
1000e658:	1cc7883a 	add	r3,r3,r19
1000e65c:	1cc00136 	bltu	r3,r19,1000e664 <__umoddi3+0xe0>
1000e660:	18813136 	bltu	r3,r2,1000eb28 <__umoddi3+0x5a4>
1000e664:	18a1c83a 	sub	r16,r3,r2
1000e668:	b00b883a 	mov	r5,r22
1000e66c:	8009883a 	mov	r4,r16
1000e670:	000eca40 	call	1000eca4 <__umodsi3>
1000e674:	b00b883a 	mov	r5,r22
1000e678:	8009883a 	mov	r4,r16
1000e67c:	1023883a 	mov	r17,r2
1000e680:	000ec400 	call	1000ec40 <__udivsi3>
1000e684:	100b883a 	mov	r5,r2
1000e688:	b809883a 	mov	r4,r23
1000e68c:	8822943a 	slli	r17,r17,16
1000e690:	00046600 	call	10004660 <__mulsi3>
1000e694:	a0ffffcc 	andi	r3,r20,65535
1000e698:	1c46b03a 	or	r3,r3,r17
1000e69c:	1880042e 	bgeu	r3,r2,1000e6b0 <__umoddi3+0x12c>
1000e6a0:	1cc7883a 	add	r3,r3,r19
1000e6a4:	1cc00236 	bltu	r3,r19,1000e6b0 <__umoddi3+0x12c>
1000e6a8:	1880012e 	bgeu	r3,r2,1000e6b0 <__umoddi3+0x12c>
1000e6ac:	1cc7883a 	add	r3,r3,r19
1000e6b0:	1885c83a 	sub	r2,r3,r2
1000e6b4:	1484d83a 	srl	r2,r2,r18
1000e6b8:	0007883a 	mov	r3,zero
1000e6bc:	00005306 	br	1000e80c <__umoddi3+0x288>
1000e6c0:	29c05036 	bltu	r5,r7,1000e804 <__umoddi3+0x280>
1000e6c4:	00bfffd4 	movui	r2,65535
1000e6c8:	11c05c2e 	bgeu	r2,r7,1000e83c <__umoddi3+0x2b8>
1000e6cc:	00804034 	movhi	r2,256
1000e6d0:	10bfffc4 	addi	r2,r2,-1
1000e6d4:	11c10636 	bltu	r2,r7,1000eaf0 <__umoddi3+0x56c>
1000e6d8:	01000404 	movi	r4,16
1000e6dc:	3904d83a 	srl	r2,r7,r4
1000e6e0:	00c40074 	movhi	r3,4097
1000e6e4:	18d21e04 	addi	r3,r3,18552
1000e6e8:	1885883a 	add	r2,r3,r2
1000e6ec:	14c00003 	ldbu	r19,0(r2)
1000e6f0:	00c00804 	movi	r3,32
1000e6f4:	9927883a 	add	r19,r19,r4
1000e6f8:	1ce9c83a 	sub	r20,r3,r19
1000e6fc:	a0005c1e 	bne	r20,zero,1000e870 <__umoddi3+0x2ec>
1000e700:	3c400136 	bltu	r7,r17,1000e708 <__umoddi3+0x184>
1000e704:	81810a36 	bltu	r16,r6,1000eb30 <__umoddi3+0x5ac>
1000e708:	8185c83a 	sub	r2,r16,r6
1000e70c:	89e3c83a 	sub	r17,r17,r7
1000e710:	8089803a 	cmpltu	r4,r16,r2
1000e714:	8939c83a 	sub	fp,r17,r4
1000e718:	e007883a 	mov	r3,fp
1000e71c:	00003b06 	br	1000e80c <__umoddi3+0x288>
1000e720:	3000041e 	bne	r6,zero,1000e734 <__umoddi3+0x1b0>
1000e724:	000b883a 	mov	r5,zero
1000e728:	01000044 	movi	r4,1
1000e72c:	000ec400 	call	1000ec40 <__udivsi3>
1000e730:	1027883a 	mov	r19,r2
1000e734:	00bfffd4 	movui	r2,65535
1000e738:	14c0442e 	bgeu	r2,r19,1000e84c <__umoddi3+0x2c8>
1000e73c:	00804034 	movhi	r2,256
1000e740:	10bfffc4 	addi	r2,r2,-1
1000e744:	14c0ec36 	bltu	r2,r19,1000eaf8 <__umoddi3+0x574>
1000e748:	00800404 	movi	r2,16
1000e74c:	9886d83a 	srl	r3,r19,r2
1000e750:	01040074 	movhi	r4,4097
1000e754:	21121e04 	addi	r4,r4,18552
1000e758:	20c7883a 	add	r3,r4,r3
1000e75c:	18c00003 	ldbu	r3,0(r3)
1000e760:	1887883a 	add	r3,r3,r2
1000e764:	00800804 	movi	r2,32
1000e768:	10e5c83a 	sub	r18,r2,r3
1000e76c:	9000ab1e 	bne	r18,zero,1000ea1c <__umoddi3+0x498>
1000e770:	982cd43a 	srli	r22,r19,16
1000e774:	8ce3c83a 	sub	r17,r17,r19
1000e778:	9dffffcc 	andi	r23,r19,65535
1000e77c:	b00b883a 	mov	r5,r22
1000e780:	8809883a 	mov	r4,r17
1000e784:	000eca40 	call	1000eca4 <__umodsi3>
1000e788:	b00b883a 	mov	r5,r22
1000e78c:	8809883a 	mov	r4,r17
1000e790:	102b883a 	mov	r21,r2
1000e794:	000ec400 	call	1000ec40 <__udivsi3>
1000e798:	b80b883a 	mov	r5,r23
1000e79c:	1009883a 	mov	r4,r2
1000e7a0:	00046600 	call	10004660 <__mulsi3>
1000e7a4:	a82a943a 	slli	r21,r21,16
1000e7a8:	a006d43a 	srli	r3,r20,16
1000e7ac:	1d46b03a 	or	r3,r3,r21
1000e7b0:	1880042e 	bgeu	r3,r2,1000e7c4 <__umoddi3+0x240>
1000e7b4:	1cc7883a 	add	r3,r3,r19
1000e7b8:	1cc00236 	bltu	r3,r19,1000e7c4 <__umoddi3+0x240>
1000e7bc:	1880012e 	bgeu	r3,r2,1000e7c4 <__umoddi3+0x240>
1000e7c0:	1cc7883a 	add	r3,r3,r19
1000e7c4:	18a1c83a 	sub	r16,r3,r2
1000e7c8:	b00b883a 	mov	r5,r22
1000e7cc:	8009883a 	mov	r4,r16
1000e7d0:	000eca40 	call	1000eca4 <__umodsi3>
1000e7d4:	1023883a 	mov	r17,r2
1000e7d8:	b00b883a 	mov	r5,r22
1000e7dc:	8009883a 	mov	r4,r16
1000e7e0:	000ec400 	call	1000ec40 <__udivsi3>
1000e7e4:	8822943a 	slli	r17,r17,16
1000e7e8:	b80b883a 	mov	r5,r23
1000e7ec:	1009883a 	mov	r4,r2
1000e7f0:	00046600 	call	10004660 <__mulsi3>
1000e7f4:	a53fffcc 	andi	r20,r20,65535
1000e7f8:	a446b03a 	or	r3,r20,r17
1000e7fc:	18bfac2e 	bgeu	r3,r2,1000e6b0 <__alt_data_end+0xf800e6b0>
1000e800:	003fa706 	br	1000e6a0 <__alt_data_end+0xf800e6a0>
1000e804:	2005883a 	mov	r2,r4
1000e808:	2807883a 	mov	r3,r5
1000e80c:	dfc00c17 	ldw	ra,48(sp)
1000e810:	df000b17 	ldw	fp,44(sp)
1000e814:	ddc00a17 	ldw	r23,40(sp)
1000e818:	dd800917 	ldw	r22,36(sp)
1000e81c:	dd400817 	ldw	r21,32(sp)
1000e820:	dd000717 	ldw	r20,28(sp)
1000e824:	dcc00617 	ldw	r19,24(sp)
1000e828:	dc800517 	ldw	r18,20(sp)
1000e82c:	dc400417 	ldw	r17,16(sp)
1000e830:	dc000317 	ldw	r16,12(sp)
1000e834:	dec00d04 	addi	sp,sp,52
1000e838:	f800283a 	ret
1000e83c:	04c03fc4 	movi	r19,255
1000e840:	99c9803a 	cmpltu	r4,r19,r7
1000e844:	200890fa 	slli	r4,r4,3
1000e848:	003fa406 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000e84c:	00803fc4 	movi	r2,255
1000e850:	14c5803a 	cmpltu	r2,r2,r19
1000e854:	100490fa 	slli	r2,r2,3
1000e858:	003fbc06 	br	1000e74c <__alt_data_end+0xf800e74c>
1000e85c:	00804034 	movhi	r2,256
1000e860:	10bfffc4 	addi	r2,r2,-1
1000e864:	1180a636 	bltu	r2,r6,1000eb00 <__umoddi3+0x57c>
1000e868:	01000404 	movi	r4,16
1000e86c:	003f5c06 	br	1000e5e0 <__alt_data_end+0xf800e5e0>
1000e870:	3d0e983a 	sll	r7,r7,r20
1000e874:	34ead83a 	srl	r21,r6,r19
1000e878:	8cc6d83a 	srl	r3,r17,r19
1000e87c:	8d10983a 	sll	r8,r17,r20
1000e880:	3d6ab03a 	or	r21,r7,r21
1000e884:	a82cd43a 	srli	r22,r21,16
1000e888:	84e2d83a 	srl	r17,r16,r19
1000e88c:	1809883a 	mov	r4,r3
1000e890:	b00b883a 	mov	r5,r22
1000e894:	8a22b03a 	or	r17,r17,r8
1000e898:	3524983a 	sll	r18,r6,r20
1000e89c:	dc400015 	stw	r17,0(sp)
1000e8a0:	d8c00115 	stw	r3,4(sp)
1000e8a4:	000eca40 	call	1000eca4 <__umodsi3>
1000e8a8:	d8c00117 	ldw	r3,4(sp)
1000e8ac:	b00b883a 	mov	r5,r22
1000e8b0:	1039883a 	mov	fp,r2
1000e8b4:	1809883a 	mov	r4,r3
1000e8b8:	000ec400 	call	1000ec40 <__udivsi3>
1000e8bc:	adffffcc 	andi	r23,r21,65535
1000e8c0:	100b883a 	mov	r5,r2
1000e8c4:	b809883a 	mov	r4,r23
1000e8c8:	1023883a 	mov	r17,r2
1000e8cc:	00046600 	call	10004660 <__mulsi3>
1000e8d0:	d9400017 	ldw	r5,0(sp)
1000e8d4:	e008943a 	slli	r4,fp,16
1000e8d8:	8520983a 	sll	r16,r16,r20
1000e8dc:	2806d43a 	srli	r3,r5,16
1000e8e0:	1906b03a 	or	r3,r3,r4
1000e8e4:	1880042e 	bgeu	r3,r2,1000e8f8 <__umoddi3+0x374>
1000e8e8:	1d47883a 	add	r3,r3,r21
1000e8ec:	893fffc4 	addi	r4,r17,-1
1000e8f0:	1d40892e 	bgeu	r3,r21,1000eb18 <__umoddi3+0x594>
1000e8f4:	2023883a 	mov	r17,r4
1000e8f8:	18b9c83a 	sub	fp,r3,r2
1000e8fc:	b00b883a 	mov	r5,r22
1000e900:	e009883a 	mov	r4,fp
1000e904:	000eca40 	call	1000eca4 <__umodsi3>
1000e908:	b00b883a 	mov	r5,r22
1000e90c:	e009883a 	mov	r4,fp
1000e910:	d8800215 	stw	r2,8(sp)
1000e914:	000ec400 	call	1000ec40 <__udivsi3>
1000e918:	100b883a 	mov	r5,r2
1000e91c:	b809883a 	mov	r4,r23
1000e920:	102d883a 	mov	r22,r2
1000e924:	00046600 	call	10004660 <__mulsi3>
1000e928:	d9800217 	ldw	r6,8(sp)
1000e92c:	d8c00017 	ldw	r3,0(sp)
1000e930:	300c943a 	slli	r6,r6,16
1000e934:	1a3fffcc 	andi	r8,r3,65535
1000e938:	4190b03a 	or	r8,r8,r6
1000e93c:	4080042e 	bgeu	r8,r2,1000e950 <__umoddi3+0x3cc>
1000e940:	4551883a 	add	r8,r8,r21
1000e944:	b0ffffc4 	addi	r3,r22,-1
1000e948:	45406f2e 	bgeu	r8,r21,1000eb08 <__umoddi3+0x584>
1000e94c:	182d883a 	mov	r22,r3
1000e950:	880e943a 	slli	r7,r17,16
1000e954:	9006d43a 	srli	r3,r18,16
1000e958:	91bfffcc 	andi	r6,r18,65535
1000e95c:	3dacb03a 	or	r22,r7,r22
1000e960:	b02ed43a 	srli	r23,r22,16
1000e964:	b5bfffcc 	andi	r22,r22,65535
1000e968:	300b883a 	mov	r5,r6
1000e96c:	b009883a 	mov	r4,r22
1000e970:	40a3c83a 	sub	r17,r8,r2
1000e974:	d8c00115 	stw	r3,4(sp)
1000e978:	d9800215 	stw	r6,8(sp)
1000e97c:	00046600 	call	10004660 <__mulsi3>
1000e980:	d9800217 	ldw	r6,8(sp)
1000e984:	b809883a 	mov	r4,r23
1000e988:	1039883a 	mov	fp,r2
1000e98c:	300b883a 	mov	r5,r6
1000e990:	00046600 	call	10004660 <__mulsi3>
1000e994:	d8c00117 	ldw	r3,4(sp)
1000e998:	b809883a 	mov	r4,r23
1000e99c:	d8800215 	stw	r2,8(sp)
1000e9a0:	180b883a 	mov	r5,r3
1000e9a4:	00046600 	call	10004660 <__mulsi3>
1000e9a8:	d8c00117 	ldw	r3,4(sp)
1000e9ac:	b009883a 	mov	r4,r22
1000e9b0:	102f883a 	mov	r23,r2
1000e9b4:	180b883a 	mov	r5,r3
1000e9b8:	00046600 	call	10004660 <__mulsi3>
1000e9bc:	d9800217 	ldw	r6,8(sp)
1000e9c0:	e006d43a 	srli	r3,fp,16
1000e9c4:	1185883a 	add	r2,r2,r6
1000e9c8:	1885883a 	add	r2,r3,r2
1000e9cc:	1180022e 	bgeu	r2,r6,1000e9d8 <__umoddi3+0x454>
1000e9d0:	00c00074 	movhi	r3,1
1000e9d4:	b8ef883a 	add	r23,r23,r3
1000e9d8:	1006d43a 	srli	r3,r2,16
1000e9dc:	1004943a 	slli	r2,r2,16
1000e9e0:	e73fffcc 	andi	fp,fp,65535
1000e9e4:	1dc7883a 	add	r3,r3,r23
1000e9e8:	1739883a 	add	fp,r2,fp
1000e9ec:	88c03a36 	bltu	r17,r3,1000ead8 <__umoddi3+0x554>
1000e9f0:	88c05126 	beq	r17,r3,1000eb38 <__umoddi3+0x5b4>
1000e9f4:	88c9c83a 	sub	r4,r17,r3
1000e9f8:	e00f883a 	mov	r7,fp
1000e9fc:	81cfc83a 	sub	r7,r16,r7
1000ea00:	81c7803a 	cmpltu	r3,r16,r7
1000ea04:	20c7c83a 	sub	r3,r4,r3
1000ea08:	1cc4983a 	sll	r2,r3,r19
1000ea0c:	3d0ed83a 	srl	r7,r7,r20
1000ea10:	1d06d83a 	srl	r3,r3,r20
1000ea14:	11c4b03a 	or	r2,r2,r7
1000ea18:	003f7c06 	br	1000e80c <__alt_data_end+0xf800e80c>
1000ea1c:	9ca6983a 	sll	r19,r19,r18
1000ea20:	88f8d83a 	srl	fp,r17,r3
1000ea24:	80c4d83a 	srl	r2,r16,r3
1000ea28:	982cd43a 	srli	r22,r19,16
1000ea2c:	8ca2983a 	sll	r17,r17,r18
1000ea30:	e009883a 	mov	r4,fp
1000ea34:	b00b883a 	mov	r5,r22
1000ea38:	146ab03a 	or	r21,r2,r17
1000ea3c:	000eca40 	call	1000eca4 <__umodsi3>
1000ea40:	b00b883a 	mov	r5,r22
1000ea44:	e009883a 	mov	r4,fp
1000ea48:	1029883a 	mov	r20,r2
1000ea4c:	9dffffcc 	andi	r23,r19,65535
1000ea50:	000ec400 	call	1000ec40 <__udivsi3>
1000ea54:	b809883a 	mov	r4,r23
1000ea58:	100b883a 	mov	r5,r2
1000ea5c:	00046600 	call	10004660 <__mulsi3>
1000ea60:	a008943a 	slli	r4,r20,16
1000ea64:	a806d43a 	srli	r3,r21,16
1000ea68:	84a8983a 	sll	r20,r16,r18
1000ea6c:	1906b03a 	or	r3,r3,r4
1000ea70:	1880042e 	bgeu	r3,r2,1000ea84 <__umoddi3+0x500>
1000ea74:	1cc7883a 	add	r3,r3,r19
1000ea78:	1cc00236 	bltu	r3,r19,1000ea84 <__umoddi3+0x500>
1000ea7c:	1880012e 	bgeu	r3,r2,1000ea84 <__umoddi3+0x500>
1000ea80:	1cc7883a 	add	r3,r3,r19
1000ea84:	18a3c83a 	sub	r17,r3,r2
1000ea88:	b00b883a 	mov	r5,r22
1000ea8c:	8809883a 	mov	r4,r17
1000ea90:	000eca40 	call	1000eca4 <__umodsi3>
1000ea94:	b00b883a 	mov	r5,r22
1000ea98:	8809883a 	mov	r4,r17
1000ea9c:	1021883a 	mov	r16,r2
1000eaa0:	000ec400 	call	1000ec40 <__udivsi3>
1000eaa4:	100b883a 	mov	r5,r2
1000eaa8:	b809883a 	mov	r4,r23
1000eaac:	8020943a 	slli	r16,r16,16
1000eab0:	00046600 	call	10004660 <__mulsi3>
1000eab4:	a8ffffcc 	andi	r3,r21,65535
1000eab8:	1c06b03a 	or	r3,r3,r16
1000eabc:	1880042e 	bgeu	r3,r2,1000ead0 <__umoddi3+0x54c>
1000eac0:	1cc7883a 	add	r3,r3,r19
1000eac4:	1cc00236 	bltu	r3,r19,1000ead0 <__umoddi3+0x54c>
1000eac8:	1880012e 	bgeu	r3,r2,1000ead0 <__umoddi3+0x54c>
1000eacc:	1cc7883a 	add	r3,r3,r19
1000ead0:	18a3c83a 	sub	r17,r3,r2
1000ead4:	003f2906 	br	1000e77c <__alt_data_end+0xf800e77c>
1000ead8:	e48fc83a 	sub	r7,fp,r18
1000eadc:	1d49c83a 	sub	r4,r3,r21
1000eae0:	e1f9803a 	cmpltu	fp,fp,r7
1000eae4:	2739c83a 	sub	fp,r4,fp
1000eae8:	8f09c83a 	sub	r4,r17,fp
1000eaec:	003fc306 	br	1000e9fc <__alt_data_end+0xf800e9fc>
1000eaf0:	01000604 	movi	r4,24
1000eaf4:	003ef906 	br	1000e6dc <__alt_data_end+0xf800e6dc>
1000eaf8:	00800604 	movi	r2,24
1000eafc:	003f1306 	br	1000e74c <__alt_data_end+0xf800e74c>
1000eb00:	01000604 	movi	r4,24
1000eb04:	003eb606 	br	1000e5e0 <__alt_data_end+0xf800e5e0>
1000eb08:	40bf902e 	bgeu	r8,r2,1000e94c <__alt_data_end+0xf800e94c>
1000eb0c:	b5bfff84 	addi	r22,r22,-2
1000eb10:	4551883a 	add	r8,r8,r21
1000eb14:	003f8e06 	br	1000e950 <__alt_data_end+0xf800e950>
1000eb18:	18bf762e 	bgeu	r3,r2,1000e8f4 <__alt_data_end+0xf800e8f4>
1000eb1c:	8c7fff84 	addi	r17,r17,-2
1000eb20:	1d47883a 	add	r3,r3,r21
1000eb24:	003f7406 	br	1000e8f8 <__alt_data_end+0xf800e8f8>
1000eb28:	1cc7883a 	add	r3,r3,r19
1000eb2c:	003ecd06 	br	1000e664 <__alt_data_end+0xf800e664>
1000eb30:	8005883a 	mov	r2,r16
1000eb34:	003ef806 	br	1000e718 <__alt_data_end+0xf800e718>
1000eb38:	873fe736 	bltu	r16,fp,1000ead8 <__alt_data_end+0xf800ead8>
1000eb3c:	e00f883a 	mov	r7,fp
1000eb40:	0009883a 	mov	r4,zero
1000eb44:	003fad06 	br	1000e9fc <__alt_data_end+0xf800e9fc>

1000eb48 <__divsi3>:
1000eb48:	20001b16 	blt	r4,zero,1000ebb8 <__divsi3+0x70>
1000eb4c:	000f883a 	mov	r7,zero
1000eb50:	28001616 	blt	r5,zero,1000ebac <__divsi3+0x64>
1000eb54:	200d883a 	mov	r6,r4
1000eb58:	29001a2e 	bgeu	r5,r4,1000ebc4 <__divsi3+0x7c>
1000eb5c:	00800804 	movi	r2,32
1000eb60:	00c00044 	movi	r3,1
1000eb64:	00000106 	br	1000eb6c <__divsi3+0x24>
1000eb68:	10000d26 	beq	r2,zero,1000eba0 <__divsi3+0x58>
1000eb6c:	294b883a 	add	r5,r5,r5
1000eb70:	10bfffc4 	addi	r2,r2,-1
1000eb74:	18c7883a 	add	r3,r3,r3
1000eb78:	293ffb36 	bltu	r5,r4,1000eb68 <__alt_data_end+0xf800eb68>
1000eb7c:	0005883a 	mov	r2,zero
1000eb80:	18000726 	beq	r3,zero,1000eba0 <__divsi3+0x58>
1000eb84:	0005883a 	mov	r2,zero
1000eb88:	31400236 	bltu	r6,r5,1000eb94 <__divsi3+0x4c>
1000eb8c:	314dc83a 	sub	r6,r6,r5
1000eb90:	10c4b03a 	or	r2,r2,r3
1000eb94:	1806d07a 	srli	r3,r3,1
1000eb98:	280ad07a 	srli	r5,r5,1
1000eb9c:	183ffa1e 	bne	r3,zero,1000eb88 <__alt_data_end+0xf800eb88>
1000eba0:	38000126 	beq	r7,zero,1000eba8 <__divsi3+0x60>
1000eba4:	0085c83a 	sub	r2,zero,r2
1000eba8:	f800283a 	ret
1000ebac:	014bc83a 	sub	r5,zero,r5
1000ebb0:	39c0005c 	xori	r7,r7,1
1000ebb4:	003fe706 	br	1000eb54 <__alt_data_end+0xf800eb54>
1000ebb8:	0109c83a 	sub	r4,zero,r4
1000ebbc:	01c00044 	movi	r7,1
1000ebc0:	003fe306 	br	1000eb50 <__alt_data_end+0xf800eb50>
1000ebc4:	00c00044 	movi	r3,1
1000ebc8:	003fee06 	br	1000eb84 <__alt_data_end+0xf800eb84>

1000ebcc <__modsi3>:
1000ebcc:	20001716 	blt	r4,zero,1000ec2c <__modsi3+0x60>
1000ebd0:	000f883a 	mov	r7,zero
1000ebd4:	2005883a 	mov	r2,r4
1000ebd8:	28001216 	blt	r5,zero,1000ec24 <__modsi3+0x58>
1000ebdc:	2900162e 	bgeu	r5,r4,1000ec38 <__modsi3+0x6c>
1000ebe0:	01800804 	movi	r6,32
1000ebe4:	00c00044 	movi	r3,1
1000ebe8:	00000106 	br	1000ebf0 <__modsi3+0x24>
1000ebec:	30000a26 	beq	r6,zero,1000ec18 <__modsi3+0x4c>
1000ebf0:	294b883a 	add	r5,r5,r5
1000ebf4:	31bfffc4 	addi	r6,r6,-1
1000ebf8:	18c7883a 	add	r3,r3,r3
1000ebfc:	293ffb36 	bltu	r5,r4,1000ebec <__alt_data_end+0xf800ebec>
1000ec00:	18000526 	beq	r3,zero,1000ec18 <__modsi3+0x4c>
1000ec04:	1806d07a 	srli	r3,r3,1
1000ec08:	11400136 	bltu	r2,r5,1000ec10 <__modsi3+0x44>
1000ec0c:	1145c83a 	sub	r2,r2,r5
1000ec10:	280ad07a 	srli	r5,r5,1
1000ec14:	183ffb1e 	bne	r3,zero,1000ec04 <__alt_data_end+0xf800ec04>
1000ec18:	38000126 	beq	r7,zero,1000ec20 <__modsi3+0x54>
1000ec1c:	0085c83a 	sub	r2,zero,r2
1000ec20:	f800283a 	ret
1000ec24:	014bc83a 	sub	r5,zero,r5
1000ec28:	003fec06 	br	1000ebdc <__alt_data_end+0xf800ebdc>
1000ec2c:	0109c83a 	sub	r4,zero,r4
1000ec30:	01c00044 	movi	r7,1
1000ec34:	003fe706 	br	1000ebd4 <__alt_data_end+0xf800ebd4>
1000ec38:	00c00044 	movi	r3,1
1000ec3c:	003ff106 	br	1000ec04 <__alt_data_end+0xf800ec04>

1000ec40 <__udivsi3>:
1000ec40:	200d883a 	mov	r6,r4
1000ec44:	2900152e 	bgeu	r5,r4,1000ec9c <__udivsi3+0x5c>
1000ec48:	28001416 	blt	r5,zero,1000ec9c <__udivsi3+0x5c>
1000ec4c:	00800804 	movi	r2,32
1000ec50:	00c00044 	movi	r3,1
1000ec54:	00000206 	br	1000ec60 <__udivsi3+0x20>
1000ec58:	10000e26 	beq	r2,zero,1000ec94 <__udivsi3+0x54>
1000ec5c:	28000516 	blt	r5,zero,1000ec74 <__udivsi3+0x34>
1000ec60:	294b883a 	add	r5,r5,r5
1000ec64:	10bfffc4 	addi	r2,r2,-1
1000ec68:	18c7883a 	add	r3,r3,r3
1000ec6c:	293ffa36 	bltu	r5,r4,1000ec58 <__alt_data_end+0xf800ec58>
1000ec70:	18000826 	beq	r3,zero,1000ec94 <__udivsi3+0x54>
1000ec74:	0005883a 	mov	r2,zero
1000ec78:	31400236 	bltu	r6,r5,1000ec84 <__udivsi3+0x44>
1000ec7c:	314dc83a 	sub	r6,r6,r5
1000ec80:	10c4b03a 	or	r2,r2,r3
1000ec84:	1806d07a 	srli	r3,r3,1
1000ec88:	280ad07a 	srli	r5,r5,1
1000ec8c:	183ffa1e 	bne	r3,zero,1000ec78 <__alt_data_end+0xf800ec78>
1000ec90:	f800283a 	ret
1000ec94:	0005883a 	mov	r2,zero
1000ec98:	f800283a 	ret
1000ec9c:	00c00044 	movi	r3,1
1000eca0:	003ff406 	br	1000ec74 <__alt_data_end+0xf800ec74>

1000eca4 <__umodsi3>:
1000eca4:	2005883a 	mov	r2,r4
1000eca8:	2900122e 	bgeu	r5,r4,1000ecf4 <__umodsi3+0x50>
1000ecac:	28001116 	blt	r5,zero,1000ecf4 <__umodsi3+0x50>
1000ecb0:	01800804 	movi	r6,32
1000ecb4:	00c00044 	movi	r3,1
1000ecb8:	00000206 	br	1000ecc4 <__umodsi3+0x20>
1000ecbc:	30000c26 	beq	r6,zero,1000ecf0 <__umodsi3+0x4c>
1000ecc0:	28000516 	blt	r5,zero,1000ecd8 <__umodsi3+0x34>
1000ecc4:	294b883a 	add	r5,r5,r5
1000ecc8:	31bfffc4 	addi	r6,r6,-1
1000eccc:	18c7883a 	add	r3,r3,r3
1000ecd0:	293ffa36 	bltu	r5,r4,1000ecbc <__alt_data_end+0xf800ecbc>
1000ecd4:	18000626 	beq	r3,zero,1000ecf0 <__umodsi3+0x4c>
1000ecd8:	1806d07a 	srli	r3,r3,1
1000ecdc:	11400136 	bltu	r2,r5,1000ece4 <__umodsi3+0x40>
1000ece0:	1145c83a 	sub	r2,r2,r5
1000ece4:	280ad07a 	srli	r5,r5,1
1000ece8:	183ffb1e 	bne	r3,zero,1000ecd8 <__alt_data_end+0xf800ecd8>
1000ecec:	f800283a 	ret
1000ecf0:	f800283a 	ret
1000ecf4:	00c00044 	movi	r3,1
1000ecf8:	003ff706 	br	1000ecd8 <__alt_data_end+0xf800ecd8>

1000ecfc <__adddf3>:
1000ecfc:	02c00434 	movhi	r11,16
1000ed00:	5affffc4 	addi	r11,r11,-1
1000ed04:	2806d7fa 	srli	r3,r5,31
1000ed08:	2ad4703a 	and	r10,r5,r11
1000ed0c:	3ad2703a 	and	r9,r7,r11
1000ed10:	3804d53a 	srli	r2,r7,20
1000ed14:	3018d77a 	srli	r12,r6,29
1000ed18:	280ad53a 	srli	r5,r5,20
1000ed1c:	501490fa 	slli	r10,r10,3
1000ed20:	2010d77a 	srli	r8,r4,29
1000ed24:	481290fa 	slli	r9,r9,3
1000ed28:	380ed7fa 	srli	r7,r7,31
1000ed2c:	defffb04 	addi	sp,sp,-20
1000ed30:	dc800215 	stw	r18,8(sp)
1000ed34:	dc400115 	stw	r17,4(sp)
1000ed38:	dc000015 	stw	r16,0(sp)
1000ed3c:	dfc00415 	stw	ra,16(sp)
1000ed40:	dcc00315 	stw	r19,12(sp)
1000ed44:	1c803fcc 	andi	r18,r3,255
1000ed48:	2c01ffcc 	andi	r16,r5,2047
1000ed4c:	5210b03a 	or	r8,r10,r8
1000ed50:	202290fa 	slli	r17,r4,3
1000ed54:	1081ffcc 	andi	r2,r2,2047
1000ed58:	4b12b03a 	or	r9,r9,r12
1000ed5c:	300c90fa 	slli	r6,r6,3
1000ed60:	91c07526 	beq	r18,r7,1000ef38 <__adddf3+0x23c>
1000ed64:	8087c83a 	sub	r3,r16,r2
1000ed68:	00c0ab0e 	bge	zero,r3,1000f018 <__adddf3+0x31c>
1000ed6c:	10002a1e 	bne	r2,zero,1000ee18 <__adddf3+0x11c>
1000ed70:	4984b03a 	or	r2,r9,r6
1000ed74:	1000961e 	bne	r2,zero,1000efd0 <__adddf3+0x2d4>
1000ed78:	888001cc 	andi	r2,r17,7
1000ed7c:	10000726 	beq	r2,zero,1000ed9c <__adddf3+0xa0>
1000ed80:	888003cc 	andi	r2,r17,15
1000ed84:	00c00104 	movi	r3,4
1000ed88:	10c00426 	beq	r2,r3,1000ed9c <__adddf3+0xa0>
1000ed8c:	88c7883a 	add	r3,r17,r3
1000ed90:	1c63803a 	cmpltu	r17,r3,r17
1000ed94:	4451883a 	add	r8,r8,r17
1000ed98:	1823883a 	mov	r17,r3
1000ed9c:	4080202c 	andhi	r2,r8,128
1000eda0:	10005926 	beq	r2,zero,1000ef08 <__adddf3+0x20c>
1000eda4:	84000044 	addi	r16,r16,1
1000eda8:	0081ffc4 	movi	r2,2047
1000edac:	8080ba26 	beq	r16,r2,1000f098 <__adddf3+0x39c>
1000edb0:	00bfe034 	movhi	r2,65408
1000edb4:	10bfffc4 	addi	r2,r2,-1
1000edb8:	4090703a 	and	r8,r8,r2
1000edbc:	4004977a 	slli	r2,r8,29
1000edc0:	4010927a 	slli	r8,r8,9
1000edc4:	8822d0fa 	srli	r17,r17,3
1000edc8:	8401ffcc 	andi	r16,r16,2047
1000edcc:	4010d33a 	srli	r8,r8,12
1000edd0:	9007883a 	mov	r3,r18
1000edd4:	1444b03a 	or	r2,r2,r17
1000edd8:	8401ffcc 	andi	r16,r16,2047
1000eddc:	8020953a 	slli	r16,r16,20
1000ede0:	18c03fcc 	andi	r3,r3,255
1000ede4:	01000434 	movhi	r4,16
1000ede8:	213fffc4 	addi	r4,r4,-1
1000edec:	180697fa 	slli	r3,r3,31
1000edf0:	4110703a 	and	r8,r8,r4
1000edf4:	4410b03a 	or	r8,r8,r16
1000edf8:	40c6b03a 	or	r3,r8,r3
1000edfc:	dfc00417 	ldw	ra,16(sp)
1000ee00:	dcc00317 	ldw	r19,12(sp)
1000ee04:	dc800217 	ldw	r18,8(sp)
1000ee08:	dc400117 	ldw	r17,4(sp)
1000ee0c:	dc000017 	ldw	r16,0(sp)
1000ee10:	dec00504 	addi	sp,sp,20
1000ee14:	f800283a 	ret
1000ee18:	0081ffc4 	movi	r2,2047
1000ee1c:	80bfd626 	beq	r16,r2,1000ed78 <__alt_data_end+0xf800ed78>
1000ee20:	4a402034 	orhi	r9,r9,128
1000ee24:	00800e04 	movi	r2,56
1000ee28:	10c09f16 	blt	r2,r3,1000f0a8 <__adddf3+0x3ac>
1000ee2c:	008007c4 	movi	r2,31
1000ee30:	10c0c216 	blt	r2,r3,1000f13c <__adddf3+0x440>
1000ee34:	00800804 	movi	r2,32
1000ee38:	10c5c83a 	sub	r2,r2,r3
1000ee3c:	488a983a 	sll	r5,r9,r2
1000ee40:	30c8d83a 	srl	r4,r6,r3
1000ee44:	3084983a 	sll	r2,r6,r2
1000ee48:	48c6d83a 	srl	r3,r9,r3
1000ee4c:	290cb03a 	or	r6,r5,r4
1000ee50:	1004c03a 	cmpne	r2,r2,zero
1000ee54:	308cb03a 	or	r6,r6,r2
1000ee58:	898dc83a 	sub	r6,r17,r6
1000ee5c:	89a3803a 	cmpltu	r17,r17,r6
1000ee60:	40d1c83a 	sub	r8,r8,r3
1000ee64:	4451c83a 	sub	r8,r8,r17
1000ee68:	3023883a 	mov	r17,r6
1000ee6c:	4080202c 	andhi	r2,r8,128
1000ee70:	10002326 	beq	r2,zero,1000ef00 <__adddf3+0x204>
1000ee74:	04c02034 	movhi	r19,128
1000ee78:	9cffffc4 	addi	r19,r19,-1
1000ee7c:	44e6703a 	and	r19,r8,r19
1000ee80:	98007626 	beq	r19,zero,1000f05c <__adddf3+0x360>
1000ee84:	9809883a 	mov	r4,r19
1000ee88:	001153c0 	call	1001153c <__clzsi2>
1000ee8c:	10fffe04 	addi	r3,r2,-8
1000ee90:	010007c4 	movi	r4,31
1000ee94:	20c07716 	blt	r4,r3,1000f074 <__adddf3+0x378>
1000ee98:	00800804 	movi	r2,32
1000ee9c:	10c5c83a 	sub	r2,r2,r3
1000eea0:	8884d83a 	srl	r2,r17,r2
1000eea4:	98d0983a 	sll	r8,r19,r3
1000eea8:	88e2983a 	sll	r17,r17,r3
1000eeac:	1204b03a 	or	r2,r2,r8
1000eeb0:	1c007416 	blt	r3,r16,1000f084 <__adddf3+0x388>
1000eeb4:	1c21c83a 	sub	r16,r3,r16
1000eeb8:	82000044 	addi	r8,r16,1
1000eebc:	00c007c4 	movi	r3,31
1000eec0:	1a009116 	blt	r3,r8,1000f108 <__adddf3+0x40c>
1000eec4:	00c00804 	movi	r3,32
1000eec8:	1a07c83a 	sub	r3,r3,r8
1000eecc:	8a08d83a 	srl	r4,r17,r8
1000eed0:	88e2983a 	sll	r17,r17,r3
1000eed4:	10c6983a 	sll	r3,r2,r3
1000eed8:	1210d83a 	srl	r8,r2,r8
1000eedc:	8804c03a 	cmpne	r2,r17,zero
1000eee0:	1906b03a 	or	r3,r3,r4
1000eee4:	18a2b03a 	or	r17,r3,r2
1000eee8:	0021883a 	mov	r16,zero
1000eeec:	003fa206 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000eef0:	1890b03a 	or	r8,r3,r2
1000eef4:	40017d26 	beq	r8,zero,1000f4ec <__adddf3+0x7f0>
1000eef8:	1011883a 	mov	r8,r2
1000eefc:	1823883a 	mov	r17,r3
1000ef00:	888001cc 	andi	r2,r17,7
1000ef04:	103f9e1e 	bne	r2,zero,1000ed80 <__alt_data_end+0xf800ed80>
1000ef08:	4004977a 	slli	r2,r8,29
1000ef0c:	8822d0fa 	srli	r17,r17,3
1000ef10:	4010d0fa 	srli	r8,r8,3
1000ef14:	9007883a 	mov	r3,r18
1000ef18:	1444b03a 	or	r2,r2,r17
1000ef1c:	0101ffc4 	movi	r4,2047
1000ef20:	81002426 	beq	r16,r4,1000efb4 <__adddf3+0x2b8>
1000ef24:	8120703a 	and	r16,r16,r4
1000ef28:	01000434 	movhi	r4,16
1000ef2c:	213fffc4 	addi	r4,r4,-1
1000ef30:	4110703a 	and	r8,r8,r4
1000ef34:	003fa806 	br	1000edd8 <__alt_data_end+0xf800edd8>
1000ef38:	8089c83a 	sub	r4,r16,r2
1000ef3c:	01005e0e 	bge	zero,r4,1000f0b8 <__adddf3+0x3bc>
1000ef40:	10002b26 	beq	r2,zero,1000eff0 <__adddf3+0x2f4>
1000ef44:	0081ffc4 	movi	r2,2047
1000ef48:	80bf8b26 	beq	r16,r2,1000ed78 <__alt_data_end+0xf800ed78>
1000ef4c:	4a402034 	orhi	r9,r9,128
1000ef50:	00800e04 	movi	r2,56
1000ef54:	1100a40e 	bge	r2,r4,1000f1e8 <__adddf3+0x4ec>
1000ef58:	498cb03a 	or	r6,r9,r6
1000ef5c:	300ac03a 	cmpne	r5,r6,zero
1000ef60:	0013883a 	mov	r9,zero
1000ef64:	2c4b883a 	add	r5,r5,r17
1000ef68:	2c63803a 	cmpltu	r17,r5,r17
1000ef6c:	4a11883a 	add	r8,r9,r8
1000ef70:	8a11883a 	add	r8,r17,r8
1000ef74:	2823883a 	mov	r17,r5
1000ef78:	4080202c 	andhi	r2,r8,128
1000ef7c:	103fe026 	beq	r2,zero,1000ef00 <__alt_data_end+0xf800ef00>
1000ef80:	84000044 	addi	r16,r16,1
1000ef84:	0081ffc4 	movi	r2,2047
1000ef88:	8080d226 	beq	r16,r2,1000f2d4 <__adddf3+0x5d8>
1000ef8c:	00bfe034 	movhi	r2,65408
1000ef90:	10bfffc4 	addi	r2,r2,-1
1000ef94:	4090703a 	and	r8,r8,r2
1000ef98:	880ad07a 	srli	r5,r17,1
1000ef9c:	400897fa 	slli	r4,r8,31
1000efa0:	88c0004c 	andi	r3,r17,1
1000efa4:	28e2b03a 	or	r17,r5,r3
1000efa8:	4010d07a 	srli	r8,r8,1
1000efac:	2462b03a 	or	r17,r4,r17
1000efb0:	003f7106 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000efb4:	4088b03a 	or	r4,r8,r2
1000efb8:	20014526 	beq	r4,zero,1000f4d0 <__adddf3+0x7d4>
1000efbc:	01000434 	movhi	r4,16
1000efc0:	42000234 	orhi	r8,r8,8
1000efc4:	213fffc4 	addi	r4,r4,-1
1000efc8:	4110703a 	and	r8,r8,r4
1000efcc:	003f8206 	br	1000edd8 <__alt_data_end+0xf800edd8>
1000efd0:	18ffffc4 	addi	r3,r3,-1
1000efd4:	1800491e 	bne	r3,zero,1000f0fc <__adddf3+0x400>
1000efd8:	898bc83a 	sub	r5,r17,r6
1000efdc:	8963803a 	cmpltu	r17,r17,r5
1000efe0:	4251c83a 	sub	r8,r8,r9
1000efe4:	4451c83a 	sub	r8,r8,r17
1000efe8:	2823883a 	mov	r17,r5
1000efec:	003f9f06 	br	1000ee6c <__alt_data_end+0xf800ee6c>
1000eff0:	4984b03a 	or	r2,r9,r6
1000eff4:	103f6026 	beq	r2,zero,1000ed78 <__alt_data_end+0xf800ed78>
1000eff8:	213fffc4 	addi	r4,r4,-1
1000effc:	2000931e 	bne	r4,zero,1000f24c <__adddf3+0x550>
1000f000:	898d883a 	add	r6,r17,r6
1000f004:	3463803a 	cmpltu	r17,r6,r17
1000f008:	4251883a 	add	r8,r8,r9
1000f00c:	8a11883a 	add	r8,r17,r8
1000f010:	3023883a 	mov	r17,r6
1000f014:	003fd806 	br	1000ef78 <__alt_data_end+0xf800ef78>
1000f018:	1800541e 	bne	r3,zero,1000f16c <__adddf3+0x470>
1000f01c:	80800044 	addi	r2,r16,1
1000f020:	1081ffcc 	andi	r2,r2,2047
1000f024:	00c00044 	movi	r3,1
1000f028:	1880a00e 	bge	r3,r2,1000f2ac <__adddf3+0x5b0>
1000f02c:	8989c83a 	sub	r4,r17,r6
1000f030:	8905803a 	cmpltu	r2,r17,r4
1000f034:	4267c83a 	sub	r19,r8,r9
1000f038:	98a7c83a 	sub	r19,r19,r2
1000f03c:	9880202c 	andhi	r2,r19,128
1000f040:	10006326 	beq	r2,zero,1000f1d0 <__adddf3+0x4d4>
1000f044:	3463c83a 	sub	r17,r6,r17
1000f048:	4a07c83a 	sub	r3,r9,r8
1000f04c:	344d803a 	cmpltu	r6,r6,r17
1000f050:	19a7c83a 	sub	r19,r3,r6
1000f054:	3825883a 	mov	r18,r7
1000f058:	983f8a1e 	bne	r19,zero,1000ee84 <__alt_data_end+0xf800ee84>
1000f05c:	8809883a 	mov	r4,r17
1000f060:	001153c0 	call	1001153c <__clzsi2>
1000f064:	10800804 	addi	r2,r2,32
1000f068:	10fffe04 	addi	r3,r2,-8
1000f06c:	010007c4 	movi	r4,31
1000f070:	20ff890e 	bge	r4,r3,1000ee98 <__alt_data_end+0xf800ee98>
1000f074:	10bff604 	addi	r2,r2,-40
1000f078:	8884983a 	sll	r2,r17,r2
1000f07c:	0023883a 	mov	r17,zero
1000f080:	1c3f8c0e 	bge	r3,r16,1000eeb4 <__alt_data_end+0xf800eeb4>
1000f084:	023fe034 	movhi	r8,65408
1000f088:	423fffc4 	addi	r8,r8,-1
1000f08c:	80e1c83a 	sub	r16,r16,r3
1000f090:	1210703a 	and	r8,r2,r8
1000f094:	003f3806 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f098:	9007883a 	mov	r3,r18
1000f09c:	0011883a 	mov	r8,zero
1000f0a0:	0005883a 	mov	r2,zero
1000f0a4:	003f4c06 	br	1000edd8 <__alt_data_end+0xf800edd8>
1000f0a8:	498cb03a 	or	r6,r9,r6
1000f0ac:	300cc03a 	cmpne	r6,r6,zero
1000f0b0:	0007883a 	mov	r3,zero
1000f0b4:	003f6806 	br	1000ee58 <__alt_data_end+0xf800ee58>
1000f0b8:	20009c1e 	bne	r4,zero,1000f32c <__adddf3+0x630>
1000f0bc:	80800044 	addi	r2,r16,1
1000f0c0:	1141ffcc 	andi	r5,r2,2047
1000f0c4:	01000044 	movi	r4,1
1000f0c8:	2140670e 	bge	r4,r5,1000f268 <__adddf3+0x56c>
1000f0cc:	0101ffc4 	movi	r4,2047
1000f0d0:	11007f26 	beq	r2,r4,1000f2d0 <__adddf3+0x5d4>
1000f0d4:	898d883a 	add	r6,r17,r6
1000f0d8:	4247883a 	add	r3,r8,r9
1000f0dc:	3451803a 	cmpltu	r8,r6,r17
1000f0e0:	40d1883a 	add	r8,r8,r3
1000f0e4:	402297fa 	slli	r17,r8,31
1000f0e8:	300cd07a 	srli	r6,r6,1
1000f0ec:	4010d07a 	srli	r8,r8,1
1000f0f0:	1021883a 	mov	r16,r2
1000f0f4:	89a2b03a 	or	r17,r17,r6
1000f0f8:	003f1f06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f0fc:	0081ffc4 	movi	r2,2047
1000f100:	80bf481e 	bne	r16,r2,1000ee24 <__alt_data_end+0xf800ee24>
1000f104:	003f1c06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f108:	843ff844 	addi	r16,r16,-31
1000f10c:	01000804 	movi	r4,32
1000f110:	1406d83a 	srl	r3,r2,r16
1000f114:	41005026 	beq	r8,r4,1000f258 <__adddf3+0x55c>
1000f118:	01001004 	movi	r4,64
1000f11c:	2211c83a 	sub	r8,r4,r8
1000f120:	1204983a 	sll	r2,r2,r8
1000f124:	88a2b03a 	or	r17,r17,r2
1000f128:	8822c03a 	cmpne	r17,r17,zero
1000f12c:	1c62b03a 	or	r17,r3,r17
1000f130:	0011883a 	mov	r8,zero
1000f134:	0021883a 	mov	r16,zero
1000f138:	003f7106 	br	1000ef00 <__alt_data_end+0xf800ef00>
1000f13c:	193ff804 	addi	r4,r3,-32
1000f140:	00800804 	movi	r2,32
1000f144:	4908d83a 	srl	r4,r9,r4
1000f148:	18804526 	beq	r3,r2,1000f260 <__adddf3+0x564>
1000f14c:	00801004 	movi	r2,64
1000f150:	10c5c83a 	sub	r2,r2,r3
1000f154:	4886983a 	sll	r3,r9,r2
1000f158:	198cb03a 	or	r6,r3,r6
1000f15c:	300cc03a 	cmpne	r6,r6,zero
1000f160:	218cb03a 	or	r6,r4,r6
1000f164:	0007883a 	mov	r3,zero
1000f168:	003f3b06 	br	1000ee58 <__alt_data_end+0xf800ee58>
1000f16c:	80002a26 	beq	r16,zero,1000f218 <__adddf3+0x51c>
1000f170:	0101ffc4 	movi	r4,2047
1000f174:	11006826 	beq	r2,r4,1000f318 <__adddf3+0x61c>
1000f178:	00c7c83a 	sub	r3,zero,r3
1000f17c:	42002034 	orhi	r8,r8,128
1000f180:	01000e04 	movi	r4,56
1000f184:	20c07c16 	blt	r4,r3,1000f378 <__adddf3+0x67c>
1000f188:	010007c4 	movi	r4,31
1000f18c:	20c0da16 	blt	r4,r3,1000f4f8 <__adddf3+0x7fc>
1000f190:	01000804 	movi	r4,32
1000f194:	20c9c83a 	sub	r4,r4,r3
1000f198:	4114983a 	sll	r10,r8,r4
1000f19c:	88cad83a 	srl	r5,r17,r3
1000f1a0:	8908983a 	sll	r4,r17,r4
1000f1a4:	40c6d83a 	srl	r3,r8,r3
1000f1a8:	5162b03a 	or	r17,r10,r5
1000f1ac:	2008c03a 	cmpne	r4,r4,zero
1000f1b0:	8922b03a 	or	r17,r17,r4
1000f1b4:	3463c83a 	sub	r17,r6,r17
1000f1b8:	48c7c83a 	sub	r3,r9,r3
1000f1bc:	344d803a 	cmpltu	r6,r6,r17
1000f1c0:	1991c83a 	sub	r8,r3,r6
1000f1c4:	1021883a 	mov	r16,r2
1000f1c8:	3825883a 	mov	r18,r7
1000f1cc:	003f2706 	br	1000ee6c <__alt_data_end+0xf800ee6c>
1000f1d0:	24d0b03a 	or	r8,r4,r19
1000f1d4:	40001b1e 	bne	r8,zero,1000f244 <__adddf3+0x548>
1000f1d8:	0005883a 	mov	r2,zero
1000f1dc:	0007883a 	mov	r3,zero
1000f1e0:	0021883a 	mov	r16,zero
1000f1e4:	003f4d06 	br	1000ef1c <__alt_data_end+0xf800ef1c>
1000f1e8:	008007c4 	movi	r2,31
1000f1ec:	11003c16 	blt	r2,r4,1000f2e0 <__adddf3+0x5e4>
1000f1f0:	00800804 	movi	r2,32
1000f1f4:	1105c83a 	sub	r2,r2,r4
1000f1f8:	488e983a 	sll	r7,r9,r2
1000f1fc:	310ad83a 	srl	r5,r6,r4
1000f200:	3084983a 	sll	r2,r6,r2
1000f204:	4912d83a 	srl	r9,r9,r4
1000f208:	394ab03a 	or	r5,r7,r5
1000f20c:	1004c03a 	cmpne	r2,r2,zero
1000f210:	288ab03a 	or	r5,r5,r2
1000f214:	003f5306 	br	1000ef64 <__alt_data_end+0xf800ef64>
1000f218:	4448b03a 	or	r4,r8,r17
1000f21c:	20003e26 	beq	r4,zero,1000f318 <__adddf3+0x61c>
1000f220:	00c6303a 	nor	r3,zero,r3
1000f224:	18003a1e 	bne	r3,zero,1000f310 <__adddf3+0x614>
1000f228:	3463c83a 	sub	r17,r6,r17
1000f22c:	4a07c83a 	sub	r3,r9,r8
1000f230:	344d803a 	cmpltu	r6,r6,r17
1000f234:	1991c83a 	sub	r8,r3,r6
1000f238:	1021883a 	mov	r16,r2
1000f23c:	3825883a 	mov	r18,r7
1000f240:	003f0a06 	br	1000ee6c <__alt_data_end+0xf800ee6c>
1000f244:	2023883a 	mov	r17,r4
1000f248:	003f0d06 	br	1000ee80 <__alt_data_end+0xf800ee80>
1000f24c:	0081ffc4 	movi	r2,2047
1000f250:	80bf3f1e 	bne	r16,r2,1000ef50 <__alt_data_end+0xf800ef50>
1000f254:	003ec806 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f258:	0005883a 	mov	r2,zero
1000f25c:	003fb106 	br	1000f124 <__alt_data_end+0xf800f124>
1000f260:	0007883a 	mov	r3,zero
1000f264:	003fbc06 	br	1000f158 <__alt_data_end+0xf800f158>
1000f268:	4444b03a 	or	r2,r8,r17
1000f26c:	8000871e 	bne	r16,zero,1000f48c <__adddf3+0x790>
1000f270:	1000ba26 	beq	r2,zero,1000f55c <__adddf3+0x860>
1000f274:	4984b03a 	or	r2,r9,r6
1000f278:	103ebf26 	beq	r2,zero,1000ed78 <__alt_data_end+0xf800ed78>
1000f27c:	8985883a 	add	r2,r17,r6
1000f280:	4247883a 	add	r3,r8,r9
1000f284:	1451803a 	cmpltu	r8,r2,r17
1000f288:	40d1883a 	add	r8,r8,r3
1000f28c:	40c0202c 	andhi	r3,r8,128
1000f290:	1023883a 	mov	r17,r2
1000f294:	183f1a26 	beq	r3,zero,1000ef00 <__alt_data_end+0xf800ef00>
1000f298:	00bfe034 	movhi	r2,65408
1000f29c:	10bfffc4 	addi	r2,r2,-1
1000f2a0:	2021883a 	mov	r16,r4
1000f2a4:	4090703a 	and	r8,r8,r2
1000f2a8:	003eb306 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f2ac:	4444b03a 	or	r2,r8,r17
1000f2b0:	8000291e 	bne	r16,zero,1000f358 <__adddf3+0x65c>
1000f2b4:	10004b1e 	bne	r2,zero,1000f3e4 <__adddf3+0x6e8>
1000f2b8:	4990b03a 	or	r8,r9,r6
1000f2bc:	40008b26 	beq	r8,zero,1000f4ec <__adddf3+0x7f0>
1000f2c0:	4811883a 	mov	r8,r9
1000f2c4:	3023883a 	mov	r17,r6
1000f2c8:	3825883a 	mov	r18,r7
1000f2cc:	003eaa06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f2d0:	1021883a 	mov	r16,r2
1000f2d4:	0011883a 	mov	r8,zero
1000f2d8:	0005883a 	mov	r2,zero
1000f2dc:	003f0f06 	br	1000ef1c <__alt_data_end+0xf800ef1c>
1000f2e0:	217ff804 	addi	r5,r4,-32
1000f2e4:	00800804 	movi	r2,32
1000f2e8:	494ad83a 	srl	r5,r9,r5
1000f2ec:	20807d26 	beq	r4,r2,1000f4e4 <__adddf3+0x7e8>
1000f2f0:	00801004 	movi	r2,64
1000f2f4:	1109c83a 	sub	r4,r2,r4
1000f2f8:	4912983a 	sll	r9,r9,r4
1000f2fc:	498cb03a 	or	r6,r9,r6
1000f300:	300cc03a 	cmpne	r6,r6,zero
1000f304:	298ab03a 	or	r5,r5,r6
1000f308:	0013883a 	mov	r9,zero
1000f30c:	003f1506 	br	1000ef64 <__alt_data_end+0xf800ef64>
1000f310:	0101ffc4 	movi	r4,2047
1000f314:	113f9a1e 	bne	r2,r4,1000f180 <__alt_data_end+0xf800f180>
1000f318:	4811883a 	mov	r8,r9
1000f31c:	3023883a 	mov	r17,r6
1000f320:	1021883a 	mov	r16,r2
1000f324:	3825883a 	mov	r18,r7
1000f328:	003e9306 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f32c:	8000161e 	bne	r16,zero,1000f388 <__adddf3+0x68c>
1000f330:	444ab03a 	or	r5,r8,r17
1000f334:	28005126 	beq	r5,zero,1000f47c <__adddf3+0x780>
1000f338:	0108303a 	nor	r4,zero,r4
1000f33c:	20004d1e 	bne	r4,zero,1000f474 <__adddf3+0x778>
1000f340:	89a3883a 	add	r17,r17,r6
1000f344:	4253883a 	add	r9,r8,r9
1000f348:	898d803a 	cmpltu	r6,r17,r6
1000f34c:	3251883a 	add	r8,r6,r9
1000f350:	1021883a 	mov	r16,r2
1000f354:	003f0806 	br	1000ef78 <__alt_data_end+0xf800ef78>
1000f358:	1000301e 	bne	r2,zero,1000f41c <__adddf3+0x720>
1000f35c:	4984b03a 	or	r2,r9,r6
1000f360:	10007126 	beq	r2,zero,1000f528 <__adddf3+0x82c>
1000f364:	4811883a 	mov	r8,r9
1000f368:	3023883a 	mov	r17,r6
1000f36c:	3825883a 	mov	r18,r7
1000f370:	0401ffc4 	movi	r16,2047
1000f374:	003e8006 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f378:	4462b03a 	or	r17,r8,r17
1000f37c:	8822c03a 	cmpne	r17,r17,zero
1000f380:	0007883a 	mov	r3,zero
1000f384:	003f8b06 	br	1000f1b4 <__alt_data_end+0xf800f1b4>
1000f388:	0141ffc4 	movi	r5,2047
1000f38c:	11403b26 	beq	r2,r5,1000f47c <__adddf3+0x780>
1000f390:	0109c83a 	sub	r4,zero,r4
1000f394:	42002034 	orhi	r8,r8,128
1000f398:	01400e04 	movi	r5,56
1000f39c:	29006716 	blt	r5,r4,1000f53c <__adddf3+0x840>
1000f3a0:	014007c4 	movi	r5,31
1000f3a4:	29007016 	blt	r5,r4,1000f568 <__adddf3+0x86c>
1000f3a8:	01400804 	movi	r5,32
1000f3ac:	290bc83a 	sub	r5,r5,r4
1000f3b0:	4154983a 	sll	r10,r8,r5
1000f3b4:	890ed83a 	srl	r7,r17,r4
1000f3b8:	894a983a 	sll	r5,r17,r5
1000f3bc:	4108d83a 	srl	r4,r8,r4
1000f3c0:	51e2b03a 	or	r17,r10,r7
1000f3c4:	280ac03a 	cmpne	r5,r5,zero
1000f3c8:	8962b03a 	or	r17,r17,r5
1000f3cc:	89a3883a 	add	r17,r17,r6
1000f3d0:	2253883a 	add	r9,r4,r9
1000f3d4:	898d803a 	cmpltu	r6,r17,r6
1000f3d8:	3251883a 	add	r8,r6,r9
1000f3dc:	1021883a 	mov	r16,r2
1000f3e0:	003ee506 	br	1000ef78 <__alt_data_end+0xf800ef78>
1000f3e4:	4984b03a 	or	r2,r9,r6
1000f3e8:	103e6326 	beq	r2,zero,1000ed78 <__alt_data_end+0xf800ed78>
1000f3ec:	8987c83a 	sub	r3,r17,r6
1000f3f0:	88c9803a 	cmpltu	r4,r17,r3
1000f3f4:	4245c83a 	sub	r2,r8,r9
1000f3f8:	1105c83a 	sub	r2,r2,r4
1000f3fc:	1100202c 	andhi	r4,r2,128
1000f400:	203ebb26 	beq	r4,zero,1000eef0 <__alt_data_end+0xf800eef0>
1000f404:	3463c83a 	sub	r17,r6,r17
1000f408:	4a07c83a 	sub	r3,r9,r8
1000f40c:	344d803a 	cmpltu	r6,r6,r17
1000f410:	1991c83a 	sub	r8,r3,r6
1000f414:	3825883a 	mov	r18,r7
1000f418:	003e5706 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f41c:	4984b03a 	or	r2,r9,r6
1000f420:	10002e26 	beq	r2,zero,1000f4dc <__adddf3+0x7e0>
1000f424:	4004d0fa 	srli	r2,r8,3
1000f428:	8822d0fa 	srli	r17,r17,3
1000f42c:	4010977a 	slli	r8,r8,29
1000f430:	10c0022c 	andhi	r3,r2,8
1000f434:	4462b03a 	or	r17,r8,r17
1000f438:	18000826 	beq	r3,zero,1000f45c <__adddf3+0x760>
1000f43c:	4808d0fa 	srli	r4,r9,3
1000f440:	20c0022c 	andhi	r3,r4,8
1000f444:	1800051e 	bne	r3,zero,1000f45c <__adddf3+0x760>
1000f448:	300cd0fa 	srli	r6,r6,3
1000f44c:	4806977a 	slli	r3,r9,29
1000f450:	2005883a 	mov	r2,r4
1000f454:	3825883a 	mov	r18,r7
1000f458:	19a2b03a 	or	r17,r3,r6
1000f45c:	8810d77a 	srli	r8,r17,29
1000f460:	100490fa 	slli	r2,r2,3
1000f464:	882290fa 	slli	r17,r17,3
1000f468:	0401ffc4 	movi	r16,2047
1000f46c:	4090b03a 	or	r8,r8,r2
1000f470:	003e4106 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f474:	0141ffc4 	movi	r5,2047
1000f478:	117fc71e 	bne	r2,r5,1000f398 <__alt_data_end+0xf800f398>
1000f47c:	4811883a 	mov	r8,r9
1000f480:	3023883a 	mov	r17,r6
1000f484:	1021883a 	mov	r16,r2
1000f488:	003e3b06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f48c:	10002f26 	beq	r2,zero,1000f54c <__adddf3+0x850>
1000f490:	4984b03a 	or	r2,r9,r6
1000f494:	10001126 	beq	r2,zero,1000f4dc <__adddf3+0x7e0>
1000f498:	4004d0fa 	srli	r2,r8,3
1000f49c:	8822d0fa 	srli	r17,r17,3
1000f4a0:	4010977a 	slli	r8,r8,29
1000f4a4:	10c0022c 	andhi	r3,r2,8
1000f4a8:	4462b03a 	or	r17,r8,r17
1000f4ac:	183feb26 	beq	r3,zero,1000f45c <__alt_data_end+0xf800f45c>
1000f4b0:	4808d0fa 	srli	r4,r9,3
1000f4b4:	20c0022c 	andhi	r3,r4,8
1000f4b8:	183fe81e 	bne	r3,zero,1000f45c <__alt_data_end+0xf800f45c>
1000f4bc:	300cd0fa 	srli	r6,r6,3
1000f4c0:	4806977a 	slli	r3,r9,29
1000f4c4:	2005883a 	mov	r2,r4
1000f4c8:	19a2b03a 	or	r17,r3,r6
1000f4cc:	003fe306 	br	1000f45c <__alt_data_end+0xf800f45c>
1000f4d0:	0011883a 	mov	r8,zero
1000f4d4:	0005883a 	mov	r2,zero
1000f4d8:	003e3f06 	br	1000edd8 <__alt_data_end+0xf800edd8>
1000f4dc:	0401ffc4 	movi	r16,2047
1000f4e0:	003e2506 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f4e4:	0013883a 	mov	r9,zero
1000f4e8:	003f8406 	br	1000f2fc <__alt_data_end+0xf800f2fc>
1000f4ec:	0005883a 	mov	r2,zero
1000f4f0:	0007883a 	mov	r3,zero
1000f4f4:	003e8906 	br	1000ef1c <__alt_data_end+0xf800ef1c>
1000f4f8:	197ff804 	addi	r5,r3,-32
1000f4fc:	01000804 	movi	r4,32
1000f500:	414ad83a 	srl	r5,r8,r5
1000f504:	19002426 	beq	r3,r4,1000f598 <__adddf3+0x89c>
1000f508:	01001004 	movi	r4,64
1000f50c:	20c7c83a 	sub	r3,r4,r3
1000f510:	40c6983a 	sll	r3,r8,r3
1000f514:	1c46b03a 	or	r3,r3,r17
1000f518:	1806c03a 	cmpne	r3,r3,zero
1000f51c:	28e2b03a 	or	r17,r5,r3
1000f520:	0007883a 	mov	r3,zero
1000f524:	003f2306 	br	1000f1b4 <__alt_data_end+0xf800f1b4>
1000f528:	0007883a 	mov	r3,zero
1000f52c:	5811883a 	mov	r8,r11
1000f530:	00bfffc4 	movi	r2,-1
1000f534:	0401ffc4 	movi	r16,2047
1000f538:	003e7806 	br	1000ef1c <__alt_data_end+0xf800ef1c>
1000f53c:	4462b03a 	or	r17,r8,r17
1000f540:	8822c03a 	cmpne	r17,r17,zero
1000f544:	0009883a 	mov	r4,zero
1000f548:	003fa006 	br	1000f3cc <__alt_data_end+0xf800f3cc>
1000f54c:	4811883a 	mov	r8,r9
1000f550:	3023883a 	mov	r17,r6
1000f554:	0401ffc4 	movi	r16,2047
1000f558:	003e0706 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f55c:	4811883a 	mov	r8,r9
1000f560:	3023883a 	mov	r17,r6
1000f564:	003e0406 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f568:	21fff804 	addi	r7,r4,-32
1000f56c:	01400804 	movi	r5,32
1000f570:	41ced83a 	srl	r7,r8,r7
1000f574:	21400a26 	beq	r4,r5,1000f5a0 <__adddf3+0x8a4>
1000f578:	01401004 	movi	r5,64
1000f57c:	2909c83a 	sub	r4,r5,r4
1000f580:	4108983a 	sll	r4,r8,r4
1000f584:	2448b03a 	or	r4,r4,r17
1000f588:	2008c03a 	cmpne	r4,r4,zero
1000f58c:	3922b03a 	or	r17,r7,r4
1000f590:	0009883a 	mov	r4,zero
1000f594:	003f8d06 	br	1000f3cc <__alt_data_end+0xf800f3cc>
1000f598:	0007883a 	mov	r3,zero
1000f59c:	003fdd06 	br	1000f514 <__alt_data_end+0xf800f514>
1000f5a0:	0009883a 	mov	r4,zero
1000f5a4:	003ff706 	br	1000f584 <__alt_data_end+0xf800f584>

1000f5a8 <__divdf3>:
1000f5a8:	defff004 	addi	sp,sp,-64
1000f5ac:	dc800815 	stw	r18,32(sp)
1000f5b0:	2824d53a 	srli	r18,r5,20
1000f5b4:	dd800c15 	stw	r22,48(sp)
1000f5b8:	282cd7fa 	srli	r22,r5,31
1000f5bc:	dc000615 	stw	r16,24(sp)
1000f5c0:	04000434 	movhi	r16,16
1000f5c4:	843fffc4 	addi	r16,r16,-1
1000f5c8:	dfc00f15 	stw	ra,60(sp)
1000f5cc:	df000e15 	stw	fp,56(sp)
1000f5d0:	ddc00d15 	stw	r23,52(sp)
1000f5d4:	dd400b15 	stw	r21,44(sp)
1000f5d8:	dd000a15 	stw	r20,40(sp)
1000f5dc:	dcc00915 	stw	r19,36(sp)
1000f5e0:	dc400715 	stw	r17,28(sp)
1000f5e4:	9481ffcc 	andi	r18,r18,2047
1000f5e8:	2c20703a 	and	r16,r5,r16
1000f5ec:	b2003fcc 	andi	r8,r22,255
1000f5f0:	90006126 	beq	r18,zero,1000f778 <__divdf3+0x1d0>
1000f5f4:	0081ffc4 	movi	r2,2047
1000f5f8:	202b883a 	mov	r21,r4
1000f5fc:	90803726 	beq	r18,r2,1000f6dc <__divdf3+0x134>
1000f600:	80800434 	orhi	r2,r16,16
1000f604:	100490fa 	slli	r2,r2,3
1000f608:	2020d77a 	srli	r16,r4,29
1000f60c:	202a90fa 	slli	r21,r4,3
1000f610:	94bf0044 	addi	r18,r18,-1023
1000f614:	80a0b03a 	or	r16,r16,r2
1000f618:	0013883a 	mov	r9,zero
1000f61c:	000b883a 	mov	r5,zero
1000f620:	3806d53a 	srli	r3,r7,20
1000f624:	382ed7fa 	srli	r23,r7,31
1000f628:	04400434 	movhi	r17,16
1000f62c:	8c7fffc4 	addi	r17,r17,-1
1000f630:	18c1ffcc 	andi	r3,r3,2047
1000f634:	3029883a 	mov	r20,r6
1000f638:	3c62703a 	and	r17,r7,r17
1000f63c:	bf003fcc 	andi	fp,r23,255
1000f640:	18006e26 	beq	r3,zero,1000f7fc <__divdf3+0x254>
1000f644:	0081ffc4 	movi	r2,2047
1000f648:	18806626 	beq	r3,r2,1000f7e4 <__divdf3+0x23c>
1000f64c:	88800434 	orhi	r2,r17,16
1000f650:	100490fa 	slli	r2,r2,3
1000f654:	3022d77a 	srli	r17,r6,29
1000f658:	302890fa 	slli	r20,r6,3
1000f65c:	18ff0044 	addi	r3,r3,-1023
1000f660:	88a2b03a 	or	r17,r17,r2
1000f664:	000f883a 	mov	r7,zero
1000f668:	b5e6f03a 	xor	r19,r22,r23
1000f66c:	3a4cb03a 	or	r6,r7,r9
1000f670:	008003c4 	movi	r2,15
1000f674:	9809883a 	mov	r4,r19
1000f678:	90c7c83a 	sub	r3,r18,r3
1000f67c:	9cc03fcc 	andi	r19,r19,255
1000f680:	11809636 	bltu	r2,r6,1000f8dc <__divdf3+0x334>
1000f684:	300c90ba 	slli	r6,r6,2
1000f688:	00840074 	movhi	r2,4097
1000f68c:	10bda704 	addi	r2,r2,-2404
1000f690:	308d883a 	add	r6,r6,r2
1000f694:	30800017 	ldw	r2,0(r6)
1000f698:	1000683a 	jmp	r2
1000f69c:	1000f8dc 	xori	zero,r2,995
1000f6a0:	1000f714 	ori	zero,r2,988
1000f6a4:	1000f8cc 	andi	zero,r2,995
1000f6a8:	1000f708 	cmpgei	zero,r2,988
1000f6ac:	1000f8cc 	andi	zero,r2,995
1000f6b0:	1000f8a0 	cmpeqi	zero,r2,994
1000f6b4:	1000f8cc 	andi	zero,r2,995
1000f6b8:	1000f708 	cmpgei	zero,r2,988
1000f6bc:	1000f714 	ori	zero,r2,988
1000f6c0:	1000f714 	ori	zero,r2,988
1000f6c4:	1000f8a0 	cmpeqi	zero,r2,994
1000f6c8:	1000f708 	cmpgei	zero,r2,988
1000f6cc:	1000f6f8 	rdprs	zero,r2,987
1000f6d0:	1000f6f8 	rdprs	zero,r2,987
1000f6d4:	1000f6f8 	rdprs	zero,r2,987
1000f6d8:	1000fc64 	muli	zero,r2,1009
1000f6dc:	2404b03a 	or	r2,r4,r16
1000f6e0:	10006c1e 	bne	r2,zero,1000f894 <__divdf3+0x2ec>
1000f6e4:	02400204 	movi	r9,8
1000f6e8:	0021883a 	mov	r16,zero
1000f6ec:	002b883a 	mov	r21,zero
1000f6f0:	01400084 	movi	r5,2
1000f6f4:	003fca06 	br	1000f620 <__alt_data_end+0xf800f620>
1000f6f8:	8023883a 	mov	r17,r16
1000f6fc:	a829883a 	mov	r20,r21
1000f700:	4039883a 	mov	fp,r8
1000f704:	280f883a 	mov	r7,r5
1000f708:	00800084 	movi	r2,2
1000f70c:	3881601e 	bne	r7,r2,1000fc90 <__divdf3+0x6e8>
1000f710:	e027883a 	mov	r19,fp
1000f714:	9900004c 	andi	r4,r19,1
1000f718:	0081ffc4 	movi	r2,2047
1000f71c:	0021883a 	mov	r16,zero
1000f720:	002b883a 	mov	r21,zero
1000f724:	1004953a 	slli	r2,r2,20
1000f728:	20c03fcc 	andi	r3,r4,255
1000f72c:	01400434 	movhi	r5,16
1000f730:	297fffc4 	addi	r5,r5,-1
1000f734:	180697fa 	slli	r3,r3,31
1000f738:	8160703a 	and	r16,r16,r5
1000f73c:	80a0b03a 	or	r16,r16,r2
1000f740:	80c6b03a 	or	r3,r16,r3
1000f744:	a805883a 	mov	r2,r21
1000f748:	dfc00f17 	ldw	ra,60(sp)
1000f74c:	df000e17 	ldw	fp,56(sp)
1000f750:	ddc00d17 	ldw	r23,52(sp)
1000f754:	dd800c17 	ldw	r22,48(sp)
1000f758:	dd400b17 	ldw	r21,44(sp)
1000f75c:	dd000a17 	ldw	r20,40(sp)
1000f760:	dcc00917 	ldw	r19,36(sp)
1000f764:	dc800817 	ldw	r18,32(sp)
1000f768:	dc400717 	ldw	r17,28(sp)
1000f76c:	dc000617 	ldw	r16,24(sp)
1000f770:	dec01004 	addi	sp,sp,64
1000f774:	f800283a 	ret
1000f778:	2404b03a 	or	r2,r4,r16
1000f77c:	2023883a 	mov	r17,r4
1000f780:	10003f26 	beq	r2,zero,1000f880 <__divdf3+0x2d8>
1000f784:	80015e26 	beq	r16,zero,1000fd00 <__divdf3+0x758>
1000f788:	8009883a 	mov	r4,r16
1000f78c:	d9800215 	stw	r6,8(sp)
1000f790:	d9c00515 	stw	r7,20(sp)
1000f794:	da000415 	stw	r8,16(sp)
1000f798:	001153c0 	call	1001153c <__clzsi2>
1000f79c:	d9800217 	ldw	r6,8(sp)
1000f7a0:	d9c00517 	ldw	r7,20(sp)
1000f7a4:	da000417 	ldw	r8,16(sp)
1000f7a8:	113ffd44 	addi	r4,r2,-11
1000f7ac:	00c00704 	movi	r3,28
1000f7b0:	19014f16 	blt	r3,r4,1000fcf0 <__divdf3+0x748>
1000f7b4:	00c00744 	movi	r3,29
1000f7b8:	157ffe04 	addi	r21,r2,-8
1000f7bc:	1907c83a 	sub	r3,r3,r4
1000f7c0:	8560983a 	sll	r16,r16,r21
1000f7c4:	88c6d83a 	srl	r3,r17,r3
1000f7c8:	8d6a983a 	sll	r21,r17,r21
1000f7cc:	1c20b03a 	or	r16,r3,r16
1000f7d0:	1080fcc4 	addi	r2,r2,1011
1000f7d4:	00a5c83a 	sub	r18,zero,r2
1000f7d8:	0013883a 	mov	r9,zero
1000f7dc:	000b883a 	mov	r5,zero
1000f7e0:	003f8f06 	br	1000f620 <__alt_data_end+0xf800f620>
1000f7e4:	3444b03a 	or	r2,r6,r17
1000f7e8:	1000231e 	bne	r2,zero,1000f878 <__divdf3+0x2d0>
1000f7ec:	0023883a 	mov	r17,zero
1000f7f0:	0029883a 	mov	r20,zero
1000f7f4:	01c00084 	movi	r7,2
1000f7f8:	003f9b06 	br	1000f668 <__alt_data_end+0xf800f668>
1000f7fc:	3444b03a 	or	r2,r6,r17
1000f800:	10001926 	beq	r2,zero,1000f868 <__divdf3+0x2c0>
1000f804:	88014b26 	beq	r17,zero,1000fd34 <__divdf3+0x78c>
1000f808:	8809883a 	mov	r4,r17
1000f80c:	d9400115 	stw	r5,4(sp)
1000f810:	d9800215 	stw	r6,8(sp)
1000f814:	da000415 	stw	r8,16(sp)
1000f818:	da400315 	stw	r9,12(sp)
1000f81c:	001153c0 	call	1001153c <__clzsi2>
1000f820:	d9400117 	ldw	r5,4(sp)
1000f824:	d9800217 	ldw	r6,8(sp)
1000f828:	da000417 	ldw	r8,16(sp)
1000f82c:	da400317 	ldw	r9,12(sp)
1000f830:	113ffd44 	addi	r4,r2,-11
1000f834:	00c00704 	movi	r3,28
1000f838:	19013a16 	blt	r3,r4,1000fd24 <__divdf3+0x77c>
1000f83c:	00c00744 	movi	r3,29
1000f840:	153ffe04 	addi	r20,r2,-8
1000f844:	1907c83a 	sub	r3,r3,r4
1000f848:	8d22983a 	sll	r17,r17,r20
1000f84c:	30c6d83a 	srl	r3,r6,r3
1000f850:	3528983a 	sll	r20,r6,r20
1000f854:	1c62b03a 	or	r17,r3,r17
1000f858:	1080fcc4 	addi	r2,r2,1011
1000f85c:	0087c83a 	sub	r3,zero,r2
1000f860:	000f883a 	mov	r7,zero
1000f864:	003f8006 	br	1000f668 <__alt_data_end+0xf800f668>
1000f868:	0023883a 	mov	r17,zero
1000f86c:	0029883a 	mov	r20,zero
1000f870:	01c00044 	movi	r7,1
1000f874:	003f7c06 	br	1000f668 <__alt_data_end+0xf800f668>
1000f878:	01c000c4 	movi	r7,3
1000f87c:	003f7a06 	br	1000f668 <__alt_data_end+0xf800f668>
1000f880:	02400104 	movi	r9,4
1000f884:	0021883a 	mov	r16,zero
1000f888:	002b883a 	mov	r21,zero
1000f88c:	01400044 	movi	r5,1
1000f890:	003f6306 	br	1000f620 <__alt_data_end+0xf800f620>
1000f894:	02400304 	movi	r9,12
1000f898:	014000c4 	movi	r5,3
1000f89c:	003f6006 	br	1000f620 <__alt_data_end+0xf800f620>
1000f8a0:	04000434 	movhi	r16,16
1000f8a4:	0009883a 	mov	r4,zero
1000f8a8:	843fffc4 	addi	r16,r16,-1
1000f8ac:	057fffc4 	movi	r21,-1
1000f8b0:	0081ffc4 	movi	r2,2047
1000f8b4:	003f9b06 	br	1000f724 <__alt_data_end+0xf800f724>
1000f8b8:	00c00044 	movi	r3,1
1000f8bc:	1887c83a 	sub	r3,r3,r2
1000f8c0:	01000e04 	movi	r4,56
1000f8c4:	20c1530e 	bge	r4,r3,1000fe14 <__divdf3+0x86c>
1000f8c8:	9900004c 	andi	r4,r19,1
1000f8cc:	0005883a 	mov	r2,zero
1000f8d0:	0021883a 	mov	r16,zero
1000f8d4:	002b883a 	mov	r21,zero
1000f8d8:	003f9206 	br	1000f724 <__alt_data_end+0xf800f724>
1000f8dc:	8c012e36 	bltu	r17,r16,1000fd98 <__divdf3+0x7f0>
1000f8e0:	84412c26 	beq	r16,r17,1000fd94 <__divdf3+0x7ec>
1000f8e4:	a82f883a 	mov	r23,r21
1000f8e8:	18ffffc4 	addi	r3,r3,-1
1000f8ec:	002b883a 	mov	r21,zero
1000f8f0:	a004d63a 	srli	r2,r20,24
1000f8f4:	8822923a 	slli	r17,r17,8
1000f8f8:	a028923a 	slli	r20,r20,8
1000f8fc:	8009883a 	mov	r4,r16
1000f900:	88acb03a 	or	r22,r17,r2
1000f904:	dd000015 	stw	r20,0(sp)
1000f908:	b028d43a 	srli	r20,r22,16
1000f90c:	d8c00215 	stw	r3,8(sp)
1000f910:	b4bfffcc 	andi	r18,r22,65535
1000f914:	a00b883a 	mov	r5,r20
1000f918:	000ec400 	call	1000ec40 <__udivsi3>
1000f91c:	100b883a 	mov	r5,r2
1000f920:	9009883a 	mov	r4,r18
1000f924:	1023883a 	mov	r17,r2
1000f928:	00046600 	call	10004660 <__mulsi3>
1000f92c:	8009883a 	mov	r4,r16
1000f930:	a00b883a 	mov	r5,r20
1000f934:	1039883a 	mov	fp,r2
1000f938:	000eca40 	call	1000eca4 <__umodsi3>
1000f93c:	1004943a 	slli	r2,r2,16
1000f940:	b808d43a 	srli	r4,r23,16
1000f944:	d8c00217 	ldw	r3,8(sp)
1000f948:	2084b03a 	or	r2,r4,r2
1000f94c:	1700062e 	bgeu	r2,fp,1000f968 <__divdf3+0x3c0>
1000f950:	1585883a 	add	r2,r2,r22
1000f954:	893fffc4 	addi	r4,r17,-1
1000f958:	15811d36 	bltu	r2,r22,1000fdd0 <__divdf3+0x828>
1000f95c:	17011c2e 	bgeu	r2,fp,1000fdd0 <__divdf3+0x828>
1000f960:	8c7fff84 	addi	r17,r17,-2
1000f964:	1585883a 	add	r2,r2,r22
1000f968:	1739c83a 	sub	fp,r2,fp
1000f96c:	a00b883a 	mov	r5,r20
1000f970:	e009883a 	mov	r4,fp
1000f974:	d8c00215 	stw	r3,8(sp)
1000f978:	000ec400 	call	1000ec40 <__udivsi3>
1000f97c:	100b883a 	mov	r5,r2
1000f980:	9009883a 	mov	r4,r18
1000f984:	1021883a 	mov	r16,r2
1000f988:	00046600 	call	10004660 <__mulsi3>
1000f98c:	a00b883a 	mov	r5,r20
1000f990:	e009883a 	mov	r4,fp
1000f994:	d8800415 	stw	r2,16(sp)
1000f998:	000eca40 	call	1000eca4 <__umodsi3>
1000f99c:	1004943a 	slli	r2,r2,16
1000f9a0:	da000417 	ldw	r8,16(sp)
1000f9a4:	bdffffcc 	andi	r23,r23,65535
1000f9a8:	b884b03a 	or	r2,r23,r2
1000f9ac:	d8c00217 	ldw	r3,8(sp)
1000f9b0:	1200062e 	bgeu	r2,r8,1000f9cc <__divdf3+0x424>
1000f9b4:	1585883a 	add	r2,r2,r22
1000f9b8:	813fffc4 	addi	r4,r16,-1
1000f9bc:	15810236 	bltu	r2,r22,1000fdc8 <__divdf3+0x820>
1000f9c0:	1201012e 	bgeu	r2,r8,1000fdc8 <__divdf3+0x820>
1000f9c4:	843fff84 	addi	r16,r16,-2
1000f9c8:	1585883a 	add	r2,r2,r22
1000f9cc:	8822943a 	slli	r17,r17,16
1000f9d0:	d9800017 	ldw	r6,0(sp)
1000f9d4:	1211c83a 	sub	r8,r2,r8
1000f9d8:	8c22b03a 	or	r17,r17,r16
1000f9dc:	373fffcc 	andi	fp,r6,65535
1000f9e0:	8abfffcc 	andi	r10,r17,65535
1000f9e4:	8820d43a 	srli	r16,r17,16
1000f9e8:	5009883a 	mov	r4,r10
1000f9ec:	e00b883a 	mov	r5,fp
1000f9f0:	302ed43a 	srli	r23,r6,16
1000f9f4:	d8c00215 	stw	r3,8(sp)
1000f9f8:	da000415 	stw	r8,16(sp)
1000f9fc:	da800115 	stw	r10,4(sp)
1000fa00:	00046600 	call	10004660 <__mulsi3>
1000fa04:	800b883a 	mov	r5,r16
1000fa08:	e009883a 	mov	r4,fp
1000fa0c:	d8800515 	stw	r2,20(sp)
1000fa10:	00046600 	call	10004660 <__mulsi3>
1000fa14:	8009883a 	mov	r4,r16
1000fa18:	b80b883a 	mov	r5,r23
1000fa1c:	d8800315 	stw	r2,12(sp)
1000fa20:	00046600 	call	10004660 <__mulsi3>
1000fa24:	da800117 	ldw	r10,4(sp)
1000fa28:	b80b883a 	mov	r5,r23
1000fa2c:	1021883a 	mov	r16,r2
1000fa30:	5009883a 	mov	r4,r10
1000fa34:	00046600 	call	10004660 <__mulsi3>
1000fa38:	d9c00517 	ldw	r7,20(sp)
1000fa3c:	da400317 	ldw	r9,12(sp)
1000fa40:	d8c00217 	ldw	r3,8(sp)
1000fa44:	3808d43a 	srli	r4,r7,16
1000fa48:	1245883a 	add	r2,r2,r9
1000fa4c:	da000417 	ldw	r8,16(sp)
1000fa50:	2085883a 	add	r2,r4,r2
1000fa54:	1240022e 	bgeu	r2,r9,1000fa60 <__divdf3+0x4b8>
1000fa58:	01000074 	movhi	r4,1
1000fa5c:	8121883a 	add	r16,r16,r4
1000fa60:	1008d43a 	srli	r4,r2,16
1000fa64:	1004943a 	slli	r2,r2,16
1000fa68:	39ffffcc 	andi	r7,r7,65535
1000fa6c:	2409883a 	add	r4,r4,r16
1000fa70:	11c5883a 	add	r2,r2,r7
1000fa74:	4100bb36 	bltu	r8,r4,1000fd64 <__divdf3+0x7bc>
1000fa78:	4100d726 	beq	r8,r4,1000fdd8 <__divdf3+0x830>
1000fa7c:	4109c83a 	sub	r4,r8,r4
1000fa80:	a8a1c83a 	sub	r16,r21,r2
1000fa84:	ac2b803a 	cmpltu	r21,r21,r16
1000fa88:	256bc83a 	sub	r21,r4,r21
1000fa8c:	b540d926 	beq	r22,r21,1000fdf4 <__divdf3+0x84c>
1000fa90:	a00b883a 	mov	r5,r20
1000fa94:	a809883a 	mov	r4,r21
1000fa98:	d8c00215 	stw	r3,8(sp)
1000fa9c:	000ec400 	call	1000ec40 <__udivsi3>
1000faa0:	100b883a 	mov	r5,r2
1000faa4:	9009883a 	mov	r4,r18
1000faa8:	d8800515 	stw	r2,20(sp)
1000faac:	00046600 	call	10004660 <__mulsi3>
1000fab0:	a809883a 	mov	r4,r21
1000fab4:	a00b883a 	mov	r5,r20
1000fab8:	d8800415 	stw	r2,16(sp)
1000fabc:	000eca40 	call	1000eca4 <__umodsi3>
1000fac0:	1004943a 	slli	r2,r2,16
1000fac4:	8008d43a 	srli	r4,r16,16
1000fac8:	da000417 	ldw	r8,16(sp)
1000facc:	d8c00217 	ldw	r3,8(sp)
1000fad0:	2084b03a 	or	r2,r4,r2
1000fad4:	d9c00517 	ldw	r7,20(sp)
1000fad8:	1200062e 	bgeu	r2,r8,1000faf4 <__divdf3+0x54c>
1000fadc:	1585883a 	add	r2,r2,r22
1000fae0:	393fffc4 	addi	r4,r7,-1
1000fae4:	1580c536 	bltu	r2,r22,1000fdfc <__divdf3+0x854>
1000fae8:	1200c42e 	bgeu	r2,r8,1000fdfc <__divdf3+0x854>
1000faec:	39ffff84 	addi	r7,r7,-2
1000faf0:	1585883a 	add	r2,r2,r22
1000faf4:	122bc83a 	sub	r21,r2,r8
1000faf8:	a00b883a 	mov	r5,r20
1000fafc:	a809883a 	mov	r4,r21
1000fb00:	d8c00215 	stw	r3,8(sp)
1000fb04:	d9c00515 	stw	r7,20(sp)
1000fb08:	000ec400 	call	1000ec40 <__udivsi3>
1000fb0c:	9009883a 	mov	r4,r18
1000fb10:	100b883a 	mov	r5,r2
1000fb14:	d8800415 	stw	r2,16(sp)
1000fb18:	00046600 	call	10004660 <__mulsi3>
1000fb1c:	a809883a 	mov	r4,r21
1000fb20:	a00b883a 	mov	r5,r20
1000fb24:	1025883a 	mov	r18,r2
1000fb28:	000eca40 	call	1000eca4 <__umodsi3>
1000fb2c:	1004943a 	slli	r2,r2,16
1000fb30:	813fffcc 	andi	r4,r16,65535
1000fb34:	d8c00217 	ldw	r3,8(sp)
1000fb38:	20a0b03a 	or	r16,r4,r2
1000fb3c:	d9c00517 	ldw	r7,20(sp)
1000fb40:	da000417 	ldw	r8,16(sp)
1000fb44:	8480062e 	bgeu	r16,r18,1000fb60 <__divdf3+0x5b8>
1000fb48:	85a1883a 	add	r16,r16,r22
1000fb4c:	40bfffc4 	addi	r2,r8,-1
1000fb50:	8580ac36 	bltu	r16,r22,1000fe04 <__divdf3+0x85c>
1000fb54:	8480ab2e 	bgeu	r16,r18,1000fe04 <__divdf3+0x85c>
1000fb58:	423fff84 	addi	r8,r8,-2
1000fb5c:	85a1883a 	add	r16,r16,r22
1000fb60:	3804943a 	slli	r2,r7,16
1000fb64:	84a1c83a 	sub	r16,r16,r18
1000fb68:	e009883a 	mov	r4,fp
1000fb6c:	1228b03a 	or	r20,r2,r8
1000fb70:	a1ffffcc 	andi	r7,r20,65535
1000fb74:	a024d43a 	srli	r18,r20,16
1000fb78:	380b883a 	mov	r5,r7
1000fb7c:	d8c00215 	stw	r3,8(sp)
1000fb80:	d9c00515 	stw	r7,20(sp)
1000fb84:	00046600 	call	10004660 <__mulsi3>
1000fb88:	900b883a 	mov	r5,r18
1000fb8c:	e009883a 	mov	r4,fp
1000fb90:	102b883a 	mov	r21,r2
1000fb94:	00046600 	call	10004660 <__mulsi3>
1000fb98:	900b883a 	mov	r5,r18
1000fb9c:	b809883a 	mov	r4,r23
1000fba0:	1039883a 	mov	fp,r2
1000fba4:	00046600 	call	10004660 <__mulsi3>
1000fba8:	d9c00517 	ldw	r7,20(sp)
1000fbac:	b80b883a 	mov	r5,r23
1000fbb0:	1025883a 	mov	r18,r2
1000fbb4:	3809883a 	mov	r4,r7
1000fbb8:	00046600 	call	10004660 <__mulsi3>
1000fbbc:	a808d43a 	srli	r4,r21,16
1000fbc0:	1705883a 	add	r2,r2,fp
1000fbc4:	d8c00217 	ldw	r3,8(sp)
1000fbc8:	2085883a 	add	r2,r4,r2
1000fbcc:	1700022e 	bgeu	r2,fp,1000fbd8 <__divdf3+0x630>
1000fbd0:	01000074 	movhi	r4,1
1000fbd4:	9125883a 	add	r18,r18,r4
1000fbd8:	1008d43a 	srli	r4,r2,16
1000fbdc:	1004943a 	slli	r2,r2,16
1000fbe0:	ad7fffcc 	andi	r21,r21,65535
1000fbe4:	2489883a 	add	r4,r4,r18
1000fbe8:	1545883a 	add	r2,r2,r21
1000fbec:	81003836 	bltu	r16,r4,1000fcd0 <__divdf3+0x728>
1000fbf0:	81003626 	beq	r16,r4,1000fccc <__divdf3+0x724>
1000fbf4:	a5000054 	ori	r20,r20,1
1000fbf8:	1880ffc4 	addi	r2,r3,1023
1000fbfc:	00bf2e0e 	bge	zero,r2,1000f8b8 <__alt_data_end+0xf800f8b8>
1000fc00:	a10001cc 	andi	r4,r20,7
1000fc04:	20000726 	beq	r4,zero,1000fc24 <__divdf3+0x67c>
1000fc08:	a10003cc 	andi	r4,r20,15
1000fc0c:	01400104 	movi	r5,4
1000fc10:	21400426 	beq	r4,r5,1000fc24 <__divdf3+0x67c>
1000fc14:	a149883a 	add	r4,r20,r5
1000fc18:	2529803a 	cmpltu	r20,r4,r20
1000fc1c:	8d23883a 	add	r17,r17,r20
1000fc20:	2029883a 	mov	r20,r4
1000fc24:	8900402c 	andhi	r4,r17,256
1000fc28:	20000426 	beq	r4,zero,1000fc3c <__divdf3+0x694>
1000fc2c:	18810004 	addi	r2,r3,1024
1000fc30:	00ffc034 	movhi	r3,65280
1000fc34:	18ffffc4 	addi	r3,r3,-1
1000fc38:	88e2703a 	and	r17,r17,r3
1000fc3c:	00c1ff84 	movi	r3,2046
1000fc40:	18beb416 	blt	r3,r2,1000f714 <__alt_data_end+0xf800f714>
1000fc44:	a028d0fa 	srli	r20,r20,3
1000fc48:	882a977a 	slli	r21,r17,29
1000fc4c:	8820927a 	slli	r16,r17,9
1000fc50:	1081ffcc 	andi	r2,r2,2047
1000fc54:	ad2ab03a 	or	r21,r21,r20
1000fc58:	8020d33a 	srli	r16,r16,12
1000fc5c:	9900004c 	andi	r4,r19,1
1000fc60:	003eb006 	br	1000f724 <__alt_data_end+0xf800f724>
1000fc64:	8080022c 	andhi	r2,r16,8
1000fc68:	10001226 	beq	r2,zero,1000fcb4 <__divdf3+0x70c>
1000fc6c:	8880022c 	andhi	r2,r17,8
1000fc70:	1000101e 	bne	r2,zero,1000fcb4 <__divdf3+0x70c>
1000fc74:	00800434 	movhi	r2,16
1000fc78:	8c000234 	orhi	r16,r17,8
1000fc7c:	10bfffc4 	addi	r2,r2,-1
1000fc80:	b809883a 	mov	r4,r23
1000fc84:	80a0703a 	and	r16,r16,r2
1000fc88:	a02b883a 	mov	r21,r20
1000fc8c:	003f0806 	br	1000f8b0 <__alt_data_end+0xf800f8b0>
1000fc90:	008000c4 	movi	r2,3
1000fc94:	3880b126 	beq	r7,r2,1000ff5c <__divdf3+0x9b4>
1000fc98:	00800044 	movi	r2,1
1000fc9c:	38805b1e 	bne	r7,r2,1000fe0c <__divdf3+0x864>
1000fca0:	e009883a 	mov	r4,fp
1000fca4:	0005883a 	mov	r2,zero
1000fca8:	0021883a 	mov	r16,zero
1000fcac:	002b883a 	mov	r21,zero
1000fcb0:	003e9c06 	br	1000f724 <__alt_data_end+0xf800f724>
1000fcb4:	00800434 	movhi	r2,16
1000fcb8:	84000234 	orhi	r16,r16,8
1000fcbc:	10bfffc4 	addi	r2,r2,-1
1000fcc0:	b009883a 	mov	r4,r22
1000fcc4:	80a0703a 	and	r16,r16,r2
1000fcc8:	003ef906 	br	1000f8b0 <__alt_data_end+0xf800f8b0>
1000fccc:	103fca26 	beq	r2,zero,1000fbf8 <__alt_data_end+0xf800fbf8>
1000fcd0:	b421883a 	add	r16,r22,r16
1000fcd4:	a17fffc4 	addi	r5,r20,-1
1000fcd8:	8580422e 	bgeu	r16,r22,1000fde4 <__divdf3+0x83c>
1000fcdc:	2829883a 	mov	r20,r5
1000fce0:	813fc41e 	bne	r16,r4,1000fbf4 <__alt_data_end+0xf800fbf4>
1000fce4:	d9800017 	ldw	r6,0(sp)
1000fce8:	30bfc21e 	bne	r6,r2,1000fbf4 <__alt_data_end+0xf800fbf4>
1000fcec:	003fc206 	br	1000fbf8 <__alt_data_end+0xf800fbf8>
1000fcf0:	143ff604 	addi	r16,r2,-40
1000fcf4:	8c20983a 	sll	r16,r17,r16
1000fcf8:	002b883a 	mov	r21,zero
1000fcfc:	003eb406 	br	1000f7d0 <__alt_data_end+0xf800f7d0>
1000fd00:	d9800215 	stw	r6,8(sp)
1000fd04:	d9c00515 	stw	r7,20(sp)
1000fd08:	da000415 	stw	r8,16(sp)
1000fd0c:	001153c0 	call	1001153c <__clzsi2>
1000fd10:	10800804 	addi	r2,r2,32
1000fd14:	da000417 	ldw	r8,16(sp)
1000fd18:	d9c00517 	ldw	r7,20(sp)
1000fd1c:	d9800217 	ldw	r6,8(sp)
1000fd20:	003ea106 	br	1000f7a8 <__alt_data_end+0xf800f7a8>
1000fd24:	147ff604 	addi	r17,r2,-40
1000fd28:	3462983a 	sll	r17,r6,r17
1000fd2c:	0029883a 	mov	r20,zero
1000fd30:	003ec906 	br	1000f858 <__alt_data_end+0xf800f858>
1000fd34:	3009883a 	mov	r4,r6
1000fd38:	d9400115 	stw	r5,4(sp)
1000fd3c:	d9800215 	stw	r6,8(sp)
1000fd40:	da000415 	stw	r8,16(sp)
1000fd44:	da400315 	stw	r9,12(sp)
1000fd48:	001153c0 	call	1001153c <__clzsi2>
1000fd4c:	10800804 	addi	r2,r2,32
1000fd50:	da400317 	ldw	r9,12(sp)
1000fd54:	da000417 	ldw	r8,16(sp)
1000fd58:	d9800217 	ldw	r6,8(sp)
1000fd5c:	d9400117 	ldw	r5,4(sp)
1000fd60:	003eb306 	br	1000f830 <__alt_data_end+0xf800f830>
1000fd64:	d9800017 	ldw	r6,0(sp)
1000fd68:	a9ab883a 	add	r21,r21,r6
1000fd6c:	a98b803a 	cmpltu	r5,r21,r6
1000fd70:	2d8b883a 	add	r5,r5,r22
1000fd74:	2a11883a 	add	r8,r5,r8
1000fd78:	897fffc4 	addi	r5,r17,-1
1000fd7c:	b2000c2e 	bgeu	r22,r8,1000fdb0 <__divdf3+0x808>
1000fd80:	41003f36 	bltu	r8,r4,1000fe80 <__divdf3+0x8d8>
1000fd84:	22006c26 	beq	r4,r8,1000ff38 <__divdf3+0x990>
1000fd88:	4109c83a 	sub	r4,r8,r4
1000fd8c:	2823883a 	mov	r17,r5
1000fd90:	003f3b06 	br	1000fa80 <__alt_data_end+0xf800fa80>
1000fd94:	ad3ed336 	bltu	r21,r20,1000f8e4 <__alt_data_end+0xf800f8e4>
1000fd98:	a804d07a 	srli	r2,r21,1
1000fd9c:	802e97fa 	slli	r23,r16,31
1000fda0:	a82a97fa 	slli	r21,r21,31
1000fda4:	8020d07a 	srli	r16,r16,1
1000fda8:	b8aeb03a 	or	r23,r23,r2
1000fdac:	003ed006 	br	1000f8f0 <__alt_data_end+0xf800f8f0>
1000fdb0:	b23ff51e 	bne	r22,r8,1000fd88 <__alt_data_end+0xf800fd88>
1000fdb4:	d9800017 	ldw	r6,0(sp)
1000fdb8:	a9bff12e 	bgeu	r21,r6,1000fd80 <__alt_data_end+0xf800fd80>
1000fdbc:	b109c83a 	sub	r4,r22,r4
1000fdc0:	2823883a 	mov	r17,r5
1000fdc4:	003f2e06 	br	1000fa80 <__alt_data_end+0xf800fa80>
1000fdc8:	2021883a 	mov	r16,r4
1000fdcc:	003eff06 	br	1000f9cc <__alt_data_end+0xf800f9cc>
1000fdd0:	2023883a 	mov	r17,r4
1000fdd4:	003ee406 	br	1000f968 <__alt_data_end+0xf800f968>
1000fdd8:	a8bfe236 	bltu	r21,r2,1000fd64 <__alt_data_end+0xf800fd64>
1000fddc:	0009883a 	mov	r4,zero
1000fde0:	003f2706 	br	1000fa80 <__alt_data_end+0xf800fa80>
1000fde4:	81002d36 	bltu	r16,r4,1000fe9c <__divdf3+0x8f4>
1000fde8:	24005626 	beq	r4,r16,1000ff44 <__divdf3+0x99c>
1000fdec:	2829883a 	mov	r20,r5
1000fdf0:	003f8006 	br	1000fbf4 <__alt_data_end+0xf800fbf4>
1000fdf4:	053fffc4 	movi	r20,-1
1000fdf8:	003f7f06 	br	1000fbf8 <__alt_data_end+0xf800fbf8>
1000fdfc:	200f883a 	mov	r7,r4
1000fe00:	003f3c06 	br	1000faf4 <__alt_data_end+0xf800faf4>
1000fe04:	1011883a 	mov	r8,r2
1000fe08:	003f5506 	br	1000fb60 <__alt_data_end+0xf800fb60>
1000fe0c:	e027883a 	mov	r19,fp
1000fe10:	003f7906 	br	1000fbf8 <__alt_data_end+0xf800fbf8>
1000fe14:	010007c4 	movi	r4,31
1000fe18:	20c02816 	blt	r4,r3,1000febc <__divdf3+0x914>
1000fe1c:	00800804 	movi	r2,32
1000fe20:	10c5c83a 	sub	r2,r2,r3
1000fe24:	888a983a 	sll	r5,r17,r2
1000fe28:	a0c8d83a 	srl	r4,r20,r3
1000fe2c:	a084983a 	sll	r2,r20,r2
1000fe30:	88e2d83a 	srl	r17,r17,r3
1000fe34:	2906b03a 	or	r3,r5,r4
1000fe38:	1004c03a 	cmpne	r2,r2,zero
1000fe3c:	1886b03a 	or	r3,r3,r2
1000fe40:	188001cc 	andi	r2,r3,7
1000fe44:	10000726 	beq	r2,zero,1000fe64 <__divdf3+0x8bc>
1000fe48:	188003cc 	andi	r2,r3,15
1000fe4c:	01000104 	movi	r4,4
1000fe50:	11000426 	beq	r2,r4,1000fe64 <__divdf3+0x8bc>
1000fe54:	1805883a 	mov	r2,r3
1000fe58:	10c00104 	addi	r3,r2,4
1000fe5c:	1885803a 	cmpltu	r2,r3,r2
1000fe60:	88a3883a 	add	r17,r17,r2
1000fe64:	8880202c 	andhi	r2,r17,128
1000fe68:	10002926 	beq	r2,zero,1000ff10 <__divdf3+0x968>
1000fe6c:	9900004c 	andi	r4,r19,1
1000fe70:	00800044 	movi	r2,1
1000fe74:	0021883a 	mov	r16,zero
1000fe78:	002b883a 	mov	r21,zero
1000fe7c:	003e2906 	br	1000f724 <__alt_data_end+0xf800f724>
1000fe80:	d9800017 	ldw	r6,0(sp)
1000fe84:	8c7fff84 	addi	r17,r17,-2
1000fe88:	a9ab883a 	add	r21,r21,r6
1000fe8c:	a98b803a 	cmpltu	r5,r21,r6
1000fe90:	2d8b883a 	add	r5,r5,r22
1000fe94:	2a11883a 	add	r8,r5,r8
1000fe98:	003ef806 	br	1000fa7c <__alt_data_end+0xf800fa7c>
1000fe9c:	d9800017 	ldw	r6,0(sp)
1000fea0:	318f883a 	add	r7,r6,r6
1000fea4:	398b803a 	cmpltu	r5,r7,r6
1000fea8:	2d8d883a 	add	r6,r5,r22
1000feac:	81a1883a 	add	r16,r16,r6
1000feb0:	a17fff84 	addi	r5,r20,-2
1000feb4:	d9c00015 	stw	r7,0(sp)
1000feb8:	003f8806 	br	1000fcdc <__alt_data_end+0xf800fcdc>
1000febc:	013ff844 	movi	r4,-31
1000fec0:	2085c83a 	sub	r2,r4,r2
1000fec4:	8888d83a 	srl	r4,r17,r2
1000fec8:	00800804 	movi	r2,32
1000fecc:	18802126 	beq	r3,r2,1000ff54 <__divdf3+0x9ac>
1000fed0:	04001004 	movi	r16,64
1000fed4:	80c7c83a 	sub	r3,r16,r3
1000fed8:	88e0983a 	sll	r16,r17,r3
1000fedc:	8504b03a 	or	r2,r16,r20
1000fee0:	1004c03a 	cmpne	r2,r2,zero
1000fee4:	2084b03a 	or	r2,r4,r2
1000fee8:	144001cc 	andi	r17,r2,7
1000feec:	88000d1e 	bne	r17,zero,1000ff24 <__divdf3+0x97c>
1000fef0:	0021883a 	mov	r16,zero
1000fef4:	102ad0fa 	srli	r21,r2,3
1000fef8:	9900004c 	andi	r4,r19,1
1000fefc:	0005883a 	mov	r2,zero
1000ff00:	ac6ab03a 	or	r21,r21,r17
1000ff04:	003e0706 	br	1000f724 <__alt_data_end+0xf800f724>
1000ff08:	1007883a 	mov	r3,r2
1000ff0c:	0023883a 	mov	r17,zero
1000ff10:	8820927a 	slli	r16,r17,9
1000ff14:	1805883a 	mov	r2,r3
1000ff18:	8822977a 	slli	r17,r17,29
1000ff1c:	8020d33a 	srli	r16,r16,12
1000ff20:	003ff406 	br	1000fef4 <__alt_data_end+0xf800fef4>
1000ff24:	10c003cc 	andi	r3,r2,15
1000ff28:	01000104 	movi	r4,4
1000ff2c:	193ff626 	beq	r3,r4,1000ff08 <__alt_data_end+0xf800ff08>
1000ff30:	0023883a 	mov	r17,zero
1000ff34:	003fc806 	br	1000fe58 <__alt_data_end+0xf800fe58>
1000ff38:	a8bfd136 	bltu	r21,r2,1000fe80 <__alt_data_end+0xf800fe80>
1000ff3c:	2823883a 	mov	r17,r5
1000ff40:	003fa606 	br	1000fddc <__alt_data_end+0xf800fddc>
1000ff44:	d9800017 	ldw	r6,0(sp)
1000ff48:	30bfd436 	bltu	r6,r2,1000fe9c <__alt_data_end+0xf800fe9c>
1000ff4c:	2829883a 	mov	r20,r5
1000ff50:	003f6406 	br	1000fce4 <__alt_data_end+0xf800fce4>
1000ff54:	0021883a 	mov	r16,zero
1000ff58:	003fe006 	br	1000fedc <__alt_data_end+0xf800fedc>
1000ff5c:	00800434 	movhi	r2,16
1000ff60:	8c000234 	orhi	r16,r17,8
1000ff64:	10bfffc4 	addi	r2,r2,-1
1000ff68:	e009883a 	mov	r4,fp
1000ff6c:	80a0703a 	and	r16,r16,r2
1000ff70:	a02b883a 	mov	r21,r20
1000ff74:	003e4e06 	br	1000f8b0 <__alt_data_end+0xf800f8b0>

1000ff78 <__eqdf2>:
1000ff78:	2804d53a 	srli	r2,r5,20
1000ff7c:	3806d53a 	srli	r3,r7,20
1000ff80:	02000434 	movhi	r8,16
1000ff84:	423fffc4 	addi	r8,r8,-1
1000ff88:	1081ffcc 	andi	r2,r2,2047
1000ff8c:	0281ffc4 	movi	r10,2047
1000ff90:	2a12703a 	and	r9,r5,r8
1000ff94:	18c1ffcc 	andi	r3,r3,2047
1000ff98:	3a10703a 	and	r8,r7,r8
1000ff9c:	280ad7fa 	srli	r5,r5,31
1000ffa0:	380ed7fa 	srli	r7,r7,31
1000ffa4:	12801026 	beq	r2,r10,1000ffe8 <__eqdf2+0x70>
1000ffa8:	0281ffc4 	movi	r10,2047
1000ffac:	1a800a26 	beq	r3,r10,1000ffd8 <__eqdf2+0x60>
1000ffb0:	10c00226 	beq	r2,r3,1000ffbc <__eqdf2+0x44>
1000ffb4:	00800044 	movi	r2,1
1000ffb8:	f800283a 	ret
1000ffbc:	4a3ffd1e 	bne	r9,r8,1000ffb4 <__alt_data_end+0xf800ffb4>
1000ffc0:	21bffc1e 	bne	r4,r6,1000ffb4 <__alt_data_end+0xf800ffb4>
1000ffc4:	29c00c26 	beq	r5,r7,1000fff8 <__eqdf2+0x80>
1000ffc8:	103ffa1e 	bne	r2,zero,1000ffb4 <__alt_data_end+0xf800ffb4>
1000ffcc:	2244b03a 	or	r2,r4,r9
1000ffd0:	1004c03a 	cmpne	r2,r2,zero
1000ffd4:	f800283a 	ret
1000ffd8:	3214b03a 	or	r10,r6,r8
1000ffdc:	503ff426 	beq	r10,zero,1000ffb0 <__alt_data_end+0xf800ffb0>
1000ffe0:	00800044 	movi	r2,1
1000ffe4:	f800283a 	ret
1000ffe8:	2254b03a 	or	r10,r4,r9
1000ffec:	503fee26 	beq	r10,zero,1000ffa8 <__alt_data_end+0xf800ffa8>
1000fff0:	00800044 	movi	r2,1
1000fff4:	f800283a 	ret
1000fff8:	0005883a 	mov	r2,zero
1000fffc:	f800283a 	ret

10010000 <__gedf2>:
10010000:	2804d53a 	srli	r2,r5,20
10010004:	3806d53a 	srli	r3,r7,20
10010008:	02000434 	movhi	r8,16
1001000c:	423fffc4 	addi	r8,r8,-1
10010010:	1081ffcc 	andi	r2,r2,2047
10010014:	0241ffc4 	movi	r9,2047
10010018:	2a14703a 	and	r10,r5,r8
1001001c:	18c1ffcc 	andi	r3,r3,2047
10010020:	3a10703a 	and	r8,r7,r8
10010024:	280ad7fa 	srli	r5,r5,31
10010028:	380ed7fa 	srli	r7,r7,31
1001002c:	12401d26 	beq	r2,r9,100100a4 <__gedf2+0xa4>
10010030:	0241ffc4 	movi	r9,2047
10010034:	1a401226 	beq	r3,r9,10010080 <__gedf2+0x80>
10010038:	1000081e 	bne	r2,zero,1001005c <__gedf2+0x5c>
1001003c:	2296b03a 	or	r11,r4,r10
10010040:	5813003a 	cmpeq	r9,r11,zero
10010044:	1800091e 	bne	r3,zero,1001006c <__gedf2+0x6c>
10010048:	3218b03a 	or	r12,r6,r8
1001004c:	6000071e 	bne	r12,zero,1001006c <__gedf2+0x6c>
10010050:	0005883a 	mov	r2,zero
10010054:	5800101e 	bne	r11,zero,10010098 <__gedf2+0x98>
10010058:	f800283a 	ret
1001005c:	18000c1e 	bne	r3,zero,10010090 <__gedf2+0x90>
10010060:	3212b03a 	or	r9,r6,r8
10010064:	48000c26 	beq	r9,zero,10010098 <__gedf2+0x98>
10010068:	0013883a 	mov	r9,zero
1001006c:	39c03fcc 	andi	r7,r7,255
10010070:	48000826 	beq	r9,zero,10010094 <__gedf2+0x94>
10010074:	38000926 	beq	r7,zero,1001009c <__gedf2+0x9c>
10010078:	00800044 	movi	r2,1
1001007c:	f800283a 	ret
10010080:	3212b03a 	or	r9,r6,r8
10010084:	483fec26 	beq	r9,zero,10010038 <__alt_data_end+0xf8010038>
10010088:	00bfff84 	movi	r2,-2
1001008c:	f800283a 	ret
10010090:	39c03fcc 	andi	r7,r7,255
10010094:	29c00626 	beq	r5,r7,100100b0 <__gedf2+0xb0>
10010098:	283ff726 	beq	r5,zero,10010078 <__alt_data_end+0xf8010078>
1001009c:	00bfffc4 	movi	r2,-1
100100a0:	f800283a 	ret
100100a4:	2292b03a 	or	r9,r4,r10
100100a8:	483fe126 	beq	r9,zero,10010030 <__alt_data_end+0xf8010030>
100100ac:	003ff606 	br	10010088 <__alt_data_end+0xf8010088>
100100b0:	18bff916 	blt	r3,r2,10010098 <__alt_data_end+0xf8010098>
100100b4:	10c00316 	blt	r2,r3,100100c4 <__gedf2+0xc4>
100100b8:	42bff736 	bltu	r8,r10,10010098 <__alt_data_end+0xf8010098>
100100bc:	52000326 	beq	r10,r8,100100cc <__gedf2+0xcc>
100100c0:	5200042e 	bgeu	r10,r8,100100d4 <__gedf2+0xd4>
100100c4:	283fec1e 	bne	r5,zero,10010078 <__alt_data_end+0xf8010078>
100100c8:	003ff406 	br	1001009c <__alt_data_end+0xf801009c>
100100cc:	313ff236 	bltu	r6,r4,10010098 <__alt_data_end+0xf8010098>
100100d0:	21bffc36 	bltu	r4,r6,100100c4 <__alt_data_end+0xf80100c4>
100100d4:	0005883a 	mov	r2,zero
100100d8:	f800283a 	ret

100100dc <__ledf2>:
100100dc:	2804d53a 	srli	r2,r5,20
100100e0:	3810d53a 	srli	r8,r7,20
100100e4:	00c00434 	movhi	r3,16
100100e8:	18ffffc4 	addi	r3,r3,-1
100100ec:	1081ffcc 	andi	r2,r2,2047
100100f0:	0241ffc4 	movi	r9,2047
100100f4:	28d4703a 	and	r10,r5,r3
100100f8:	4201ffcc 	andi	r8,r8,2047
100100fc:	38c6703a 	and	r3,r7,r3
10010100:	280ad7fa 	srli	r5,r5,31
10010104:	380ed7fa 	srli	r7,r7,31
10010108:	12401f26 	beq	r2,r9,10010188 <__ledf2+0xac>
1001010c:	0241ffc4 	movi	r9,2047
10010110:	42401426 	beq	r8,r9,10010164 <__ledf2+0x88>
10010114:	1000091e 	bne	r2,zero,1001013c <__ledf2+0x60>
10010118:	2296b03a 	or	r11,r4,r10
1001011c:	5813003a 	cmpeq	r9,r11,zero
10010120:	29403fcc 	andi	r5,r5,255
10010124:	40000a1e 	bne	r8,zero,10010150 <__ledf2+0x74>
10010128:	30d8b03a 	or	r12,r6,r3
1001012c:	6000081e 	bne	r12,zero,10010150 <__ledf2+0x74>
10010130:	0005883a 	mov	r2,zero
10010134:	5800111e 	bne	r11,zero,1001017c <__ledf2+0xa0>
10010138:	f800283a 	ret
1001013c:	29403fcc 	andi	r5,r5,255
10010140:	40000c1e 	bne	r8,zero,10010174 <__ledf2+0x98>
10010144:	30d2b03a 	or	r9,r6,r3
10010148:	48000c26 	beq	r9,zero,1001017c <__ledf2+0xa0>
1001014c:	0013883a 	mov	r9,zero
10010150:	39c03fcc 	andi	r7,r7,255
10010154:	48000826 	beq	r9,zero,10010178 <__ledf2+0x9c>
10010158:	38001126 	beq	r7,zero,100101a0 <__ledf2+0xc4>
1001015c:	00800044 	movi	r2,1
10010160:	f800283a 	ret
10010164:	30d2b03a 	or	r9,r6,r3
10010168:	483fea26 	beq	r9,zero,10010114 <__alt_data_end+0xf8010114>
1001016c:	00800084 	movi	r2,2
10010170:	f800283a 	ret
10010174:	39c03fcc 	andi	r7,r7,255
10010178:	39400726 	beq	r7,r5,10010198 <__ledf2+0xbc>
1001017c:	2800081e 	bne	r5,zero,100101a0 <__ledf2+0xc4>
10010180:	00800044 	movi	r2,1
10010184:	f800283a 	ret
10010188:	2292b03a 	or	r9,r4,r10
1001018c:	483fdf26 	beq	r9,zero,1001010c <__alt_data_end+0xf801010c>
10010190:	00800084 	movi	r2,2
10010194:	f800283a 	ret
10010198:	4080030e 	bge	r8,r2,100101a8 <__ledf2+0xcc>
1001019c:	383fef26 	beq	r7,zero,1001015c <__alt_data_end+0xf801015c>
100101a0:	00bfffc4 	movi	r2,-1
100101a4:	f800283a 	ret
100101a8:	123feb16 	blt	r2,r8,10010158 <__alt_data_end+0xf8010158>
100101ac:	1abff336 	bltu	r3,r10,1001017c <__alt_data_end+0xf801017c>
100101b0:	50c00326 	beq	r10,r3,100101c0 <__ledf2+0xe4>
100101b4:	50c0042e 	bgeu	r10,r3,100101c8 <__ledf2+0xec>
100101b8:	283fe81e 	bne	r5,zero,1001015c <__alt_data_end+0xf801015c>
100101bc:	003ff806 	br	100101a0 <__alt_data_end+0xf80101a0>
100101c0:	313fee36 	bltu	r6,r4,1001017c <__alt_data_end+0xf801017c>
100101c4:	21bffc36 	bltu	r4,r6,100101b8 <__alt_data_end+0xf80101b8>
100101c8:	0005883a 	mov	r2,zero
100101cc:	f800283a 	ret

100101d0 <__muldf3>:
100101d0:	deffee04 	addi	sp,sp,-72
100101d4:	dd000c15 	stw	r20,48(sp)
100101d8:	2828d53a 	srli	r20,r5,20
100101dc:	ddc00f15 	stw	r23,60(sp)
100101e0:	282ed7fa 	srli	r23,r5,31
100101e4:	dc000815 	stw	r16,32(sp)
100101e8:	04000434 	movhi	r16,16
100101ec:	dcc00b15 	stw	r19,44(sp)
100101f0:	843fffc4 	addi	r16,r16,-1
100101f4:	dfc01115 	stw	ra,68(sp)
100101f8:	df001015 	stw	fp,64(sp)
100101fc:	dd800e15 	stw	r22,56(sp)
10010200:	dd400d15 	stw	r21,52(sp)
10010204:	dc800a15 	stw	r18,40(sp)
10010208:	dc400915 	stw	r17,36(sp)
1001020c:	a501ffcc 	andi	r20,r20,2047
10010210:	2c20703a 	and	r16,r5,r16
10010214:	b827883a 	mov	r19,r23
10010218:	ba403fcc 	andi	r9,r23,255
1001021c:	a0006026 	beq	r20,zero,100103a0 <__muldf3+0x1d0>
10010220:	0081ffc4 	movi	r2,2047
10010224:	202d883a 	mov	r22,r4
10010228:	a0803626 	beq	r20,r2,10010304 <__muldf3+0x134>
1001022c:	84000434 	orhi	r16,r16,16
10010230:	200ad77a 	srli	r5,r4,29
10010234:	800490fa 	slli	r2,r16,3
10010238:	202c90fa 	slli	r22,r4,3
1001023c:	a53f0044 	addi	r20,r20,-1023
10010240:	28a0b03a 	or	r16,r5,r2
10010244:	002b883a 	mov	r21,zero
10010248:	000b883a 	mov	r5,zero
1001024c:	3804d53a 	srli	r2,r7,20
10010250:	3838d7fa 	srli	fp,r7,31
10010254:	04400434 	movhi	r17,16
10010258:	8c7fffc4 	addi	r17,r17,-1
1001025c:	1081ffcc 	andi	r2,r2,2047
10010260:	3025883a 	mov	r18,r6
10010264:	3c62703a 	and	r17,r7,r17
10010268:	e2803fcc 	andi	r10,fp,255
1001026c:	10006d26 	beq	r2,zero,10010424 <__muldf3+0x254>
10010270:	00c1ffc4 	movi	r3,2047
10010274:	10c06526 	beq	r2,r3,1001040c <__muldf3+0x23c>
10010278:	8c400434 	orhi	r17,r17,16
1001027c:	300ed77a 	srli	r7,r6,29
10010280:	880690fa 	slli	r3,r17,3
10010284:	302490fa 	slli	r18,r6,3
10010288:	10bf0044 	addi	r2,r2,-1023
1001028c:	38e2b03a 	or	r17,r7,r3
10010290:	000f883a 	mov	r7,zero
10010294:	a087883a 	add	r3,r20,r2
10010298:	010003c4 	movi	r4,15
1001029c:	3d44b03a 	or	r2,r7,r21
100102a0:	e5ccf03a 	xor	r6,fp,r23
100102a4:	1a000044 	addi	r8,r3,1
100102a8:	20809b36 	bltu	r4,r2,10010518 <__muldf3+0x348>
100102ac:	100490ba 	slli	r2,r2,2
100102b0:	01040074 	movhi	r4,4097
100102b4:	2100b104 	addi	r4,r4,708
100102b8:	1105883a 	add	r2,r2,r4
100102bc:	10800017 	ldw	r2,0(r2)
100102c0:	1000683a 	jmp	r2
100102c4:	10010518 	cmpnei	zero,r2,1044
100102c8:	10010324 	muli	zero,r2,1036
100102cc:	10010324 	muli	zero,r2,1036
100102d0:	10010320 	cmpeqi	zero,r2,1036
100102d4:	100104f4 	orhi	zero,r2,1043
100102d8:	100104f4 	orhi	zero,r2,1043
100102dc:	100104dc 	xori	zero,r2,1043
100102e0:	10010320 	cmpeqi	zero,r2,1036
100102e4:	100104f4 	orhi	zero,r2,1043
100102e8:	100104dc 	xori	zero,r2,1043
100102ec:	100104f4 	orhi	zero,r2,1043
100102f0:	10010320 	cmpeqi	zero,r2,1036
100102f4:	10010504 	addi	zero,r2,1044
100102f8:	10010504 	addi	zero,r2,1044
100102fc:	10010504 	addi	zero,r2,1044
10010300:	10010864 	muli	zero,r2,1057
10010304:	2404b03a 	or	r2,r4,r16
10010308:	1000711e 	bne	r2,zero,100104d0 <__muldf3+0x300>
1001030c:	05400204 	movi	r21,8
10010310:	0021883a 	mov	r16,zero
10010314:	002d883a 	mov	r22,zero
10010318:	01400084 	movi	r5,2
1001031c:	003fcb06 	br	1001024c <__alt_data_end+0xf801024c>
10010320:	500d883a 	mov	r6,r10
10010324:	00800084 	movi	r2,2
10010328:	38805926 	beq	r7,r2,10010490 <__muldf3+0x2c0>
1001032c:	008000c4 	movi	r2,3
10010330:	3881bb26 	beq	r7,r2,10010a20 <__muldf3+0x850>
10010334:	00800044 	movi	r2,1
10010338:	3881961e 	bne	r7,r2,10010994 <__muldf3+0x7c4>
1001033c:	3027883a 	mov	r19,r6
10010340:	0005883a 	mov	r2,zero
10010344:	0021883a 	mov	r16,zero
10010348:	002d883a 	mov	r22,zero
1001034c:	1004953a 	slli	r2,r2,20
10010350:	98c03fcc 	andi	r3,r19,255
10010354:	04400434 	movhi	r17,16
10010358:	8c7fffc4 	addi	r17,r17,-1
1001035c:	180697fa 	slli	r3,r3,31
10010360:	8460703a 	and	r16,r16,r17
10010364:	80a0b03a 	or	r16,r16,r2
10010368:	80c6b03a 	or	r3,r16,r3
1001036c:	b005883a 	mov	r2,r22
10010370:	dfc01117 	ldw	ra,68(sp)
10010374:	df001017 	ldw	fp,64(sp)
10010378:	ddc00f17 	ldw	r23,60(sp)
1001037c:	dd800e17 	ldw	r22,56(sp)
10010380:	dd400d17 	ldw	r21,52(sp)
10010384:	dd000c17 	ldw	r20,48(sp)
10010388:	dcc00b17 	ldw	r19,44(sp)
1001038c:	dc800a17 	ldw	r18,40(sp)
10010390:	dc400917 	ldw	r17,36(sp)
10010394:	dc000817 	ldw	r16,32(sp)
10010398:	dec01204 	addi	sp,sp,72
1001039c:	f800283a 	ret
100103a0:	2404b03a 	or	r2,r4,r16
100103a4:	202b883a 	mov	r21,r4
100103a8:	10004426 	beq	r2,zero,100104bc <__muldf3+0x2ec>
100103ac:	80015126 	beq	r16,zero,100108f4 <__muldf3+0x724>
100103b0:	8009883a 	mov	r4,r16
100103b4:	d9800715 	stw	r6,28(sp)
100103b8:	d9c00215 	stw	r7,8(sp)
100103bc:	da400415 	stw	r9,16(sp)
100103c0:	001153c0 	call	1001153c <__clzsi2>
100103c4:	d9800717 	ldw	r6,28(sp)
100103c8:	d9c00217 	ldw	r7,8(sp)
100103cc:	da400417 	ldw	r9,16(sp)
100103d0:	113ffd44 	addi	r4,r2,-11
100103d4:	00c00704 	movi	r3,28
100103d8:	19014216 	blt	r3,r4,100108e4 <__muldf3+0x714>
100103dc:	00c00744 	movi	r3,29
100103e0:	15bffe04 	addi	r22,r2,-8
100103e4:	1907c83a 	sub	r3,r3,r4
100103e8:	85a0983a 	sll	r16,r16,r22
100103ec:	a8c6d83a 	srl	r3,r21,r3
100103f0:	adac983a 	sll	r22,r21,r22
100103f4:	1c20b03a 	or	r16,r3,r16
100103f8:	1080fcc4 	addi	r2,r2,1011
100103fc:	00a9c83a 	sub	r20,zero,r2
10010400:	002b883a 	mov	r21,zero
10010404:	000b883a 	mov	r5,zero
10010408:	003f9006 	br	1001024c <__alt_data_end+0xf801024c>
1001040c:	3446b03a 	or	r3,r6,r17
10010410:	1800281e 	bne	r3,zero,100104b4 <__muldf3+0x2e4>
10010414:	0023883a 	mov	r17,zero
10010418:	0025883a 	mov	r18,zero
1001041c:	01c00084 	movi	r7,2
10010420:	003f9c06 	br	10010294 <__alt_data_end+0xf8010294>
10010424:	3446b03a 	or	r3,r6,r17
10010428:	18001e26 	beq	r3,zero,100104a4 <__muldf3+0x2d4>
1001042c:	88012126 	beq	r17,zero,100108b4 <__muldf3+0x6e4>
10010430:	8809883a 	mov	r4,r17
10010434:	d9400215 	stw	r5,8(sp)
10010438:	d9800715 	stw	r6,28(sp)
1001043c:	da400415 	stw	r9,16(sp)
10010440:	da800315 	stw	r10,12(sp)
10010444:	001153c0 	call	1001153c <__clzsi2>
10010448:	d9400217 	ldw	r5,8(sp)
1001044c:	d9800717 	ldw	r6,28(sp)
10010450:	da400417 	ldw	r9,16(sp)
10010454:	da800317 	ldw	r10,12(sp)
10010458:	113ffd44 	addi	r4,r2,-11
1001045c:	00c00704 	movi	r3,28
10010460:	19011016 	blt	r3,r4,100108a4 <__muldf3+0x6d4>
10010464:	00c00744 	movi	r3,29
10010468:	14bffe04 	addi	r18,r2,-8
1001046c:	1907c83a 	sub	r3,r3,r4
10010470:	8ca2983a 	sll	r17,r17,r18
10010474:	30c6d83a 	srl	r3,r6,r3
10010478:	34a4983a 	sll	r18,r6,r18
1001047c:	1c62b03a 	or	r17,r3,r17
10010480:	1080fcc4 	addi	r2,r2,1011
10010484:	0085c83a 	sub	r2,zero,r2
10010488:	000f883a 	mov	r7,zero
1001048c:	003f8106 	br	10010294 <__alt_data_end+0xf8010294>
10010490:	3027883a 	mov	r19,r6
10010494:	0081ffc4 	movi	r2,2047
10010498:	0021883a 	mov	r16,zero
1001049c:	002d883a 	mov	r22,zero
100104a0:	003faa06 	br	1001034c <__alt_data_end+0xf801034c>
100104a4:	0023883a 	mov	r17,zero
100104a8:	0025883a 	mov	r18,zero
100104ac:	01c00044 	movi	r7,1
100104b0:	003f7806 	br	10010294 <__alt_data_end+0xf8010294>
100104b4:	01c000c4 	movi	r7,3
100104b8:	003f7606 	br	10010294 <__alt_data_end+0xf8010294>
100104bc:	05400104 	movi	r21,4
100104c0:	0021883a 	mov	r16,zero
100104c4:	002d883a 	mov	r22,zero
100104c8:	01400044 	movi	r5,1
100104cc:	003f5f06 	br	1001024c <__alt_data_end+0xf801024c>
100104d0:	05400304 	movi	r21,12
100104d4:	014000c4 	movi	r5,3
100104d8:	003f5c06 	br	1001024c <__alt_data_end+0xf801024c>
100104dc:	04000434 	movhi	r16,16
100104e0:	0027883a 	mov	r19,zero
100104e4:	843fffc4 	addi	r16,r16,-1
100104e8:	05bfffc4 	movi	r22,-1
100104ec:	0081ffc4 	movi	r2,2047
100104f0:	003f9606 	br	1001034c <__alt_data_end+0xf801034c>
100104f4:	8023883a 	mov	r17,r16
100104f8:	b025883a 	mov	r18,r22
100104fc:	280f883a 	mov	r7,r5
10010500:	003f8806 	br	10010324 <__alt_data_end+0xf8010324>
10010504:	8023883a 	mov	r17,r16
10010508:	b025883a 	mov	r18,r22
1001050c:	480d883a 	mov	r6,r9
10010510:	280f883a 	mov	r7,r5
10010514:	003f8306 	br	10010324 <__alt_data_end+0xf8010324>
10010518:	b026d43a 	srli	r19,r22,16
1001051c:	902ed43a 	srli	r23,r18,16
10010520:	b5bfffcc 	andi	r22,r22,65535
10010524:	94bfffcc 	andi	r18,r18,65535
10010528:	b00b883a 	mov	r5,r22
1001052c:	9009883a 	mov	r4,r18
10010530:	d8c00515 	stw	r3,20(sp)
10010534:	d9800715 	stw	r6,28(sp)
10010538:	da000615 	stw	r8,24(sp)
1001053c:	00046600 	call	10004660 <__mulsi3>
10010540:	980b883a 	mov	r5,r19
10010544:	9009883a 	mov	r4,r18
10010548:	1029883a 	mov	r20,r2
1001054c:	00046600 	call	10004660 <__mulsi3>
10010550:	b80b883a 	mov	r5,r23
10010554:	9809883a 	mov	r4,r19
10010558:	102b883a 	mov	r21,r2
1001055c:	00046600 	call	10004660 <__mulsi3>
10010560:	b809883a 	mov	r4,r23
10010564:	b00b883a 	mov	r5,r22
10010568:	1039883a 	mov	fp,r2
1001056c:	00046600 	call	10004660 <__mulsi3>
10010570:	a008d43a 	srli	r4,r20,16
10010574:	1545883a 	add	r2,r2,r21
10010578:	d8c00517 	ldw	r3,20(sp)
1001057c:	2085883a 	add	r2,r4,r2
10010580:	d9800717 	ldw	r6,28(sp)
10010584:	da000617 	ldw	r8,24(sp)
10010588:	1540022e 	bgeu	r2,r21,10010594 <__muldf3+0x3c4>
1001058c:	01000074 	movhi	r4,1
10010590:	e139883a 	add	fp,fp,r4
10010594:	100e943a 	slli	r7,r2,16
10010598:	1004d43a 	srli	r2,r2,16
1001059c:	882ad43a 	srli	r21,r17,16
100105a0:	a53fffcc 	andi	r20,r20,65535
100105a4:	8c7fffcc 	andi	r17,r17,65535
100105a8:	3d29883a 	add	r20,r7,r20
100105ac:	b00b883a 	mov	r5,r22
100105b0:	8809883a 	mov	r4,r17
100105b4:	d8c00515 	stw	r3,20(sp)
100105b8:	d9800715 	stw	r6,28(sp)
100105bc:	da000615 	stw	r8,24(sp)
100105c0:	dd000115 	stw	r20,4(sp)
100105c4:	d8800015 	stw	r2,0(sp)
100105c8:	00046600 	call	10004660 <__mulsi3>
100105cc:	980b883a 	mov	r5,r19
100105d0:	8809883a 	mov	r4,r17
100105d4:	d8800215 	stw	r2,8(sp)
100105d8:	00046600 	call	10004660 <__mulsi3>
100105dc:	9809883a 	mov	r4,r19
100105e0:	a80b883a 	mov	r5,r21
100105e4:	1029883a 	mov	r20,r2
100105e8:	00046600 	call	10004660 <__mulsi3>
100105ec:	b00b883a 	mov	r5,r22
100105f0:	a809883a 	mov	r4,r21
100105f4:	d8800415 	stw	r2,16(sp)
100105f8:	00046600 	call	10004660 <__mulsi3>
100105fc:	d9c00217 	ldw	r7,8(sp)
10010600:	1505883a 	add	r2,r2,r20
10010604:	d8c00517 	ldw	r3,20(sp)
10010608:	3826d43a 	srli	r19,r7,16
1001060c:	d9800717 	ldw	r6,28(sp)
10010610:	da000617 	ldw	r8,24(sp)
10010614:	9885883a 	add	r2,r19,r2
10010618:	da400417 	ldw	r9,16(sp)
1001061c:	1500022e 	bgeu	r2,r20,10010628 <__muldf3+0x458>
10010620:	01000074 	movhi	r4,1
10010624:	4913883a 	add	r9,r9,r4
10010628:	1028d43a 	srli	r20,r2,16
1001062c:	1004943a 	slli	r2,r2,16
10010630:	802cd43a 	srli	r22,r16,16
10010634:	843fffcc 	andi	r16,r16,65535
10010638:	3cffffcc 	andi	r19,r7,65535
1001063c:	9009883a 	mov	r4,r18
10010640:	800b883a 	mov	r5,r16
10010644:	a269883a 	add	r20,r20,r9
10010648:	d8c00515 	stw	r3,20(sp)
1001064c:	d9800715 	stw	r6,28(sp)
10010650:	da000615 	stw	r8,24(sp)
10010654:	14e7883a 	add	r19,r2,r19
10010658:	00046600 	call	10004660 <__mulsi3>
1001065c:	9009883a 	mov	r4,r18
10010660:	b00b883a 	mov	r5,r22
10010664:	d8800315 	stw	r2,12(sp)
10010668:	00046600 	call	10004660 <__mulsi3>
1001066c:	b809883a 	mov	r4,r23
10010670:	b00b883a 	mov	r5,r22
10010674:	d8800215 	stw	r2,8(sp)
10010678:	00046600 	call	10004660 <__mulsi3>
1001067c:	b80b883a 	mov	r5,r23
10010680:	8009883a 	mov	r4,r16
10010684:	d8800415 	stw	r2,16(sp)
10010688:	00046600 	call	10004660 <__mulsi3>
1001068c:	da800317 	ldw	r10,12(sp)
10010690:	d9c00217 	ldw	r7,8(sp)
10010694:	d9000017 	ldw	r4,0(sp)
10010698:	502ed43a 	srli	r23,r10,16
1001069c:	11c5883a 	add	r2,r2,r7
100106a0:	24e5883a 	add	r18,r4,r19
100106a4:	b885883a 	add	r2,r23,r2
100106a8:	d8c00517 	ldw	r3,20(sp)
100106ac:	d9800717 	ldw	r6,28(sp)
100106b0:	da000617 	ldw	r8,24(sp)
100106b4:	da400417 	ldw	r9,16(sp)
100106b8:	11c0022e 	bgeu	r2,r7,100106c4 <__muldf3+0x4f4>
100106bc:	01000074 	movhi	r4,1
100106c0:	4913883a 	add	r9,r9,r4
100106c4:	100ed43a 	srli	r7,r2,16
100106c8:	1004943a 	slli	r2,r2,16
100106cc:	55ffffcc 	andi	r23,r10,65535
100106d0:	3a53883a 	add	r9,r7,r9
100106d4:	8809883a 	mov	r4,r17
100106d8:	800b883a 	mov	r5,r16
100106dc:	d8c00515 	stw	r3,20(sp)
100106e0:	d9800715 	stw	r6,28(sp)
100106e4:	da000615 	stw	r8,24(sp)
100106e8:	da400415 	stw	r9,16(sp)
100106ec:	15ef883a 	add	r23,r2,r23
100106f0:	00046600 	call	10004660 <__mulsi3>
100106f4:	8809883a 	mov	r4,r17
100106f8:	b00b883a 	mov	r5,r22
100106fc:	d8800215 	stw	r2,8(sp)
10010700:	00046600 	call	10004660 <__mulsi3>
10010704:	b00b883a 	mov	r5,r22
10010708:	a809883a 	mov	r4,r21
1001070c:	d8800315 	stw	r2,12(sp)
10010710:	00046600 	call	10004660 <__mulsi3>
10010714:	8009883a 	mov	r4,r16
10010718:	a80b883a 	mov	r5,r21
1001071c:	1023883a 	mov	r17,r2
10010720:	00046600 	call	10004660 <__mulsi3>
10010724:	d9c00217 	ldw	r7,8(sp)
10010728:	da800317 	ldw	r10,12(sp)
1001072c:	d8c00517 	ldw	r3,20(sp)
10010730:	3808d43a 	srli	r4,r7,16
10010734:	1285883a 	add	r2,r2,r10
10010738:	d9800717 	ldw	r6,28(sp)
1001073c:	2085883a 	add	r2,r4,r2
10010740:	da000617 	ldw	r8,24(sp)
10010744:	da400417 	ldw	r9,16(sp)
10010748:	1280022e 	bgeu	r2,r10,10010754 <__muldf3+0x584>
1001074c:	01000074 	movhi	r4,1
10010750:	8923883a 	add	r17,r17,r4
10010754:	1008943a 	slli	r4,r2,16
10010758:	39ffffcc 	andi	r7,r7,65535
1001075c:	e4b9883a 	add	fp,fp,r18
10010760:	21cf883a 	add	r7,r4,r7
10010764:	e4e7803a 	cmpltu	r19,fp,r19
10010768:	3d0f883a 	add	r7,r7,r20
1001076c:	bf39883a 	add	fp,r23,fp
10010770:	99c9883a 	add	r4,r19,r7
10010774:	e5ef803a 	cmpltu	r23,fp,r23
10010778:	490b883a 	add	r5,r9,r4
1001077c:	1004d43a 	srli	r2,r2,16
10010780:	b965883a 	add	r18,r23,r5
10010784:	24c9803a 	cmpltu	r4,r4,r19
10010788:	3d29803a 	cmpltu	r20,r7,r20
1001078c:	a128b03a 	or	r20,r20,r4
10010790:	95ef803a 	cmpltu	r23,r18,r23
10010794:	2a53803a 	cmpltu	r9,r5,r9
10010798:	a0a9883a 	add	r20,r20,r2
1001079c:	4deeb03a 	or	r23,r9,r23
100107a0:	a5ef883a 	add	r23,r20,r23
100107a4:	bc63883a 	add	r17,r23,r17
100107a8:	e004927a 	slli	r2,fp,9
100107ac:	d9000117 	ldw	r4,4(sp)
100107b0:	882e927a 	slli	r23,r17,9
100107b4:	9022d5fa 	srli	r17,r18,23
100107b8:	e038d5fa 	srli	fp,fp,23
100107bc:	1104b03a 	or	r2,r2,r4
100107c0:	9024927a 	slli	r18,r18,9
100107c4:	1004c03a 	cmpne	r2,r2,zero
100107c8:	bc62b03a 	or	r17,r23,r17
100107cc:	1738b03a 	or	fp,r2,fp
100107d0:	8880402c 	andhi	r2,r17,256
100107d4:	e4a4b03a 	or	r18,fp,r18
100107d8:	10000726 	beq	r2,zero,100107f8 <__muldf3+0x628>
100107dc:	9006d07a 	srli	r3,r18,1
100107e0:	880497fa 	slli	r2,r17,31
100107e4:	9480004c 	andi	r18,r18,1
100107e8:	8822d07a 	srli	r17,r17,1
100107ec:	1ca4b03a 	or	r18,r3,r18
100107f0:	14a4b03a 	or	r18,r2,r18
100107f4:	4007883a 	mov	r3,r8
100107f8:	1880ffc4 	addi	r2,r3,1023
100107fc:	0080460e 	bge	zero,r2,10010918 <__muldf3+0x748>
10010800:	910001cc 	andi	r4,r18,7
10010804:	20000726 	beq	r4,zero,10010824 <__muldf3+0x654>
10010808:	910003cc 	andi	r4,r18,15
1001080c:	01400104 	movi	r5,4
10010810:	21400426 	beq	r4,r5,10010824 <__muldf3+0x654>
10010814:	9149883a 	add	r4,r18,r5
10010818:	24a5803a 	cmpltu	r18,r4,r18
1001081c:	8ca3883a 	add	r17,r17,r18
10010820:	2025883a 	mov	r18,r4
10010824:	8900402c 	andhi	r4,r17,256
10010828:	20000426 	beq	r4,zero,1001083c <__muldf3+0x66c>
1001082c:	18810004 	addi	r2,r3,1024
10010830:	00ffc034 	movhi	r3,65280
10010834:	18ffffc4 	addi	r3,r3,-1
10010838:	88e2703a 	and	r17,r17,r3
1001083c:	00c1ff84 	movi	r3,2046
10010840:	18bf1316 	blt	r3,r2,10010490 <__alt_data_end+0xf8010490>
10010844:	882c977a 	slli	r22,r17,29
10010848:	9024d0fa 	srli	r18,r18,3
1001084c:	8822927a 	slli	r17,r17,9
10010850:	1081ffcc 	andi	r2,r2,2047
10010854:	b4acb03a 	or	r22,r22,r18
10010858:	8820d33a 	srli	r16,r17,12
1001085c:	3027883a 	mov	r19,r6
10010860:	003eba06 	br	1001034c <__alt_data_end+0xf801034c>
10010864:	8080022c 	andhi	r2,r16,8
10010868:	10000926 	beq	r2,zero,10010890 <__muldf3+0x6c0>
1001086c:	8880022c 	andhi	r2,r17,8
10010870:	1000071e 	bne	r2,zero,10010890 <__muldf3+0x6c0>
10010874:	00800434 	movhi	r2,16
10010878:	8c000234 	orhi	r16,r17,8
1001087c:	10bfffc4 	addi	r2,r2,-1
10010880:	e027883a 	mov	r19,fp
10010884:	80a0703a 	and	r16,r16,r2
10010888:	902d883a 	mov	r22,r18
1001088c:	003f1706 	br	100104ec <__alt_data_end+0xf80104ec>
10010890:	00800434 	movhi	r2,16
10010894:	84000234 	orhi	r16,r16,8
10010898:	10bfffc4 	addi	r2,r2,-1
1001089c:	80a0703a 	and	r16,r16,r2
100108a0:	003f1206 	br	100104ec <__alt_data_end+0xf80104ec>
100108a4:	147ff604 	addi	r17,r2,-40
100108a8:	3462983a 	sll	r17,r6,r17
100108ac:	0025883a 	mov	r18,zero
100108b0:	003ef306 	br	10010480 <__alt_data_end+0xf8010480>
100108b4:	3009883a 	mov	r4,r6
100108b8:	d9400215 	stw	r5,8(sp)
100108bc:	d9800715 	stw	r6,28(sp)
100108c0:	da400415 	stw	r9,16(sp)
100108c4:	da800315 	stw	r10,12(sp)
100108c8:	001153c0 	call	1001153c <__clzsi2>
100108cc:	10800804 	addi	r2,r2,32
100108d0:	da800317 	ldw	r10,12(sp)
100108d4:	da400417 	ldw	r9,16(sp)
100108d8:	d9800717 	ldw	r6,28(sp)
100108dc:	d9400217 	ldw	r5,8(sp)
100108e0:	003edd06 	br	10010458 <__alt_data_end+0xf8010458>
100108e4:	143ff604 	addi	r16,r2,-40
100108e8:	ac20983a 	sll	r16,r21,r16
100108ec:	002d883a 	mov	r22,zero
100108f0:	003ec106 	br	100103f8 <__alt_data_end+0xf80103f8>
100108f4:	d9800715 	stw	r6,28(sp)
100108f8:	d9c00215 	stw	r7,8(sp)
100108fc:	da400415 	stw	r9,16(sp)
10010900:	001153c0 	call	1001153c <__clzsi2>
10010904:	10800804 	addi	r2,r2,32
10010908:	da400417 	ldw	r9,16(sp)
1001090c:	d9c00217 	ldw	r7,8(sp)
10010910:	d9800717 	ldw	r6,28(sp)
10010914:	003eae06 	br	100103d0 <__alt_data_end+0xf80103d0>
10010918:	00c00044 	movi	r3,1
1001091c:	1887c83a 	sub	r3,r3,r2
10010920:	01000e04 	movi	r4,56
10010924:	20fe8516 	blt	r4,r3,1001033c <__alt_data_end+0xf801033c>
10010928:	010007c4 	movi	r4,31
1001092c:	20c01b16 	blt	r4,r3,1001099c <__muldf3+0x7cc>
10010930:	00800804 	movi	r2,32
10010934:	10c5c83a 	sub	r2,r2,r3
10010938:	888a983a 	sll	r5,r17,r2
1001093c:	90c8d83a 	srl	r4,r18,r3
10010940:	9084983a 	sll	r2,r18,r2
10010944:	88e2d83a 	srl	r17,r17,r3
10010948:	2906b03a 	or	r3,r5,r4
1001094c:	1004c03a 	cmpne	r2,r2,zero
10010950:	1886b03a 	or	r3,r3,r2
10010954:	188001cc 	andi	r2,r3,7
10010958:	10000726 	beq	r2,zero,10010978 <__muldf3+0x7a8>
1001095c:	188003cc 	andi	r2,r3,15
10010960:	01000104 	movi	r4,4
10010964:	11000426 	beq	r2,r4,10010978 <__muldf3+0x7a8>
10010968:	1805883a 	mov	r2,r3
1001096c:	10c00104 	addi	r3,r2,4
10010970:	1885803a 	cmpltu	r2,r3,r2
10010974:	88a3883a 	add	r17,r17,r2
10010978:	8880202c 	andhi	r2,r17,128
1001097c:	10001c26 	beq	r2,zero,100109f0 <__muldf3+0x820>
10010980:	3027883a 	mov	r19,r6
10010984:	00800044 	movi	r2,1
10010988:	0021883a 	mov	r16,zero
1001098c:	002d883a 	mov	r22,zero
10010990:	003e6e06 	br	1001034c <__alt_data_end+0xf801034c>
10010994:	4007883a 	mov	r3,r8
10010998:	003f9706 	br	100107f8 <__alt_data_end+0xf80107f8>
1001099c:	017ff844 	movi	r5,-31
100109a0:	2885c83a 	sub	r2,r5,r2
100109a4:	888ad83a 	srl	r5,r17,r2
100109a8:	00800804 	movi	r2,32
100109ac:	18801a26 	beq	r3,r2,10010a18 <__muldf3+0x848>
100109b0:	01001004 	movi	r4,64
100109b4:	20c7c83a 	sub	r3,r4,r3
100109b8:	88e2983a 	sll	r17,r17,r3
100109bc:	8ca4b03a 	or	r18,r17,r18
100109c0:	9004c03a 	cmpne	r2,r18,zero
100109c4:	2884b03a 	or	r2,r5,r2
100109c8:	144001cc 	andi	r17,r2,7
100109cc:	88000d1e 	bne	r17,zero,10010a04 <__muldf3+0x834>
100109d0:	0021883a 	mov	r16,zero
100109d4:	102cd0fa 	srli	r22,r2,3
100109d8:	3027883a 	mov	r19,r6
100109dc:	0005883a 	mov	r2,zero
100109e0:	b46cb03a 	or	r22,r22,r17
100109e4:	003e5906 	br	1001034c <__alt_data_end+0xf801034c>
100109e8:	1007883a 	mov	r3,r2
100109ec:	0023883a 	mov	r17,zero
100109f0:	8820927a 	slli	r16,r17,9
100109f4:	1805883a 	mov	r2,r3
100109f8:	8822977a 	slli	r17,r17,29
100109fc:	8020d33a 	srli	r16,r16,12
10010a00:	003ff406 	br	100109d4 <__alt_data_end+0xf80109d4>
10010a04:	10c003cc 	andi	r3,r2,15
10010a08:	01000104 	movi	r4,4
10010a0c:	193ff626 	beq	r3,r4,100109e8 <__alt_data_end+0xf80109e8>
10010a10:	0023883a 	mov	r17,zero
10010a14:	003fd506 	br	1001096c <__alt_data_end+0xf801096c>
10010a18:	0023883a 	mov	r17,zero
10010a1c:	003fe706 	br	100109bc <__alt_data_end+0xf80109bc>
10010a20:	00800434 	movhi	r2,16
10010a24:	8c000234 	orhi	r16,r17,8
10010a28:	10bfffc4 	addi	r2,r2,-1
10010a2c:	3027883a 	mov	r19,r6
10010a30:	80a0703a 	and	r16,r16,r2
10010a34:	902d883a 	mov	r22,r18
10010a38:	003eac06 	br	100104ec <__alt_data_end+0xf80104ec>

10010a3c <__subdf3>:
10010a3c:	02000434 	movhi	r8,16
10010a40:	423fffc4 	addi	r8,r8,-1
10010a44:	defffb04 	addi	sp,sp,-20
10010a48:	2a14703a 	and	r10,r5,r8
10010a4c:	3812d53a 	srli	r9,r7,20
10010a50:	3a10703a 	and	r8,r7,r8
10010a54:	2006d77a 	srli	r3,r4,29
10010a58:	3004d77a 	srli	r2,r6,29
10010a5c:	dc000015 	stw	r16,0(sp)
10010a60:	501490fa 	slli	r10,r10,3
10010a64:	2820d53a 	srli	r16,r5,20
10010a68:	401090fa 	slli	r8,r8,3
10010a6c:	dc800215 	stw	r18,8(sp)
10010a70:	dc400115 	stw	r17,4(sp)
10010a74:	dfc00415 	stw	ra,16(sp)
10010a78:	202290fa 	slli	r17,r4,3
10010a7c:	dcc00315 	stw	r19,12(sp)
10010a80:	4a41ffcc 	andi	r9,r9,2047
10010a84:	0101ffc4 	movi	r4,2047
10010a88:	2824d7fa 	srli	r18,r5,31
10010a8c:	8401ffcc 	andi	r16,r16,2047
10010a90:	50c6b03a 	or	r3,r10,r3
10010a94:	380ed7fa 	srli	r7,r7,31
10010a98:	408ab03a 	or	r5,r8,r2
10010a9c:	300c90fa 	slli	r6,r6,3
10010aa0:	49009626 	beq	r9,r4,10010cfc <__subdf3+0x2c0>
10010aa4:	39c0005c 	xori	r7,r7,1
10010aa8:	8245c83a 	sub	r2,r16,r9
10010aac:	3c807426 	beq	r7,r18,10010c80 <__subdf3+0x244>
10010ab0:	0080af0e 	bge	zero,r2,10010d70 <__subdf3+0x334>
10010ab4:	48002a1e 	bne	r9,zero,10010b60 <__subdf3+0x124>
10010ab8:	2988b03a 	or	r4,r5,r6
10010abc:	20009a1e 	bne	r4,zero,10010d28 <__subdf3+0x2ec>
10010ac0:	888001cc 	andi	r2,r17,7
10010ac4:	10000726 	beq	r2,zero,10010ae4 <__subdf3+0xa8>
10010ac8:	888003cc 	andi	r2,r17,15
10010acc:	01000104 	movi	r4,4
10010ad0:	11000426 	beq	r2,r4,10010ae4 <__subdf3+0xa8>
10010ad4:	890b883a 	add	r5,r17,r4
10010ad8:	2c63803a 	cmpltu	r17,r5,r17
10010adc:	1c47883a 	add	r3,r3,r17
10010ae0:	2823883a 	mov	r17,r5
10010ae4:	1880202c 	andhi	r2,r3,128
10010ae8:	10005926 	beq	r2,zero,10010c50 <__subdf3+0x214>
10010aec:	84000044 	addi	r16,r16,1
10010af0:	0081ffc4 	movi	r2,2047
10010af4:	8080be26 	beq	r16,r2,10010df0 <__subdf3+0x3b4>
10010af8:	017fe034 	movhi	r5,65408
10010afc:	297fffc4 	addi	r5,r5,-1
10010b00:	1946703a 	and	r3,r3,r5
10010b04:	1804977a 	slli	r2,r3,29
10010b08:	1806927a 	slli	r3,r3,9
10010b0c:	8822d0fa 	srli	r17,r17,3
10010b10:	8401ffcc 	andi	r16,r16,2047
10010b14:	180ad33a 	srli	r5,r3,12
10010b18:	9100004c 	andi	r4,r18,1
10010b1c:	1444b03a 	or	r2,r2,r17
10010b20:	80c1ffcc 	andi	r3,r16,2047
10010b24:	1820953a 	slli	r16,r3,20
10010b28:	20c03fcc 	andi	r3,r4,255
10010b2c:	180897fa 	slli	r4,r3,31
10010b30:	00c00434 	movhi	r3,16
10010b34:	18ffffc4 	addi	r3,r3,-1
10010b38:	28c6703a 	and	r3,r5,r3
10010b3c:	1c06b03a 	or	r3,r3,r16
10010b40:	1906b03a 	or	r3,r3,r4
10010b44:	dfc00417 	ldw	ra,16(sp)
10010b48:	dcc00317 	ldw	r19,12(sp)
10010b4c:	dc800217 	ldw	r18,8(sp)
10010b50:	dc400117 	ldw	r17,4(sp)
10010b54:	dc000017 	ldw	r16,0(sp)
10010b58:	dec00504 	addi	sp,sp,20
10010b5c:	f800283a 	ret
10010b60:	0101ffc4 	movi	r4,2047
10010b64:	813fd626 	beq	r16,r4,10010ac0 <__alt_data_end+0xf8010ac0>
10010b68:	29402034 	orhi	r5,r5,128
10010b6c:	01000e04 	movi	r4,56
10010b70:	2080a316 	blt	r4,r2,10010e00 <__subdf3+0x3c4>
10010b74:	010007c4 	movi	r4,31
10010b78:	2080c616 	blt	r4,r2,10010e94 <__subdf3+0x458>
10010b7c:	01000804 	movi	r4,32
10010b80:	2089c83a 	sub	r4,r4,r2
10010b84:	2910983a 	sll	r8,r5,r4
10010b88:	308ed83a 	srl	r7,r6,r2
10010b8c:	3108983a 	sll	r4,r6,r4
10010b90:	2884d83a 	srl	r2,r5,r2
10010b94:	41ccb03a 	or	r6,r8,r7
10010b98:	2008c03a 	cmpne	r4,r4,zero
10010b9c:	310cb03a 	or	r6,r6,r4
10010ba0:	898dc83a 	sub	r6,r17,r6
10010ba4:	89a3803a 	cmpltu	r17,r17,r6
10010ba8:	1887c83a 	sub	r3,r3,r2
10010bac:	1c47c83a 	sub	r3,r3,r17
10010bb0:	3023883a 	mov	r17,r6
10010bb4:	1880202c 	andhi	r2,r3,128
10010bb8:	10002326 	beq	r2,zero,10010c48 <__subdf3+0x20c>
10010bbc:	04c02034 	movhi	r19,128
10010bc0:	9cffffc4 	addi	r19,r19,-1
10010bc4:	1ce6703a 	and	r19,r3,r19
10010bc8:	98007a26 	beq	r19,zero,10010db4 <__subdf3+0x378>
10010bcc:	9809883a 	mov	r4,r19
10010bd0:	001153c0 	call	1001153c <__clzsi2>
10010bd4:	113ffe04 	addi	r4,r2,-8
10010bd8:	00c007c4 	movi	r3,31
10010bdc:	19007b16 	blt	r3,r4,10010dcc <__subdf3+0x390>
10010be0:	00800804 	movi	r2,32
10010be4:	1105c83a 	sub	r2,r2,r4
10010be8:	8884d83a 	srl	r2,r17,r2
10010bec:	9906983a 	sll	r3,r19,r4
10010bf0:	8922983a 	sll	r17,r17,r4
10010bf4:	10c4b03a 	or	r2,r2,r3
10010bf8:	24007816 	blt	r4,r16,10010ddc <__subdf3+0x3a0>
10010bfc:	2421c83a 	sub	r16,r4,r16
10010c00:	80c00044 	addi	r3,r16,1
10010c04:	010007c4 	movi	r4,31
10010c08:	20c09516 	blt	r4,r3,10010e60 <__subdf3+0x424>
10010c0c:	01400804 	movi	r5,32
10010c10:	28cbc83a 	sub	r5,r5,r3
10010c14:	88c8d83a 	srl	r4,r17,r3
10010c18:	8962983a 	sll	r17,r17,r5
10010c1c:	114a983a 	sll	r5,r2,r5
10010c20:	10c6d83a 	srl	r3,r2,r3
10010c24:	8804c03a 	cmpne	r2,r17,zero
10010c28:	290ab03a 	or	r5,r5,r4
10010c2c:	28a2b03a 	or	r17,r5,r2
10010c30:	0021883a 	mov	r16,zero
10010c34:	003fa206 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010c38:	2090b03a 	or	r8,r4,r2
10010c3c:	40018e26 	beq	r8,zero,10011278 <__subdf3+0x83c>
10010c40:	1007883a 	mov	r3,r2
10010c44:	2023883a 	mov	r17,r4
10010c48:	888001cc 	andi	r2,r17,7
10010c4c:	103f9e1e 	bne	r2,zero,10010ac8 <__alt_data_end+0xf8010ac8>
10010c50:	1804977a 	slli	r2,r3,29
10010c54:	8822d0fa 	srli	r17,r17,3
10010c58:	1810d0fa 	srli	r8,r3,3
10010c5c:	9100004c 	andi	r4,r18,1
10010c60:	1444b03a 	or	r2,r2,r17
10010c64:	00c1ffc4 	movi	r3,2047
10010c68:	80c02826 	beq	r16,r3,10010d0c <__subdf3+0x2d0>
10010c6c:	01400434 	movhi	r5,16
10010c70:	297fffc4 	addi	r5,r5,-1
10010c74:	80e0703a 	and	r16,r16,r3
10010c78:	414a703a 	and	r5,r8,r5
10010c7c:	003fa806 	br	10010b20 <__alt_data_end+0xf8010b20>
10010c80:	0080630e 	bge	zero,r2,10010e10 <__subdf3+0x3d4>
10010c84:	48003026 	beq	r9,zero,10010d48 <__subdf3+0x30c>
10010c88:	0101ffc4 	movi	r4,2047
10010c8c:	813f8c26 	beq	r16,r4,10010ac0 <__alt_data_end+0xf8010ac0>
10010c90:	29402034 	orhi	r5,r5,128
10010c94:	01000e04 	movi	r4,56
10010c98:	2080a90e 	bge	r4,r2,10010f40 <__subdf3+0x504>
10010c9c:	298cb03a 	or	r6,r5,r6
10010ca0:	3012c03a 	cmpne	r9,r6,zero
10010ca4:	0005883a 	mov	r2,zero
10010ca8:	4c53883a 	add	r9,r9,r17
10010cac:	4c63803a 	cmpltu	r17,r9,r17
10010cb0:	10c7883a 	add	r3,r2,r3
10010cb4:	88c7883a 	add	r3,r17,r3
10010cb8:	4823883a 	mov	r17,r9
10010cbc:	1880202c 	andhi	r2,r3,128
10010cc0:	1000d026 	beq	r2,zero,10011004 <__subdf3+0x5c8>
10010cc4:	84000044 	addi	r16,r16,1
10010cc8:	0081ffc4 	movi	r2,2047
10010ccc:	8080fe26 	beq	r16,r2,100110c8 <__subdf3+0x68c>
10010cd0:	00bfe034 	movhi	r2,65408
10010cd4:	10bfffc4 	addi	r2,r2,-1
10010cd8:	1886703a 	and	r3,r3,r2
10010cdc:	880ad07a 	srli	r5,r17,1
10010ce0:	180497fa 	slli	r2,r3,31
10010ce4:	8900004c 	andi	r4,r17,1
10010ce8:	2922b03a 	or	r17,r5,r4
10010cec:	1806d07a 	srli	r3,r3,1
10010cf0:	1462b03a 	or	r17,r2,r17
10010cf4:	3825883a 	mov	r18,r7
10010cf8:	003f7106 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010cfc:	2984b03a 	or	r2,r5,r6
10010d00:	103f6826 	beq	r2,zero,10010aa4 <__alt_data_end+0xf8010aa4>
10010d04:	39c03fcc 	andi	r7,r7,255
10010d08:	003f6706 	br	10010aa8 <__alt_data_end+0xf8010aa8>
10010d0c:	4086b03a 	or	r3,r8,r2
10010d10:	18015226 	beq	r3,zero,1001125c <__subdf3+0x820>
10010d14:	00c00434 	movhi	r3,16
10010d18:	41400234 	orhi	r5,r8,8
10010d1c:	18ffffc4 	addi	r3,r3,-1
10010d20:	28ca703a 	and	r5,r5,r3
10010d24:	003f7e06 	br	10010b20 <__alt_data_end+0xf8010b20>
10010d28:	10bfffc4 	addi	r2,r2,-1
10010d2c:	1000491e 	bne	r2,zero,10010e54 <__subdf3+0x418>
10010d30:	898fc83a 	sub	r7,r17,r6
10010d34:	89e3803a 	cmpltu	r17,r17,r7
10010d38:	1947c83a 	sub	r3,r3,r5
10010d3c:	1c47c83a 	sub	r3,r3,r17
10010d40:	3823883a 	mov	r17,r7
10010d44:	003f9b06 	br	10010bb4 <__alt_data_end+0xf8010bb4>
10010d48:	2988b03a 	or	r4,r5,r6
10010d4c:	203f5c26 	beq	r4,zero,10010ac0 <__alt_data_end+0xf8010ac0>
10010d50:	10bfffc4 	addi	r2,r2,-1
10010d54:	1000931e 	bne	r2,zero,10010fa4 <__subdf3+0x568>
10010d58:	898d883a 	add	r6,r17,r6
10010d5c:	3463803a 	cmpltu	r17,r6,r17
10010d60:	1947883a 	add	r3,r3,r5
10010d64:	88c7883a 	add	r3,r17,r3
10010d68:	3023883a 	mov	r17,r6
10010d6c:	003fd306 	br	10010cbc <__alt_data_end+0xf8010cbc>
10010d70:	1000541e 	bne	r2,zero,10010ec4 <__subdf3+0x488>
10010d74:	80800044 	addi	r2,r16,1
10010d78:	1081ffcc 	andi	r2,r2,2047
10010d7c:	01000044 	movi	r4,1
10010d80:	2080a20e 	bge	r4,r2,1001100c <__subdf3+0x5d0>
10010d84:	8989c83a 	sub	r4,r17,r6
10010d88:	8905803a 	cmpltu	r2,r17,r4
10010d8c:	1967c83a 	sub	r19,r3,r5
10010d90:	98a7c83a 	sub	r19,r19,r2
10010d94:	9880202c 	andhi	r2,r19,128
10010d98:	10006326 	beq	r2,zero,10010f28 <__subdf3+0x4ec>
10010d9c:	3463c83a 	sub	r17,r6,r17
10010da0:	28c7c83a 	sub	r3,r5,r3
10010da4:	344d803a 	cmpltu	r6,r6,r17
10010da8:	19a7c83a 	sub	r19,r3,r6
10010dac:	3825883a 	mov	r18,r7
10010db0:	983f861e 	bne	r19,zero,10010bcc <__alt_data_end+0xf8010bcc>
10010db4:	8809883a 	mov	r4,r17
10010db8:	001153c0 	call	1001153c <__clzsi2>
10010dbc:	10800804 	addi	r2,r2,32
10010dc0:	113ffe04 	addi	r4,r2,-8
10010dc4:	00c007c4 	movi	r3,31
10010dc8:	193f850e 	bge	r3,r4,10010be0 <__alt_data_end+0xf8010be0>
10010dcc:	10bff604 	addi	r2,r2,-40
10010dd0:	8884983a 	sll	r2,r17,r2
10010dd4:	0023883a 	mov	r17,zero
10010dd8:	243f880e 	bge	r4,r16,10010bfc <__alt_data_end+0xf8010bfc>
10010ddc:	00ffe034 	movhi	r3,65408
10010de0:	18ffffc4 	addi	r3,r3,-1
10010de4:	8121c83a 	sub	r16,r16,r4
10010de8:	10c6703a 	and	r3,r2,r3
10010dec:	003f3406 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010df0:	9100004c 	andi	r4,r18,1
10010df4:	000b883a 	mov	r5,zero
10010df8:	0005883a 	mov	r2,zero
10010dfc:	003f4806 	br	10010b20 <__alt_data_end+0xf8010b20>
10010e00:	298cb03a 	or	r6,r5,r6
10010e04:	300cc03a 	cmpne	r6,r6,zero
10010e08:	0005883a 	mov	r2,zero
10010e0c:	003f6406 	br	10010ba0 <__alt_data_end+0xf8010ba0>
10010e10:	10009a1e 	bne	r2,zero,1001107c <__subdf3+0x640>
10010e14:	82400044 	addi	r9,r16,1
10010e18:	4881ffcc 	andi	r2,r9,2047
10010e1c:	02800044 	movi	r10,1
10010e20:	5080670e 	bge	r10,r2,10010fc0 <__subdf3+0x584>
10010e24:	0081ffc4 	movi	r2,2047
10010e28:	4880af26 	beq	r9,r2,100110e8 <__subdf3+0x6ac>
10010e2c:	898d883a 	add	r6,r17,r6
10010e30:	1945883a 	add	r2,r3,r5
10010e34:	3447803a 	cmpltu	r3,r6,r17
10010e38:	1887883a 	add	r3,r3,r2
10010e3c:	182297fa 	slli	r17,r3,31
10010e40:	300cd07a 	srli	r6,r6,1
10010e44:	1806d07a 	srli	r3,r3,1
10010e48:	4821883a 	mov	r16,r9
10010e4c:	89a2b03a 	or	r17,r17,r6
10010e50:	003f1b06 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010e54:	0101ffc4 	movi	r4,2047
10010e58:	813f441e 	bne	r16,r4,10010b6c <__alt_data_end+0xf8010b6c>
10010e5c:	003f1806 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010e60:	843ff844 	addi	r16,r16,-31
10010e64:	01400804 	movi	r5,32
10010e68:	1408d83a 	srl	r4,r2,r16
10010e6c:	19405026 	beq	r3,r5,10010fb0 <__subdf3+0x574>
10010e70:	01401004 	movi	r5,64
10010e74:	28c7c83a 	sub	r3,r5,r3
10010e78:	10c4983a 	sll	r2,r2,r3
10010e7c:	88a2b03a 	or	r17,r17,r2
10010e80:	8822c03a 	cmpne	r17,r17,zero
10010e84:	2462b03a 	or	r17,r4,r17
10010e88:	0007883a 	mov	r3,zero
10010e8c:	0021883a 	mov	r16,zero
10010e90:	003f6d06 	br	10010c48 <__alt_data_end+0xf8010c48>
10010e94:	11fff804 	addi	r7,r2,-32
10010e98:	01000804 	movi	r4,32
10010e9c:	29ced83a 	srl	r7,r5,r7
10010ea0:	11004526 	beq	r2,r4,10010fb8 <__subdf3+0x57c>
10010ea4:	01001004 	movi	r4,64
10010ea8:	2089c83a 	sub	r4,r4,r2
10010eac:	2904983a 	sll	r2,r5,r4
10010eb0:	118cb03a 	or	r6,r2,r6
10010eb4:	300cc03a 	cmpne	r6,r6,zero
10010eb8:	398cb03a 	or	r6,r7,r6
10010ebc:	0005883a 	mov	r2,zero
10010ec0:	003f3706 	br	10010ba0 <__alt_data_end+0xf8010ba0>
10010ec4:	80002a26 	beq	r16,zero,10010f70 <__subdf3+0x534>
10010ec8:	0101ffc4 	movi	r4,2047
10010ecc:	49006626 	beq	r9,r4,10011068 <__subdf3+0x62c>
10010ed0:	0085c83a 	sub	r2,zero,r2
10010ed4:	18c02034 	orhi	r3,r3,128
10010ed8:	01000e04 	movi	r4,56
10010edc:	20807e16 	blt	r4,r2,100110d8 <__subdf3+0x69c>
10010ee0:	010007c4 	movi	r4,31
10010ee4:	2080e716 	blt	r4,r2,10011284 <__subdf3+0x848>
10010ee8:	01000804 	movi	r4,32
10010eec:	2089c83a 	sub	r4,r4,r2
10010ef0:	1914983a 	sll	r10,r3,r4
10010ef4:	8890d83a 	srl	r8,r17,r2
10010ef8:	8908983a 	sll	r4,r17,r4
10010efc:	1884d83a 	srl	r2,r3,r2
10010f00:	5222b03a 	or	r17,r10,r8
10010f04:	2006c03a 	cmpne	r3,r4,zero
10010f08:	88e2b03a 	or	r17,r17,r3
10010f0c:	3463c83a 	sub	r17,r6,r17
10010f10:	2885c83a 	sub	r2,r5,r2
10010f14:	344d803a 	cmpltu	r6,r6,r17
10010f18:	1187c83a 	sub	r3,r2,r6
10010f1c:	4821883a 	mov	r16,r9
10010f20:	3825883a 	mov	r18,r7
10010f24:	003f2306 	br	10010bb4 <__alt_data_end+0xf8010bb4>
10010f28:	24d0b03a 	or	r8,r4,r19
10010f2c:	40001b1e 	bne	r8,zero,10010f9c <__subdf3+0x560>
10010f30:	0005883a 	mov	r2,zero
10010f34:	0009883a 	mov	r4,zero
10010f38:	0021883a 	mov	r16,zero
10010f3c:	003f4906 	br	10010c64 <__alt_data_end+0xf8010c64>
10010f40:	010007c4 	movi	r4,31
10010f44:	20803a16 	blt	r4,r2,10011030 <__subdf3+0x5f4>
10010f48:	01000804 	movi	r4,32
10010f4c:	2089c83a 	sub	r4,r4,r2
10010f50:	2912983a 	sll	r9,r5,r4
10010f54:	3090d83a 	srl	r8,r6,r2
10010f58:	3108983a 	sll	r4,r6,r4
10010f5c:	2884d83a 	srl	r2,r5,r2
10010f60:	4a12b03a 	or	r9,r9,r8
10010f64:	2008c03a 	cmpne	r4,r4,zero
10010f68:	4912b03a 	or	r9,r9,r4
10010f6c:	003f4e06 	br	10010ca8 <__alt_data_end+0xf8010ca8>
10010f70:	1c48b03a 	or	r4,r3,r17
10010f74:	20003c26 	beq	r4,zero,10011068 <__subdf3+0x62c>
10010f78:	0084303a 	nor	r2,zero,r2
10010f7c:	1000381e 	bne	r2,zero,10011060 <__subdf3+0x624>
10010f80:	3463c83a 	sub	r17,r6,r17
10010f84:	28c5c83a 	sub	r2,r5,r3
10010f88:	344d803a 	cmpltu	r6,r6,r17
10010f8c:	1187c83a 	sub	r3,r2,r6
10010f90:	4821883a 	mov	r16,r9
10010f94:	3825883a 	mov	r18,r7
10010f98:	003f0606 	br	10010bb4 <__alt_data_end+0xf8010bb4>
10010f9c:	2023883a 	mov	r17,r4
10010fa0:	003f0906 	br	10010bc8 <__alt_data_end+0xf8010bc8>
10010fa4:	0101ffc4 	movi	r4,2047
10010fa8:	813f3a1e 	bne	r16,r4,10010c94 <__alt_data_end+0xf8010c94>
10010fac:	003ec406 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010fb0:	0005883a 	mov	r2,zero
10010fb4:	003fb106 	br	10010e7c <__alt_data_end+0xf8010e7c>
10010fb8:	0005883a 	mov	r2,zero
10010fbc:	003fbc06 	br	10010eb0 <__alt_data_end+0xf8010eb0>
10010fc0:	1c44b03a 	or	r2,r3,r17
10010fc4:	80008e1e 	bne	r16,zero,10011200 <__subdf3+0x7c4>
10010fc8:	1000c826 	beq	r2,zero,100112ec <__subdf3+0x8b0>
10010fcc:	2984b03a 	or	r2,r5,r6
10010fd0:	103ebb26 	beq	r2,zero,10010ac0 <__alt_data_end+0xf8010ac0>
10010fd4:	8989883a 	add	r4,r17,r6
10010fd8:	1945883a 	add	r2,r3,r5
10010fdc:	2447803a 	cmpltu	r3,r4,r17
10010fe0:	1887883a 	add	r3,r3,r2
10010fe4:	1880202c 	andhi	r2,r3,128
10010fe8:	2023883a 	mov	r17,r4
10010fec:	103f1626 	beq	r2,zero,10010c48 <__alt_data_end+0xf8010c48>
10010ff0:	00bfe034 	movhi	r2,65408
10010ff4:	10bfffc4 	addi	r2,r2,-1
10010ff8:	5021883a 	mov	r16,r10
10010ffc:	1886703a 	and	r3,r3,r2
10011000:	003eaf06 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10011004:	3825883a 	mov	r18,r7
10011008:	003f0f06 	br	10010c48 <__alt_data_end+0xf8010c48>
1001100c:	1c44b03a 	or	r2,r3,r17
10011010:	8000251e 	bne	r16,zero,100110a8 <__subdf3+0x66c>
10011014:	1000661e 	bne	r2,zero,100111b0 <__subdf3+0x774>
10011018:	2990b03a 	or	r8,r5,r6
1001101c:	40009626 	beq	r8,zero,10011278 <__subdf3+0x83c>
10011020:	2807883a 	mov	r3,r5
10011024:	3023883a 	mov	r17,r6
10011028:	3825883a 	mov	r18,r7
1001102c:	003ea406 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10011030:	127ff804 	addi	r9,r2,-32
10011034:	01000804 	movi	r4,32
10011038:	2a52d83a 	srl	r9,r5,r9
1001103c:	11008c26 	beq	r2,r4,10011270 <__subdf3+0x834>
10011040:	01001004 	movi	r4,64
10011044:	2085c83a 	sub	r2,r4,r2
10011048:	2884983a 	sll	r2,r5,r2
1001104c:	118cb03a 	or	r6,r2,r6
10011050:	300cc03a 	cmpne	r6,r6,zero
10011054:	4992b03a 	or	r9,r9,r6
10011058:	0005883a 	mov	r2,zero
1001105c:	003f1206 	br	10010ca8 <__alt_data_end+0xf8010ca8>
10011060:	0101ffc4 	movi	r4,2047
10011064:	493f9c1e 	bne	r9,r4,10010ed8 <__alt_data_end+0xf8010ed8>
10011068:	2807883a 	mov	r3,r5
1001106c:	3023883a 	mov	r17,r6
10011070:	4821883a 	mov	r16,r9
10011074:	3825883a 	mov	r18,r7
10011078:	003e9106 	br	10010ac0 <__alt_data_end+0xf8010ac0>
1001107c:	80001f1e 	bne	r16,zero,100110fc <__subdf3+0x6c0>
10011080:	1c48b03a 	or	r4,r3,r17
10011084:	20005a26 	beq	r4,zero,100111f0 <__subdf3+0x7b4>
10011088:	0084303a 	nor	r2,zero,r2
1001108c:	1000561e 	bne	r2,zero,100111e8 <__subdf3+0x7ac>
10011090:	89a3883a 	add	r17,r17,r6
10011094:	1945883a 	add	r2,r3,r5
10011098:	898d803a 	cmpltu	r6,r17,r6
1001109c:	3087883a 	add	r3,r6,r2
100110a0:	4821883a 	mov	r16,r9
100110a4:	003f0506 	br	10010cbc <__alt_data_end+0xf8010cbc>
100110a8:	10002b1e 	bne	r2,zero,10011158 <__subdf3+0x71c>
100110ac:	2984b03a 	or	r2,r5,r6
100110b0:	10008026 	beq	r2,zero,100112b4 <__subdf3+0x878>
100110b4:	2807883a 	mov	r3,r5
100110b8:	3023883a 	mov	r17,r6
100110bc:	3825883a 	mov	r18,r7
100110c0:	0401ffc4 	movi	r16,2047
100110c4:	003e7e06 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100110c8:	3809883a 	mov	r4,r7
100110cc:	0011883a 	mov	r8,zero
100110d0:	0005883a 	mov	r2,zero
100110d4:	003ee306 	br	10010c64 <__alt_data_end+0xf8010c64>
100110d8:	1c62b03a 	or	r17,r3,r17
100110dc:	8822c03a 	cmpne	r17,r17,zero
100110e0:	0005883a 	mov	r2,zero
100110e4:	003f8906 	br	10010f0c <__alt_data_end+0xf8010f0c>
100110e8:	3809883a 	mov	r4,r7
100110ec:	4821883a 	mov	r16,r9
100110f0:	0011883a 	mov	r8,zero
100110f4:	0005883a 	mov	r2,zero
100110f8:	003eda06 	br	10010c64 <__alt_data_end+0xf8010c64>
100110fc:	0101ffc4 	movi	r4,2047
10011100:	49003b26 	beq	r9,r4,100111f0 <__subdf3+0x7b4>
10011104:	0085c83a 	sub	r2,zero,r2
10011108:	18c02034 	orhi	r3,r3,128
1001110c:	01000e04 	movi	r4,56
10011110:	20806e16 	blt	r4,r2,100112cc <__subdf3+0x890>
10011114:	010007c4 	movi	r4,31
10011118:	20807716 	blt	r4,r2,100112f8 <__subdf3+0x8bc>
1001111c:	01000804 	movi	r4,32
10011120:	2089c83a 	sub	r4,r4,r2
10011124:	1914983a 	sll	r10,r3,r4
10011128:	8890d83a 	srl	r8,r17,r2
1001112c:	8908983a 	sll	r4,r17,r4
10011130:	1884d83a 	srl	r2,r3,r2
10011134:	5222b03a 	or	r17,r10,r8
10011138:	2006c03a 	cmpne	r3,r4,zero
1001113c:	88e2b03a 	or	r17,r17,r3
10011140:	89a3883a 	add	r17,r17,r6
10011144:	1145883a 	add	r2,r2,r5
10011148:	898d803a 	cmpltu	r6,r17,r6
1001114c:	3087883a 	add	r3,r6,r2
10011150:	4821883a 	mov	r16,r9
10011154:	003ed906 	br	10010cbc <__alt_data_end+0xf8010cbc>
10011158:	2984b03a 	or	r2,r5,r6
1001115c:	10004226 	beq	r2,zero,10011268 <__subdf3+0x82c>
10011160:	1808d0fa 	srli	r4,r3,3
10011164:	8822d0fa 	srli	r17,r17,3
10011168:	1806977a 	slli	r3,r3,29
1001116c:	2080022c 	andhi	r2,r4,8
10011170:	1c62b03a 	or	r17,r3,r17
10011174:	10000826 	beq	r2,zero,10011198 <__subdf3+0x75c>
10011178:	2812d0fa 	srli	r9,r5,3
1001117c:	4880022c 	andhi	r2,r9,8
10011180:	1000051e 	bne	r2,zero,10011198 <__subdf3+0x75c>
10011184:	300cd0fa 	srli	r6,r6,3
10011188:	2804977a 	slli	r2,r5,29
1001118c:	4809883a 	mov	r4,r9
10011190:	3825883a 	mov	r18,r7
10011194:	11a2b03a 	or	r17,r2,r6
10011198:	8806d77a 	srli	r3,r17,29
1001119c:	200890fa 	slli	r4,r4,3
100111a0:	882290fa 	slli	r17,r17,3
100111a4:	0401ffc4 	movi	r16,2047
100111a8:	1906b03a 	or	r3,r3,r4
100111ac:	003e4406 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100111b0:	2984b03a 	or	r2,r5,r6
100111b4:	103e4226 	beq	r2,zero,10010ac0 <__alt_data_end+0xf8010ac0>
100111b8:	8989c83a 	sub	r4,r17,r6
100111bc:	8911803a 	cmpltu	r8,r17,r4
100111c0:	1945c83a 	sub	r2,r3,r5
100111c4:	1205c83a 	sub	r2,r2,r8
100111c8:	1200202c 	andhi	r8,r2,128
100111cc:	403e9a26 	beq	r8,zero,10010c38 <__alt_data_end+0xf8010c38>
100111d0:	3463c83a 	sub	r17,r6,r17
100111d4:	28c5c83a 	sub	r2,r5,r3
100111d8:	344d803a 	cmpltu	r6,r6,r17
100111dc:	1187c83a 	sub	r3,r2,r6
100111e0:	3825883a 	mov	r18,r7
100111e4:	003e3606 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100111e8:	0101ffc4 	movi	r4,2047
100111ec:	493fc71e 	bne	r9,r4,1001110c <__alt_data_end+0xf801110c>
100111f0:	2807883a 	mov	r3,r5
100111f4:	3023883a 	mov	r17,r6
100111f8:	4821883a 	mov	r16,r9
100111fc:	003e3006 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10011200:	10003626 	beq	r2,zero,100112dc <__subdf3+0x8a0>
10011204:	2984b03a 	or	r2,r5,r6
10011208:	10001726 	beq	r2,zero,10011268 <__subdf3+0x82c>
1001120c:	1808d0fa 	srli	r4,r3,3
10011210:	8822d0fa 	srli	r17,r17,3
10011214:	1806977a 	slli	r3,r3,29
10011218:	2080022c 	andhi	r2,r4,8
1001121c:	1c62b03a 	or	r17,r3,r17
10011220:	10000726 	beq	r2,zero,10011240 <__subdf3+0x804>
10011224:	2812d0fa 	srli	r9,r5,3
10011228:	4880022c 	andhi	r2,r9,8
1001122c:	1000041e 	bne	r2,zero,10011240 <__subdf3+0x804>
10011230:	300cd0fa 	srli	r6,r6,3
10011234:	2804977a 	slli	r2,r5,29
10011238:	4809883a 	mov	r4,r9
1001123c:	11a2b03a 	or	r17,r2,r6
10011240:	8806d77a 	srli	r3,r17,29
10011244:	200890fa 	slli	r4,r4,3
10011248:	882290fa 	slli	r17,r17,3
1001124c:	3825883a 	mov	r18,r7
10011250:	1906b03a 	or	r3,r3,r4
10011254:	0401ffc4 	movi	r16,2047
10011258:	003e1906 	br	10010ac0 <__alt_data_end+0xf8010ac0>
1001125c:	000b883a 	mov	r5,zero
10011260:	0005883a 	mov	r2,zero
10011264:	003e2e06 	br	10010b20 <__alt_data_end+0xf8010b20>
10011268:	0401ffc4 	movi	r16,2047
1001126c:	003e1406 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10011270:	0005883a 	mov	r2,zero
10011274:	003f7506 	br	1001104c <__alt_data_end+0xf801104c>
10011278:	0005883a 	mov	r2,zero
1001127c:	0009883a 	mov	r4,zero
10011280:	003e7806 	br	10010c64 <__alt_data_end+0xf8010c64>
10011284:	123ff804 	addi	r8,r2,-32
10011288:	01000804 	movi	r4,32
1001128c:	1a10d83a 	srl	r8,r3,r8
10011290:	11002526 	beq	r2,r4,10011328 <__subdf3+0x8ec>
10011294:	01001004 	movi	r4,64
10011298:	2085c83a 	sub	r2,r4,r2
1001129c:	1884983a 	sll	r2,r3,r2
100112a0:	1444b03a 	or	r2,r2,r17
100112a4:	1004c03a 	cmpne	r2,r2,zero
100112a8:	40a2b03a 	or	r17,r8,r2
100112ac:	0005883a 	mov	r2,zero
100112b0:	003f1606 	br	10010f0c <__alt_data_end+0xf8010f0c>
100112b4:	02000434 	movhi	r8,16
100112b8:	0009883a 	mov	r4,zero
100112bc:	423fffc4 	addi	r8,r8,-1
100112c0:	00bfffc4 	movi	r2,-1
100112c4:	0401ffc4 	movi	r16,2047
100112c8:	003e6606 	br	10010c64 <__alt_data_end+0xf8010c64>
100112cc:	1c62b03a 	or	r17,r3,r17
100112d0:	8822c03a 	cmpne	r17,r17,zero
100112d4:	0005883a 	mov	r2,zero
100112d8:	003f9906 	br	10011140 <__alt_data_end+0xf8011140>
100112dc:	2807883a 	mov	r3,r5
100112e0:	3023883a 	mov	r17,r6
100112e4:	0401ffc4 	movi	r16,2047
100112e8:	003df506 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100112ec:	2807883a 	mov	r3,r5
100112f0:	3023883a 	mov	r17,r6
100112f4:	003df206 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100112f8:	123ff804 	addi	r8,r2,-32
100112fc:	01000804 	movi	r4,32
10011300:	1a10d83a 	srl	r8,r3,r8
10011304:	11000a26 	beq	r2,r4,10011330 <__subdf3+0x8f4>
10011308:	01001004 	movi	r4,64
1001130c:	2085c83a 	sub	r2,r4,r2
10011310:	1884983a 	sll	r2,r3,r2
10011314:	1444b03a 	or	r2,r2,r17
10011318:	1004c03a 	cmpne	r2,r2,zero
1001131c:	40a2b03a 	or	r17,r8,r2
10011320:	0005883a 	mov	r2,zero
10011324:	003f8606 	br	10011140 <__alt_data_end+0xf8011140>
10011328:	0005883a 	mov	r2,zero
1001132c:	003fdc06 	br	100112a0 <__alt_data_end+0xf80112a0>
10011330:	0005883a 	mov	r2,zero
10011334:	003ff706 	br	10011314 <__alt_data_end+0xf8011314>

10011338 <__fixdfsi>:
10011338:	280cd53a 	srli	r6,r5,20
1001133c:	00c00434 	movhi	r3,16
10011340:	18ffffc4 	addi	r3,r3,-1
10011344:	3181ffcc 	andi	r6,r6,2047
10011348:	01c0ff84 	movi	r7,1022
1001134c:	28c6703a 	and	r3,r5,r3
10011350:	280ad7fa 	srli	r5,r5,31
10011354:	3980120e 	bge	r7,r6,100113a0 <__fixdfsi+0x68>
10011358:	00810744 	movi	r2,1053
1001135c:	11800c16 	blt	r2,r6,10011390 <__fixdfsi+0x58>
10011360:	00810cc4 	movi	r2,1075
10011364:	1185c83a 	sub	r2,r2,r6
10011368:	01c007c4 	movi	r7,31
1001136c:	18c00434 	orhi	r3,r3,16
10011370:	38800d16 	blt	r7,r2,100113a8 <__fixdfsi+0x70>
10011374:	31befb44 	addi	r6,r6,-1043
10011378:	2084d83a 	srl	r2,r4,r2
1001137c:	1986983a 	sll	r3,r3,r6
10011380:	1884b03a 	or	r2,r3,r2
10011384:	28000726 	beq	r5,zero,100113a4 <__fixdfsi+0x6c>
10011388:	0085c83a 	sub	r2,zero,r2
1001138c:	f800283a 	ret
10011390:	00a00034 	movhi	r2,32768
10011394:	10bfffc4 	addi	r2,r2,-1
10011398:	2885883a 	add	r2,r5,r2
1001139c:	f800283a 	ret
100113a0:	0005883a 	mov	r2,zero
100113a4:	f800283a 	ret
100113a8:	008104c4 	movi	r2,1043
100113ac:	1185c83a 	sub	r2,r2,r6
100113b0:	1884d83a 	srl	r2,r3,r2
100113b4:	003ff306 	br	10011384 <__alt_data_end+0xf8011384>

100113b8 <__floatsidf>:
100113b8:	defffd04 	addi	sp,sp,-12
100113bc:	dfc00215 	stw	ra,8(sp)
100113c0:	dc400115 	stw	r17,4(sp)
100113c4:	dc000015 	stw	r16,0(sp)
100113c8:	20002b26 	beq	r4,zero,10011478 <__floatsidf+0xc0>
100113cc:	2023883a 	mov	r17,r4
100113d0:	2020d7fa 	srli	r16,r4,31
100113d4:	20002d16 	blt	r4,zero,1001148c <__floatsidf+0xd4>
100113d8:	8809883a 	mov	r4,r17
100113dc:	001153c0 	call	1001153c <__clzsi2>
100113e0:	01410784 	movi	r5,1054
100113e4:	288bc83a 	sub	r5,r5,r2
100113e8:	01010cc4 	movi	r4,1075
100113ec:	2149c83a 	sub	r4,r4,r5
100113f0:	00c007c4 	movi	r3,31
100113f4:	1900160e 	bge	r3,r4,10011450 <__floatsidf+0x98>
100113f8:	00c104c4 	movi	r3,1043
100113fc:	1947c83a 	sub	r3,r3,r5
10011400:	88c6983a 	sll	r3,r17,r3
10011404:	00800434 	movhi	r2,16
10011408:	10bfffc4 	addi	r2,r2,-1
1001140c:	1886703a 	and	r3,r3,r2
10011410:	2941ffcc 	andi	r5,r5,2047
10011414:	800d883a 	mov	r6,r16
10011418:	0005883a 	mov	r2,zero
1001141c:	280a953a 	slli	r5,r5,20
10011420:	31803fcc 	andi	r6,r6,255
10011424:	01000434 	movhi	r4,16
10011428:	300c97fa 	slli	r6,r6,31
1001142c:	213fffc4 	addi	r4,r4,-1
10011430:	1906703a 	and	r3,r3,r4
10011434:	1946b03a 	or	r3,r3,r5
10011438:	1986b03a 	or	r3,r3,r6
1001143c:	dfc00217 	ldw	ra,8(sp)
10011440:	dc400117 	ldw	r17,4(sp)
10011444:	dc000017 	ldw	r16,0(sp)
10011448:	dec00304 	addi	sp,sp,12
1001144c:	f800283a 	ret
10011450:	00c002c4 	movi	r3,11
10011454:	1887c83a 	sub	r3,r3,r2
10011458:	88c6d83a 	srl	r3,r17,r3
1001145c:	8904983a 	sll	r2,r17,r4
10011460:	01000434 	movhi	r4,16
10011464:	213fffc4 	addi	r4,r4,-1
10011468:	2941ffcc 	andi	r5,r5,2047
1001146c:	1906703a 	and	r3,r3,r4
10011470:	800d883a 	mov	r6,r16
10011474:	003fe906 	br	1001141c <__alt_data_end+0xf801141c>
10011478:	000d883a 	mov	r6,zero
1001147c:	000b883a 	mov	r5,zero
10011480:	0007883a 	mov	r3,zero
10011484:	0005883a 	mov	r2,zero
10011488:	003fe406 	br	1001141c <__alt_data_end+0xf801141c>
1001148c:	0123c83a 	sub	r17,zero,r4
10011490:	003fd106 	br	100113d8 <__alt_data_end+0xf80113d8>

10011494 <__floatunsidf>:
10011494:	defffe04 	addi	sp,sp,-8
10011498:	dc000015 	stw	r16,0(sp)
1001149c:	dfc00115 	stw	ra,4(sp)
100114a0:	2021883a 	mov	r16,r4
100114a4:	20002226 	beq	r4,zero,10011530 <__floatunsidf+0x9c>
100114a8:	001153c0 	call	1001153c <__clzsi2>
100114ac:	01010784 	movi	r4,1054
100114b0:	2089c83a 	sub	r4,r4,r2
100114b4:	01810cc4 	movi	r6,1075
100114b8:	310dc83a 	sub	r6,r6,r4
100114bc:	00c007c4 	movi	r3,31
100114c0:	1980120e 	bge	r3,r6,1001150c <__floatunsidf+0x78>
100114c4:	00c104c4 	movi	r3,1043
100114c8:	1907c83a 	sub	r3,r3,r4
100114cc:	80ca983a 	sll	r5,r16,r3
100114d0:	00800434 	movhi	r2,16
100114d4:	10bfffc4 	addi	r2,r2,-1
100114d8:	2101ffcc 	andi	r4,r4,2047
100114dc:	0021883a 	mov	r16,zero
100114e0:	288a703a 	and	r5,r5,r2
100114e4:	2008953a 	slli	r4,r4,20
100114e8:	00c00434 	movhi	r3,16
100114ec:	18ffffc4 	addi	r3,r3,-1
100114f0:	28c6703a 	and	r3,r5,r3
100114f4:	8005883a 	mov	r2,r16
100114f8:	1906b03a 	or	r3,r3,r4
100114fc:	dfc00117 	ldw	ra,4(sp)
10011500:	dc000017 	ldw	r16,0(sp)
10011504:	dec00204 	addi	sp,sp,8
10011508:	f800283a 	ret
1001150c:	00c002c4 	movi	r3,11
10011510:	188bc83a 	sub	r5,r3,r2
10011514:	814ad83a 	srl	r5,r16,r5
10011518:	00c00434 	movhi	r3,16
1001151c:	18ffffc4 	addi	r3,r3,-1
10011520:	81a0983a 	sll	r16,r16,r6
10011524:	2101ffcc 	andi	r4,r4,2047
10011528:	28ca703a 	and	r5,r5,r3
1001152c:	003fed06 	br	100114e4 <__alt_data_end+0xf80114e4>
10011530:	0009883a 	mov	r4,zero
10011534:	000b883a 	mov	r5,zero
10011538:	003fea06 	br	100114e4 <__alt_data_end+0xf80114e4>

1001153c <__clzsi2>:
1001153c:	00bfffd4 	movui	r2,65535
10011540:	11000536 	bltu	r2,r4,10011558 <__clzsi2+0x1c>
10011544:	00803fc4 	movi	r2,255
10011548:	11000f36 	bltu	r2,r4,10011588 <__clzsi2+0x4c>
1001154c:	00800804 	movi	r2,32
10011550:	0007883a 	mov	r3,zero
10011554:	00000506 	br	1001156c <__clzsi2+0x30>
10011558:	00804034 	movhi	r2,256
1001155c:	10bfffc4 	addi	r2,r2,-1
10011560:	11000c2e 	bgeu	r2,r4,10011594 <__clzsi2+0x58>
10011564:	00800204 	movi	r2,8
10011568:	00c00604 	movi	r3,24
1001156c:	20c8d83a 	srl	r4,r4,r3
10011570:	00c40074 	movhi	r3,4097
10011574:	18d21e04 	addi	r3,r3,18552
10011578:	1909883a 	add	r4,r3,r4
1001157c:	20c00003 	ldbu	r3,0(r4)
10011580:	10c5c83a 	sub	r2,r2,r3
10011584:	f800283a 	ret
10011588:	00800604 	movi	r2,24
1001158c:	00c00204 	movi	r3,8
10011590:	003ff606 	br	1001156c <__alt_data_end+0xf801156c>
10011594:	00800404 	movi	r2,16
10011598:	1007883a 	mov	r3,r2
1001159c:	003ff306 	br	1001156c <__alt_data_end+0xf801156c>

100115a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100115a0:	defffe04 	addi	sp,sp,-8
100115a4:	dfc00115 	stw	ra,4(sp)
100115a8:	df000015 	stw	fp,0(sp)
100115ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100115b0:	d0a00e17 	ldw	r2,-32712(gp)
100115b4:	10000326 	beq	r2,zero,100115c4 <alt_get_errno+0x24>
100115b8:	d0a00e17 	ldw	r2,-32712(gp)
100115bc:	103ee83a 	callr	r2
100115c0:	00000106 	br	100115c8 <alt_get_errno+0x28>
100115c4:	d0ab6004 	addi	r2,gp,-21120
}
100115c8:	e037883a 	mov	sp,fp
100115cc:	dfc00117 	ldw	ra,4(sp)
100115d0:	df000017 	ldw	fp,0(sp)
100115d4:	dec00204 	addi	sp,sp,8
100115d8:	f800283a 	ret

100115dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100115dc:	defffb04 	addi	sp,sp,-20
100115e0:	dfc00415 	stw	ra,16(sp)
100115e4:	df000315 	stw	fp,12(sp)
100115e8:	df000304 	addi	fp,sp,12
100115ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100115f0:	e0bfff17 	ldw	r2,-4(fp)
100115f4:	10000816 	blt	r2,zero,10011618 <close+0x3c>
100115f8:	01400304 	movi	r5,12
100115fc:	e13fff17 	ldw	r4,-4(fp)
10011600:	00046600 	call	10004660 <__mulsi3>
10011604:	1007883a 	mov	r3,r2
10011608:	00840074 	movhi	r2,4097
1001160c:	10991e04 	addi	r2,r2,25720
10011610:	1885883a 	add	r2,r3,r2
10011614:	00000106 	br	1001161c <close+0x40>
10011618:	0005883a 	mov	r2,zero
1001161c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011620:	e0bffd17 	ldw	r2,-12(fp)
10011624:	10001926 	beq	r2,zero,1001168c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011628:	e0bffd17 	ldw	r2,-12(fp)
1001162c:	10800017 	ldw	r2,0(r2)
10011630:	10800417 	ldw	r2,16(r2)
10011634:	10000626 	beq	r2,zero,10011650 <close+0x74>
10011638:	e0bffd17 	ldw	r2,-12(fp)
1001163c:	10800017 	ldw	r2,0(r2)
10011640:	10800417 	ldw	r2,16(r2)
10011644:	e13ffd17 	ldw	r4,-12(fp)
10011648:	103ee83a 	callr	r2
1001164c:	00000106 	br	10011654 <close+0x78>
10011650:	0005883a 	mov	r2,zero
10011654:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011658:	e13fff17 	ldw	r4,-4(fp)
1001165c:	0011cc40 	call	10011cc4 <alt_release_fd>
    if (rval < 0)
10011660:	e0bffe17 	ldw	r2,-8(fp)
10011664:	1000070e 	bge	r2,zero,10011684 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011668:	00115a00 	call	100115a0 <alt_get_errno>
1001166c:	1007883a 	mov	r3,r2
10011670:	e0bffe17 	ldw	r2,-8(fp)
10011674:	0085c83a 	sub	r2,zero,r2
10011678:	18800015 	stw	r2,0(r3)
      return -1;
1001167c:	00bfffc4 	movi	r2,-1
10011680:	00000706 	br	100116a0 <close+0xc4>
    }
    return 0;
10011684:	0005883a 	mov	r2,zero
10011688:	00000506 	br	100116a0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001168c:	00115a00 	call	100115a0 <alt_get_errno>
10011690:	1007883a 	mov	r3,r2
10011694:	00801444 	movi	r2,81
10011698:	18800015 	stw	r2,0(r3)
    return -1;
1001169c:	00bfffc4 	movi	r2,-1
  }
}
100116a0:	e037883a 	mov	sp,fp
100116a4:	dfc00117 	ldw	ra,4(sp)
100116a8:	df000017 	ldw	fp,0(sp)
100116ac:	dec00204 	addi	sp,sp,8
100116b0:	f800283a 	ret

100116b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100116b4:	defffc04 	addi	sp,sp,-16
100116b8:	df000315 	stw	fp,12(sp)
100116bc:	df000304 	addi	fp,sp,12
100116c0:	e13ffd15 	stw	r4,-12(fp)
100116c4:	e17ffe15 	stw	r5,-8(fp)
100116c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
100116cc:	e0bfff17 	ldw	r2,-4(fp)
}
100116d0:	e037883a 	mov	sp,fp
100116d4:	df000017 	ldw	fp,0(sp)
100116d8:	dec00104 	addi	sp,sp,4
100116dc:	f800283a 	ret

100116e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100116e0:	defffe04 	addi	sp,sp,-8
100116e4:	dfc00115 	stw	ra,4(sp)
100116e8:	df000015 	stw	fp,0(sp)
100116ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100116f0:	d0a00e17 	ldw	r2,-32712(gp)
100116f4:	10000326 	beq	r2,zero,10011704 <alt_get_errno+0x24>
100116f8:	d0a00e17 	ldw	r2,-32712(gp)
100116fc:	103ee83a 	callr	r2
10011700:	00000106 	br	10011708 <alt_get_errno+0x28>
10011704:	d0ab6004 	addi	r2,gp,-21120
}
10011708:	e037883a 	mov	sp,fp
1001170c:	dfc00117 	ldw	ra,4(sp)
10011710:	df000017 	ldw	fp,0(sp)
10011714:	dec00204 	addi	sp,sp,8
10011718:	f800283a 	ret

1001171c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1001171c:	defffb04 	addi	sp,sp,-20
10011720:	dfc00415 	stw	ra,16(sp)
10011724:	df000315 	stw	fp,12(sp)
10011728:	df000304 	addi	fp,sp,12
1001172c:	e13ffe15 	stw	r4,-8(fp)
10011730:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011734:	e0bffe17 	ldw	r2,-8(fp)
10011738:	10000816 	blt	r2,zero,1001175c <fstat+0x40>
1001173c:	01400304 	movi	r5,12
10011740:	e13ffe17 	ldw	r4,-8(fp)
10011744:	00046600 	call	10004660 <__mulsi3>
10011748:	1007883a 	mov	r3,r2
1001174c:	00840074 	movhi	r2,4097
10011750:	10991e04 	addi	r2,r2,25720
10011754:	1885883a 	add	r2,r3,r2
10011758:	00000106 	br	10011760 <fstat+0x44>
1001175c:	0005883a 	mov	r2,zero
10011760:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011764:	e0bffd17 	ldw	r2,-12(fp)
10011768:	10001026 	beq	r2,zero,100117ac <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1001176c:	e0bffd17 	ldw	r2,-12(fp)
10011770:	10800017 	ldw	r2,0(r2)
10011774:	10800817 	ldw	r2,32(r2)
10011778:	10000726 	beq	r2,zero,10011798 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1001177c:	e0bffd17 	ldw	r2,-12(fp)
10011780:	10800017 	ldw	r2,0(r2)
10011784:	10800817 	ldw	r2,32(r2)
10011788:	e17fff17 	ldw	r5,-4(fp)
1001178c:	e13ffd17 	ldw	r4,-12(fp)
10011790:	103ee83a 	callr	r2
10011794:	00000a06 	br	100117c0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011798:	e0bfff17 	ldw	r2,-4(fp)
1001179c:	00c80004 	movi	r3,8192
100117a0:	10c00115 	stw	r3,4(r2)
      return 0;
100117a4:	0005883a 	mov	r2,zero
100117a8:	00000506 	br	100117c0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100117ac:	00116e00 	call	100116e0 <alt_get_errno>
100117b0:	1007883a 	mov	r3,r2
100117b4:	00801444 	movi	r2,81
100117b8:	18800015 	stw	r2,0(r3)
    return -1;
100117bc:	00bfffc4 	movi	r2,-1
  }
}
100117c0:	e037883a 	mov	sp,fp
100117c4:	dfc00117 	ldw	ra,4(sp)
100117c8:	df000017 	ldw	fp,0(sp)
100117cc:	dec00204 	addi	sp,sp,8
100117d0:	f800283a 	ret

100117d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100117d4:	defffe04 	addi	sp,sp,-8
100117d8:	dfc00115 	stw	ra,4(sp)
100117dc:	df000015 	stw	fp,0(sp)
100117e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100117e4:	d0a00e17 	ldw	r2,-32712(gp)
100117e8:	10000326 	beq	r2,zero,100117f8 <alt_get_errno+0x24>
100117ec:	d0a00e17 	ldw	r2,-32712(gp)
100117f0:	103ee83a 	callr	r2
100117f4:	00000106 	br	100117fc <alt_get_errno+0x28>
100117f8:	d0ab6004 	addi	r2,gp,-21120
}
100117fc:	e037883a 	mov	sp,fp
10011800:	dfc00117 	ldw	ra,4(sp)
10011804:	df000017 	ldw	fp,0(sp)
10011808:	dec00204 	addi	sp,sp,8
1001180c:	f800283a 	ret

10011810 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011810:	deffed04 	addi	sp,sp,-76
10011814:	dfc01215 	stw	ra,72(sp)
10011818:	df001115 	stw	fp,68(sp)
1001181c:	df001104 	addi	fp,sp,68
10011820:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011824:	e0bfff17 	ldw	r2,-4(fp)
10011828:	10000816 	blt	r2,zero,1001184c <isatty+0x3c>
1001182c:	01400304 	movi	r5,12
10011830:	e13fff17 	ldw	r4,-4(fp)
10011834:	00046600 	call	10004660 <__mulsi3>
10011838:	1007883a 	mov	r3,r2
1001183c:	00840074 	movhi	r2,4097
10011840:	10991e04 	addi	r2,r2,25720
10011844:	1885883a 	add	r2,r3,r2
10011848:	00000106 	br	10011850 <isatty+0x40>
1001184c:	0005883a 	mov	r2,zero
10011850:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011854:	e0bfef17 	ldw	r2,-68(fp)
10011858:	10000e26 	beq	r2,zero,10011894 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001185c:	e0bfef17 	ldw	r2,-68(fp)
10011860:	10800017 	ldw	r2,0(r2)
10011864:	10800817 	ldw	r2,32(r2)
10011868:	1000021e 	bne	r2,zero,10011874 <isatty+0x64>
    {
      return 1;
1001186c:	00800044 	movi	r2,1
10011870:	00000d06 	br	100118a8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011874:	e0bff004 	addi	r2,fp,-64
10011878:	100b883a 	mov	r5,r2
1001187c:	e13fff17 	ldw	r4,-4(fp)
10011880:	001171c0 	call	1001171c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10011884:	e0bff117 	ldw	r2,-60(fp)
10011888:	10880020 	cmpeqi	r2,r2,8192
1001188c:	10803fcc 	andi	r2,r2,255
10011890:	00000506 	br	100118a8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011894:	00117d40 	call	100117d4 <alt_get_errno>
10011898:	1007883a 	mov	r3,r2
1001189c:	00801444 	movi	r2,81
100118a0:	18800015 	stw	r2,0(r3)
    return 0;
100118a4:	0005883a 	mov	r2,zero
  }
}
100118a8:	e037883a 	mov	sp,fp
100118ac:	dfc00117 	ldw	ra,4(sp)
100118b0:	df000017 	ldw	fp,0(sp)
100118b4:	dec00204 	addi	sp,sp,8
100118b8:	f800283a 	ret

100118bc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100118bc:	defffc04 	addi	sp,sp,-16
100118c0:	df000315 	stw	fp,12(sp)
100118c4:	df000304 	addi	fp,sp,12
100118c8:	e13ffd15 	stw	r4,-12(fp)
100118cc:	e17ffe15 	stw	r5,-8(fp)
100118d0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100118d4:	e0fffe17 	ldw	r3,-8(fp)
100118d8:	e0bffd17 	ldw	r2,-12(fp)
100118dc:	18800c26 	beq	r3,r2,10011910 <alt_load_section+0x54>
  {
    while( to != end )
100118e0:	00000806 	br	10011904 <alt_load_section+0x48>
    {
      *to++ = *from++;
100118e4:	e0bffe17 	ldw	r2,-8(fp)
100118e8:	10c00104 	addi	r3,r2,4
100118ec:	e0fffe15 	stw	r3,-8(fp)
100118f0:	e0fffd17 	ldw	r3,-12(fp)
100118f4:	19000104 	addi	r4,r3,4
100118f8:	e13ffd15 	stw	r4,-12(fp)
100118fc:	18c00017 	ldw	r3,0(r3)
10011900:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10011904:	e0fffe17 	ldw	r3,-8(fp)
10011908:	e0bfff17 	ldw	r2,-4(fp)
1001190c:	18bff51e 	bne	r3,r2,100118e4 <__alt_data_end+0xf80118e4>
    {
      *to++ = *from++;
    }
  }
}
10011910:	0001883a 	nop
10011914:	e037883a 	mov	sp,fp
10011918:	df000017 	ldw	fp,0(sp)
1001191c:	dec00104 	addi	sp,sp,4
10011920:	f800283a 	ret

10011924 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10011924:	defffe04 	addi	sp,sp,-8
10011928:	dfc00115 	stw	ra,4(sp)
1001192c:	df000015 	stw	fp,0(sp)
10011930:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10011934:	01840074 	movhi	r6,4097
10011938:	319da904 	addi	r6,r6,30372
1001193c:	01440074 	movhi	r5,4097
10011940:	29526b04 	addi	r5,r5,18860
10011944:	01040074 	movhi	r4,4097
10011948:	211da904 	addi	r4,r4,30372
1001194c:	00118bc0 	call	100118bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10011950:	01840034 	movhi	r6,4096
10011954:	31808c04 	addi	r6,r6,560
10011958:	01440034 	movhi	r5,4096
1001195c:	29400804 	addi	r5,r5,32
10011960:	01040034 	movhi	r4,4096
10011964:	21000804 	addi	r4,r4,32
10011968:	00118bc0 	call	100118bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1001196c:	01840074 	movhi	r6,4097
10011970:	31926b04 	addi	r6,r6,18860
10011974:	01440074 	movhi	r5,4097
10011978:	294f7004 	addi	r5,r5,15808
1001197c:	01040074 	movhi	r4,4097
10011980:	210f7004 	addi	r4,r4,15808
10011984:	00118bc0 	call	100118bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10011988:	0012d080 	call	10012d08 <alt_dcache_flush_all>
  alt_icache_flush_all();
1001198c:	0012ec80 	call	10012ec8 <alt_icache_flush_all>
}
10011990:	0001883a 	nop
10011994:	e037883a 	mov	sp,fp
10011998:	dfc00117 	ldw	ra,4(sp)
1001199c:	df000017 	ldw	fp,0(sp)
100119a0:	dec00204 	addi	sp,sp,8
100119a4:	f800283a 	ret

100119a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100119a8:	defffe04 	addi	sp,sp,-8
100119ac:	dfc00115 	stw	ra,4(sp)
100119b0:	df000015 	stw	fp,0(sp)
100119b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100119b8:	d0a00e17 	ldw	r2,-32712(gp)
100119bc:	10000326 	beq	r2,zero,100119cc <alt_get_errno+0x24>
100119c0:	d0a00e17 	ldw	r2,-32712(gp)
100119c4:	103ee83a 	callr	r2
100119c8:	00000106 	br	100119d0 <alt_get_errno+0x28>
100119cc:	d0ab6004 	addi	r2,gp,-21120
}
100119d0:	e037883a 	mov	sp,fp
100119d4:	dfc00117 	ldw	ra,4(sp)
100119d8:	df000017 	ldw	fp,0(sp)
100119dc:	dec00204 	addi	sp,sp,8
100119e0:	f800283a 	ret

100119e4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100119e4:	defff904 	addi	sp,sp,-28
100119e8:	dfc00615 	stw	ra,24(sp)
100119ec:	df000515 	stw	fp,20(sp)
100119f0:	df000504 	addi	fp,sp,20
100119f4:	e13ffd15 	stw	r4,-12(fp)
100119f8:	e17ffe15 	stw	r5,-8(fp)
100119fc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10011a00:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011a04:	e0bffd17 	ldw	r2,-12(fp)
10011a08:	10000816 	blt	r2,zero,10011a2c <lseek+0x48>
10011a0c:	01400304 	movi	r5,12
10011a10:	e13ffd17 	ldw	r4,-12(fp)
10011a14:	00046600 	call	10004660 <__mulsi3>
10011a18:	1007883a 	mov	r3,r2
10011a1c:	00840074 	movhi	r2,4097
10011a20:	10991e04 	addi	r2,r2,25720
10011a24:	1885883a 	add	r2,r3,r2
10011a28:	00000106 	br	10011a30 <lseek+0x4c>
10011a2c:	0005883a 	mov	r2,zero
10011a30:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10011a34:	e0bffc17 	ldw	r2,-16(fp)
10011a38:	10001026 	beq	r2,zero,10011a7c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10011a3c:	e0bffc17 	ldw	r2,-16(fp)
10011a40:	10800017 	ldw	r2,0(r2)
10011a44:	10800717 	ldw	r2,28(r2)
10011a48:	10000926 	beq	r2,zero,10011a70 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10011a4c:	e0bffc17 	ldw	r2,-16(fp)
10011a50:	10800017 	ldw	r2,0(r2)
10011a54:	10800717 	ldw	r2,28(r2)
10011a58:	e1bfff17 	ldw	r6,-4(fp)
10011a5c:	e17ffe17 	ldw	r5,-8(fp)
10011a60:	e13ffc17 	ldw	r4,-16(fp)
10011a64:	103ee83a 	callr	r2
10011a68:	e0bffb15 	stw	r2,-20(fp)
10011a6c:	00000506 	br	10011a84 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10011a70:	00bfde84 	movi	r2,-134
10011a74:	e0bffb15 	stw	r2,-20(fp)
10011a78:	00000206 	br	10011a84 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10011a7c:	00bfebc4 	movi	r2,-81
10011a80:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10011a84:	e0bffb17 	ldw	r2,-20(fp)
10011a88:	1000070e 	bge	r2,zero,10011aa8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10011a8c:	00119a80 	call	100119a8 <alt_get_errno>
10011a90:	1007883a 	mov	r3,r2
10011a94:	e0bffb17 	ldw	r2,-20(fp)
10011a98:	0085c83a 	sub	r2,zero,r2
10011a9c:	18800015 	stw	r2,0(r3)
    rc = -1;
10011aa0:	00bfffc4 	movi	r2,-1
10011aa4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10011aa8:	e0bffb17 	ldw	r2,-20(fp)
}
10011aac:	e037883a 	mov	sp,fp
10011ab0:	dfc00117 	ldw	ra,4(sp)
10011ab4:	df000017 	ldw	fp,0(sp)
10011ab8:	dec00204 	addi	sp,sp,8
10011abc:	f800283a 	ret

10011ac0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011ac0:	defffd04 	addi	sp,sp,-12
10011ac4:	dfc00215 	stw	ra,8(sp)
10011ac8:	df000115 	stw	fp,4(sp)
10011acc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011ad0:	0009883a 	mov	r4,zero
10011ad4:	0011f980 	call	10011f98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011ad8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10011adc:	0011fd00 	call	10011fd0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011ae0:	01840074 	movhi	r6,4097
10011ae4:	31926104 	addi	r6,r6,18820
10011ae8:	01440074 	movhi	r5,4097
10011aec:	29526104 	addi	r5,r5,18820
10011af0:	01040074 	movhi	r4,4097
10011af4:	21126104 	addi	r4,r4,18820
10011af8:	001326c0 	call	1001326c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10011afc:	0012e080 	call	10012e08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10011b00:	01040074 	movhi	r4,4097
10011b04:	210b9a04 	addi	r4,r4,11880
10011b08:	0013a2c0 	call	10013a2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10011b0c:	d0ab6117 	ldw	r2,-21116(gp)
10011b10:	d0eb6217 	ldw	r3,-21112(gp)
10011b14:	d12b6317 	ldw	r4,-21108(gp)
10011b18:	200d883a 	mov	r6,r4
10011b1c:	180b883a 	mov	r5,r3
10011b20:	1009883a 	mov	r4,r2
10011b24:	000444c0 	call	1000444c <main>
10011b28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10011b2c:	01000044 	movi	r4,1
10011b30:	00115dc0 	call	100115dc <close>
  exit (result);
10011b34:	e13fff17 	ldw	r4,-4(fp)
10011b38:	0013a400 	call	10013a40 <exit>

10011b3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10011b3c:	defffe04 	addi	sp,sp,-8
10011b40:	df000115 	stw	fp,4(sp)
10011b44:	df000104 	addi	fp,sp,4
10011b48:	e13fff15 	stw	r4,-4(fp)
}
10011b4c:	0001883a 	nop
10011b50:	e037883a 	mov	sp,fp
10011b54:	df000017 	ldw	fp,0(sp)
10011b58:	dec00104 	addi	sp,sp,4
10011b5c:	f800283a 	ret

10011b60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10011b60:	defffe04 	addi	sp,sp,-8
10011b64:	df000115 	stw	fp,4(sp)
10011b68:	df000104 	addi	fp,sp,4
10011b6c:	e13fff15 	stw	r4,-4(fp)
}
10011b70:	0001883a 	nop
10011b74:	e037883a 	mov	sp,fp
10011b78:	df000017 	ldw	fp,0(sp)
10011b7c:	dec00104 	addi	sp,sp,4
10011b80:	f800283a 	ret

10011b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011b84:	defffe04 	addi	sp,sp,-8
10011b88:	dfc00115 	stw	ra,4(sp)
10011b8c:	df000015 	stw	fp,0(sp)
10011b90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011b94:	d0a00e17 	ldw	r2,-32712(gp)
10011b98:	10000326 	beq	r2,zero,10011ba8 <alt_get_errno+0x24>
10011b9c:	d0a00e17 	ldw	r2,-32712(gp)
10011ba0:	103ee83a 	callr	r2
10011ba4:	00000106 	br	10011bac <alt_get_errno+0x28>
10011ba8:	d0ab6004 	addi	r2,gp,-21120
}
10011bac:	e037883a 	mov	sp,fp
10011bb0:	dfc00117 	ldw	ra,4(sp)
10011bb4:	df000017 	ldw	fp,0(sp)
10011bb8:	dec00204 	addi	sp,sp,8
10011bbc:	f800283a 	ret

10011bc0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10011bc0:	defff904 	addi	sp,sp,-28
10011bc4:	dfc00615 	stw	ra,24(sp)
10011bc8:	df000515 	stw	fp,20(sp)
10011bcc:	df000504 	addi	fp,sp,20
10011bd0:	e13ffd15 	stw	r4,-12(fp)
10011bd4:	e17ffe15 	stw	r5,-8(fp)
10011bd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011bdc:	e0bffd17 	ldw	r2,-12(fp)
10011be0:	10000816 	blt	r2,zero,10011c04 <read+0x44>
10011be4:	01400304 	movi	r5,12
10011be8:	e13ffd17 	ldw	r4,-12(fp)
10011bec:	00046600 	call	10004660 <__mulsi3>
10011bf0:	1007883a 	mov	r3,r2
10011bf4:	00840074 	movhi	r2,4097
10011bf8:	10991e04 	addi	r2,r2,25720
10011bfc:	1885883a 	add	r2,r3,r2
10011c00:	00000106 	br	10011c08 <read+0x48>
10011c04:	0005883a 	mov	r2,zero
10011c08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011c0c:	e0bffb17 	ldw	r2,-20(fp)
10011c10:	10002226 	beq	r2,zero,10011c9c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011c14:	e0bffb17 	ldw	r2,-20(fp)
10011c18:	10800217 	ldw	r2,8(r2)
10011c1c:	108000cc 	andi	r2,r2,3
10011c20:	10800060 	cmpeqi	r2,r2,1
10011c24:	1000181e 	bne	r2,zero,10011c88 <read+0xc8>
        (fd->dev->read))
10011c28:	e0bffb17 	ldw	r2,-20(fp)
10011c2c:	10800017 	ldw	r2,0(r2)
10011c30:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10011c34:	10001426 	beq	r2,zero,10011c88 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10011c38:	e0bffb17 	ldw	r2,-20(fp)
10011c3c:	10800017 	ldw	r2,0(r2)
10011c40:	10800517 	ldw	r2,20(r2)
10011c44:	e0ffff17 	ldw	r3,-4(fp)
10011c48:	180d883a 	mov	r6,r3
10011c4c:	e17ffe17 	ldw	r5,-8(fp)
10011c50:	e13ffb17 	ldw	r4,-20(fp)
10011c54:	103ee83a 	callr	r2
10011c58:	e0bffc15 	stw	r2,-16(fp)
10011c5c:	e0bffc17 	ldw	r2,-16(fp)
10011c60:	1000070e 	bge	r2,zero,10011c80 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10011c64:	0011b840 	call	10011b84 <alt_get_errno>
10011c68:	1007883a 	mov	r3,r2
10011c6c:	e0bffc17 	ldw	r2,-16(fp)
10011c70:	0085c83a 	sub	r2,zero,r2
10011c74:	18800015 	stw	r2,0(r3)
          return -1;
10011c78:	00bfffc4 	movi	r2,-1
10011c7c:	00000c06 	br	10011cb0 <read+0xf0>
        }
        return rval;
10011c80:	e0bffc17 	ldw	r2,-16(fp)
10011c84:	00000a06 	br	10011cb0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10011c88:	0011b840 	call	10011b84 <alt_get_errno>
10011c8c:	1007883a 	mov	r3,r2
10011c90:	00800344 	movi	r2,13
10011c94:	18800015 	stw	r2,0(r3)
10011c98:	00000406 	br	10011cac <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10011c9c:	0011b840 	call	10011b84 <alt_get_errno>
10011ca0:	1007883a 	mov	r3,r2
10011ca4:	00801444 	movi	r2,81
10011ca8:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011cac:	00bfffc4 	movi	r2,-1
}
10011cb0:	e037883a 	mov	sp,fp
10011cb4:	dfc00117 	ldw	ra,4(sp)
10011cb8:	df000017 	ldw	fp,0(sp)
10011cbc:	dec00204 	addi	sp,sp,8
10011cc0:	f800283a 	ret

10011cc4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10011cc4:	defffc04 	addi	sp,sp,-16
10011cc8:	dfc00315 	stw	ra,12(sp)
10011ccc:	df000215 	stw	fp,8(sp)
10011cd0:	dc000115 	stw	r16,4(sp)
10011cd4:	df000204 	addi	fp,sp,8
10011cd8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10011cdc:	e0bffe17 	ldw	r2,-8(fp)
10011ce0:	108000d0 	cmplti	r2,r2,3
10011ce4:	1000111e 	bne	r2,zero,10011d2c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10011ce8:	04040074 	movhi	r16,4097
10011cec:	84191e04 	addi	r16,r16,25720
10011cf0:	e0bffe17 	ldw	r2,-8(fp)
10011cf4:	01400304 	movi	r5,12
10011cf8:	1009883a 	mov	r4,r2
10011cfc:	00046600 	call	10004660 <__mulsi3>
10011d00:	8085883a 	add	r2,r16,r2
10011d04:	10800204 	addi	r2,r2,8
10011d08:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10011d0c:	04040074 	movhi	r16,4097
10011d10:	84191e04 	addi	r16,r16,25720
10011d14:	e0bffe17 	ldw	r2,-8(fp)
10011d18:	01400304 	movi	r5,12
10011d1c:	1009883a 	mov	r4,r2
10011d20:	00046600 	call	10004660 <__mulsi3>
10011d24:	8085883a 	add	r2,r16,r2
10011d28:	10000015 	stw	zero,0(r2)
  }
}
10011d2c:	0001883a 	nop
10011d30:	e6ffff04 	addi	sp,fp,-4
10011d34:	dfc00217 	ldw	ra,8(sp)
10011d38:	df000117 	ldw	fp,4(sp)
10011d3c:	dc000017 	ldw	r16,0(sp)
10011d40:	dec00304 	addi	sp,sp,12
10011d44:	f800283a 	ret

10011d48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10011d48:	defff904 	addi	sp,sp,-28
10011d4c:	df000615 	stw	fp,24(sp)
10011d50:	df000604 	addi	fp,sp,24
10011d54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d58:	0005303a 	rdctl	r2,status
10011d5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d60:	e0fffe17 	ldw	r3,-8(fp)
10011d64:	00bfff84 	movi	r2,-2
10011d68:	1884703a 	and	r2,r3,r2
10011d6c:	1001703a 	wrctl	status,r2
  
  return context;
10011d70:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10011d74:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10011d78:	d0a00f17 	ldw	r2,-32708(gp)
10011d7c:	10c000c4 	addi	r3,r2,3
10011d80:	00bfff04 	movi	r2,-4
10011d84:	1884703a 	and	r2,r3,r2
10011d88:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10011d8c:	d0e00f17 	ldw	r3,-32708(gp)
10011d90:	e0bfff17 	ldw	r2,-4(fp)
10011d94:	1887883a 	add	r3,r3,r2
10011d98:	00860034 	movhi	r2,6144
10011d9c:	10800004 	addi	r2,r2,0
10011da0:	10c0062e 	bgeu	r2,r3,10011dbc <sbrk+0x74>
10011da4:	e0bffb17 	ldw	r2,-20(fp)
10011da8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011dac:	e0bffa17 	ldw	r2,-24(fp)
10011db0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10011db4:	00bfffc4 	movi	r2,-1
10011db8:	00000b06 	br	10011de8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10011dbc:	d0a00f17 	ldw	r2,-32708(gp)
10011dc0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10011dc4:	d0e00f17 	ldw	r3,-32708(gp)
10011dc8:	e0bfff17 	ldw	r2,-4(fp)
10011dcc:	1885883a 	add	r2,r3,r2
10011dd0:	d0a00f15 	stw	r2,-32708(gp)
10011dd4:	e0bffb17 	ldw	r2,-20(fp)
10011dd8:	e0bffc15 	stw	r2,-16(fp)
10011ddc:	e0bffc17 	ldw	r2,-16(fp)
10011de0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10011de4:	e0bffd17 	ldw	r2,-12(fp)
} 
10011de8:	e037883a 	mov	sp,fp
10011dec:	df000017 	ldw	fp,0(sp)
10011df0:	dec00104 	addi	sp,sp,4
10011df4:	f800283a 	ret

10011df8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10011df8:	defffd04 	addi	sp,sp,-12
10011dfc:	dfc00215 	stw	ra,8(sp)
10011e00:	df000115 	stw	fp,4(sp)
10011e04:	df000104 	addi	fp,sp,4
10011e08:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10011e0c:	e13fff17 	ldw	r4,-4(fp)
10011e10:	0012bb00 	call	10012bb0 <alt_busy_sleep>
}
10011e14:	e037883a 	mov	sp,fp
10011e18:	dfc00117 	ldw	ra,4(sp)
10011e1c:	df000017 	ldw	fp,0(sp)
10011e20:	dec00204 	addi	sp,sp,8
10011e24:	f800283a 	ret

10011e28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011e28:	defffe04 	addi	sp,sp,-8
10011e2c:	dfc00115 	stw	ra,4(sp)
10011e30:	df000015 	stw	fp,0(sp)
10011e34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011e38:	d0a00e17 	ldw	r2,-32712(gp)
10011e3c:	10000326 	beq	r2,zero,10011e4c <alt_get_errno+0x24>
10011e40:	d0a00e17 	ldw	r2,-32712(gp)
10011e44:	103ee83a 	callr	r2
10011e48:	00000106 	br	10011e50 <alt_get_errno+0x28>
10011e4c:	d0ab6004 	addi	r2,gp,-21120
}
10011e50:	e037883a 	mov	sp,fp
10011e54:	dfc00117 	ldw	ra,4(sp)
10011e58:	df000017 	ldw	fp,0(sp)
10011e5c:	dec00204 	addi	sp,sp,8
10011e60:	f800283a 	ret

10011e64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10011e64:	defff904 	addi	sp,sp,-28
10011e68:	dfc00615 	stw	ra,24(sp)
10011e6c:	df000515 	stw	fp,20(sp)
10011e70:	df000504 	addi	fp,sp,20
10011e74:	e13ffd15 	stw	r4,-12(fp)
10011e78:	e17ffe15 	stw	r5,-8(fp)
10011e7c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011e80:	e0bffd17 	ldw	r2,-12(fp)
10011e84:	10000816 	blt	r2,zero,10011ea8 <write+0x44>
10011e88:	01400304 	movi	r5,12
10011e8c:	e13ffd17 	ldw	r4,-12(fp)
10011e90:	00046600 	call	10004660 <__mulsi3>
10011e94:	1007883a 	mov	r3,r2
10011e98:	00840074 	movhi	r2,4097
10011e9c:	10991e04 	addi	r2,r2,25720
10011ea0:	1885883a 	add	r2,r3,r2
10011ea4:	00000106 	br	10011eac <write+0x48>
10011ea8:	0005883a 	mov	r2,zero
10011eac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10011eb0:	e0bffb17 	ldw	r2,-20(fp)
10011eb4:	10002126 	beq	r2,zero,10011f3c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10011eb8:	e0bffb17 	ldw	r2,-20(fp)
10011ebc:	10800217 	ldw	r2,8(r2)
10011ec0:	108000cc 	andi	r2,r2,3
10011ec4:	10001826 	beq	r2,zero,10011f28 <write+0xc4>
10011ec8:	e0bffb17 	ldw	r2,-20(fp)
10011ecc:	10800017 	ldw	r2,0(r2)
10011ed0:	10800617 	ldw	r2,24(r2)
10011ed4:	10001426 	beq	r2,zero,10011f28 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10011ed8:	e0bffb17 	ldw	r2,-20(fp)
10011edc:	10800017 	ldw	r2,0(r2)
10011ee0:	10800617 	ldw	r2,24(r2)
10011ee4:	e0ffff17 	ldw	r3,-4(fp)
10011ee8:	180d883a 	mov	r6,r3
10011eec:	e17ffe17 	ldw	r5,-8(fp)
10011ef0:	e13ffb17 	ldw	r4,-20(fp)
10011ef4:	103ee83a 	callr	r2
10011ef8:	e0bffc15 	stw	r2,-16(fp)
10011efc:	e0bffc17 	ldw	r2,-16(fp)
10011f00:	1000070e 	bge	r2,zero,10011f20 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10011f04:	0011e280 	call	10011e28 <alt_get_errno>
10011f08:	1007883a 	mov	r3,r2
10011f0c:	e0bffc17 	ldw	r2,-16(fp)
10011f10:	0085c83a 	sub	r2,zero,r2
10011f14:	18800015 	stw	r2,0(r3)
        return -1;
10011f18:	00bfffc4 	movi	r2,-1
10011f1c:	00000c06 	br	10011f50 <write+0xec>
      }
      return rval;
10011f20:	e0bffc17 	ldw	r2,-16(fp)
10011f24:	00000a06 	br	10011f50 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10011f28:	0011e280 	call	10011e28 <alt_get_errno>
10011f2c:	1007883a 	mov	r3,r2
10011f30:	00800344 	movi	r2,13
10011f34:	18800015 	stw	r2,0(r3)
10011f38:	00000406 	br	10011f4c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10011f3c:	0011e280 	call	10011e28 <alt_get_errno>
10011f40:	1007883a 	mov	r3,r2
10011f44:	00801444 	movi	r2,81
10011f48:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011f4c:	00bfffc4 	movi	r2,-1
}
10011f50:	e037883a 	mov	sp,fp
10011f54:	dfc00117 	ldw	ra,4(sp)
10011f58:	df000017 	ldw	fp,0(sp)
10011f5c:	dec00204 	addi	sp,sp,8
10011f60:	f800283a 	ret

10011f64 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10011f64:	defffd04 	addi	sp,sp,-12
10011f68:	dfc00215 	stw	ra,8(sp)
10011f6c:	df000115 	stw	fp,4(sp)
10011f70:	df000104 	addi	fp,sp,4
10011f74:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10011f78:	d1600b04 	addi	r5,gp,-32724
10011f7c:	e13fff17 	ldw	r4,-4(fp)
10011f80:	0012d640 	call	10012d64 <alt_dev_llist_insert>
}
10011f84:	e037883a 	mov	sp,fp
10011f88:	dfc00117 	ldw	ra,4(sp)
10011f8c:	df000017 	ldw	fp,0(sp)
10011f90:	dec00204 	addi	sp,sp,8
10011f94:	f800283a 	ret

10011f98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10011f98:	defffd04 	addi	sp,sp,-12
10011f9c:	dfc00215 	stw	ra,8(sp)
10011fa0:	df000115 	stw	fp,4(sp)
10011fa4:	df000104 	addi	fp,sp,4
10011fa8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10011fac:	00137100 	call	10013710 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10011fb0:	00800044 	movi	r2,1
10011fb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10011fb8:	0001883a 	nop
10011fbc:	e037883a 	mov	sp,fp
10011fc0:	dfc00117 	ldw	ra,4(sp)
10011fc4:	df000017 	ldw	fp,0(sp)
10011fc8:	dec00204 	addi	sp,sp,8
10011fcc:	f800283a 	ret

10011fd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10011fd0:	defffe04 	addi	sp,sp,-8
10011fd4:	dfc00115 	stw	ra,4(sp)
10011fd8:	df000015 	stw	fp,0(sp)
10011fdc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10011fe0:	01800144 	movi	r6,5
10011fe4:	000b883a 	mov	r5,zero
10011fe8:	01040074 	movhi	r4,4097
10011fec:	21198804 	addi	r4,r4,26144
10011ff0:	00121800 	call	10012180 <altera_avalon_jtag_uart_init>
10011ff4:	01040074 	movhi	r4,4097
10011ff8:	21197e04 	addi	r4,r4,26104
10011ffc:	0011f640 	call	10011f64 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10012000:	0001883a 	nop
}
10012004:	0001883a 	nop
10012008:	e037883a 	mov	sp,fp
1001200c:	dfc00117 	ldw	ra,4(sp)
10012010:	df000017 	ldw	fp,0(sp)
10012014:	dec00204 	addi	sp,sp,8
10012018:	f800283a 	ret

1001201c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1001201c:	defffa04 	addi	sp,sp,-24
10012020:	dfc00515 	stw	ra,20(sp)
10012024:	df000415 	stw	fp,16(sp)
10012028:	df000404 	addi	fp,sp,16
1001202c:	e13ffd15 	stw	r4,-12(fp)
10012030:	e17ffe15 	stw	r5,-8(fp)
10012034:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012038:	e0bffd17 	ldw	r2,-12(fp)
1001203c:	10800017 	ldw	r2,0(r2)
10012040:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10012044:	e0bffc17 	ldw	r2,-16(fp)
10012048:	10c00a04 	addi	r3,r2,40
1001204c:	e0bffd17 	ldw	r2,-12(fp)
10012050:	10800217 	ldw	r2,8(r2)
10012054:	100f883a 	mov	r7,r2
10012058:	e1bfff17 	ldw	r6,-4(fp)
1001205c:	e17ffe17 	ldw	r5,-8(fp)
10012060:	1809883a 	mov	r4,r3
10012064:	00126440 	call	10012644 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10012068:	e037883a 	mov	sp,fp
1001206c:	dfc00117 	ldw	ra,4(sp)
10012070:	df000017 	ldw	fp,0(sp)
10012074:	dec00204 	addi	sp,sp,8
10012078:	f800283a 	ret

1001207c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001207c:	defffa04 	addi	sp,sp,-24
10012080:	dfc00515 	stw	ra,20(sp)
10012084:	df000415 	stw	fp,16(sp)
10012088:	df000404 	addi	fp,sp,16
1001208c:	e13ffd15 	stw	r4,-12(fp)
10012090:	e17ffe15 	stw	r5,-8(fp)
10012094:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012098:	e0bffd17 	ldw	r2,-12(fp)
1001209c:	10800017 	ldw	r2,0(r2)
100120a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100120a4:	e0bffc17 	ldw	r2,-16(fp)
100120a8:	10c00a04 	addi	r3,r2,40
100120ac:	e0bffd17 	ldw	r2,-12(fp)
100120b0:	10800217 	ldw	r2,8(r2)
100120b4:	100f883a 	mov	r7,r2
100120b8:	e1bfff17 	ldw	r6,-4(fp)
100120bc:	e17ffe17 	ldw	r5,-8(fp)
100120c0:	1809883a 	mov	r4,r3
100120c4:	00128600 	call	10012860 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100120c8:	e037883a 	mov	sp,fp
100120cc:	dfc00117 	ldw	ra,4(sp)
100120d0:	df000017 	ldw	fp,0(sp)
100120d4:	dec00204 	addi	sp,sp,8
100120d8:	f800283a 	ret

100120dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100120dc:	defffc04 	addi	sp,sp,-16
100120e0:	dfc00315 	stw	ra,12(sp)
100120e4:	df000215 	stw	fp,8(sp)
100120e8:	df000204 	addi	fp,sp,8
100120ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100120f0:	e0bfff17 	ldw	r2,-4(fp)
100120f4:	10800017 	ldw	r2,0(r2)
100120f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100120fc:	e0bffe17 	ldw	r2,-8(fp)
10012100:	10c00a04 	addi	r3,r2,40
10012104:	e0bfff17 	ldw	r2,-4(fp)
10012108:	10800217 	ldw	r2,8(r2)
1001210c:	100b883a 	mov	r5,r2
10012110:	1809883a 	mov	r4,r3
10012114:	00124ec0 	call	100124ec <altera_avalon_jtag_uart_close>
}
10012118:	e037883a 	mov	sp,fp
1001211c:	dfc00117 	ldw	ra,4(sp)
10012120:	df000017 	ldw	fp,0(sp)
10012124:	dec00204 	addi	sp,sp,8
10012128:	f800283a 	ret

1001212c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001212c:	defffa04 	addi	sp,sp,-24
10012130:	dfc00515 	stw	ra,20(sp)
10012134:	df000415 	stw	fp,16(sp)
10012138:	df000404 	addi	fp,sp,16
1001213c:	e13ffd15 	stw	r4,-12(fp)
10012140:	e17ffe15 	stw	r5,-8(fp)
10012144:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012148:	e0bffd17 	ldw	r2,-12(fp)
1001214c:	10800017 	ldw	r2,0(r2)
10012150:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10012154:	e0bffc17 	ldw	r2,-16(fp)
10012158:	10800a04 	addi	r2,r2,40
1001215c:	e1bfff17 	ldw	r6,-4(fp)
10012160:	e17ffe17 	ldw	r5,-8(fp)
10012164:	1009883a 	mov	r4,r2
10012168:	00125540 	call	10012554 <altera_avalon_jtag_uart_ioctl>
}
1001216c:	e037883a 	mov	sp,fp
10012170:	dfc00117 	ldw	ra,4(sp)
10012174:	df000017 	ldw	fp,0(sp)
10012178:	dec00204 	addi	sp,sp,8
1001217c:	f800283a 	ret

10012180 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012180:	defffa04 	addi	sp,sp,-24
10012184:	dfc00515 	stw	ra,20(sp)
10012188:	df000415 	stw	fp,16(sp)
1001218c:	df000404 	addi	fp,sp,16
10012190:	e13ffd15 	stw	r4,-12(fp)
10012194:	e17ffe15 	stw	r5,-8(fp)
10012198:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001219c:	e0bffd17 	ldw	r2,-12(fp)
100121a0:	00c00044 	movi	r3,1
100121a4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100121a8:	e0bffd17 	ldw	r2,-12(fp)
100121ac:	10800017 	ldw	r2,0(r2)
100121b0:	10800104 	addi	r2,r2,4
100121b4:	1007883a 	mov	r3,r2
100121b8:	e0bffd17 	ldw	r2,-12(fp)
100121bc:	10800817 	ldw	r2,32(r2)
100121c0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100121c4:	e0bffe17 	ldw	r2,-8(fp)
100121c8:	e0ffff17 	ldw	r3,-4(fp)
100121cc:	d8000015 	stw	zero,0(sp)
100121d0:	e1fffd17 	ldw	r7,-12(fp)
100121d4:	01840074 	movhi	r6,4097
100121d8:	31889004 	addi	r6,r6,8768
100121dc:	180b883a 	mov	r5,r3
100121e0:	1009883a 	mov	r4,r2
100121e4:	0012ee80 	call	10012ee8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100121e8:	e0bffd17 	ldw	r2,-12(fp)
100121ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100121f0:	e0bffd17 	ldw	r2,-12(fp)
100121f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100121f8:	d0eb6517 	ldw	r3,-21100(gp)
100121fc:	e1fffd17 	ldw	r7,-12(fp)
10012200:	01840074 	movhi	r6,4097
10012204:	31891304 	addi	r6,r6,9292
10012208:	180b883a 	mov	r5,r3
1001220c:	1009883a 	mov	r4,r2
10012210:	0012a840 	call	10012a84 <alt_alarm_start>
10012214:	1000040e 	bge	r2,zero,10012228 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012218:	e0fffd17 	ldw	r3,-12(fp)
1001221c:	00a00034 	movhi	r2,32768
10012220:	10bfffc4 	addi	r2,r2,-1
10012224:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012228:	0001883a 	nop
1001222c:	e037883a 	mov	sp,fp
10012230:	dfc00117 	ldw	ra,4(sp)
10012234:	df000017 	ldw	fp,0(sp)
10012238:	dec00204 	addi	sp,sp,8
1001223c:	f800283a 	ret

10012240 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012240:	defff804 	addi	sp,sp,-32
10012244:	df000715 	stw	fp,28(sp)
10012248:	df000704 	addi	fp,sp,28
1001224c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012250:	e0bfff17 	ldw	r2,-4(fp)
10012254:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012258:	e0bffb17 	ldw	r2,-20(fp)
1001225c:	10800017 	ldw	r2,0(r2)
10012260:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012264:	e0bffc17 	ldw	r2,-16(fp)
10012268:	10800104 	addi	r2,r2,4
1001226c:	10800037 	ldwio	r2,0(r2)
10012270:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10012274:	e0bffd17 	ldw	r2,-12(fp)
10012278:	1080c00c 	andi	r2,r2,768
1001227c:	10006d26 	beq	r2,zero,10012434 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012280:	e0bffd17 	ldw	r2,-12(fp)
10012284:	1080400c 	andi	r2,r2,256
10012288:	10003526 	beq	r2,zero,10012360 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001228c:	00800074 	movhi	r2,1
10012290:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012294:	e0bffb17 	ldw	r2,-20(fp)
10012298:	10800a17 	ldw	r2,40(r2)
1001229c:	10800044 	addi	r2,r2,1
100122a0:	1081ffcc 	andi	r2,r2,2047
100122a4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100122a8:	e0bffb17 	ldw	r2,-20(fp)
100122ac:	10c00b17 	ldw	r3,44(r2)
100122b0:	e0bffe17 	ldw	r2,-8(fp)
100122b4:	18801526 	beq	r3,r2,1001230c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100122b8:	e0bffc17 	ldw	r2,-16(fp)
100122bc:	10800037 	ldwio	r2,0(r2)
100122c0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100122c4:	e0bff917 	ldw	r2,-28(fp)
100122c8:	10a0000c 	andi	r2,r2,32768
100122cc:	10001126 	beq	r2,zero,10012314 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100122d0:	e0bffb17 	ldw	r2,-20(fp)
100122d4:	10800a17 	ldw	r2,40(r2)
100122d8:	e0fff917 	ldw	r3,-28(fp)
100122dc:	1809883a 	mov	r4,r3
100122e0:	e0fffb17 	ldw	r3,-20(fp)
100122e4:	1885883a 	add	r2,r3,r2
100122e8:	10800e04 	addi	r2,r2,56
100122ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100122f0:	e0bffb17 	ldw	r2,-20(fp)
100122f4:	10800a17 	ldw	r2,40(r2)
100122f8:	10800044 	addi	r2,r2,1
100122fc:	10c1ffcc 	andi	r3,r2,2047
10012300:	e0bffb17 	ldw	r2,-20(fp)
10012304:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012308:	003fe206 	br	10012294 <__alt_data_end+0xf8012294>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1001230c:	0001883a 	nop
10012310:	00000106 	br	10012318 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10012314:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012318:	e0bff917 	ldw	r2,-28(fp)
1001231c:	10bfffec 	andhi	r2,r2,65535
10012320:	10000f26 	beq	r2,zero,10012360 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012324:	e0bffb17 	ldw	r2,-20(fp)
10012328:	10c00817 	ldw	r3,32(r2)
1001232c:	00bfff84 	movi	r2,-2
10012330:	1886703a 	and	r3,r3,r2
10012334:	e0bffb17 	ldw	r2,-20(fp)
10012338:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001233c:	e0bffc17 	ldw	r2,-16(fp)
10012340:	10800104 	addi	r2,r2,4
10012344:	1007883a 	mov	r3,r2
10012348:	e0bffb17 	ldw	r2,-20(fp)
1001234c:	10800817 	ldw	r2,32(r2)
10012350:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012354:	e0bffc17 	ldw	r2,-16(fp)
10012358:	10800104 	addi	r2,r2,4
1001235c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012360:	e0bffd17 	ldw	r2,-12(fp)
10012364:	1080800c 	andi	r2,r2,512
10012368:	103fbe26 	beq	r2,zero,10012264 <__alt_data_end+0xf8012264>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1001236c:	e0bffd17 	ldw	r2,-12(fp)
10012370:	1004d43a 	srli	r2,r2,16
10012374:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012378:	00001406 	br	100123cc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1001237c:	e0bffc17 	ldw	r2,-16(fp)
10012380:	e0fffb17 	ldw	r3,-20(fp)
10012384:	18c00d17 	ldw	r3,52(r3)
10012388:	e13ffb17 	ldw	r4,-20(fp)
1001238c:	20c7883a 	add	r3,r4,r3
10012390:	18c20e04 	addi	r3,r3,2104
10012394:	18c00003 	ldbu	r3,0(r3)
10012398:	18c03fcc 	andi	r3,r3,255
1001239c:	18c0201c 	xori	r3,r3,128
100123a0:	18ffe004 	addi	r3,r3,-128
100123a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100123a8:	e0bffb17 	ldw	r2,-20(fp)
100123ac:	10800d17 	ldw	r2,52(r2)
100123b0:	10800044 	addi	r2,r2,1
100123b4:	10c1ffcc 	andi	r3,r2,2047
100123b8:	e0bffb17 	ldw	r2,-20(fp)
100123bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100123c0:	e0bffa17 	ldw	r2,-24(fp)
100123c4:	10bfffc4 	addi	r2,r2,-1
100123c8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100123cc:	e0bffa17 	ldw	r2,-24(fp)
100123d0:	10000526 	beq	r2,zero,100123e8 <altera_avalon_jtag_uart_irq+0x1a8>
100123d4:	e0bffb17 	ldw	r2,-20(fp)
100123d8:	10c00d17 	ldw	r3,52(r2)
100123dc:	e0bffb17 	ldw	r2,-20(fp)
100123e0:	10800c17 	ldw	r2,48(r2)
100123e4:	18bfe51e 	bne	r3,r2,1001237c <__alt_data_end+0xf801237c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100123e8:	e0bffa17 	ldw	r2,-24(fp)
100123ec:	103f9d26 	beq	r2,zero,10012264 <__alt_data_end+0xf8012264>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100123f0:	e0bffb17 	ldw	r2,-20(fp)
100123f4:	10c00817 	ldw	r3,32(r2)
100123f8:	00bfff44 	movi	r2,-3
100123fc:	1886703a 	and	r3,r3,r2
10012400:	e0bffb17 	ldw	r2,-20(fp)
10012404:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012408:	e0bffb17 	ldw	r2,-20(fp)
1001240c:	10800017 	ldw	r2,0(r2)
10012410:	10800104 	addi	r2,r2,4
10012414:	1007883a 	mov	r3,r2
10012418:	e0bffb17 	ldw	r2,-20(fp)
1001241c:	10800817 	ldw	r2,32(r2)
10012420:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10012424:	e0bffc17 	ldw	r2,-16(fp)
10012428:	10800104 	addi	r2,r2,4
1001242c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012430:	003f8c06 	br	10012264 <__alt_data_end+0xf8012264>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10012434:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10012438:	0001883a 	nop
1001243c:	e037883a 	mov	sp,fp
10012440:	df000017 	ldw	fp,0(sp)
10012444:	dec00104 	addi	sp,sp,4
10012448:	f800283a 	ret

1001244c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1001244c:	defff804 	addi	sp,sp,-32
10012450:	df000715 	stw	fp,28(sp)
10012454:	df000704 	addi	fp,sp,28
10012458:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1001245c:	e0bffb17 	ldw	r2,-20(fp)
10012460:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10012464:	e0bff917 	ldw	r2,-28(fp)
10012468:	10800017 	ldw	r2,0(r2)
1001246c:	10800104 	addi	r2,r2,4
10012470:	10800037 	ldwio	r2,0(r2)
10012474:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012478:	e0bffa17 	ldw	r2,-24(fp)
1001247c:	1081000c 	andi	r2,r2,1024
10012480:	10000b26 	beq	r2,zero,100124b0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10012484:	e0bff917 	ldw	r2,-28(fp)
10012488:	10800017 	ldw	r2,0(r2)
1001248c:	10800104 	addi	r2,r2,4
10012490:	1007883a 	mov	r3,r2
10012494:	e0bff917 	ldw	r2,-28(fp)
10012498:	10800817 	ldw	r2,32(r2)
1001249c:	10810014 	ori	r2,r2,1024
100124a0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100124a4:	e0bff917 	ldw	r2,-28(fp)
100124a8:	10000915 	stw	zero,36(r2)
100124ac:	00000a06 	br	100124d8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100124b0:	e0bff917 	ldw	r2,-28(fp)
100124b4:	10c00917 	ldw	r3,36(r2)
100124b8:	00a00034 	movhi	r2,32768
100124bc:	10bfff04 	addi	r2,r2,-4
100124c0:	10c00536 	bltu	r2,r3,100124d8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100124c4:	e0bff917 	ldw	r2,-28(fp)
100124c8:	10800917 	ldw	r2,36(r2)
100124cc:	10c00044 	addi	r3,r2,1
100124d0:	e0bff917 	ldw	r2,-28(fp)
100124d4:	10c00915 	stw	r3,36(r2)
100124d8:	d0ab6517 	ldw	r2,-21100(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100124dc:	e037883a 	mov	sp,fp
100124e0:	df000017 	ldw	fp,0(sp)
100124e4:	dec00104 	addi	sp,sp,4
100124e8:	f800283a 	ret

100124ec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100124ec:	defffd04 	addi	sp,sp,-12
100124f0:	df000215 	stw	fp,8(sp)
100124f4:	df000204 	addi	fp,sp,8
100124f8:	e13ffe15 	stw	r4,-8(fp)
100124fc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012500:	00000506 	br	10012518 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012504:	e0bfff17 	ldw	r2,-4(fp)
10012508:	1090000c 	andi	r2,r2,16384
1001250c:	10000226 	beq	r2,zero,10012518 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012510:	00bffd44 	movi	r2,-11
10012514:	00000b06 	br	10012544 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012518:	e0bffe17 	ldw	r2,-8(fp)
1001251c:	10c00d17 	ldw	r3,52(r2)
10012520:	e0bffe17 	ldw	r2,-8(fp)
10012524:	10800c17 	ldw	r2,48(r2)
10012528:	18800526 	beq	r3,r2,10012540 <altera_avalon_jtag_uart_close+0x54>
1001252c:	e0bffe17 	ldw	r2,-8(fp)
10012530:	10c00917 	ldw	r3,36(r2)
10012534:	e0bffe17 	ldw	r2,-8(fp)
10012538:	10800117 	ldw	r2,4(r2)
1001253c:	18bff136 	bltu	r3,r2,10012504 <__alt_data_end+0xf8012504>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012540:	0005883a 	mov	r2,zero
}
10012544:	e037883a 	mov	sp,fp
10012548:	df000017 	ldw	fp,0(sp)
1001254c:	dec00104 	addi	sp,sp,4
10012550:	f800283a 	ret

10012554 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012554:	defffa04 	addi	sp,sp,-24
10012558:	df000515 	stw	fp,20(sp)
1001255c:	df000504 	addi	fp,sp,20
10012560:	e13ffd15 	stw	r4,-12(fp)
10012564:	e17ffe15 	stw	r5,-8(fp)
10012568:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001256c:	00bff9c4 	movi	r2,-25
10012570:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012574:	e0bffe17 	ldw	r2,-8(fp)
10012578:	10da8060 	cmpeqi	r3,r2,27137
1001257c:	1800031e 	bne	r3,zero,1001258c <altera_avalon_jtag_uart_ioctl+0x38>
10012580:	109a80a0 	cmpeqi	r2,r2,27138
10012584:	1000181e 	bne	r2,zero,100125e8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012588:	00002906 	br	10012630 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1001258c:	e0bffd17 	ldw	r2,-12(fp)
10012590:	10c00117 	ldw	r3,4(r2)
10012594:	00a00034 	movhi	r2,32768
10012598:	10bfffc4 	addi	r2,r2,-1
1001259c:	18802126 	beq	r3,r2,10012624 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100125a0:	e0bfff17 	ldw	r2,-4(fp)
100125a4:	10800017 	ldw	r2,0(r2)
100125a8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100125ac:	e0bffc17 	ldw	r2,-16(fp)
100125b0:	10800090 	cmplti	r2,r2,2
100125b4:	1000061e 	bne	r2,zero,100125d0 <altera_avalon_jtag_uart_ioctl+0x7c>
100125b8:	e0fffc17 	ldw	r3,-16(fp)
100125bc:	00a00034 	movhi	r2,32768
100125c0:	10bfffc4 	addi	r2,r2,-1
100125c4:	18800226 	beq	r3,r2,100125d0 <altera_avalon_jtag_uart_ioctl+0x7c>
100125c8:	e0bffc17 	ldw	r2,-16(fp)
100125cc:	00000206 	br	100125d8 <altera_avalon_jtag_uart_ioctl+0x84>
100125d0:	00a00034 	movhi	r2,32768
100125d4:	10bfff84 	addi	r2,r2,-2
100125d8:	e0fffd17 	ldw	r3,-12(fp)
100125dc:	18800115 	stw	r2,4(r3)
      rc = 0;
100125e0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100125e4:	00000f06 	br	10012624 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100125e8:	e0bffd17 	ldw	r2,-12(fp)
100125ec:	10c00117 	ldw	r3,4(r2)
100125f0:	00a00034 	movhi	r2,32768
100125f4:	10bfffc4 	addi	r2,r2,-1
100125f8:	18800c26 	beq	r3,r2,1001262c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100125fc:	e0bffd17 	ldw	r2,-12(fp)
10012600:	10c00917 	ldw	r3,36(r2)
10012604:	e0bffd17 	ldw	r2,-12(fp)
10012608:	10800117 	ldw	r2,4(r2)
1001260c:	1885803a 	cmpltu	r2,r3,r2
10012610:	10c03fcc 	andi	r3,r2,255
10012614:	e0bfff17 	ldw	r2,-4(fp)
10012618:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001261c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012620:	00000206 	br	1001262c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012624:	0001883a 	nop
10012628:	00000106 	br	10012630 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1001262c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012630:	e0bffb17 	ldw	r2,-20(fp)
}
10012634:	e037883a 	mov	sp,fp
10012638:	df000017 	ldw	fp,0(sp)
1001263c:	dec00104 	addi	sp,sp,4
10012640:	f800283a 	ret

10012644 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012644:	defff304 	addi	sp,sp,-52
10012648:	dfc00c15 	stw	ra,48(sp)
1001264c:	df000b15 	stw	fp,44(sp)
10012650:	df000b04 	addi	fp,sp,44
10012654:	e13ffc15 	stw	r4,-16(fp)
10012658:	e17ffd15 	stw	r5,-12(fp)
1001265c:	e1bffe15 	stw	r6,-8(fp)
10012660:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012664:	e0bffd17 	ldw	r2,-12(fp)
10012668:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001266c:	00004706 	br	1001278c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012670:	e0bffc17 	ldw	r2,-16(fp)
10012674:	10800a17 	ldw	r2,40(r2)
10012678:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1001267c:	e0bffc17 	ldw	r2,-16(fp)
10012680:	10800b17 	ldw	r2,44(r2)
10012684:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012688:	e0fff717 	ldw	r3,-36(fp)
1001268c:	e0bff817 	ldw	r2,-32(fp)
10012690:	18800536 	bltu	r3,r2,100126a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012694:	e0fff717 	ldw	r3,-36(fp)
10012698:	e0bff817 	ldw	r2,-32(fp)
1001269c:	1885c83a 	sub	r2,r3,r2
100126a0:	e0bff615 	stw	r2,-40(fp)
100126a4:	00000406 	br	100126b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100126a8:	00c20004 	movi	r3,2048
100126ac:	e0bff817 	ldw	r2,-32(fp)
100126b0:	1885c83a 	sub	r2,r3,r2
100126b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100126b8:	e0bff617 	ldw	r2,-40(fp)
100126bc:	10001e26 	beq	r2,zero,10012738 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100126c0:	e0fffe17 	ldw	r3,-8(fp)
100126c4:	e0bff617 	ldw	r2,-40(fp)
100126c8:	1880022e 	bgeu	r3,r2,100126d4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
100126cc:	e0bffe17 	ldw	r2,-8(fp)
100126d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100126d4:	e0bffc17 	ldw	r2,-16(fp)
100126d8:	10c00e04 	addi	r3,r2,56
100126dc:	e0bff817 	ldw	r2,-32(fp)
100126e0:	1885883a 	add	r2,r3,r2
100126e4:	e1bff617 	ldw	r6,-40(fp)
100126e8:	100b883a 	mov	r5,r2
100126ec:	e13ff517 	ldw	r4,-44(fp)
100126f0:	000a27c0 	call	1000a27c <memcpy>
      ptr   += n;
100126f4:	e0fff517 	ldw	r3,-44(fp)
100126f8:	e0bff617 	ldw	r2,-40(fp)
100126fc:	1885883a 	add	r2,r3,r2
10012700:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012704:	e0fffe17 	ldw	r3,-8(fp)
10012708:	e0bff617 	ldw	r2,-40(fp)
1001270c:	1885c83a 	sub	r2,r3,r2
10012710:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012714:	e0fff817 	ldw	r3,-32(fp)
10012718:	e0bff617 	ldw	r2,-40(fp)
1001271c:	1885883a 	add	r2,r3,r2
10012720:	10c1ffcc 	andi	r3,r2,2047
10012724:	e0bffc17 	ldw	r2,-16(fp)
10012728:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001272c:	e0bffe17 	ldw	r2,-8(fp)
10012730:	00bfcf16 	blt	zero,r2,10012670 <__alt_data_end+0xf8012670>
10012734:	00000106 	br	1001273c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012738:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1001273c:	e0fff517 	ldw	r3,-44(fp)
10012740:	e0bffd17 	ldw	r2,-12(fp)
10012744:	1880141e 	bne	r3,r2,10012798 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012748:	e0bfff17 	ldw	r2,-4(fp)
1001274c:	1090000c 	andi	r2,r2,16384
10012750:	1000131e 	bne	r2,zero,100127a0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012754:	0001883a 	nop
10012758:	e0bffc17 	ldw	r2,-16(fp)
1001275c:	10c00a17 	ldw	r3,40(r2)
10012760:	e0bff717 	ldw	r2,-36(fp)
10012764:	1880051e 	bne	r3,r2,1001277c <altera_avalon_jtag_uart_read+0x138>
10012768:	e0bffc17 	ldw	r2,-16(fp)
1001276c:	10c00917 	ldw	r3,36(r2)
10012770:	e0bffc17 	ldw	r2,-16(fp)
10012774:	10800117 	ldw	r2,4(r2)
10012778:	18bff736 	bltu	r3,r2,10012758 <__alt_data_end+0xf8012758>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1001277c:	e0bffc17 	ldw	r2,-16(fp)
10012780:	10c00a17 	ldw	r3,40(r2)
10012784:	e0bff717 	ldw	r2,-36(fp)
10012788:	18800726 	beq	r3,r2,100127a8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001278c:	e0bffe17 	ldw	r2,-8(fp)
10012790:	00bfb716 	blt	zero,r2,10012670 <__alt_data_end+0xf8012670>
10012794:	00000506 	br	100127ac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012798:	0001883a 	nop
1001279c:	00000306 	br	100127ac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100127a0:	0001883a 	nop
100127a4:	00000106 	br	100127ac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100127a8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100127ac:	e0fff517 	ldw	r3,-44(fp)
100127b0:	e0bffd17 	ldw	r2,-12(fp)
100127b4:	18801826 	beq	r3,r2,10012818 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100127b8:	0005303a 	rdctl	r2,status
100127bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100127c0:	e0fffb17 	ldw	r3,-20(fp)
100127c4:	00bfff84 	movi	r2,-2
100127c8:	1884703a 	and	r2,r3,r2
100127cc:	1001703a 	wrctl	status,r2
  
  return context;
100127d0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100127d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100127d8:	e0bffc17 	ldw	r2,-16(fp)
100127dc:	10800817 	ldw	r2,32(r2)
100127e0:	10c00054 	ori	r3,r2,1
100127e4:	e0bffc17 	ldw	r2,-16(fp)
100127e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100127ec:	e0bffc17 	ldw	r2,-16(fp)
100127f0:	10800017 	ldw	r2,0(r2)
100127f4:	10800104 	addi	r2,r2,4
100127f8:	1007883a 	mov	r3,r2
100127fc:	e0bffc17 	ldw	r2,-16(fp)
10012800:	10800817 	ldw	r2,32(r2)
10012804:	18800035 	stwio	r2,0(r3)
10012808:	e0bffa17 	ldw	r2,-24(fp)
1001280c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012810:	e0bff917 	ldw	r2,-28(fp)
10012814:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012818:	e0fff517 	ldw	r3,-44(fp)
1001281c:	e0bffd17 	ldw	r2,-12(fp)
10012820:	18800426 	beq	r3,r2,10012834 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012824:	e0fff517 	ldw	r3,-44(fp)
10012828:	e0bffd17 	ldw	r2,-12(fp)
1001282c:	1885c83a 	sub	r2,r3,r2
10012830:	00000606 	br	1001284c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012834:	e0bfff17 	ldw	r2,-4(fp)
10012838:	1090000c 	andi	r2,r2,16384
1001283c:	10000226 	beq	r2,zero,10012848 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012840:	00bffd44 	movi	r2,-11
10012844:	00000106 	br	1001284c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10012848:	00bffec4 	movi	r2,-5
}
1001284c:	e037883a 	mov	sp,fp
10012850:	dfc00117 	ldw	ra,4(sp)
10012854:	df000017 	ldw	fp,0(sp)
10012858:	dec00204 	addi	sp,sp,8
1001285c:	f800283a 	ret

10012860 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012860:	defff304 	addi	sp,sp,-52
10012864:	dfc00c15 	stw	ra,48(sp)
10012868:	df000b15 	stw	fp,44(sp)
1001286c:	df000b04 	addi	fp,sp,44
10012870:	e13ffc15 	stw	r4,-16(fp)
10012874:	e17ffd15 	stw	r5,-12(fp)
10012878:	e1bffe15 	stw	r6,-8(fp)
1001287c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012880:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012884:	e0bffd17 	ldw	r2,-12(fp)
10012888:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001288c:	00003706 	br	1001296c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012890:	e0bffc17 	ldw	r2,-16(fp)
10012894:	10800c17 	ldw	r2,48(r2)
10012898:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1001289c:	e0bffc17 	ldw	r2,-16(fp)
100128a0:	10800d17 	ldw	r2,52(r2)
100128a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100128a8:	e0fff917 	ldw	r3,-28(fp)
100128ac:	e0bff517 	ldw	r2,-44(fp)
100128b0:	1880062e 	bgeu	r3,r2,100128cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100128b4:	e0fff517 	ldw	r3,-44(fp)
100128b8:	e0bff917 	ldw	r2,-28(fp)
100128bc:	1885c83a 	sub	r2,r3,r2
100128c0:	10bfffc4 	addi	r2,r2,-1
100128c4:	e0bff615 	stw	r2,-40(fp)
100128c8:	00000b06 	br	100128f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100128cc:	e0bff517 	ldw	r2,-44(fp)
100128d0:	10000526 	beq	r2,zero,100128e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100128d4:	00c20004 	movi	r3,2048
100128d8:	e0bff917 	ldw	r2,-28(fp)
100128dc:	1885c83a 	sub	r2,r3,r2
100128e0:	e0bff615 	stw	r2,-40(fp)
100128e4:	00000406 	br	100128f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100128e8:	00c1ffc4 	movi	r3,2047
100128ec:	e0bff917 	ldw	r2,-28(fp)
100128f0:	1885c83a 	sub	r2,r3,r2
100128f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100128f8:	e0bff617 	ldw	r2,-40(fp)
100128fc:	10001e26 	beq	r2,zero,10012978 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012900:	e0fffe17 	ldw	r3,-8(fp)
10012904:	e0bff617 	ldw	r2,-40(fp)
10012908:	1880022e 	bgeu	r3,r2,10012914 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1001290c:	e0bffe17 	ldw	r2,-8(fp)
10012910:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10012914:	e0bffc17 	ldw	r2,-16(fp)
10012918:	10c20e04 	addi	r3,r2,2104
1001291c:	e0bff917 	ldw	r2,-28(fp)
10012920:	1885883a 	add	r2,r3,r2
10012924:	e1bff617 	ldw	r6,-40(fp)
10012928:	e17ffd17 	ldw	r5,-12(fp)
1001292c:	1009883a 	mov	r4,r2
10012930:	000a27c0 	call	1000a27c <memcpy>
      ptr   += n;
10012934:	e0fffd17 	ldw	r3,-12(fp)
10012938:	e0bff617 	ldw	r2,-40(fp)
1001293c:	1885883a 	add	r2,r3,r2
10012940:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10012944:	e0fffe17 	ldw	r3,-8(fp)
10012948:	e0bff617 	ldw	r2,-40(fp)
1001294c:	1885c83a 	sub	r2,r3,r2
10012950:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012954:	e0fff917 	ldw	r3,-28(fp)
10012958:	e0bff617 	ldw	r2,-40(fp)
1001295c:	1885883a 	add	r2,r3,r2
10012960:	10c1ffcc 	andi	r3,r2,2047
10012964:	e0bffc17 	ldw	r2,-16(fp)
10012968:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001296c:	e0bffe17 	ldw	r2,-8(fp)
10012970:	00bfc716 	blt	zero,r2,10012890 <__alt_data_end+0xf8012890>
10012974:	00000106 	br	1001297c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10012978:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001297c:	0005303a 	rdctl	r2,status
10012980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012984:	e0fffb17 	ldw	r3,-20(fp)
10012988:	00bfff84 	movi	r2,-2
1001298c:	1884703a 	and	r2,r3,r2
10012990:	1001703a 	wrctl	status,r2
  
  return context;
10012994:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012998:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001299c:	e0bffc17 	ldw	r2,-16(fp)
100129a0:	10800817 	ldw	r2,32(r2)
100129a4:	10c00094 	ori	r3,r2,2
100129a8:	e0bffc17 	ldw	r2,-16(fp)
100129ac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100129b0:	e0bffc17 	ldw	r2,-16(fp)
100129b4:	10800017 	ldw	r2,0(r2)
100129b8:	10800104 	addi	r2,r2,4
100129bc:	1007883a 	mov	r3,r2
100129c0:	e0bffc17 	ldw	r2,-16(fp)
100129c4:	10800817 	ldw	r2,32(r2)
100129c8:	18800035 	stwio	r2,0(r3)
100129cc:	e0bffa17 	ldw	r2,-24(fp)
100129d0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100129d4:	e0bff817 	ldw	r2,-32(fp)
100129d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100129dc:	e0bffe17 	ldw	r2,-8(fp)
100129e0:	0080100e 	bge	zero,r2,10012a24 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100129e4:	e0bfff17 	ldw	r2,-4(fp)
100129e8:	1090000c 	andi	r2,r2,16384
100129ec:	1000101e 	bne	r2,zero,10012a30 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100129f0:	0001883a 	nop
100129f4:	e0bffc17 	ldw	r2,-16(fp)
100129f8:	10c00d17 	ldw	r3,52(r2)
100129fc:	e0bff517 	ldw	r2,-44(fp)
10012a00:	1880051e 	bne	r3,r2,10012a18 <altera_avalon_jtag_uart_write+0x1b8>
10012a04:	e0bffc17 	ldw	r2,-16(fp)
10012a08:	10c00917 	ldw	r3,36(r2)
10012a0c:	e0bffc17 	ldw	r2,-16(fp)
10012a10:	10800117 	ldw	r2,4(r2)
10012a14:	18bff736 	bltu	r3,r2,100129f4 <__alt_data_end+0xf80129f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012a18:	e0bffc17 	ldw	r2,-16(fp)
10012a1c:	10800917 	ldw	r2,36(r2)
10012a20:	1000051e 	bne	r2,zero,10012a38 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012a24:	e0bffe17 	ldw	r2,-8(fp)
10012a28:	00bfd016 	blt	zero,r2,1001296c <__alt_data_end+0xf801296c>
10012a2c:	00000306 	br	10012a3c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012a30:	0001883a 	nop
10012a34:	00000106 	br	10012a3c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012a38:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012a3c:	e0fffd17 	ldw	r3,-12(fp)
10012a40:	e0bff717 	ldw	r2,-36(fp)
10012a44:	18800426 	beq	r3,r2,10012a58 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10012a48:	e0fffd17 	ldw	r3,-12(fp)
10012a4c:	e0bff717 	ldw	r2,-36(fp)
10012a50:	1885c83a 	sub	r2,r3,r2
10012a54:	00000606 	br	10012a70 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012a58:	e0bfff17 	ldw	r2,-4(fp)
10012a5c:	1090000c 	andi	r2,r2,16384
10012a60:	10000226 	beq	r2,zero,10012a6c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012a64:	00bffd44 	movi	r2,-11
10012a68:	00000106 	br	10012a70 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012a6c:	00bffec4 	movi	r2,-5
}
10012a70:	e037883a 	mov	sp,fp
10012a74:	dfc00117 	ldw	ra,4(sp)
10012a78:	df000017 	ldw	fp,0(sp)
10012a7c:	dec00204 	addi	sp,sp,8
10012a80:	f800283a 	ret

10012a84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012a84:	defff504 	addi	sp,sp,-44
10012a88:	df000a15 	stw	fp,40(sp)
10012a8c:	df000a04 	addi	fp,sp,40
10012a90:	e13ffc15 	stw	r4,-16(fp)
10012a94:	e17ffd15 	stw	r5,-12(fp)
10012a98:	e1bffe15 	stw	r6,-8(fp)
10012a9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10012aa0:	e03ff615 	stw	zero,-40(fp)
10012aa4:	d0ab6517 	ldw	r2,-21100(gp)
  
  if (alt_ticks_per_second ())
10012aa8:	10003c26 	beq	r2,zero,10012b9c <alt_alarm_start+0x118>
  {
    if (alarm)
10012aac:	e0bffc17 	ldw	r2,-16(fp)
10012ab0:	10003826 	beq	r2,zero,10012b94 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10012ab4:	e0bffc17 	ldw	r2,-16(fp)
10012ab8:	e0fffe17 	ldw	r3,-8(fp)
10012abc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012ac0:	e0bffc17 	ldw	r2,-16(fp)
10012ac4:	e0ffff17 	ldw	r3,-4(fp)
10012ac8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012acc:	0005303a 	rdctl	r2,status
10012ad0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012ad4:	e0fff917 	ldw	r3,-28(fp)
10012ad8:	00bfff84 	movi	r2,-2
10012adc:	1884703a 	and	r2,r3,r2
10012ae0:	1001703a 	wrctl	status,r2
  
  return context;
10012ae4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012ae8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10012aec:	d0ab6617 	ldw	r2,-21096(gp)
      
      current_nticks = alt_nticks();
10012af0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10012af4:	e0fffd17 	ldw	r3,-12(fp)
10012af8:	e0bff617 	ldw	r2,-40(fp)
10012afc:	1885883a 	add	r2,r3,r2
10012b00:	10c00044 	addi	r3,r2,1
10012b04:	e0bffc17 	ldw	r2,-16(fp)
10012b08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10012b0c:	e0bffc17 	ldw	r2,-16(fp)
10012b10:	10c00217 	ldw	r3,8(r2)
10012b14:	e0bff617 	ldw	r2,-40(fp)
10012b18:	1880042e 	bgeu	r3,r2,10012b2c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10012b1c:	e0bffc17 	ldw	r2,-16(fp)
10012b20:	00c00044 	movi	r3,1
10012b24:	10c00405 	stb	r3,16(r2)
10012b28:	00000206 	br	10012b34 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10012b2c:	e0bffc17 	ldw	r2,-16(fp)
10012b30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10012b34:	e0bffc17 	ldw	r2,-16(fp)
10012b38:	d0e01104 	addi	r3,gp,-32700
10012b3c:	e0fffa15 	stw	r3,-24(fp)
10012b40:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012b44:	e0bffb17 	ldw	r2,-20(fp)
10012b48:	e0fffa17 	ldw	r3,-24(fp)
10012b4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012b50:	e0bffa17 	ldw	r2,-24(fp)
10012b54:	10c00017 	ldw	r3,0(r2)
10012b58:	e0bffb17 	ldw	r2,-20(fp)
10012b5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012b60:	e0bffa17 	ldw	r2,-24(fp)
10012b64:	10800017 	ldw	r2,0(r2)
10012b68:	e0fffb17 	ldw	r3,-20(fp)
10012b6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012b70:	e0bffa17 	ldw	r2,-24(fp)
10012b74:	e0fffb17 	ldw	r3,-20(fp)
10012b78:	10c00015 	stw	r3,0(r2)
10012b7c:	e0bff817 	ldw	r2,-32(fp)
10012b80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012b84:	e0bff717 	ldw	r2,-36(fp)
10012b88:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10012b8c:	0005883a 	mov	r2,zero
10012b90:	00000306 	br	10012ba0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10012b94:	00bffa84 	movi	r2,-22
10012b98:	00000106 	br	10012ba0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10012b9c:	00bfde84 	movi	r2,-134
  }
}
10012ba0:	e037883a 	mov	sp,fp
10012ba4:	df000017 	ldw	fp,0(sp)
10012ba8:	dec00104 	addi	sp,sp,4
10012bac:	f800283a 	ret

10012bb0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10012bb0:	defffa04 	addi	sp,sp,-24
10012bb4:	dfc00515 	stw	ra,20(sp)
10012bb8:	df000415 	stw	fp,16(sp)
10012bbc:	df000404 	addi	fp,sp,16
10012bc0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10012bc4:	00800244 	movi	r2,9
10012bc8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10012bcc:	014003f4 	movhi	r5,15
10012bd0:	29509004 	addi	r5,r5,16960
10012bd4:	e13ffd17 	ldw	r4,-12(fp)
10012bd8:	00046600 	call	10004660 <__mulsi3>
10012bdc:	100b883a 	mov	r5,r2
10012be0:	0100bef4 	movhi	r4,763
10012be4:	213c2004 	addi	r4,r4,-3968
10012be8:	000ec400 	call	1000ec40 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10012bec:	100b883a 	mov	r5,r2
10012bf0:	01200034 	movhi	r4,32768
10012bf4:	213fffc4 	addi	r4,r4,-1
10012bf8:	000ec400 	call	1000ec40 <__udivsi3>
10012bfc:	100b883a 	mov	r5,r2
10012c00:	e13fff17 	ldw	r4,-4(fp)
10012c04:	000ec400 	call	1000ec40 <__udivsi3>
10012c08:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10012c0c:	e0bffe17 	ldw	r2,-8(fp)
10012c10:	10002a26 	beq	r2,zero,10012cbc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10012c14:	e03ffc15 	stw	zero,-16(fp)
10012c18:	00001706 	br	10012c78 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10012c1c:	00a00034 	movhi	r2,32768
10012c20:	10bfffc4 	addi	r2,r2,-1
10012c24:	10bfffc4 	addi	r2,r2,-1
10012c28:	103ffe1e 	bne	r2,zero,10012c24 <__alt_data_end+0xf8012c24>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10012c2c:	014003f4 	movhi	r5,15
10012c30:	29509004 	addi	r5,r5,16960
10012c34:	e13ffd17 	ldw	r4,-12(fp)
10012c38:	00046600 	call	10004660 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10012c3c:	100b883a 	mov	r5,r2
10012c40:	0100bef4 	movhi	r4,763
10012c44:	213c2004 	addi	r4,r4,-3968
10012c48:	000ec400 	call	1000ec40 <__udivsi3>
10012c4c:	100b883a 	mov	r5,r2
10012c50:	01200034 	movhi	r4,32768
10012c54:	213fffc4 	addi	r4,r4,-1
10012c58:	000ec400 	call	1000ec40 <__udivsi3>
10012c5c:	1007883a 	mov	r3,r2
10012c60:	e0bfff17 	ldw	r2,-4(fp)
10012c64:	10c5c83a 	sub	r2,r2,r3
10012c68:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10012c6c:	e0bffc17 	ldw	r2,-16(fp)
10012c70:	10800044 	addi	r2,r2,1
10012c74:	e0bffc15 	stw	r2,-16(fp)
10012c78:	e0fffc17 	ldw	r3,-16(fp)
10012c7c:	e0bffe17 	ldw	r2,-8(fp)
10012c80:	18bfe616 	blt	r3,r2,10012c1c <__alt_data_end+0xf8012c1c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012c84:	014003f4 	movhi	r5,15
10012c88:	29509004 	addi	r5,r5,16960
10012c8c:	e13ffd17 	ldw	r4,-12(fp)
10012c90:	00046600 	call	10004660 <__mulsi3>
10012c94:	100b883a 	mov	r5,r2
10012c98:	0100bef4 	movhi	r4,763
10012c9c:	213c2004 	addi	r4,r4,-3968
10012ca0:	000ec400 	call	1000ec40 <__udivsi3>
10012ca4:	e17fff17 	ldw	r5,-4(fp)
10012ca8:	1009883a 	mov	r4,r2
10012cac:	00046600 	call	10004660 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012cb0:	10bfffc4 	addi	r2,r2,-1
10012cb4:	103ffe1e 	bne	r2,zero,10012cb0 <__alt_data_end+0xf8012cb0>
10012cb8:	00000d06 	br	10012cf0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10012cbc:	014003f4 	movhi	r5,15
10012cc0:	29509004 	addi	r5,r5,16960
10012cc4:	e13ffd17 	ldw	r4,-12(fp)
10012cc8:	00046600 	call	10004660 <__mulsi3>
10012ccc:	100b883a 	mov	r5,r2
10012cd0:	0100bef4 	movhi	r4,763
10012cd4:	213c2004 	addi	r4,r4,-3968
10012cd8:	000ec400 	call	1000ec40 <__udivsi3>
10012cdc:	e17fff17 	ldw	r5,-4(fp)
10012ce0:	1009883a 	mov	r4,r2
10012ce4:	00046600 	call	10004660 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10012ce8:	10bfffc4 	addi	r2,r2,-1
10012cec:	00bffe16 	blt	zero,r2,10012ce8 <__alt_data_end+0xf8012ce8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10012cf0:	0005883a 	mov	r2,zero
}
10012cf4:	e037883a 	mov	sp,fp
10012cf8:	dfc00117 	ldw	ra,4(sp)
10012cfc:	df000017 	ldw	fp,0(sp)
10012d00:	dec00204 	addi	sp,sp,8
10012d04:	f800283a 	ret

10012d08 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10012d08:	deffff04 	addi	sp,sp,-4
10012d0c:	df000015 	stw	fp,0(sp)
10012d10:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10012d14:	0001883a 	nop
10012d18:	e037883a 	mov	sp,fp
10012d1c:	df000017 	ldw	fp,0(sp)
10012d20:	dec00104 	addi	sp,sp,4
10012d24:	f800283a 	ret

10012d28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012d28:	defffe04 	addi	sp,sp,-8
10012d2c:	dfc00115 	stw	ra,4(sp)
10012d30:	df000015 	stw	fp,0(sp)
10012d34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012d38:	d0a00e17 	ldw	r2,-32712(gp)
10012d3c:	10000326 	beq	r2,zero,10012d4c <alt_get_errno+0x24>
10012d40:	d0a00e17 	ldw	r2,-32712(gp)
10012d44:	103ee83a 	callr	r2
10012d48:	00000106 	br	10012d50 <alt_get_errno+0x28>
10012d4c:	d0ab6004 	addi	r2,gp,-21120
}
10012d50:	e037883a 	mov	sp,fp
10012d54:	dfc00117 	ldw	ra,4(sp)
10012d58:	df000017 	ldw	fp,0(sp)
10012d5c:	dec00204 	addi	sp,sp,8
10012d60:	f800283a 	ret

10012d64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10012d64:	defffa04 	addi	sp,sp,-24
10012d68:	dfc00515 	stw	ra,20(sp)
10012d6c:	df000415 	stw	fp,16(sp)
10012d70:	df000404 	addi	fp,sp,16
10012d74:	e13ffe15 	stw	r4,-8(fp)
10012d78:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10012d7c:	e0bffe17 	ldw	r2,-8(fp)
10012d80:	10000326 	beq	r2,zero,10012d90 <alt_dev_llist_insert+0x2c>
10012d84:	e0bffe17 	ldw	r2,-8(fp)
10012d88:	10800217 	ldw	r2,8(r2)
10012d8c:	1000061e 	bne	r2,zero,10012da8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10012d90:	0012d280 	call	10012d28 <alt_get_errno>
10012d94:	1007883a 	mov	r3,r2
10012d98:	00800584 	movi	r2,22
10012d9c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10012da0:	00bffa84 	movi	r2,-22
10012da4:	00001306 	br	10012df4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10012da8:	e0bffe17 	ldw	r2,-8(fp)
10012dac:	e0ffff17 	ldw	r3,-4(fp)
10012db0:	e0fffc15 	stw	r3,-16(fp)
10012db4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10012db8:	e0bffd17 	ldw	r2,-12(fp)
10012dbc:	e0fffc17 	ldw	r3,-16(fp)
10012dc0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10012dc4:	e0bffc17 	ldw	r2,-16(fp)
10012dc8:	10c00017 	ldw	r3,0(r2)
10012dcc:	e0bffd17 	ldw	r2,-12(fp)
10012dd0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10012dd4:	e0bffc17 	ldw	r2,-16(fp)
10012dd8:	10800017 	ldw	r2,0(r2)
10012ddc:	e0fffd17 	ldw	r3,-12(fp)
10012de0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10012de4:	e0bffc17 	ldw	r2,-16(fp)
10012de8:	e0fffd17 	ldw	r3,-12(fp)
10012dec:	10c00015 	stw	r3,0(r2)

  return 0;  
10012df0:	0005883a 	mov	r2,zero
}
10012df4:	e037883a 	mov	sp,fp
10012df8:	dfc00117 	ldw	ra,4(sp)
10012dfc:	df000017 	ldw	fp,0(sp)
10012e00:	dec00204 	addi	sp,sp,8
10012e04:	f800283a 	ret

10012e08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10012e08:	defffd04 	addi	sp,sp,-12
10012e0c:	dfc00215 	stw	ra,8(sp)
10012e10:	df000115 	stw	fp,4(sp)
10012e14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012e18:	00840074 	movhi	r2,4097
10012e1c:	108f6f04 	addi	r2,r2,15804
10012e20:	e0bfff15 	stw	r2,-4(fp)
10012e24:	00000606 	br	10012e40 <_do_ctors+0x38>
        (*ctor) (); 
10012e28:	e0bfff17 	ldw	r2,-4(fp)
10012e2c:	10800017 	ldw	r2,0(r2)
10012e30:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10012e34:	e0bfff17 	ldw	r2,-4(fp)
10012e38:	10bfff04 	addi	r2,r2,-4
10012e3c:	e0bfff15 	stw	r2,-4(fp)
10012e40:	e0ffff17 	ldw	r3,-4(fp)
10012e44:	00840074 	movhi	r2,4097
10012e48:	108f7004 	addi	r2,r2,15808
10012e4c:	18bff62e 	bgeu	r3,r2,10012e28 <__alt_data_end+0xf8012e28>
        (*ctor) (); 
}
10012e50:	0001883a 	nop
10012e54:	e037883a 	mov	sp,fp
10012e58:	dfc00117 	ldw	ra,4(sp)
10012e5c:	df000017 	ldw	fp,0(sp)
10012e60:	dec00204 	addi	sp,sp,8
10012e64:	f800283a 	ret

10012e68 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10012e68:	defffd04 	addi	sp,sp,-12
10012e6c:	dfc00215 	stw	ra,8(sp)
10012e70:	df000115 	stw	fp,4(sp)
10012e74:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012e78:	00840074 	movhi	r2,4097
10012e7c:	108f6f04 	addi	r2,r2,15804
10012e80:	e0bfff15 	stw	r2,-4(fp)
10012e84:	00000606 	br	10012ea0 <_do_dtors+0x38>
        (*dtor) (); 
10012e88:	e0bfff17 	ldw	r2,-4(fp)
10012e8c:	10800017 	ldw	r2,0(r2)
10012e90:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10012e94:	e0bfff17 	ldw	r2,-4(fp)
10012e98:	10bfff04 	addi	r2,r2,-4
10012e9c:	e0bfff15 	stw	r2,-4(fp)
10012ea0:	e0ffff17 	ldw	r3,-4(fp)
10012ea4:	00840074 	movhi	r2,4097
10012ea8:	108f7004 	addi	r2,r2,15808
10012eac:	18bff62e 	bgeu	r3,r2,10012e88 <__alt_data_end+0xf8012e88>
        (*dtor) (); 
}
10012eb0:	0001883a 	nop
10012eb4:	e037883a 	mov	sp,fp
10012eb8:	dfc00117 	ldw	ra,4(sp)
10012ebc:	df000017 	ldw	fp,0(sp)
10012ec0:	dec00204 	addi	sp,sp,8
10012ec4:	f800283a 	ret

10012ec8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10012ec8:	deffff04 	addi	sp,sp,-4
10012ecc:	df000015 	stw	fp,0(sp)
10012ed0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10012ed4:	0001883a 	nop
10012ed8:	e037883a 	mov	sp,fp
10012edc:	df000017 	ldw	fp,0(sp)
10012ee0:	dec00104 	addi	sp,sp,4
10012ee4:	f800283a 	ret

10012ee8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10012ee8:	defff904 	addi	sp,sp,-28
10012eec:	dfc00615 	stw	ra,24(sp)
10012ef0:	df000515 	stw	fp,20(sp)
10012ef4:	df000504 	addi	fp,sp,20
10012ef8:	e13ffc15 	stw	r4,-16(fp)
10012efc:	e17ffd15 	stw	r5,-12(fp)
10012f00:	e1bffe15 	stw	r6,-8(fp)
10012f04:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10012f08:	e0800217 	ldw	r2,8(fp)
10012f0c:	d8800015 	stw	r2,0(sp)
10012f10:	e1ffff17 	ldw	r7,-4(fp)
10012f14:	e1bffe17 	ldw	r6,-8(fp)
10012f18:	e17ffd17 	ldw	r5,-12(fp)
10012f1c:	e13ffc17 	ldw	r4,-16(fp)
10012f20:	00130980 	call	10013098 <alt_iic_isr_register>
}  
10012f24:	e037883a 	mov	sp,fp
10012f28:	dfc00117 	ldw	ra,4(sp)
10012f2c:	df000017 	ldw	fp,0(sp)
10012f30:	dec00204 	addi	sp,sp,8
10012f34:	f800283a 	ret

10012f38 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10012f38:	defff904 	addi	sp,sp,-28
10012f3c:	df000615 	stw	fp,24(sp)
10012f40:	df000604 	addi	fp,sp,24
10012f44:	e13ffe15 	stw	r4,-8(fp)
10012f48:	e17fff15 	stw	r5,-4(fp)
10012f4c:	e0bfff17 	ldw	r2,-4(fp)
10012f50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012f54:	0005303a 	rdctl	r2,status
10012f58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012f5c:	e0fffb17 	ldw	r3,-20(fp)
10012f60:	00bfff84 	movi	r2,-2
10012f64:	1884703a 	and	r2,r3,r2
10012f68:	1001703a 	wrctl	status,r2
  
  return context;
10012f6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012f70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10012f74:	00c00044 	movi	r3,1
10012f78:	e0bffa17 	ldw	r2,-24(fp)
10012f7c:	1884983a 	sll	r2,r3,r2
10012f80:	1007883a 	mov	r3,r2
10012f84:	d0ab6417 	ldw	r2,-21104(gp)
10012f88:	1884b03a 	or	r2,r3,r2
10012f8c:	d0ab6415 	stw	r2,-21104(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012f90:	d0ab6417 	ldw	r2,-21104(gp)
10012f94:	100170fa 	wrctl	ienable,r2
10012f98:	e0bffc17 	ldw	r2,-16(fp)
10012f9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012fa0:	e0bffd17 	ldw	r2,-12(fp)
10012fa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012fa8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10012fac:	0001883a 	nop
}
10012fb0:	e037883a 	mov	sp,fp
10012fb4:	df000017 	ldw	fp,0(sp)
10012fb8:	dec00104 	addi	sp,sp,4
10012fbc:	f800283a 	ret

10012fc0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10012fc0:	defff904 	addi	sp,sp,-28
10012fc4:	df000615 	stw	fp,24(sp)
10012fc8:	df000604 	addi	fp,sp,24
10012fcc:	e13ffe15 	stw	r4,-8(fp)
10012fd0:	e17fff15 	stw	r5,-4(fp)
10012fd4:	e0bfff17 	ldw	r2,-4(fp)
10012fd8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012fdc:	0005303a 	rdctl	r2,status
10012fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012fe4:	e0fffb17 	ldw	r3,-20(fp)
10012fe8:	00bfff84 	movi	r2,-2
10012fec:	1884703a 	and	r2,r3,r2
10012ff0:	1001703a 	wrctl	status,r2
  
  return context;
10012ff4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012ff8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10012ffc:	00c00044 	movi	r3,1
10013000:	e0bffa17 	ldw	r2,-24(fp)
10013004:	1884983a 	sll	r2,r3,r2
10013008:	0084303a 	nor	r2,zero,r2
1001300c:	1007883a 	mov	r3,r2
10013010:	d0ab6417 	ldw	r2,-21104(gp)
10013014:	1884703a 	and	r2,r3,r2
10013018:	d0ab6415 	stw	r2,-21104(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001301c:	d0ab6417 	ldw	r2,-21104(gp)
10013020:	100170fa 	wrctl	ienable,r2
10013024:	e0bffc17 	ldw	r2,-16(fp)
10013028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001302c:	e0bffd17 	ldw	r2,-12(fp)
10013030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013038:	0001883a 	nop
}
1001303c:	e037883a 	mov	sp,fp
10013040:	df000017 	ldw	fp,0(sp)
10013044:	dec00104 	addi	sp,sp,4
10013048:	f800283a 	ret

1001304c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001304c:	defffc04 	addi	sp,sp,-16
10013050:	df000315 	stw	fp,12(sp)
10013054:	df000304 	addi	fp,sp,12
10013058:	e13ffe15 	stw	r4,-8(fp)
1001305c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10013060:	000530fa 	rdctl	r2,ienable
10013064:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013068:	00c00044 	movi	r3,1
1001306c:	e0bfff17 	ldw	r2,-4(fp)
10013070:	1884983a 	sll	r2,r3,r2
10013074:	1007883a 	mov	r3,r2
10013078:	e0bffd17 	ldw	r2,-12(fp)
1001307c:	1884703a 	and	r2,r3,r2
10013080:	1004c03a 	cmpne	r2,r2,zero
10013084:	10803fcc 	andi	r2,r2,255
}
10013088:	e037883a 	mov	sp,fp
1001308c:	df000017 	ldw	fp,0(sp)
10013090:	dec00104 	addi	sp,sp,4
10013094:	f800283a 	ret

10013098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013098:	defff504 	addi	sp,sp,-44
1001309c:	dfc00a15 	stw	ra,40(sp)
100130a0:	df000915 	stw	fp,36(sp)
100130a4:	df000904 	addi	fp,sp,36
100130a8:	e13ffc15 	stw	r4,-16(fp)
100130ac:	e17ffd15 	stw	r5,-12(fp)
100130b0:	e1bffe15 	stw	r6,-8(fp)
100130b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100130b8:	00bffa84 	movi	r2,-22
100130bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100130c0:	e0bffd17 	ldw	r2,-12(fp)
100130c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100130c8:	e0bff817 	ldw	r2,-32(fp)
100130cc:	10800808 	cmpgei	r2,r2,32
100130d0:	1000271e 	bne	r2,zero,10013170 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100130d4:	0005303a 	rdctl	r2,status
100130d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100130dc:	e0fffb17 	ldw	r3,-20(fp)
100130e0:	00bfff84 	movi	r2,-2
100130e4:	1884703a 	and	r2,r3,r2
100130e8:	1001703a 	wrctl	status,r2
  
  return context;
100130ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100130f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100130f4:	008400b4 	movhi	r2,4098
100130f8:	10aafe04 	addi	r2,r2,-21512
100130fc:	e0fff817 	ldw	r3,-32(fp)
10013100:	180690fa 	slli	r3,r3,3
10013104:	10c5883a 	add	r2,r2,r3
10013108:	e0fffe17 	ldw	r3,-8(fp)
1001310c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013110:	008400b4 	movhi	r2,4098
10013114:	10aafe04 	addi	r2,r2,-21512
10013118:	e0fff817 	ldw	r3,-32(fp)
1001311c:	180690fa 	slli	r3,r3,3
10013120:	10c5883a 	add	r2,r2,r3
10013124:	10800104 	addi	r2,r2,4
10013128:	e0ffff17 	ldw	r3,-4(fp)
1001312c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013130:	e0bffe17 	ldw	r2,-8(fp)
10013134:	10000526 	beq	r2,zero,1001314c <alt_iic_isr_register+0xb4>
10013138:	e0bff817 	ldw	r2,-32(fp)
1001313c:	100b883a 	mov	r5,r2
10013140:	e13ffc17 	ldw	r4,-16(fp)
10013144:	0012f380 	call	10012f38 <alt_ic_irq_enable>
10013148:	00000406 	br	1001315c <alt_iic_isr_register+0xc4>
1001314c:	e0bff817 	ldw	r2,-32(fp)
10013150:	100b883a 	mov	r5,r2
10013154:	e13ffc17 	ldw	r4,-16(fp)
10013158:	0012fc00 	call	10012fc0 <alt_ic_irq_disable>
1001315c:	e0bff715 	stw	r2,-36(fp)
10013160:	e0bffa17 	ldw	r2,-24(fp)
10013164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013168:	e0bff917 	ldw	r2,-28(fp)
1001316c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013170:	e0bff717 	ldw	r2,-36(fp)
}
10013174:	e037883a 	mov	sp,fp
10013178:	dfc00117 	ldw	ra,4(sp)
1001317c:	df000017 	ldw	fp,0(sp)
10013180:	dec00204 	addi	sp,sp,8
10013184:	f800283a 	ret

10013188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013188:	defff804 	addi	sp,sp,-32
1001318c:	dfc00715 	stw	ra,28(sp)
10013190:	df000615 	stw	fp,24(sp)
10013194:	dc000515 	stw	r16,20(sp)
10013198:	df000604 	addi	fp,sp,24
1001319c:	e13ffb15 	stw	r4,-20(fp)
100131a0:	e17ffc15 	stw	r5,-16(fp)
100131a4:	e1bffd15 	stw	r6,-12(fp)
100131a8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100131ac:	e1bffe17 	ldw	r6,-8(fp)
100131b0:	e17ffd17 	ldw	r5,-12(fp)
100131b4:	e13ffc17 	ldw	r4,-16(fp)
100131b8:	00134100 	call	10013410 <open>
100131bc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100131c0:	e0bffa17 	ldw	r2,-24(fp)
100131c4:	10002216 	blt	r2,zero,10013250 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100131c8:	04040074 	movhi	r16,4097
100131cc:	84191e04 	addi	r16,r16,25720
100131d0:	e0bffa17 	ldw	r2,-24(fp)
100131d4:	01400304 	movi	r5,12
100131d8:	1009883a 	mov	r4,r2
100131dc:	00046600 	call	10004660 <__mulsi3>
100131e0:	8085883a 	add	r2,r16,r2
100131e4:	10c00017 	ldw	r3,0(r2)
100131e8:	e0bffb17 	ldw	r2,-20(fp)
100131ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100131f0:	04040074 	movhi	r16,4097
100131f4:	84191e04 	addi	r16,r16,25720
100131f8:	e0bffa17 	ldw	r2,-24(fp)
100131fc:	01400304 	movi	r5,12
10013200:	1009883a 	mov	r4,r2
10013204:	00046600 	call	10004660 <__mulsi3>
10013208:	8085883a 	add	r2,r16,r2
1001320c:	10800104 	addi	r2,r2,4
10013210:	10c00017 	ldw	r3,0(r2)
10013214:	e0bffb17 	ldw	r2,-20(fp)
10013218:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001321c:	04040074 	movhi	r16,4097
10013220:	84191e04 	addi	r16,r16,25720
10013224:	e0bffa17 	ldw	r2,-24(fp)
10013228:	01400304 	movi	r5,12
1001322c:	1009883a 	mov	r4,r2
10013230:	00046600 	call	10004660 <__mulsi3>
10013234:	8085883a 	add	r2,r16,r2
10013238:	10800204 	addi	r2,r2,8
1001323c:	10c00017 	ldw	r3,0(r2)
10013240:	e0bffb17 	ldw	r2,-20(fp)
10013244:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013248:	e13ffa17 	ldw	r4,-24(fp)
1001324c:	0011cc40 	call	10011cc4 <alt_release_fd>
  }
} 
10013250:	0001883a 	nop
10013254:	e6ffff04 	addi	sp,fp,-4
10013258:	dfc00217 	ldw	ra,8(sp)
1001325c:	df000117 	ldw	fp,4(sp)
10013260:	dc000017 	ldw	r16,0(sp)
10013264:	dec00304 	addi	sp,sp,12
10013268:	f800283a 	ret

1001326c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001326c:	defffb04 	addi	sp,sp,-20
10013270:	dfc00415 	stw	ra,16(sp)
10013274:	df000315 	stw	fp,12(sp)
10013278:	df000304 	addi	fp,sp,12
1001327c:	e13ffd15 	stw	r4,-12(fp)
10013280:	e17ffe15 	stw	r5,-8(fp)
10013284:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013288:	01c07fc4 	movi	r7,511
1001328c:	01800044 	movi	r6,1
10013290:	e17ffd17 	ldw	r5,-12(fp)
10013294:	01040074 	movhi	r4,4097
10013298:	21192104 	addi	r4,r4,25732
1001329c:	00131880 	call	10013188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100132a0:	01c07fc4 	movi	r7,511
100132a4:	000d883a 	mov	r6,zero
100132a8:	e17ffe17 	ldw	r5,-8(fp)
100132ac:	01040074 	movhi	r4,4097
100132b0:	21191e04 	addi	r4,r4,25720
100132b4:	00131880 	call	10013188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100132b8:	01c07fc4 	movi	r7,511
100132bc:	01800044 	movi	r6,1
100132c0:	e17fff17 	ldw	r5,-4(fp)
100132c4:	01040074 	movhi	r4,4097
100132c8:	21192404 	addi	r4,r4,25744
100132cc:	00131880 	call	10013188 <alt_open_fd>
}  
100132d0:	0001883a 	nop
100132d4:	e037883a 	mov	sp,fp
100132d8:	dfc00117 	ldw	ra,4(sp)
100132dc:	df000017 	ldw	fp,0(sp)
100132e0:	dec00204 	addi	sp,sp,8
100132e4:	f800283a 	ret

100132e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100132e8:	defffe04 	addi	sp,sp,-8
100132ec:	dfc00115 	stw	ra,4(sp)
100132f0:	df000015 	stw	fp,0(sp)
100132f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100132f8:	d0a00e17 	ldw	r2,-32712(gp)
100132fc:	10000326 	beq	r2,zero,1001330c <alt_get_errno+0x24>
10013300:	d0a00e17 	ldw	r2,-32712(gp)
10013304:	103ee83a 	callr	r2
10013308:	00000106 	br	10013310 <alt_get_errno+0x28>
1001330c:	d0ab6004 	addi	r2,gp,-21120
}
10013310:	e037883a 	mov	sp,fp
10013314:	dfc00117 	ldw	ra,4(sp)
10013318:	df000017 	ldw	fp,0(sp)
1001331c:	dec00204 	addi	sp,sp,8
10013320:	f800283a 	ret

10013324 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10013324:	defffb04 	addi	sp,sp,-20
10013328:	dfc00415 	stw	ra,16(sp)
1001332c:	df000315 	stw	fp,12(sp)
10013330:	dc000215 	stw	r16,8(sp)
10013334:	df000304 	addi	fp,sp,12
10013338:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1001333c:	e0bffe17 	ldw	r2,-8(fp)
10013340:	10800217 	ldw	r2,8(r2)
10013344:	10d00034 	orhi	r3,r2,16384
10013348:	e0bffe17 	ldw	r2,-8(fp)
1001334c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013350:	e03ffd15 	stw	zero,-12(fp)
10013354:	00002306 	br	100133e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013358:	04040074 	movhi	r16,4097
1001335c:	84191e04 	addi	r16,r16,25720
10013360:	e0bffd17 	ldw	r2,-12(fp)
10013364:	01400304 	movi	r5,12
10013368:	1009883a 	mov	r4,r2
1001336c:	00046600 	call	10004660 <__mulsi3>
10013370:	8085883a 	add	r2,r16,r2
10013374:	10c00017 	ldw	r3,0(r2)
10013378:	e0bffe17 	ldw	r2,-8(fp)
1001337c:	10800017 	ldw	r2,0(r2)
10013380:	1880151e 	bne	r3,r2,100133d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013384:	04040074 	movhi	r16,4097
10013388:	84191e04 	addi	r16,r16,25720
1001338c:	e0bffd17 	ldw	r2,-12(fp)
10013390:	01400304 	movi	r5,12
10013394:	1009883a 	mov	r4,r2
10013398:	00046600 	call	10004660 <__mulsi3>
1001339c:	8085883a 	add	r2,r16,r2
100133a0:	10800204 	addi	r2,r2,8
100133a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100133a8:	10000b0e 	bge	r2,zero,100133d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100133ac:	01400304 	movi	r5,12
100133b0:	e13ffd17 	ldw	r4,-12(fp)
100133b4:	00046600 	call	10004660 <__mulsi3>
100133b8:	1007883a 	mov	r3,r2
100133bc:	00840074 	movhi	r2,4097
100133c0:	10991e04 	addi	r2,r2,25720
100133c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100133c8:	e0bffe17 	ldw	r2,-8(fp)
100133cc:	18800226 	beq	r3,r2,100133d8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100133d0:	00bffcc4 	movi	r2,-13
100133d4:	00000806 	br	100133f8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100133d8:	e0bffd17 	ldw	r2,-12(fp)
100133dc:	10800044 	addi	r2,r2,1
100133e0:	e0bffd15 	stw	r2,-12(fp)
100133e4:	d0a00d17 	ldw	r2,-32716(gp)
100133e8:	1007883a 	mov	r3,r2
100133ec:	e0bffd17 	ldw	r2,-12(fp)
100133f0:	18bfd92e 	bgeu	r3,r2,10013358 <__alt_data_end+0xf8013358>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100133f4:	0005883a 	mov	r2,zero
}
100133f8:	e6ffff04 	addi	sp,fp,-4
100133fc:	dfc00217 	ldw	ra,8(sp)
10013400:	df000117 	ldw	fp,4(sp)
10013404:	dc000017 	ldw	r16,0(sp)
10013408:	dec00304 	addi	sp,sp,12
1001340c:	f800283a 	ret

10013410 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013410:	defff604 	addi	sp,sp,-40
10013414:	dfc00915 	stw	ra,36(sp)
10013418:	df000815 	stw	fp,32(sp)
1001341c:	df000804 	addi	fp,sp,32
10013420:	e13ffd15 	stw	r4,-12(fp)
10013424:	e17ffe15 	stw	r5,-8(fp)
10013428:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001342c:	00bfffc4 	movi	r2,-1
10013430:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10013434:	00bffb44 	movi	r2,-19
10013438:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001343c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013440:	d1600b04 	addi	r5,gp,-32724
10013444:	e13ffd17 	ldw	r4,-12(fp)
10013448:	00137340 	call	10013734 <alt_find_dev>
1001344c:	e0bff815 	stw	r2,-32(fp)
10013450:	e0bff817 	ldw	r2,-32(fp)
10013454:	1000051e 	bne	r2,zero,1001346c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013458:	e13ffd17 	ldw	r4,-12(fp)
1001345c:	00137c40 	call	100137c4 <alt_find_file>
10013460:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10013464:	00800044 	movi	r2,1
10013468:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1001346c:	e0bff817 	ldw	r2,-32(fp)
10013470:	10002b26 	beq	r2,zero,10013520 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10013474:	e13ff817 	ldw	r4,-32(fp)
10013478:	00138cc0 	call	100138cc <alt_get_fd>
1001347c:	e0bff915 	stw	r2,-28(fp)
10013480:	e0bff917 	ldw	r2,-28(fp)
10013484:	1000030e 	bge	r2,zero,10013494 <open+0x84>
    {
      status = index;
10013488:	e0bff917 	ldw	r2,-28(fp)
1001348c:	e0bffa15 	stw	r2,-24(fp)
10013490:	00002506 	br	10013528 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10013494:	01400304 	movi	r5,12
10013498:	e13ff917 	ldw	r4,-28(fp)
1001349c:	00046600 	call	10004660 <__mulsi3>
100134a0:	1007883a 	mov	r3,r2
100134a4:	00840074 	movhi	r2,4097
100134a8:	10991e04 	addi	r2,r2,25720
100134ac:	1885883a 	add	r2,r3,r2
100134b0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100134b4:	e0fffe17 	ldw	r3,-8(fp)
100134b8:	00900034 	movhi	r2,16384
100134bc:	10bfffc4 	addi	r2,r2,-1
100134c0:	1886703a 	and	r3,r3,r2
100134c4:	e0bffc17 	ldw	r2,-16(fp)
100134c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100134cc:	e0bffb17 	ldw	r2,-20(fp)
100134d0:	1000051e 	bne	r2,zero,100134e8 <open+0xd8>
100134d4:	e13ffc17 	ldw	r4,-16(fp)
100134d8:	00133240 	call	10013324 <alt_file_locked>
100134dc:	e0bffa15 	stw	r2,-24(fp)
100134e0:	e0bffa17 	ldw	r2,-24(fp)
100134e4:	10001016 	blt	r2,zero,10013528 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100134e8:	e0bff817 	ldw	r2,-32(fp)
100134ec:	10800317 	ldw	r2,12(r2)
100134f0:	10000826 	beq	r2,zero,10013514 <open+0x104>
100134f4:	e0bff817 	ldw	r2,-32(fp)
100134f8:	10800317 	ldw	r2,12(r2)
100134fc:	e1ffff17 	ldw	r7,-4(fp)
10013500:	e1bffe17 	ldw	r6,-8(fp)
10013504:	e17ffd17 	ldw	r5,-12(fp)
10013508:	e13ffc17 	ldw	r4,-16(fp)
1001350c:	103ee83a 	callr	r2
10013510:	00000106 	br	10013518 <open+0x108>
10013514:	0005883a 	mov	r2,zero
10013518:	e0bffa15 	stw	r2,-24(fp)
1001351c:	00000206 	br	10013528 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013520:	00bffb44 	movi	r2,-19
10013524:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013528:	e0bffa17 	ldw	r2,-24(fp)
1001352c:	1000090e 	bge	r2,zero,10013554 <open+0x144>
  {
    alt_release_fd (index);  
10013530:	e13ff917 	ldw	r4,-28(fp)
10013534:	0011cc40 	call	10011cc4 <alt_release_fd>
    ALT_ERRNO = -status;
10013538:	00132e80 	call	100132e8 <alt_get_errno>
1001353c:	1007883a 	mov	r3,r2
10013540:	e0bffa17 	ldw	r2,-24(fp)
10013544:	0085c83a 	sub	r2,zero,r2
10013548:	18800015 	stw	r2,0(r3)
    return -1;
1001354c:	00bfffc4 	movi	r2,-1
10013550:	00000106 	br	10013558 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013554:	e0bff917 	ldw	r2,-28(fp)
}
10013558:	e037883a 	mov	sp,fp
1001355c:	dfc00117 	ldw	ra,4(sp)
10013560:	df000017 	ldw	fp,0(sp)
10013564:	dec00204 	addi	sp,sp,8
10013568:	f800283a 	ret

1001356c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001356c:	defffa04 	addi	sp,sp,-24
10013570:	df000515 	stw	fp,20(sp)
10013574:	df000504 	addi	fp,sp,20
10013578:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001357c:	0005303a 	rdctl	r2,status
10013580:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013584:	e0fffc17 	ldw	r3,-16(fp)
10013588:	00bfff84 	movi	r2,-2
1001358c:	1884703a 	and	r2,r3,r2
10013590:	1001703a 	wrctl	status,r2
  
  return context;
10013594:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013598:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001359c:	e0bfff17 	ldw	r2,-4(fp)
100135a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100135a4:	e0bffd17 	ldw	r2,-12(fp)
100135a8:	10800017 	ldw	r2,0(r2)
100135ac:	e0fffd17 	ldw	r3,-12(fp)
100135b0:	18c00117 	ldw	r3,4(r3)
100135b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100135b8:	e0bffd17 	ldw	r2,-12(fp)
100135bc:	10800117 	ldw	r2,4(r2)
100135c0:	e0fffd17 	ldw	r3,-12(fp)
100135c4:	18c00017 	ldw	r3,0(r3)
100135c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100135cc:	e0bffd17 	ldw	r2,-12(fp)
100135d0:	e0fffd17 	ldw	r3,-12(fp)
100135d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100135d8:	e0bffd17 	ldw	r2,-12(fp)
100135dc:	e0fffd17 	ldw	r3,-12(fp)
100135e0:	10c00015 	stw	r3,0(r2)
100135e4:	e0bffb17 	ldw	r2,-20(fp)
100135e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100135ec:	e0bffe17 	ldw	r2,-8(fp)
100135f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100135f4:	0001883a 	nop
100135f8:	e037883a 	mov	sp,fp
100135fc:	df000017 	ldw	fp,0(sp)
10013600:	dec00104 	addi	sp,sp,4
10013604:	f800283a 	ret

10013608 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013608:	defffb04 	addi	sp,sp,-20
1001360c:	dfc00415 	stw	ra,16(sp)
10013610:	df000315 	stw	fp,12(sp)
10013614:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013618:	d0a01117 	ldw	r2,-32700(gp)
1001361c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013620:	d0ab6617 	ldw	r2,-21096(gp)
10013624:	10800044 	addi	r2,r2,1
10013628:	d0ab6615 	stw	r2,-21096(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001362c:	00002e06 	br	100136e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013630:	e0bffd17 	ldw	r2,-12(fp)
10013634:	10800017 	ldw	r2,0(r2)
10013638:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001363c:	e0bffd17 	ldw	r2,-12(fp)
10013640:	10800403 	ldbu	r2,16(r2)
10013644:	10803fcc 	andi	r2,r2,255
10013648:	10000426 	beq	r2,zero,1001365c <alt_tick+0x54>
1001364c:	d0ab6617 	ldw	r2,-21096(gp)
10013650:	1000021e 	bne	r2,zero,1001365c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013654:	e0bffd17 	ldw	r2,-12(fp)
10013658:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001365c:	e0bffd17 	ldw	r2,-12(fp)
10013660:	10800217 	ldw	r2,8(r2)
10013664:	d0eb6617 	ldw	r3,-21096(gp)
10013668:	18801d36 	bltu	r3,r2,100136e0 <alt_tick+0xd8>
1001366c:	e0bffd17 	ldw	r2,-12(fp)
10013670:	10800403 	ldbu	r2,16(r2)
10013674:	10803fcc 	andi	r2,r2,255
10013678:	1000191e 	bne	r2,zero,100136e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001367c:	e0bffd17 	ldw	r2,-12(fp)
10013680:	10800317 	ldw	r2,12(r2)
10013684:	e0fffd17 	ldw	r3,-12(fp)
10013688:	18c00517 	ldw	r3,20(r3)
1001368c:	1809883a 	mov	r4,r3
10013690:	103ee83a 	callr	r2
10013694:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013698:	e0bfff17 	ldw	r2,-4(fp)
1001369c:	1000031e 	bne	r2,zero,100136ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100136a0:	e13ffd17 	ldw	r4,-12(fp)
100136a4:	001356c0 	call	1001356c <alt_alarm_stop>
100136a8:	00000d06 	br	100136e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100136ac:	e0bffd17 	ldw	r2,-12(fp)
100136b0:	10c00217 	ldw	r3,8(r2)
100136b4:	e0bfff17 	ldw	r2,-4(fp)
100136b8:	1887883a 	add	r3,r3,r2
100136bc:	e0bffd17 	ldw	r2,-12(fp)
100136c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100136c4:	e0bffd17 	ldw	r2,-12(fp)
100136c8:	10c00217 	ldw	r3,8(r2)
100136cc:	d0ab6617 	ldw	r2,-21096(gp)
100136d0:	1880032e 	bgeu	r3,r2,100136e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100136d4:	e0bffd17 	ldw	r2,-12(fp)
100136d8:	00c00044 	movi	r3,1
100136dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100136e0:	e0bffe17 	ldw	r2,-8(fp)
100136e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100136e8:	e0fffd17 	ldw	r3,-12(fp)
100136ec:	d0a01104 	addi	r2,gp,-32700
100136f0:	18bfcf1e 	bne	r3,r2,10013630 <__alt_data_end+0xf8013630>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100136f4:	0001883a 	nop
}
100136f8:	0001883a 	nop
100136fc:	e037883a 	mov	sp,fp
10013700:	dfc00117 	ldw	ra,4(sp)
10013704:	df000017 	ldw	fp,0(sp)
10013708:	dec00204 	addi	sp,sp,8
1001370c:	f800283a 	ret

10013710 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013710:	deffff04 	addi	sp,sp,-4
10013714:	df000015 	stw	fp,0(sp)
10013718:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1001371c:	000170fa 	wrctl	ienable,zero
}
10013720:	0001883a 	nop
10013724:	e037883a 	mov	sp,fp
10013728:	df000017 	ldw	fp,0(sp)
1001372c:	dec00104 	addi	sp,sp,4
10013730:	f800283a 	ret

10013734 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013734:	defffa04 	addi	sp,sp,-24
10013738:	dfc00515 	stw	ra,20(sp)
1001373c:	df000415 	stw	fp,16(sp)
10013740:	df000404 	addi	fp,sp,16
10013744:	e13ffe15 	stw	r4,-8(fp)
10013748:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001374c:	e0bfff17 	ldw	r2,-4(fp)
10013750:	10800017 	ldw	r2,0(r2)
10013754:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013758:	e13ffe17 	ldw	r4,-8(fp)
1001375c:	00047c80 	call	100047c8 <strlen>
10013760:	10800044 	addi	r2,r2,1
10013764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013768:	00000d06 	br	100137a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001376c:	e0bffc17 	ldw	r2,-16(fp)
10013770:	10800217 	ldw	r2,8(r2)
10013774:	e0fffd17 	ldw	r3,-12(fp)
10013778:	180d883a 	mov	r6,r3
1001377c:	e17ffe17 	ldw	r5,-8(fp)
10013780:	1009883a 	mov	r4,r2
10013784:	0013a780 	call	10013a78 <memcmp>
10013788:	1000021e 	bne	r2,zero,10013794 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001378c:	e0bffc17 	ldw	r2,-16(fp)
10013790:	00000706 	br	100137b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013794:	e0bffc17 	ldw	r2,-16(fp)
10013798:	10800017 	ldw	r2,0(r2)
1001379c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100137a0:	e0fffc17 	ldw	r3,-16(fp)
100137a4:	e0bfff17 	ldw	r2,-4(fp)
100137a8:	18bff01e 	bne	r3,r2,1001376c <__alt_data_end+0xf801376c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100137ac:	0005883a 	mov	r2,zero
}
100137b0:	e037883a 	mov	sp,fp
100137b4:	dfc00117 	ldw	ra,4(sp)
100137b8:	df000017 	ldw	fp,0(sp)
100137bc:	dec00204 	addi	sp,sp,8
100137c0:	f800283a 	ret

100137c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100137c4:	defffb04 	addi	sp,sp,-20
100137c8:	dfc00415 	stw	ra,16(sp)
100137cc:	df000315 	stw	fp,12(sp)
100137d0:	df000304 	addi	fp,sp,12
100137d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100137d8:	d0a00917 	ldw	r2,-32732(gp)
100137dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100137e0:	00003106 	br	100138a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100137e4:	e0bffd17 	ldw	r2,-12(fp)
100137e8:	10800217 	ldw	r2,8(r2)
100137ec:	1009883a 	mov	r4,r2
100137f0:	00047c80 	call	100047c8 <strlen>
100137f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100137f8:	e0bffd17 	ldw	r2,-12(fp)
100137fc:	10c00217 	ldw	r3,8(r2)
10013800:	e0bffe17 	ldw	r2,-8(fp)
10013804:	10bfffc4 	addi	r2,r2,-1
10013808:	1885883a 	add	r2,r3,r2
1001380c:	10800003 	ldbu	r2,0(r2)
10013810:	10803fcc 	andi	r2,r2,255
10013814:	1080201c 	xori	r2,r2,128
10013818:	10bfe004 	addi	r2,r2,-128
1001381c:	10800bd8 	cmpnei	r2,r2,47
10013820:	1000031e 	bne	r2,zero,10013830 <alt_find_file+0x6c>
    {
      len -= 1;
10013824:	e0bffe17 	ldw	r2,-8(fp)
10013828:	10bfffc4 	addi	r2,r2,-1
1001382c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013830:	e0bffe17 	ldw	r2,-8(fp)
10013834:	e0ffff17 	ldw	r3,-4(fp)
10013838:	1885883a 	add	r2,r3,r2
1001383c:	10800003 	ldbu	r2,0(r2)
10013840:	10803fcc 	andi	r2,r2,255
10013844:	1080201c 	xori	r2,r2,128
10013848:	10bfe004 	addi	r2,r2,-128
1001384c:	10800be0 	cmpeqi	r2,r2,47
10013850:	1000081e 	bne	r2,zero,10013874 <alt_find_file+0xb0>
10013854:	e0bffe17 	ldw	r2,-8(fp)
10013858:	e0ffff17 	ldw	r3,-4(fp)
1001385c:	1885883a 	add	r2,r3,r2
10013860:	10800003 	ldbu	r2,0(r2)
10013864:	10803fcc 	andi	r2,r2,255
10013868:	1080201c 	xori	r2,r2,128
1001386c:	10bfe004 	addi	r2,r2,-128
10013870:	10000a1e 	bne	r2,zero,1001389c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013874:	e0bffd17 	ldw	r2,-12(fp)
10013878:	10800217 	ldw	r2,8(r2)
1001387c:	e0fffe17 	ldw	r3,-8(fp)
10013880:	180d883a 	mov	r6,r3
10013884:	e17fff17 	ldw	r5,-4(fp)
10013888:	1009883a 	mov	r4,r2
1001388c:	0013a780 	call	10013a78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013890:	1000021e 	bne	r2,zero,1001389c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013894:	e0bffd17 	ldw	r2,-12(fp)
10013898:	00000706 	br	100138b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1001389c:	e0bffd17 	ldw	r2,-12(fp)
100138a0:	10800017 	ldw	r2,0(r2)
100138a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100138a8:	e0fffd17 	ldw	r3,-12(fp)
100138ac:	d0a00904 	addi	r2,gp,-32732
100138b0:	18bfcc1e 	bne	r3,r2,100137e4 <__alt_data_end+0xf80137e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100138b4:	0005883a 	mov	r2,zero
}
100138b8:	e037883a 	mov	sp,fp
100138bc:	dfc00117 	ldw	ra,4(sp)
100138c0:	df000017 	ldw	fp,0(sp)
100138c4:	dec00204 	addi	sp,sp,8
100138c8:	f800283a 	ret

100138cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100138cc:	defffa04 	addi	sp,sp,-24
100138d0:	dfc00515 	stw	ra,20(sp)
100138d4:	df000415 	stw	fp,16(sp)
100138d8:	dc000315 	stw	r16,12(sp)
100138dc:	df000404 	addi	fp,sp,16
100138e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100138e4:	00bffa04 	movi	r2,-24
100138e8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100138ec:	e03ffc15 	stw	zero,-16(fp)
100138f0:	00001d06 	br	10013968 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100138f4:	04040074 	movhi	r16,4097
100138f8:	84191e04 	addi	r16,r16,25720
100138fc:	e0bffc17 	ldw	r2,-16(fp)
10013900:	01400304 	movi	r5,12
10013904:	1009883a 	mov	r4,r2
10013908:	00046600 	call	10004660 <__mulsi3>
1001390c:	8085883a 	add	r2,r16,r2
10013910:	10800017 	ldw	r2,0(r2)
10013914:	1000111e 	bne	r2,zero,1001395c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013918:	04040074 	movhi	r16,4097
1001391c:	84191e04 	addi	r16,r16,25720
10013920:	e0bffc17 	ldw	r2,-16(fp)
10013924:	01400304 	movi	r5,12
10013928:	1009883a 	mov	r4,r2
1001392c:	00046600 	call	10004660 <__mulsi3>
10013930:	8085883a 	add	r2,r16,r2
10013934:	e0fffe17 	ldw	r3,-8(fp)
10013938:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1001393c:	d0e00d17 	ldw	r3,-32716(gp)
10013940:	e0bffc17 	ldw	r2,-16(fp)
10013944:	1880020e 	bge	r3,r2,10013950 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10013948:	e0bffc17 	ldw	r2,-16(fp)
1001394c:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
10013950:	e0bffc17 	ldw	r2,-16(fp)
10013954:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10013958:	00000606 	br	10013974 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001395c:	e0bffc17 	ldw	r2,-16(fp)
10013960:	10800044 	addi	r2,r2,1
10013964:	e0bffc15 	stw	r2,-16(fp)
10013968:	e0bffc17 	ldw	r2,-16(fp)
1001396c:	10800810 	cmplti	r2,r2,32
10013970:	103fe01e 	bne	r2,zero,100138f4 <__alt_data_end+0xf80138f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10013974:	e0bffd17 	ldw	r2,-12(fp)
}
10013978:	e6ffff04 	addi	sp,fp,-4
1001397c:	dfc00217 	ldw	ra,8(sp)
10013980:	df000117 	ldw	fp,4(sp)
10013984:	dc000017 	ldw	r16,0(sp)
10013988:	dec00304 	addi	sp,sp,12
1001398c:	f800283a 	ret

10013990 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013990:	defffe04 	addi	sp,sp,-8
10013994:	df000115 	stw	fp,4(sp)
10013998:	df000104 	addi	fp,sp,4
1001399c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
100139a0:	e0bfff17 	ldw	r2,-4(fp)
100139a4:	10bffe84 	addi	r2,r2,-6
100139a8:	10c00428 	cmpgeui	r3,r2,16
100139ac:	18001a1e 	bne	r3,zero,10013a18 <alt_exception_cause_generated_bad_addr+0x88>
100139b0:	100690ba 	slli	r3,r2,2
100139b4:	00840074 	movhi	r2,4097
100139b8:	108e7204 	addi	r2,r2,14792
100139bc:	1885883a 	add	r2,r3,r2
100139c0:	10800017 	ldw	r2,0(r2)
100139c4:	1000683a 	jmp	r2
100139c8:	10013a08 	cmpgei	zero,r2,1256
100139cc:	10013a08 	cmpgei	zero,r2,1256
100139d0:	10013a18 	cmpnei	zero,r2,1256
100139d4:	10013a18 	cmpnei	zero,r2,1256
100139d8:	10013a18 	cmpnei	zero,r2,1256
100139dc:	10013a08 	cmpgei	zero,r2,1256
100139e0:	10013a10 	cmplti	zero,r2,1256
100139e4:	10013a18 	cmpnei	zero,r2,1256
100139e8:	10013a08 	cmpgei	zero,r2,1256
100139ec:	10013a08 	cmpgei	zero,r2,1256
100139f0:	10013a18 	cmpnei	zero,r2,1256
100139f4:	10013a08 	cmpgei	zero,r2,1256
100139f8:	10013a10 	cmplti	zero,r2,1256
100139fc:	10013a18 	cmpnei	zero,r2,1256
10013a00:	10013a18 	cmpnei	zero,r2,1256
10013a04:	10013a08 	cmpgei	zero,r2,1256
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013a08:	00800044 	movi	r2,1
10013a0c:	00000306 	br	10013a1c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013a10:	0005883a 	mov	r2,zero
10013a14:	00000106 	br	10013a1c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013a18:	0005883a 	mov	r2,zero
  }
}
10013a1c:	e037883a 	mov	sp,fp
10013a20:	df000017 	ldw	fp,0(sp)
10013a24:	dec00104 	addi	sp,sp,4
10013a28:	f800283a 	ret

10013a2c <atexit>:
10013a2c:	200b883a 	mov	r5,r4
10013a30:	000f883a 	mov	r7,zero
10013a34:	000d883a 	mov	r6,zero
10013a38:	0009883a 	mov	r4,zero
10013a3c:	0013af41 	jmpi	10013af4 <__register_exitproc>

10013a40 <exit>:
10013a40:	defffe04 	addi	sp,sp,-8
10013a44:	000b883a 	mov	r5,zero
10013a48:	dc000015 	stw	r16,0(sp)
10013a4c:	dfc00115 	stw	ra,4(sp)
10013a50:	2021883a 	mov	r16,r4
10013a54:	0013c0c0 	call	10013c0c <__call_exitprocs>
10013a58:	00840074 	movhi	r2,4097
10013a5c:	109d9904 	addi	r2,r2,30308
10013a60:	11000017 	ldw	r4,0(r2)
10013a64:	20800f17 	ldw	r2,60(r4)
10013a68:	10000126 	beq	r2,zero,10013a70 <exit+0x30>
10013a6c:	103ee83a 	callr	r2
10013a70:	8009883a 	mov	r4,r16
10013a74:	0013d8c0 	call	10013d8c <_exit>

10013a78 <memcmp>:
10013a78:	01c000c4 	movi	r7,3
10013a7c:	3980192e 	bgeu	r7,r6,10013ae4 <memcmp+0x6c>
10013a80:	2144b03a 	or	r2,r4,r5
10013a84:	11c4703a 	and	r2,r2,r7
10013a88:	10000f26 	beq	r2,zero,10013ac8 <memcmp+0x50>
10013a8c:	20800003 	ldbu	r2,0(r4)
10013a90:	28c00003 	ldbu	r3,0(r5)
10013a94:	10c0151e 	bne	r2,r3,10013aec <memcmp+0x74>
10013a98:	31bfff84 	addi	r6,r6,-2
10013a9c:	01ffffc4 	movi	r7,-1
10013aa0:	00000406 	br	10013ab4 <memcmp+0x3c>
10013aa4:	20800003 	ldbu	r2,0(r4)
10013aa8:	28c00003 	ldbu	r3,0(r5)
10013aac:	31bfffc4 	addi	r6,r6,-1
10013ab0:	10c00e1e 	bne	r2,r3,10013aec <memcmp+0x74>
10013ab4:	21000044 	addi	r4,r4,1
10013ab8:	29400044 	addi	r5,r5,1
10013abc:	31fff91e 	bne	r6,r7,10013aa4 <__alt_data_end+0xf8013aa4>
10013ac0:	0005883a 	mov	r2,zero
10013ac4:	f800283a 	ret
10013ac8:	20c00017 	ldw	r3,0(r4)
10013acc:	28800017 	ldw	r2,0(r5)
10013ad0:	18bfee1e 	bne	r3,r2,10013a8c <__alt_data_end+0xf8013a8c>
10013ad4:	31bfff04 	addi	r6,r6,-4
10013ad8:	21000104 	addi	r4,r4,4
10013adc:	29400104 	addi	r5,r5,4
10013ae0:	39bff936 	bltu	r7,r6,10013ac8 <__alt_data_end+0xf8013ac8>
10013ae4:	303fe91e 	bne	r6,zero,10013a8c <__alt_data_end+0xf8013a8c>
10013ae8:	003ff506 	br	10013ac0 <__alt_data_end+0xf8013ac0>
10013aec:	10c5c83a 	sub	r2,r2,r3
10013af0:	f800283a 	ret

10013af4 <__register_exitproc>:
10013af4:	defffa04 	addi	sp,sp,-24
10013af8:	dc000315 	stw	r16,12(sp)
10013afc:	04040074 	movhi	r16,4097
10013b00:	841d9904 	addi	r16,r16,30308
10013b04:	80c00017 	ldw	r3,0(r16)
10013b08:	dc400415 	stw	r17,16(sp)
10013b0c:	dfc00515 	stw	ra,20(sp)
10013b10:	18805217 	ldw	r2,328(r3)
10013b14:	2023883a 	mov	r17,r4
10013b18:	10003726 	beq	r2,zero,10013bf8 <__register_exitproc+0x104>
10013b1c:	10c00117 	ldw	r3,4(r2)
10013b20:	010007c4 	movi	r4,31
10013b24:	20c00e16 	blt	r4,r3,10013b60 <__register_exitproc+0x6c>
10013b28:	1a000044 	addi	r8,r3,1
10013b2c:	8800221e 	bne	r17,zero,10013bb8 <__register_exitproc+0xc4>
10013b30:	18c00084 	addi	r3,r3,2
10013b34:	18c7883a 	add	r3,r3,r3
10013b38:	18c7883a 	add	r3,r3,r3
10013b3c:	12000115 	stw	r8,4(r2)
10013b40:	10c7883a 	add	r3,r2,r3
10013b44:	19400015 	stw	r5,0(r3)
10013b48:	0005883a 	mov	r2,zero
10013b4c:	dfc00517 	ldw	ra,20(sp)
10013b50:	dc400417 	ldw	r17,16(sp)
10013b54:	dc000317 	ldw	r16,12(sp)
10013b58:	dec00604 	addi	sp,sp,24
10013b5c:	f800283a 	ret
10013b60:	00800034 	movhi	r2,0
10013b64:	10800004 	addi	r2,r2,0
10013b68:	10002626 	beq	r2,zero,10013c04 <__register_exitproc+0x110>
10013b6c:	01006404 	movi	r4,400
10013b70:	d9400015 	stw	r5,0(sp)
10013b74:	d9800115 	stw	r6,4(sp)
10013b78:	d9c00215 	stw	r7,8(sp)
10013b7c:	00000000 	call	10000000 <__alt_mem_sdram>
10013b80:	d9400017 	ldw	r5,0(sp)
10013b84:	d9800117 	ldw	r6,4(sp)
10013b88:	d9c00217 	ldw	r7,8(sp)
10013b8c:	10001d26 	beq	r2,zero,10013c04 <__register_exitproc+0x110>
10013b90:	81000017 	ldw	r4,0(r16)
10013b94:	10000115 	stw	zero,4(r2)
10013b98:	02000044 	movi	r8,1
10013b9c:	22405217 	ldw	r9,328(r4)
10013ba0:	0007883a 	mov	r3,zero
10013ba4:	12400015 	stw	r9,0(r2)
10013ba8:	20805215 	stw	r2,328(r4)
10013bac:	10006215 	stw	zero,392(r2)
10013bb0:	10006315 	stw	zero,396(r2)
10013bb4:	883fde26 	beq	r17,zero,10013b30 <__alt_data_end+0xf8013b30>
10013bb8:	18c9883a 	add	r4,r3,r3
10013bbc:	2109883a 	add	r4,r4,r4
10013bc0:	1109883a 	add	r4,r2,r4
10013bc4:	21802215 	stw	r6,136(r4)
10013bc8:	01800044 	movi	r6,1
10013bcc:	12406217 	ldw	r9,392(r2)
10013bd0:	30cc983a 	sll	r6,r6,r3
10013bd4:	4992b03a 	or	r9,r9,r6
10013bd8:	12406215 	stw	r9,392(r2)
10013bdc:	21c04215 	stw	r7,264(r4)
10013be0:	01000084 	movi	r4,2
10013be4:	893fd21e 	bne	r17,r4,10013b30 <__alt_data_end+0xf8013b30>
10013be8:	11006317 	ldw	r4,396(r2)
10013bec:	218cb03a 	or	r6,r4,r6
10013bf0:	11806315 	stw	r6,396(r2)
10013bf4:	003fce06 	br	10013b30 <__alt_data_end+0xf8013b30>
10013bf8:	18805304 	addi	r2,r3,332
10013bfc:	18805215 	stw	r2,328(r3)
10013c00:	003fc606 	br	10013b1c <__alt_data_end+0xf8013b1c>
10013c04:	00bfffc4 	movi	r2,-1
10013c08:	003fd006 	br	10013b4c <__alt_data_end+0xf8013b4c>

10013c0c <__call_exitprocs>:
10013c0c:	defff504 	addi	sp,sp,-44
10013c10:	df000915 	stw	fp,36(sp)
10013c14:	dd400615 	stw	r21,24(sp)
10013c18:	dc800315 	stw	r18,12(sp)
10013c1c:	dfc00a15 	stw	ra,40(sp)
10013c20:	ddc00815 	stw	r23,32(sp)
10013c24:	dd800715 	stw	r22,28(sp)
10013c28:	dd000515 	stw	r20,20(sp)
10013c2c:	dcc00415 	stw	r19,16(sp)
10013c30:	dc400215 	stw	r17,8(sp)
10013c34:	dc000115 	stw	r16,4(sp)
10013c38:	d9000015 	stw	r4,0(sp)
10013c3c:	2839883a 	mov	fp,r5
10013c40:	04800044 	movi	r18,1
10013c44:	057fffc4 	movi	r21,-1
10013c48:	00840074 	movhi	r2,4097
10013c4c:	109d9904 	addi	r2,r2,30308
10013c50:	12000017 	ldw	r8,0(r2)
10013c54:	45005217 	ldw	r20,328(r8)
10013c58:	44c05204 	addi	r19,r8,328
10013c5c:	a0001c26 	beq	r20,zero,10013cd0 <__call_exitprocs+0xc4>
10013c60:	a0800117 	ldw	r2,4(r20)
10013c64:	15ffffc4 	addi	r23,r2,-1
10013c68:	b8000d16 	blt	r23,zero,10013ca0 <__call_exitprocs+0x94>
10013c6c:	14000044 	addi	r16,r2,1
10013c70:	8421883a 	add	r16,r16,r16
10013c74:	8421883a 	add	r16,r16,r16
10013c78:	84402004 	addi	r17,r16,128
10013c7c:	a463883a 	add	r17,r20,r17
10013c80:	a421883a 	add	r16,r20,r16
10013c84:	e0001e26 	beq	fp,zero,10013d00 <__call_exitprocs+0xf4>
10013c88:	80804017 	ldw	r2,256(r16)
10013c8c:	e0801c26 	beq	fp,r2,10013d00 <__call_exitprocs+0xf4>
10013c90:	bdffffc4 	addi	r23,r23,-1
10013c94:	843fff04 	addi	r16,r16,-4
10013c98:	8c7fff04 	addi	r17,r17,-4
10013c9c:	bd7ff91e 	bne	r23,r21,10013c84 <__alt_data_end+0xf8013c84>
10013ca0:	00800034 	movhi	r2,0
10013ca4:	10800004 	addi	r2,r2,0
10013ca8:	10000926 	beq	r2,zero,10013cd0 <__call_exitprocs+0xc4>
10013cac:	a0800117 	ldw	r2,4(r20)
10013cb0:	1000301e 	bne	r2,zero,10013d74 <__call_exitprocs+0x168>
10013cb4:	a0800017 	ldw	r2,0(r20)
10013cb8:	10003226 	beq	r2,zero,10013d84 <__call_exitprocs+0x178>
10013cbc:	a009883a 	mov	r4,r20
10013cc0:	98800015 	stw	r2,0(r19)
10013cc4:	00000000 	call	10000000 <__alt_mem_sdram>
10013cc8:	9d000017 	ldw	r20,0(r19)
10013ccc:	a03fe41e 	bne	r20,zero,10013c60 <__alt_data_end+0xf8013c60>
10013cd0:	dfc00a17 	ldw	ra,40(sp)
10013cd4:	df000917 	ldw	fp,36(sp)
10013cd8:	ddc00817 	ldw	r23,32(sp)
10013cdc:	dd800717 	ldw	r22,28(sp)
10013ce0:	dd400617 	ldw	r21,24(sp)
10013ce4:	dd000517 	ldw	r20,20(sp)
10013ce8:	dcc00417 	ldw	r19,16(sp)
10013cec:	dc800317 	ldw	r18,12(sp)
10013cf0:	dc400217 	ldw	r17,8(sp)
10013cf4:	dc000117 	ldw	r16,4(sp)
10013cf8:	dec00b04 	addi	sp,sp,44
10013cfc:	f800283a 	ret
10013d00:	a0800117 	ldw	r2,4(r20)
10013d04:	80c00017 	ldw	r3,0(r16)
10013d08:	10bfffc4 	addi	r2,r2,-1
10013d0c:	15c01426 	beq	r2,r23,10013d60 <__call_exitprocs+0x154>
10013d10:	80000015 	stw	zero,0(r16)
10013d14:	183fde26 	beq	r3,zero,10013c90 <__alt_data_end+0xf8013c90>
10013d18:	95c8983a 	sll	r4,r18,r23
10013d1c:	a0806217 	ldw	r2,392(r20)
10013d20:	a5800117 	ldw	r22,4(r20)
10013d24:	2084703a 	and	r2,r4,r2
10013d28:	10000b26 	beq	r2,zero,10013d58 <__call_exitprocs+0x14c>
10013d2c:	a0806317 	ldw	r2,396(r20)
10013d30:	2088703a 	and	r4,r4,r2
10013d34:	20000c1e 	bne	r4,zero,10013d68 <__call_exitprocs+0x15c>
10013d38:	89400017 	ldw	r5,0(r17)
10013d3c:	d9000017 	ldw	r4,0(sp)
10013d40:	183ee83a 	callr	r3
10013d44:	a0800117 	ldw	r2,4(r20)
10013d48:	15bfbf1e 	bne	r2,r22,10013c48 <__alt_data_end+0xf8013c48>
10013d4c:	98800017 	ldw	r2,0(r19)
10013d50:	153fcf26 	beq	r2,r20,10013c90 <__alt_data_end+0xf8013c90>
10013d54:	003fbc06 	br	10013c48 <__alt_data_end+0xf8013c48>
10013d58:	183ee83a 	callr	r3
10013d5c:	003ff906 	br	10013d44 <__alt_data_end+0xf8013d44>
10013d60:	a5c00115 	stw	r23,4(r20)
10013d64:	003feb06 	br	10013d14 <__alt_data_end+0xf8013d14>
10013d68:	89000017 	ldw	r4,0(r17)
10013d6c:	183ee83a 	callr	r3
10013d70:	003ff406 	br	10013d44 <__alt_data_end+0xf8013d44>
10013d74:	a0800017 	ldw	r2,0(r20)
10013d78:	a027883a 	mov	r19,r20
10013d7c:	1029883a 	mov	r20,r2
10013d80:	003fb606 	br	10013c5c <__alt_data_end+0xf8013c5c>
10013d84:	0005883a 	mov	r2,zero
10013d88:	003ffb06 	br	10013d78 <__alt_data_end+0xf8013d78>

10013d8c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10013d8c:	defffd04 	addi	sp,sp,-12
10013d90:	df000215 	stw	fp,8(sp)
10013d94:	df000204 	addi	fp,sp,8
10013d98:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10013d9c:	0001883a 	nop
10013da0:	e0bfff17 	ldw	r2,-4(fp)
10013da4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10013da8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10013dac:	10000226 	beq	r2,zero,10013db8 <_exit+0x2c>
    ALT_SIM_FAIL();
10013db0:	002af070 	cmpltui	zero,zero,43969
10013db4:	00000106 	br	10013dbc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10013db8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10013dbc:	003fff06 	br	10013dbc <__alt_data_end+0xf8013dbc>
