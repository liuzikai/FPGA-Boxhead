
boxhead.elf:     file format elf32-littlenios2
boxhead.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000126e8 memsz 0x000126e8 flags r-x
    LOAD off    0x00013708 vaddr 0x10012708 paddr 0x100141f8 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00015ce8 vaddr 0x10015ce8 paddr 0x10015ce8 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011a1c  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000abc  10011c4c  10011c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  10012708  100141f8  00013708  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  10015ce8  10015ce8  00015ce8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000151f8  2**0
                  CONTENTS
  7 .sdram        00000000  10015e60  10015e60  000151f8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000151f8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f58  00000000  00000000  00015220  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000238ef  00000000  00000000  00016178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000923a  00000000  00000000  00039a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b93d  00000000  00000000  00042ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000248c  00000000  00000000  0004e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003af4  00000000  00000000  00050a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00054560  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006bdcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006be10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00070c8a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00070c8d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070c99  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00070c9a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00070c9b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00070c9f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00070ca3  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00070ca7  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00070cb2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00070cbd  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00070cc8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000012  00000000  00000000  00070cd3  2**0
                  CONTENTS, READONLY
 30 .jdi          0000554d  00000000  00000000  00070ce5  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007d52e  00000000  00000000  00076232  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10011c4c l    d  .rodata	00000000 .rodata
10012708 l    d  .rwdata	00000000 .rwdata
10015ce8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015e60 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../boxhead_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 graphic_engine.c
10015ce8 l     O .bss	00000004 current_frame.1605
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001244e l     O .rodata	00000010 zeroes.4404
100049bc l     F .text	000000bc __sbprintf
1001245e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004bcc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006724 l     F .text	00000008 __fp_unlock
10006738 l     F .text	0000019c __sinit.part.1
100068d4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10012708 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012b4c l     O .rwdata	00000020 lc_ctype_charset
10012b2c l     O .rwdata	00000020 lc_message_charset
10012b6c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10012490 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009da8 l     F .text	000000fc __sprint_r.part.0
100125b4 l     O .rodata	00000010 zeroes.4349
1000b3e4 l     F .text	000000bc __sbprintf
100125c4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f42c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f540 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f56c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f748 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f834 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fa10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100141e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fcb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fdf0 l     F .text	00000034 alt_dev_reg
10013154 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100100cc l     F .text	0000020c altera_avalon_jtag_uart_irq
100102d8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010bb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011014 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10011174 l     F .text	0000003c alt_get_errno
100111b0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015d34 g     O .bss	00000004 alt_instruction_exception_handler
100093ec g     F .text	00000074 _mprec_log10
100094d8 g     F .text	0000008c __any_on
1000b998 g     F .text	00000054 _isatty_r
1001249c g     O .rodata	00000028 __mprec_tinytens
1000f94c g     F .text	0000007c alt_main
10002558 g     F .text	000000c0 _puts_r
10015d60 g     O .bss	00000100 alt_irq
1000b9ec g     F .text	00000060 _lseek_r
100141f8 g       *ABS*	00000000 __flash_rwdata_start
1000de04 g     F .text	00000088 .hidden __eqdf2
10015e60 g       *ABS*	00000000 __alt_heap_start
1000251c g     F .text	0000003c printf
1000bc04 g     F .text	0000009c _wcrtomb_r
10015cf4 g     O .bss	00000002 usb_ctl_val
10009c68 g     F .text	0000005c __sseek
10006a84 g     F .text	00000010 __sinit
1000baac g     F .text	00000140 __swbuf_r
10007558 g     F .text	0000007c _setlocale_r
100068dc g     F .text	00000078 __sfmoreglue
1000f9ec g     F .text	00000024 __malloc_unlock
10008228 g     F .text	0000015c memmove
10006a6c g     F .text	00000018 _cleanup
100084ac g     F .text	000000a8 _Balloc
1000de8c g     F .text	000000dc .hidden __gtdf2
1001159c g     F .text	00000024 altera_nios2_gen2_irq_init
10002424 g     F .text	00000080 usb_print_mem
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b93c g     F .text	0000005c _fstat_r
10015d18 g     O .bss	00000004 errno
10009be4 g     F .text	00000008 __seofread
10015d20 g     O .bss	00000004 alt_argv
1001c1b4 g       *ABS*	00000000 _gp
1000fc84 g     F .text	00000030 usleep
100003cc g     F .text	00000088 io_init
10012fd4 g     O .rwdata	00000180 alt_fd_list
100115c0 g     F .text	00000090 alt_find_dev
100080e0 g     F .text	00000148 memcpy
100016c8 g     F .text	000001d8 usb_get_device_desc2
1000672c g     F .text	0000000c _cleanup_r
1000f244 g     F .text	000000dc .hidden __floatsidf
100110f8 g     F .text	0000007c alt_io_redirect
10015cf6 g     O .bss	00000001 data_size
1000df68 g     F .text	000000f4 .hidden __ltdf2
10011c4c g       *ABS*	00000000 __DTOR_END__
10002618 g     F .text	00000014 puts
1001181c g     F .text	0000009c alt_exception_cause_generated_bad_addr
10009ac8 g     F .text	00000074 __fpclassifyd
10009348 g     F .text	000000a4 __ratio
1000b3c8 g     F .text	0000001c __vfiprintf_internal
100104d0 g     F .text	0000021c altera_avalon_jtag_uart_read
100024ec g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000caa4 g     F .text	00000064 .hidden __udivsi3
1000052c g     F .text	00000b00 keyboard_init
1000f69c g     F .text	000000ac isatty
100124ec g     O .rodata	000000c8 __mprec_tens
100075d4 g     F .text	0000000c __locale_charset
10015d14 g     O .bss	00000004 __malloc_top_pad
100141c0 g     O .rwdata	00000004 __mb_cur_max
10007604 g     F .text	0000000c _localeconv_r
100088e0 g     F .text	0000003c __i2b
10006f08 g     F .text	000004c8 __sfvwrite_r
10015cf8 g     O .bss	00000002 intStat
10009b3c g     F .text	00000054 _sbrk_r
100013cc g     F .text	000000b4 usb_soft_reset
1000ba4c g     F .text	00000060 _read_r
100141e0 g     O .rwdata	00000004 alt_max_fd
1000b630 g     F .text	000000f0 _fclose_r
100066f4 g     F .text	00000030 fflush
10015d10 g     O .bss	00000004 __malloc_max_sbrked_mem
100023a4 g     F .text	00000080 usb_get_retry_cnt
1000cb88 g     F .text	000008ac .hidden __adddf3
100090f0 g     F .text	0000010c __b2d
1000c3e8 g     F .text	000005c4 .hidden __umoddi3
1000f870 g     F .text	000000dc lseek
100141b8 g     O .rwdata	00000004 _global_impure_ptr
10009564 g     F .text	00000564 _realloc_r
10015e60 g       *ABS*	00000000 __bss_end
10010f24 g     F .text	000000f0 alt_iic_isr_register
10011494 g     F .text	00000108 alt_tick
1000bdec g     F .text	000005fc .hidden __udivdi3
1000b898 g     F .text	00000024 _fputwc_r
100124c4 g     O .rodata	00000028 __mprec_bigtens
100086c4 g     F .text	00000104 __s2b
1000f320 g     F .text	000000a8 .hidden __floatunsidf
10008e30 g     F .text	00000060 __mcmp
10006aa4 g     F .text	00000018 __fp_lock_all
10010ed8 g     F .text	0000004c alt_ic_irq_enabled
100113f8 g     F .text	0000009c alt_alarm_stop
10015d28 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10012fac g     O .rwdata	00000028 alt_dev_null
10010b94 g     F .text	00000020 alt_dcache_flush_all
100087c8 g     F .text	00000068 __hi0bits
1000f1c4 g     F .text	00000080 .hidden __fixdfsi
100141f8 g       *ABS*	00000000 __ram_rwdata_end
100141d8 g     O .rwdata	00000008 alt_dev_list
1000fcf0 g     F .text	00000100 write
100141b4 g     O .rwdata	00000004 ENGINE_REGS
10012708 g       *ABS*	00000000 __ram_rodata_end
1000f5a8 g     F .text	000000b8 fstat
10000454 g     F .text	00000070 io_write
1000df68 g     F .text	000000f4 .hidden __ledf2
10008ba8 g     F .text	00000140 __pow5mult
10009ebc g     F .text	0000150c ___vfiprintf_internal_r
10015d08 g     O .bss	00000004 __nlocale_changed
1000cb08 g     F .text	00000058 .hidden __umodsi3
10015e60 g       *ABS*	00000000 end
10015cec g     O .bss	00000002 ctl_reg
1001000c g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10011c4c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f3c8 g     F .text	00000064 .hidden __clzsi2
100106ec g     F .text	00000224 altera_avalon_jtag_uart_write
10000388 g     F .text	00000044 wait_for_next_frame
10006a94 g     F .text	00000004 __sfp_lock_acquire
10007ffc g     F .text	000000e4 memchr
100026c4 g     F .text	000022dc ___vfprintf_internal_r
10006bf8 g     F .text	00000310 _free_r
100075e0 g     F .text	00000010 __locale_mb_cur_max
10011a98 g     F .text	00000180 __call_exitprocs
10015d04 g     O .bss	00000004 __mlocale_changed
100141c4 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10001298 g     F .text	00000098 keyboard_hot_plugged
10015d2c g     O .bss	00000004 _alt_tick_rate
10008ce8 g     F .text	00000148 __lshift
10015d30 g     O .bss	00000004 _alt_nticks
1000fa4c g     F .text	00000104 read
1000fe5c g     F .text	0000004c alt_sys_init
10011980 g     F .text	00000118 __register_exitproc
1000891c g     F .text	0000028c __multiply
10010378 g     F .text	00000068 altera_avalon_jtag_uart_close
1000cb60 g     F .text	00000028 .hidden __mulsi3
10012708 g       *ABS*	00000000 __ram_rwdata_start
10011c4c g       *ABS*	00000000 __ram_rodata_start
10015d38 g     O .bss	00000028 __malloc_current_mallinfo
100091fc g     F .text	0000014c __d2b
1000fea8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011758 g     F .text	000000c4 alt_get_fd
10010a3c g     F .text	00000158 alt_busy_sleep
1000b500 g     F .text	00000054 _close_r
10011904 g     F .text	0000007c memcmp
1000ff68 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015e60 g       *ABS*	00000000 __alt_stack_base
1000ffb8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10001e98 g     F .text	00000148 usb_get_hid_desc
10004a78 g     F .text	00000154 __swsetup_r
1000d434 g     F .text	000009d0 .hidden __divdf3
10006954 g     F .text	00000118 __sfp
10009460 g     F .text	00000078 __copybits
10012ba4 g     O .rwdata	00000408 __malloc_av_
10006aa0 g     F .text	00000004 __sinit_lock_release
1000e05c g     F .text	0000086c .hidden __muldf3
10009b90 g     F .text	00000054 __sread
10011650 g     F .text	00000108 alt_find_file
10010bf0 g     F .text	000000a4 alt_dev_llist_insert
1000f9c8 g     F .text	00000024 __malloc_lock
1000fbd4 g     F .text	000000b0 sbrk
10006698 g     F .text	0000005c _fflush_r
1000b554 g     F .text	000000dc _calloc_r
10015cfa g     O .bss	00000001 hot_plug_count
10015ce8 g       *ABS*	00000000 __bss_start
10008384 g     F .text	00000128 memset
100024a4 g     F .text	00000048 main
10015d24 g     O .bss	00000004 alt_envp
10015d0c g     O .bss	00000004 __malloc_max_total_mem
1000ff08 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000bbec g     F .text	00000018 __swbuf
10009cc4 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b720 g     F .text	00000014 fclose
10004df4 g     F .text	00001688 _dtoa_r
100077f0 g     F .text	0000080c _malloc_r
1000bd60 g     F .text	00000030 __ascii_wctomb
100141e4 g     O .rwdata	00000004 alt_errno
100018a0 g     F .text	00000190 usb_get_config_desc1
100073d0 g     F .text	000000c4 _fwalk
1000c9ac g     F .text	00000084 .hidden __divsi3
10006ad4 g     F .text	00000124 _malloc_trim_r
10011c4c g       *ABS*	00000000 __CTOR_END__
1000102c g     F .text	0000026c keyboard_fetch
10009ccc g     F .text	000000dc strcmp
10001fe0 g     F .text	00000340 usb_get_report_desc
10011c4c g       *ABS*	00000000 __flash_rodata_start
10011c4c g       *ABS*	00000000 __DTOR_LIST__
1000de04 g     F .text	00000088 .hidden __nedf2
1000fe24 g     F .text	00000038 alt_irq_init
1000fb50 g     F .text	00000084 alt_release_fd
100125d4 g     O .rodata	00000100 .hidden __clz_tab
10015d00 g     O .bss	00000004 _PathLocale
100118b8 g     F .text	00000014 atexit
1000b4a0 g     F .text	00000060 _write_r
1000026c g     F .text	0000002c graphic_engine_reset
10007610 g     F .text	00000018 setlocale
100141bc g     O .rwdata	00000004 _impure_ptr
10002320 g     F .text	00000084 usb_wait_td_list_done
10015d1c g     O .bss	00000004 alt_argc
1000647c g     F .text	0000021c __sflush_r
10010cf4 g     F .text	00000060 _do_dtors
100075fc g     F .text	00000008 __locale_cjk_lang
10001a30 g     F .text	00000268 usb_get_config_desc2
100004c4 g     F .text	00000068 io_read
10000020 g       .exceptions	00000000 alt_irq_entry
1000908c g     F .text	00000064 __ulp
10006abc g     F .text	00000018 __fp_unlock_all
10015cf2 g     O .bss	00000001 toggle
100141d0 g     O .rwdata	00000008 alt_fs_list
10001d98 g     F .text	00000100 usb_class_request
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007628 g     F .text	0000000c localeconv
10010d74 g     F .text	00000050 alt_ic_isr_register
100141f8 g       *ABS*	00000000 _edata
10015e60 g       *ABS*	00000000 _end
1000b734 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100103e0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10015cfc g     O .bss	00000002 code
10010e4c g     F .text	0000008c alt_ic_irq_disable
10009bec g     F .text	0000007c __swrite
100141c8 g     O .rwdata	00000004 __malloc_trim_threshold
10001580 g     F .text	00000148 usb_get_device_desc1
100075f0 g     F .text	0000000c __locale_msgcharset
10015cf0 g     O .bss	00000002 fs_device
100118cc g     F .text	00000038 exit
10007494 g     F .text	000000c4 _fwalk_reent
10008e90 g     F .text	000001fc __mdiff
1000ca30 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006a98 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10001330 g     F .text	00000058 usb_write
10001480 g     F .text	00000100 usb_set_address
10000298 g     F .text	000000f0 draw
10011c18 g     F .text	00000034 _exit
10010910 g     F .text	0000012c alt_alarm_start
10007634 g     F .text	000001bc __smakebuf_r
1000262c g     F .text	00000098 strlen
1001129c g     F .text	0000015c open
1000de8c g     F .text	000000dc .hidden __gedf2
10001c98 g     F .text	00000100 usb_set_config
100141cc g     O .rwdata	00000004 __wctomb
10009ea4 g     F .text	00000018 __sprint_r
10010d54 g     F .text	00000020 alt_icache_flush_all
100141ec g     O .rwdata	00000004 alt_priority_mask
10010dc4 g     F .text	00000088 alt_ic_irq_enable
100049a0 g     F .text	0000001c __vfprintf_internal
1000bd90 g     F .text	0000005c _wctomb_r
10001388 g     F .text	00000044 usb_read
1000e8c8 g     F .text	000008fc .hidden __subdf3
10008830 g     F .text	000000b0 __lo0bits
100141f0 g     O .rwdata	00000008 alt_alarm_list
10010c94 g     F .text	00000060 _do_ctors
10015cee g     O .bss	00000002 no_device
1000bca0 g     F .text	000000c0 wcrtomb
1000f468 g     F .text	000000d8 close
1000f7b0 g     F .text	00000084 alt_load
1000b8bc g     F .text	00000080 fputwc
10006a9c g     F .text	00000004 __sinit_lock_acquire
1000857c g     F .text	00000148 __multadd
10008554 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10975804 	addi	r2,r2,23904
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10975804 	addi	r2,r2,23904
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6e017 	ldw	r2,-25728(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6e017 	ldw	r2,-25728(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6b06d14 	ori	gp,gp,49588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10973a14 	ori	r2,r2,23784

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18d79814 	ori	r3,r3,24160

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000f7b00 	call	1000f7b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000f94c0 	call	1000f94c <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <graphic_engine_reset>:

#include "system.h"

volatile unsigned int *ENGINE_REGS = (unsigned int *) (COPY_ENGINE_CORE_BASE);

void graphic_engine_reset() {
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	ENGINE_REGS[7] = 0;
10000278:	d0a00017 	ldw	r2,-32768(gp)
1000027c:	10800704 	addi	r2,r2,28
10000280:	10000015 	stw	zero,0(r2)
}
10000284:	0001883a 	nop
10000288:	e037883a 	mov	sp,fp
1000028c:	df000017 	ldw	fp,0(sp)
10000290:	dec00104 	addi	sp,sp,4
10000294:	f800283a 	ret

10000298 <draw>:

void draw(int start_x, int end_x, int start_y, int end_y, int src_offset, int palette, int flip_x) {
10000298:	defffa04 	addi	sp,sp,-24
1000029c:	dfc00515 	stw	ra,20(sp)
100002a0:	df000415 	stw	fp,16(sp)
100002a4:	df000404 	addi	fp,sp,16
100002a8:	e13ffc15 	stw	r4,-16(fp)
100002ac:	e17ffd15 	stw	r5,-12(fp)
100002b0:	e1bffe15 	stw	r6,-8(fp)
100002b4:	e1ffff15 	stw	r7,-4(fp)

    // Wait for copy engine to finish last task
	printf("Start waiting for graphic engine...\n");
100002b8:	01040074 	movhi	r4,4097
100002bc:	21071304 	addi	r4,r4,7244
100002c0:	00026180 	call	10002618 <puts>
    while (ENGINE_REGS[15] & 0x1 == 1) {}
100002c4:	0001883a 	nop
100002c8:	d0a00017 	ldw	r2,-32768(gp)
100002cc:	10800f04 	addi	r2,r2,60
100002d0:	10800017 	ldw	r2,0(r2)
100002d4:	1080004c 	andi	r2,r2,1
100002d8:	103ffb1e 	bne	r2,zero,100002c8 <__alt_data_end+0xf80002c8>
    printf("Graphic engine done!\n");
100002dc:	01040074 	movhi	r4,4097
100002e0:	21071c04 	addi	r4,r4,7280
100002e4:	00026180 	call	10002618 <puts>
    ENGINE_REGS[7] = 0;  // clear execute
100002e8:	d0a00017 	ldw	r2,-32768(gp)
100002ec:	10800704 	addi	r2,r2,28
100002f0:	10000015 	stw	zero,0(r2)

    ENGINE_REGS[0] = start_x;
100002f4:	d0a00017 	ldw	r2,-32768(gp)
100002f8:	e0fffc17 	ldw	r3,-16(fp)
100002fc:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[1] = end_x;
10000300:	d0a00017 	ldw	r2,-32768(gp)
10000304:	10800104 	addi	r2,r2,4
10000308:	e0fffd17 	ldw	r3,-12(fp)
1000030c:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[2] = start_y;
10000310:	d0a00017 	ldw	r2,-32768(gp)
10000314:	10800204 	addi	r2,r2,8
10000318:	e0fffe17 	ldw	r3,-8(fp)
1000031c:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[3] = end_y;
10000320:	d0a00017 	ldw	r2,-32768(gp)
10000324:	10800304 	addi	r2,r2,12
10000328:	e0ffff17 	ldw	r3,-4(fp)
1000032c:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[4] = src_offset;
10000330:	d0a00017 	ldw	r2,-32768(gp)
10000334:	10800404 	addi	r2,r2,16
10000338:	e0c00217 	ldw	r3,8(fp)
1000033c:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[5] = palette;
10000340:	d0a00017 	ldw	r2,-32768(gp)
10000344:	10800504 	addi	r2,r2,20
10000348:	e0c00317 	ldw	r3,12(fp)
1000034c:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[6] = flip_x;
10000350:	d0a00017 	ldw	r2,-32768(gp)
10000354:	10800604 	addi	r2,r2,24
10000358:	e0c00417 	ldw	r3,16(fp)
1000035c:	10c00015 	stw	r3,0(r2)

    // Execute
    ENGINE_REGS[7] = 1;
10000360:	d0a00017 	ldw	r2,-32768(gp)
10000364:	10800704 	addi	r2,r2,28
10000368:	00c00044 	movi	r3,1
1000036c:	10c00015 	stw	r3,0(r2)

    // Let the engine run and C program can do other things
}
10000370:	0001883a 	nop
10000374:	e037883a 	mov	sp,fp
10000378:	dfc00117 	ldw	ra,4(sp)
1000037c:	df000017 	ldw	fp,0(sp)
10000380:	dec00204 	addi	sp,sp,8
10000384:	f800283a 	ret

10000388 <wait_for_next_frame>:

void wait_for_next_frame() {
10000388:	deffff04 	addi	sp,sp,-4
1000038c:	df000015 	stw	fp,0(sp)
10000390:	d839883a 	mov	fp,sp

    static unsigned int current_frame = 0;

    // Wait for switch to next frame
    while (current_frame == ENGINE_REGS[14]) {}
10000394:	0001883a 	nop
10000398:	d0a00017 	ldw	r2,-32768(gp)
1000039c:	10800e04 	addi	r2,r2,56
100003a0:	10c00017 	ldw	r3,0(r2)
100003a4:	d0a6cd17 	ldw	r2,-25804(gp)
100003a8:	18bffb26 	beq	r3,r2,10000398 <__alt_data_end+0xf8000398>

    current_frame = ENGINE_REGS[14];
100003ac:	d0a00017 	ldw	r2,-32768(gp)
100003b0:	10800e17 	ldw	r2,56(r2)
100003b4:	d0a6cd15 	stw	r2,-25804(gp)
}
100003b8:	0001883a 	nop
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <io_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void io_init(void)
{
100003cc:	deffff04 	addi	sp,sp,-4
100003d0:	df000015 	stw	fp,0(sp)
100003d4:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100003d8:	00800804 	movi	r2,32
100003dc:	00c00044 	movi	r3,1
100003e0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003e4:	00800c04 	movi	r2,48
100003e8:	00c00044 	movi	r3,1
100003ec:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100003f0:	00802404 	movi	r2,144
100003f4:	00c00044 	movi	r3,1
100003f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100003fc:	00802004 	movi	r2,128
10000400:	00c00044 	movi	r3,1
10000404:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000408:	00802c04 	movi	r2,176
1000040c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000410:	00802804 	movi	r2,160
10000414:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10000418:	00800c04 	movi	r2,48
1000041c:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
10000420:	00800804 	movi	r2,32
10000424:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10000428:	00800804 	movi	r2,32
1000042c:	00c00044 	movi	r3,1
10000430:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000434:	00800c04 	movi	r2,48
10000438:	00c00044 	movi	r3,1
1000043c:	10c00005 	stb	r3,0(r2)
}
10000440:	0001883a 	nop
10000444:	e037883a 	mov	sp,fp
10000448:	df000017 	ldw	fp,0(sp)
1000044c:	dec00104 	addi	sp,sp,4
10000450:	f800283a 	ret

10000454 <io_write>:
 *
 * @note     None
 *
 ******************************************************************************/
void io_write(alt_u8 Address, alt_u16 Data)
{
10000454:	defffd04 	addi	sp,sp,-12
10000458:	df000215 	stw	fp,8(sp)
1000045c:	df000204 	addi	fp,sp,8
10000460:	2007883a 	mov	r3,r4
10000464:	2805883a 	mov	r2,r5
10000468:	e0fffe05 	stb	r3,-8(fp)
1000046c:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000470:	00802c04 	movi	r2,176
10000474:	e0fffe03 	ldbu	r3,-8(fp)
10000478:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
1000047c:	00800c04 	movi	r2,48
10000480:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000484:	00802004 	movi	r2,128
10000488:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
1000048c:	00802804 	movi	r2,160
10000490:	e0ffff0b 	ldhu	r3,-4(fp)
10000494:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10000498:	00802004 	movi	r2,128
1000049c:	00c00044 	movi	r3,1
100004a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100004a4:	00800c04 	movi	r2,48
100004a8:	00c00044 	movi	r3,1
100004ac:	10c00005 	stb	r3,0(r2)
}
100004b0:	0001883a 	nop
100004b4:	e037883a 	mov	sp,fp
100004b8:	df000017 	ldw	fp,0(sp)
100004bc:	dec00104 	addi	sp,sp,4
100004c0:	f800283a 	ret

100004c4 <io_read>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 io_read(alt_u8 Address)
{
100004c4:	defffd04 	addi	sp,sp,-12
100004c8:	df000215 	stw	fp,8(sp)
100004cc:	df000204 	addi	fp,sp,8
100004d0:	2005883a 	mov	r2,r4
100004d4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
100004d8:	00802c04 	movi	r2,176
100004dc:	e0ffff03 	ldbu	r3,-4(fp)
100004e0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
100004e4:	00800c04 	movi	r2,48
100004e8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100004ec:	00802404 	movi	r2,144
100004f0:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100004f4:	00802804 	movi	r2,160
100004f8:	10800017 	ldw	r2,0(r2)
100004fc:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1; // Set the read signal back to 1 after reading
10000500:	00802404 	movi	r2,144
10000504:	00c00044 	movi	r3,1
10000508:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	*otg_hpi_cs = 1;
1000050c:	00800c04 	movi	r2,48
10000510:	00c00044 	movi	r3,1
10000514:	10c00005 	stb	r3,0(r2)
	return temp;
10000518:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000051c:	e037883a 	mov	sp,fp
10000520:	df000017 	ldw	fp,0(sp)
10000524:	dec00104 	addi	sp,sp,4
10000528:	f800283a 	ret

1000052c <keyboard_init>:
alt_u8 data_size;
alt_u8 hot_plug_count;
alt_u16 code;
alt_u8 toggle = 0;

void keyboard_init() {
1000052c:	defffe04 	addi	sp,sp,-8
10000530:	dfc00115 	stw	ra,4(sp)
10000534:	df000015 	stw	fp,0(sp)
10000538:	d839883a 	mov	fp,sp
    io_init();
1000053c:	00003cc0 	call	100003cc <io_init>
        // usb_write(0xc008,0x000f);
        // usb_read(0xc008);
        usleep(10*10000);
    } */

    printf("USB keyboard setup...\n\n");
10000540:	01040074 	movhi	r4,4097
10000544:	21072204 	addi	r4,r4,7304
10000548:	00026180 	call	10002618 <puts>

    // ---------------------------------------- SIE1 initial ---------------------------------------------------//
    USB_HOT_PLUG:
    usb_soft_reset();
1000054c:	00013cc0 	call	100013cc <usb_soft_reset>

    // STEP 1a:
    usb_write(HPI_SIE1_MSG_ADR, 0);
10000550:	000b883a 	mov	r5,zero
10000554:	01005104 	movi	r4,324
10000558:	00013300 	call	10001330 <usb_write>
    usb_write(HOST1_STAT_REG, 0xFFFF);
1000055c:	017fffd4 	movui	r5,65535
10000560:	01302414 	movui	r4,49296
10000564:	00013300 	call	10001330 <usb_write>

    /* Set HUSB_pEOT time */
    usb_write(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000568:	01409604 	movi	r5,600
1000056c:	01006d04 	movi	r4,436
10000570:	00013300 	call	10001330 <usb_write>

    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000574:	00811004 	movi	r2,1088
10000578:	d0a6d00d 	sth	r2,-25792(gp)
    usb_write(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000057c:	d0a6d00b 	ldhu	r2,-25792(gp)
10000580:	10bfffcc 	andi	r2,r2,65535
10000584:	100b883a 	mov	r5,r2
10000588:	01005084 	movi	r4,322
1000058c:	00013300 	call	10001330 <usb_write>

    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN;
10000590:	00808404 	movi	r2,528
10000594:	d0a6d10d 	sth	r2,-25788(gp)
    usb_write(HOST1_IRQ_EN_REG, intStat);
10000598:	d0a6d10b 	ldhu	r2,-25788(gp)
1000059c:	10bfffcc 	andi	r2,r2,65535
100005a0:	100b883a 	mov	r5,r2
100005a4:	01302314 	movui	r4,49292
100005a8:	00013300 	call	10001330 <usb_write>
    // STEP 1a end

    // STEP 1b begin
    usb_write(COMM_R0, 0x0000);// reset time
100005ac:	000b883a 	mov	r5,zero
100005b0:	01007104 	movi	r4,452
100005b4:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
100005b8:	000b883a 	mov	r5,zero
100005bc:	01007184 	movi	r4,454
100005c0:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
100005c4:	000b883a 	mov	r5,zero
100005c8:	01007204 	movi	r4,456
100005cc:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
100005d0:	000b883a 	mov	r5,zero
100005d4:	01007284 	movi	r4,458
100005d8:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
100005dc:	000b883a 	mov	r5,zero
100005e0:	01007304 	movi	r4,460
100005e4:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
100005e8:	000b883a 	mov	r5,zero
100005ec:	01007384 	movi	r4,462
100005f0:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
100005f4:	000b883a 	mov	r5,zero
100005f8:	01007404 	movi	r4,464
100005fc:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
10000600:	000b883a 	mov	r5,zero
10000604:	01007484 	movi	r4,466
10000608:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
1000060c:	000b883a 	mov	r5,zero
10000610:	01007504 	movi	r4,468
10000614:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
10000618:	000b883a 	mov	r5,zero
1000061c:	01007584 	movi	r4,470
10000620:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
10000624:	000b883a 	mov	r5,zero
10000628:	01007604 	movi	r4,472
1000062c:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
10000630:	000b883a 	mov	r5,zero
10000634:	01007684 	movi	r4,474
10000638:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
1000063c:	000b883a 	mov	r5,zero
10000640:	01007704 	movi	r4,476
10000644:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
10000648:	000b883a 	mov	r5,zero
1000064c:	01007784 	movi	r4,478
10000650:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT); // HUSB_SIE1_INIT_INT
10000654:	01401c84 	movi	r5,114
10000658:	01007084 	movi	r4,450
1000065c:	00013300 	call	10001330 <usb_write>
    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10000660:	01738054 	movui	r5,52737
10000664:	01000044 	movi	r4,1
10000668:	00004540 	call	10000454 <io_write>

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
1000066c:	0001883a 	nop
10000670:	010000c4 	movi	r4,3
10000674:	00004c40 	call	100004c4 <io_read>
10000678:	10bfffcc 	andi	r2,r2,65535
1000067c:	103ffc26 	beq	r2,zero,10000670 <__alt_data_end+0xf8000670>
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10000680:	00000806 	br	100006a4 <keyboard_init+0x178>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
10000684:	01000044 	movi	r4,1
10000688:	00004c40 	call	100004c4 <io_read>
1000068c:	10bfffcc 	andi	r2,r2,65535
10000690:	100b883a 	mov	r5,r2
10000694:	01040074 	movhi	r4,4097
10000698:	21072804 	addi	r4,r4,7328
1000069c:	000251c0 	call	1000251c <printf>
        goto USB_HOT_PLUG;
100006a0:	003faa06 	br	1000054c <__alt_data_end+0xf800054c>
    usb_write(COMM_R13, 0x0000);  // r1
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT); // HUSB_SIE1_INIT_INT
    io_write(HPI_MAILBOX, COMM_EXEC_INT);

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
100006a4:	01000044 	movi	r4,1
100006a8:	00004c40 	call	100004c4 <io_read>
100006ac:	10bfffcc 	andi	r2,r2,65535
100006b0:	1083fb58 	cmpnei	r2,r2,4077
100006b4:	103ff31e 	bne	r2,zero,10000684 <__alt_data_end+0xf8000684>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
        goto USB_HOT_PLUG;
    }
    // STEP 1b end

    printf("STEP 1 Complete");
100006b8:	01040074 	movhi	r4,4097
100006bc:	21073104 	addi	r4,r4,7364
100006c0:	000251c0 	call	1000251c <printf>
    // STEP 2 begin
    usb_write(COMM_INT_NUM, HUSB_RESET_INT); // husb reset
100006c4:	01401d04 	movi	r5,116
100006c8:	01007084 	movi	r4,450
100006cc:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R0, 0x003c);// reset time
100006d0:	01400f04 	movi	r5,60
100006d4:	01007104 	movi	r4,452
100006d8:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
100006dc:	000b883a 	mov	r5,zero
100006e0:	01007184 	movi	r4,454
100006e4:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
100006e8:	000b883a 	mov	r5,zero
100006ec:	01007204 	movi	r4,456
100006f0:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
100006f4:	000b883a 	mov	r5,zero
100006f8:	01007284 	movi	r4,458
100006fc:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
10000700:	000b883a 	mov	r5,zero
10000704:	01007304 	movi	r4,460
10000708:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
1000070c:	000b883a 	mov	r5,zero
10000710:	01007384 	movi	r4,462
10000714:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
10000718:	000b883a 	mov	r5,zero
1000071c:	01007404 	movi	r4,464
10000720:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
10000724:	000b883a 	mov	r5,zero
10000728:	01007484 	movi	r4,466
1000072c:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
10000730:	000b883a 	mov	r5,zero
10000734:	01007504 	movi	r4,468
10000738:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
1000073c:	000b883a 	mov	r5,zero
10000740:	01007584 	movi	r4,470
10000744:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
10000748:	000b883a 	mov	r5,zero
1000074c:	01007604 	movi	r4,472
10000750:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
10000754:	000b883a 	mov	r5,zero
10000758:	01007684 	movi	r4,474
1000075c:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
10000760:	000b883a 	mov	r5,zero
10000764:	01007704 	movi	r4,476
10000768:	00013300 	call	10001330 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
1000076c:	000b883a 	mov	r5,zero
10000770:	01007784 	movi	r4,478
10000774:	00013300 	call	10001330 <usb_write>

    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10000778:	01738054 	movui	r5,52737
1000077c:	01000044 	movi	r4,1
10000780:	00004540 	call	10000454 <io_write>

    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10000784:	0001883a 	nop
10000788:	01000044 	movi	r4,1
1000078c:	00004c40 	call	100004c4 <io_read>
10000790:	10bfffcc 	andi	r2,r2,65535
10000794:	1083fb58 	cmpnei	r2,r2,4077
10000798:	10000826 	beq	r2,zero,100007bc <keyboard_init+0x290>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
1000079c:	01000044 	movi	r4,1
100007a0:	00004c40 	call	100004c4 <io_read>
100007a4:	10bfffcc 	andi	r2,r2,65535
100007a8:	100b883a 	mov	r5,r2
100007ac:	01040074 	movhi	r4,4097
100007b0:	21072804 	addi	r4,r4,7328
100007b4:	000251c0 	call	1000251c <printf>
        goto USB_HOT_PLUG;
100007b8:	003f6406 	br	1000054c <__alt_data_end+0xf800054c>
    }
    // STEP 2 end

    ctl_reg = USB1_CTL_REG;
100007bc:	00b02284 	movi	r2,-16246
100007c0:	d0a6ce0d 	sth	r2,-25800(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
100007c4:	008c0004 	movi	r2,12288
100007c8:	d0a6ce8d 	sth	r2,-25798(gp)
    fs_device = A_DP_STAT;
100007cc:	00880004 	movi	r2,8192
100007d0:	d0a6cf0d 	sth	r2,-25796(gp)
    usb_ctl_val = usb_read(ctl_reg);
100007d4:	d0a6ce0b 	ldhu	r2,-25800(gp)
100007d8:	10bfffcc 	andi	r2,r2,65535
100007dc:	1009883a 	mov	r4,r2
100007e0:	00013880 	call	10001388 <usb_read>
100007e4:	d0a6d00d 	sth	r2,-25792(gp)

    if (!(usb_ctl_val & no_device)) {
100007e8:	d0e6d00b 	ldhu	r3,-25792(gp)
100007ec:	d0a6ce8b 	ldhu	r2,-25798(gp)
100007f0:	1884703a 	and	r2,r3,r2
100007f4:	10bfffcc 	andi	r2,r2,65535
100007f8:	1000361e 	bne	r2,zero,100008d4 <keyboard_init+0x3a8>
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
100007fc:	d026d185 	stb	zero,-25786(gp)
10000800:	00000f06 	br	10000840 <keyboard_init+0x314>
            usleep(5 * 1000);
10000804:	0104e204 	movi	r4,5000
10000808:	000fc840 	call	1000fc84 <usleep>
            usb_ctl_val = usb_read(ctl_reg);
1000080c:	d0a6ce0b 	ldhu	r2,-25800(gp)
10000810:	10bfffcc 	andi	r2,r2,65535
10000814:	1009883a 	mov	r4,r2
10000818:	00013880 	call	10001388 <usb_read>
1000081c:	d0a6d00d 	sth	r2,-25792(gp)
            if (usb_ctl_val & no_device) break;
10000820:	d0e6d00b 	ldhu	r3,-25792(gp)
10000824:	d0a6ce8b 	ldhu	r2,-25798(gp)
10000828:	1884703a 	and	r2,r3,r2
1000082c:	10bfffcc 	andi	r2,r2,65535
10000830:	1000081e 	bne	r2,zero,10000854 <keyboard_init+0x328>
    no_device = (A_DP_STAT | A_DM_STAT);
    fs_device = A_DP_STAT;
    usb_ctl_val = usb_read(ctl_reg);

    if (!(usb_ctl_val & no_device)) {
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
10000834:	d0a6d183 	ldbu	r2,-25786(gp)
10000838:	10800044 	addi	r2,r2,1
1000083c:	d0a6d185 	stb	r2,-25786(gp)
10000840:	d0a6d183 	ldbu	r2,-25786(gp)
10000844:	10803fcc 	andi	r2,r2,255
10000848:	10800170 	cmpltui	r2,r2,5
1000084c:	103fed1e 	bne	r2,zero,10000804 <__alt_data_end+0xf8000804>
10000850:	00000106 	br	10000858 <keyboard_init+0x32c>
            usleep(5 * 1000);
            usb_ctl_val = usb_read(ctl_reg);
            if (usb_ctl_val & no_device) break;
10000854:	0001883a 	nop
        }
        if (!(usb_ctl_val & no_device)) {
10000858:	d0e6d00b 	ldhu	r3,-25792(gp)
1000085c:	d0a6ce8b 	ldhu	r2,-25798(gp)
10000860:	1884703a 	and	r2,r3,r2
10000864:	10bfffcc 	andi	r2,r2,65535
10000868:	1000261e 	bne	r2,zero,10000904 <keyboard_init+0x3d8>
            printf("\n[INFO]: no device is present in SIE1!\n");
1000086c:	01040074 	movhi	r4,4097
10000870:	21073504 	addi	r4,r4,7380
10000874:	00026180 	call	10002618 <puts>
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000878:	01040074 	movhi	r4,4097
1000087c:	21073f04 	addi	r4,r4,7420
10000880:	00026180 	call	10002618 <puts>
            while (!(usb_ctl_val & no_device)) {
10000884:	00000d06 	br	100008bc <keyboard_init+0x390>
                usb_ctl_val = usb_read(ctl_reg);
10000888:	d0a6ce0b 	ldhu	r2,-25800(gp)
1000088c:	10bfffcc 	andi	r2,r2,65535
10000890:	1009883a 	mov	r4,r2
10000894:	00013880 	call	10001388 <usb_read>
10000898:	d0a6d00d 	sth	r2,-25792(gp)
                if (usb_ctl_val & no_device)
1000089c:	d0e6d00b 	ldhu	r3,-25792(gp)
100008a0:	d0a6ce8b 	ldhu	r2,-25798(gp)
100008a4:	1884703a 	and	r2,r3,r2
100008a8:	10bfffcc 	andi	r2,r2,65535
100008ac:	10000126 	beq	r2,zero,100008b4 <keyboard_init+0x388>
                    goto USB_HOT_PLUG;
100008b0:	003f2606 	br	1000054c <__alt_data_end+0xf800054c>

                usleep(2000);
100008b4:	0101f404 	movi	r4,2000
100008b8:	000fc840 	call	1000fc84 <usleep>
            if (usb_ctl_val & no_device) break;
        }
        if (!(usb_ctl_val & no_device)) {
            printf("\n[INFO]: no device is present in SIE1!\n");
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
            while (!(usb_ctl_val & no_device)) {
100008bc:	d0e6d00b 	ldhu	r3,-25792(gp)
100008c0:	d0a6ce8b 	ldhu	r2,-25798(gp)
100008c4:	1884703a 	and	r2,r3,r2
100008c8:	10bfffcc 	andi	r2,r2,65535
100008cc:	103fee26 	beq	r2,zero,10000888 <__alt_data_end+0xf8000888>
100008d0:	00000c06 	br	10000904 <keyboard_init+0x3d8>
                usleep(2000);
            }
        }
    } else {
        /* check for low speed or full speed by reading D+ and D- lines */
        if (usb_ctl_val & fs_device) {
100008d4:	d0e6d00b 	ldhu	r3,-25792(gp)
100008d8:	d0a6cf0b 	ldhu	r2,-25796(gp)
100008dc:	1884703a 	and	r2,r3,r2
100008e0:	10bfffcc 	andi	r2,r2,65535
100008e4:	10000426 	beq	r2,zero,100008f8 <keyboard_init+0x3cc>
            printf("[INFO]: full speed device\n");
100008e8:	01040074 	movhi	r4,4097
100008ec:	21074b04 	addi	r4,r4,7468
100008f0:	00026180 	call	10002618 <puts>
100008f4:	00000306 	br	10000904 <keyboard_init+0x3d8>
        } else {
            printf("[INFO]: low speed device\n");
100008f8:	01040074 	movhi	r4,4097
100008fc:	21075204 	addi	r4,r4,7496
10000900:	00026180 	call	10002618 <puts>
        }
    }

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();
10000904:	00014800 	call	10001480 <usb_set_address>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000908:	00000306 	br	10000918 <keyboard_init+0x3ec>
    {
        usb_set_address();
1000090c:	00014800 	call	10001480 <usb_set_address>
        usleep(10 * 1000);
10000910:	0109c404 	movi	r4,10000
10000914:	000fc840 	call	1000fc84 <usleep>

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000918:	010000c4 	movi	r4,3
1000091c:	00004c40 	call	100004c4 <io_read>
10000920:	10bfffcc 	andi	r2,r2,65535
10000924:	1080040c 	andi	r2,r2,16
10000928:	103ff826 	beq	r2,zero,1000090c <__alt_data_end+0xf800090c>
    {
        usb_set_address();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
1000092c:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506); // i
10000930:	01414184 	movi	r5,1286
10000934:	01000084 	movi	r4,2
10000938:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n", io_read(HPI_DATA));
1000093c:	0009883a 	mov	r4,zero
10000940:	00004c40 	call	100004c4 <io_read>
10000944:	10bfffcc 	andi	r2,r2,65535
10000948:	100b883a 	mov	r5,r2
1000094c:	01040074 	movhi	r4,4097
10000950:	21075904 	addi	r4,r4,7524
10000954:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508); // n
10000958:	01414204 	movi	r5,1288
1000095c:	01000084 	movi	r4,2
10000960:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000964:	0009883a 	mov	r4,zero
10000968:	00004c40 	call	100004c4 <io_read>
1000096c:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n", usb_ctl_val);
10000970:	d0a6d00b 	ldhu	r2,-25792(gp)
10000974:	10bfffcc 	andi	r2,r2,65535
10000978:	100b883a 	mov	r5,r2
1000097c:	01040074 	movhi	r4,4097
10000980:	21076404 	addi	r4,r4,7568
10000984:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) // retries occurred
10000988:	0001883a 	nop
1000098c:	d0a6d00b 	ldhu	r2,-25792(gp)
10000990:	10bfffcc 	andi	r2,r2,65535
10000994:	108000d8 	cmpnei	r2,r2,3
10000998:	10000326 	beq	r2,zero,100009a8 <keyboard_init+0x47c>
    {
        usb_ctl_val = usb_get_retry_cnt();
1000099c:	00023a40 	call	100023a4 <usb_get_retry_cnt>
100009a0:	d0a6d00d 	sth	r2,-25792(gp)

        goto USB_HOT_PLUG;
100009a4:	003ee906 	br	1000054c <__alt_data_end+0xf800054c>
    }

    printf("------------[ENUM PROCESS]:set address done!---------------\n");
100009a8:	01040074 	movhi	r4,4097
100009ac:	21077004 	addi	r4,r4,7616
100009b0:	00026180 	call	10002618 <puts>

    // STEP 4 begin
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1
100009b4:	00015800 	call	10001580 <usb_get_device_desc1>

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100009b8:	00000306 	br	100009c8 <keyboard_init+0x49c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
100009bc:	00015800 	call	10001580 <usb_get_device_desc1>
        usleep(10 * 1000);
100009c0:	0109c404 	movi	r4,10000
100009c4:	000fc840 	call	1000fc84 <usleep>
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100009c8:	010000c4 	movi	r4,3
100009cc:	00004c40 	call	100004c4 <io_read>
100009d0:	10bfffcc 	andi	r2,r2,65535
100009d4:	1080040c 	andi	r2,r2,16
100009d8:	103ff826 	beq	r2,zero,100009bc <__alt_data_end+0xf80009bc>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
100009dc:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
100009e0:	01414184 	movi	r5,1286
100009e4:	01000084 	movi	r4,2
100009e8:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
100009ec:	0009883a 	mov	r4,zero
100009f0:	00004c40 	call	100004c4 <io_read>
100009f4:	10bfffcc 	andi	r2,r2,65535
100009f8:	100b883a 	mov	r5,r2
100009fc:	01040074 	movhi	r4,4097
10000a00:	21077f04 	addi	r4,r4,7676
10000a04:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000a08:	01414204 	movi	r5,1288
10000a0c:	01000084 	movi	r4,2
10000a10:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000a14:	0009883a 	mov	r4,zero
10000a18:	00004c40 	call	100004c4 <io_read>
10000a1c:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10000a20:	d0a6d00b 	ldhu	r2,-25792(gp)
10000a24:	10bfffcc 	andi	r2,r2,65535
10000a28:	100b883a 	mov	r5,r2
10000a2c:	01040074 	movhi	r4,4097
10000a30:	21078a04 	addi	r4,r4,7720
10000a34:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000a38:	00000206 	br	10000a44 <keyboard_init+0x518>
        usb_ctl_val = usb_get_retry_cnt();
10000a3c:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000a40:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000a44:	d0a6d00b 	ldhu	r2,-25792(gp)
10000a48:	10bfffcc 	andi	r2,r2,65535
10000a4c:	108000d8 	cmpnei	r2,r2,3
10000a50:	103ffa1e 	bne	r2,zero,10000a3c <__alt_data_end+0xf8000a3c>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000a54:	01040074 	movhi	r4,4097
10000a58:	21079604 	addi	r4,r4,7768
10000a5c:	00026180 	call	10002618 <puts>


    //--------------------------------get device descriptor-2---------------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2
10000a60:	00016c80 	call	100016c8 <usb_get_device_desc2>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000a64:	00000306 	br	10000a74 <keyboard_init+0x548>
    {
        // resend the get device descriptor
        // get device descriptor
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
10000a68:	00016c80 	call	100016c8 <usb_get_device_desc2>
        usleep(10 * 1000);
10000a6c:	0109c404 	movi	r4,10000
10000a70:	000fc840 	call	1000fc84 <usleep>
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000a74:	010000c4 	movi	r4,3
10000a78:	00004c40 	call	100004c4 <io_read>
10000a7c:	10bfffcc 	andi	r2,r2,65535
10000a80:	1080040c 	andi	r2,r2,16
10000a84:	103ff826 	beq	r2,zero,10000a68 <__alt_data_end+0xf8000a68>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000a88:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000a8c:	01414184 	movi	r5,1286
10000a90:	01000084 	movi	r4,2
10000a94:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
10000a98:	0009883a 	mov	r4,zero
10000a9c:	00004c40 	call	100004c4 <io_read>
10000aa0:	10bfffcc 	andi	r2,r2,65535
10000aa4:	100b883a 	mov	r5,r2
10000aa8:	01040074 	movhi	r4,4097
10000aac:	21077f04 	addi	r4,r4,7676
10000ab0:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000ab4:	01414204 	movi	r5,1288
10000ab8:	01000084 	movi	r4,2
10000abc:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	00004c40 	call	100004c4 <io_read>
10000ac8:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10000acc:	d0a6d00b 	ldhu	r2,-25792(gp)
10000ad0:	10bfffcc 	andi	r2,r2,65535
10000ad4:	100b883a 	mov	r5,r2
10000ad8:	01040074 	movhi	r4,4097
10000adc:	21078a04 	addi	r4,r4,7720
10000ae0:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000ae4:	00000206 	br	10000af0 <keyboard_init+0x5c4>
        usb_ctl_val = usb_get_retry_cnt();
10000ae8:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000aec:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000af0:	d0a6d00b 	ldhu	r2,-25792(gp)
10000af4:	10bfffcc 	andi	r2,r2,65535
10000af8:	108000d8 	cmpnei	r2,r2,3
10000afc:	103ffa1e 	bne	r2,zero,10000ae8 <__alt_data_end+0xf8000ae8>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000b00:	01040074 	movhi	r4,4097
10000b04:	2107aa04 	addi	r4,r4,7848
10000b08:	00026180 	call	10002618 <puts>


    // STEP 5 begin
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1
10000b0c:	00018a00 	call	100018a0 <usb_get_config_desc1>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000b10:	00000306 	br	10000b20 <keyboard_init+0x5f4>
    {
        // resend the get device descriptor
        // get device descriptor

        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
10000b14:	00018a00 	call	100018a0 <usb_get_config_desc1>
        usleep(10 * 1000);
10000b18:	0109c404 	movi	r4,10000
10000b1c:	000fc840 	call	1000fc84 <usleep>
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000b20:	010000c4 	movi	r4,3
10000b24:	00004c40 	call	100004c4 <io_read>
10000b28:	10bfffcc 	andi	r2,r2,65535
10000b2c:	1080040c 	andi	r2,r2,16
10000b30:	103ff826 	beq	r2,zero,10000b14 <__alt_data_end+0xf8000b14>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000b34:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000b38:	01414184 	movi	r5,1286
10000b3c:	01000084 	movi	r4,2
10000b40:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));
10000b44:	0009883a 	mov	r4,zero
10000b48:	00004c40 	call	100004c4 <io_read>
10000b4c:	10bfffcc 	andi	r2,r2,65535
10000b50:	100b883a 	mov	r5,r2
10000b54:	01040074 	movhi	r4,4097
10000b58:	2107bc04 	addi	r4,r4,7920
10000b5c:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000b60:	01414204 	movi	r5,1288
10000b64:	01000084 	movi	r4,2
10000b68:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00004c40 	call	100004c4 <io_read>
10000b74:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
10000b78:	d0a6d00b 	ldhu	r2,-25792(gp)
10000b7c:	10bfffcc 	andi	r2,r2,65535
10000b80:	100b883a 	mov	r5,r2
10000b84:	01040074 	movhi	r4,4097
10000b88:	2107c704 	addi	r4,r4,7964
10000b8c:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000b90:	00000206 	br	10000b9c <keyboard_init+0x670>
        usb_ctl_val = usb_get_retry_cnt();
10000b94:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000b98:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000b9c:	d0a6d00b 	ldhu	r2,-25792(gp)
10000ba0:	10bfffcc 	andi	r2,r2,65535
10000ba4:	108000d8 	cmpnei	r2,r2,3
10000ba8:	103ffa1e 	bne	r2,zero,10000b94 <__alt_data_end+0xf8000b94>
        usb_ctl_val = usb_get_retry_cnt();
    }
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000bac:	01040074 	movhi	r4,4097
10000bb0:	2107d304 	addi	r4,r4,8012
10000bb4:	00026180 	call	10002618 <puts>

    // STEP 6 begin
    //-----------------------------------get configuration descriptor-2------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2
10000bb8:	0001a300 	call	10001a30 <usb_get_config_desc2>

    usleep(100 * 1000);
10000bbc:	010000b4 	movhi	r4,2
10000bc0:	2121a804 	addi	r4,r4,-31072
10000bc4:	000fc840 	call	1000fc84 <usleep>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000bc8:	00000306 	br	10000bd8 <keyboard_init+0x6ac>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
10000bcc:	0001a300 	call	10001a30 <usb_get_config_desc2>
        usleep(10 * 1000);
10000bd0:	0109c404 	movi	r4,10000
10000bd4:	000fc840 	call	1000fc84 <usleep>
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2

    usleep(100 * 1000);
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000bd8:	010000c4 	movi	r4,3
10000bdc:	00004c40 	call	100004c4 <io_read>
10000be0:	10bfffcc 	andi	r2,r2,65535
10000be4:	1080040c 	andi	r2,r2,16
10000be8:	103ff826 	beq	r2,zero,10000bcc <__alt_data_end+0xf8000bcc>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000bec:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000bf0:	01414184 	movi	r5,1286
10000bf4:	01000084 	movi	r4,2
10000bf8:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));
10000bfc:	0009883a 	mov	r4,zero
10000c00:	00004c40 	call	100004c4 <io_read>
10000c04:	10bfffcc 	andi	r2,r2,65535
10000c08:	100b883a 	mov	r5,r2
10000c0c:	01040074 	movhi	r4,4097
10000c10:	2107e604 	addi	r4,r4,8088
10000c14:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000c18:	01414204 	movi	r5,1288
10000c1c:	01000084 	movi	r4,2
10000c20:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000c24:	0009883a 	mov	r4,zero
10000c28:	00004c40 	call	100004c4 <io_read>
10000c2c:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
10000c30:	d0a6d00b 	ldhu	r2,-25792(gp)
10000c34:	10bfffcc 	andi	r2,r2,65535
10000c38:	100b883a 	mov	r5,r2
10000c3c:	01040074 	movhi	r4,4097
10000c40:	2107f104 	addi	r4,r4,8132
10000c44:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000c48:	00000206 	br	10000c54 <keyboard_init+0x728>
        usb_ctl_val = usb_get_retry_cnt();
10000c4c:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000c50:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000c54:	d0a6d00b 	ldhu	r2,-25792(gp)
10000c58:	10bfffcc 	andi	r2,r2,65535
10000c5c:	108000d8 	cmpnei	r2,r2,3
10000c60:	103ffa1e 	bne	r2,zero,10000c4c <__alt_data_end+0xf8000c4c>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000c64:	01040074 	movhi	r4,4097
10000c68:	2107fd04 	addi	r4,r4,8180
10000c6c:	00026180 	call	10002618 <puts>


    // --------------------------------- get device info --------------------------------------------- //

    // TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
    io_write(HPI_ADDR, 0x056c);
10000c70:	01415b04 	movi	r5,1388
10000c74:	01000084 	movi	r4,2
10000c78:	00004540 	call	10000454 <io_write>
    code = io_read(HPI_DATA);
10000c7c:	0009883a 	mov	r4,zero
10000c80:	00004c40 	call	100004c4 <io_read>
10000c84:	d0a6d20d 	sth	r2,-25784(gp)
    code = code & 0x003;
10000c88:	d0a6d20b 	ldhu	r2,-25784(gp)
10000c8c:	108000cc 	andi	r2,r2,3
10000c90:	d0a6d20d 	sth	r2,-25784(gp)
    printf("\ncode = %x\n", code);
10000c94:	d0a6d20b 	ldhu	r2,-25784(gp)
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	100b883a 	mov	r5,r2
10000ca0:	01040074 	movhi	r4,4097
10000ca4:	21081004 	addi	r4,r4,8256
10000ca8:	000251c0 	call	1000251c <printf>

    if (code == 0x01) {
10000cac:	d0a6d20b 	ldhu	r2,-25784(gp)
10000cb0:	10bfffcc 	andi	r2,r2,65535
10000cb4:	10800058 	cmpnei	r2,r2,1
10000cb8:	1000041e 	bne	r2,zero,10000ccc <keyboard_init+0x7a0>
        printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000cbc:	01040074 	movhi	r4,4097
10000cc0:	21081304 	addi	r4,r4,8268
10000cc4:	00026180 	call	10002618 <puts>
10000cc8:	00000306 	br	10000cd8 <keyboard_init+0x7ac>
    } else {
        printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000ccc:	01040074 	movhi	r4,4097
10000cd0:	21082204 	addi	r4,r4,8328
10000cd4:	00026180 	call	10002618 <puts>
    }

    // TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

    io_write(HPI_ADDR, 0x0576);
10000cd8:	01415d84 	movi	r5,1398
10000cdc:	01000084 	movi	r4,2
10000ce0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x073F);
10000ce4:	0141cfc4 	movi	r5,1855
10000ce8:	0009883a 	mov	r4,zero
10000cec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x8105);
10000cf0:	01604154 	movui	r5,33029
10000cf4:	0009883a 	mov	r4,zero
10000cf8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0003);
10000cfc:	014000c4 	movi	r5,3
10000d00:	0009883a 	mov	r4,zero
10000d04:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);
10000d08:	01400204 	movi	r5,8
10000d0c:	0009883a 	mov	r4,zero
10000d10:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0xAC0A);
10000d14:	016b0294 	movui	r5,44042
10000d18:	0009883a 	mov	r4,zero
10000d1c:	00004540 	call	10000454 <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0576); // HUSB_SIE1_pCurrentTDPtr
10000d20:	01415d84 	movi	r5,1398
10000d24:	01006c04 	movi	r4,432
10000d28:	00013300 	call	10001330 <usb_write>

    // data_size = (io_read(HPI_DATA)>>8)&0x0ff;
    // data_size = 0x08;//(io_read(HPI_DATA))&0x0ff;
    // usb_print_mem();
    io_write(HPI_ADDR, 0x057c);
10000d2c:	01415f04 	movi	r5,1404
10000d30:	01000084 	movi	r4,2
10000d34:	00004540 	call	10000454 <io_write>
    data_size = (io_read(HPI_DATA)) & 0x0ff;
10000d38:	0009883a 	mov	r4,zero
10000d3c:	00004c40 	call	100004c4 <io_read>
10000d40:	d0a6d085 	stb	r2,-25790(gp)
    printf("[ENUM PROCESS]:data packet size is %d\n", data_size);
10000d44:	d0a6d083 	ldbu	r2,-25790(gp)
10000d48:	10803fcc 	andi	r2,r2,255
10000d4c:	100b883a 	mov	r5,r2
10000d50:	01040074 	movhi	r4,4097
10000d54:	21082b04 	addi	r4,r4,8364
10000d58:	000251c0 	call	1000251c <printf>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration
10000d5c:	0001c980 	call	10001c98 <usb_set_config>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000d60:	00000306 	br	10000d70 <keyboard_init+0x844>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
10000d64:	0001c980 	call	10001c98 <usb_set_config>
        usleep(10 * 1000);
10000d68:	0109c404 	movi	r4,10000
10000d6c:	000fc840 	call	1000fc84 <usleep>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000d70:	010000c4 	movi	r4,3
10000d74:	00004c40 	call	100004c4 <io_read>
10000d78:	10bfffcc 	andi	r2,r2,65535
10000d7c:	1080040c 	andi	r2,r2,16
10000d80:	103ff826 	beq	r2,zero,10000d64 <__alt_data_end+0xf8000d64>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000d84:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000d88:	01414184 	movi	r5,1286
10000d8c:	01000084 	movi	r4,2
10000d90:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));
10000d94:	0009883a 	mov	r4,zero
10000d98:	00004c40 	call	100004c4 <io_read>
10000d9c:	10bfffcc 	andi	r2,r2,65535
10000da0:	100b883a 	mov	r5,r2
10000da4:	01040074 	movhi	r4,4097
10000da8:	21083504 	addi	r4,r4,8404
10000dac:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000db0:	01414204 	movi	r5,1288
10000db4:	01000084 	movi	r4,2
10000db8:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000dbc:	0009883a 	mov	r4,zero
10000dc0:	00004c40 	call	100004c4 <io_read>
10000dc4:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
10000dc8:	d0a6d00b 	ldhu	r2,-25792(gp)
10000dcc:	10bfffcc 	andi	r2,r2,65535
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	01040074 	movhi	r4,4097
10000dd8:	21084004 	addi	r4,r4,8448
10000ddc:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000de0:	00000206 	br	10000dec <keyboard_init+0x8c0>
        usb_ctl_val = usb_get_retry_cnt();
10000de4:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000de8:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000dec:	d0a6d00b 	ldhu	r2,-25792(gp)
10000df0:	10bfffcc 	andi	r2,r2,65535
10000df4:	108000d8 	cmpnei	r2,r2,3
10000df8:	103ffa1e 	bne	r2,zero,10000de4 <__alt_data_end+0xf8000de4>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000dfc:	01040074 	movhi	r4,4097
10000e00:	21084c04 	addi	r4,r4,8496
10000e04:	00026180 	call	10002618 <puts>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();
10000e08:	0001d980 	call	10001d98 <usb_class_request>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000e0c:	00000306 	br	10000e1c <keyboard_init+0x8f0>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
10000e10:	0001d980 	call	10001d98 <usb_class_request>
        usleep(10 * 1000);
10000e14:	0109c404 	movi	r4,10000
10000e18:	000fc840 	call	1000fc84 <usleep>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000e1c:	010000c4 	movi	r4,3
10000e20:	00004c40 	call	100004c4 <io_read>
10000e24:	10bfffcc 	andi	r2,r2,65535
10000e28:	1080040c 	andi	r2,r2,16
10000e2c:	103ff826 	beq	r2,zero,10000e10 <__alt_data_end+0xf8000e10>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000e30:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000e34:	01414184 	movi	r5,1286
10000e38:	01000084 	movi	r4,2
10000e3c:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
10000e40:	0009883a 	mov	r4,zero
10000e44:	00004c40 	call	100004c4 <io_read>
10000e48:	10bfffcc 	andi	r2,r2,65535
10000e4c:	100b883a 	mov	r5,r2
10000e50:	01040074 	movhi	r4,4097
10000e54:	21085e04 	addi	r4,r4,8568
10000e58:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000e5c:	01414204 	movi	r5,1288
10000e60:	01000084 	movi	r4,2
10000e64:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000e68:	0009883a 	mov	r4,zero
10000e6c:	00004c40 	call	100004c4 <io_read>
10000e70:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10000e74:	d0a6d00b 	ldhu	r2,-25792(gp)
10000e78:	10bfffcc 	andi	r2,r2,65535
10000e7c:	100b883a 	mov	r5,r2
10000e80:	01040074 	movhi	r4,4097
10000e84:	21086904 	addi	r4,r4,8612
10000e88:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000e8c:	00000206 	br	10000e98 <keyboard_init+0x96c>
        usb_ctl_val = usb_get_retry_cnt();
10000e90:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000e94:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000e98:	d0a6d00b 	ldhu	r2,-25792(gp)
10000e9c:	10bfffcc 	andi	r2,r2,65535
10000ea0:	108000d8 	cmpnei	r2,r2,3
10000ea4:	103ffa1e 	bne	r2,zero,10000e90 <__alt_data_end+0xf8000e90>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000ea8:	01040074 	movhi	r4,4097
10000eac:	21087504 	addi	r4,r4,8660
10000eb0:	00026180 	call	10002618 <puts>

    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();
10000eb4:	0001e980 	call	10001e98 <usb_get_hid_desc>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000eb8:	00000306 	br	10000ec8 <keyboard_init+0x99c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
10000ebc:	0001e980 	call	10001e98 <usb_get_hid_desc>
        usleep(10 * 1000);
10000ec0:	0109c404 	movi	r4,10000
10000ec4:	000fc840 	call	1000fc84 <usleep>
    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000ec8:	010000c4 	movi	r4,3
10000ecc:	00004c40 	call	100004c4 <io_read>
10000ed0:	10bfffcc 	andi	r2,r2,65535
10000ed4:	1080040c 	andi	r2,r2,16
10000ed8:	103ff826 	beq	r2,zero,10000ebc <__alt_data_end+0xf8000ebc>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000edc:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000ee0:	01414184 	movi	r5,1286
10000ee4:	01000084 	movi	r4,2
10000ee8:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
10000eec:	0009883a 	mov	r4,zero
10000ef0:	00004c40 	call	100004c4 <io_read>
10000ef4:	10bfffcc 	andi	r2,r2,65535
10000ef8:	100b883a 	mov	r5,r2
10000efc:	01040074 	movhi	r4,4097
10000f00:	21085e04 	addi	r4,r4,8568
10000f04:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000f08:	01414204 	movi	r5,1288
10000f0c:	01000084 	movi	r4,2
10000f10:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000f14:	0009883a 	mov	r4,zero
10000f18:	00004c40 	call	100004c4 <io_read>
10000f1c:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10000f20:	d0a6d00b 	ldhu	r2,-25792(gp)
10000f24:	10bfffcc 	andi	r2,r2,65535
10000f28:	100b883a 	mov	r5,r2
10000f2c:	01040074 	movhi	r4,4097
10000f30:	21086904 	addi	r4,r4,8612
10000f34:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000f38:	00000206 	br	10000f44 <keyboard_init+0xa18>
        usb_ctl_val = usb_get_retry_cnt();
10000f3c:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000f40:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000f44:	d0a6d00b 	ldhu	r2,-25792(gp)
10000f48:	10bfffcc 	andi	r2,r2,65535
10000f4c:	108000d8 	cmpnei	r2,r2,3
10000f50:	103ffa1e 	bne	r2,zero,10000f3c <__alt_data_end+0xf8000f3c>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000f54:	01040074 	movhi	r4,4097
10000f58:	21088704 	addi	r4,r4,8732
10000f5c:	00026180 	call	10002618 <puts>

    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
10000f60:	0001fe00 	call	10001fe0 <usb_get_report_desc>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000f64:	00000306 	br	10000f74 <keyboard_init+0xa48>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
10000f68:	0001fe00 	call	10001fe0 <usb_get_report_desc>
        usleep(10 * 1000);
10000f6c:	0109c404 	movi	r4,10000
10000f70:	000fc840 	call	1000fc84 <usleep>
    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10000f74:	010000c4 	movi	r4,3
10000f78:	00004c40 	call	100004c4 <io_read>
10000f7c:	10bfffcc 	andi	r2,r2,65535
10000f80:	1080040c 	andi	r2,r2,16
10000f84:	103ff826 	beq	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10000f88:	00023200 	call	10002320 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10000f8c:	01414184 	movi	r5,1286
10000f90:	01000084 	movi	r4,2
10000f94:	00004540 	call	10000454 <io_write>
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));
10000f98:	0009883a 	mov	r4,zero
10000f9c:	00004c40 	call	100004c4 <io_read>
10000fa0:	10bfffcc 	andi	r2,r2,65535
10000fa4:	100b883a 	mov	r5,r2
10000fa8:	01040074 	movhi	r4,4097
10000fac:	21089b04 	addi	r4,r4,8812
10000fb0:	000251c0 	call	1000251c <printf>

    io_write(HPI_ADDR, 0x0508);
10000fb4:	01414204 	movi	r5,1288
10000fb8:	01000084 	movi	r4,2
10000fbc:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10000fc0:	0009883a 	mov	r4,zero
10000fc4:	00004c40 	call	100004c4 <io_read>
10000fc8:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
10000fcc:	d0a6d00b 	ldhu	r2,-25792(gp)
10000fd0:	10bfffcc 	andi	r2,r2,65535
10000fd4:	100b883a 	mov	r5,r2
10000fd8:	01040074 	movhi	r4,4097
10000fdc:	2108a704 	addi	r4,r4,8860
10000fe0:	000251c0 	call	1000251c <printf>
    while (usb_ctl_val != 0x03) {
10000fe4:	00000206 	br	10000ff0 <keyboard_init+0xac4>
        usb_ctl_val = usb_get_retry_cnt();
10000fe8:	00023a40 	call	100023a4 <usb_get_retry_cnt>
10000fec:	d0a6d00d 	sth	r2,-25792(gp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10000ff0:	d0a6d00b 	ldhu	r2,-25792(gp)
10000ff4:	10bfffcc 	andi	r2,r2,65535
10000ff8:	108000d8 	cmpnei	r2,r2,3
10000ffc:	103ffa1e 	bne	r2,zero,10000fe8 <__alt_data_end+0xf8000fe8>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10001000:	01040074 	movhi	r4,4097
10001004:	2108b304 	addi	r4,r4,8908
10001008:	00026180 	call	10002618 <puts>

    usleep(10000);
1000100c:	0109c404 	movi	r4,10000
10001010:	000fc840 	call	1000fc84 <usleep>
}
10001014:	0001883a 	nop
10001018:	e037883a 	mov	sp,fp
1000101c:	dfc00117 	ldw	ra,4(sp)
10001020:	df000017 	ldw	fp,0(sp)
10001024:	dec00204 	addi	sp,sp,8
10001028:	f800283a 	ret

1000102c <keyboard_fetch>:

int keyboard_fetch(unsigned int *keycode) {
1000102c:	defffd04 	addi	sp,sp,-12
10001030:	dfc00215 	stw	ra,8(sp)
10001034:	df000115 	stw	fp,4(sp)
10001038:	df000104 	addi	fp,sp,4
1000103c:	e13fff15 	stw	r4,-4(fp)
    toggle++;
10001040:	d0a6cf83 	ldbu	r2,-25794(gp)
10001044:	10800044 	addi	r2,r2,1
10001048:	d0a6cf85 	stb	r2,-25794(gp)

    io_write(HPI_ADDR, 0x0500); // the start address
1000104c:	01414004 	movi	r5,1280
10001050:	01000084 	movi	r4,2
10001054:	00004540 	call	10000454 <io_write>
    // data phase IN-1
    io_write(HPI_DATA, 0x051c); // 500
10001058:	01414704 	movi	r5,1308
1000105c:	0009883a 	mov	r4,zero
10001060:	00004540 	call	10000454 <io_write>

    io_write(HPI_DATA, 0x000f & data_size); // 2 data length
10001064:	d0a6d083 	ldbu	r2,-25790(gp)
10001068:	10803fcc 	andi	r2,r2,255
1000106c:	108003cc 	andi	r2,r2,15
10001070:	100b883a 	mov	r5,r2
10001074:	0009883a 	mov	r4,zero
10001078:	00004540 	call	10000454 <io_write>

    io_write(HPI_DATA, 0x0291);// 4 // endpoint 1
1000107c:	0140a444 	movi	r5,657
10001080:	0009883a 	mov	r4,zero
10001084:	00004540 	call	10000454 <io_write>
    if (toggle % 2) {
10001088:	d0a6cf83 	ldbu	r2,-25794(gp)
1000108c:	1080004c 	andi	r2,r2,1
10001090:	10803fcc 	andi	r2,r2,255
10001094:	10000426 	beq	r2,zero,100010a8 <keyboard_fetch+0x7c>
        io_write(HPI_DATA, 0x0001);// 6 // data 1
10001098:	01400044 	movi	r5,1
1000109c:	0009883a 	mov	r4,zero
100010a0:	00004540 	call	10000454 <io_write>
100010a4:	00000306 	br	100010b4 <keyboard_fetch+0x88>
    } else {
        io_write(HPI_DATA, 0x0041);// 6 // data 1
100010a8:	01401044 	movi	r5,65
100010ac:	0009883a 	mov	r4,zero
100010b0:	00004540 	call	10000454 <io_write>
    }
    io_write(HPI_DATA, 0x0013);// 8
100010b4:	014004c4 	movi	r5,19
100010b8:	0009883a 	mov	r4,zero
100010bc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);// a
100010c0:	000b883a 	mov	r5,zero
100010c4:	0009883a 	mov	r4,zero
100010c8:	00004540 	call	10000454 <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); // HUSB_SIE1_pCurrentTDPtr
100010cc:	01414004 	movi	r5,1280
100010d0:	01006c04 	movi	r4,432
100010d4:	00013300 	call	10001330 <usb_write>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100010d8:	00002506 	br	10001170 <keyboard_fetch+0x144>
    {
        io_write(HPI_ADDR, 0x0500); // the start address
100010dc:	01414004 	movi	r5,1280
100010e0:	01000084 	movi	r4,2
100010e4:	00004540 	call	10000454 <io_write>
        // data phase IN-1
        io_write(HPI_DATA, 0x051c); // 500
100010e8:	01414704 	movi	r5,1308
100010ec:	0009883a 	mov	r4,zero
100010f0:	00004540 	call	10000454 <io_write>

        io_write(HPI_DATA, 0x000f & data_size);// 2 data length
100010f4:	d0a6d083 	ldbu	r2,-25790(gp)
100010f8:	10803fcc 	andi	r2,r2,255
100010fc:	108003cc 	andi	r2,r2,15
10001100:	100b883a 	mov	r5,r2
10001104:	0009883a 	mov	r4,zero
10001108:	00004540 	call	10000454 <io_write>

        io_write(HPI_DATA, 0x0291);// 4 // endpoint 1
1000110c:	0140a444 	movi	r5,657
10001110:	0009883a 	mov	r4,zero
10001114:	00004540 	call	10000454 <io_write>
        if (toggle % 2) {
10001118:	d0a6cf83 	ldbu	r2,-25794(gp)
1000111c:	1080004c 	andi	r2,r2,1
10001120:	10803fcc 	andi	r2,r2,255
10001124:	10000426 	beq	r2,zero,10001138 <keyboard_fetch+0x10c>
            io_write(HPI_DATA, 0x0001);// 6 // data 1
10001128:	01400044 	movi	r5,1
1000112c:	0009883a 	mov	r4,zero
10001130:	00004540 	call	10000454 <io_write>
10001134:	00000306 	br	10001144 <keyboard_fetch+0x118>
        } else {
            io_write(HPI_DATA, 0x0041);// 6 // data 1
10001138:	01401044 	movi	r5,65
1000113c:	0009883a 	mov	r4,zero
10001140:	00004540 	call	10000454 <io_write>
        }
        io_write(HPI_DATA, 0x0013);// 8
10001144:	014004c4 	movi	r5,19
10001148:	0009883a 	mov	r4,zero
1000114c:	00004540 	call	10000454 <io_write>
        io_write(HPI_DATA, 0x0000);//
10001150:	000b883a 	mov	r5,zero
10001154:	0009883a 	mov	r4,zero
10001158:	00004540 	call	10000454 <io_write>
        usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); // HUSB_SIE1_pCurrentTDPtr
1000115c:	01414004 	movi	r5,1280
10001160:	01006c04 	movi	r4,432
10001164:	00013300 	call	10001330 <usb_write>
        usleep(10 * 1000);
10001168:	0109c404 	movi	r4,10000
1000116c:	000fc840 	call	1000fc84 <usleep>
    }
    io_write(HPI_DATA, 0x0013);// 8
    io_write(HPI_DATA, 0x0000);// a
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); // HUSB_SIE1_pCurrentTDPtr

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10001170:	010000c4 	movi	r4,3
10001174:	00004c40 	call	100004c4 <io_read>
10001178:	10bfffcc 	andi	r2,r2,65535
1000117c:	1080040c 	andi	r2,r2,16
10001180:	103fd626 	beq	r2,zero,100010dc <__alt_data_end+0xf80010dc>
        io_write(HPI_DATA, 0x0000);//
        usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); // HUSB_SIE1_pCurrentTDPtr
        usleep(10 * 1000);
    }

    usb_ctl_val = usb_wait_td_list_done();
10001184:	00023200 	call	10002320 <usb_wait_td_list_done>
10001188:	d0a6d00d 	sth	r2,-25792(gp)

    // The first two keycodes are stored in 0x051E. Other keycodes are in  subsequent addresses.
    *keycode = usb_read(0x051e);
1000118c:	01014784 	movi	r4,1310
10001190:	00013880 	call	10001388 <usb_read>
10001194:	10ffffcc 	andi	r3,r2,65535
10001198:	e0bfff17 	ldw	r2,-4(fp)
1000119c:	10c00015 	stw	r3,0(r2)
    printf("\nThe first two keycode values are %04x\n", keycode);
100011a0:	e17fff17 	ldw	r5,-4(fp)
100011a4:	01040074 	movhi	r4,4097
100011a8:	2108c704 	addi	r4,r4,8988
100011ac:	000251c0 	call	1000251c <printf>
    // We only need the first keycode, which is at the lower byte of keycode.
    // Send the keycode to hardware via PIO.
    *keycode_base = *keycode & 0xffu;
100011b0:	00803004 	movi	r2,192
100011b4:	e0ffff17 	ldw	r3,-4(fp)
100011b8:	18c00017 	ldw	r3,0(r3)
100011bc:	10c00005 	stb	r3,0(r2)

    usleep(200);// usleep(5000);
100011c0:	01003204 	movi	r4,200
100011c4:	000fc840 	call	1000fc84 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
100011c8:	d0a6ce0b 	ldhu	r2,-25800(gp)
100011cc:	10bfffcc 	andi	r2,r2,65535
100011d0:	1009883a 	mov	r4,r2
100011d4:	00013880 	call	10001388 <usb_read>
100011d8:	d0a6d00d 	sth	r2,-25792(gp)

    if (!(usb_ctl_val & no_device)) {
100011dc:	d0e6d00b 	ldhu	r3,-25792(gp)
100011e0:	d0a6ce8b 	ldhu	r2,-25798(gp)
100011e4:	1884703a 	and	r2,r3,r2
100011e8:	10bfffcc 	andi	r2,r2,65535
100011ec:	1000241e 	bne	r2,zero,10001280 <keyboard_fetch+0x254>
        // USB hot plug routine
        for (hot_plug_count = 0; hot_plug_count < 7; hot_plug_count++) {
100011f0:	d026d185 	stb	zero,-25786(gp)
100011f4:	00000f06 	br	10001234 <keyboard_fetch+0x208>
            usleep(5 * 1000);
100011f8:	0104e204 	movi	r4,5000
100011fc:	000fc840 	call	1000fc84 <usleep>
            usb_ctl_val = usb_read(ctl_reg);
10001200:	d0a6ce0b 	ldhu	r2,-25800(gp)
10001204:	10bfffcc 	andi	r2,r2,65535
10001208:	1009883a 	mov	r4,r2
1000120c:	00013880 	call	10001388 <usb_read>
10001210:	d0a6d00d 	sth	r2,-25792(gp)
            if (usb_ctl_val & no_device) break;
10001214:	d0e6d00b 	ldhu	r3,-25792(gp)
10001218:	d0a6ce8b 	ldhu	r2,-25798(gp)
1000121c:	1884703a 	and	r2,r3,r2
10001220:	10bfffcc 	andi	r2,r2,65535
10001224:	1000081e 	bne	r2,zero,10001248 <keyboard_fetch+0x21c>
    usleep(200);// usleep(5000);
    usb_ctl_val = usb_read(ctl_reg);

    if (!(usb_ctl_val & no_device)) {
        // USB hot plug routine
        for (hot_plug_count = 0; hot_plug_count < 7; hot_plug_count++) {
10001228:	d0a6d183 	ldbu	r2,-25786(gp)
1000122c:	10800044 	addi	r2,r2,1
10001230:	d0a6d185 	stb	r2,-25786(gp)
10001234:	d0a6d183 	ldbu	r2,-25786(gp)
10001238:	10803fcc 	andi	r2,r2,255
1000123c:	108001f0 	cmpltui	r2,r2,7
10001240:	103fed1e 	bne	r2,zero,100011f8 <__alt_data_end+0xf80011f8>
10001244:	00000106 	br	1000124c <keyboard_fetch+0x220>
            usleep(5 * 1000);
            usb_ctl_val = usb_read(ctl_reg);
            if (usb_ctl_val & no_device) break;
10001248:	0001883a 	nop
        }
        if (!(usb_ctl_val & no_device)) {
1000124c:	d0e6d00b 	ldhu	r3,-25792(gp)
10001250:	d0a6ce8b 	ldhu	r2,-25798(gp)
10001254:	1884703a 	and	r2,r3,r2
10001258:	10bfffcc 	andi	r2,r2,65535
1000125c:	1000081e 	bne	r2,zero,10001280 <keyboard_fetch+0x254>
            printf("\n[INFO]: the keyboard has been removed!!! \n");
10001260:	01040074 	movhi	r4,4097
10001264:	2108d104 	addi	r4,r4,9028
10001268:	00026180 	call	10002618 <puts>
            printf("[INFO]: please insert again!!! \n");
1000126c:	01040074 	movhi	r4,4097
10001270:	2108dc04 	addi	r4,r4,9072
10001274:	00026180 	call	10002618 <puts>
            return 1;
10001278:	00800044 	movi	r2,1
1000127c:	00000106 	br	10001284 <keyboard_fetch+0x258>
        }
    }

    return 0;
10001280:	0005883a 	mov	r2,zero
}
10001284:	e037883a 	mov	sp,fp
10001288:	dfc00117 	ldw	ra,4(sp)
1000128c:	df000017 	ldw	fp,0(sp)
10001290:	dec00204 	addi	sp,sp,8
10001294:	f800283a 	ret

10001298 <keyboard_hot_plugged>:

int keyboard_hot_plugged() {
10001298:	defffe04 	addi	sp,sp,-8
1000129c:	dfc00115 	stw	ra,4(sp)
100012a0:	df000015 	stw	fp,0(sp)
100012a4:	d839883a 	mov	fp,sp
    usb_ctl_val = usb_read(ctl_reg);
100012a8:	d0a6ce0b 	ldhu	r2,-25800(gp)
100012ac:	10bfffcc 	andi	r2,r2,65535
100012b0:	1009883a 	mov	r4,r2
100012b4:	00013880 	call	10001388 <usb_read>
100012b8:	d0a6d00d 	sth	r2,-25792(gp)
    usleep(5 * 1000);
100012bc:	0104e204 	movi	r4,5000
100012c0:	000fc840 	call	1000fc84 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
100012c4:	d0a6ce0b 	ldhu	r2,-25800(gp)
100012c8:	10bfffcc 	andi	r2,r2,65535
100012cc:	1009883a 	mov	r4,r2
100012d0:	00013880 	call	10001388 <usb_read>
100012d4:	d0a6d00d 	sth	r2,-25792(gp)
    usleep(5 * 1000);
100012d8:	0104e204 	movi	r4,5000
100012dc:	000fc840 	call	1000fc84 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
100012e0:	d0a6ce0b 	ldhu	r2,-25800(gp)
100012e4:	10bfffcc 	andi	r2,r2,65535
100012e8:	1009883a 	mov	r4,r2
100012ec:	00013880 	call	10001388 <usb_read>
100012f0:	d0a6d00d 	sth	r2,-25792(gp)
    usleep(5 * 1000);
100012f4:	0104e204 	movi	r4,5000
100012f8:	000fc840 	call	1000fc84 <usleep>

    if (usb_ctl_val & no_device) return 1;
100012fc:	d0e6d00b 	ldhu	r3,-25792(gp)
10001300:	d0a6ce8b 	ldhu	r2,-25798(gp)
10001304:	1884703a 	and	r2,r3,r2
10001308:	10bfffcc 	andi	r2,r2,65535
1000130c:	10000226 	beq	r2,zero,10001318 <keyboard_hot_plugged+0x80>
10001310:	00800044 	movi	r2,1
10001314:	00000106 	br	1000131c <keyboard_hot_plugged+0x84>

    return 0;
10001318:	0005883a 	mov	r2,zero
}
1000131c:	e037883a 	mov	sp,fp
10001320:	dfc00117 	ldw	ra,4(sp)
10001324:	df000017 	ldw	fp,0(sp)
10001328:	dec00204 	addi	sp,sp,8
1000132c:	f800283a 	ret

10001330 <usb_write>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_write(alt_u16 Address, alt_u16 Data) {
10001330:	defffc04 	addi	sp,sp,-16
10001334:	dfc00315 	stw	ra,12(sp)
10001338:	df000215 	stw	fp,8(sp)
1000133c:	df000204 	addi	fp,sp,8
10001340:	2007883a 	mov	r3,r4
10001344:	2805883a 	mov	r2,r5
10001348:	e0fffe0d 	sth	r3,-8(fp)
1000134c:	e0bfff0d 	sth	r2,-4(fp)
    io_write(HPI_ADDR, Address);
10001350:	e0bffe0b 	ldhu	r2,-8(fp)
10001354:	100b883a 	mov	r5,r2
10001358:	01000084 	movi	r4,2
1000135c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, Data);
10001360:	e0bfff0b 	ldhu	r2,-4(fp)
10001364:	100b883a 	mov	r5,r2
10001368:	0009883a 	mov	r4,zero
1000136c:	00004540 	call	10000454 <io_write>
}
10001370:	0001883a 	nop
10001374:	e037883a 	mov	sp,fp
10001378:	dfc00117 	ldw	ra,4(sp)
1000137c:	df000017 	ldw	fp,0(sp)
10001380:	dec00204 	addi	sp,sp,8
10001384:	f800283a 	ret

10001388 <usb_read>:
 * @return   The data read from the specified address
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 usb_read(alt_u16 Address) {
10001388:	defffd04 	addi	sp,sp,-12
1000138c:	dfc00215 	stw	ra,8(sp)
10001390:	df000115 	stw	fp,4(sp)
10001394:	df000104 	addi	fp,sp,4
10001398:	2005883a 	mov	r2,r4
1000139c:	e0bfff0d 	sth	r2,-4(fp)
    // Write the address into HPI address port register
    io_write(HPI_ADDR, Address);
100013a0:	e0bfff0b 	ldhu	r2,-4(fp)
100013a4:	100b883a 	mov	r5,r2
100013a8:	01000084 	movi	r4,2
100013ac:	00004540 	call	10000454 <io_write>
    return io_read(HPI_DATA);
100013b0:	0009883a 	mov	r4,zero
100013b4:	00004c40 	call	100004c4 <io_read>
}
100013b8:	e037883a 	mov	sp,fp
100013bc:	dfc00117 	ldw	ra,4(sp)
100013c0:	df000017 	ldw	fp,0(sp)
100013c4:	dec00204 	addi	sp,sp,8
100013c8:	f800283a 	ret

100013cc <usb_soft_reset>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_soft_reset() {
100013cc:	defffe04 	addi	sp,sp,-8
100013d0:	dfc00115 	stw	ra,4(sp)
100013d4:	df000015 	stw	fp,0(sp)
100013d8:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    io_write(HPI_MAILBOX, COMM_RESET); //COMM_JUMP2CODE
100013dc:	017e9414 	movui	r5,64080
100013e0:	01000044 	movi	r4,1
100013e4:	00004540 	call	10000454 <io_write>
    usleep(100000);
100013e8:	010000b4 	movhi	r4,2
100013ec:	2121a804 	addi	r4,r4,-31072
100013f0:	000fc840 	call	1000fc84 <usleep>
    printf("[USB INIT]:reset finished!\n");
100013f4:	01040074 	movhi	r4,4097
100013f8:	2108e404 	addi	r4,r4,9104
100013fc:	00026180 	call	10002618 <puts>

    usleep(500000);
10001400:	01000234 	movhi	r4,8
10001404:	21284804 	addi	r4,r4,-24288
10001408:	000fc840 	call	1000fc84 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
1000140c:	01040074 	movhi	r4,4097
10001410:	2108eb04 	addi	r4,r4,9132
10001414:	00026180 	call	10002618 <puts>
    io_read(HPI_MAILBOX);
10001418:	01000044 	movi	r4,1
1000141c:	00004c40 	call	100004c4 <io_read>
    io_read(HPI_STATUS);
10001420:	010000c4 	movi	r4,3
10001424:	00004c40 	call	100004c4 <io_read>

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    usb_read(HPI_SIE1_MSG_ADR);
10001428:	01005104 	movi	r4,324
1000142c:	00013880 	call	10001388 <usb_read>
    usb_write(HPI_SIE1_MSG_ADR, 0);
10001430:	000b883a 	mov	r5,zero
10001434:	01005104 	movi	r4,324
10001438:	00013300 	call	10001330 <usb_write>
    usb_read(HPI_SIE2_MSG_ADR);
1000143c:	01005204 	movi	r4,328
10001440:	00013880 	call	10001388 <usb_read>
    usb_write(HPI_SIE2_MSG_ADR, 0);
10001444:	000b883a 	mov	r5,zero
10001448:	01005204 	movi	r4,328
1000144c:	00013300 	call	10001330 <usb_write>


    usb_write(HOST1_STAT_REG, 0xFFFF);
10001450:	017fffd4 	movui	r5,65535
10001454:	01302414 	movui	r4,49296
10001458:	00013300 	call	10001330 <usb_write>
    usb_write(HOST2_STAT_REG, 0xFFFF);
1000145c:	017fffd4 	movui	r5,65535
10001460:	01302c14 	movui	r4,49328
10001464:	00013300 	call	10001330 <usb_write>
}
10001468:	0001883a 	nop
1000146c:	e037883a 	mov	sp,fp
10001470:	dfc00117 	ldw	ra,4(sp)
10001474:	df000017 	ldw	fp,0(sp)
10001478:	dec00204 	addi	sp,sp,8
1000147c:	f800283a 	ret

10001480 <usb_set_address>:


void usb_set_address() {
10001480:	defffe04 	addi	sp,sp,-8
10001484:	dfc00115 	stw	ra,4(sp)
10001488:	df000015 	stw	fp,0(sp)
1000148c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001490:	01414004 	movi	r5,1280
10001494:	01000084 	movi	r4,2
10001498:	00004540 	call	10000454 <io_write>
    // TD #1: 6 writes
    io_write(HPI_DATA, 0x050C);
1000149c:	01414304 	movi	r5,1292
100014a0:	0009883a 	mov	r4,zero
100014a4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100014a8:	01400204 	movi	r5,8
100014ac:	0009883a 	mov	r4,zero
100014b0:	00004540 	call	10000454 <io_write>
    // TASK: Complete with 4 more IOWR functions
    io_write(HPI_DATA, 0x00D0);
100014b4:	01403404 	movi	r5,208
100014b8:	0009883a 	mov	r4,zero
100014bc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
100014c0:	01400044 	movi	r5,1
100014c4:	0009883a 	mov	r4,zero
100014c8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
100014cc:	014004c4 	movi	r5,19
100014d0:	0009883a 	mov	r4,zero
100014d4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
100014d8:	01414504 	movi	r5,1300
100014dc:	0009883a 	mov	r4,zero
100014e0:	00004540 	call	10000454 <io_write>
    // TD #2: 4 writes
    // TASK: Complete with 4 IOWR functions
    io_write(HPI_DATA, 0x0500);
100014e4:	01414004 	movi	r5,1280
100014e8:	0009883a 	mov	r4,zero
100014ec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0002);
100014f0:	01400084 	movi	r5,2
100014f4:	0009883a 	mov	r4,zero
100014f8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
100014fc:	000b883a 	mov	r5,zero
10001500:	0009883a 	mov	r4,zero
10001504:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001508:	000b883a 	mov	r5,zero
1000150c:	0009883a 	mov	r4,zero
10001510:	00004540 	call	10000454 <io_write>
    // TD #3: 6 writes
    // TASK: Complete with 6 IOWR functions
    io_write(HPI_DATA, 0x0000); //
10001514:	000b883a 	mov	r5,zero
10001518:	0009883a 	mov	r4,zero
1000151c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//
10001520:	000b883a 	mov	r5,zero
10001524:	0009883a 	mov	r4,zero
10001528:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0090);//
1000152c:	01402404 	movi	r5,144
10001530:	0009883a 	mov	r4,zero
10001534:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);
10001538:	01401044 	movi	r5,65
1000153c:	0009883a 	mov	r4,zero
10001540:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001544:	014004c4 	movi	r5,19
10001548:	0009883a 	mov	r4,zero
1000154c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001550:	000b883a 	mov	r5,zero
10001554:	0009883a 	mov	r4,zero
10001558:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000155c:	01414004 	movi	r5,1280
10001560:	01006c04 	movi	r4,432
10001564:	00013300 	call	10001330 <usb_write>
}
10001568:	0001883a 	nop
1000156c:	e037883a 	mov	sp,fp
10001570:	dfc00117 	ldw	ra,4(sp)
10001574:	df000017 	ldw	fp,0(sp)
10001578:	dec00204 	addi	sp,sp,8
1000157c:	f800283a 	ret

10001580 <usb_get_device_desc1>:


void usb_get_device_desc1() {
10001580:	defffe04 	addi	sp,sp,-8
10001584:	dfc00115 	stw	ra,4(sp)
10001588:	df000015 	stw	fp,0(sp)
1000158c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001590:	01414004 	movi	r5,1280
10001594:	01000084 	movi	r4,2
10001598:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
1000159c:	01414304 	movi	r5,1292
100015a0:	0009883a 	mov	r4,zero
100015a4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100015a8:	01400204 	movi	r5,8
100015ac:	0009883a 	mov	r4,zero
100015b0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
100015b4:	0140b404 	movi	r5,720
100015b8:	0009883a 	mov	r4,zero
100015bc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
100015c0:	01400044 	movi	r5,1
100015c4:	0009883a 	mov	r4,zero
100015c8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
100015cc:	014004c4 	movi	r5,19
100015d0:	0009883a 	mov	r4,zero
100015d4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
100015d8:	01414504 	movi	r5,1300
100015dc:	0009883a 	mov	r4,zero
100015e0:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
100015e4:	0141a004 	movi	r5,1664
100015e8:	0009883a 	mov	r4,zero
100015ec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0100); //device 0x01
100015f0:	01404004 	movi	r5,256
100015f4:	0009883a 	mov	r4,zero
100015f8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
100015fc:	000b883a 	mov	r5,zero
10001600:	0009883a 	mov	r4,zero
10001604:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);
10001608:	01400204 	movi	r5,8
1000160c:	0009883a 	mov	r4,zero
10001610:	00004540 	call	10000454 <io_write>

    //data phase IN
    io_write(HPI_DATA, 0x052C); //
10001614:	01414b04 	movi	r5,1324
10001618:	0009883a 	mov	r4,zero
1000161c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//
10001620:	01400204 	movi	r5,8
10001624:	0009883a 	mov	r4,zero
10001628:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//
1000162c:	0140a404 	movi	r5,656
10001630:	0009883a 	mov	r4,zero
10001634:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);
10001638:	01401044 	movi	r5,65
1000163c:	0009883a 	mov	r4,zero
10001640:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001644:	014004c4 	movi	r5,19
10001648:	0009883a 	mov	r4,zero
1000164c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0520);
10001650:	01414804 	movi	r5,1312
10001654:	0009883a 	mov	r4,zero
10001658:	00004540 	call	10000454 <io_write>

    //    //status phase
    io_write(HPI_DATA, 0x0000); //don't care
1000165c:	000b883a 	mov	r5,zero
10001660:	0009883a 	mov	r4,zero
10001664:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//port number
10001668:	000b883a 	mov	r5,zero
1000166c:	0009883a 	mov	r4,zero
10001670:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0210);//device address
10001674:	01408404 	movi	r5,528
10001678:	0009883a 	mov	r4,zero
1000167c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);
10001680:	01401044 	movi	r5,65
10001684:	0009883a 	mov	r4,zero
10001688:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
1000168c:	014004c4 	movi	r5,19
10001690:	0009883a 	mov	r4,zero
10001694:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001698:	000b883a 	mov	r5,zero
1000169c:	0009883a 	mov	r4,zero
100016a0:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100016a4:	01414004 	movi	r5,1280
100016a8:	01006c04 	movi	r4,432
100016ac:	00013300 	call	10001330 <usb_write>
}
100016b0:	0001883a 	nop
100016b4:	e037883a 	mov	sp,fp
100016b8:	dfc00117 	ldw	ra,4(sp)
100016bc:	df000017 	ldw	fp,0(sp)
100016c0:	dec00204 	addi	sp,sp,8
100016c4:	f800283a 	ret

100016c8 <usb_get_device_desc2>:

void usb_get_device_desc2() {
100016c8:	defffe04 	addi	sp,sp,-8
100016cc:	dfc00115 	stw	ra,4(sp)
100016d0:	df000015 	stw	fp,0(sp)
100016d4:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100016d8:	01414004 	movi	r5,1280
100016dc:	01000084 	movi	r4,2
100016e0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
100016e4:	01414304 	movi	r5,1292
100016e8:	0009883a 	mov	r4,zero
100016ec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100016f0:	01400204 	movi	r5,8
100016f4:	0009883a 	mov	r4,zero
100016f8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
100016fc:	0140b404 	movi	r5,720
10001700:	0009883a 	mov	r4,zero
10001704:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
10001708:	01400044 	movi	r5,1
1000170c:	0009883a 	mov	r4,zero
10001710:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001714:	014004c4 	movi	r5,19
10001718:	0009883a 	mov	r4,zero
1000171c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
10001720:	01414504 	movi	r5,1300
10001724:	0009883a 	mov	r4,zero
10001728:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
1000172c:	0141a004 	movi	r5,1664
10001730:	0009883a 	mov	r4,zero
10001734:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0100);//e //device 0x01
10001738:	01404004 	movi	r5,256
1000173c:	0009883a 	mov	r4,zero
10001740:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10001744:	000b883a 	mov	r5,zero
10001748:	0009883a 	mov	r4,zero
1000174c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0012);//2
10001750:	01400484 	movi	r5,18
10001754:	0009883a 	mov	r4,zero
10001758:	00004540 	call	10000454 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
1000175c:	01415104 	movi	r5,1348
10001760:	0009883a 	mov	r4,zero
10001764:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10001768:	01400204 	movi	r5,8
1000176c:	0009883a 	mov	r4,zero
10001770:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10001774:	0140a404 	movi	r5,656
10001778:	0009883a 	mov	r4,zero
1000177c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10001780:	01401044 	movi	r5,65
10001784:	0009883a 	mov	r4,zero
10001788:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
1000178c:	014004c4 	movi	r5,19
10001790:	0009883a 	mov	r4,zero
10001794:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10001798:	01414804 	movi	r5,1312
1000179c:	0009883a 	mov	r4,zero
100017a0:	00004540 	call	10000454 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
100017a4:	01415304 	movi	r5,1356
100017a8:	0009883a 	mov	r4,zero
100017ac:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//2
100017b0:	01400204 	movi	r5,8
100017b4:	0009883a 	mov	r4,zero
100017b8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//4
100017bc:	0140a404 	movi	r5,656
100017c0:	0009883a 	mov	r4,zero
100017c4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//6
100017c8:	01400044 	movi	r5,1
100017cc:	0009883a 	mov	r4,zero
100017d0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//8
100017d4:	014004c4 	movi	r5,19
100017d8:	0009883a 	mov	r4,zero
100017dc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x052c);//a
100017e0:	01414b04 	movi	r5,1324
100017e4:	0009883a 	mov	r4,zero
100017e8:	00004540 	call	10000454 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0554); //c
100017ec:	01415504 	movi	r5,1364
100017f0:	0009883a 	mov	r4,zero
100017f4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0002);//e
100017f8:	01400084 	movi	r5,2
100017fc:	0009883a 	mov	r4,zero
10001800:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10001804:	0140a404 	movi	r5,656
10001808:	0009883a 	mov	r4,zero
1000180c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10001810:	01401044 	movi	r5,65
10001814:	0009883a 	mov	r4,zero
10001818:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//4
1000181c:	014004c4 	movi	r5,19
10001820:	0009883a 	mov	r4,zero
10001824:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10001828:	01414e04 	movi	r5,1336
1000182c:	0009883a 	mov	r4,zero
10001830:	00004540 	call	10000454 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //538
10001834:	000b883a 	mov	r5,zero
10001838:	0009883a 	mov	r4,zero
1000183c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//a
10001840:	000b883a 	mov	r5,zero
10001844:	0009883a 	mov	r4,zero
10001848:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0210);//c
1000184c:	01408404 	movi	r5,528
10001850:	0009883a 	mov	r4,zero
10001854:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//e
10001858:	01401044 	movi	r5,65
1000185c:	0009883a 	mov	r4,zero
10001860:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//540
10001864:	014004c4 	movi	r5,19
10001868:	0009883a 	mov	r4,zero
1000186c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//2
10001870:	000b883a 	mov	r5,zero
10001874:	0009883a 	mov	r4,zero
10001878:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000187c:	01414004 	movi	r5,1280
10001880:	01006c04 	movi	r4,432
10001884:	00013300 	call	10001330 <usb_write>
}
10001888:	0001883a 	nop
1000188c:	e037883a 	mov	sp,fp
10001890:	dfc00117 	ldw	ra,4(sp)
10001894:	df000017 	ldw	fp,0(sp)
10001898:	dec00204 	addi	sp,sp,8
1000189c:	f800283a 	ret

100018a0 <usb_get_config_desc1>:


void usb_get_config_desc1() {
100018a0:	defffe04 	addi	sp,sp,-8
100018a4:	dfc00115 	stw	ra,4(sp)
100018a8:	df000015 	stw	fp,0(sp)
100018ac:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100018b0:	01414004 	movi	r5,1280
100018b4:	01000084 	movi	r4,2
100018b8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
100018bc:	01414304 	movi	r5,1292
100018c0:	0009883a 	mov	r4,zero
100018c4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100018c8:	01400204 	movi	r5,8
100018cc:	0009883a 	mov	r4,zero
100018d0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
100018d4:	0140b404 	movi	r5,720
100018d8:	0009883a 	mov	r4,zero
100018dc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
100018e0:	01400044 	movi	r5,1
100018e4:	0009883a 	mov	r4,zero
100018e8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
100018ec:	014004c4 	movi	r5,19
100018f0:	0009883a 	mov	r4,zero
100018f4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
100018f8:	01414504 	movi	r5,1300
100018fc:	0009883a 	mov	r4,zero
10001900:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10001904:	0141a004 	movi	r5,1664
10001908:	0009883a 	mov	r4,zero
1000190c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10001910:	01408004 	movi	r5,512
10001914:	0009883a 	mov	r4,zero
10001918:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//0
1000191c:	000b883a 	mov	r5,zero
10001920:	0009883a 	mov	r4,zero
10001924:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0009);//2
10001928:	01400244 	movi	r5,9
1000192c:	0009883a 	mov	r4,zero
10001930:	00004540 	call	10000454 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10001934:	01415104 	movi	r5,1348
10001938:	0009883a 	mov	r4,zero
1000193c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10001940:	01400204 	movi	r5,8
10001944:	0009883a 	mov	r4,zero
10001948:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
1000194c:	0140a404 	movi	r5,656
10001950:	0009883a 	mov	r4,zero
10001954:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10001958:	01401044 	movi	r5,65
1000195c:	0009883a 	mov	r4,zero
10001960:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10001964:	014004c4 	movi	r5,19
10001968:	0009883a 	mov	r4,zero
1000196c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10001970:	01414804 	movi	r5,1312
10001974:	0009883a 	mov	r4,zero
10001978:	00004540 	call	10000454 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
1000197c:	01415304 	movi	r5,1356
10001980:	0009883a 	mov	r4,zero
10001984:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//2
10001988:	01400044 	movi	r5,1
1000198c:	0009883a 	mov	r4,zero
10001990:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10001994:	0140a404 	movi	r5,656
10001998:	0009883a 	mov	r4,zero
1000199c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
100019a0:	01400044 	movi	r5,1
100019a4:	0009883a 	mov	r4,zero
100019a8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//8
100019ac:	014004c4 	movi	r5,19
100019b0:	0009883a 	mov	r4,zero
100019b4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x052c);//a
100019b8:	01414b04 	movi	r5,1324
100019bc:	0009883a 	mov	r4,zero
100019c0:	00004540 	call	10000454 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
100019c4:	000b883a 	mov	r5,zero
100019c8:	0009883a 	mov	r4,zero
100019cc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//e
100019d0:	000b883a 	mov	r5,zero
100019d4:	0009883a 	mov	r4,zero
100019d8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0210);//530
100019dc:	01408404 	movi	r5,528
100019e0:	0009883a 	mov	r4,zero
100019e4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//2
100019e8:	01401044 	movi	r5,65
100019ec:	0009883a 	mov	r4,zero
100019f0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//4
100019f4:	014004c4 	movi	r5,19
100019f8:	0009883a 	mov	r4,zero
100019fc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10001a00:	000b883a 	mov	r5,zero
10001a04:	0009883a 	mov	r4,zero
10001a08:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a0c:	01414004 	movi	r5,1280
10001a10:	01006c04 	movi	r4,432
10001a14:	00013300 	call	10001330 <usb_write>
}
10001a18:	0001883a 	nop
10001a1c:	e037883a 	mov	sp,fp
10001a20:	dfc00117 	ldw	ra,4(sp)
10001a24:	df000017 	ldw	fp,0(sp)
10001a28:	dec00204 	addi	sp,sp,8
10001a2c:	f800283a 	ret

10001a30 <usb_get_config_desc2>:


void usb_get_config_desc2() {
10001a30:	defffe04 	addi	sp,sp,-8
10001a34:	dfc00115 	stw	ra,4(sp)
10001a38:	df000015 	stw	fp,0(sp)
10001a3c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001a40:	01414004 	movi	r5,1280
10001a44:	01000084 	movi	r4,2
10001a48:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
10001a4c:	01414304 	movi	r5,1292
10001a50:	0009883a 	mov	r4,zero
10001a54:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10001a58:	01400204 	movi	r5,8
10001a5c:	0009883a 	mov	r4,zero
10001a60:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10001a64:	0140b404 	movi	r5,720
10001a68:	0009883a 	mov	r4,zero
10001a6c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
10001a70:	01400044 	movi	r5,1
10001a74:	0009883a 	mov	r4,zero
10001a78:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001a7c:	014004c4 	movi	r5,19
10001a80:	0009883a 	mov	r4,zero
10001a84:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
10001a88:	01414504 	movi	r5,1300
10001a8c:	0009883a 	mov	r4,zero
10001a90:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10001a94:	0141a004 	movi	r5,1664
10001a98:	0009883a 	mov	r4,zero
10001a9c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10001aa0:	01408004 	movi	r5,512
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10001aac:	000b883a 	mov	r5,zero
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x00FF);//2
10001ab8:	01403fc4 	movi	r5,255
10001abc:	0009883a 	mov	r4,zero
10001ac0:	00004540 	call	10000454 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x055c); //514
10001ac4:	01415704 	movi	r5,1372
10001ac8:	0009883a 	mov	r4,zero
10001acc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10001ad0:	01400204 	movi	r5,8
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10001adc:	0140a404 	movi	r5,656
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10001ae8:	01401044 	movi	r5,65
10001aec:	0009883a 	mov	r4,zero
10001af0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10001af4:	014004c4 	movi	r5,19
10001af8:	0009883a 	mov	r4,zero
10001afc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10001b00:	01414804 	movi	r5,1312
10001b04:	0009883a 	mov	r4,zero
10001b08:	00004540 	call	10000454 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0564); //520
10001b0c:	01415904 	movi	r5,1380
10001b10:	0009883a 	mov	r4,zero
10001b14:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//2
10001b18:	01400204 	movi	r5,8
10001b1c:	0009883a 	mov	r4,zero
10001b20:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10001b24:	0140a404 	movi	r5,656
10001b28:	0009883a 	mov	r4,zero
10001b2c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10001b30:	01400044 	movi	r5,1
10001b34:	0009883a 	mov	r4,zero
10001b38:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10001b3c:	014004c4 	movi	r5,19
10001b40:	0009883a 	mov	r4,zero
10001b44:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10001b48:	01414b04 	movi	r5,1324
10001b4c:	0009883a 	mov	r4,zero
10001b50:	00004540 	call	10000454 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x056c); //52c
10001b54:	01415b04 	movi	r5,1388
10001b58:	0009883a 	mov	r4,zero
10001b5c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10001b60:	01400204 	movi	r5,8
10001b64:	0009883a 	mov	r4,zero
10001b68:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10001b6c:	0140a404 	movi	r5,656
10001b70:	0009883a 	mov	r4,zero
10001b74:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10001b78:	01401044 	movi	r5,65
10001b7c:	0009883a 	mov	r4,zero
10001b80:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10001b84:	014004c4 	movi	r5,19
10001b88:	0009883a 	mov	r4,zero
10001b8c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10001b90:	01414e04 	movi	r5,1336
10001b94:	0009883a 	mov	r4,zero
10001b98:	00004540 	call	10000454 <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0574); //538
10001b9c:	01415d04 	movi	r5,1396
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//a
10001ba8:	01400204 	movi	r5,8
10001bac:	0009883a 	mov	r4,zero
10001bb0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10001bb4:	0140a404 	movi	r5,656
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10001bc0:	01400044 	movi	r5,1
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//540
10001bcc:	014004c4 	movi	r5,19
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0544);//2
10001bd8:	01415104 	movi	r5,1348
10001bdc:	0009883a 	mov	r4,zero
10001be0:	00004540 	call	10000454 <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x057c); //544
10001be4:	01415f04 	movi	r5,1404
10001be8:	0009883a 	mov	r4,zero
10001bec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0002);//6
10001bf0:	01400084 	movi	r5,2
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10001bfc:	0140a404 	movi	r5,656
10001c00:	0009883a 	mov	r4,zero
10001c04:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
10001c08:	01401044 	movi	r5,65
10001c0c:	0009883a 	mov	r4,zero
10001c10:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10001c14:	014004c4 	movi	r5,19
10001c18:	0009883a 	mov	r4,zero
10001c1c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0550);//e
10001c20:	01415404 	movi	r5,1360
10001c24:	0009883a 	mov	r4,zero
10001c28:	00004540 	call	10000454 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //550
10001c2c:	000b883a 	mov	r5,zero
10001c30:	0009883a 	mov	r4,zero
10001c34:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//2
10001c38:	000b883a 	mov	r5,zero
10001c3c:	0009883a 	mov	r4,zero
10001c40:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0210);//4
10001c44:	01408404 	movi	r5,528
10001c48:	0009883a 	mov	r4,zero
10001c4c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//6
10001c50:	01401044 	movi	r5,65
10001c54:	0009883a 	mov	r4,zero
10001c58:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10001c5c:	014004c4 	movi	r5,19
10001c60:	0009883a 	mov	r4,zero
10001c64:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//a
10001c68:	000b883a 	mov	r5,zero
10001c6c:	0009883a 	mov	r4,zero
10001c70:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c74:	01414004 	movi	r5,1280
10001c78:	01006c04 	movi	r4,432
10001c7c:	00013300 	call	10001330 <usb_write>
}
10001c80:	0001883a 	nop
10001c84:	e037883a 	mov	sp,fp
10001c88:	dfc00117 	ldw	ra,4(sp)
10001c8c:	df000017 	ldw	fp,0(sp)
10001c90:	dec00204 	addi	sp,sp,8
10001c94:	f800283a 	ret

10001c98 <usb_set_config>:

void usb_set_config() {
10001c98:	defffe04 	addi	sp,sp,-8
10001c9c:	dfc00115 	stw	ra,4(sp)
10001ca0:	df000015 	stw	fp,0(sp)
10001ca4:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001ca8:	01414004 	movi	r5,1280
10001cac:	01000084 	movi	r4,2
10001cb0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
10001cb4:	01414304 	movi	r5,1292
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10001cc0:	01400204 	movi	r5,8
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10001ccc:	0140b404 	movi	r5,720
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
10001cd8:	01400044 	movi	r5,1
10001cdc:	0009883a 	mov	r4,zero
10001ce0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001ce4:	014004c4 	movi	r5,19
10001ce8:	0009883a 	mov	r4,zero
10001cec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
10001cf0:	01414504 	movi	r5,1300
10001cf4:	0009883a 	mov	r4,zero
10001cf8:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0900);
10001cfc:	01424004 	movi	r5,2304
10001d00:	0009883a 	mov	r4,zero
10001d04:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//device address
10001d08:	01400044 	movi	r5,1
10001d0c:	0009883a 	mov	r4,zero
10001d10:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001d14:	000b883a 	mov	r5,zero
10001d18:	0009883a 	mov	r4,zero
10001d1c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001d20:	000b883a 	mov	r5,zero
10001d24:	0009883a 	mov	r4,zero
10001d28:	00004540 	call	10000454 <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10001d2c:	000b883a 	mov	r5,zero
10001d30:	0009883a 	mov	r4,zero
10001d34:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//port number
10001d38:	000b883a 	mov	r5,zero
10001d3c:	0009883a 	mov	r4,zero
10001d40:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//device address
10001d44:	0140a404 	movi	r5,656
10001d48:	0009883a 	mov	r4,zero
10001d4c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
10001d50:	01401044 	movi	r5,65
10001d54:	0009883a 	mov	r4,zero
10001d58:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001d5c:	014004c4 	movi	r5,19
10001d60:	0009883a 	mov	r4,zero
10001d64:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001d68:	000b883a 	mov	r5,zero
10001d6c:	0009883a 	mov	r4,zero
10001d70:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d74:	01414004 	movi	r5,1280
10001d78:	01006c04 	movi	r4,432
10001d7c:	00013300 	call	10001330 <usb_write>

}
10001d80:	0001883a 	nop
10001d84:	e037883a 	mov	sp,fp
10001d88:	dfc00117 	ldw	ra,4(sp)
10001d8c:	df000017 	ldw	fp,0(sp)
10001d90:	dec00204 	addi	sp,sp,8
10001d94:	f800283a 	ret

10001d98 <usb_class_request>:

void usb_class_request() {
10001d98:	defffe04 	addi	sp,sp,-8
10001d9c:	dfc00115 	stw	ra,4(sp)
10001da0:	df000015 	stw	fp,0(sp)
10001da4:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001da8:	01414004 	movi	r5,1280
10001dac:	01000084 	movi	r4,2
10001db0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
10001db4:	01414304 	movi	r5,1292
10001db8:	0009883a 	mov	r4,zero
10001dbc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10001dc0:	01400204 	movi	r5,8
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10001dcc:	0140b404 	movi	r5,720
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
10001dd8:	01400044 	movi	r5,1
10001ddc:	0009883a 	mov	r4,zero
10001de0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001de4:	014004c4 	movi	r5,19
10001de8:	0009883a 	mov	r4,zero
10001dec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
10001df0:	01414504 	movi	r5,1300
10001df4:	0009883a 	mov	r4,zero
10001df8:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0A21);
10001dfc:	01428844 	movi	r5,2593
10001e00:	0009883a 	mov	r4,zero
10001e04:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//device address
10001e08:	000b883a 	mov	r5,zero
10001e0c:	0009883a 	mov	r4,zero
10001e10:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001e14:	000b883a 	mov	r5,zero
10001e18:	0009883a 	mov	r4,zero
10001e1c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001e20:	000b883a 	mov	r5,zero
10001e24:	0009883a 	mov	r4,zero
10001e28:	00004540 	call	10000454 <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10001e2c:	000b883a 	mov	r5,zero
10001e30:	0009883a 	mov	r4,zero
10001e34:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//port number /data length
10001e38:	000b883a 	mov	r5,zero
10001e3c:	0009883a 	mov	r4,zero
10001e40:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//device address
10001e44:	0140a404 	movi	r5,656
10001e48:	0009883a 	mov	r4,zero
10001e4c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
10001e50:	01401044 	movi	r5,65
10001e54:	0009883a 	mov	r4,zero
10001e58:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001e5c:	014004c4 	movi	r5,19
10001e60:	0009883a 	mov	r4,zero
10001e64:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);
10001e68:	000b883a 	mov	r5,zero
10001e6c:	0009883a 	mov	r4,zero
10001e70:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e74:	01414004 	movi	r5,1280
10001e78:	01006c04 	movi	r4,432
10001e7c:	00013300 	call	10001330 <usb_write>
}
10001e80:	0001883a 	nop
10001e84:	e037883a 	mov	sp,fp
10001e88:	dfc00117 	ldw	ra,4(sp)
10001e8c:	df000017 	ldw	fp,0(sp)
10001e90:	dec00204 	addi	sp,sp,8
10001e94:	f800283a 	ret

10001e98 <usb_get_hid_desc>:


void usb_get_hid_desc() {
10001e98:	defffe04 	addi	sp,sp,-8
10001e9c:	dfc00115 	stw	ra,4(sp)
10001ea0:	df000015 	stw	fp,0(sp)
10001ea4:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001ea8:	01414004 	movi	r5,1280
10001eac:	01000084 	movi	r4,2
10001eb0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
10001eb4:	01414304 	movi	r5,1292
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10001ec0:	01400204 	movi	r5,8
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10001ecc:	0140b404 	movi	r5,720
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
10001ed8:	01400044 	movi	r5,1
10001edc:	0009883a 	mov	r4,zero
10001ee0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
10001ee4:	014004c4 	movi	r5,19
10001ee8:	0009883a 	mov	r4,zero
10001eec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
10001ef0:	01414504 	movi	r5,1300
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
10001efc:	0141a044 	movi	r5,1665
10001f00:	0009883a 	mov	r4,zero
10001f04:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x2100);//e //HID 0x21
10001f08:	01484004 	movi	r5,8448
10001f0c:	0009883a 	mov	r4,zero
10001f10:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10001f14:	000b883a 	mov	r5,zero
10001f18:	0009883a 	mov	r4,zero
10001f1c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x007B);//2
10001f20:	01401ec4 	movi	r5,123
10001f24:	0009883a 	mov	r4,zero
10001f28:	00004540 	call	10000454 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10001f2c:	01415104 	movi	r5,1348
10001f30:	0009883a 	mov	r4,zero
10001f34:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10001f38:	01400204 	movi	r5,8
10001f3c:	0009883a 	mov	r4,zero
10001f40:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10001f44:	0140a404 	movi	r5,656
10001f48:	0009883a 	mov	r4,zero
10001f4c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10001f50:	01401044 	movi	r5,65
10001f54:	0009883a 	mov	r4,zero
10001f58:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10001f5c:	014004c4 	movi	r5,19
10001f60:	0009883a 	mov	r4,zero
10001f64:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10001f68:	01414804 	movi	r5,1312
10001f6c:	0009883a 	mov	r4,zero
10001f70:	00004540 	call	10000454 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
10001f74:	000b883a 	mov	r5,zero
10001f78:	0009883a 	mov	r4,zero
10001f7c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//e
10001f80:	000b883a 	mov	r5,zero
10001f84:	0009883a 	mov	r4,zero
10001f88:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0210);//530
10001f8c:	01408404 	movi	r5,528
10001f90:	0009883a 	mov	r4,zero
10001f94:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10001f98:	01401044 	movi	r5,65
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10001fa4:	014004c4 	movi	r5,19
10001fa8:	0009883a 	mov	r4,zero
10001fac:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10001fb0:	000b883a 	mov	r5,zero
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10001fbc:	01414004 	movi	r5,1280
10001fc0:	01006c04 	movi	r4,432
10001fc4:	00013300 	call	10001330 <usb_write>

}
10001fc8:	0001883a 	nop
10001fcc:	e037883a 	mov	sp,fp
10001fd0:	dfc00117 	ldw	ra,4(sp)
10001fd4:	df000017 	ldw	fp,0(sp)
10001fd8:	dec00204 	addi	sp,sp,8
10001fdc:	f800283a 	ret

10001fe0 <usb_get_report_desc>:


void usb_get_report_desc() {
10001fe0:	defffe04 	addi	sp,sp,-8
10001fe4:	dfc00115 	stw	ra,4(sp)
10001fe8:	df000015 	stw	fp,0(sp)
10001fec:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10001ff0:	01414004 	movi	r5,1280
10001ff4:	01000084 	movi	r4,2
10001ff8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x050C);
10001ffc:	01414304 	movi	r5,1292
10002000:	0009883a 	mov	r4,zero
10002004:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10002008:	01400204 	movi	r5,8
1000200c:	0009883a 	mov	r4,zero
10002010:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10002014:	0140b404 	movi	r5,720
10002018:	0009883a 	mov	r4,zero
1000201c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);
10002020:	01400044 	movi	r5,1
10002024:	0009883a 	mov	r4,zero
10002028:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);
1000202c:	014004c4 	movi	r5,19
10002030:	0009883a 	mov	r4,zero
10002034:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0514);
10002038:	01414504 	movi	r5,1300
1000203c:	0009883a 	mov	r4,zero
10002040:	00004540 	call	10000454 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
10002044:	0141a044 	movi	r5,1665
10002048:	0009883a 	mov	r4,zero
1000204c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x2200);//e //report 0x22
10002050:	01488004 	movi	r5,8704
10002054:	0009883a 	mov	r4,zero
10002058:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//0
1000205c:	000b883a 	mov	r5,zero
10002060:	0009883a 	mov	r4,zero
10002064:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x007B);//2
10002068:	01401ec4 	movi	r5,123
1000206c:	0009883a 	mov	r4,zero
10002070:	00004540 	call	10000454 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0580); //514
10002074:	01416004 	movi	r5,1408
10002078:	0009883a 	mov	r4,zero
1000207c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10002080:	01400204 	movi	r5,8
10002084:	0009883a 	mov	r4,zero
10002088:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
1000208c:	0140a404 	movi	r5,656
10002090:	0009883a 	mov	r4,zero
10002094:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10002098:	01401044 	movi	r5,65
1000209c:	0009883a 	mov	r4,zero
100020a0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
100020a4:	014004c4 	movi	r5,19
100020a8:	0009883a 	mov	r4,zero
100020ac:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0520);//e
100020b0:	01414804 	movi	r5,1312
100020b4:	0009883a 	mov	r4,zero
100020b8:	00004540 	call	10000454 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0588); //520
100020bc:	01416204 	movi	r5,1416
100020c0:	0009883a 	mov	r4,zero
100020c4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//2
100020c8:	01400204 	movi	r5,8
100020cc:	0009883a 	mov	r4,zero
100020d0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//4
100020d4:	0140a404 	movi	r5,656
100020d8:	0009883a 	mov	r4,zero
100020dc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
100020e0:	01400044 	movi	r5,1
100020e4:	0009883a 	mov	r4,zero
100020e8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//8
100020ec:	014004c4 	movi	r5,19
100020f0:	0009883a 	mov	r4,zero
100020f4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x052c);//a
100020f8:	01414b04 	movi	r5,1324
100020fc:	0009883a 	mov	r4,zero
10002100:	00004540 	call	10000454 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0590); //52c
10002104:	01416404 	movi	r5,1424
10002108:	0009883a 	mov	r4,zero
1000210c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10002110:	01400204 	movi	r5,8
10002114:	0009883a 	mov	r4,zero
10002118:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//530
1000211c:	0140a404 	movi	r5,656
10002120:	0009883a 	mov	r4,zero
10002124:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10002128:	01401044 	movi	r5,65
1000212c:	0009883a 	mov	r4,zero
10002130:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10002134:	014004c4 	movi	r5,19
10002138:	0009883a 	mov	r4,zero
1000213c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10002140:	01414e04 	movi	r5,1336
10002144:	0009883a 	mov	r4,zero
10002148:	00004540 	call	10000454 <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0598); //538
1000214c:	01416604 	movi	r5,1432
10002150:	0009883a 	mov	r4,zero
10002154:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//a
10002158:	01400204 	movi	r5,8
1000215c:	0009883a 	mov	r4,zero
10002160:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10002164:	0140a404 	movi	r5,656
10002168:	0009883a 	mov	r4,zero
1000216c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10002170:	01400044 	movi	r5,1
10002174:	0009883a 	mov	r4,zero
10002178:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//540
1000217c:	014004c4 	movi	r5,19
10002180:	0009883a 	mov	r4,zero
10002184:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0544);//2
10002188:	01415104 	movi	r5,1348
1000218c:	0009883a 	mov	r4,zero
10002190:	00004540 	call	10000454 <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x05a0); //544
10002194:	01416804 	movi	r5,1440
10002198:	0009883a 	mov	r4,zero
1000219c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//6
100021a0:	01400204 	movi	r5,8
100021a4:	0009883a 	mov	r4,zero
100021a8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//8
100021ac:	0140a404 	movi	r5,656
100021b0:	0009883a 	mov	r4,zero
100021b4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
100021b8:	01401044 	movi	r5,65
100021bc:	0009883a 	mov	r4,zero
100021c0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
100021c4:	014004c4 	movi	r5,19
100021c8:	0009883a 	mov	r4,zero
100021cc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0550);//e
100021d0:	01415404 	movi	r5,1360
100021d4:	0009883a 	mov	r4,zero
100021d8:	00004540 	call	10000454 <io_write>

    //data phase IN-6
    io_write(HPI_DATA, 0x05a8); //550
100021dc:	01416a04 	movi	r5,1448
100021e0:	0009883a 	mov	r4,zero
100021e4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//2
100021e8:	01400204 	movi	r5,8
100021ec:	0009883a 	mov	r4,zero
100021f0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//4
100021f4:	0140a404 	movi	r5,656
100021f8:	0009883a 	mov	r4,zero
100021fc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10002200:	01400044 	movi	r5,1
10002204:	0009883a 	mov	r4,zero
10002208:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//8
1000220c:	014004c4 	movi	r5,19
10002210:	0009883a 	mov	r4,zero
10002214:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x055c);//a
10002218:	01415704 	movi	r5,1372
1000221c:	0009883a 	mov	r4,zero
10002220:	00004540 	call	10000454 <io_write>

    //data phase IN-7
    io_write(HPI_DATA, 0x05b0); //c
10002224:	01416c04 	movi	r5,1456
10002228:	0009883a 	mov	r4,zero
1000222c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10002230:	01400204 	movi	r5,8
10002234:	0009883a 	mov	r4,zero
10002238:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//560
1000223c:	0140a404 	movi	r5,656
10002240:	0009883a 	mov	r4,zero
10002244:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//2 //data1
10002248:	01401044 	movi	r5,65
1000224c:	0009883a 	mov	r4,zero
10002250:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10002254:	014004c4 	movi	r5,19
10002258:	0009883a 	mov	r4,zero
1000225c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0568);//6
10002260:	01415a04 	movi	r5,1384
10002264:	0009883a 	mov	r4,zero
10002268:	00004540 	call	10000454 <io_write>

    //data phase IN-8
    io_write(HPI_DATA, 0x05b8); //8
1000226c:	01416e04 	movi	r5,1464
10002270:	0009883a 	mov	r4,zero
10002274:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0003);//a
10002278:	014000c4 	movi	r5,3
1000227c:	0009883a 	mov	r4,zero
10002280:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10002284:	0140a404 	movi	r5,656
10002288:	0009883a 	mov	r4,zero
1000228c:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10002290:	01400044 	movi	r5,1
10002294:	0009883a 	mov	r4,zero
10002298:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//570
1000229c:	014004c4 	movi	r5,19
100022a0:	0009883a 	mov	r4,zero
100022a4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0574);//2
100022a8:	01415d04 	movi	r5,1396
100022ac:	0009883a 	mov	r4,zero
100022b0:	00004540 	call	10000454 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //574
100022b4:	000b883a 	mov	r5,zero
100022b8:	0009883a 	mov	r4,zero
100022bc:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//6
100022c0:	000b883a 	mov	r5,zero
100022c4:	0009883a 	mov	r4,zero
100022c8:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0210);//8
100022cc:	01408404 	movi	r5,528
100022d0:	0009883a 	mov	r4,zero
100022d4:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0041);//a
100022d8:	01401044 	movi	r5,65
100022dc:	0009883a 	mov	r4,zero
100022e0:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0013);//c
100022e4:	014004c4 	movi	r5,19
100022e8:	0009883a 	mov	r4,zero
100022ec:	00004540 	call	10000454 <io_write>
    io_write(HPI_DATA, 0x0000);//e
100022f0:	000b883a 	mov	r5,zero
100022f4:	0009883a 	mov	r4,zero
100022f8:	00004540 	call	10000454 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100022fc:	01414004 	movi	r5,1280
10002300:	01006c04 	movi	r4,432
10002304:	00013300 	call	10001330 <usb_write>

}
10002308:	0001883a 	nop
1000230c:	e037883a 	mov	sp,fp
10002310:	dfc00117 	ldw	ra,4(sp)
10002314:	df000017 	ldw	fp,0(sp)
10002318:	dec00204 	addi	sp,sp,8
1000231c:	f800283a 	ret

10002320 <usb_wait_td_list_done>:


alt_u16 usb_wait_td_list_done() {
10002320:	defffd04 	addi	sp,sp,-12
10002324:	dfc00215 	stw	ra,8(sp)
10002328:	df000115 	stw	fp,4(sp)
1000232c:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
10002330:	01005104 	movi	r4,324
10002334:	00013880 	call	10001388 <usb_read>
10002338:	e0bfff0d 	sth	r2,-4(fp)
    usb_write(HPI_SIE1_MSG_ADR, 0);
1000233c:	000b883a 	mov	r5,zero
10002340:	01005104 	movi	r4,324
10002344:	00013300 	call	10001330 <usb_write>
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002348:	00000d06 	br	10002380 <usb_wait_td_list_done+0x60>
    {
        if (usb_ctl_val == 0x0000) {
1000234c:	e0bfff0b 	ldhu	r2,-4(fp)
10002350:	10000526 	beq	r2,zero,10002368 <usb_wait_td_list_done+0x48>
        } else {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10002354:	e0bfff0b 	ldhu	r2,-4(fp)
10002358:	100b883a 	mov	r5,r2
1000235c:	01040074 	movhi	r4,4097
10002360:	2108f404 	addi	r4,r4,9168
10002364:	000251c0 	call	1000251c <printf>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
10002368:	01005104 	movi	r4,324
1000236c:	00013880 	call	10001388 <usb_read>
10002370:	e0bfff0d 	sth	r2,-4(fp)
        usb_write(HPI_SIE1_MSG_ADR, 0);
10002374:	000b883a 	mov	r5,zero
10002378:	01005104 	movi	r4,324
1000237c:	00013300 	call	10001330 <usb_write>
alt_u16 usb_wait_td_list_done() {
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
    usb_write(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002380:	e0bfff0b 	ldhu	r2,-4(fp)
10002384:	10840018 	cmpnei	r2,r2,4096
10002388:	103ff01e 	bne	r2,zero,1000234c <__alt_data_end+0xf800234c>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
        usb_write(HPI_SIE1_MSG_ADR, 0);
    }

    return usb_ctl_val;
1000238c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002390:	e037883a 	mov	sp,fp
10002394:	dfc00117 	ldw	ra,4(sp)
10002398:	df000017 	ldw	fp,0(sp)
1000239c:	dec00204 	addi	sp,sp,8
100023a0:	f800283a 	ret

100023a4 <usb_get_retry_cnt>:


alt_u16 usb_get_retry_cnt() {
100023a4:	defffd04 	addi	sp,sp,-12
100023a8:	dfc00215 	stw	ra,8(sp)
100023ac:	df000115 	stw	fp,4(sp)
100023b0:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    io_read(HPI_STATUS);
100023b4:	010000c4 	movi	r4,3
100023b8:	00004c40 	call	100004c4 <io_read>
    if (usb_read(HPI_SIE1_MSG_ADR) == HUSB_TDListDone) {
100023bc:	01005104 	movi	r4,324
100023c0:	00013880 	call	10001388 <usb_read>
100023c4:	10bfffcc 	andi	r2,r2,65535
100023c8:	10840018 	cmpnei	r2,r2,4096
100023cc:	1000091e 	bne	r2,zero,100023f4 <usb_get_retry_cnt+0x50>
        usb_write(HPI_SIE1_MSG_ADR, 0);
100023d0:	000b883a 	mov	r5,zero
100023d4:	01005104 	movi	r4,324
100023d8:	00013300 	call	10001330 <usb_write>

        while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  //read sie1 msg register
100023dc:	0001883a 	nop
100023e0:	010000c4 	movi	r4,3
100023e4:	00004c40 	call	100004c4 <io_read>
100023e8:	10bfffcc 	andi	r2,r2,65535
100023ec:	1080040c 	andi	r2,r2,16
100023f0:	103ffb26 	beq	r2,zero,100023e0 <__alt_data_end+0xf80023e0>
        {
        }
    }
    //usleep(1000);
    io_write(HPI_ADDR, 0x0508);
100023f4:	01414204 	movi	r5,1288
100023f8:	01000084 	movi	r4,2
100023fc:	00004540 	call	10000454 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002400:	0009883a 	mov	r4,zero
10002404:	00004c40 	call	100004c4 <io_read>
10002408:	e0bfff0d 	sth	r2,-4(fp)

    return usb_ctl_val;
1000240c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002410:	e037883a 	mov	sp,fp
10002414:	dfc00117 	ldw	ra,4(sp)
10002418:	df000017 	ldw	fp,0(sp)
1000241c:	dec00204 	addi	sp,sp,8
10002420:	f800283a 	ret

10002424 <usb_print_mem>:


void usb_print_mem() {
10002424:	defffc04 	addi	sp,sp,-16
10002428:	dfc00315 	stw	ra,12(sp)
1000242c:	df000215 	stw	fp,8(sp)
10002430:	df000204 	addi	fp,sp,8
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
10002434:	01414004 	movi	r5,1280
10002438:	01000084 	movi	r4,2
1000243c:	00004540 	call	10000454 <io_write>
    for (i = 0; i <= 200; i += 2) {
10002440:	e03ffe15 	stw	zero,-8(fp)
10002444:	00000e06 	br	10002480 <usb_print_mem+0x5c>
        code = io_read(HPI_DATA);
10002448:	0009883a 	mov	r4,zero
1000244c:	00004c40 	call	100004c4 <io_read>
10002450:	10bfffcc 	andi	r2,r2,65535
10002454:	e0bfff15 	stw	r2,-4(fp)
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
10002458:	e0bffe17 	ldw	r2,-8(fp)
1000245c:	10814004 	addi	r2,r2,1280
10002460:	e1bfff17 	ldw	r6,-4(fp)
10002464:	100b883a 	mov	r5,r2
10002468:	01040074 	movhi	r4,4097
1000246c:	2108fc04 	addi	r4,r4,9200
10002470:	000251c0 	call	1000251c <printf>


void usb_print_mem() {
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
    for (i = 0; i <= 200; i += 2) {
10002474:	e0bffe17 	ldw	r2,-8(fp)
10002478:	10800084 	addi	r2,r2,2
1000247c:	e0bffe15 	stw	r2,-8(fp)
10002480:	e0bffe17 	ldw	r2,-8(fp)
10002484:	10803250 	cmplti	r2,r2,201
10002488:	103fef1e 	bne	r2,zero,10002448 <__alt_data_end+0xf8002448>
        code = io_read(HPI_DATA);
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
    }
}
1000248c:	0001883a 	nop
10002490:	e037883a 	mov	sp,fp
10002494:	dfc00117 	ldw	ra,4(sp)
10002498:	df000017 	ldw	fp,0(sp)
1000249c:	dec00204 	addi	sp,sp,8
100024a0:	f800283a 	ret

100024a4 <main>:
#include <unistd.h>

#include "keyboard/keyboard.h"
#include "graphic/graphic_engine.h"

int main() {
100024a4:	defffb04 	addi	sp,sp,-20
100024a8:	dfc00415 	stw	ra,16(sp)
100024ac:	df000315 	stw	fp,12(sp)
100024b0:	df000304 	addi	fp,sp,12

//    keyboard_init();
	graphic_engine_reset();
100024b4:	000026c0 	call	1000026c <graphic_engine_reset>
    unsigned int keycode;

    int last_direction;

    while (1) {
        draw(320 - 30, 320 + 30, 240 - 33, 240 + 33, 0, 0, 0);
100024b8:	d8000215 	stw	zero,8(sp)
100024bc:	d8000115 	stw	zero,4(sp)
100024c0:	d8000015 	stw	zero,0(sp)
100024c4:	01c04444 	movi	r7,273
100024c8:	018033c4 	movi	r6,207
100024cc:	01405784 	movi	r5,350
100024d0:	01004884 	movi	r4,290
100024d4:	00002980 	call	10000298 <draw>
        printf("!\n");
100024d8:	01040074 	movhi	r4,4097
100024dc:	21090104 	addi	r4,r4,9220
100024e0:	00026180 	call	10002618 <puts>
//            if (keyboard_hot_plugged()) {
//                keyboard_init();
//            }
//        }

        wait_for_next_frame();
100024e4:	00003880 	call	10000388 <wait_for_next_frame>
    }
100024e8:	003ff306 	br	100024b8 <__alt_data_end+0xf80024b8>

100024ec <_printf_r>:
100024ec:	defffd04 	addi	sp,sp,-12
100024f0:	2805883a 	mov	r2,r5
100024f4:	dfc00015 	stw	ra,0(sp)
100024f8:	d9800115 	stw	r6,4(sp)
100024fc:	d9c00215 	stw	r7,8(sp)
10002500:	21400217 	ldw	r5,8(r4)
10002504:	d9c00104 	addi	r7,sp,4
10002508:	100d883a 	mov	r6,r2
1000250c:	00026c40 	call	100026c4 <___vfprintf_internal_r>
10002510:	dfc00017 	ldw	ra,0(sp)
10002514:	dec00304 	addi	sp,sp,12
10002518:	f800283a 	ret

1000251c <printf>:
1000251c:	defffc04 	addi	sp,sp,-16
10002520:	dfc00015 	stw	ra,0(sp)
10002524:	d9400115 	stw	r5,4(sp)
10002528:	d9800215 	stw	r6,8(sp)
1000252c:	d9c00315 	stw	r7,12(sp)
10002530:	00840074 	movhi	r2,4097
10002534:	10906f04 	addi	r2,r2,16828
10002538:	10800017 	ldw	r2,0(r2)
1000253c:	200b883a 	mov	r5,r4
10002540:	d9800104 	addi	r6,sp,4
10002544:	11000217 	ldw	r4,8(r2)
10002548:	00049a00 	call	100049a0 <__vfprintf_internal>
1000254c:	dfc00017 	ldw	ra,0(sp)
10002550:	dec00404 	addi	sp,sp,16
10002554:	f800283a 	ret

10002558 <_puts_r>:
10002558:	defff604 	addi	sp,sp,-40
1000255c:	dc000715 	stw	r16,28(sp)
10002560:	2021883a 	mov	r16,r4
10002564:	2809883a 	mov	r4,r5
10002568:	dc400815 	stw	r17,32(sp)
1000256c:	dfc00915 	stw	ra,36(sp)
10002570:	2823883a 	mov	r17,r5
10002574:	000262c0 	call	1000262c <strlen>
10002578:	10c00044 	addi	r3,r2,1
1000257c:	d8800115 	stw	r2,4(sp)
10002580:	00840074 	movhi	r2,4097
10002584:	10890204 	addi	r2,r2,9224
10002588:	d8800215 	stw	r2,8(sp)
1000258c:	00800044 	movi	r2,1
10002590:	d8800315 	stw	r2,12(sp)
10002594:	00800084 	movi	r2,2
10002598:	dc400015 	stw	r17,0(sp)
1000259c:	d8c00615 	stw	r3,24(sp)
100025a0:	dec00415 	stw	sp,16(sp)
100025a4:	d8800515 	stw	r2,20(sp)
100025a8:	80000226 	beq	r16,zero,100025b4 <_puts_r+0x5c>
100025ac:	80800e17 	ldw	r2,56(r16)
100025b0:	10001426 	beq	r2,zero,10002604 <_puts_r+0xac>
100025b4:	81400217 	ldw	r5,8(r16)
100025b8:	2880030b 	ldhu	r2,12(r5)
100025bc:	10c8000c 	andi	r3,r2,8192
100025c0:	1800061e 	bne	r3,zero,100025dc <_puts_r+0x84>
100025c4:	29001917 	ldw	r4,100(r5)
100025c8:	00f7ffc4 	movi	r3,-8193
100025cc:	10880014 	ori	r2,r2,8192
100025d0:	20c6703a 	and	r3,r4,r3
100025d4:	2880030d 	sth	r2,12(r5)
100025d8:	28c01915 	stw	r3,100(r5)
100025dc:	d9800404 	addi	r6,sp,16
100025e0:	8009883a 	mov	r4,r16
100025e4:	0006f080 	call	10006f08 <__sfvwrite_r>
100025e8:	1000091e 	bne	r2,zero,10002610 <_puts_r+0xb8>
100025ec:	00800284 	movi	r2,10
100025f0:	dfc00917 	ldw	ra,36(sp)
100025f4:	dc400817 	ldw	r17,32(sp)
100025f8:	dc000717 	ldw	r16,28(sp)
100025fc:	dec00a04 	addi	sp,sp,40
10002600:	f800283a 	ret
10002604:	8009883a 	mov	r4,r16
10002608:	0006a840 	call	10006a84 <__sinit>
1000260c:	003fe906 	br	100025b4 <__alt_data_end+0xf80025b4>
10002610:	00bfffc4 	movi	r2,-1
10002614:	003ff606 	br	100025f0 <__alt_data_end+0xf80025f0>

10002618 <puts>:
10002618:	00840074 	movhi	r2,4097
1000261c:	10906f04 	addi	r2,r2,16828
10002620:	200b883a 	mov	r5,r4
10002624:	11000017 	ldw	r4,0(r2)
10002628:	00025581 	jmpi	10002558 <_puts_r>

1000262c <strlen>:
1000262c:	208000cc 	andi	r2,r4,3
10002630:	10002026 	beq	r2,zero,100026b4 <strlen+0x88>
10002634:	20800007 	ldb	r2,0(r4)
10002638:	10002026 	beq	r2,zero,100026bc <strlen+0x90>
1000263c:	2005883a 	mov	r2,r4
10002640:	00000206 	br	1000264c <strlen+0x20>
10002644:	10c00007 	ldb	r3,0(r2)
10002648:	18001826 	beq	r3,zero,100026ac <strlen+0x80>
1000264c:	10800044 	addi	r2,r2,1
10002650:	10c000cc 	andi	r3,r2,3
10002654:	183ffb1e 	bne	r3,zero,10002644 <__alt_data_end+0xf8002644>
10002658:	10c00017 	ldw	r3,0(r2)
1000265c:	01ffbff4 	movhi	r7,65279
10002660:	39ffbfc4 	addi	r7,r7,-257
10002664:	00ca303a 	nor	r5,zero,r3
10002668:	01a02074 	movhi	r6,32897
1000266c:	19c7883a 	add	r3,r3,r7
10002670:	31a02004 	addi	r6,r6,-32640
10002674:	1946703a 	and	r3,r3,r5
10002678:	1986703a 	and	r3,r3,r6
1000267c:	1800091e 	bne	r3,zero,100026a4 <strlen+0x78>
10002680:	10800104 	addi	r2,r2,4
10002684:	10c00017 	ldw	r3,0(r2)
10002688:	19cb883a 	add	r5,r3,r7
1000268c:	00c6303a 	nor	r3,zero,r3
10002690:	28c6703a 	and	r3,r5,r3
10002694:	1986703a 	and	r3,r3,r6
10002698:	183ff926 	beq	r3,zero,10002680 <__alt_data_end+0xf8002680>
1000269c:	00000106 	br	100026a4 <strlen+0x78>
100026a0:	10800044 	addi	r2,r2,1
100026a4:	10c00007 	ldb	r3,0(r2)
100026a8:	183ffd1e 	bne	r3,zero,100026a0 <__alt_data_end+0xf80026a0>
100026ac:	1105c83a 	sub	r2,r2,r4
100026b0:	f800283a 	ret
100026b4:	2005883a 	mov	r2,r4
100026b8:	003fe706 	br	10002658 <__alt_data_end+0xf8002658>
100026bc:	0005883a 	mov	r2,zero
100026c0:	f800283a 	ret

100026c4 <___vfprintf_internal_r>:
100026c4:	deffb804 	addi	sp,sp,-288
100026c8:	dfc04715 	stw	ra,284(sp)
100026cc:	ddc04515 	stw	r23,276(sp)
100026d0:	dd404315 	stw	r21,268(sp)
100026d4:	d9002d15 	stw	r4,180(sp)
100026d8:	282f883a 	mov	r23,r5
100026dc:	302b883a 	mov	r21,r6
100026e0:	d9c02e15 	stw	r7,184(sp)
100026e4:	df004615 	stw	fp,280(sp)
100026e8:	dd804415 	stw	r22,272(sp)
100026ec:	dd004215 	stw	r20,264(sp)
100026f0:	dcc04115 	stw	r19,260(sp)
100026f4:	dc804015 	stw	r18,256(sp)
100026f8:	dc403f15 	stw	r17,252(sp)
100026fc:	dc003e15 	stw	r16,248(sp)
10002700:	00076040 	call	10007604 <_localeconv_r>
10002704:	10800017 	ldw	r2,0(r2)
10002708:	1009883a 	mov	r4,r2
1000270c:	d8803415 	stw	r2,208(sp)
10002710:	000262c0 	call	1000262c <strlen>
10002714:	d8803715 	stw	r2,220(sp)
10002718:	d8802d17 	ldw	r2,180(sp)
1000271c:	10000226 	beq	r2,zero,10002728 <___vfprintf_internal_r+0x64>
10002720:	10800e17 	ldw	r2,56(r2)
10002724:	1000fb26 	beq	r2,zero,10002b14 <___vfprintf_internal_r+0x450>
10002728:	b880030b 	ldhu	r2,12(r23)
1000272c:	10c8000c 	andi	r3,r2,8192
10002730:	1800061e 	bne	r3,zero,1000274c <___vfprintf_internal_r+0x88>
10002734:	b9001917 	ldw	r4,100(r23)
10002738:	00f7ffc4 	movi	r3,-8193
1000273c:	10880014 	ori	r2,r2,8192
10002740:	20c6703a 	and	r3,r4,r3
10002744:	b880030d 	sth	r2,12(r23)
10002748:	b8c01915 	stw	r3,100(r23)
1000274c:	10c0020c 	andi	r3,r2,8
10002750:	1800c326 	beq	r3,zero,10002a60 <___vfprintf_internal_r+0x39c>
10002754:	b8c00417 	ldw	r3,16(r23)
10002758:	1800c126 	beq	r3,zero,10002a60 <___vfprintf_internal_r+0x39c>
1000275c:	1080068c 	andi	r2,r2,26
10002760:	00c00284 	movi	r3,10
10002764:	10c0c626 	beq	r2,r3,10002a80 <___vfprintf_internal_r+0x3bc>
10002768:	d8c00404 	addi	r3,sp,16
1000276c:	05040074 	movhi	r20,4097
10002770:	d9001e04 	addi	r4,sp,120
10002774:	a5091384 	addi	r20,r20,9294
10002778:	d8c01e15 	stw	r3,120(sp)
1000277c:	d8002015 	stw	zero,128(sp)
10002780:	d8001f15 	stw	zero,124(sp)
10002784:	d8003315 	stw	zero,204(sp)
10002788:	d8003615 	stw	zero,216(sp)
1000278c:	d8003815 	stw	zero,224(sp)
10002790:	1811883a 	mov	r8,r3
10002794:	d8003915 	stw	zero,228(sp)
10002798:	d8003a15 	stw	zero,232(sp)
1000279c:	d8002f15 	stw	zero,188(sp)
100027a0:	d9002815 	stw	r4,160(sp)
100027a4:	a8800007 	ldb	r2,0(r21)
100027a8:	10028b26 	beq	r2,zero,100031d8 <___vfprintf_internal_r+0xb14>
100027ac:	00c00944 	movi	r3,37
100027b0:	a823883a 	mov	r17,r21
100027b4:	10c0021e 	bne	r2,r3,100027c0 <___vfprintf_internal_r+0xfc>
100027b8:	00001406 	br	1000280c <___vfprintf_internal_r+0x148>
100027bc:	10c00326 	beq	r2,r3,100027cc <___vfprintf_internal_r+0x108>
100027c0:	8c400044 	addi	r17,r17,1
100027c4:	88800007 	ldb	r2,0(r17)
100027c8:	103ffc1e 	bne	r2,zero,100027bc <__alt_data_end+0xf80027bc>
100027cc:	8d61c83a 	sub	r16,r17,r21
100027d0:	80000e26 	beq	r16,zero,1000280c <___vfprintf_internal_r+0x148>
100027d4:	d8c02017 	ldw	r3,128(sp)
100027d8:	d8801f17 	ldw	r2,124(sp)
100027dc:	45400015 	stw	r21,0(r8)
100027e0:	1c07883a 	add	r3,r3,r16
100027e4:	10800044 	addi	r2,r2,1
100027e8:	d8c02015 	stw	r3,128(sp)
100027ec:	44000115 	stw	r16,4(r8)
100027f0:	d8801f15 	stw	r2,124(sp)
100027f4:	00c001c4 	movi	r3,7
100027f8:	1880a916 	blt	r3,r2,10002aa0 <___vfprintf_internal_r+0x3dc>
100027fc:	42000204 	addi	r8,r8,8
10002800:	d9402f17 	ldw	r5,188(sp)
10002804:	2c0b883a 	add	r5,r5,r16
10002808:	d9402f15 	stw	r5,188(sp)
1000280c:	88800007 	ldb	r2,0(r17)
10002810:	1000aa26 	beq	r2,zero,10002abc <___vfprintf_internal_r+0x3f8>
10002814:	8d400044 	addi	r21,r17,1
10002818:	8c400047 	ldb	r17,1(r17)
1000281c:	0021883a 	mov	r16,zero
10002820:	00bfffc4 	movi	r2,-1
10002824:	0025883a 	mov	r18,zero
10002828:	dc002905 	stb	r16,164(sp)
1000282c:	d8002785 	stb	zero,158(sp)
10002830:	d8002b05 	stb	zero,172(sp)
10002834:	d8802a15 	stw	r2,168(sp)
10002838:	d8003115 	stw	zero,196(sp)
1000283c:	04c01604 	movi	r19,88
10002840:	05800244 	movi	r22,9
10002844:	9021883a 	mov	r16,r18
10002848:	4039883a 	mov	fp,r8
1000284c:	ad400044 	addi	r21,r21,1
10002850:	88bff804 	addi	r2,r17,-32
10002854:	98833236 	bltu	r19,r2,10003520 <___vfprintf_internal_r+0xe5c>
10002858:	100490ba 	slli	r2,r2,2
1000285c:	00c40034 	movhi	r3,4096
10002860:	18ca1c04 	addi	r3,r3,10352
10002864:	10c5883a 	add	r2,r2,r3
10002868:	10800017 	ldw	r2,0(r2)
1000286c:	1000683a 	jmp	r2
10002870:	10003418 	cmpnei	zero,r2,208
10002874:	10003520 	cmpeqi	zero,r2,212
10002878:	10003520 	cmpeqi	zero,r2,212
1000287c:	10003438 	rdprs	zero,r2,208
10002880:	10003520 	cmpeqi	zero,r2,212
10002884:	10003520 	cmpeqi	zero,r2,212
10002888:	10003520 	cmpeqi	zero,r2,212
1000288c:	10003520 	cmpeqi	zero,r2,212
10002890:	10003520 	cmpeqi	zero,r2,212
10002894:	10003520 	cmpeqi	zero,r2,212
10002898:	10002b20 	cmpeqi	zero,r2,172
1000289c:	10003328 	cmpgeui	zero,r2,204
100028a0:	10003520 	cmpeqi	zero,r2,212
100028a4:	100029e4 	muli	zero,r2,167
100028a8:	10002b44 	addi	zero,r2,173
100028ac:	10003520 	cmpeqi	zero,r2,212
100028b0:	10002b94 	ori	zero,r2,174
100028b4:	10002ba0 	cmpeqi	zero,r2,174
100028b8:	10002ba0 	cmpeqi	zero,r2,174
100028bc:	10002ba0 	cmpeqi	zero,r2,174
100028c0:	10002ba0 	cmpeqi	zero,r2,174
100028c4:	10002ba0 	cmpeqi	zero,r2,174
100028c8:	10002ba0 	cmpeqi	zero,r2,174
100028cc:	10002ba0 	cmpeqi	zero,r2,174
100028d0:	10002ba0 	cmpeqi	zero,r2,174
100028d4:	10002ba0 	cmpeqi	zero,r2,174
100028d8:	10003520 	cmpeqi	zero,r2,212
100028dc:	10003520 	cmpeqi	zero,r2,212
100028e0:	10003520 	cmpeqi	zero,r2,212
100028e4:	10003520 	cmpeqi	zero,r2,212
100028e8:	10003520 	cmpeqi	zero,r2,212
100028ec:	10003520 	cmpeqi	zero,r2,212
100028f0:	10003520 	cmpeqi	zero,r2,212
100028f4:	10003520 	cmpeqi	zero,r2,212
100028f8:	10003520 	cmpeqi	zero,r2,212
100028fc:	10003520 	cmpeqi	zero,r2,212
10002900:	10002bdc 	xori	zero,r2,175
10002904:	10002ca4 	muli	zero,r2,178
10002908:	10003520 	cmpeqi	zero,r2,212
1000290c:	10002ca4 	muli	zero,r2,178
10002910:	10003520 	cmpeqi	zero,r2,212
10002914:	10003520 	cmpeqi	zero,r2,212
10002918:	10003520 	cmpeqi	zero,r2,212
1000291c:	10003520 	cmpeqi	zero,r2,212
10002920:	10002d50 	cmplti	zero,r2,181
10002924:	10003520 	cmpeqi	zero,r2,212
10002928:	10003520 	cmpeqi	zero,r2,212
1000292c:	10002d5c 	xori	zero,r2,181
10002930:	10003520 	cmpeqi	zero,r2,212
10002934:	10003520 	cmpeqi	zero,r2,212
10002938:	10003520 	cmpeqi	zero,r2,212
1000293c:	10003520 	cmpeqi	zero,r2,212
10002940:	10003520 	cmpeqi	zero,r2,212
10002944:	100031e0 	cmpeqi	zero,r2,199
10002948:	10003520 	cmpeqi	zero,r2,212
1000294c:	10003520 	cmpeqi	zero,r2,212
10002950:	1000324c 	andi	zero,r2,201
10002954:	10003520 	cmpeqi	zero,r2,212
10002958:	10003520 	cmpeqi	zero,r2,212
1000295c:	10003520 	cmpeqi	zero,r2,212
10002960:	10003520 	cmpeqi	zero,r2,212
10002964:	10003520 	cmpeqi	zero,r2,212
10002968:	10003520 	cmpeqi	zero,r2,212
1000296c:	10003520 	cmpeqi	zero,r2,212
10002970:	10003520 	cmpeqi	zero,r2,212
10002974:	10003520 	cmpeqi	zero,r2,212
10002978:	10003520 	cmpeqi	zero,r2,212
1000297c:	100034c4 	addi	zero,r2,211
10002980:	10003444 	addi	zero,r2,209
10002984:	10002ca4 	muli	zero,r2,178
10002988:	10002ca4 	muli	zero,r2,178
1000298c:	10002ca4 	muli	zero,r2,178
10002990:	10003464 	muli	zero,r2,209
10002994:	10003444 	addi	zero,r2,209
10002998:	10003520 	cmpeqi	zero,r2,212
1000299c:	10003520 	cmpeqi	zero,r2,212
100029a0:	10003470 	cmpltui	zero,r2,209
100029a4:	10003520 	cmpeqi	zero,r2,212
100029a8:	10003484 	addi	zero,r2,210
100029ac:	10003308 	cmpgei	zero,r2,204
100029b0:	100029f0 	cmpltui	zero,r2,167
100029b4:	10003340 	call	11000334 <_gp+0xfe4180>
100029b8:	10003520 	cmpeqi	zero,r2,212
100029bc:	1000334c 	andi	zero,r2,205
100029c0:	10003520 	cmpeqi	zero,r2,212
100029c4:	100033b0 	cmpltui	zero,r2,206
100029c8:	10003520 	cmpeqi	zero,r2,212
100029cc:	10003520 	cmpeqi	zero,r2,212
100029d0:	100033d0 	cmplti	zero,r2,207
100029d4:	d8c03117 	ldw	r3,196(sp)
100029d8:	d8802e15 	stw	r2,184(sp)
100029dc:	00c7c83a 	sub	r3,zero,r3
100029e0:	d8c03115 	stw	r3,196(sp)
100029e4:	84000114 	ori	r16,r16,4
100029e8:	ac400007 	ldb	r17,0(r21)
100029ec:	003f9706 	br	1000284c <__alt_data_end+0xf800284c>
100029f0:	00800c04 	movi	r2,48
100029f4:	d8802705 	stb	r2,156(sp)
100029f8:	00801e04 	movi	r2,120
100029fc:	d8802745 	stb	r2,157(sp)
10002a00:	d9002a17 	ldw	r4,168(sp)
10002a04:	d8802e17 	ldw	r2,184(sp)
10002a08:	d8002785 	stb	zero,158(sp)
10002a0c:	e011883a 	mov	r8,fp
10002a10:	10c00104 	addi	r3,r2,4
10002a14:	14c00017 	ldw	r19,0(r2)
10002a18:	002d883a 	mov	r22,zero
10002a1c:	80800094 	ori	r2,r16,2
10002a20:	2002ca16 	blt	r4,zero,1000354c <___vfprintf_internal_r+0xe88>
10002a24:	00bfdfc4 	movi	r2,-129
10002a28:	80a4703a 	and	r18,r16,r2
10002a2c:	d8c02e15 	stw	r3,184(sp)
10002a30:	94800094 	ori	r18,r18,2
10002a34:	9802b41e 	bne	r19,zero,10003508 <___vfprintf_internal_r+0xe44>
10002a38:	01440074 	movhi	r5,4097
10002a3c:	29490c04 	addi	r5,r5,9264
10002a40:	d9403915 	stw	r5,228(sp)
10002a44:	04401e04 	movi	r17,120
10002a48:	d8802a17 	ldw	r2,168(sp)
10002a4c:	0039883a 	mov	fp,zero
10002a50:	1001fa26 	beq	r2,zero,1000323c <___vfprintf_internal_r+0xb78>
10002a54:	0027883a 	mov	r19,zero
10002a58:	002d883a 	mov	r22,zero
10002a5c:	00021906 	br	100032c4 <___vfprintf_internal_r+0xc00>
10002a60:	d9002d17 	ldw	r4,180(sp)
10002a64:	b80b883a 	mov	r5,r23
10002a68:	0004a780 	call	10004a78 <__swsetup_r>
10002a6c:	1005dc1e 	bne	r2,zero,100041e0 <___vfprintf_internal_r+0x1b1c>
10002a70:	b880030b 	ldhu	r2,12(r23)
10002a74:	00c00284 	movi	r3,10
10002a78:	1080068c 	andi	r2,r2,26
10002a7c:	10ff3a1e 	bne	r2,r3,10002768 <__alt_data_end+0xf8002768>
10002a80:	b880038f 	ldh	r2,14(r23)
10002a84:	103f3816 	blt	r2,zero,10002768 <__alt_data_end+0xf8002768>
10002a88:	d9c02e17 	ldw	r7,184(sp)
10002a8c:	d9002d17 	ldw	r4,180(sp)
10002a90:	a80d883a 	mov	r6,r21
10002a94:	b80b883a 	mov	r5,r23
10002a98:	00049bc0 	call	100049bc <__sbprintf>
10002a9c:	00001106 	br	10002ae4 <___vfprintf_internal_r+0x420>
10002aa0:	d9002d17 	ldw	r4,180(sp)
10002aa4:	d9801e04 	addi	r6,sp,120
10002aa8:	b80b883a 	mov	r5,r23
10002aac:	0009ea40 	call	10009ea4 <__sprint_r>
10002ab0:	1000081e 	bne	r2,zero,10002ad4 <___vfprintf_internal_r+0x410>
10002ab4:	da000404 	addi	r8,sp,16
10002ab8:	003f5106 	br	10002800 <__alt_data_end+0xf8002800>
10002abc:	d8802017 	ldw	r2,128(sp)
10002ac0:	10000426 	beq	r2,zero,10002ad4 <___vfprintf_internal_r+0x410>
10002ac4:	d9002d17 	ldw	r4,180(sp)
10002ac8:	d9801e04 	addi	r6,sp,120
10002acc:	b80b883a 	mov	r5,r23
10002ad0:	0009ea40 	call	10009ea4 <__sprint_r>
10002ad4:	b880030b 	ldhu	r2,12(r23)
10002ad8:	1080100c 	andi	r2,r2,64
10002adc:	1005c01e 	bne	r2,zero,100041e0 <___vfprintf_internal_r+0x1b1c>
10002ae0:	d8802f17 	ldw	r2,188(sp)
10002ae4:	dfc04717 	ldw	ra,284(sp)
10002ae8:	df004617 	ldw	fp,280(sp)
10002aec:	ddc04517 	ldw	r23,276(sp)
10002af0:	dd804417 	ldw	r22,272(sp)
10002af4:	dd404317 	ldw	r21,268(sp)
10002af8:	dd004217 	ldw	r20,264(sp)
10002afc:	dcc04117 	ldw	r19,260(sp)
10002b00:	dc804017 	ldw	r18,256(sp)
10002b04:	dc403f17 	ldw	r17,252(sp)
10002b08:	dc003e17 	ldw	r16,248(sp)
10002b0c:	dec04804 	addi	sp,sp,288
10002b10:	f800283a 	ret
10002b14:	d9002d17 	ldw	r4,180(sp)
10002b18:	0006a840 	call	10006a84 <__sinit>
10002b1c:	003f0206 	br	10002728 <__alt_data_end+0xf8002728>
10002b20:	d9002e17 	ldw	r4,184(sp)
10002b24:	d9402e17 	ldw	r5,184(sp)
10002b28:	21000017 	ldw	r4,0(r4)
10002b2c:	28800104 	addi	r2,r5,4
10002b30:	d9003115 	stw	r4,196(sp)
10002b34:	203fa716 	blt	r4,zero,100029d4 <__alt_data_end+0xf80029d4>
10002b38:	d8802e15 	stw	r2,184(sp)
10002b3c:	ac400007 	ldb	r17,0(r21)
10002b40:	003f4206 	br	1000284c <__alt_data_end+0xf800284c>
10002b44:	ac400007 	ldb	r17,0(r21)
10002b48:	01000a84 	movi	r4,42
10002b4c:	a8c00044 	addi	r3,r21,1
10002b50:	89075826 	beq	r17,r4,100048b4 <___vfprintf_internal_r+0x21f0>
10002b54:	8cbff404 	addi	r18,r17,-48
10002b58:	b486ae36 	bltu	r22,r18,10004614 <___vfprintf_internal_r+0x1f50>
10002b5c:	0009883a 	mov	r4,zero
10002b60:	1823883a 	mov	r17,r3
10002b64:	01400284 	movi	r5,10
10002b68:	000cb600 	call	1000cb60 <__mulsi3>
10002b6c:	88c00007 	ldb	r3,0(r17)
10002b70:	1489883a 	add	r4,r2,r18
10002b74:	8d400044 	addi	r21,r17,1
10002b78:	1cbff404 	addi	r18,r3,-48
10002b7c:	a823883a 	mov	r17,r21
10002b80:	b4bff82e 	bgeu	r22,r18,10002b64 <__alt_data_end+0xf8002b64>
10002b84:	1823883a 	mov	r17,r3
10002b88:	2005f616 	blt	r4,zero,10004364 <___vfprintf_internal_r+0x1ca0>
10002b8c:	d9002a15 	stw	r4,168(sp)
10002b90:	003f2f06 	br	10002850 <__alt_data_end+0xf8002850>
10002b94:	84002014 	ori	r16,r16,128
10002b98:	ac400007 	ldb	r17,0(r21)
10002b9c:	003f2b06 	br	1000284c <__alt_data_end+0xf800284c>
10002ba0:	8cbff404 	addi	r18,r17,-48
10002ba4:	d8003115 	stw	zero,196(sp)
10002ba8:	0009883a 	mov	r4,zero
10002bac:	a823883a 	mov	r17,r21
10002bb0:	01400284 	movi	r5,10
10002bb4:	000cb600 	call	1000cb60 <__mulsi3>
10002bb8:	88c00007 	ldb	r3,0(r17)
10002bbc:	9089883a 	add	r4,r18,r2
10002bc0:	ad400044 	addi	r21,r21,1
10002bc4:	1cbff404 	addi	r18,r3,-48
10002bc8:	a823883a 	mov	r17,r21
10002bcc:	b4bff82e 	bgeu	r22,r18,10002bb0 <__alt_data_end+0xf8002bb0>
10002bd0:	1823883a 	mov	r17,r3
10002bd4:	d9003115 	stw	r4,196(sp)
10002bd8:	003f1d06 	br	10002850 <__alt_data_end+0xf8002850>
10002bdc:	8025883a 	mov	r18,r16
10002be0:	dc002903 	ldbu	r16,164(sp)
10002be4:	e011883a 	mov	r8,fp
10002be8:	84003fcc 	andi	r16,r16,255
10002bec:	8007531e 	bne	r16,zero,1000493c <___vfprintf_internal_r+0x2278>
10002bf0:	94800414 	ori	r18,r18,16
10002bf4:	9080080c 	andi	r2,r18,32
10002bf8:	1003a326 	beq	r2,zero,10003a88 <___vfprintf_internal_r+0x13c4>
10002bfc:	d9002e17 	ldw	r4,184(sp)
10002c00:	20800117 	ldw	r2,4(r4)
10002c04:	24c00017 	ldw	r19,0(r4)
10002c08:	21000204 	addi	r4,r4,8
10002c0c:	d9002e15 	stw	r4,184(sp)
10002c10:	102d883a 	mov	r22,r2
10002c14:	10047316 	blt	r2,zero,10003de4 <___vfprintf_internal_r+0x1720>
10002c18:	d9002a17 	ldw	r4,168(sp)
10002c1c:	df002783 	ldbu	fp,158(sp)
10002c20:	2003e416 	blt	r4,zero,10003bb4 <___vfprintf_internal_r+0x14f0>
10002c24:	00ffdfc4 	movi	r3,-129
10002c28:	9d84b03a 	or	r2,r19,r22
10002c2c:	90e4703a 	and	r18,r18,r3
10002c30:	10018026 	beq	r2,zero,10003234 <___vfprintf_internal_r+0xb70>
10002c34:	b003ab26 	beq	r22,zero,10003ae4 <___vfprintf_internal_r+0x1420>
10002c38:	dc402915 	stw	r17,164(sp)
10002c3c:	dc001e04 	addi	r16,sp,120
10002c40:	b023883a 	mov	r17,r22
10002c44:	402d883a 	mov	r22,r8
10002c48:	9809883a 	mov	r4,r19
10002c4c:	880b883a 	mov	r5,r17
10002c50:	01800284 	movi	r6,10
10002c54:	000f883a 	mov	r7,zero
10002c58:	000c3e80 	call	1000c3e8 <__umoddi3>
10002c5c:	10800c04 	addi	r2,r2,48
10002c60:	843fffc4 	addi	r16,r16,-1
10002c64:	9809883a 	mov	r4,r19
10002c68:	880b883a 	mov	r5,r17
10002c6c:	80800005 	stb	r2,0(r16)
10002c70:	01800284 	movi	r6,10
10002c74:	000f883a 	mov	r7,zero
10002c78:	000bdec0 	call	1000bdec <__udivdi3>
10002c7c:	1027883a 	mov	r19,r2
10002c80:	10c4b03a 	or	r2,r2,r3
10002c84:	1823883a 	mov	r17,r3
10002c88:	103fef1e 	bne	r2,zero,10002c48 <__alt_data_end+0xf8002c48>
10002c8c:	d8c02817 	ldw	r3,160(sp)
10002c90:	dc402917 	ldw	r17,164(sp)
10002c94:	b011883a 	mov	r8,r22
10002c98:	1c07c83a 	sub	r3,r3,r16
10002c9c:	d8c02b15 	stw	r3,172(sp)
10002ca0:	00005f06 	br	10002e20 <___vfprintf_internal_r+0x75c>
10002ca4:	8025883a 	mov	r18,r16
10002ca8:	dc002903 	ldbu	r16,164(sp)
10002cac:	e011883a 	mov	r8,fp
10002cb0:	84003fcc 	andi	r16,r16,255
10002cb4:	80071e1e 	bne	r16,zero,10004930 <___vfprintf_internal_r+0x226c>
10002cb8:	9080020c 	andi	r2,r18,8
10002cbc:	1004af26 	beq	r2,zero,10003f7c <___vfprintf_internal_r+0x18b8>
10002cc0:	d9002e17 	ldw	r4,184(sp)
10002cc4:	d9402e17 	ldw	r5,184(sp)
10002cc8:	d8802e17 	ldw	r2,184(sp)
10002ccc:	21000017 	ldw	r4,0(r4)
10002cd0:	29400117 	ldw	r5,4(r5)
10002cd4:	10800204 	addi	r2,r2,8
10002cd8:	d9003615 	stw	r4,216(sp)
10002cdc:	d9403815 	stw	r5,224(sp)
10002ce0:	d8802e15 	stw	r2,184(sp)
10002ce4:	d9003617 	ldw	r4,216(sp)
10002ce8:	d9403817 	ldw	r5,224(sp)
10002cec:	da003d15 	stw	r8,244(sp)
10002cf0:	04000044 	movi	r16,1
10002cf4:	0009ac80 	call	10009ac8 <__fpclassifyd>
10002cf8:	da003d17 	ldw	r8,244(sp)
10002cfc:	1404441e 	bne	r2,r16,10003e10 <___vfprintf_internal_r+0x174c>
10002d00:	d9003617 	ldw	r4,216(sp)
10002d04:	d9403817 	ldw	r5,224(sp)
10002d08:	000d883a 	mov	r6,zero
10002d0c:	000f883a 	mov	r7,zero
10002d10:	000df680 	call	1000df68 <__ledf2>
10002d14:	da003d17 	ldw	r8,244(sp)
10002d18:	1005e316 	blt	r2,zero,100044a8 <___vfprintf_internal_r+0x1de4>
10002d1c:	df002783 	ldbu	fp,158(sp)
10002d20:	008011c4 	movi	r2,71
10002d24:	1445580e 	bge	r2,r17,10004288 <___vfprintf_internal_r+0x1bc4>
10002d28:	04040074 	movhi	r16,4097
10002d2c:	84090404 	addi	r16,r16,9232
10002d30:	00c000c4 	movi	r3,3
10002d34:	00bfdfc4 	movi	r2,-129
10002d38:	d8c02915 	stw	r3,164(sp)
10002d3c:	90a4703a 	and	r18,r18,r2
10002d40:	d8c02b15 	stw	r3,172(sp)
10002d44:	d8002a15 	stw	zero,168(sp)
10002d48:	d8003215 	stw	zero,200(sp)
10002d4c:	00003a06 	br	10002e38 <___vfprintf_internal_r+0x774>
10002d50:	84000214 	ori	r16,r16,8
10002d54:	ac400007 	ldb	r17,0(r21)
10002d58:	003ebc06 	br	1000284c <__alt_data_end+0xf800284c>
10002d5c:	8025883a 	mov	r18,r16
10002d60:	dc002903 	ldbu	r16,164(sp)
10002d64:	e011883a 	mov	r8,fp
10002d68:	84003fcc 	andi	r16,r16,255
10002d6c:	8007001e 	bne	r16,zero,10004970 <___vfprintf_internal_r+0x22ac>
10002d70:	94800414 	ori	r18,r18,16
10002d74:	9080080c 	andi	r2,r18,32
10002d78:	1002fa26 	beq	r2,zero,10003964 <___vfprintf_internal_r+0x12a0>
10002d7c:	d9002e17 	ldw	r4,184(sp)
10002d80:	d9402a17 	ldw	r5,168(sp)
10002d84:	d8002785 	stb	zero,158(sp)
10002d88:	20800204 	addi	r2,r4,8
10002d8c:	24c00017 	ldw	r19,0(r4)
10002d90:	25800117 	ldw	r22,4(r4)
10002d94:	2804b116 	blt	r5,zero,1000405c <___vfprintf_internal_r+0x1998>
10002d98:	013fdfc4 	movi	r4,-129
10002d9c:	9d86b03a 	or	r3,r19,r22
10002da0:	d8802e15 	stw	r2,184(sp)
10002da4:	9124703a 	and	r18,r18,r4
10002da8:	1802fb1e 	bne	r3,zero,10003998 <___vfprintf_internal_r+0x12d4>
10002dac:	d8c02a17 	ldw	r3,168(sp)
10002db0:	0039883a 	mov	fp,zero
10002db4:	1805e526 	beq	r3,zero,1000454c <___vfprintf_internal_r+0x1e88>
10002db8:	0027883a 	mov	r19,zero
10002dbc:	002d883a 	mov	r22,zero
10002dc0:	dc001e04 	addi	r16,sp,120
10002dc4:	9806d0fa 	srli	r3,r19,3
10002dc8:	b008977a 	slli	r4,r22,29
10002dcc:	b02cd0fa 	srli	r22,r22,3
10002dd0:	9cc001cc 	andi	r19,r19,7
10002dd4:	98800c04 	addi	r2,r19,48
10002dd8:	843fffc4 	addi	r16,r16,-1
10002ddc:	20e6b03a 	or	r19,r4,r3
10002de0:	80800005 	stb	r2,0(r16)
10002de4:	9d86b03a 	or	r3,r19,r22
10002de8:	183ff61e 	bne	r3,zero,10002dc4 <__alt_data_end+0xf8002dc4>
10002dec:	90c0004c 	andi	r3,r18,1
10002df0:	18014126 	beq	r3,zero,100032f8 <___vfprintf_internal_r+0xc34>
10002df4:	10803fcc 	andi	r2,r2,255
10002df8:	1080201c 	xori	r2,r2,128
10002dfc:	10bfe004 	addi	r2,r2,-128
10002e00:	00c00c04 	movi	r3,48
10002e04:	10c13c26 	beq	r2,r3,100032f8 <___vfprintf_internal_r+0xc34>
10002e08:	80ffffc5 	stb	r3,-1(r16)
10002e0c:	d8c02817 	ldw	r3,160(sp)
10002e10:	80bfffc4 	addi	r2,r16,-1
10002e14:	1021883a 	mov	r16,r2
10002e18:	1887c83a 	sub	r3,r3,r2
10002e1c:	d8c02b15 	stw	r3,172(sp)
10002e20:	d8802b17 	ldw	r2,172(sp)
10002e24:	d9002a17 	ldw	r4,168(sp)
10002e28:	1100010e 	bge	r2,r4,10002e30 <___vfprintf_internal_r+0x76c>
10002e2c:	2005883a 	mov	r2,r4
10002e30:	d8802915 	stw	r2,164(sp)
10002e34:	d8003215 	stw	zero,200(sp)
10002e38:	e7003fcc 	andi	fp,fp,255
10002e3c:	e700201c 	xori	fp,fp,128
10002e40:	e73fe004 	addi	fp,fp,-128
10002e44:	e0000326 	beq	fp,zero,10002e54 <___vfprintf_internal_r+0x790>
10002e48:	d8c02917 	ldw	r3,164(sp)
10002e4c:	18c00044 	addi	r3,r3,1
10002e50:	d8c02915 	stw	r3,164(sp)
10002e54:	90c0008c 	andi	r3,r18,2
10002e58:	d8c02c15 	stw	r3,176(sp)
10002e5c:	18000326 	beq	r3,zero,10002e6c <___vfprintf_internal_r+0x7a8>
10002e60:	d8c02917 	ldw	r3,164(sp)
10002e64:	18c00084 	addi	r3,r3,2
10002e68:	d8c02915 	stw	r3,164(sp)
10002e6c:	90c0210c 	andi	r3,r18,132
10002e70:	d8c03015 	stw	r3,192(sp)
10002e74:	1801c51e 	bne	r3,zero,1000358c <___vfprintf_internal_r+0xec8>
10002e78:	d9003117 	ldw	r4,196(sp)
10002e7c:	d8c02917 	ldw	r3,164(sp)
10002e80:	20e7c83a 	sub	r19,r4,r3
10002e84:	04c1c10e 	bge	zero,r19,1000358c <___vfprintf_internal_r+0xec8>
10002e88:	02400404 	movi	r9,16
10002e8c:	d8c02017 	ldw	r3,128(sp)
10002e90:	d8801f17 	ldw	r2,124(sp)
10002e94:	4cc52f0e 	bge	r9,r19,10004354 <___vfprintf_internal_r+0x1c90>
10002e98:	01440074 	movhi	r5,4097
10002e9c:	29491784 	addi	r5,r5,9310
10002ea0:	dc403b15 	stw	r17,236(sp)
10002ea4:	d9403515 	stw	r5,212(sp)
10002ea8:	9823883a 	mov	r17,r19
10002eac:	482d883a 	mov	r22,r9
10002eb0:	9027883a 	mov	r19,r18
10002eb4:	070001c4 	movi	fp,7
10002eb8:	8025883a 	mov	r18,r16
10002ebc:	dc002d17 	ldw	r16,180(sp)
10002ec0:	00000306 	br	10002ed0 <___vfprintf_internal_r+0x80c>
10002ec4:	8c7ffc04 	addi	r17,r17,-16
10002ec8:	42000204 	addi	r8,r8,8
10002ecc:	b440130e 	bge	r22,r17,10002f1c <___vfprintf_internal_r+0x858>
10002ed0:	01040074 	movhi	r4,4097
10002ed4:	18c00404 	addi	r3,r3,16
10002ed8:	10800044 	addi	r2,r2,1
10002edc:	21091784 	addi	r4,r4,9310
10002ee0:	41000015 	stw	r4,0(r8)
10002ee4:	45800115 	stw	r22,4(r8)
10002ee8:	d8c02015 	stw	r3,128(sp)
10002eec:	d8801f15 	stw	r2,124(sp)
10002ef0:	e0bff40e 	bge	fp,r2,10002ec4 <__alt_data_end+0xf8002ec4>
10002ef4:	d9801e04 	addi	r6,sp,120
10002ef8:	b80b883a 	mov	r5,r23
10002efc:	8009883a 	mov	r4,r16
10002f00:	0009ea40 	call	10009ea4 <__sprint_r>
10002f04:	103ef31e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10002f08:	8c7ffc04 	addi	r17,r17,-16
10002f0c:	d8c02017 	ldw	r3,128(sp)
10002f10:	d8801f17 	ldw	r2,124(sp)
10002f14:	da000404 	addi	r8,sp,16
10002f18:	b47fed16 	blt	r22,r17,10002ed0 <__alt_data_end+0xf8002ed0>
10002f1c:	9021883a 	mov	r16,r18
10002f20:	9825883a 	mov	r18,r19
10002f24:	8827883a 	mov	r19,r17
10002f28:	dc403b17 	ldw	r17,236(sp)
10002f2c:	d9403517 	ldw	r5,212(sp)
10002f30:	98c7883a 	add	r3,r19,r3
10002f34:	10800044 	addi	r2,r2,1
10002f38:	41400015 	stw	r5,0(r8)
10002f3c:	44c00115 	stw	r19,4(r8)
10002f40:	d8c02015 	stw	r3,128(sp)
10002f44:	d8801f15 	stw	r2,124(sp)
10002f48:	010001c4 	movi	r4,7
10002f4c:	2082c516 	blt	r4,r2,10003a64 <___vfprintf_internal_r+0x13a0>
10002f50:	df002787 	ldb	fp,158(sp)
10002f54:	42000204 	addi	r8,r8,8
10002f58:	e0000c26 	beq	fp,zero,10002f8c <___vfprintf_internal_r+0x8c8>
10002f5c:	d8801f17 	ldw	r2,124(sp)
10002f60:	d9002784 	addi	r4,sp,158
10002f64:	18c00044 	addi	r3,r3,1
10002f68:	10800044 	addi	r2,r2,1
10002f6c:	41000015 	stw	r4,0(r8)
10002f70:	01000044 	movi	r4,1
10002f74:	41000115 	stw	r4,4(r8)
10002f78:	d8c02015 	stw	r3,128(sp)
10002f7c:	d8801f15 	stw	r2,124(sp)
10002f80:	010001c4 	movi	r4,7
10002f84:	20825e16 	blt	r4,r2,10003900 <___vfprintf_internal_r+0x123c>
10002f88:	42000204 	addi	r8,r8,8
10002f8c:	d8802c17 	ldw	r2,176(sp)
10002f90:	10000c26 	beq	r2,zero,10002fc4 <___vfprintf_internal_r+0x900>
10002f94:	d8801f17 	ldw	r2,124(sp)
10002f98:	d9002704 	addi	r4,sp,156
10002f9c:	18c00084 	addi	r3,r3,2
10002fa0:	10800044 	addi	r2,r2,1
10002fa4:	41000015 	stw	r4,0(r8)
10002fa8:	01000084 	movi	r4,2
10002fac:	41000115 	stw	r4,4(r8)
10002fb0:	d8c02015 	stw	r3,128(sp)
10002fb4:	d8801f15 	stw	r2,124(sp)
10002fb8:	010001c4 	movi	r4,7
10002fbc:	20825816 	blt	r4,r2,10003920 <___vfprintf_internal_r+0x125c>
10002fc0:	42000204 	addi	r8,r8,8
10002fc4:	d9003017 	ldw	r4,192(sp)
10002fc8:	00802004 	movi	r2,128
10002fcc:	2081bb26 	beq	r4,r2,100036bc <___vfprintf_internal_r+0xff8>
10002fd0:	d9402a17 	ldw	r5,168(sp)
10002fd4:	d8802b17 	ldw	r2,172(sp)
10002fd8:	28adc83a 	sub	r22,r5,r2
10002fdc:	0580310e 	bge	zero,r22,100030a4 <___vfprintf_internal_r+0x9e0>
10002fe0:	07000404 	movi	fp,16
10002fe4:	d8801f17 	ldw	r2,124(sp)
10002fe8:	e584360e 	bge	fp,r22,100040c4 <___vfprintf_internal_r+0x1a00>
10002fec:	01440074 	movhi	r5,4097
10002ff0:	29491384 	addi	r5,r5,9294
10002ff4:	dc402a15 	stw	r17,168(sp)
10002ff8:	d9402c15 	stw	r5,176(sp)
10002ffc:	b023883a 	mov	r17,r22
10003000:	04c001c4 	movi	r19,7
10003004:	a82d883a 	mov	r22,r21
10003008:	902b883a 	mov	r21,r18
1000300c:	8025883a 	mov	r18,r16
10003010:	dc002d17 	ldw	r16,180(sp)
10003014:	00000306 	br	10003024 <___vfprintf_internal_r+0x960>
10003018:	8c7ffc04 	addi	r17,r17,-16
1000301c:	42000204 	addi	r8,r8,8
10003020:	e440110e 	bge	fp,r17,10003068 <___vfprintf_internal_r+0x9a4>
10003024:	18c00404 	addi	r3,r3,16
10003028:	10800044 	addi	r2,r2,1
1000302c:	45000015 	stw	r20,0(r8)
10003030:	47000115 	stw	fp,4(r8)
10003034:	d8c02015 	stw	r3,128(sp)
10003038:	d8801f15 	stw	r2,124(sp)
1000303c:	98bff60e 	bge	r19,r2,10003018 <__alt_data_end+0xf8003018>
10003040:	d9801e04 	addi	r6,sp,120
10003044:	b80b883a 	mov	r5,r23
10003048:	8009883a 	mov	r4,r16
1000304c:	0009ea40 	call	10009ea4 <__sprint_r>
10003050:	103ea01e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003054:	8c7ffc04 	addi	r17,r17,-16
10003058:	d8c02017 	ldw	r3,128(sp)
1000305c:	d8801f17 	ldw	r2,124(sp)
10003060:	da000404 	addi	r8,sp,16
10003064:	e47fef16 	blt	fp,r17,10003024 <__alt_data_end+0xf8003024>
10003068:	9021883a 	mov	r16,r18
1000306c:	a825883a 	mov	r18,r21
10003070:	b02b883a 	mov	r21,r22
10003074:	882d883a 	mov	r22,r17
10003078:	dc402a17 	ldw	r17,168(sp)
1000307c:	d9002c17 	ldw	r4,176(sp)
10003080:	1d87883a 	add	r3,r3,r22
10003084:	10800044 	addi	r2,r2,1
10003088:	41000015 	stw	r4,0(r8)
1000308c:	45800115 	stw	r22,4(r8)
10003090:	d8c02015 	stw	r3,128(sp)
10003094:	d8801f15 	stw	r2,124(sp)
10003098:	010001c4 	movi	r4,7
1000309c:	20821016 	blt	r4,r2,100038e0 <___vfprintf_internal_r+0x121c>
100030a0:	42000204 	addi	r8,r8,8
100030a4:	9080400c 	andi	r2,r18,256
100030a8:	10013a1e 	bne	r2,zero,10003594 <___vfprintf_internal_r+0xed0>
100030ac:	d9402b17 	ldw	r5,172(sp)
100030b0:	d8801f17 	ldw	r2,124(sp)
100030b4:	44000015 	stw	r16,0(r8)
100030b8:	1947883a 	add	r3,r3,r5
100030bc:	10800044 	addi	r2,r2,1
100030c0:	41400115 	stw	r5,4(r8)
100030c4:	d8c02015 	stw	r3,128(sp)
100030c8:	d8801f15 	stw	r2,124(sp)
100030cc:	010001c4 	movi	r4,7
100030d0:	2081f516 	blt	r4,r2,100038a8 <___vfprintf_internal_r+0x11e4>
100030d4:	42000204 	addi	r8,r8,8
100030d8:	9480010c 	andi	r18,r18,4
100030dc:	90003226 	beq	r18,zero,100031a8 <___vfprintf_internal_r+0xae4>
100030e0:	d9403117 	ldw	r5,196(sp)
100030e4:	d8802917 	ldw	r2,164(sp)
100030e8:	28a1c83a 	sub	r16,r5,r2
100030ec:	04002e0e 	bge	zero,r16,100031a8 <___vfprintf_internal_r+0xae4>
100030f0:	04400404 	movi	r17,16
100030f4:	d8801f17 	ldw	r2,124(sp)
100030f8:	8c04c40e 	bge	r17,r16,1000440c <___vfprintf_internal_r+0x1d48>
100030fc:	01440074 	movhi	r5,4097
10003100:	29491784 	addi	r5,r5,9310
10003104:	d9403515 	stw	r5,212(sp)
10003108:	048001c4 	movi	r18,7
1000310c:	dcc02d17 	ldw	r19,180(sp)
10003110:	00000306 	br	10003120 <___vfprintf_internal_r+0xa5c>
10003114:	843ffc04 	addi	r16,r16,-16
10003118:	42000204 	addi	r8,r8,8
1000311c:	8c00130e 	bge	r17,r16,1000316c <___vfprintf_internal_r+0xaa8>
10003120:	01040074 	movhi	r4,4097
10003124:	18c00404 	addi	r3,r3,16
10003128:	10800044 	addi	r2,r2,1
1000312c:	21091784 	addi	r4,r4,9310
10003130:	41000015 	stw	r4,0(r8)
10003134:	44400115 	stw	r17,4(r8)
10003138:	d8c02015 	stw	r3,128(sp)
1000313c:	d8801f15 	stw	r2,124(sp)
10003140:	90bff40e 	bge	r18,r2,10003114 <__alt_data_end+0xf8003114>
10003144:	d9801e04 	addi	r6,sp,120
10003148:	b80b883a 	mov	r5,r23
1000314c:	9809883a 	mov	r4,r19
10003150:	0009ea40 	call	10009ea4 <__sprint_r>
10003154:	103e5f1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003158:	843ffc04 	addi	r16,r16,-16
1000315c:	d8c02017 	ldw	r3,128(sp)
10003160:	d8801f17 	ldw	r2,124(sp)
10003164:	da000404 	addi	r8,sp,16
10003168:	8c3fed16 	blt	r17,r16,10003120 <__alt_data_end+0xf8003120>
1000316c:	d9403517 	ldw	r5,212(sp)
10003170:	1c07883a 	add	r3,r3,r16
10003174:	10800044 	addi	r2,r2,1
10003178:	41400015 	stw	r5,0(r8)
1000317c:	44000115 	stw	r16,4(r8)
10003180:	d8c02015 	stw	r3,128(sp)
10003184:	d8801f15 	stw	r2,124(sp)
10003188:	010001c4 	movi	r4,7
1000318c:	2080060e 	bge	r4,r2,100031a8 <___vfprintf_internal_r+0xae4>
10003190:	d9002d17 	ldw	r4,180(sp)
10003194:	d9801e04 	addi	r6,sp,120
10003198:	b80b883a 	mov	r5,r23
1000319c:	0009ea40 	call	10009ea4 <__sprint_r>
100031a0:	103e4c1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100031a4:	d8c02017 	ldw	r3,128(sp)
100031a8:	d8803117 	ldw	r2,196(sp)
100031ac:	d9002917 	ldw	r4,164(sp)
100031b0:	1100010e 	bge	r2,r4,100031b8 <___vfprintf_internal_r+0xaf4>
100031b4:	2005883a 	mov	r2,r4
100031b8:	d9402f17 	ldw	r5,188(sp)
100031bc:	288b883a 	add	r5,r5,r2
100031c0:	d9402f15 	stw	r5,188(sp)
100031c4:	1801c01e 	bne	r3,zero,100038c8 <___vfprintf_internal_r+0x1204>
100031c8:	a8800007 	ldb	r2,0(r21)
100031cc:	d8001f15 	stw	zero,124(sp)
100031d0:	da000404 	addi	r8,sp,16
100031d4:	103d751e 	bne	r2,zero,100027ac <__alt_data_end+0xf80027ac>
100031d8:	a823883a 	mov	r17,r21
100031dc:	003d8b06 	br	1000280c <__alt_data_end+0xf800280c>
100031e0:	8025883a 	mov	r18,r16
100031e4:	dc002903 	ldbu	r16,164(sp)
100031e8:	e011883a 	mov	r8,fp
100031ec:	84003fcc 	andi	r16,r16,255
100031f0:	8005e51e 	bne	r16,zero,10004988 <___vfprintf_internal_r+0x22c4>
100031f4:	94800414 	ori	r18,r18,16
100031f8:	9080080c 	andi	r2,r18,32
100031fc:	10022b26 	beq	r2,zero,10003aac <___vfprintf_internal_r+0x13e8>
10003200:	d9002e17 	ldw	r4,184(sp)
10003204:	d9402a17 	ldw	r5,168(sp)
10003208:	d8002785 	stb	zero,158(sp)
1000320c:	20c00204 	addi	r3,r4,8
10003210:	24c00017 	ldw	r19,0(r4)
10003214:	25800117 	ldw	r22,4(r4)
10003218:	28042e16 	blt	r5,zero,100042d4 <___vfprintf_internal_r+0x1c10>
1000321c:	013fdfc4 	movi	r4,-129
10003220:	9d84b03a 	or	r2,r19,r22
10003224:	d8c02e15 	stw	r3,184(sp)
10003228:	9124703a 	and	r18,r18,r4
1000322c:	0039883a 	mov	fp,zero
10003230:	103e801e 	bne	r2,zero,10002c34 <__alt_data_end+0xf8002c34>
10003234:	d9002a17 	ldw	r4,168(sp)
10003238:	2002e01e 	bne	r4,zero,10003dbc <___vfprintf_internal_r+0x16f8>
1000323c:	d8002a15 	stw	zero,168(sp)
10003240:	d8002b15 	stw	zero,172(sp)
10003244:	dc001e04 	addi	r16,sp,120
10003248:	003ef506 	br	10002e20 <__alt_data_end+0xf8002e20>
1000324c:	8025883a 	mov	r18,r16
10003250:	dc002903 	ldbu	r16,164(sp)
10003254:	e011883a 	mov	r8,fp
10003258:	84003fcc 	andi	r16,r16,255
1000325c:	8005ba1e 	bne	r16,zero,10004948 <___vfprintf_internal_r+0x2284>
10003260:	01040074 	movhi	r4,4097
10003264:	21090704 	addi	r4,r4,9244
10003268:	d9003915 	stw	r4,228(sp)
1000326c:	9080080c 	andi	r2,r18,32
10003270:	10006126 	beq	r2,zero,100033f8 <___vfprintf_internal_r+0xd34>
10003274:	d9402e17 	ldw	r5,184(sp)
10003278:	2cc00017 	ldw	r19,0(r5)
1000327c:	2d800117 	ldw	r22,4(r5)
10003280:	29400204 	addi	r5,r5,8
10003284:	d9402e15 	stw	r5,184(sp)
10003288:	9080004c 	andi	r2,r18,1
1000328c:	1001ac26 	beq	r2,zero,10003940 <___vfprintf_internal_r+0x127c>
10003290:	9d84b03a 	or	r2,r19,r22
10003294:	10038526 	beq	r2,zero,100040ac <___vfprintf_internal_r+0x19e8>
10003298:	d8c02a17 	ldw	r3,168(sp)
1000329c:	00800c04 	movi	r2,48
100032a0:	d8802705 	stb	r2,156(sp)
100032a4:	dc402745 	stb	r17,157(sp)
100032a8:	d8002785 	stb	zero,158(sp)
100032ac:	90800094 	ori	r2,r18,2
100032b0:	18047916 	blt	r3,zero,10004498 <___vfprintf_internal_r+0x1dd4>
100032b4:	00bfdfc4 	movi	r2,-129
100032b8:	90a4703a 	and	r18,r18,r2
100032bc:	94800094 	ori	r18,r18,2
100032c0:	0039883a 	mov	fp,zero
100032c4:	d9003917 	ldw	r4,228(sp)
100032c8:	dc001e04 	addi	r16,sp,120
100032cc:	988003cc 	andi	r2,r19,15
100032d0:	b006973a 	slli	r3,r22,28
100032d4:	2085883a 	add	r2,r4,r2
100032d8:	9826d13a 	srli	r19,r19,4
100032dc:	10800003 	ldbu	r2,0(r2)
100032e0:	b02cd13a 	srli	r22,r22,4
100032e4:	843fffc4 	addi	r16,r16,-1
100032e8:	1ce6b03a 	or	r19,r3,r19
100032ec:	80800005 	stb	r2,0(r16)
100032f0:	9d84b03a 	or	r2,r19,r22
100032f4:	103ff51e 	bne	r2,zero,100032cc <__alt_data_end+0xf80032cc>
100032f8:	d8c02817 	ldw	r3,160(sp)
100032fc:	1c07c83a 	sub	r3,r3,r16
10003300:	d8c02b15 	stw	r3,172(sp)
10003304:	003ec606 	br	10002e20 <__alt_data_end+0xf8002e20>
10003308:	8025883a 	mov	r18,r16
1000330c:	dc002903 	ldbu	r16,164(sp)
10003310:	e011883a 	mov	r8,fp
10003314:	84003fcc 	andi	r16,r16,255
10003318:	803e9626 	beq	r16,zero,10002d74 <__alt_data_end+0xf8002d74>
1000331c:	d8c02b03 	ldbu	r3,172(sp)
10003320:	d8c02785 	stb	r3,158(sp)
10003324:	003e9306 	br	10002d74 <__alt_data_end+0xf8002d74>
10003328:	00c00044 	movi	r3,1
1000332c:	d8c02905 	stb	r3,164(sp)
10003330:	00c00ac4 	movi	r3,43
10003334:	d8c02b05 	stb	r3,172(sp)
10003338:	ac400007 	ldb	r17,0(r21)
1000333c:	003d4306 	br	1000284c <__alt_data_end+0xf800284c>
10003340:	84000814 	ori	r16,r16,32
10003344:	ac400007 	ldb	r17,0(r21)
10003348:	003d4006 	br	1000284c <__alt_data_end+0xf800284c>
1000334c:	d8802e17 	ldw	r2,184(sp)
10003350:	8025883a 	mov	r18,r16
10003354:	d8002785 	stb	zero,158(sp)
10003358:	14000017 	ldw	r16,0(r2)
1000335c:	e011883a 	mov	r8,fp
10003360:	14c00104 	addi	r19,r2,4
10003364:	80042d26 	beq	r16,zero,1000441c <___vfprintf_internal_r+0x1d58>
10003368:	d8c02a17 	ldw	r3,168(sp)
1000336c:	1803e416 	blt	r3,zero,10004300 <___vfprintf_internal_r+0x1c3c>
10003370:	180d883a 	mov	r6,r3
10003374:	000b883a 	mov	r5,zero
10003378:	8009883a 	mov	r4,r16
1000337c:	df003d15 	stw	fp,244(sp)
10003380:	0007ffc0 	call	10007ffc <memchr>
10003384:	da003d17 	ldw	r8,244(sp)
10003388:	10046826 	beq	r2,zero,1000452c <___vfprintf_internal_r+0x1e68>
1000338c:	1405c83a 	sub	r2,r2,r16
10003390:	d8802b15 	stw	r2,172(sp)
10003394:	1003e016 	blt	r2,zero,10004318 <___vfprintf_internal_r+0x1c54>
10003398:	df002783 	ldbu	fp,158(sp)
1000339c:	d8802915 	stw	r2,164(sp)
100033a0:	dcc02e15 	stw	r19,184(sp)
100033a4:	d8002a15 	stw	zero,168(sp)
100033a8:	d8003215 	stw	zero,200(sp)
100033ac:	003ea206 	br	10002e38 <__alt_data_end+0xf8002e38>
100033b0:	8025883a 	mov	r18,r16
100033b4:	dc002903 	ldbu	r16,164(sp)
100033b8:	e011883a 	mov	r8,fp
100033bc:	84003fcc 	andi	r16,r16,255
100033c0:	803f8d26 	beq	r16,zero,100031f8 <__alt_data_end+0xf80031f8>
100033c4:	d8c02b03 	ldbu	r3,172(sp)
100033c8:	d8c02785 	stb	r3,158(sp)
100033cc:	003f8a06 	br	100031f8 <__alt_data_end+0xf80031f8>
100033d0:	8025883a 	mov	r18,r16
100033d4:	dc002903 	ldbu	r16,164(sp)
100033d8:	e011883a 	mov	r8,fp
100033dc:	84003fcc 	andi	r16,r16,255
100033e0:	8005661e 	bne	r16,zero,1000497c <___vfprintf_internal_r+0x22b8>
100033e4:	01040074 	movhi	r4,4097
100033e8:	21090c04 	addi	r4,r4,9264
100033ec:	d9003915 	stw	r4,228(sp)
100033f0:	9080080c 	andi	r2,r18,32
100033f4:	103f9f1e 	bne	r2,zero,10003274 <__alt_data_end+0xf8003274>
100033f8:	9080040c 	andi	r2,r18,16
100033fc:	1002eb26 	beq	r2,zero,10003fac <___vfprintf_internal_r+0x18e8>
10003400:	d8802e17 	ldw	r2,184(sp)
10003404:	002d883a 	mov	r22,zero
10003408:	14c00017 	ldw	r19,0(r2)
1000340c:	10800104 	addi	r2,r2,4
10003410:	d8802e15 	stw	r2,184(sp)
10003414:	003f9c06 	br	10003288 <__alt_data_end+0xf8003288>
10003418:	d8802b07 	ldb	r2,172(sp)
1000341c:	1002e11e 	bne	r2,zero,10003fa4 <___vfprintf_internal_r+0x18e0>
10003420:	00c00044 	movi	r3,1
10003424:	d8c02905 	stb	r3,164(sp)
10003428:	00c00804 	movi	r3,32
1000342c:	d8c02b05 	stb	r3,172(sp)
10003430:	ac400007 	ldb	r17,0(r21)
10003434:	003d0506 	br	1000284c <__alt_data_end+0xf800284c>
10003438:	84000054 	ori	r16,r16,1
1000343c:	ac400007 	ldb	r17,0(r21)
10003440:	003d0206 	br	1000284c <__alt_data_end+0xf800284c>
10003444:	8025883a 	mov	r18,r16
10003448:	dc002903 	ldbu	r16,164(sp)
1000344c:	e011883a 	mov	r8,fp
10003450:	84003fcc 	andi	r16,r16,255
10003454:	803de726 	beq	r16,zero,10002bf4 <__alt_data_end+0xf8002bf4>
10003458:	d8c02b03 	ldbu	r3,172(sp)
1000345c:	d8c02785 	stb	r3,158(sp)
10003460:	003de406 	br	10002bf4 <__alt_data_end+0xf8002bf4>
10003464:	84001014 	ori	r16,r16,64
10003468:	ac400007 	ldb	r17,0(r21)
1000346c:	003cf706 	br	1000284c <__alt_data_end+0xf800284c>
10003470:	ac400007 	ldb	r17,0(r21)
10003474:	00801b04 	movi	r2,108
10003478:	88838f26 	beq	r17,r2,100042b8 <___vfprintf_internal_r+0x1bf4>
1000347c:	84000414 	ori	r16,r16,16
10003480:	003cf206 	br	1000284c <__alt_data_end+0xf800284c>
10003484:	8025883a 	mov	r18,r16
10003488:	dc002903 	ldbu	r16,164(sp)
1000348c:	e011883a 	mov	r8,fp
10003490:	84003fcc 	andi	r16,r16,255
10003494:	80053f1e 	bne	r16,zero,10004994 <___vfprintf_internal_r+0x22d0>
10003498:	9080080c 	andi	r2,r18,32
1000349c:	1002d226 	beq	r2,zero,10003fe8 <___vfprintf_internal_r+0x1924>
100034a0:	d9002e17 	ldw	r4,184(sp)
100034a4:	d9402f17 	ldw	r5,188(sp)
100034a8:	20800017 	ldw	r2,0(r4)
100034ac:	2807d7fa 	srai	r3,r5,31
100034b0:	21000104 	addi	r4,r4,4
100034b4:	d9002e15 	stw	r4,184(sp)
100034b8:	11400015 	stw	r5,0(r2)
100034bc:	10c00115 	stw	r3,4(r2)
100034c0:	003cb806 	br	100027a4 <__alt_data_end+0xf80027a4>
100034c4:	d8c02e17 	ldw	r3,184(sp)
100034c8:	d9002e17 	ldw	r4,184(sp)
100034cc:	8025883a 	mov	r18,r16
100034d0:	18800017 	ldw	r2,0(r3)
100034d4:	21000104 	addi	r4,r4,4
100034d8:	00c00044 	movi	r3,1
100034dc:	e011883a 	mov	r8,fp
100034e0:	d8c02915 	stw	r3,164(sp)
100034e4:	d8002785 	stb	zero,158(sp)
100034e8:	d8801405 	stb	r2,80(sp)
100034ec:	d9002e15 	stw	r4,184(sp)
100034f0:	d8c02b15 	stw	r3,172(sp)
100034f4:	d8002a15 	stw	zero,168(sp)
100034f8:	d8003215 	stw	zero,200(sp)
100034fc:	dc001404 	addi	r16,sp,80
10003500:	0039883a 	mov	fp,zero
10003504:	003e5306 	br	10002e54 <__alt_data_end+0xf8002e54>
10003508:	01040074 	movhi	r4,4097
1000350c:	21090c04 	addi	r4,r4,9264
10003510:	0039883a 	mov	fp,zero
10003514:	d9003915 	stw	r4,228(sp)
10003518:	04401e04 	movi	r17,120
1000351c:	003f6906 	br	100032c4 <__alt_data_end+0xf80032c4>
10003520:	8025883a 	mov	r18,r16
10003524:	dc002903 	ldbu	r16,164(sp)
10003528:	e011883a 	mov	r8,fp
1000352c:	84003fcc 	andi	r16,r16,255
10003530:	8005081e 	bne	r16,zero,10004954 <___vfprintf_internal_r+0x2290>
10003534:	883d6126 	beq	r17,zero,10002abc <__alt_data_end+0xf8002abc>
10003538:	00c00044 	movi	r3,1
1000353c:	d8c02915 	stw	r3,164(sp)
10003540:	dc401405 	stb	r17,80(sp)
10003544:	d8002785 	stb	zero,158(sp)
10003548:	003fe906 	br	100034f0 <__alt_data_end+0xf80034f0>
1000354c:	01440074 	movhi	r5,4097
10003550:	29490c04 	addi	r5,r5,9264
10003554:	d9403915 	stw	r5,228(sp)
10003558:	d8c02e15 	stw	r3,184(sp)
1000355c:	1025883a 	mov	r18,r2
10003560:	04401e04 	movi	r17,120
10003564:	9d84b03a 	or	r2,r19,r22
10003568:	1000fc1e 	bne	r2,zero,1000395c <___vfprintf_internal_r+0x1298>
1000356c:	0039883a 	mov	fp,zero
10003570:	00800084 	movi	r2,2
10003574:	10803fcc 	andi	r2,r2,255
10003578:	00c00044 	movi	r3,1
1000357c:	10c20f26 	beq	r2,r3,10003dbc <___vfprintf_internal_r+0x16f8>
10003580:	00c00084 	movi	r3,2
10003584:	10fd3326 	beq	r2,r3,10002a54 <__alt_data_end+0xf8002a54>
10003588:	003e0b06 	br	10002db8 <__alt_data_end+0xf8002db8>
1000358c:	d8c02017 	ldw	r3,128(sp)
10003590:	003e7106 	br	10002f58 <__alt_data_end+0xf8002f58>
10003594:	00801944 	movi	r2,101
10003598:	14407e0e 	bge	r2,r17,10003794 <___vfprintf_internal_r+0x10d0>
1000359c:	d9003617 	ldw	r4,216(sp)
100035a0:	d9403817 	ldw	r5,224(sp)
100035a4:	000d883a 	mov	r6,zero
100035a8:	000f883a 	mov	r7,zero
100035ac:	d8c03c15 	stw	r3,240(sp)
100035b0:	da003d15 	stw	r8,244(sp)
100035b4:	000de040 	call	1000de04 <__eqdf2>
100035b8:	d8c03c17 	ldw	r3,240(sp)
100035bc:	da003d17 	ldw	r8,244(sp)
100035c0:	1000f71e 	bne	r2,zero,100039a0 <___vfprintf_internal_r+0x12dc>
100035c4:	d8801f17 	ldw	r2,124(sp)
100035c8:	01040074 	movhi	r4,4097
100035cc:	21091304 	addi	r4,r4,9292
100035d0:	18c00044 	addi	r3,r3,1
100035d4:	10800044 	addi	r2,r2,1
100035d8:	41000015 	stw	r4,0(r8)
100035dc:	01000044 	movi	r4,1
100035e0:	41000115 	stw	r4,4(r8)
100035e4:	d8c02015 	stw	r3,128(sp)
100035e8:	d8801f15 	stw	r2,124(sp)
100035ec:	010001c4 	movi	r4,7
100035f0:	2082b816 	blt	r4,r2,100040d4 <___vfprintf_internal_r+0x1a10>
100035f4:	42000204 	addi	r8,r8,8
100035f8:	d8802617 	ldw	r2,152(sp)
100035fc:	d9403317 	ldw	r5,204(sp)
10003600:	11400216 	blt	r2,r5,1000360c <___vfprintf_internal_r+0xf48>
10003604:	9080004c 	andi	r2,r18,1
10003608:	103eb326 	beq	r2,zero,100030d8 <__alt_data_end+0xf80030d8>
1000360c:	d8803717 	ldw	r2,220(sp)
10003610:	d9003417 	ldw	r4,208(sp)
10003614:	d9403717 	ldw	r5,220(sp)
10003618:	1887883a 	add	r3,r3,r2
1000361c:	d8801f17 	ldw	r2,124(sp)
10003620:	41000015 	stw	r4,0(r8)
10003624:	41400115 	stw	r5,4(r8)
10003628:	10800044 	addi	r2,r2,1
1000362c:	d8c02015 	stw	r3,128(sp)
10003630:	d8801f15 	stw	r2,124(sp)
10003634:	010001c4 	movi	r4,7
10003638:	20832916 	blt	r4,r2,100042e0 <___vfprintf_internal_r+0x1c1c>
1000363c:	42000204 	addi	r8,r8,8
10003640:	d8803317 	ldw	r2,204(sp)
10003644:	143fffc4 	addi	r16,r2,-1
10003648:	043ea30e 	bge	zero,r16,100030d8 <__alt_data_end+0xf80030d8>
1000364c:	04400404 	movi	r17,16
10003650:	d8801f17 	ldw	r2,124(sp)
10003654:	8c00880e 	bge	r17,r16,10003878 <___vfprintf_internal_r+0x11b4>
10003658:	01440074 	movhi	r5,4097
1000365c:	29491384 	addi	r5,r5,9294
10003660:	d9402c15 	stw	r5,176(sp)
10003664:	058001c4 	movi	r22,7
10003668:	dcc02d17 	ldw	r19,180(sp)
1000366c:	00000306 	br	1000367c <___vfprintf_internal_r+0xfb8>
10003670:	42000204 	addi	r8,r8,8
10003674:	843ffc04 	addi	r16,r16,-16
10003678:	8c00820e 	bge	r17,r16,10003884 <___vfprintf_internal_r+0x11c0>
1000367c:	18c00404 	addi	r3,r3,16
10003680:	10800044 	addi	r2,r2,1
10003684:	45000015 	stw	r20,0(r8)
10003688:	44400115 	stw	r17,4(r8)
1000368c:	d8c02015 	stw	r3,128(sp)
10003690:	d8801f15 	stw	r2,124(sp)
10003694:	b0bff60e 	bge	r22,r2,10003670 <__alt_data_end+0xf8003670>
10003698:	d9801e04 	addi	r6,sp,120
1000369c:	b80b883a 	mov	r5,r23
100036a0:	9809883a 	mov	r4,r19
100036a4:	0009ea40 	call	10009ea4 <__sprint_r>
100036a8:	103d0a1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100036ac:	d8c02017 	ldw	r3,128(sp)
100036b0:	d8801f17 	ldw	r2,124(sp)
100036b4:	da000404 	addi	r8,sp,16
100036b8:	003fee06 	br	10003674 <__alt_data_end+0xf8003674>
100036bc:	d9403117 	ldw	r5,196(sp)
100036c0:	d8802917 	ldw	r2,164(sp)
100036c4:	28adc83a 	sub	r22,r5,r2
100036c8:	05be410e 	bge	zero,r22,10002fd0 <__alt_data_end+0xf8002fd0>
100036cc:	07000404 	movi	fp,16
100036d0:	d8801f17 	ldw	r2,124(sp)
100036d4:	e5838f0e 	bge	fp,r22,10004514 <___vfprintf_internal_r+0x1e50>
100036d8:	01440074 	movhi	r5,4097
100036dc:	29491384 	addi	r5,r5,9294
100036e0:	dc403015 	stw	r17,192(sp)
100036e4:	d9402c15 	stw	r5,176(sp)
100036e8:	b023883a 	mov	r17,r22
100036ec:	04c001c4 	movi	r19,7
100036f0:	a82d883a 	mov	r22,r21
100036f4:	902b883a 	mov	r21,r18
100036f8:	8025883a 	mov	r18,r16
100036fc:	dc002d17 	ldw	r16,180(sp)
10003700:	00000306 	br	10003710 <___vfprintf_internal_r+0x104c>
10003704:	8c7ffc04 	addi	r17,r17,-16
10003708:	42000204 	addi	r8,r8,8
1000370c:	e440110e 	bge	fp,r17,10003754 <___vfprintf_internal_r+0x1090>
10003710:	18c00404 	addi	r3,r3,16
10003714:	10800044 	addi	r2,r2,1
10003718:	45000015 	stw	r20,0(r8)
1000371c:	47000115 	stw	fp,4(r8)
10003720:	d8c02015 	stw	r3,128(sp)
10003724:	d8801f15 	stw	r2,124(sp)
10003728:	98bff60e 	bge	r19,r2,10003704 <__alt_data_end+0xf8003704>
1000372c:	d9801e04 	addi	r6,sp,120
10003730:	b80b883a 	mov	r5,r23
10003734:	8009883a 	mov	r4,r16
10003738:	0009ea40 	call	10009ea4 <__sprint_r>
1000373c:	103ce51e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003740:	8c7ffc04 	addi	r17,r17,-16
10003744:	d8c02017 	ldw	r3,128(sp)
10003748:	d8801f17 	ldw	r2,124(sp)
1000374c:	da000404 	addi	r8,sp,16
10003750:	e47fef16 	blt	fp,r17,10003710 <__alt_data_end+0xf8003710>
10003754:	9021883a 	mov	r16,r18
10003758:	a825883a 	mov	r18,r21
1000375c:	b02b883a 	mov	r21,r22
10003760:	882d883a 	mov	r22,r17
10003764:	dc403017 	ldw	r17,192(sp)
10003768:	d9002c17 	ldw	r4,176(sp)
1000376c:	1d87883a 	add	r3,r3,r22
10003770:	10800044 	addi	r2,r2,1
10003774:	41000015 	stw	r4,0(r8)
10003778:	45800115 	stw	r22,4(r8)
1000377c:	d8c02015 	stw	r3,128(sp)
10003780:	d8801f15 	stw	r2,124(sp)
10003784:	010001c4 	movi	r4,7
10003788:	20818e16 	blt	r4,r2,10003dc4 <___vfprintf_internal_r+0x1700>
1000378c:	42000204 	addi	r8,r8,8
10003790:	003e0f06 	br	10002fd0 <__alt_data_end+0xf8002fd0>
10003794:	d9403317 	ldw	r5,204(sp)
10003798:	00800044 	movi	r2,1
1000379c:	18c00044 	addi	r3,r3,1
100037a0:	1141530e 	bge	r2,r5,10003cf0 <___vfprintf_internal_r+0x162c>
100037a4:	dc401f17 	ldw	r17,124(sp)
100037a8:	00800044 	movi	r2,1
100037ac:	40800115 	stw	r2,4(r8)
100037b0:	8c400044 	addi	r17,r17,1
100037b4:	44000015 	stw	r16,0(r8)
100037b8:	d8c02015 	stw	r3,128(sp)
100037bc:	dc401f15 	stw	r17,124(sp)
100037c0:	008001c4 	movi	r2,7
100037c4:	14416b16 	blt	r2,r17,10003d74 <___vfprintf_internal_r+0x16b0>
100037c8:	42000204 	addi	r8,r8,8
100037cc:	d8803717 	ldw	r2,220(sp)
100037d0:	d9003417 	ldw	r4,208(sp)
100037d4:	8c400044 	addi	r17,r17,1
100037d8:	10c7883a 	add	r3,r2,r3
100037dc:	40800115 	stw	r2,4(r8)
100037e0:	41000015 	stw	r4,0(r8)
100037e4:	d8c02015 	stw	r3,128(sp)
100037e8:	dc401f15 	stw	r17,124(sp)
100037ec:	008001c4 	movi	r2,7
100037f0:	14416916 	blt	r2,r17,10003d98 <___vfprintf_internal_r+0x16d4>
100037f4:	45800204 	addi	r22,r8,8
100037f8:	d9003617 	ldw	r4,216(sp)
100037fc:	d9403817 	ldw	r5,224(sp)
10003800:	000d883a 	mov	r6,zero
10003804:	000f883a 	mov	r7,zero
10003808:	d8c03c15 	stw	r3,240(sp)
1000380c:	000de040 	call	1000de04 <__eqdf2>
10003810:	d8c03c17 	ldw	r3,240(sp)
10003814:	1000bc26 	beq	r2,zero,10003b08 <___vfprintf_internal_r+0x1444>
10003818:	d9403317 	ldw	r5,204(sp)
1000381c:	84000044 	addi	r16,r16,1
10003820:	8c400044 	addi	r17,r17,1
10003824:	28bfffc4 	addi	r2,r5,-1
10003828:	1887883a 	add	r3,r3,r2
1000382c:	b0800115 	stw	r2,4(r22)
10003830:	b4000015 	stw	r16,0(r22)
10003834:	d8c02015 	stw	r3,128(sp)
10003838:	dc401f15 	stw	r17,124(sp)
1000383c:	008001c4 	movi	r2,7
10003840:	14414316 	blt	r2,r17,10003d50 <___vfprintf_internal_r+0x168c>
10003844:	b5800204 	addi	r22,r22,8
10003848:	d9003a17 	ldw	r4,232(sp)
1000384c:	df0022c4 	addi	fp,sp,139
10003850:	8c400044 	addi	r17,r17,1
10003854:	20c7883a 	add	r3,r4,r3
10003858:	b7000015 	stw	fp,0(r22)
1000385c:	b1000115 	stw	r4,4(r22)
10003860:	d8c02015 	stw	r3,128(sp)
10003864:	dc401f15 	stw	r17,124(sp)
10003868:	008001c4 	movi	r2,7
1000386c:	14400e16 	blt	r2,r17,100038a8 <___vfprintf_internal_r+0x11e4>
10003870:	b2000204 	addi	r8,r22,8
10003874:	003e1806 	br	100030d8 <__alt_data_end+0xf80030d8>
10003878:	01040074 	movhi	r4,4097
1000387c:	21091384 	addi	r4,r4,9294
10003880:	d9002c15 	stw	r4,176(sp)
10003884:	d9002c17 	ldw	r4,176(sp)
10003888:	1c07883a 	add	r3,r3,r16
1000388c:	44000115 	stw	r16,4(r8)
10003890:	41000015 	stw	r4,0(r8)
10003894:	10800044 	addi	r2,r2,1
10003898:	d8c02015 	stw	r3,128(sp)
1000389c:	d8801f15 	stw	r2,124(sp)
100038a0:	010001c4 	movi	r4,7
100038a4:	20be0b0e 	bge	r4,r2,100030d4 <__alt_data_end+0xf80030d4>
100038a8:	d9002d17 	ldw	r4,180(sp)
100038ac:	d9801e04 	addi	r6,sp,120
100038b0:	b80b883a 	mov	r5,r23
100038b4:	0009ea40 	call	10009ea4 <__sprint_r>
100038b8:	103c861e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100038bc:	d8c02017 	ldw	r3,128(sp)
100038c0:	da000404 	addi	r8,sp,16
100038c4:	003e0406 	br	100030d8 <__alt_data_end+0xf80030d8>
100038c8:	d9002d17 	ldw	r4,180(sp)
100038cc:	d9801e04 	addi	r6,sp,120
100038d0:	b80b883a 	mov	r5,r23
100038d4:	0009ea40 	call	10009ea4 <__sprint_r>
100038d8:	103e3b26 	beq	r2,zero,100031c8 <__alt_data_end+0xf80031c8>
100038dc:	003c7d06 	br	10002ad4 <__alt_data_end+0xf8002ad4>
100038e0:	d9002d17 	ldw	r4,180(sp)
100038e4:	d9801e04 	addi	r6,sp,120
100038e8:	b80b883a 	mov	r5,r23
100038ec:	0009ea40 	call	10009ea4 <__sprint_r>
100038f0:	103c781e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100038f4:	d8c02017 	ldw	r3,128(sp)
100038f8:	da000404 	addi	r8,sp,16
100038fc:	003de906 	br	100030a4 <__alt_data_end+0xf80030a4>
10003900:	d9002d17 	ldw	r4,180(sp)
10003904:	d9801e04 	addi	r6,sp,120
10003908:	b80b883a 	mov	r5,r23
1000390c:	0009ea40 	call	10009ea4 <__sprint_r>
10003910:	103c701e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003914:	d8c02017 	ldw	r3,128(sp)
10003918:	da000404 	addi	r8,sp,16
1000391c:	003d9b06 	br	10002f8c <__alt_data_end+0xf8002f8c>
10003920:	d9002d17 	ldw	r4,180(sp)
10003924:	d9801e04 	addi	r6,sp,120
10003928:	b80b883a 	mov	r5,r23
1000392c:	0009ea40 	call	10009ea4 <__sprint_r>
10003930:	103c681e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003934:	d8c02017 	ldw	r3,128(sp)
10003938:	da000404 	addi	r8,sp,16
1000393c:	003da106 	br	10002fc4 <__alt_data_end+0xf8002fc4>
10003940:	d9402a17 	ldw	r5,168(sp)
10003944:	d8002785 	stb	zero,158(sp)
10003948:	283f0616 	blt	r5,zero,10003564 <__alt_data_end+0xf8003564>
1000394c:	00ffdfc4 	movi	r3,-129
10003950:	9d84b03a 	or	r2,r19,r22
10003954:	90e4703a 	and	r18,r18,r3
10003958:	103c3b26 	beq	r2,zero,10002a48 <__alt_data_end+0xf8002a48>
1000395c:	0039883a 	mov	fp,zero
10003960:	003e5806 	br	100032c4 <__alt_data_end+0xf80032c4>
10003964:	9080040c 	andi	r2,r18,16
10003968:	1001b326 	beq	r2,zero,10004038 <___vfprintf_internal_r+0x1974>
1000396c:	d8c02e17 	ldw	r3,184(sp)
10003970:	d9002a17 	ldw	r4,168(sp)
10003974:	d8002785 	stb	zero,158(sp)
10003978:	18800104 	addi	r2,r3,4
1000397c:	1cc00017 	ldw	r19,0(r3)
10003980:	002d883a 	mov	r22,zero
10003984:	2001b516 	blt	r4,zero,1000405c <___vfprintf_internal_r+0x1998>
10003988:	00ffdfc4 	movi	r3,-129
1000398c:	d8802e15 	stw	r2,184(sp)
10003990:	90e4703a 	and	r18,r18,r3
10003994:	983d0526 	beq	r19,zero,10002dac <__alt_data_end+0xf8002dac>
10003998:	0039883a 	mov	fp,zero
1000399c:	003d0806 	br	10002dc0 <__alt_data_end+0xf8002dc0>
100039a0:	dc402617 	ldw	r17,152(sp)
100039a4:	0441d30e 	bge	zero,r17,100040f4 <___vfprintf_internal_r+0x1a30>
100039a8:	dc403217 	ldw	r17,200(sp)
100039ac:	d8803317 	ldw	r2,204(sp)
100039b0:	1440010e 	bge	r2,r17,100039b8 <___vfprintf_internal_r+0x12f4>
100039b4:	1023883a 	mov	r17,r2
100039b8:	04400a0e 	bge	zero,r17,100039e4 <___vfprintf_internal_r+0x1320>
100039bc:	d8801f17 	ldw	r2,124(sp)
100039c0:	1c47883a 	add	r3,r3,r17
100039c4:	44000015 	stw	r16,0(r8)
100039c8:	10800044 	addi	r2,r2,1
100039cc:	44400115 	stw	r17,4(r8)
100039d0:	d8c02015 	stw	r3,128(sp)
100039d4:	d8801f15 	stw	r2,124(sp)
100039d8:	010001c4 	movi	r4,7
100039dc:	20826516 	blt	r4,r2,10004374 <___vfprintf_internal_r+0x1cb0>
100039e0:	42000204 	addi	r8,r8,8
100039e4:	88026116 	blt	r17,zero,1000436c <___vfprintf_internal_r+0x1ca8>
100039e8:	d9003217 	ldw	r4,200(sp)
100039ec:	2463c83a 	sub	r17,r4,r17
100039f0:	04407b0e 	bge	zero,r17,10003be0 <___vfprintf_internal_r+0x151c>
100039f4:	05800404 	movi	r22,16
100039f8:	d8801f17 	ldw	r2,124(sp)
100039fc:	b4419d0e 	bge	r22,r17,10004074 <___vfprintf_internal_r+0x19b0>
10003a00:	01040074 	movhi	r4,4097
10003a04:	21091384 	addi	r4,r4,9294
10003a08:	d9002c15 	stw	r4,176(sp)
10003a0c:	070001c4 	movi	fp,7
10003a10:	dcc02d17 	ldw	r19,180(sp)
10003a14:	00000306 	br	10003a24 <___vfprintf_internal_r+0x1360>
10003a18:	42000204 	addi	r8,r8,8
10003a1c:	8c7ffc04 	addi	r17,r17,-16
10003a20:	b441970e 	bge	r22,r17,10004080 <___vfprintf_internal_r+0x19bc>
10003a24:	18c00404 	addi	r3,r3,16
10003a28:	10800044 	addi	r2,r2,1
10003a2c:	45000015 	stw	r20,0(r8)
10003a30:	45800115 	stw	r22,4(r8)
10003a34:	d8c02015 	stw	r3,128(sp)
10003a38:	d8801f15 	stw	r2,124(sp)
10003a3c:	e0bff60e 	bge	fp,r2,10003a18 <__alt_data_end+0xf8003a18>
10003a40:	d9801e04 	addi	r6,sp,120
10003a44:	b80b883a 	mov	r5,r23
10003a48:	9809883a 	mov	r4,r19
10003a4c:	0009ea40 	call	10009ea4 <__sprint_r>
10003a50:	103c201e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003a54:	d8c02017 	ldw	r3,128(sp)
10003a58:	d8801f17 	ldw	r2,124(sp)
10003a5c:	da000404 	addi	r8,sp,16
10003a60:	003fee06 	br	10003a1c <__alt_data_end+0xf8003a1c>
10003a64:	d9002d17 	ldw	r4,180(sp)
10003a68:	d9801e04 	addi	r6,sp,120
10003a6c:	b80b883a 	mov	r5,r23
10003a70:	0009ea40 	call	10009ea4 <__sprint_r>
10003a74:	103c171e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003a78:	d8c02017 	ldw	r3,128(sp)
10003a7c:	df002787 	ldb	fp,158(sp)
10003a80:	da000404 	addi	r8,sp,16
10003a84:	003d3406 	br	10002f58 <__alt_data_end+0xf8002f58>
10003a88:	9080040c 	andi	r2,r18,16
10003a8c:	10016126 	beq	r2,zero,10004014 <___vfprintf_internal_r+0x1950>
10003a90:	d9402e17 	ldw	r5,184(sp)
10003a94:	2cc00017 	ldw	r19,0(r5)
10003a98:	29400104 	addi	r5,r5,4
10003a9c:	d9402e15 	stw	r5,184(sp)
10003aa0:	982dd7fa 	srai	r22,r19,31
10003aa4:	b005883a 	mov	r2,r22
10003aa8:	003c5a06 	br	10002c14 <__alt_data_end+0xf8002c14>
10003aac:	9080040c 	andi	r2,r18,16
10003ab0:	10003526 	beq	r2,zero,10003b88 <___vfprintf_internal_r+0x14c4>
10003ab4:	d8c02e17 	ldw	r3,184(sp)
10003ab8:	d9002a17 	ldw	r4,168(sp)
10003abc:	d8002785 	stb	zero,158(sp)
10003ac0:	18800104 	addi	r2,r3,4
10003ac4:	1cc00017 	ldw	r19,0(r3)
10003ac8:	002d883a 	mov	r22,zero
10003acc:	20003716 	blt	r4,zero,10003bac <___vfprintf_internal_r+0x14e8>
10003ad0:	00ffdfc4 	movi	r3,-129
10003ad4:	d8802e15 	stw	r2,184(sp)
10003ad8:	90e4703a 	and	r18,r18,r3
10003adc:	0039883a 	mov	fp,zero
10003ae0:	983dd426 	beq	r19,zero,10003234 <__alt_data_end+0xf8003234>
10003ae4:	00800244 	movi	r2,9
10003ae8:	14fc5336 	bltu	r2,r19,10002c38 <__alt_data_end+0xf8002c38>
10003aec:	d8c02817 	ldw	r3,160(sp)
10003af0:	dc001dc4 	addi	r16,sp,119
10003af4:	9cc00c04 	addi	r19,r19,48
10003af8:	1c07c83a 	sub	r3,r3,r16
10003afc:	dcc01dc5 	stb	r19,119(sp)
10003b00:	d8c02b15 	stw	r3,172(sp)
10003b04:	003cc606 	br	10002e20 <__alt_data_end+0xf8002e20>
10003b08:	d8803317 	ldw	r2,204(sp)
10003b0c:	143fffc4 	addi	r16,r2,-1
10003b10:	043f4d0e 	bge	zero,r16,10003848 <__alt_data_end+0xf8003848>
10003b14:	07000404 	movi	fp,16
10003b18:	e400810e 	bge	fp,r16,10003d20 <___vfprintf_internal_r+0x165c>
10003b1c:	01440074 	movhi	r5,4097
10003b20:	29491384 	addi	r5,r5,9294
10003b24:	d9402c15 	stw	r5,176(sp)
10003b28:	01c001c4 	movi	r7,7
10003b2c:	dcc02d17 	ldw	r19,180(sp)
10003b30:	00000306 	br	10003b40 <___vfprintf_internal_r+0x147c>
10003b34:	b5800204 	addi	r22,r22,8
10003b38:	843ffc04 	addi	r16,r16,-16
10003b3c:	e4007b0e 	bge	fp,r16,10003d2c <___vfprintf_internal_r+0x1668>
10003b40:	18c00404 	addi	r3,r3,16
10003b44:	8c400044 	addi	r17,r17,1
10003b48:	b5000015 	stw	r20,0(r22)
10003b4c:	b7000115 	stw	fp,4(r22)
10003b50:	d8c02015 	stw	r3,128(sp)
10003b54:	dc401f15 	stw	r17,124(sp)
10003b58:	3c7ff60e 	bge	r7,r17,10003b34 <__alt_data_end+0xf8003b34>
10003b5c:	d9801e04 	addi	r6,sp,120
10003b60:	b80b883a 	mov	r5,r23
10003b64:	9809883a 	mov	r4,r19
10003b68:	d9c03c15 	stw	r7,240(sp)
10003b6c:	0009ea40 	call	10009ea4 <__sprint_r>
10003b70:	d9c03c17 	ldw	r7,240(sp)
10003b74:	103bd71e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003b78:	d8c02017 	ldw	r3,128(sp)
10003b7c:	dc401f17 	ldw	r17,124(sp)
10003b80:	dd800404 	addi	r22,sp,16
10003b84:	003fec06 	br	10003b38 <__alt_data_end+0xf8003b38>
10003b88:	9080100c 	andi	r2,r18,64
10003b8c:	d8002785 	stb	zero,158(sp)
10003b90:	10010e26 	beq	r2,zero,10003fcc <___vfprintf_internal_r+0x1908>
10003b94:	d9402e17 	ldw	r5,184(sp)
10003b98:	d8c02a17 	ldw	r3,168(sp)
10003b9c:	002d883a 	mov	r22,zero
10003ba0:	28800104 	addi	r2,r5,4
10003ba4:	2cc0000b 	ldhu	r19,0(r5)
10003ba8:	183fc90e 	bge	r3,zero,10003ad0 <__alt_data_end+0xf8003ad0>
10003bac:	d8802e15 	stw	r2,184(sp)
10003bb0:	0039883a 	mov	fp,zero
10003bb4:	9d84b03a 	or	r2,r19,r22
10003bb8:	103c1e1e 	bne	r2,zero,10002c34 <__alt_data_end+0xf8002c34>
10003bbc:	00800044 	movi	r2,1
10003bc0:	003e6c06 	br	10003574 <__alt_data_end+0xf8003574>
10003bc4:	d9002d17 	ldw	r4,180(sp)
10003bc8:	d9801e04 	addi	r6,sp,120
10003bcc:	b80b883a 	mov	r5,r23
10003bd0:	0009ea40 	call	10009ea4 <__sprint_r>
10003bd4:	103bbf1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003bd8:	d8c02017 	ldw	r3,128(sp)
10003bdc:	da000404 	addi	r8,sp,16
10003be0:	d9003217 	ldw	r4,200(sp)
10003be4:	d8802617 	ldw	r2,152(sp)
10003be8:	d9403317 	ldw	r5,204(sp)
10003bec:	8123883a 	add	r17,r16,r4
10003bf0:	11400216 	blt	r2,r5,10003bfc <___vfprintf_internal_r+0x1538>
10003bf4:	9100004c 	andi	r4,r18,1
10003bf8:	20000d26 	beq	r4,zero,10003c30 <___vfprintf_internal_r+0x156c>
10003bfc:	d9003717 	ldw	r4,220(sp)
10003c00:	d9403417 	ldw	r5,208(sp)
10003c04:	1907883a 	add	r3,r3,r4
10003c08:	d9001f17 	ldw	r4,124(sp)
10003c0c:	41400015 	stw	r5,0(r8)
10003c10:	d9403717 	ldw	r5,220(sp)
10003c14:	21000044 	addi	r4,r4,1
10003c18:	d8c02015 	stw	r3,128(sp)
10003c1c:	41400115 	stw	r5,4(r8)
10003c20:	d9001f15 	stw	r4,124(sp)
10003c24:	014001c4 	movi	r5,7
10003c28:	2901e816 	blt	r5,r4,100043cc <___vfprintf_internal_r+0x1d08>
10003c2c:	42000204 	addi	r8,r8,8
10003c30:	d9003317 	ldw	r4,204(sp)
10003c34:	8121883a 	add	r16,r16,r4
10003c38:	2085c83a 	sub	r2,r4,r2
10003c3c:	8461c83a 	sub	r16,r16,r17
10003c40:	1400010e 	bge	r2,r16,10003c48 <___vfprintf_internal_r+0x1584>
10003c44:	1021883a 	mov	r16,r2
10003c48:	04000a0e 	bge	zero,r16,10003c74 <___vfprintf_internal_r+0x15b0>
10003c4c:	d9001f17 	ldw	r4,124(sp)
10003c50:	1c07883a 	add	r3,r3,r16
10003c54:	44400015 	stw	r17,0(r8)
10003c58:	21000044 	addi	r4,r4,1
10003c5c:	44000115 	stw	r16,4(r8)
10003c60:	d8c02015 	stw	r3,128(sp)
10003c64:	d9001f15 	stw	r4,124(sp)
10003c68:	014001c4 	movi	r5,7
10003c6c:	2901fb16 	blt	r5,r4,1000445c <___vfprintf_internal_r+0x1d98>
10003c70:	42000204 	addi	r8,r8,8
10003c74:	8001f716 	blt	r16,zero,10004454 <___vfprintf_internal_r+0x1d90>
10003c78:	1421c83a 	sub	r16,r2,r16
10003c7c:	043d160e 	bge	zero,r16,100030d8 <__alt_data_end+0xf80030d8>
10003c80:	04400404 	movi	r17,16
10003c84:	d8801f17 	ldw	r2,124(sp)
10003c88:	8c3efb0e 	bge	r17,r16,10003878 <__alt_data_end+0xf8003878>
10003c8c:	01440074 	movhi	r5,4097
10003c90:	29491384 	addi	r5,r5,9294
10003c94:	d9402c15 	stw	r5,176(sp)
10003c98:	058001c4 	movi	r22,7
10003c9c:	dcc02d17 	ldw	r19,180(sp)
10003ca0:	00000306 	br	10003cb0 <___vfprintf_internal_r+0x15ec>
10003ca4:	42000204 	addi	r8,r8,8
10003ca8:	843ffc04 	addi	r16,r16,-16
10003cac:	8c3ef50e 	bge	r17,r16,10003884 <__alt_data_end+0xf8003884>
10003cb0:	18c00404 	addi	r3,r3,16
10003cb4:	10800044 	addi	r2,r2,1
10003cb8:	45000015 	stw	r20,0(r8)
10003cbc:	44400115 	stw	r17,4(r8)
10003cc0:	d8c02015 	stw	r3,128(sp)
10003cc4:	d8801f15 	stw	r2,124(sp)
10003cc8:	b0bff60e 	bge	r22,r2,10003ca4 <__alt_data_end+0xf8003ca4>
10003ccc:	d9801e04 	addi	r6,sp,120
10003cd0:	b80b883a 	mov	r5,r23
10003cd4:	9809883a 	mov	r4,r19
10003cd8:	0009ea40 	call	10009ea4 <__sprint_r>
10003cdc:	103b7d1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003ce0:	d8c02017 	ldw	r3,128(sp)
10003ce4:	d8801f17 	ldw	r2,124(sp)
10003ce8:	da000404 	addi	r8,sp,16
10003cec:	003fee06 	br	10003ca8 <__alt_data_end+0xf8003ca8>
10003cf0:	9088703a 	and	r4,r18,r2
10003cf4:	203eab1e 	bne	r4,zero,100037a4 <__alt_data_end+0xf80037a4>
10003cf8:	dc401f17 	ldw	r17,124(sp)
10003cfc:	40800115 	stw	r2,4(r8)
10003d00:	44000015 	stw	r16,0(r8)
10003d04:	8c400044 	addi	r17,r17,1
10003d08:	d8c02015 	stw	r3,128(sp)
10003d0c:	dc401f15 	stw	r17,124(sp)
10003d10:	008001c4 	movi	r2,7
10003d14:	14400e16 	blt	r2,r17,10003d50 <___vfprintf_internal_r+0x168c>
10003d18:	45800204 	addi	r22,r8,8
10003d1c:	003eca06 	br	10003848 <__alt_data_end+0xf8003848>
10003d20:	01040074 	movhi	r4,4097
10003d24:	21091384 	addi	r4,r4,9294
10003d28:	d9002c15 	stw	r4,176(sp)
10003d2c:	d8802c17 	ldw	r2,176(sp)
10003d30:	1c07883a 	add	r3,r3,r16
10003d34:	8c400044 	addi	r17,r17,1
10003d38:	b0800015 	stw	r2,0(r22)
10003d3c:	b4000115 	stw	r16,4(r22)
10003d40:	d8c02015 	stw	r3,128(sp)
10003d44:	dc401f15 	stw	r17,124(sp)
10003d48:	008001c4 	movi	r2,7
10003d4c:	147ebd0e 	bge	r2,r17,10003844 <__alt_data_end+0xf8003844>
10003d50:	d9002d17 	ldw	r4,180(sp)
10003d54:	d9801e04 	addi	r6,sp,120
10003d58:	b80b883a 	mov	r5,r23
10003d5c:	0009ea40 	call	10009ea4 <__sprint_r>
10003d60:	103b5c1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003d64:	d8c02017 	ldw	r3,128(sp)
10003d68:	dc401f17 	ldw	r17,124(sp)
10003d6c:	dd800404 	addi	r22,sp,16
10003d70:	003eb506 	br	10003848 <__alt_data_end+0xf8003848>
10003d74:	d9002d17 	ldw	r4,180(sp)
10003d78:	d9801e04 	addi	r6,sp,120
10003d7c:	b80b883a 	mov	r5,r23
10003d80:	0009ea40 	call	10009ea4 <__sprint_r>
10003d84:	103b531e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003d88:	d8c02017 	ldw	r3,128(sp)
10003d8c:	dc401f17 	ldw	r17,124(sp)
10003d90:	da000404 	addi	r8,sp,16
10003d94:	003e8d06 	br	100037cc <__alt_data_end+0xf80037cc>
10003d98:	d9002d17 	ldw	r4,180(sp)
10003d9c:	d9801e04 	addi	r6,sp,120
10003da0:	b80b883a 	mov	r5,r23
10003da4:	0009ea40 	call	10009ea4 <__sprint_r>
10003da8:	103b4a1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003dac:	d8c02017 	ldw	r3,128(sp)
10003db0:	dc401f17 	ldw	r17,124(sp)
10003db4:	dd800404 	addi	r22,sp,16
10003db8:	003e8f06 	br	100037f8 <__alt_data_end+0xf80037f8>
10003dbc:	0027883a 	mov	r19,zero
10003dc0:	003f4a06 	br	10003aec <__alt_data_end+0xf8003aec>
10003dc4:	d9002d17 	ldw	r4,180(sp)
10003dc8:	d9801e04 	addi	r6,sp,120
10003dcc:	b80b883a 	mov	r5,r23
10003dd0:	0009ea40 	call	10009ea4 <__sprint_r>
10003dd4:	103b3f1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10003dd8:	d8c02017 	ldw	r3,128(sp)
10003ddc:	da000404 	addi	r8,sp,16
10003de0:	003c7b06 	br	10002fd0 <__alt_data_end+0xf8002fd0>
10003de4:	d9402a17 	ldw	r5,168(sp)
10003de8:	04e7c83a 	sub	r19,zero,r19
10003dec:	07000b44 	movi	fp,45
10003df0:	9804c03a 	cmpne	r2,r19,zero
10003df4:	05adc83a 	sub	r22,zero,r22
10003df8:	df002785 	stb	fp,158(sp)
10003dfc:	b0adc83a 	sub	r22,r22,r2
10003e00:	28017b16 	blt	r5,zero,100043f0 <___vfprintf_internal_r+0x1d2c>
10003e04:	00bfdfc4 	movi	r2,-129
10003e08:	90a4703a 	and	r18,r18,r2
10003e0c:	003b8906 	br	10002c34 <__alt_data_end+0xf8002c34>
10003e10:	d9003617 	ldw	r4,216(sp)
10003e14:	d9403817 	ldw	r5,224(sp)
10003e18:	da003d15 	stw	r8,244(sp)
10003e1c:	0009ac80 	call	10009ac8 <__fpclassifyd>
10003e20:	da003d17 	ldw	r8,244(sp)
10003e24:	1000f026 	beq	r2,zero,100041e8 <___vfprintf_internal_r+0x1b24>
10003e28:	d9002a17 	ldw	r4,168(sp)
10003e2c:	05bff7c4 	movi	r22,-33
10003e30:	00bfffc4 	movi	r2,-1
10003e34:	8dac703a 	and	r22,r17,r22
10003e38:	20820026 	beq	r4,r2,1000463c <___vfprintf_internal_r+0x1f78>
10003e3c:	008011c4 	movi	r2,71
10003e40:	b081f726 	beq	r22,r2,10004620 <___vfprintf_internal_r+0x1f5c>
10003e44:	d9003817 	ldw	r4,224(sp)
10003e48:	90c04014 	ori	r3,r18,256
10003e4c:	d8c02c15 	stw	r3,176(sp)
10003e50:	20021516 	blt	r4,zero,100046a8 <___vfprintf_internal_r+0x1fe4>
10003e54:	dcc03817 	ldw	r19,224(sp)
10003e58:	d8002905 	stb	zero,164(sp)
10003e5c:	00801984 	movi	r2,102
10003e60:	8881f926 	beq	r17,r2,10004648 <___vfprintf_internal_r+0x1f84>
10003e64:	00801184 	movi	r2,70
10003e68:	88821c26 	beq	r17,r2,100046dc <___vfprintf_internal_r+0x2018>
10003e6c:	00801144 	movi	r2,69
10003e70:	b081ef26 	beq	r22,r2,10004630 <___vfprintf_internal_r+0x1f6c>
10003e74:	d8c02a17 	ldw	r3,168(sp)
10003e78:	d8802104 	addi	r2,sp,132
10003e7c:	d8800315 	stw	r2,12(sp)
10003e80:	d9403617 	ldw	r5,216(sp)
10003e84:	d8802504 	addi	r2,sp,148
10003e88:	d9002d17 	ldw	r4,180(sp)
10003e8c:	d8800215 	stw	r2,8(sp)
10003e90:	d8802604 	addi	r2,sp,152
10003e94:	d8c00015 	stw	r3,0(sp)
10003e98:	d8800115 	stw	r2,4(sp)
10003e9c:	01c00084 	movi	r7,2
10003ea0:	980d883a 	mov	r6,r19
10003ea4:	d8c03c15 	stw	r3,240(sp)
10003ea8:	da003d15 	stw	r8,244(sp)
10003eac:	0004df40 	call	10004df4 <_dtoa_r>
10003eb0:	1021883a 	mov	r16,r2
10003eb4:	008019c4 	movi	r2,103
10003eb8:	d8c03c17 	ldw	r3,240(sp)
10003ebc:	da003d17 	ldw	r8,244(sp)
10003ec0:	88817126 	beq	r17,r2,10004488 <___vfprintf_internal_r+0x1dc4>
10003ec4:	008011c4 	movi	r2,71
10003ec8:	88829126 	beq	r17,r2,10004910 <___vfprintf_internal_r+0x224c>
10003ecc:	80f9883a 	add	fp,r16,r3
10003ed0:	d9003617 	ldw	r4,216(sp)
10003ed4:	000d883a 	mov	r6,zero
10003ed8:	000f883a 	mov	r7,zero
10003edc:	980b883a 	mov	r5,r19
10003ee0:	da003d15 	stw	r8,244(sp)
10003ee4:	000de040 	call	1000de04 <__eqdf2>
10003ee8:	da003d17 	ldw	r8,244(sp)
10003eec:	10018d26 	beq	r2,zero,10004524 <___vfprintf_internal_r+0x1e60>
10003ef0:	d8802117 	ldw	r2,132(sp)
10003ef4:	1700062e 	bgeu	r2,fp,10003f10 <___vfprintf_internal_r+0x184c>
10003ef8:	01000c04 	movi	r4,48
10003efc:	10c00044 	addi	r3,r2,1
10003f00:	d8c02115 	stw	r3,132(sp)
10003f04:	11000005 	stb	r4,0(r2)
10003f08:	d8802117 	ldw	r2,132(sp)
10003f0c:	173ffb36 	bltu	r2,fp,10003efc <__alt_data_end+0xf8003efc>
10003f10:	1405c83a 	sub	r2,r2,r16
10003f14:	d8803315 	stw	r2,204(sp)
10003f18:	008011c4 	movi	r2,71
10003f1c:	b0817626 	beq	r22,r2,100044f8 <___vfprintf_internal_r+0x1e34>
10003f20:	00801944 	movi	r2,101
10003f24:	1442800e 	bge	r2,r17,10004928 <___vfprintf_internal_r+0x2264>
10003f28:	d8c02617 	ldw	r3,152(sp)
10003f2c:	00801984 	movi	r2,102
10003f30:	d8c03215 	stw	r3,200(sp)
10003f34:	8881fe26 	beq	r17,r2,10004730 <___vfprintf_internal_r+0x206c>
10003f38:	d8c03217 	ldw	r3,200(sp)
10003f3c:	d9003317 	ldw	r4,204(sp)
10003f40:	1901dd16 	blt	r3,r4,100046b8 <___vfprintf_internal_r+0x1ff4>
10003f44:	9480004c 	andi	r18,r18,1
10003f48:	90022b1e 	bne	r18,zero,100047f8 <___vfprintf_internal_r+0x2134>
10003f4c:	1805883a 	mov	r2,r3
10003f50:	18028316 	blt	r3,zero,10004960 <___vfprintf_internal_r+0x229c>
10003f54:	d8c03217 	ldw	r3,200(sp)
10003f58:	044019c4 	movi	r17,103
10003f5c:	d8c02b15 	stw	r3,172(sp)
10003f60:	df002907 	ldb	fp,164(sp)
10003f64:	e001531e 	bne	fp,zero,100044b4 <___vfprintf_internal_r+0x1df0>
10003f68:	df002783 	ldbu	fp,158(sp)
10003f6c:	d8802915 	stw	r2,164(sp)
10003f70:	dc802c17 	ldw	r18,176(sp)
10003f74:	d8002a15 	stw	zero,168(sp)
10003f78:	003baf06 	br	10002e38 <__alt_data_end+0xf8002e38>
10003f7c:	d8c02e17 	ldw	r3,184(sp)
10003f80:	d9002e17 	ldw	r4,184(sp)
10003f84:	d9402e17 	ldw	r5,184(sp)
10003f88:	18c00017 	ldw	r3,0(r3)
10003f8c:	21000117 	ldw	r4,4(r4)
10003f90:	29400204 	addi	r5,r5,8
10003f94:	d8c03615 	stw	r3,216(sp)
10003f98:	d9003815 	stw	r4,224(sp)
10003f9c:	d9402e15 	stw	r5,184(sp)
10003fa0:	003b5006 	br	10002ce4 <__alt_data_end+0xf8002ce4>
10003fa4:	ac400007 	ldb	r17,0(r21)
10003fa8:	003a2806 	br	1000284c <__alt_data_end+0xf800284c>
10003fac:	9080100c 	andi	r2,r18,64
10003fb0:	1000a826 	beq	r2,zero,10004254 <___vfprintf_internal_r+0x1b90>
10003fb4:	d8c02e17 	ldw	r3,184(sp)
10003fb8:	002d883a 	mov	r22,zero
10003fbc:	1cc0000b 	ldhu	r19,0(r3)
10003fc0:	18c00104 	addi	r3,r3,4
10003fc4:	d8c02e15 	stw	r3,184(sp)
10003fc8:	003caf06 	br	10003288 <__alt_data_end+0xf8003288>
10003fcc:	d9002e17 	ldw	r4,184(sp)
10003fd0:	d9402a17 	ldw	r5,168(sp)
10003fd4:	002d883a 	mov	r22,zero
10003fd8:	20800104 	addi	r2,r4,4
10003fdc:	24c00017 	ldw	r19,0(r4)
10003fe0:	283ebb0e 	bge	r5,zero,10003ad0 <__alt_data_end+0xf8003ad0>
10003fe4:	003ef106 	br	10003bac <__alt_data_end+0xf8003bac>
10003fe8:	9080040c 	andi	r2,r18,16
10003fec:	1000921e 	bne	r2,zero,10004238 <___vfprintf_internal_r+0x1b74>
10003ff0:	9480100c 	andi	r18,r18,64
10003ff4:	90013926 	beq	r18,zero,100044dc <___vfprintf_internal_r+0x1e18>
10003ff8:	d9402e17 	ldw	r5,184(sp)
10003ffc:	d8c02f17 	ldw	r3,188(sp)
10004000:	28800017 	ldw	r2,0(r5)
10004004:	29400104 	addi	r5,r5,4
10004008:	d9402e15 	stw	r5,184(sp)
1000400c:	10c0000d 	sth	r3,0(r2)
10004010:	0039e406 	br	100027a4 <__alt_data_end+0xf80027a4>
10004014:	9080100c 	andi	r2,r18,64
10004018:	10008026 	beq	r2,zero,1000421c <___vfprintf_internal_r+0x1b58>
1000401c:	d8802e17 	ldw	r2,184(sp)
10004020:	14c0000f 	ldh	r19,0(r2)
10004024:	10800104 	addi	r2,r2,4
10004028:	d8802e15 	stw	r2,184(sp)
1000402c:	982dd7fa 	srai	r22,r19,31
10004030:	b005883a 	mov	r2,r22
10004034:	003af706 	br	10002c14 <__alt_data_end+0xf8002c14>
10004038:	9080100c 	andi	r2,r18,64
1000403c:	d8002785 	stb	zero,158(sp)
10004040:	10008a1e 	bne	r2,zero,1000426c <___vfprintf_internal_r+0x1ba8>
10004044:	d9002e17 	ldw	r4,184(sp)
10004048:	d9402a17 	ldw	r5,168(sp)
1000404c:	002d883a 	mov	r22,zero
10004050:	20800104 	addi	r2,r4,4
10004054:	24c00017 	ldw	r19,0(r4)
10004058:	283e4b0e 	bge	r5,zero,10003988 <__alt_data_end+0xf8003988>
1000405c:	9d86b03a 	or	r3,r19,r22
10004060:	d8802e15 	stw	r2,184(sp)
10004064:	183e4c1e 	bne	r3,zero,10003998 <__alt_data_end+0xf8003998>
10004068:	0039883a 	mov	fp,zero
1000406c:	0005883a 	mov	r2,zero
10004070:	003d4006 	br	10003574 <__alt_data_end+0xf8003574>
10004074:	01440074 	movhi	r5,4097
10004078:	29491384 	addi	r5,r5,9294
1000407c:	d9402c15 	stw	r5,176(sp)
10004080:	d9402c17 	ldw	r5,176(sp)
10004084:	1c47883a 	add	r3,r3,r17
10004088:	10800044 	addi	r2,r2,1
1000408c:	41400015 	stw	r5,0(r8)
10004090:	44400115 	stw	r17,4(r8)
10004094:	d8c02015 	stw	r3,128(sp)
10004098:	d8801f15 	stw	r2,124(sp)
1000409c:	010001c4 	movi	r4,7
100040a0:	20bec816 	blt	r4,r2,10003bc4 <__alt_data_end+0xf8003bc4>
100040a4:	42000204 	addi	r8,r8,8
100040a8:	003ecd06 	br	10003be0 <__alt_data_end+0xf8003be0>
100040ac:	d9002a17 	ldw	r4,168(sp)
100040b0:	d8002785 	stb	zero,158(sp)
100040b4:	203d2d16 	blt	r4,zero,1000356c <__alt_data_end+0xf800356c>
100040b8:	00bfdfc4 	movi	r2,-129
100040bc:	90a4703a 	and	r18,r18,r2
100040c0:	003a6106 	br	10002a48 <__alt_data_end+0xf8002a48>
100040c4:	01040074 	movhi	r4,4097
100040c8:	21091384 	addi	r4,r4,9294
100040cc:	d9002c15 	stw	r4,176(sp)
100040d0:	003bea06 	br	1000307c <__alt_data_end+0xf800307c>
100040d4:	d9002d17 	ldw	r4,180(sp)
100040d8:	d9801e04 	addi	r6,sp,120
100040dc:	b80b883a 	mov	r5,r23
100040e0:	0009ea40 	call	10009ea4 <__sprint_r>
100040e4:	103a7b1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100040e8:	d8c02017 	ldw	r3,128(sp)
100040ec:	da000404 	addi	r8,sp,16
100040f0:	003d4106 	br	100035f8 <__alt_data_end+0xf80035f8>
100040f4:	d8801f17 	ldw	r2,124(sp)
100040f8:	01440074 	movhi	r5,4097
100040fc:	01000044 	movi	r4,1
10004100:	18c00044 	addi	r3,r3,1
10004104:	10800044 	addi	r2,r2,1
10004108:	29491304 	addi	r5,r5,9292
1000410c:	41000115 	stw	r4,4(r8)
10004110:	41400015 	stw	r5,0(r8)
10004114:	d8c02015 	stw	r3,128(sp)
10004118:	d8801f15 	stw	r2,124(sp)
1000411c:	010001c4 	movi	r4,7
10004120:	20805c16 	blt	r4,r2,10004294 <___vfprintf_internal_r+0x1bd0>
10004124:	42000204 	addi	r8,r8,8
10004128:	8800041e 	bne	r17,zero,1000413c <___vfprintf_internal_r+0x1a78>
1000412c:	d8803317 	ldw	r2,204(sp)
10004130:	1000021e 	bne	r2,zero,1000413c <___vfprintf_internal_r+0x1a78>
10004134:	9080004c 	andi	r2,r18,1
10004138:	103be726 	beq	r2,zero,100030d8 <__alt_data_end+0xf80030d8>
1000413c:	d9003717 	ldw	r4,220(sp)
10004140:	d8801f17 	ldw	r2,124(sp)
10004144:	d9403417 	ldw	r5,208(sp)
10004148:	20c7883a 	add	r3,r4,r3
1000414c:	10800044 	addi	r2,r2,1
10004150:	41000115 	stw	r4,4(r8)
10004154:	41400015 	stw	r5,0(r8)
10004158:	d8c02015 	stw	r3,128(sp)
1000415c:	d8801f15 	stw	r2,124(sp)
10004160:	010001c4 	movi	r4,7
10004164:	20812116 	blt	r4,r2,100045ec <___vfprintf_internal_r+0x1f28>
10004168:	42000204 	addi	r8,r8,8
1000416c:	0463c83a 	sub	r17,zero,r17
10004170:	0440730e 	bge	zero,r17,10004340 <___vfprintf_internal_r+0x1c7c>
10004174:	05800404 	movi	r22,16
10004178:	b440860e 	bge	r22,r17,10004394 <___vfprintf_internal_r+0x1cd0>
1000417c:	01440074 	movhi	r5,4097
10004180:	29491384 	addi	r5,r5,9294
10004184:	d9402c15 	stw	r5,176(sp)
10004188:	070001c4 	movi	fp,7
1000418c:	dcc02d17 	ldw	r19,180(sp)
10004190:	00000306 	br	100041a0 <___vfprintf_internal_r+0x1adc>
10004194:	42000204 	addi	r8,r8,8
10004198:	8c7ffc04 	addi	r17,r17,-16
1000419c:	b440800e 	bge	r22,r17,100043a0 <___vfprintf_internal_r+0x1cdc>
100041a0:	18c00404 	addi	r3,r3,16
100041a4:	10800044 	addi	r2,r2,1
100041a8:	45000015 	stw	r20,0(r8)
100041ac:	45800115 	stw	r22,4(r8)
100041b0:	d8c02015 	stw	r3,128(sp)
100041b4:	d8801f15 	stw	r2,124(sp)
100041b8:	e0bff60e 	bge	fp,r2,10004194 <__alt_data_end+0xf8004194>
100041bc:	d9801e04 	addi	r6,sp,120
100041c0:	b80b883a 	mov	r5,r23
100041c4:	9809883a 	mov	r4,r19
100041c8:	0009ea40 	call	10009ea4 <__sprint_r>
100041cc:	103a411e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100041d0:	d8c02017 	ldw	r3,128(sp)
100041d4:	d8801f17 	ldw	r2,124(sp)
100041d8:	da000404 	addi	r8,sp,16
100041dc:	003fee06 	br	10004198 <__alt_data_end+0xf8004198>
100041e0:	00bfffc4 	movi	r2,-1
100041e4:	003a3f06 	br	10002ae4 <__alt_data_end+0xf8002ae4>
100041e8:	008011c4 	movi	r2,71
100041ec:	1440b816 	blt	r2,r17,100044d0 <___vfprintf_internal_r+0x1e0c>
100041f0:	04040074 	movhi	r16,4097
100041f4:	84090504 	addi	r16,r16,9236
100041f8:	00c000c4 	movi	r3,3
100041fc:	00bfdfc4 	movi	r2,-129
10004200:	d8c02915 	stw	r3,164(sp)
10004204:	90a4703a 	and	r18,r18,r2
10004208:	df002783 	ldbu	fp,158(sp)
1000420c:	d8c02b15 	stw	r3,172(sp)
10004210:	d8002a15 	stw	zero,168(sp)
10004214:	d8003215 	stw	zero,200(sp)
10004218:	003b0706 	br	10002e38 <__alt_data_end+0xf8002e38>
1000421c:	d8c02e17 	ldw	r3,184(sp)
10004220:	1cc00017 	ldw	r19,0(r3)
10004224:	18c00104 	addi	r3,r3,4
10004228:	d8c02e15 	stw	r3,184(sp)
1000422c:	982dd7fa 	srai	r22,r19,31
10004230:	b005883a 	mov	r2,r22
10004234:	003a7706 	br	10002c14 <__alt_data_end+0xf8002c14>
10004238:	d8c02e17 	ldw	r3,184(sp)
1000423c:	d9002f17 	ldw	r4,188(sp)
10004240:	18800017 	ldw	r2,0(r3)
10004244:	18c00104 	addi	r3,r3,4
10004248:	d8c02e15 	stw	r3,184(sp)
1000424c:	11000015 	stw	r4,0(r2)
10004250:	00395406 	br	100027a4 <__alt_data_end+0xf80027a4>
10004254:	d9002e17 	ldw	r4,184(sp)
10004258:	002d883a 	mov	r22,zero
1000425c:	24c00017 	ldw	r19,0(r4)
10004260:	21000104 	addi	r4,r4,4
10004264:	d9002e15 	stw	r4,184(sp)
10004268:	003c0706 	br	10003288 <__alt_data_end+0xf8003288>
1000426c:	d9402e17 	ldw	r5,184(sp)
10004270:	d8c02a17 	ldw	r3,168(sp)
10004274:	002d883a 	mov	r22,zero
10004278:	28800104 	addi	r2,r5,4
1000427c:	2cc0000b 	ldhu	r19,0(r5)
10004280:	183dc10e 	bge	r3,zero,10003988 <__alt_data_end+0xf8003988>
10004284:	003f7506 	br	1000405c <__alt_data_end+0xf800405c>
10004288:	04040074 	movhi	r16,4097
1000428c:	84090304 	addi	r16,r16,9228
10004290:	003aa706 	br	10002d30 <__alt_data_end+0xf8002d30>
10004294:	d9002d17 	ldw	r4,180(sp)
10004298:	d9801e04 	addi	r6,sp,120
1000429c:	b80b883a 	mov	r5,r23
100042a0:	0009ea40 	call	10009ea4 <__sprint_r>
100042a4:	103a0b1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100042a8:	dc402617 	ldw	r17,152(sp)
100042ac:	d8c02017 	ldw	r3,128(sp)
100042b0:	da000404 	addi	r8,sp,16
100042b4:	003f9c06 	br	10004128 <__alt_data_end+0xf8004128>
100042b8:	ac400043 	ldbu	r17,1(r21)
100042bc:	84000814 	ori	r16,r16,32
100042c0:	ad400044 	addi	r21,r21,1
100042c4:	8c403fcc 	andi	r17,r17,255
100042c8:	8c40201c 	xori	r17,r17,128
100042cc:	8c7fe004 	addi	r17,r17,-128
100042d0:	00395e06 	br	1000284c <__alt_data_end+0xf800284c>
100042d4:	d8c02e15 	stw	r3,184(sp)
100042d8:	0039883a 	mov	fp,zero
100042dc:	003e3506 	br	10003bb4 <__alt_data_end+0xf8003bb4>
100042e0:	d9002d17 	ldw	r4,180(sp)
100042e4:	d9801e04 	addi	r6,sp,120
100042e8:	b80b883a 	mov	r5,r23
100042ec:	0009ea40 	call	10009ea4 <__sprint_r>
100042f0:	1039f81e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100042f4:	d8c02017 	ldw	r3,128(sp)
100042f8:	da000404 	addi	r8,sp,16
100042fc:	003cd006 	br	10003640 <__alt_data_end+0xf8003640>
10004300:	8009883a 	mov	r4,r16
10004304:	df003d15 	stw	fp,244(sp)
10004308:	000262c0 	call	1000262c <strlen>
1000430c:	d8802b15 	stw	r2,172(sp)
10004310:	da003d17 	ldw	r8,244(sp)
10004314:	103c200e 	bge	r2,zero,10003398 <__alt_data_end+0xf8003398>
10004318:	0005883a 	mov	r2,zero
1000431c:	003c1e06 	br	10003398 <__alt_data_end+0xf8003398>
10004320:	d9002d17 	ldw	r4,180(sp)
10004324:	d9801e04 	addi	r6,sp,120
10004328:	b80b883a 	mov	r5,r23
1000432c:	0009ea40 	call	10009ea4 <__sprint_r>
10004330:	1039e81e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10004334:	d8c02017 	ldw	r3,128(sp)
10004338:	d8801f17 	ldw	r2,124(sp)
1000433c:	da000404 	addi	r8,sp,16
10004340:	d9403317 	ldw	r5,204(sp)
10004344:	10800044 	addi	r2,r2,1
10004348:	44000015 	stw	r16,0(r8)
1000434c:	28c7883a 	add	r3,r5,r3
10004350:	003b5b06 	br	100030c0 <__alt_data_end+0xf80030c0>
10004354:	01040074 	movhi	r4,4097
10004358:	21091784 	addi	r4,r4,9310
1000435c:	d9003515 	stw	r4,212(sp)
10004360:	003af206 	br	10002f2c <__alt_data_end+0xf8002f2c>
10004364:	013fffc4 	movi	r4,-1
10004368:	003a0806 	br	10002b8c <__alt_data_end+0xf8002b8c>
1000436c:	0023883a 	mov	r17,zero
10004370:	003d9d06 	br	100039e8 <__alt_data_end+0xf80039e8>
10004374:	d9002d17 	ldw	r4,180(sp)
10004378:	d9801e04 	addi	r6,sp,120
1000437c:	b80b883a 	mov	r5,r23
10004380:	0009ea40 	call	10009ea4 <__sprint_r>
10004384:	1039d31e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10004388:	d8c02017 	ldw	r3,128(sp)
1000438c:	da000404 	addi	r8,sp,16
10004390:	003d9406 	br	100039e4 <__alt_data_end+0xf80039e4>
10004394:	01040074 	movhi	r4,4097
10004398:	21091384 	addi	r4,r4,9294
1000439c:	d9002c15 	stw	r4,176(sp)
100043a0:	d9002c17 	ldw	r4,176(sp)
100043a4:	1c47883a 	add	r3,r3,r17
100043a8:	10800044 	addi	r2,r2,1
100043ac:	41000015 	stw	r4,0(r8)
100043b0:	44400115 	stw	r17,4(r8)
100043b4:	d8c02015 	stw	r3,128(sp)
100043b8:	d8801f15 	stw	r2,124(sp)
100043bc:	010001c4 	movi	r4,7
100043c0:	20bfd716 	blt	r4,r2,10004320 <__alt_data_end+0xf8004320>
100043c4:	42000204 	addi	r8,r8,8
100043c8:	003fdd06 	br	10004340 <__alt_data_end+0xf8004340>
100043cc:	d9002d17 	ldw	r4,180(sp)
100043d0:	d9801e04 	addi	r6,sp,120
100043d4:	b80b883a 	mov	r5,r23
100043d8:	0009ea40 	call	10009ea4 <__sprint_r>
100043dc:	1039bd1e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
100043e0:	d8802617 	ldw	r2,152(sp)
100043e4:	d8c02017 	ldw	r3,128(sp)
100043e8:	da000404 	addi	r8,sp,16
100043ec:	003e1006 	br	10003c30 <__alt_data_end+0xf8003c30>
100043f0:	00800044 	movi	r2,1
100043f4:	10803fcc 	andi	r2,r2,255
100043f8:	00c00044 	movi	r3,1
100043fc:	10fa0d26 	beq	r2,r3,10002c34 <__alt_data_end+0xf8002c34>
10004400:	00c00084 	movi	r3,2
10004404:	10fbaf26 	beq	r2,r3,100032c4 <__alt_data_end+0xf80032c4>
10004408:	003a6d06 	br	10002dc0 <__alt_data_end+0xf8002dc0>
1000440c:	01040074 	movhi	r4,4097
10004410:	21091784 	addi	r4,r4,9310
10004414:	d9003515 	stw	r4,212(sp)
10004418:	003b5406 	br	1000316c <__alt_data_end+0xf800316c>
1000441c:	d8802a17 	ldw	r2,168(sp)
10004420:	00c00184 	movi	r3,6
10004424:	1880012e 	bgeu	r3,r2,1000442c <___vfprintf_internal_r+0x1d68>
10004428:	1805883a 	mov	r2,r3
1000442c:	d8802b15 	stw	r2,172(sp)
10004430:	1000ef16 	blt	r2,zero,100047f0 <___vfprintf_internal_r+0x212c>
10004434:	04040074 	movhi	r16,4097
10004438:	d8802915 	stw	r2,164(sp)
1000443c:	dcc02e15 	stw	r19,184(sp)
10004440:	d8002a15 	stw	zero,168(sp)
10004444:	d8003215 	stw	zero,200(sp)
10004448:	84091104 	addi	r16,r16,9284
1000444c:	0039883a 	mov	fp,zero
10004450:	003a8006 	br	10002e54 <__alt_data_end+0xf8002e54>
10004454:	0021883a 	mov	r16,zero
10004458:	003e0706 	br	10003c78 <__alt_data_end+0xf8003c78>
1000445c:	d9002d17 	ldw	r4,180(sp)
10004460:	d9801e04 	addi	r6,sp,120
10004464:	b80b883a 	mov	r5,r23
10004468:	0009ea40 	call	10009ea4 <__sprint_r>
1000446c:	1039991e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10004470:	d8802617 	ldw	r2,152(sp)
10004474:	d9403317 	ldw	r5,204(sp)
10004478:	d8c02017 	ldw	r3,128(sp)
1000447c:	da000404 	addi	r8,sp,16
10004480:	2885c83a 	sub	r2,r5,r2
10004484:	003dfb06 	br	10003c74 <__alt_data_end+0xf8003c74>
10004488:	9080004c 	andi	r2,r18,1
1000448c:	103e8f1e 	bne	r2,zero,10003ecc <__alt_data_end+0xf8003ecc>
10004490:	d8802117 	ldw	r2,132(sp)
10004494:	003e9e06 	br	10003f10 <__alt_data_end+0xf8003f10>
10004498:	1025883a 	mov	r18,r2
1000449c:	0039883a 	mov	fp,zero
100044a0:	00800084 	movi	r2,2
100044a4:	003fd306 	br	100043f4 <__alt_data_end+0xf80043f4>
100044a8:	07000b44 	movi	fp,45
100044ac:	df002785 	stb	fp,158(sp)
100044b0:	003a1b06 	br	10002d20 <__alt_data_end+0xf8002d20>
100044b4:	00c00b44 	movi	r3,45
100044b8:	d8c02785 	stb	r3,158(sp)
100044bc:	d8802915 	stw	r2,164(sp)
100044c0:	dc802c17 	ldw	r18,176(sp)
100044c4:	d8002a15 	stw	zero,168(sp)
100044c8:	07000b44 	movi	fp,45
100044cc:	003a5e06 	br	10002e48 <__alt_data_end+0xf8002e48>
100044d0:	04040074 	movhi	r16,4097
100044d4:	84090604 	addi	r16,r16,9240
100044d8:	003f4706 	br	100041f8 <__alt_data_end+0xf80041f8>
100044dc:	d9002e17 	ldw	r4,184(sp)
100044e0:	d9402f17 	ldw	r5,188(sp)
100044e4:	20800017 	ldw	r2,0(r4)
100044e8:	21000104 	addi	r4,r4,4
100044ec:	d9002e15 	stw	r4,184(sp)
100044f0:	11400015 	stw	r5,0(r2)
100044f4:	0038ab06 	br	100027a4 <__alt_data_end+0xf80027a4>
100044f8:	dd802617 	ldw	r22,152(sp)
100044fc:	00bfff44 	movi	r2,-3
10004500:	b0801c16 	blt	r22,r2,10004574 <___vfprintf_internal_r+0x1eb0>
10004504:	d9402a17 	ldw	r5,168(sp)
10004508:	2d801a16 	blt	r5,r22,10004574 <___vfprintf_internal_r+0x1eb0>
1000450c:	dd803215 	stw	r22,200(sp)
10004510:	003e8906 	br	10003f38 <__alt_data_end+0xf8003f38>
10004514:	01040074 	movhi	r4,4097
10004518:	21091384 	addi	r4,r4,9294
1000451c:	d9002c15 	stw	r4,176(sp)
10004520:	003c9106 	br	10003768 <__alt_data_end+0xf8003768>
10004524:	e005883a 	mov	r2,fp
10004528:	003e7906 	br	10003f10 <__alt_data_end+0xf8003f10>
1000452c:	d9002a17 	ldw	r4,168(sp)
10004530:	df002783 	ldbu	fp,158(sp)
10004534:	dcc02e15 	stw	r19,184(sp)
10004538:	d9002915 	stw	r4,164(sp)
1000453c:	d9002b15 	stw	r4,172(sp)
10004540:	d8002a15 	stw	zero,168(sp)
10004544:	d8003215 	stw	zero,200(sp)
10004548:	003a3b06 	br	10002e38 <__alt_data_end+0xf8002e38>
1000454c:	9080004c 	andi	r2,r18,1
10004550:	0039883a 	mov	fp,zero
10004554:	10000426 	beq	r2,zero,10004568 <___vfprintf_internal_r+0x1ea4>
10004558:	00800c04 	movi	r2,48
1000455c:	dc001dc4 	addi	r16,sp,119
10004560:	d8801dc5 	stb	r2,119(sp)
10004564:	003b6406 	br	100032f8 <__alt_data_end+0xf80032f8>
10004568:	d8002b15 	stw	zero,172(sp)
1000456c:	dc001e04 	addi	r16,sp,120
10004570:	003a2b06 	br	10002e20 <__alt_data_end+0xf8002e20>
10004574:	8c7fff84 	addi	r17,r17,-2
10004578:	b5bfffc4 	addi	r22,r22,-1
1000457c:	dd802615 	stw	r22,152(sp)
10004580:	dc4022c5 	stb	r17,139(sp)
10004584:	b000bf16 	blt	r22,zero,10004884 <___vfprintf_internal_r+0x21c0>
10004588:	00800ac4 	movi	r2,43
1000458c:	d8802305 	stb	r2,140(sp)
10004590:	00800244 	movi	r2,9
10004594:	15807016 	blt	r2,r22,10004758 <___vfprintf_internal_r+0x2094>
10004598:	00800c04 	movi	r2,48
1000459c:	b5800c04 	addi	r22,r22,48
100045a0:	d8802345 	stb	r2,141(sp)
100045a4:	dd802385 	stb	r22,142(sp)
100045a8:	d88023c4 	addi	r2,sp,143
100045ac:	df0022c4 	addi	fp,sp,139
100045b0:	d8c03317 	ldw	r3,204(sp)
100045b4:	1739c83a 	sub	fp,r2,fp
100045b8:	d9003317 	ldw	r4,204(sp)
100045bc:	e0c7883a 	add	r3,fp,r3
100045c0:	df003a15 	stw	fp,232(sp)
100045c4:	d8c02b15 	stw	r3,172(sp)
100045c8:	00800044 	movi	r2,1
100045cc:	1100b30e 	bge	r2,r4,1000489c <___vfprintf_internal_r+0x21d8>
100045d0:	d8c02b17 	ldw	r3,172(sp)
100045d4:	18c00044 	addi	r3,r3,1
100045d8:	d8c02b15 	stw	r3,172(sp)
100045dc:	1805883a 	mov	r2,r3
100045e0:	1800ac16 	blt	r3,zero,10004894 <___vfprintf_internal_r+0x21d0>
100045e4:	d8003215 	stw	zero,200(sp)
100045e8:	003e5d06 	br	10003f60 <__alt_data_end+0xf8003f60>
100045ec:	d9002d17 	ldw	r4,180(sp)
100045f0:	d9801e04 	addi	r6,sp,120
100045f4:	b80b883a 	mov	r5,r23
100045f8:	0009ea40 	call	10009ea4 <__sprint_r>
100045fc:	1039351e 	bne	r2,zero,10002ad4 <__alt_data_end+0xf8002ad4>
10004600:	dc402617 	ldw	r17,152(sp)
10004604:	d8c02017 	ldw	r3,128(sp)
10004608:	d8801f17 	ldw	r2,124(sp)
1000460c:	da000404 	addi	r8,sp,16
10004610:	003ed606 	br	1000416c <__alt_data_end+0xf800416c>
10004614:	182b883a 	mov	r21,r3
10004618:	d8002a15 	stw	zero,168(sp)
1000461c:	00388c06 	br	10002850 <__alt_data_end+0xf8002850>
10004620:	d8802a17 	ldw	r2,168(sp)
10004624:	103e071e 	bne	r2,zero,10003e44 <__alt_data_end+0xf8003e44>
10004628:	dc002a15 	stw	r16,168(sp)
1000462c:	003e0506 	br	10003e44 <__alt_data_end+0xf8003e44>
10004630:	d9002a17 	ldw	r4,168(sp)
10004634:	20c00044 	addi	r3,r4,1
10004638:	003e0f06 	br	10003e78 <__alt_data_end+0xf8003e78>
1000463c:	01400184 	movi	r5,6
10004640:	d9402a15 	stw	r5,168(sp)
10004644:	003dff06 	br	10003e44 <__alt_data_end+0xf8003e44>
10004648:	d8802104 	addi	r2,sp,132
1000464c:	d8800315 	stw	r2,12(sp)
10004650:	d8802504 	addi	r2,sp,148
10004654:	d8800215 	stw	r2,8(sp)
10004658:	d8802604 	addi	r2,sp,152
1000465c:	d8800115 	stw	r2,4(sp)
10004660:	d8802a17 	ldw	r2,168(sp)
10004664:	d9403617 	ldw	r5,216(sp)
10004668:	d9002d17 	ldw	r4,180(sp)
1000466c:	d8800015 	stw	r2,0(sp)
10004670:	01c000c4 	movi	r7,3
10004674:	980d883a 	mov	r6,r19
10004678:	da003d15 	stw	r8,244(sp)
1000467c:	0004df40 	call	10004df4 <_dtoa_r>
10004680:	d8c02a17 	ldw	r3,168(sp)
10004684:	da003d17 	ldw	r8,244(sp)
10004688:	1021883a 	mov	r16,r2
1000468c:	10f9883a 	add	fp,r2,r3
10004690:	81000007 	ldb	r4,0(r16)
10004694:	00800c04 	movi	r2,48
10004698:	20805e26 	beq	r4,r2,10004814 <___vfprintf_internal_r+0x2150>
1000469c:	d8c02617 	ldw	r3,152(sp)
100046a0:	e0f9883a 	add	fp,fp,r3
100046a4:	003e0a06 	br	10003ed0 <__alt_data_end+0xf8003ed0>
100046a8:	00c00b44 	movi	r3,45
100046ac:	24e0003c 	xorhi	r19,r4,32768
100046b0:	d8c02905 	stb	r3,164(sp)
100046b4:	003de906 	br	10003e5c <__alt_data_end+0xf8003e5c>
100046b8:	d8c03217 	ldw	r3,200(sp)
100046bc:	00c07a0e 	bge	zero,r3,100048a8 <___vfprintf_internal_r+0x21e4>
100046c0:	00800044 	movi	r2,1
100046c4:	d9003317 	ldw	r4,204(sp)
100046c8:	1105883a 	add	r2,r2,r4
100046cc:	d8802b15 	stw	r2,172(sp)
100046d0:	10004e16 	blt	r2,zero,1000480c <___vfprintf_internal_r+0x2148>
100046d4:	044019c4 	movi	r17,103
100046d8:	003e2106 	br	10003f60 <__alt_data_end+0xf8003f60>
100046dc:	d9002a17 	ldw	r4,168(sp)
100046e0:	d8802104 	addi	r2,sp,132
100046e4:	d8800315 	stw	r2,12(sp)
100046e8:	d9000015 	stw	r4,0(sp)
100046ec:	d8802504 	addi	r2,sp,148
100046f0:	d9403617 	ldw	r5,216(sp)
100046f4:	d9002d17 	ldw	r4,180(sp)
100046f8:	d8800215 	stw	r2,8(sp)
100046fc:	d8802604 	addi	r2,sp,152
10004700:	d8800115 	stw	r2,4(sp)
10004704:	01c000c4 	movi	r7,3
10004708:	980d883a 	mov	r6,r19
1000470c:	da003d15 	stw	r8,244(sp)
10004710:	0004df40 	call	10004df4 <_dtoa_r>
10004714:	d8c02a17 	ldw	r3,168(sp)
10004718:	da003d17 	ldw	r8,244(sp)
1000471c:	1021883a 	mov	r16,r2
10004720:	00801184 	movi	r2,70
10004724:	80f9883a 	add	fp,r16,r3
10004728:	88bfd926 	beq	r17,r2,10004690 <__alt_data_end+0xf8004690>
1000472c:	003de806 	br	10003ed0 <__alt_data_end+0xf8003ed0>
10004730:	d9002a17 	ldw	r4,168(sp)
10004734:	00c04d0e 	bge	zero,r3,1000486c <___vfprintf_internal_r+0x21a8>
10004738:	2000441e 	bne	r4,zero,1000484c <___vfprintf_internal_r+0x2188>
1000473c:	9480004c 	andi	r18,r18,1
10004740:	9000421e 	bne	r18,zero,1000484c <___vfprintf_internal_r+0x2188>
10004744:	1805883a 	mov	r2,r3
10004748:	18006f16 	blt	r3,zero,10004908 <___vfprintf_internal_r+0x2244>
1000474c:	d8c03217 	ldw	r3,200(sp)
10004750:	d8c02b15 	stw	r3,172(sp)
10004754:	003e0206 	br	10003f60 <__alt_data_end+0xf8003f60>
10004758:	df0022c4 	addi	fp,sp,139
1000475c:	dc002a15 	stw	r16,168(sp)
10004760:	4027883a 	mov	r19,r8
10004764:	e021883a 	mov	r16,fp
10004768:	b009883a 	mov	r4,r22
1000476c:	01400284 	movi	r5,10
10004770:	000ca300 	call	1000ca30 <__modsi3>
10004774:	10800c04 	addi	r2,r2,48
10004778:	843fffc4 	addi	r16,r16,-1
1000477c:	b009883a 	mov	r4,r22
10004780:	01400284 	movi	r5,10
10004784:	80800005 	stb	r2,0(r16)
10004788:	000c9ac0 	call	1000c9ac <__divsi3>
1000478c:	102d883a 	mov	r22,r2
10004790:	00800244 	movi	r2,9
10004794:	15bff416 	blt	r2,r22,10004768 <__alt_data_end+0xf8004768>
10004798:	9811883a 	mov	r8,r19
1000479c:	b0800c04 	addi	r2,r22,48
100047a0:	8027883a 	mov	r19,r16
100047a4:	997fffc4 	addi	r5,r19,-1
100047a8:	98bfffc5 	stb	r2,-1(r19)
100047ac:	dc002a17 	ldw	r16,168(sp)
100047b0:	2f006d2e 	bgeu	r5,fp,10004968 <___vfprintf_internal_r+0x22a4>
100047b4:	d9c02384 	addi	r7,sp,142
100047b8:	3ccfc83a 	sub	r7,r7,r19
100047bc:	d9002344 	addi	r4,sp,141
100047c0:	e1cf883a 	add	r7,fp,r7
100047c4:	00000106 	br	100047cc <___vfprintf_internal_r+0x2108>
100047c8:	28800003 	ldbu	r2,0(r5)
100047cc:	20800005 	stb	r2,0(r4)
100047d0:	21000044 	addi	r4,r4,1
100047d4:	29400044 	addi	r5,r5,1
100047d8:	393ffb1e 	bne	r7,r4,100047c8 <__alt_data_end+0xf80047c8>
100047dc:	d8802304 	addi	r2,sp,140
100047e0:	14c5c83a 	sub	r2,r2,r19
100047e4:	d8c02344 	addi	r3,sp,141
100047e8:	1885883a 	add	r2,r3,r2
100047ec:	003f7006 	br	100045b0 <__alt_data_end+0xf80045b0>
100047f0:	0005883a 	mov	r2,zero
100047f4:	003f0f06 	br	10004434 <__alt_data_end+0xf8004434>
100047f8:	d8c03217 	ldw	r3,200(sp)
100047fc:	18c00044 	addi	r3,r3,1
10004800:	d8c02b15 	stw	r3,172(sp)
10004804:	1805883a 	mov	r2,r3
10004808:	183fb20e 	bge	r3,zero,100046d4 <__alt_data_end+0xf80046d4>
1000480c:	0005883a 	mov	r2,zero
10004810:	003fb006 	br	100046d4 <__alt_data_end+0xf80046d4>
10004814:	d9003617 	ldw	r4,216(sp)
10004818:	000d883a 	mov	r6,zero
1000481c:	000f883a 	mov	r7,zero
10004820:	980b883a 	mov	r5,r19
10004824:	d8c03c15 	stw	r3,240(sp)
10004828:	da003d15 	stw	r8,244(sp)
1000482c:	000de040 	call	1000de04 <__eqdf2>
10004830:	d8c03c17 	ldw	r3,240(sp)
10004834:	da003d17 	ldw	r8,244(sp)
10004838:	103f9826 	beq	r2,zero,1000469c <__alt_data_end+0xf800469c>
1000483c:	00800044 	movi	r2,1
10004840:	10c7c83a 	sub	r3,r2,r3
10004844:	d8c02615 	stw	r3,152(sp)
10004848:	003f9506 	br	100046a0 <__alt_data_end+0xf80046a0>
1000484c:	d9002a17 	ldw	r4,168(sp)
10004850:	d8c03217 	ldw	r3,200(sp)
10004854:	20800044 	addi	r2,r4,1
10004858:	1885883a 	add	r2,r3,r2
1000485c:	d8802b15 	stw	r2,172(sp)
10004860:	103dbf0e 	bge	r2,zero,10003f60 <__alt_data_end+0xf8003f60>
10004864:	0005883a 	mov	r2,zero
10004868:	003dbd06 	br	10003f60 <__alt_data_end+0xf8003f60>
1000486c:	2000201e 	bne	r4,zero,100048f0 <___vfprintf_internal_r+0x222c>
10004870:	9480004c 	andi	r18,r18,1
10004874:	90001e1e 	bne	r18,zero,100048f0 <___vfprintf_internal_r+0x222c>
10004878:	00800044 	movi	r2,1
1000487c:	d8802b15 	stw	r2,172(sp)
10004880:	003db706 	br	10003f60 <__alt_data_end+0xf8003f60>
10004884:	00800b44 	movi	r2,45
10004888:	05adc83a 	sub	r22,zero,r22
1000488c:	d8802305 	stb	r2,140(sp)
10004890:	003f3f06 	br	10004590 <__alt_data_end+0xf8004590>
10004894:	0005883a 	mov	r2,zero
10004898:	003f5206 	br	100045e4 <__alt_data_end+0xf80045e4>
1000489c:	90a4703a 	and	r18,r18,r2
100048a0:	903f4e26 	beq	r18,zero,100045dc <__alt_data_end+0xf80045dc>
100048a4:	003f4a06 	br	100045d0 <__alt_data_end+0xf80045d0>
100048a8:	00800084 	movi	r2,2
100048ac:	10c5c83a 	sub	r2,r2,r3
100048b0:	003f8406 	br	100046c4 <__alt_data_end+0xf80046c4>
100048b4:	d9402e17 	ldw	r5,184(sp)
100048b8:	d9002e17 	ldw	r4,184(sp)
100048bc:	ac400043 	ldbu	r17,1(r21)
100048c0:	29400017 	ldw	r5,0(r5)
100048c4:	20800104 	addi	r2,r4,4
100048c8:	d8802e15 	stw	r2,184(sp)
100048cc:	d9402a15 	stw	r5,168(sp)
100048d0:	182b883a 	mov	r21,r3
100048d4:	283e7b0e 	bge	r5,zero,100042c4 <__alt_data_end+0xf80042c4>
100048d8:	8c403fcc 	andi	r17,r17,255
100048dc:	017fffc4 	movi	r5,-1
100048e0:	8c40201c 	xori	r17,r17,128
100048e4:	d9402a15 	stw	r5,168(sp)
100048e8:	8c7fe004 	addi	r17,r17,-128
100048ec:	0037d706 	br	1000284c <__alt_data_end+0xf800284c>
100048f0:	d8c02a17 	ldw	r3,168(sp)
100048f4:	18c00084 	addi	r3,r3,2
100048f8:	d8c02b15 	stw	r3,172(sp)
100048fc:	1805883a 	mov	r2,r3
10004900:	183d970e 	bge	r3,zero,10003f60 <__alt_data_end+0xf8003f60>
10004904:	003fd706 	br	10004864 <__alt_data_end+0xf8004864>
10004908:	0005883a 	mov	r2,zero
1000490c:	003f8f06 	br	1000474c <__alt_data_end+0xf800474c>
10004910:	9080004c 	andi	r2,r18,1
10004914:	103f821e 	bne	r2,zero,10004720 <__alt_data_end+0xf8004720>
10004918:	d8802117 	ldw	r2,132(sp)
1000491c:	1405c83a 	sub	r2,r2,r16
10004920:	d8803315 	stw	r2,204(sp)
10004924:	b47ef426 	beq	r22,r17,100044f8 <__alt_data_end+0xf80044f8>
10004928:	dd802617 	ldw	r22,152(sp)
1000492c:	003f1206 	br	10004578 <__alt_data_end+0xf8004578>
10004930:	d8c02b03 	ldbu	r3,172(sp)
10004934:	d8c02785 	stb	r3,158(sp)
10004938:	0038df06 	br	10002cb8 <__alt_data_end+0xf8002cb8>
1000493c:	d8c02b03 	ldbu	r3,172(sp)
10004940:	d8c02785 	stb	r3,158(sp)
10004944:	0038aa06 	br	10002bf0 <__alt_data_end+0xf8002bf0>
10004948:	d8c02b03 	ldbu	r3,172(sp)
1000494c:	d8c02785 	stb	r3,158(sp)
10004950:	003a4306 	br	10003260 <__alt_data_end+0xf8003260>
10004954:	d8c02b03 	ldbu	r3,172(sp)
10004958:	d8c02785 	stb	r3,158(sp)
1000495c:	003af506 	br	10003534 <__alt_data_end+0xf8003534>
10004960:	0005883a 	mov	r2,zero
10004964:	003d7b06 	br	10003f54 <__alt_data_end+0xf8003f54>
10004968:	d8802344 	addi	r2,sp,141
1000496c:	003f1006 	br	100045b0 <__alt_data_end+0xf80045b0>
10004970:	d8c02b03 	ldbu	r3,172(sp)
10004974:	d8c02785 	stb	r3,158(sp)
10004978:	0038fd06 	br	10002d70 <__alt_data_end+0xf8002d70>
1000497c:	d8c02b03 	ldbu	r3,172(sp)
10004980:	d8c02785 	stb	r3,158(sp)
10004984:	003a9706 	br	100033e4 <__alt_data_end+0xf80033e4>
10004988:	d8c02b03 	ldbu	r3,172(sp)
1000498c:	d8c02785 	stb	r3,158(sp)
10004990:	003a1806 	br	100031f4 <__alt_data_end+0xf80031f4>
10004994:	d8c02b03 	ldbu	r3,172(sp)
10004998:	d8c02785 	stb	r3,158(sp)
1000499c:	003abe06 	br	10003498 <__alt_data_end+0xf8003498>

100049a0 <__vfprintf_internal>:
100049a0:	00840074 	movhi	r2,4097
100049a4:	10906f04 	addi	r2,r2,16828
100049a8:	300f883a 	mov	r7,r6
100049ac:	280d883a 	mov	r6,r5
100049b0:	200b883a 	mov	r5,r4
100049b4:	11000017 	ldw	r4,0(r2)
100049b8:	00026c41 	jmpi	100026c4 <___vfprintf_internal_r>

100049bc <__sbprintf>:
100049bc:	2880030b 	ldhu	r2,12(r5)
100049c0:	2ac01917 	ldw	r11,100(r5)
100049c4:	2a80038b 	ldhu	r10,14(r5)
100049c8:	2a400717 	ldw	r9,28(r5)
100049cc:	2a000917 	ldw	r8,36(r5)
100049d0:	defee204 	addi	sp,sp,-1144
100049d4:	00c10004 	movi	r3,1024
100049d8:	dc011a15 	stw	r16,1128(sp)
100049dc:	10bfff4c 	andi	r2,r2,65533
100049e0:	2821883a 	mov	r16,r5
100049e4:	d8cb883a 	add	r5,sp,r3
100049e8:	dc811c15 	stw	r18,1136(sp)
100049ec:	dc411b15 	stw	r17,1132(sp)
100049f0:	dfc11d15 	stw	ra,1140(sp)
100049f4:	2025883a 	mov	r18,r4
100049f8:	d881030d 	sth	r2,1036(sp)
100049fc:	dac11915 	stw	r11,1124(sp)
10004a00:	da81038d 	sth	r10,1038(sp)
10004a04:	da410715 	stw	r9,1052(sp)
10004a08:	da010915 	stw	r8,1060(sp)
10004a0c:	dec10015 	stw	sp,1024(sp)
10004a10:	dec10415 	stw	sp,1040(sp)
10004a14:	d8c10215 	stw	r3,1032(sp)
10004a18:	d8c10515 	stw	r3,1044(sp)
10004a1c:	d8010615 	stw	zero,1048(sp)
10004a20:	00026c40 	call	100026c4 <___vfprintf_internal_r>
10004a24:	1023883a 	mov	r17,r2
10004a28:	10000416 	blt	r2,zero,10004a3c <__sbprintf+0x80>
10004a2c:	d9410004 	addi	r5,sp,1024
10004a30:	9009883a 	mov	r4,r18
10004a34:	00066980 	call	10006698 <_fflush_r>
10004a38:	10000d1e 	bne	r2,zero,10004a70 <__sbprintf+0xb4>
10004a3c:	d881030b 	ldhu	r2,1036(sp)
10004a40:	1080100c 	andi	r2,r2,64
10004a44:	10000326 	beq	r2,zero,10004a54 <__sbprintf+0x98>
10004a48:	8080030b 	ldhu	r2,12(r16)
10004a4c:	10801014 	ori	r2,r2,64
10004a50:	8080030d 	sth	r2,12(r16)
10004a54:	8805883a 	mov	r2,r17
10004a58:	dfc11d17 	ldw	ra,1140(sp)
10004a5c:	dc811c17 	ldw	r18,1136(sp)
10004a60:	dc411b17 	ldw	r17,1132(sp)
10004a64:	dc011a17 	ldw	r16,1128(sp)
10004a68:	dec11e04 	addi	sp,sp,1144
10004a6c:	f800283a 	ret
10004a70:	047fffc4 	movi	r17,-1
10004a74:	003ff106 	br	10004a3c <__alt_data_end+0xf8004a3c>

10004a78 <__swsetup_r>:
10004a78:	00840074 	movhi	r2,4097
10004a7c:	defffd04 	addi	sp,sp,-12
10004a80:	10906f04 	addi	r2,r2,16828
10004a84:	dc400115 	stw	r17,4(sp)
10004a88:	2023883a 	mov	r17,r4
10004a8c:	11000017 	ldw	r4,0(r2)
10004a90:	dc000015 	stw	r16,0(sp)
10004a94:	dfc00215 	stw	ra,8(sp)
10004a98:	2821883a 	mov	r16,r5
10004a9c:	20000226 	beq	r4,zero,10004aa8 <__swsetup_r+0x30>
10004aa0:	20800e17 	ldw	r2,56(r4)
10004aa4:	10003126 	beq	r2,zero,10004b6c <__swsetup_r+0xf4>
10004aa8:	8080030b 	ldhu	r2,12(r16)
10004aac:	10c0020c 	andi	r3,r2,8
10004ab0:	1009883a 	mov	r4,r2
10004ab4:	18000f26 	beq	r3,zero,10004af4 <__swsetup_r+0x7c>
10004ab8:	80c00417 	ldw	r3,16(r16)
10004abc:	18001526 	beq	r3,zero,10004b14 <__swsetup_r+0x9c>
10004ac0:	1100004c 	andi	r4,r2,1
10004ac4:	20001c1e 	bne	r4,zero,10004b38 <__swsetup_r+0xc0>
10004ac8:	1080008c 	andi	r2,r2,2
10004acc:	1000291e 	bne	r2,zero,10004b74 <__swsetup_r+0xfc>
10004ad0:	80800517 	ldw	r2,20(r16)
10004ad4:	80800215 	stw	r2,8(r16)
10004ad8:	18001c26 	beq	r3,zero,10004b4c <__swsetup_r+0xd4>
10004adc:	0005883a 	mov	r2,zero
10004ae0:	dfc00217 	ldw	ra,8(sp)
10004ae4:	dc400117 	ldw	r17,4(sp)
10004ae8:	dc000017 	ldw	r16,0(sp)
10004aec:	dec00304 	addi	sp,sp,12
10004af0:	f800283a 	ret
10004af4:	2080040c 	andi	r2,r4,16
10004af8:	10002e26 	beq	r2,zero,10004bb4 <__swsetup_r+0x13c>
10004afc:	2080010c 	andi	r2,r4,4
10004b00:	10001e1e 	bne	r2,zero,10004b7c <__swsetup_r+0x104>
10004b04:	80c00417 	ldw	r3,16(r16)
10004b08:	20800214 	ori	r2,r4,8
10004b0c:	8080030d 	sth	r2,12(r16)
10004b10:	183feb1e 	bne	r3,zero,10004ac0 <__alt_data_end+0xf8004ac0>
10004b14:	1100a00c 	andi	r4,r2,640
10004b18:	01408004 	movi	r5,512
10004b1c:	217fe826 	beq	r4,r5,10004ac0 <__alt_data_end+0xf8004ac0>
10004b20:	800b883a 	mov	r5,r16
10004b24:	8809883a 	mov	r4,r17
10004b28:	00076340 	call	10007634 <__smakebuf_r>
10004b2c:	8080030b 	ldhu	r2,12(r16)
10004b30:	80c00417 	ldw	r3,16(r16)
10004b34:	003fe206 	br	10004ac0 <__alt_data_end+0xf8004ac0>
10004b38:	80800517 	ldw	r2,20(r16)
10004b3c:	80000215 	stw	zero,8(r16)
10004b40:	0085c83a 	sub	r2,zero,r2
10004b44:	80800615 	stw	r2,24(r16)
10004b48:	183fe41e 	bne	r3,zero,10004adc <__alt_data_end+0xf8004adc>
10004b4c:	80c0030b 	ldhu	r3,12(r16)
10004b50:	0005883a 	mov	r2,zero
10004b54:	1900200c 	andi	r4,r3,128
10004b58:	203fe126 	beq	r4,zero,10004ae0 <__alt_data_end+0xf8004ae0>
10004b5c:	18c01014 	ori	r3,r3,64
10004b60:	80c0030d 	sth	r3,12(r16)
10004b64:	00bfffc4 	movi	r2,-1
10004b68:	003fdd06 	br	10004ae0 <__alt_data_end+0xf8004ae0>
10004b6c:	0006a840 	call	10006a84 <__sinit>
10004b70:	003fcd06 	br	10004aa8 <__alt_data_end+0xf8004aa8>
10004b74:	0005883a 	mov	r2,zero
10004b78:	003fd606 	br	10004ad4 <__alt_data_end+0xf8004ad4>
10004b7c:	81400c17 	ldw	r5,48(r16)
10004b80:	28000626 	beq	r5,zero,10004b9c <__swsetup_r+0x124>
10004b84:	80801004 	addi	r2,r16,64
10004b88:	28800326 	beq	r5,r2,10004b98 <__swsetup_r+0x120>
10004b8c:	8809883a 	mov	r4,r17
10004b90:	0006bf80 	call	10006bf8 <_free_r>
10004b94:	8100030b 	ldhu	r4,12(r16)
10004b98:	80000c15 	stw	zero,48(r16)
10004b9c:	80c00417 	ldw	r3,16(r16)
10004ba0:	00bff6c4 	movi	r2,-37
10004ba4:	1108703a 	and	r4,r2,r4
10004ba8:	80000115 	stw	zero,4(r16)
10004bac:	80c00015 	stw	r3,0(r16)
10004bb0:	003fd506 	br	10004b08 <__alt_data_end+0xf8004b08>
10004bb4:	00800244 	movi	r2,9
10004bb8:	88800015 	stw	r2,0(r17)
10004bbc:	20801014 	ori	r2,r4,64
10004bc0:	8080030d 	sth	r2,12(r16)
10004bc4:	00bfffc4 	movi	r2,-1
10004bc8:	003fc506 	br	10004ae0 <__alt_data_end+0xf8004ae0>

10004bcc <quorem>:
10004bcc:	defff204 	addi	sp,sp,-56
10004bd0:	ddc00b15 	stw	r23,44(sp)
10004bd4:	20800417 	ldw	r2,16(r4)
10004bd8:	2dc00417 	ldw	r23,16(r5)
10004bdc:	dfc00d15 	stw	ra,52(sp)
10004be0:	df000c15 	stw	fp,48(sp)
10004be4:	dd800a15 	stw	r22,40(sp)
10004be8:	dd400915 	stw	r21,36(sp)
10004bec:	dd000815 	stw	r20,32(sp)
10004bf0:	dcc00715 	stw	r19,28(sp)
10004bf4:	dc800615 	stw	r18,24(sp)
10004bf8:	dc400515 	stw	r17,20(sp)
10004bfc:	dc000415 	stw	r16,16(sp)
10004c00:	15c07a16 	blt	r2,r23,10004dec <quorem+0x220>
10004c04:	bdffffc4 	addi	r23,r23,-1
10004c08:	bde9883a 	add	r20,r23,r23
10004c0c:	28c00504 	addi	r3,r5,20
10004c10:	a529883a 	add	r20,r20,r20
10004c14:	1d39883a 	add	fp,r3,r20
10004c18:	24c00504 	addi	r19,r4,20
10004c1c:	d9400215 	stw	r5,8(sp)
10004c20:	9d29883a 	add	r20,r19,r20
10004c24:	e1400017 	ldw	r5,0(fp)
10004c28:	d9000015 	stw	r4,0(sp)
10004c2c:	a1000017 	ldw	r4,0(r20)
10004c30:	29400044 	addi	r5,r5,1
10004c34:	d8c00115 	stw	r3,4(sp)
10004c38:	dd000315 	stw	r20,12(sp)
10004c3c:	000caa40 	call	1000caa4 <__udivsi3>
10004c40:	1025883a 	mov	r18,r2
10004c44:	10003026 	beq	r2,zero,10004d08 <quorem+0x13c>
10004c48:	dc400117 	ldw	r17,4(sp)
10004c4c:	9829883a 	mov	r20,r19
10004c50:	002d883a 	mov	r22,zero
10004c54:	0021883a 	mov	r16,zero
10004c58:	8d400017 	ldw	r21,0(r17)
10004c5c:	900b883a 	mov	r5,r18
10004c60:	8c400104 	addi	r17,r17,4
10004c64:	a93fffcc 	andi	r4,r21,65535
10004c68:	000cb600 	call	1000cb60 <__mulsi3>
10004c6c:	a808d43a 	srli	r4,r21,16
10004c70:	900b883a 	mov	r5,r18
10004c74:	15ad883a 	add	r22,r2,r22
10004c78:	000cb600 	call	1000cb60 <__mulsi3>
10004c7c:	a1000017 	ldw	r4,0(r20)
10004c80:	b00cd43a 	srli	r6,r22,16
10004c84:	b0ffffcc 	andi	r3,r22,65535
10004c88:	217fffcc 	andi	r5,r4,65535
10004c8c:	2c21883a 	add	r16,r5,r16
10004c90:	80c7c83a 	sub	r3,r16,r3
10004c94:	2008d43a 	srli	r4,r4,16
10004c98:	1185883a 	add	r2,r2,r6
10004c9c:	1821d43a 	srai	r16,r3,16
10004ca0:	117fffcc 	andi	r5,r2,65535
10004ca4:	2149c83a 	sub	r4,r4,r5
10004ca8:	2421883a 	add	r16,r4,r16
10004cac:	8008943a 	slli	r4,r16,16
10004cb0:	18ffffcc 	andi	r3,r3,65535
10004cb4:	102cd43a 	srli	r22,r2,16
10004cb8:	20c8b03a 	or	r4,r4,r3
10004cbc:	a1000015 	stw	r4,0(r20)
10004cc0:	8021d43a 	srai	r16,r16,16
10004cc4:	a5000104 	addi	r20,r20,4
10004cc8:	e47fe32e 	bgeu	fp,r17,10004c58 <__alt_data_end+0xf8004c58>
10004ccc:	d8c00317 	ldw	r3,12(sp)
10004cd0:	18800017 	ldw	r2,0(r3)
10004cd4:	10000c1e 	bne	r2,zero,10004d08 <quorem+0x13c>
10004cd8:	18bfff04 	addi	r2,r3,-4
10004cdc:	9880082e 	bgeu	r19,r2,10004d00 <quorem+0x134>
10004ce0:	18ffff17 	ldw	r3,-4(r3)
10004ce4:	18000326 	beq	r3,zero,10004cf4 <quorem+0x128>
10004ce8:	00000506 	br	10004d00 <quorem+0x134>
10004cec:	10c00017 	ldw	r3,0(r2)
10004cf0:	1800031e 	bne	r3,zero,10004d00 <quorem+0x134>
10004cf4:	10bfff04 	addi	r2,r2,-4
10004cf8:	bdffffc4 	addi	r23,r23,-1
10004cfc:	98bffb36 	bltu	r19,r2,10004cec <__alt_data_end+0xf8004cec>
10004d00:	d8c00017 	ldw	r3,0(sp)
10004d04:	1dc00415 	stw	r23,16(r3)
10004d08:	d9400217 	ldw	r5,8(sp)
10004d0c:	d9000017 	ldw	r4,0(sp)
10004d10:	0008e300 	call	10008e30 <__mcmp>
10004d14:	10002816 	blt	r2,zero,10004db8 <quorem+0x1ec>
10004d18:	dc400117 	ldw	r17,4(sp)
10004d1c:	94800044 	addi	r18,r18,1
10004d20:	980d883a 	mov	r6,r19
10004d24:	0007883a 	mov	r3,zero
10004d28:	31000017 	ldw	r4,0(r6)
10004d2c:	89400017 	ldw	r5,0(r17)
10004d30:	31800104 	addi	r6,r6,4
10004d34:	20bfffcc 	andi	r2,r4,65535
10004d38:	10c7883a 	add	r3,r2,r3
10004d3c:	28bfffcc 	andi	r2,r5,65535
10004d40:	1885c83a 	sub	r2,r3,r2
10004d44:	280ad43a 	srli	r5,r5,16
10004d48:	2008d43a 	srli	r4,r4,16
10004d4c:	1007d43a 	srai	r3,r2,16
10004d50:	10bfffcc 	andi	r2,r2,65535
10004d54:	2149c83a 	sub	r4,r4,r5
10004d58:	20c9883a 	add	r4,r4,r3
10004d5c:	200a943a 	slli	r5,r4,16
10004d60:	8c400104 	addi	r17,r17,4
10004d64:	2007d43a 	srai	r3,r4,16
10004d68:	2884b03a 	or	r2,r5,r2
10004d6c:	30bfff15 	stw	r2,-4(r6)
10004d70:	e47fed2e 	bgeu	fp,r17,10004d28 <__alt_data_end+0xf8004d28>
10004d74:	bdc5883a 	add	r2,r23,r23
10004d78:	1085883a 	add	r2,r2,r2
10004d7c:	9887883a 	add	r3,r19,r2
10004d80:	18800017 	ldw	r2,0(r3)
10004d84:	10000c1e 	bne	r2,zero,10004db8 <quorem+0x1ec>
10004d88:	18bfff04 	addi	r2,r3,-4
10004d8c:	9880082e 	bgeu	r19,r2,10004db0 <quorem+0x1e4>
10004d90:	18ffff17 	ldw	r3,-4(r3)
10004d94:	18000326 	beq	r3,zero,10004da4 <quorem+0x1d8>
10004d98:	00000506 	br	10004db0 <quorem+0x1e4>
10004d9c:	10c00017 	ldw	r3,0(r2)
10004da0:	1800031e 	bne	r3,zero,10004db0 <quorem+0x1e4>
10004da4:	10bfff04 	addi	r2,r2,-4
10004da8:	bdffffc4 	addi	r23,r23,-1
10004dac:	98bffb36 	bltu	r19,r2,10004d9c <__alt_data_end+0xf8004d9c>
10004db0:	d8c00017 	ldw	r3,0(sp)
10004db4:	1dc00415 	stw	r23,16(r3)
10004db8:	9005883a 	mov	r2,r18
10004dbc:	dfc00d17 	ldw	ra,52(sp)
10004dc0:	df000c17 	ldw	fp,48(sp)
10004dc4:	ddc00b17 	ldw	r23,44(sp)
10004dc8:	dd800a17 	ldw	r22,40(sp)
10004dcc:	dd400917 	ldw	r21,36(sp)
10004dd0:	dd000817 	ldw	r20,32(sp)
10004dd4:	dcc00717 	ldw	r19,28(sp)
10004dd8:	dc800617 	ldw	r18,24(sp)
10004ddc:	dc400517 	ldw	r17,20(sp)
10004de0:	dc000417 	ldw	r16,16(sp)
10004de4:	dec00e04 	addi	sp,sp,56
10004de8:	f800283a 	ret
10004dec:	0005883a 	mov	r2,zero
10004df0:	003ff206 	br	10004dbc <__alt_data_end+0xf8004dbc>

10004df4 <_dtoa_r>:
10004df4:	20801017 	ldw	r2,64(r4)
10004df8:	deffde04 	addi	sp,sp,-136
10004dfc:	df002015 	stw	fp,128(sp)
10004e00:	dcc01b15 	stw	r19,108(sp)
10004e04:	dc801a15 	stw	r18,104(sp)
10004e08:	dc401915 	stw	r17,100(sp)
10004e0c:	dc001815 	stw	r16,96(sp)
10004e10:	dfc02115 	stw	ra,132(sp)
10004e14:	ddc01f15 	stw	r23,124(sp)
10004e18:	dd801e15 	stw	r22,120(sp)
10004e1c:	dd401d15 	stw	r21,116(sp)
10004e20:	dd001c15 	stw	r20,112(sp)
10004e24:	d9c00315 	stw	r7,12(sp)
10004e28:	2039883a 	mov	fp,r4
10004e2c:	3023883a 	mov	r17,r6
10004e30:	2825883a 	mov	r18,r5
10004e34:	dc002417 	ldw	r16,144(sp)
10004e38:	3027883a 	mov	r19,r6
10004e3c:	10000826 	beq	r2,zero,10004e60 <_dtoa_r+0x6c>
10004e40:	21801117 	ldw	r6,68(r4)
10004e44:	00c00044 	movi	r3,1
10004e48:	100b883a 	mov	r5,r2
10004e4c:	1986983a 	sll	r3,r3,r6
10004e50:	11800115 	stw	r6,4(r2)
10004e54:	10c00215 	stw	r3,8(r2)
10004e58:	00085540 	call	10008554 <_Bfree>
10004e5c:	e0001015 	stw	zero,64(fp)
10004e60:	88002e16 	blt	r17,zero,10004f1c <_dtoa_r+0x128>
10004e64:	80000015 	stw	zero,0(r16)
10004e68:	889ffc2c 	andhi	r2,r17,32752
10004e6c:	00dffc34 	movhi	r3,32752
10004e70:	10c01c26 	beq	r2,r3,10004ee4 <_dtoa_r+0xf0>
10004e74:	000d883a 	mov	r6,zero
10004e78:	000f883a 	mov	r7,zero
10004e7c:	9009883a 	mov	r4,r18
10004e80:	980b883a 	mov	r5,r19
10004e84:	000de040 	call	1000de04 <__eqdf2>
10004e88:	10002b1e 	bne	r2,zero,10004f38 <_dtoa_r+0x144>
10004e8c:	d9c02317 	ldw	r7,140(sp)
10004e90:	00800044 	movi	r2,1
10004e94:	38800015 	stw	r2,0(r7)
10004e98:	d8802517 	ldw	r2,148(sp)
10004e9c:	10019e26 	beq	r2,zero,10005518 <_dtoa_r+0x724>
10004ea0:	d8c02517 	ldw	r3,148(sp)
10004ea4:	00840074 	movhi	r2,4097
10004ea8:	10891344 	addi	r2,r2,9293
10004eac:	18800015 	stw	r2,0(r3)
10004eb0:	10bfffc4 	addi	r2,r2,-1
10004eb4:	dfc02117 	ldw	ra,132(sp)
10004eb8:	df002017 	ldw	fp,128(sp)
10004ebc:	ddc01f17 	ldw	r23,124(sp)
10004ec0:	dd801e17 	ldw	r22,120(sp)
10004ec4:	dd401d17 	ldw	r21,116(sp)
10004ec8:	dd001c17 	ldw	r20,112(sp)
10004ecc:	dcc01b17 	ldw	r19,108(sp)
10004ed0:	dc801a17 	ldw	r18,104(sp)
10004ed4:	dc401917 	ldw	r17,100(sp)
10004ed8:	dc001817 	ldw	r16,96(sp)
10004edc:	dec02204 	addi	sp,sp,136
10004ee0:	f800283a 	ret
10004ee4:	d8c02317 	ldw	r3,140(sp)
10004ee8:	0089c3c4 	movi	r2,9999
10004eec:	18800015 	stw	r2,0(r3)
10004ef0:	90017726 	beq	r18,zero,100054d0 <_dtoa_r+0x6dc>
10004ef4:	00840074 	movhi	r2,4097
10004ef8:	10891f04 	addi	r2,r2,9340
10004efc:	d9002517 	ldw	r4,148(sp)
10004f00:	203fec26 	beq	r4,zero,10004eb4 <__alt_data_end+0xf8004eb4>
10004f04:	10c000c7 	ldb	r3,3(r2)
10004f08:	1801781e 	bne	r3,zero,100054ec <_dtoa_r+0x6f8>
10004f0c:	10c000c4 	addi	r3,r2,3
10004f10:	d9802517 	ldw	r6,148(sp)
10004f14:	30c00015 	stw	r3,0(r6)
10004f18:	003fe606 	br	10004eb4 <__alt_data_end+0xf8004eb4>
10004f1c:	04e00034 	movhi	r19,32768
10004f20:	9cffffc4 	addi	r19,r19,-1
10004f24:	00800044 	movi	r2,1
10004f28:	8ce6703a 	and	r19,r17,r19
10004f2c:	80800015 	stw	r2,0(r16)
10004f30:	9823883a 	mov	r17,r19
10004f34:	003fcc06 	br	10004e68 <__alt_data_end+0xf8004e68>
10004f38:	d8800204 	addi	r2,sp,8
10004f3c:	d8800015 	stw	r2,0(sp)
10004f40:	d9c00104 	addi	r7,sp,4
10004f44:	900b883a 	mov	r5,r18
10004f48:	980d883a 	mov	r6,r19
10004f4c:	e009883a 	mov	r4,fp
10004f50:	8820d53a 	srli	r16,r17,20
10004f54:	00091fc0 	call	100091fc <__d2b>
10004f58:	d8800915 	stw	r2,36(sp)
10004f5c:	8001651e 	bne	r16,zero,100054f4 <_dtoa_r+0x700>
10004f60:	dd800217 	ldw	r22,8(sp)
10004f64:	dc000117 	ldw	r16,4(sp)
10004f68:	00800804 	movi	r2,32
10004f6c:	b421883a 	add	r16,r22,r16
10004f70:	80c10c84 	addi	r3,r16,1074
10004f74:	10c2d10e 	bge	r2,r3,10005abc <_dtoa_r+0xcc8>
10004f78:	00801004 	movi	r2,64
10004f7c:	81010484 	addi	r4,r16,1042
10004f80:	10c7c83a 	sub	r3,r2,r3
10004f84:	9108d83a 	srl	r4,r18,r4
10004f88:	88e2983a 	sll	r17,r17,r3
10004f8c:	2448b03a 	or	r4,r4,r17
10004f90:	000f3200 	call	1000f320 <__floatunsidf>
10004f94:	017f8434 	movhi	r5,65040
10004f98:	01800044 	movi	r6,1
10004f9c:	1009883a 	mov	r4,r2
10004fa0:	194b883a 	add	r5,r3,r5
10004fa4:	843fffc4 	addi	r16,r16,-1
10004fa8:	d9801115 	stw	r6,68(sp)
10004fac:	000d883a 	mov	r6,zero
10004fb0:	01cffe34 	movhi	r7,16376
10004fb4:	000e8c80 	call	1000e8c8 <__subdf3>
10004fb8:	0198dbf4 	movhi	r6,25455
10004fbc:	01cff4f4 	movhi	r7,16339
10004fc0:	3190d844 	addi	r6,r6,17249
10004fc4:	39e1e9c4 	addi	r7,r7,-30809
10004fc8:	1009883a 	mov	r4,r2
10004fcc:	180b883a 	mov	r5,r3
10004fd0:	000e05c0 	call	1000e05c <__muldf3>
10004fd4:	01a2d874 	movhi	r6,35681
10004fd8:	01cff1f4 	movhi	r7,16327
10004fdc:	31b22cc4 	addi	r6,r6,-14157
10004fe0:	39e28a04 	addi	r7,r7,-30168
10004fe4:	180b883a 	mov	r5,r3
10004fe8:	1009883a 	mov	r4,r2
10004fec:	000cb880 	call	1000cb88 <__adddf3>
10004ff0:	8009883a 	mov	r4,r16
10004ff4:	1029883a 	mov	r20,r2
10004ff8:	1823883a 	mov	r17,r3
10004ffc:	000f2440 	call	1000f244 <__floatsidf>
10005000:	019427f4 	movhi	r6,20639
10005004:	01cff4f4 	movhi	r7,16339
10005008:	319e7ec4 	addi	r6,r6,31227
1000500c:	39d104c4 	addi	r7,r7,17427
10005010:	1009883a 	mov	r4,r2
10005014:	180b883a 	mov	r5,r3
10005018:	000e05c0 	call	1000e05c <__muldf3>
1000501c:	100d883a 	mov	r6,r2
10005020:	180f883a 	mov	r7,r3
10005024:	a009883a 	mov	r4,r20
10005028:	880b883a 	mov	r5,r17
1000502c:	000cb880 	call	1000cb88 <__adddf3>
10005030:	1009883a 	mov	r4,r2
10005034:	180b883a 	mov	r5,r3
10005038:	1029883a 	mov	r20,r2
1000503c:	1823883a 	mov	r17,r3
10005040:	000f1c40 	call	1000f1c4 <__fixdfsi>
10005044:	000d883a 	mov	r6,zero
10005048:	000f883a 	mov	r7,zero
1000504c:	a009883a 	mov	r4,r20
10005050:	880b883a 	mov	r5,r17
10005054:	d8800515 	stw	r2,20(sp)
10005058:	000df680 	call	1000df68 <__ledf2>
1000505c:	10028716 	blt	r2,zero,10005a7c <_dtoa_r+0xc88>
10005060:	d8c00517 	ldw	r3,20(sp)
10005064:	00800584 	movi	r2,22
10005068:	10c27536 	bltu	r2,r3,10005a40 <_dtoa_r+0xc4c>
1000506c:	180490fa 	slli	r2,r3,3
10005070:	00c40074 	movhi	r3,4097
10005074:	18c93b04 	addi	r3,r3,9452
10005078:	1885883a 	add	r2,r3,r2
1000507c:	11000017 	ldw	r4,0(r2)
10005080:	11400117 	ldw	r5,4(r2)
10005084:	900d883a 	mov	r6,r18
10005088:	980f883a 	mov	r7,r19
1000508c:	000de8c0 	call	1000de8c <__gedf2>
10005090:	00828d0e 	bge	zero,r2,10005ac8 <_dtoa_r+0xcd4>
10005094:	d9000517 	ldw	r4,20(sp)
10005098:	d8000e15 	stw	zero,56(sp)
1000509c:	213fffc4 	addi	r4,r4,-1
100050a0:	d9000515 	stw	r4,20(sp)
100050a4:	b42dc83a 	sub	r22,r22,r16
100050a8:	b5bfffc4 	addi	r22,r22,-1
100050ac:	b0026f16 	blt	r22,zero,10005a6c <_dtoa_r+0xc78>
100050b0:	d8000815 	stw	zero,32(sp)
100050b4:	d9c00517 	ldw	r7,20(sp)
100050b8:	38026416 	blt	r7,zero,10005a4c <_dtoa_r+0xc58>
100050bc:	b1ed883a 	add	r22,r22,r7
100050c0:	d9c00d15 	stw	r7,52(sp)
100050c4:	d8000a15 	stw	zero,40(sp)
100050c8:	d9800317 	ldw	r6,12(sp)
100050cc:	00800244 	movi	r2,9
100050d0:	11811436 	bltu	r2,r6,10005524 <_dtoa_r+0x730>
100050d4:	00800144 	movi	r2,5
100050d8:	1184e10e 	bge	r2,r6,10006460 <_dtoa_r+0x166c>
100050dc:	31bfff04 	addi	r6,r6,-4
100050e0:	d9800315 	stw	r6,12(sp)
100050e4:	0023883a 	mov	r17,zero
100050e8:	d9800317 	ldw	r6,12(sp)
100050ec:	008000c4 	movi	r2,3
100050f0:	30836726 	beq	r6,r2,10005e90 <_dtoa_r+0x109c>
100050f4:	1183410e 	bge	r2,r6,10005dfc <_dtoa_r+0x1008>
100050f8:	d9c00317 	ldw	r7,12(sp)
100050fc:	00800104 	movi	r2,4
10005100:	38827c26 	beq	r7,r2,10005af4 <_dtoa_r+0xd00>
10005104:	00800144 	movi	r2,5
10005108:	3884c41e 	bne	r7,r2,1000641c <_dtoa_r+0x1628>
1000510c:	00800044 	movi	r2,1
10005110:	d8800b15 	stw	r2,44(sp)
10005114:	d8c00517 	ldw	r3,20(sp)
10005118:	d9002217 	ldw	r4,136(sp)
1000511c:	1907883a 	add	r3,r3,r4
10005120:	19800044 	addi	r6,r3,1
10005124:	d8c00c15 	stw	r3,48(sp)
10005128:	d9800615 	stw	r6,24(sp)
1000512c:	0183a40e 	bge	zero,r6,10005fc0 <_dtoa_r+0x11cc>
10005130:	d9800617 	ldw	r6,24(sp)
10005134:	3021883a 	mov	r16,r6
10005138:	e0001115 	stw	zero,68(fp)
1000513c:	008005c4 	movi	r2,23
10005140:	1184c92e 	bgeu	r2,r6,10006468 <_dtoa_r+0x1674>
10005144:	00c00044 	movi	r3,1
10005148:	00800104 	movi	r2,4
1000514c:	1085883a 	add	r2,r2,r2
10005150:	11000504 	addi	r4,r2,20
10005154:	180b883a 	mov	r5,r3
10005158:	18c00044 	addi	r3,r3,1
1000515c:	313ffb2e 	bgeu	r6,r4,1000514c <__alt_data_end+0xf800514c>
10005160:	e1401115 	stw	r5,68(fp)
10005164:	e009883a 	mov	r4,fp
10005168:	00084ac0 	call	100084ac <_Balloc>
1000516c:	d8800715 	stw	r2,28(sp)
10005170:	e0801015 	stw	r2,64(fp)
10005174:	00800384 	movi	r2,14
10005178:	1400f736 	bltu	r2,r16,10005558 <_dtoa_r+0x764>
1000517c:	8800f626 	beq	r17,zero,10005558 <_dtoa_r+0x764>
10005180:	d9c00517 	ldw	r7,20(sp)
10005184:	01c39a0e 	bge	zero,r7,10005ff0 <_dtoa_r+0x11fc>
10005188:	388003cc 	andi	r2,r7,15
1000518c:	100490fa 	slli	r2,r2,3
10005190:	382bd13a 	srai	r21,r7,4
10005194:	00c40074 	movhi	r3,4097
10005198:	18c93b04 	addi	r3,r3,9452
1000519c:	1885883a 	add	r2,r3,r2
100051a0:	a8c0040c 	andi	r3,r21,16
100051a4:	12400017 	ldw	r9,0(r2)
100051a8:	12000117 	ldw	r8,4(r2)
100051ac:	18037926 	beq	r3,zero,10005f94 <_dtoa_r+0x11a0>
100051b0:	00840074 	movhi	r2,4097
100051b4:	10893104 	addi	r2,r2,9412
100051b8:	11800817 	ldw	r6,32(r2)
100051bc:	11c00917 	ldw	r7,36(r2)
100051c0:	9009883a 	mov	r4,r18
100051c4:	980b883a 	mov	r5,r19
100051c8:	da001715 	stw	r8,92(sp)
100051cc:	da401615 	stw	r9,88(sp)
100051d0:	000d4340 	call	1000d434 <__divdf3>
100051d4:	da001717 	ldw	r8,92(sp)
100051d8:	da401617 	ldw	r9,88(sp)
100051dc:	ad4003cc 	andi	r21,r21,15
100051e0:	040000c4 	movi	r16,3
100051e4:	1023883a 	mov	r17,r2
100051e8:	1829883a 	mov	r20,r3
100051ec:	a8001126 	beq	r21,zero,10005234 <_dtoa_r+0x440>
100051f0:	05c40074 	movhi	r23,4097
100051f4:	bdc93104 	addi	r23,r23,9412
100051f8:	4805883a 	mov	r2,r9
100051fc:	4007883a 	mov	r3,r8
10005200:	a980004c 	andi	r6,r21,1
10005204:	1009883a 	mov	r4,r2
10005208:	a82bd07a 	srai	r21,r21,1
1000520c:	180b883a 	mov	r5,r3
10005210:	30000426 	beq	r6,zero,10005224 <_dtoa_r+0x430>
10005214:	b9800017 	ldw	r6,0(r23)
10005218:	b9c00117 	ldw	r7,4(r23)
1000521c:	84000044 	addi	r16,r16,1
10005220:	000e05c0 	call	1000e05c <__muldf3>
10005224:	bdc00204 	addi	r23,r23,8
10005228:	a83ff51e 	bne	r21,zero,10005200 <__alt_data_end+0xf8005200>
1000522c:	1013883a 	mov	r9,r2
10005230:	1811883a 	mov	r8,r3
10005234:	480d883a 	mov	r6,r9
10005238:	400f883a 	mov	r7,r8
1000523c:	8809883a 	mov	r4,r17
10005240:	a00b883a 	mov	r5,r20
10005244:	000d4340 	call	1000d434 <__divdf3>
10005248:	d8800f15 	stw	r2,60(sp)
1000524c:	d8c01015 	stw	r3,64(sp)
10005250:	d8c00e17 	ldw	r3,56(sp)
10005254:	18000626 	beq	r3,zero,10005270 <_dtoa_r+0x47c>
10005258:	d9000f17 	ldw	r4,60(sp)
1000525c:	d9401017 	ldw	r5,64(sp)
10005260:	000d883a 	mov	r6,zero
10005264:	01cffc34 	movhi	r7,16368
10005268:	000df680 	call	1000df68 <__ledf2>
1000526c:	10040b16 	blt	r2,zero,1000629c <_dtoa_r+0x14a8>
10005270:	8009883a 	mov	r4,r16
10005274:	000f2440 	call	1000f244 <__floatsidf>
10005278:	d9800f17 	ldw	r6,60(sp)
1000527c:	d9c01017 	ldw	r7,64(sp)
10005280:	1009883a 	mov	r4,r2
10005284:	180b883a 	mov	r5,r3
10005288:	000e05c0 	call	1000e05c <__muldf3>
1000528c:	000d883a 	mov	r6,zero
10005290:	01d00734 	movhi	r7,16412
10005294:	1009883a 	mov	r4,r2
10005298:	180b883a 	mov	r5,r3
1000529c:	000cb880 	call	1000cb88 <__adddf3>
100052a0:	1021883a 	mov	r16,r2
100052a4:	d8800617 	ldw	r2,24(sp)
100052a8:	047f3034 	movhi	r17,64704
100052ac:	1c63883a 	add	r17,r3,r17
100052b0:	10031826 	beq	r2,zero,10005f14 <_dtoa_r+0x1120>
100052b4:	d8c00517 	ldw	r3,20(sp)
100052b8:	db000617 	ldw	r12,24(sp)
100052bc:	d8c01315 	stw	r3,76(sp)
100052c0:	d9000b17 	ldw	r4,44(sp)
100052c4:	20038f26 	beq	r4,zero,10006104 <_dtoa_r+0x1310>
100052c8:	60bfffc4 	addi	r2,r12,-1
100052cc:	100490fa 	slli	r2,r2,3
100052d0:	00c40074 	movhi	r3,4097
100052d4:	18c93b04 	addi	r3,r3,9452
100052d8:	1885883a 	add	r2,r3,r2
100052dc:	11800017 	ldw	r6,0(r2)
100052e0:	11c00117 	ldw	r7,4(r2)
100052e4:	d8800717 	ldw	r2,28(sp)
100052e8:	0009883a 	mov	r4,zero
100052ec:	014ff834 	movhi	r5,16352
100052f0:	db001615 	stw	r12,88(sp)
100052f4:	15c00044 	addi	r23,r2,1
100052f8:	000d4340 	call	1000d434 <__divdf3>
100052fc:	800d883a 	mov	r6,r16
10005300:	880f883a 	mov	r7,r17
10005304:	1009883a 	mov	r4,r2
10005308:	180b883a 	mov	r5,r3
1000530c:	000e8c80 	call	1000e8c8 <__subdf3>
10005310:	d9401017 	ldw	r5,64(sp)
10005314:	d9000f17 	ldw	r4,60(sp)
10005318:	102b883a 	mov	r21,r2
1000531c:	d8c01215 	stw	r3,72(sp)
10005320:	000f1c40 	call	1000f1c4 <__fixdfsi>
10005324:	1009883a 	mov	r4,r2
10005328:	1029883a 	mov	r20,r2
1000532c:	000f2440 	call	1000f244 <__floatsidf>
10005330:	d9000f17 	ldw	r4,60(sp)
10005334:	d9401017 	ldw	r5,64(sp)
10005338:	100d883a 	mov	r6,r2
1000533c:	180f883a 	mov	r7,r3
10005340:	000e8c80 	call	1000e8c8 <__subdf3>
10005344:	1823883a 	mov	r17,r3
10005348:	d8c00717 	ldw	r3,28(sp)
1000534c:	d9401217 	ldw	r5,72(sp)
10005350:	a2000c04 	addi	r8,r20,48
10005354:	1021883a 	mov	r16,r2
10005358:	1a000005 	stb	r8,0(r3)
1000535c:	800d883a 	mov	r6,r16
10005360:	880f883a 	mov	r7,r17
10005364:	a809883a 	mov	r4,r21
10005368:	4029883a 	mov	r20,r8
1000536c:	000de8c0 	call	1000de8c <__gedf2>
10005370:	00841d16 	blt	zero,r2,100063e8 <_dtoa_r+0x15f4>
10005374:	800d883a 	mov	r6,r16
10005378:	880f883a 	mov	r7,r17
1000537c:	0009883a 	mov	r4,zero
10005380:	014ffc34 	movhi	r5,16368
10005384:	000e8c80 	call	1000e8c8 <__subdf3>
10005388:	d9401217 	ldw	r5,72(sp)
1000538c:	100d883a 	mov	r6,r2
10005390:	180f883a 	mov	r7,r3
10005394:	a809883a 	mov	r4,r21
10005398:	000de8c0 	call	1000de8c <__gedf2>
1000539c:	db001617 	ldw	r12,88(sp)
100053a0:	00840e16 	blt	zero,r2,100063dc <_dtoa_r+0x15e8>
100053a4:	00800044 	movi	r2,1
100053a8:	13006b0e 	bge	r2,r12,10005558 <_dtoa_r+0x764>
100053ac:	d9000717 	ldw	r4,28(sp)
100053b0:	dd800f15 	stw	r22,60(sp)
100053b4:	dcc01015 	stw	r19,64(sp)
100053b8:	2319883a 	add	r12,r4,r12
100053bc:	dcc01217 	ldw	r19,72(sp)
100053c0:	602d883a 	mov	r22,r12
100053c4:	dc801215 	stw	r18,72(sp)
100053c8:	b825883a 	mov	r18,r23
100053cc:	00000906 	br	100053f4 <_dtoa_r+0x600>
100053d0:	000e8c80 	call	1000e8c8 <__subdf3>
100053d4:	a80d883a 	mov	r6,r21
100053d8:	980f883a 	mov	r7,r19
100053dc:	1009883a 	mov	r4,r2
100053e0:	180b883a 	mov	r5,r3
100053e4:	000df680 	call	1000df68 <__ledf2>
100053e8:	1003e816 	blt	r2,zero,1000638c <_dtoa_r+0x1598>
100053ec:	b825883a 	mov	r18,r23
100053f0:	bd83e926 	beq	r23,r22,10006398 <_dtoa_r+0x15a4>
100053f4:	a809883a 	mov	r4,r21
100053f8:	980b883a 	mov	r5,r19
100053fc:	000d883a 	mov	r6,zero
10005400:	01d00934 	movhi	r7,16420
10005404:	000e05c0 	call	1000e05c <__muldf3>
10005408:	000d883a 	mov	r6,zero
1000540c:	01d00934 	movhi	r7,16420
10005410:	8009883a 	mov	r4,r16
10005414:	880b883a 	mov	r5,r17
10005418:	102b883a 	mov	r21,r2
1000541c:	1827883a 	mov	r19,r3
10005420:	000e05c0 	call	1000e05c <__muldf3>
10005424:	180b883a 	mov	r5,r3
10005428:	1009883a 	mov	r4,r2
1000542c:	1821883a 	mov	r16,r3
10005430:	1023883a 	mov	r17,r2
10005434:	000f1c40 	call	1000f1c4 <__fixdfsi>
10005438:	1009883a 	mov	r4,r2
1000543c:	1029883a 	mov	r20,r2
10005440:	000f2440 	call	1000f244 <__floatsidf>
10005444:	8809883a 	mov	r4,r17
10005448:	800b883a 	mov	r5,r16
1000544c:	100d883a 	mov	r6,r2
10005450:	180f883a 	mov	r7,r3
10005454:	000e8c80 	call	1000e8c8 <__subdf3>
10005458:	a5000c04 	addi	r20,r20,48
1000545c:	a80d883a 	mov	r6,r21
10005460:	980f883a 	mov	r7,r19
10005464:	1009883a 	mov	r4,r2
10005468:	180b883a 	mov	r5,r3
1000546c:	95000005 	stb	r20,0(r18)
10005470:	1021883a 	mov	r16,r2
10005474:	1823883a 	mov	r17,r3
10005478:	000df680 	call	1000df68 <__ledf2>
1000547c:	bdc00044 	addi	r23,r23,1
10005480:	800d883a 	mov	r6,r16
10005484:	880f883a 	mov	r7,r17
10005488:	0009883a 	mov	r4,zero
1000548c:	014ffc34 	movhi	r5,16368
10005490:	103fcf0e 	bge	r2,zero,100053d0 <__alt_data_end+0xf80053d0>
10005494:	d8c01317 	ldw	r3,76(sp)
10005498:	d8c00515 	stw	r3,20(sp)
1000549c:	d9400917 	ldw	r5,36(sp)
100054a0:	e009883a 	mov	r4,fp
100054a4:	00085540 	call	10008554 <_Bfree>
100054a8:	d9000517 	ldw	r4,20(sp)
100054ac:	d9802317 	ldw	r6,140(sp)
100054b0:	d9c02517 	ldw	r7,148(sp)
100054b4:	b8000005 	stb	zero,0(r23)
100054b8:	20800044 	addi	r2,r4,1
100054bc:	30800015 	stw	r2,0(r6)
100054c0:	3802aa26 	beq	r7,zero,10005f6c <_dtoa_r+0x1178>
100054c4:	3dc00015 	stw	r23,0(r7)
100054c8:	d8800717 	ldw	r2,28(sp)
100054cc:	003e7906 	br	10004eb4 <__alt_data_end+0xf8004eb4>
100054d0:	00800434 	movhi	r2,16
100054d4:	10bfffc4 	addi	r2,r2,-1
100054d8:	88a2703a 	and	r17,r17,r2
100054dc:	883e851e 	bne	r17,zero,10004ef4 <__alt_data_end+0xf8004ef4>
100054e0:	00840074 	movhi	r2,4097
100054e4:	10891c04 	addi	r2,r2,9328
100054e8:	003e8406 	br	10004efc <__alt_data_end+0xf8004efc>
100054ec:	10c00204 	addi	r3,r2,8
100054f0:	003e8706 	br	10004f10 <__alt_data_end+0xf8004f10>
100054f4:	01400434 	movhi	r5,16
100054f8:	297fffc4 	addi	r5,r5,-1
100054fc:	994a703a 	and	r5,r19,r5
10005500:	9009883a 	mov	r4,r18
10005504:	843f0044 	addi	r16,r16,-1023
10005508:	294ffc34 	orhi	r5,r5,16368
1000550c:	dd800217 	ldw	r22,8(sp)
10005510:	d8001115 	stw	zero,68(sp)
10005514:	003ea506 	br	10004fac <__alt_data_end+0xf8004fac>
10005518:	00840074 	movhi	r2,4097
1000551c:	10891304 	addi	r2,r2,9292
10005520:	003e6406 	br	10004eb4 <__alt_data_end+0xf8004eb4>
10005524:	e0001115 	stw	zero,68(fp)
10005528:	000b883a 	mov	r5,zero
1000552c:	e009883a 	mov	r4,fp
10005530:	00084ac0 	call	100084ac <_Balloc>
10005534:	01bfffc4 	movi	r6,-1
10005538:	01c00044 	movi	r7,1
1000553c:	d8800715 	stw	r2,28(sp)
10005540:	d9800c15 	stw	r6,48(sp)
10005544:	e0801015 	stw	r2,64(fp)
10005548:	d8000315 	stw	zero,12(sp)
1000554c:	d9c00b15 	stw	r7,44(sp)
10005550:	d9800615 	stw	r6,24(sp)
10005554:	d8002215 	stw	zero,136(sp)
10005558:	d8800117 	ldw	r2,4(sp)
1000555c:	10008916 	blt	r2,zero,10005784 <_dtoa_r+0x990>
10005560:	d9000517 	ldw	r4,20(sp)
10005564:	00c00384 	movi	r3,14
10005568:	19008616 	blt	r3,r4,10005784 <_dtoa_r+0x990>
1000556c:	200490fa 	slli	r2,r4,3
10005570:	00c40074 	movhi	r3,4097
10005574:	d9802217 	ldw	r6,136(sp)
10005578:	18c93b04 	addi	r3,r3,9452
1000557c:	1885883a 	add	r2,r3,r2
10005580:	14000017 	ldw	r16,0(r2)
10005584:	14400117 	ldw	r17,4(r2)
10005588:	30016316 	blt	r6,zero,10005b18 <_dtoa_r+0xd24>
1000558c:	800d883a 	mov	r6,r16
10005590:	880f883a 	mov	r7,r17
10005594:	9009883a 	mov	r4,r18
10005598:	980b883a 	mov	r5,r19
1000559c:	000d4340 	call	1000d434 <__divdf3>
100055a0:	180b883a 	mov	r5,r3
100055a4:	1009883a 	mov	r4,r2
100055a8:	000f1c40 	call	1000f1c4 <__fixdfsi>
100055ac:	1009883a 	mov	r4,r2
100055b0:	102b883a 	mov	r21,r2
100055b4:	000f2440 	call	1000f244 <__floatsidf>
100055b8:	800d883a 	mov	r6,r16
100055bc:	880f883a 	mov	r7,r17
100055c0:	1009883a 	mov	r4,r2
100055c4:	180b883a 	mov	r5,r3
100055c8:	000e05c0 	call	1000e05c <__muldf3>
100055cc:	100d883a 	mov	r6,r2
100055d0:	180f883a 	mov	r7,r3
100055d4:	9009883a 	mov	r4,r18
100055d8:	980b883a 	mov	r5,r19
100055dc:	000e8c80 	call	1000e8c8 <__subdf3>
100055e0:	d9c00717 	ldw	r7,28(sp)
100055e4:	1009883a 	mov	r4,r2
100055e8:	a8800c04 	addi	r2,r21,48
100055ec:	38800005 	stb	r2,0(r7)
100055f0:	3dc00044 	addi	r23,r7,1
100055f4:	d9c00617 	ldw	r7,24(sp)
100055f8:	01800044 	movi	r6,1
100055fc:	180b883a 	mov	r5,r3
10005600:	2005883a 	mov	r2,r4
10005604:	39803826 	beq	r7,r6,100056e8 <_dtoa_r+0x8f4>
10005608:	000d883a 	mov	r6,zero
1000560c:	01d00934 	movhi	r7,16420
10005610:	000e05c0 	call	1000e05c <__muldf3>
10005614:	000d883a 	mov	r6,zero
10005618:	000f883a 	mov	r7,zero
1000561c:	1009883a 	mov	r4,r2
10005620:	180b883a 	mov	r5,r3
10005624:	1025883a 	mov	r18,r2
10005628:	1827883a 	mov	r19,r3
1000562c:	000de040 	call	1000de04 <__eqdf2>
10005630:	103f9a26 	beq	r2,zero,1000549c <__alt_data_end+0xf800549c>
10005634:	d9c00617 	ldw	r7,24(sp)
10005638:	d8c00717 	ldw	r3,28(sp)
1000563c:	b829883a 	mov	r20,r23
10005640:	38bfffc4 	addi	r2,r7,-1
10005644:	18ad883a 	add	r22,r3,r2
10005648:	00000a06 	br	10005674 <_dtoa_r+0x880>
1000564c:	000e05c0 	call	1000e05c <__muldf3>
10005650:	000d883a 	mov	r6,zero
10005654:	000f883a 	mov	r7,zero
10005658:	1009883a 	mov	r4,r2
1000565c:	180b883a 	mov	r5,r3
10005660:	1025883a 	mov	r18,r2
10005664:	1827883a 	mov	r19,r3
10005668:	b829883a 	mov	r20,r23
1000566c:	000de040 	call	1000de04 <__eqdf2>
10005670:	103f8a26 	beq	r2,zero,1000549c <__alt_data_end+0xf800549c>
10005674:	800d883a 	mov	r6,r16
10005678:	880f883a 	mov	r7,r17
1000567c:	9009883a 	mov	r4,r18
10005680:	980b883a 	mov	r5,r19
10005684:	000d4340 	call	1000d434 <__divdf3>
10005688:	180b883a 	mov	r5,r3
1000568c:	1009883a 	mov	r4,r2
10005690:	000f1c40 	call	1000f1c4 <__fixdfsi>
10005694:	1009883a 	mov	r4,r2
10005698:	102b883a 	mov	r21,r2
1000569c:	000f2440 	call	1000f244 <__floatsidf>
100056a0:	800d883a 	mov	r6,r16
100056a4:	880f883a 	mov	r7,r17
100056a8:	1009883a 	mov	r4,r2
100056ac:	180b883a 	mov	r5,r3
100056b0:	000e05c0 	call	1000e05c <__muldf3>
100056b4:	100d883a 	mov	r6,r2
100056b8:	180f883a 	mov	r7,r3
100056bc:	9009883a 	mov	r4,r18
100056c0:	980b883a 	mov	r5,r19
100056c4:	000e8c80 	call	1000e8c8 <__subdf3>
100056c8:	aa000c04 	addi	r8,r21,48
100056cc:	a2000005 	stb	r8,0(r20)
100056d0:	000d883a 	mov	r6,zero
100056d4:	01d00934 	movhi	r7,16420
100056d8:	1009883a 	mov	r4,r2
100056dc:	180b883a 	mov	r5,r3
100056e0:	a5c00044 	addi	r23,r20,1
100056e4:	b53fd91e 	bne	r22,r20,1000564c <__alt_data_end+0xf800564c>
100056e8:	100d883a 	mov	r6,r2
100056ec:	180f883a 	mov	r7,r3
100056f0:	1009883a 	mov	r4,r2
100056f4:	180b883a 	mov	r5,r3
100056f8:	000cb880 	call	1000cb88 <__adddf3>
100056fc:	100d883a 	mov	r6,r2
10005700:	180f883a 	mov	r7,r3
10005704:	8009883a 	mov	r4,r16
10005708:	880b883a 	mov	r5,r17
1000570c:	1027883a 	mov	r19,r2
10005710:	1825883a 	mov	r18,r3
10005714:	000df680 	call	1000df68 <__ledf2>
10005718:	10000816 	blt	r2,zero,1000573c <_dtoa_r+0x948>
1000571c:	980d883a 	mov	r6,r19
10005720:	900f883a 	mov	r7,r18
10005724:	8009883a 	mov	r4,r16
10005728:	880b883a 	mov	r5,r17
1000572c:	000de040 	call	1000de04 <__eqdf2>
10005730:	103f5a1e 	bne	r2,zero,1000549c <__alt_data_end+0xf800549c>
10005734:	ad40004c 	andi	r21,r21,1
10005738:	a83f5826 	beq	r21,zero,1000549c <__alt_data_end+0xf800549c>
1000573c:	bd3fffc3 	ldbu	r20,-1(r23)
10005740:	b8bfffc4 	addi	r2,r23,-1
10005744:	1007883a 	mov	r3,r2
10005748:	01400e44 	movi	r5,57
1000574c:	d9800717 	ldw	r6,28(sp)
10005750:	00000506 	br	10005768 <_dtoa_r+0x974>
10005754:	18ffffc4 	addi	r3,r3,-1
10005758:	11824726 	beq	r2,r6,10006078 <_dtoa_r+0x1284>
1000575c:	1d000003 	ldbu	r20,0(r3)
10005760:	102f883a 	mov	r23,r2
10005764:	10bfffc4 	addi	r2,r2,-1
10005768:	a1003fcc 	andi	r4,r20,255
1000576c:	2100201c 	xori	r4,r4,128
10005770:	213fe004 	addi	r4,r4,-128
10005774:	217ff726 	beq	r4,r5,10005754 <__alt_data_end+0xf8005754>
10005778:	a2000044 	addi	r8,r20,1
1000577c:	12000005 	stb	r8,0(r2)
10005780:	003f4606 	br	1000549c <__alt_data_end+0xf800549c>
10005784:	d9000b17 	ldw	r4,44(sp)
10005788:	2000c826 	beq	r4,zero,10005aac <_dtoa_r+0xcb8>
1000578c:	d9800317 	ldw	r6,12(sp)
10005790:	00c00044 	movi	r3,1
10005794:	1980f90e 	bge	r3,r6,10005b7c <_dtoa_r+0xd88>
10005798:	d8800617 	ldw	r2,24(sp)
1000579c:	d8c00a17 	ldw	r3,40(sp)
100057a0:	157fffc4 	addi	r21,r2,-1
100057a4:	1d41f316 	blt	r3,r21,10005f74 <_dtoa_r+0x1180>
100057a8:	1d6bc83a 	sub	r21,r3,r21
100057ac:	d9c00617 	ldw	r7,24(sp)
100057b0:	3802aa16 	blt	r7,zero,1000625c <_dtoa_r+0x1468>
100057b4:	dd000817 	ldw	r20,32(sp)
100057b8:	d8800617 	ldw	r2,24(sp)
100057bc:	d8c00817 	ldw	r3,32(sp)
100057c0:	01400044 	movi	r5,1
100057c4:	e009883a 	mov	r4,fp
100057c8:	1887883a 	add	r3,r3,r2
100057cc:	d8c00815 	stw	r3,32(sp)
100057d0:	b0ad883a 	add	r22,r22,r2
100057d4:	00088e00 	call	100088e0 <__i2b>
100057d8:	1023883a 	mov	r17,r2
100057dc:	a0000826 	beq	r20,zero,10005800 <_dtoa_r+0xa0c>
100057e0:	0580070e 	bge	zero,r22,10005800 <_dtoa_r+0xa0c>
100057e4:	a005883a 	mov	r2,r20
100057e8:	b500b916 	blt	r22,r20,10005ad0 <_dtoa_r+0xcdc>
100057ec:	d9000817 	ldw	r4,32(sp)
100057f0:	a0a9c83a 	sub	r20,r20,r2
100057f4:	b0adc83a 	sub	r22,r22,r2
100057f8:	2089c83a 	sub	r4,r4,r2
100057fc:	d9000815 	stw	r4,32(sp)
10005800:	d9800a17 	ldw	r6,40(sp)
10005804:	0181810e 	bge	zero,r6,10005e0c <_dtoa_r+0x1018>
10005808:	d9c00b17 	ldw	r7,44(sp)
1000580c:	3800b326 	beq	r7,zero,10005adc <_dtoa_r+0xce8>
10005810:	a800b226 	beq	r21,zero,10005adc <_dtoa_r+0xce8>
10005814:	880b883a 	mov	r5,r17
10005818:	a80d883a 	mov	r6,r21
1000581c:	e009883a 	mov	r4,fp
10005820:	0008ba80 	call	10008ba8 <__pow5mult>
10005824:	d9800917 	ldw	r6,36(sp)
10005828:	100b883a 	mov	r5,r2
1000582c:	e009883a 	mov	r4,fp
10005830:	1023883a 	mov	r17,r2
10005834:	000891c0 	call	1000891c <__multiply>
10005838:	1021883a 	mov	r16,r2
1000583c:	d8800a17 	ldw	r2,40(sp)
10005840:	d9400917 	ldw	r5,36(sp)
10005844:	e009883a 	mov	r4,fp
10005848:	1545c83a 	sub	r2,r2,r21
1000584c:	d8800a15 	stw	r2,40(sp)
10005850:	00085540 	call	10008554 <_Bfree>
10005854:	d8c00a17 	ldw	r3,40(sp)
10005858:	18009f1e 	bne	r3,zero,10005ad8 <_dtoa_r+0xce4>
1000585c:	05c00044 	movi	r23,1
10005860:	e009883a 	mov	r4,fp
10005864:	b80b883a 	mov	r5,r23
10005868:	00088e00 	call	100088e0 <__i2b>
1000586c:	d9000d17 	ldw	r4,52(sp)
10005870:	102b883a 	mov	r21,r2
10005874:	2000ce26 	beq	r4,zero,10005bb0 <_dtoa_r+0xdbc>
10005878:	200d883a 	mov	r6,r4
1000587c:	100b883a 	mov	r5,r2
10005880:	e009883a 	mov	r4,fp
10005884:	0008ba80 	call	10008ba8 <__pow5mult>
10005888:	d9800317 	ldw	r6,12(sp)
1000588c:	102b883a 	mov	r21,r2
10005890:	b981810e 	bge	r23,r6,10005e98 <_dtoa_r+0x10a4>
10005894:	0027883a 	mov	r19,zero
10005898:	a8800417 	ldw	r2,16(r21)
1000589c:	05c00804 	movi	r23,32
100058a0:	10800104 	addi	r2,r2,4
100058a4:	1085883a 	add	r2,r2,r2
100058a8:	1085883a 	add	r2,r2,r2
100058ac:	a885883a 	add	r2,r21,r2
100058b0:	11000017 	ldw	r4,0(r2)
100058b4:	00087c80 	call	100087c8 <__hi0bits>
100058b8:	b885c83a 	sub	r2,r23,r2
100058bc:	1585883a 	add	r2,r2,r22
100058c0:	108007cc 	andi	r2,r2,31
100058c4:	1000b326 	beq	r2,zero,10005b94 <_dtoa_r+0xda0>
100058c8:	00c00804 	movi	r3,32
100058cc:	1887c83a 	sub	r3,r3,r2
100058d0:	01000104 	movi	r4,4
100058d4:	20c2cd0e 	bge	r4,r3,1000640c <_dtoa_r+0x1618>
100058d8:	00c00704 	movi	r3,28
100058dc:	1885c83a 	sub	r2,r3,r2
100058e0:	d8c00817 	ldw	r3,32(sp)
100058e4:	a0a9883a 	add	r20,r20,r2
100058e8:	b0ad883a 	add	r22,r22,r2
100058ec:	1887883a 	add	r3,r3,r2
100058f0:	d8c00815 	stw	r3,32(sp)
100058f4:	d9800817 	ldw	r6,32(sp)
100058f8:	0180040e 	bge	zero,r6,1000590c <_dtoa_r+0xb18>
100058fc:	800b883a 	mov	r5,r16
10005900:	e009883a 	mov	r4,fp
10005904:	0008ce80 	call	10008ce8 <__lshift>
10005908:	1021883a 	mov	r16,r2
1000590c:	0580050e 	bge	zero,r22,10005924 <_dtoa_r+0xb30>
10005910:	a80b883a 	mov	r5,r21
10005914:	b00d883a 	mov	r6,r22
10005918:	e009883a 	mov	r4,fp
1000591c:	0008ce80 	call	10008ce8 <__lshift>
10005920:	102b883a 	mov	r21,r2
10005924:	d9c00e17 	ldw	r7,56(sp)
10005928:	3801211e 	bne	r7,zero,10005db0 <_dtoa_r+0xfbc>
1000592c:	d9800617 	ldw	r6,24(sp)
10005930:	0181380e 	bge	zero,r6,10005e14 <_dtoa_r+0x1020>
10005934:	d8c00b17 	ldw	r3,44(sp)
10005938:	1800ab1e 	bne	r3,zero,10005be8 <_dtoa_r+0xdf4>
1000593c:	dc800717 	ldw	r18,28(sp)
10005940:	dcc00617 	ldw	r19,24(sp)
10005944:	9029883a 	mov	r20,r18
10005948:	00000206 	br	10005954 <_dtoa_r+0xb60>
1000594c:	000857c0 	call	1000857c <__multadd>
10005950:	1021883a 	mov	r16,r2
10005954:	a80b883a 	mov	r5,r21
10005958:	8009883a 	mov	r4,r16
1000595c:	0004bcc0 	call	10004bcc <quorem>
10005960:	10800c04 	addi	r2,r2,48
10005964:	90800005 	stb	r2,0(r18)
10005968:	94800044 	addi	r18,r18,1
1000596c:	9507c83a 	sub	r3,r18,r20
10005970:	000f883a 	mov	r7,zero
10005974:	01800284 	movi	r6,10
10005978:	800b883a 	mov	r5,r16
1000597c:	e009883a 	mov	r4,fp
10005980:	1cfff216 	blt	r3,r19,1000594c <__alt_data_end+0xf800594c>
10005984:	1011883a 	mov	r8,r2
10005988:	d8800617 	ldw	r2,24(sp)
1000598c:	0082370e 	bge	zero,r2,1000626c <_dtoa_r+0x1478>
10005990:	d9000717 	ldw	r4,28(sp)
10005994:	0025883a 	mov	r18,zero
10005998:	20af883a 	add	r23,r4,r2
1000599c:	01800044 	movi	r6,1
100059a0:	800b883a 	mov	r5,r16
100059a4:	e009883a 	mov	r4,fp
100059a8:	da001715 	stw	r8,92(sp)
100059ac:	0008ce80 	call	10008ce8 <__lshift>
100059b0:	a80b883a 	mov	r5,r21
100059b4:	1009883a 	mov	r4,r2
100059b8:	d8800915 	stw	r2,36(sp)
100059bc:	0008e300 	call	10008e30 <__mcmp>
100059c0:	da001717 	ldw	r8,92(sp)
100059c4:	0081800e 	bge	zero,r2,10005fc8 <_dtoa_r+0x11d4>
100059c8:	b93fffc3 	ldbu	r4,-1(r23)
100059cc:	b8bfffc4 	addi	r2,r23,-1
100059d0:	1007883a 	mov	r3,r2
100059d4:	01800e44 	movi	r6,57
100059d8:	d9c00717 	ldw	r7,28(sp)
100059dc:	00000506 	br	100059f4 <_dtoa_r+0xc00>
100059e0:	18ffffc4 	addi	r3,r3,-1
100059e4:	11c12326 	beq	r2,r7,10005e74 <_dtoa_r+0x1080>
100059e8:	19000003 	ldbu	r4,0(r3)
100059ec:	102f883a 	mov	r23,r2
100059f0:	10bfffc4 	addi	r2,r2,-1
100059f4:	21403fcc 	andi	r5,r4,255
100059f8:	2940201c 	xori	r5,r5,128
100059fc:	297fe004 	addi	r5,r5,-128
10005a00:	29bff726 	beq	r5,r6,100059e0 <__alt_data_end+0xf80059e0>
10005a04:	21000044 	addi	r4,r4,1
10005a08:	11000005 	stb	r4,0(r2)
10005a0c:	a80b883a 	mov	r5,r21
10005a10:	e009883a 	mov	r4,fp
10005a14:	00085540 	call	10008554 <_Bfree>
10005a18:	883ea026 	beq	r17,zero,1000549c <__alt_data_end+0xf800549c>
10005a1c:	90000426 	beq	r18,zero,10005a30 <_dtoa_r+0xc3c>
10005a20:	94400326 	beq	r18,r17,10005a30 <_dtoa_r+0xc3c>
10005a24:	900b883a 	mov	r5,r18
10005a28:	e009883a 	mov	r4,fp
10005a2c:	00085540 	call	10008554 <_Bfree>
10005a30:	880b883a 	mov	r5,r17
10005a34:	e009883a 	mov	r4,fp
10005a38:	00085540 	call	10008554 <_Bfree>
10005a3c:	003e9706 	br	1000549c <__alt_data_end+0xf800549c>
10005a40:	01800044 	movi	r6,1
10005a44:	d9800e15 	stw	r6,56(sp)
10005a48:	003d9606 	br	100050a4 <__alt_data_end+0xf80050a4>
10005a4c:	d8800817 	ldw	r2,32(sp)
10005a50:	d8c00517 	ldw	r3,20(sp)
10005a54:	d8000d15 	stw	zero,52(sp)
10005a58:	10c5c83a 	sub	r2,r2,r3
10005a5c:	00c9c83a 	sub	r4,zero,r3
10005a60:	d8800815 	stw	r2,32(sp)
10005a64:	d9000a15 	stw	r4,40(sp)
10005a68:	003d9706 	br	100050c8 <__alt_data_end+0xf80050c8>
10005a6c:	05adc83a 	sub	r22,zero,r22
10005a70:	dd800815 	stw	r22,32(sp)
10005a74:	002d883a 	mov	r22,zero
10005a78:	003d8e06 	br	100050b4 <__alt_data_end+0xf80050b4>
10005a7c:	d9000517 	ldw	r4,20(sp)
10005a80:	000f2440 	call	1000f244 <__floatsidf>
10005a84:	100d883a 	mov	r6,r2
10005a88:	180f883a 	mov	r7,r3
10005a8c:	a009883a 	mov	r4,r20
10005a90:	880b883a 	mov	r5,r17
10005a94:	000de040 	call	1000de04 <__eqdf2>
10005a98:	103d7126 	beq	r2,zero,10005060 <__alt_data_end+0xf8005060>
10005a9c:	d9c00517 	ldw	r7,20(sp)
10005aa0:	39ffffc4 	addi	r7,r7,-1
10005aa4:	d9c00515 	stw	r7,20(sp)
10005aa8:	003d6d06 	br	10005060 <__alt_data_end+0xf8005060>
10005aac:	dd400a17 	ldw	r21,40(sp)
10005ab0:	dd000817 	ldw	r20,32(sp)
10005ab4:	0023883a 	mov	r17,zero
10005ab8:	003f4806 	br	100057dc <__alt_data_end+0xf80057dc>
10005abc:	10e3c83a 	sub	r17,r2,r3
10005ac0:	9448983a 	sll	r4,r18,r17
10005ac4:	003d3206 	br	10004f90 <__alt_data_end+0xf8004f90>
10005ac8:	d8000e15 	stw	zero,56(sp)
10005acc:	003d7506 	br	100050a4 <__alt_data_end+0xf80050a4>
10005ad0:	b005883a 	mov	r2,r22
10005ad4:	003f4506 	br	100057ec <__alt_data_end+0xf80057ec>
10005ad8:	dc000915 	stw	r16,36(sp)
10005adc:	d9800a17 	ldw	r6,40(sp)
10005ae0:	d9400917 	ldw	r5,36(sp)
10005ae4:	e009883a 	mov	r4,fp
10005ae8:	0008ba80 	call	10008ba8 <__pow5mult>
10005aec:	1021883a 	mov	r16,r2
10005af0:	003f5a06 	br	1000585c <__alt_data_end+0xf800585c>
10005af4:	01c00044 	movi	r7,1
10005af8:	d9c00b15 	stw	r7,44(sp)
10005afc:	d8802217 	ldw	r2,136(sp)
10005b00:	0081280e 	bge	zero,r2,10005fa4 <_dtoa_r+0x11b0>
10005b04:	100d883a 	mov	r6,r2
10005b08:	1021883a 	mov	r16,r2
10005b0c:	d8800c15 	stw	r2,48(sp)
10005b10:	d8800615 	stw	r2,24(sp)
10005b14:	003d8806 	br	10005138 <__alt_data_end+0xf8005138>
10005b18:	d8800617 	ldw	r2,24(sp)
10005b1c:	00be9b16 	blt	zero,r2,1000558c <__alt_data_end+0xf800558c>
10005b20:	10010f1e 	bne	r2,zero,10005f60 <_dtoa_r+0x116c>
10005b24:	880b883a 	mov	r5,r17
10005b28:	000d883a 	mov	r6,zero
10005b2c:	01d00534 	movhi	r7,16404
10005b30:	8009883a 	mov	r4,r16
10005b34:	000e05c0 	call	1000e05c <__muldf3>
10005b38:	900d883a 	mov	r6,r18
10005b3c:	980f883a 	mov	r7,r19
10005b40:	1009883a 	mov	r4,r2
10005b44:	180b883a 	mov	r5,r3
10005b48:	000de8c0 	call	1000de8c <__gedf2>
10005b4c:	002b883a 	mov	r21,zero
10005b50:	0023883a 	mov	r17,zero
10005b54:	1000bf16 	blt	r2,zero,10005e54 <_dtoa_r+0x1060>
10005b58:	d9802217 	ldw	r6,136(sp)
10005b5c:	ddc00717 	ldw	r23,28(sp)
10005b60:	018c303a 	nor	r6,zero,r6
10005b64:	d9800515 	stw	r6,20(sp)
10005b68:	a80b883a 	mov	r5,r21
10005b6c:	e009883a 	mov	r4,fp
10005b70:	00085540 	call	10008554 <_Bfree>
10005b74:	883e4926 	beq	r17,zero,1000549c <__alt_data_end+0xf800549c>
10005b78:	003fad06 	br	10005a30 <__alt_data_end+0xf8005a30>
10005b7c:	d9c01117 	ldw	r7,68(sp)
10005b80:	3801bc26 	beq	r7,zero,10006274 <_dtoa_r+0x1480>
10005b84:	10810cc4 	addi	r2,r2,1075
10005b88:	dd400a17 	ldw	r21,40(sp)
10005b8c:	dd000817 	ldw	r20,32(sp)
10005b90:	003f0a06 	br	100057bc <__alt_data_end+0xf80057bc>
10005b94:	00800704 	movi	r2,28
10005b98:	d9000817 	ldw	r4,32(sp)
10005b9c:	a0a9883a 	add	r20,r20,r2
10005ba0:	b0ad883a 	add	r22,r22,r2
10005ba4:	2089883a 	add	r4,r4,r2
10005ba8:	d9000815 	stw	r4,32(sp)
10005bac:	003f5106 	br	100058f4 <__alt_data_end+0xf80058f4>
10005bb0:	d8c00317 	ldw	r3,12(sp)
10005bb4:	b8c1fc0e 	bge	r23,r3,100063a8 <_dtoa_r+0x15b4>
10005bb8:	0027883a 	mov	r19,zero
10005bbc:	b805883a 	mov	r2,r23
10005bc0:	003f3e06 	br	100058bc <__alt_data_end+0xf80058bc>
10005bc4:	880b883a 	mov	r5,r17
10005bc8:	e009883a 	mov	r4,fp
10005bcc:	000f883a 	mov	r7,zero
10005bd0:	01800284 	movi	r6,10
10005bd4:	000857c0 	call	1000857c <__multadd>
10005bd8:	d9000c17 	ldw	r4,48(sp)
10005bdc:	1023883a 	mov	r17,r2
10005be0:	0102040e 	bge	zero,r4,100063f4 <_dtoa_r+0x1600>
10005be4:	d9000615 	stw	r4,24(sp)
10005be8:	0500050e 	bge	zero,r20,10005c00 <_dtoa_r+0xe0c>
10005bec:	880b883a 	mov	r5,r17
10005bf0:	a00d883a 	mov	r6,r20
10005bf4:	e009883a 	mov	r4,fp
10005bf8:	0008ce80 	call	10008ce8 <__lshift>
10005bfc:	1023883a 	mov	r17,r2
10005c00:	9801241e 	bne	r19,zero,10006094 <_dtoa_r+0x12a0>
10005c04:	8829883a 	mov	r20,r17
10005c08:	d9000617 	ldw	r4,24(sp)
10005c0c:	dcc00717 	ldw	r19,28(sp)
10005c10:	9480004c 	andi	r18,r18,1
10005c14:	20bfffc4 	addi	r2,r4,-1
10005c18:	9885883a 	add	r2,r19,r2
10005c1c:	d8800415 	stw	r2,16(sp)
10005c20:	dc800615 	stw	r18,24(sp)
10005c24:	a80b883a 	mov	r5,r21
10005c28:	8009883a 	mov	r4,r16
10005c2c:	0004bcc0 	call	10004bcc <quorem>
10005c30:	880b883a 	mov	r5,r17
10005c34:	8009883a 	mov	r4,r16
10005c38:	102f883a 	mov	r23,r2
10005c3c:	0008e300 	call	10008e30 <__mcmp>
10005c40:	a80b883a 	mov	r5,r21
10005c44:	a00d883a 	mov	r6,r20
10005c48:	e009883a 	mov	r4,fp
10005c4c:	102d883a 	mov	r22,r2
10005c50:	0008e900 	call	10008e90 <__mdiff>
10005c54:	1007883a 	mov	r3,r2
10005c58:	10800317 	ldw	r2,12(r2)
10005c5c:	bc800c04 	addi	r18,r23,48
10005c60:	180b883a 	mov	r5,r3
10005c64:	10004e1e 	bne	r2,zero,10005da0 <_dtoa_r+0xfac>
10005c68:	8009883a 	mov	r4,r16
10005c6c:	d8c01615 	stw	r3,88(sp)
10005c70:	0008e300 	call	10008e30 <__mcmp>
10005c74:	d8c01617 	ldw	r3,88(sp)
10005c78:	e009883a 	mov	r4,fp
10005c7c:	d8801615 	stw	r2,88(sp)
10005c80:	180b883a 	mov	r5,r3
10005c84:	00085540 	call	10008554 <_Bfree>
10005c88:	d8801617 	ldw	r2,88(sp)
10005c8c:	1000041e 	bne	r2,zero,10005ca0 <_dtoa_r+0xeac>
10005c90:	d9800317 	ldw	r6,12(sp)
10005c94:	3000021e 	bne	r6,zero,10005ca0 <_dtoa_r+0xeac>
10005c98:	d8c00617 	ldw	r3,24(sp)
10005c9c:	18003726 	beq	r3,zero,10005d7c <_dtoa_r+0xf88>
10005ca0:	b0002016 	blt	r22,zero,10005d24 <_dtoa_r+0xf30>
10005ca4:	b000041e 	bne	r22,zero,10005cb8 <_dtoa_r+0xec4>
10005ca8:	d9000317 	ldw	r4,12(sp)
10005cac:	2000021e 	bne	r4,zero,10005cb8 <_dtoa_r+0xec4>
10005cb0:	d8c00617 	ldw	r3,24(sp)
10005cb4:	18001b26 	beq	r3,zero,10005d24 <_dtoa_r+0xf30>
10005cb8:	00810716 	blt	zero,r2,100060d8 <_dtoa_r+0x12e4>
10005cbc:	d8c00417 	ldw	r3,16(sp)
10005cc0:	9d800044 	addi	r22,r19,1
10005cc4:	9c800005 	stb	r18,0(r19)
10005cc8:	b02f883a 	mov	r23,r22
10005ccc:	98c10626 	beq	r19,r3,100060e8 <_dtoa_r+0x12f4>
10005cd0:	800b883a 	mov	r5,r16
10005cd4:	000f883a 	mov	r7,zero
10005cd8:	01800284 	movi	r6,10
10005cdc:	e009883a 	mov	r4,fp
10005ce0:	000857c0 	call	1000857c <__multadd>
10005ce4:	1021883a 	mov	r16,r2
10005ce8:	000f883a 	mov	r7,zero
10005cec:	01800284 	movi	r6,10
10005cf0:	880b883a 	mov	r5,r17
10005cf4:	e009883a 	mov	r4,fp
10005cf8:	8d002526 	beq	r17,r20,10005d90 <_dtoa_r+0xf9c>
10005cfc:	000857c0 	call	1000857c <__multadd>
10005d00:	a00b883a 	mov	r5,r20
10005d04:	000f883a 	mov	r7,zero
10005d08:	01800284 	movi	r6,10
10005d0c:	e009883a 	mov	r4,fp
10005d10:	1023883a 	mov	r17,r2
10005d14:	000857c0 	call	1000857c <__multadd>
10005d18:	1029883a 	mov	r20,r2
10005d1c:	b027883a 	mov	r19,r22
10005d20:	003fc006 	br	10005c24 <__alt_data_end+0xf8005c24>
10005d24:	9011883a 	mov	r8,r18
10005d28:	00800e0e 	bge	zero,r2,10005d64 <_dtoa_r+0xf70>
10005d2c:	800b883a 	mov	r5,r16
10005d30:	01800044 	movi	r6,1
10005d34:	e009883a 	mov	r4,fp
10005d38:	da001715 	stw	r8,92(sp)
10005d3c:	0008ce80 	call	10008ce8 <__lshift>
10005d40:	a80b883a 	mov	r5,r21
10005d44:	1009883a 	mov	r4,r2
10005d48:	1021883a 	mov	r16,r2
10005d4c:	0008e300 	call	10008e30 <__mcmp>
10005d50:	da001717 	ldw	r8,92(sp)
10005d54:	0081960e 	bge	zero,r2,100063b0 <_dtoa_r+0x15bc>
10005d58:	00800e44 	movi	r2,57
10005d5c:	40817026 	beq	r8,r2,10006320 <_dtoa_r+0x152c>
10005d60:	ba000c44 	addi	r8,r23,49
10005d64:	8825883a 	mov	r18,r17
10005d68:	9dc00044 	addi	r23,r19,1
10005d6c:	9a000005 	stb	r8,0(r19)
10005d70:	a023883a 	mov	r17,r20
10005d74:	dc000915 	stw	r16,36(sp)
10005d78:	003f2406 	br	10005a0c <__alt_data_end+0xf8005a0c>
10005d7c:	00800e44 	movi	r2,57
10005d80:	9011883a 	mov	r8,r18
10005d84:	90816626 	beq	r18,r2,10006320 <_dtoa_r+0x152c>
10005d88:	05bff516 	blt	zero,r22,10005d60 <__alt_data_end+0xf8005d60>
10005d8c:	003ff506 	br	10005d64 <__alt_data_end+0xf8005d64>
10005d90:	000857c0 	call	1000857c <__multadd>
10005d94:	1023883a 	mov	r17,r2
10005d98:	1029883a 	mov	r20,r2
10005d9c:	003fdf06 	br	10005d1c <__alt_data_end+0xf8005d1c>
10005da0:	e009883a 	mov	r4,fp
10005da4:	00085540 	call	10008554 <_Bfree>
10005da8:	00800044 	movi	r2,1
10005dac:	003fbc06 	br	10005ca0 <__alt_data_end+0xf8005ca0>
10005db0:	a80b883a 	mov	r5,r21
10005db4:	8009883a 	mov	r4,r16
10005db8:	0008e300 	call	10008e30 <__mcmp>
10005dbc:	103edb0e 	bge	r2,zero,1000592c <__alt_data_end+0xf800592c>
10005dc0:	800b883a 	mov	r5,r16
10005dc4:	000f883a 	mov	r7,zero
10005dc8:	01800284 	movi	r6,10
10005dcc:	e009883a 	mov	r4,fp
10005dd0:	000857c0 	call	1000857c <__multadd>
10005dd4:	1021883a 	mov	r16,r2
10005dd8:	d8800517 	ldw	r2,20(sp)
10005ddc:	d8c00b17 	ldw	r3,44(sp)
10005de0:	10bfffc4 	addi	r2,r2,-1
10005de4:	d8800515 	stw	r2,20(sp)
10005de8:	183f761e 	bne	r3,zero,10005bc4 <__alt_data_end+0xf8005bc4>
10005dec:	d9000c17 	ldw	r4,48(sp)
10005df0:	0101730e 	bge	zero,r4,100063c0 <_dtoa_r+0x15cc>
10005df4:	d9000615 	stw	r4,24(sp)
10005df8:	003ed006 	br	1000593c <__alt_data_end+0xf800593c>
10005dfc:	00800084 	movi	r2,2
10005e00:	3081861e 	bne	r6,r2,1000641c <_dtoa_r+0x1628>
10005e04:	d8000b15 	stw	zero,44(sp)
10005e08:	003f3c06 	br	10005afc <__alt_data_end+0xf8005afc>
10005e0c:	dc000917 	ldw	r16,36(sp)
10005e10:	003e9206 	br	1000585c <__alt_data_end+0xf800585c>
10005e14:	d9c00317 	ldw	r7,12(sp)
10005e18:	00800084 	movi	r2,2
10005e1c:	11fec50e 	bge	r2,r7,10005934 <__alt_data_end+0xf8005934>
10005e20:	d9000617 	ldw	r4,24(sp)
10005e24:	20013c1e 	bne	r4,zero,10006318 <_dtoa_r+0x1524>
10005e28:	a80b883a 	mov	r5,r21
10005e2c:	000f883a 	mov	r7,zero
10005e30:	01800144 	movi	r6,5
10005e34:	e009883a 	mov	r4,fp
10005e38:	000857c0 	call	1000857c <__multadd>
10005e3c:	100b883a 	mov	r5,r2
10005e40:	8009883a 	mov	r4,r16
10005e44:	102b883a 	mov	r21,r2
10005e48:	0008e300 	call	10008e30 <__mcmp>
10005e4c:	dc000915 	stw	r16,36(sp)
10005e50:	00bf410e 	bge	zero,r2,10005b58 <__alt_data_end+0xf8005b58>
10005e54:	d9c00717 	ldw	r7,28(sp)
10005e58:	00800c44 	movi	r2,49
10005e5c:	38800005 	stb	r2,0(r7)
10005e60:	d8800517 	ldw	r2,20(sp)
10005e64:	3dc00044 	addi	r23,r7,1
10005e68:	10800044 	addi	r2,r2,1
10005e6c:	d8800515 	stw	r2,20(sp)
10005e70:	003f3d06 	br	10005b68 <__alt_data_end+0xf8005b68>
10005e74:	d9800517 	ldw	r6,20(sp)
10005e78:	d9c00717 	ldw	r7,28(sp)
10005e7c:	00800c44 	movi	r2,49
10005e80:	31800044 	addi	r6,r6,1
10005e84:	d9800515 	stw	r6,20(sp)
10005e88:	38800005 	stb	r2,0(r7)
10005e8c:	003edf06 	br	10005a0c <__alt_data_end+0xf8005a0c>
10005e90:	d8000b15 	stw	zero,44(sp)
10005e94:	003c9f06 	br	10005114 <__alt_data_end+0xf8005114>
10005e98:	903e7e1e 	bne	r18,zero,10005894 <__alt_data_end+0xf8005894>
10005e9c:	00800434 	movhi	r2,16
10005ea0:	10bfffc4 	addi	r2,r2,-1
10005ea4:	9884703a 	and	r2,r19,r2
10005ea8:	1000ea1e 	bne	r2,zero,10006254 <_dtoa_r+0x1460>
10005eac:	9cdffc2c 	andhi	r19,r19,32752
10005eb0:	9800e826 	beq	r19,zero,10006254 <_dtoa_r+0x1460>
10005eb4:	d9c00817 	ldw	r7,32(sp)
10005eb8:	b5800044 	addi	r22,r22,1
10005ebc:	04c00044 	movi	r19,1
10005ec0:	39c00044 	addi	r7,r7,1
10005ec4:	d9c00815 	stw	r7,32(sp)
10005ec8:	d8800d17 	ldw	r2,52(sp)
10005ecc:	103e721e 	bne	r2,zero,10005898 <__alt_data_end+0xf8005898>
10005ed0:	00800044 	movi	r2,1
10005ed4:	003e7906 	br	100058bc <__alt_data_end+0xf80058bc>
10005ed8:	8009883a 	mov	r4,r16
10005edc:	000f2440 	call	1000f244 <__floatsidf>
10005ee0:	d9800f17 	ldw	r6,60(sp)
10005ee4:	d9c01017 	ldw	r7,64(sp)
10005ee8:	1009883a 	mov	r4,r2
10005eec:	180b883a 	mov	r5,r3
10005ef0:	000e05c0 	call	1000e05c <__muldf3>
10005ef4:	000d883a 	mov	r6,zero
10005ef8:	01d00734 	movhi	r7,16412
10005efc:	1009883a 	mov	r4,r2
10005f00:	180b883a 	mov	r5,r3
10005f04:	000cb880 	call	1000cb88 <__adddf3>
10005f08:	047f3034 	movhi	r17,64704
10005f0c:	1021883a 	mov	r16,r2
10005f10:	1c63883a 	add	r17,r3,r17
10005f14:	d9000f17 	ldw	r4,60(sp)
10005f18:	d9401017 	ldw	r5,64(sp)
10005f1c:	000d883a 	mov	r6,zero
10005f20:	01d00534 	movhi	r7,16404
10005f24:	000e8c80 	call	1000e8c8 <__subdf3>
10005f28:	800d883a 	mov	r6,r16
10005f2c:	880f883a 	mov	r7,r17
10005f30:	1009883a 	mov	r4,r2
10005f34:	180b883a 	mov	r5,r3
10005f38:	102b883a 	mov	r21,r2
10005f3c:	1829883a 	mov	r20,r3
10005f40:	000de8c0 	call	1000de8c <__gedf2>
10005f44:	00806c16 	blt	zero,r2,100060f8 <_dtoa_r+0x1304>
10005f48:	89e0003c 	xorhi	r7,r17,32768
10005f4c:	800d883a 	mov	r6,r16
10005f50:	a809883a 	mov	r4,r21
10005f54:	a00b883a 	mov	r5,r20
10005f58:	000df680 	call	1000df68 <__ledf2>
10005f5c:	103d7e0e 	bge	r2,zero,10005558 <__alt_data_end+0xf8005558>
10005f60:	002b883a 	mov	r21,zero
10005f64:	0023883a 	mov	r17,zero
10005f68:	003efb06 	br	10005b58 <__alt_data_end+0xf8005b58>
10005f6c:	d8800717 	ldw	r2,28(sp)
10005f70:	003bd006 	br	10004eb4 <__alt_data_end+0xf8004eb4>
10005f74:	d9000a17 	ldw	r4,40(sp)
10005f78:	d9800d17 	ldw	r6,52(sp)
10005f7c:	dd400a15 	stw	r21,40(sp)
10005f80:	a905c83a 	sub	r2,r21,r4
10005f84:	308d883a 	add	r6,r6,r2
10005f88:	d9800d15 	stw	r6,52(sp)
10005f8c:	002b883a 	mov	r21,zero
10005f90:	003e0606 	br	100057ac <__alt_data_end+0xf80057ac>
10005f94:	9023883a 	mov	r17,r18
10005f98:	9829883a 	mov	r20,r19
10005f9c:	04000084 	movi	r16,2
10005fa0:	003c9206 	br	100051ec <__alt_data_end+0xf80051ec>
10005fa4:	04000044 	movi	r16,1
10005fa8:	dc000c15 	stw	r16,48(sp)
10005fac:	dc000615 	stw	r16,24(sp)
10005fb0:	dc002215 	stw	r16,136(sp)
10005fb4:	e0001115 	stw	zero,68(fp)
10005fb8:	000b883a 	mov	r5,zero
10005fbc:	003c6906 	br	10005164 <__alt_data_end+0xf8005164>
10005fc0:	3021883a 	mov	r16,r6
10005fc4:	003ffb06 	br	10005fb4 <__alt_data_end+0xf8005fb4>
10005fc8:	1000021e 	bne	r2,zero,10005fd4 <_dtoa_r+0x11e0>
10005fcc:	4200004c 	andi	r8,r8,1
10005fd0:	403e7d1e 	bne	r8,zero,100059c8 <__alt_data_end+0xf80059c8>
10005fd4:	01000c04 	movi	r4,48
10005fd8:	00000106 	br	10005fe0 <_dtoa_r+0x11ec>
10005fdc:	102f883a 	mov	r23,r2
10005fe0:	b8bfffc4 	addi	r2,r23,-1
10005fe4:	10c00007 	ldb	r3,0(r2)
10005fe8:	193ffc26 	beq	r3,r4,10005fdc <__alt_data_end+0xf8005fdc>
10005fec:	003e8706 	br	10005a0c <__alt_data_end+0xf8005a0c>
10005ff0:	d8800517 	ldw	r2,20(sp)
10005ff4:	00a3c83a 	sub	r17,zero,r2
10005ff8:	8800a426 	beq	r17,zero,1000628c <_dtoa_r+0x1498>
10005ffc:	888003cc 	andi	r2,r17,15
10006000:	100490fa 	slli	r2,r2,3
10006004:	00c40074 	movhi	r3,4097
10006008:	18c93b04 	addi	r3,r3,9452
1000600c:	1885883a 	add	r2,r3,r2
10006010:	11800017 	ldw	r6,0(r2)
10006014:	11c00117 	ldw	r7,4(r2)
10006018:	9009883a 	mov	r4,r18
1000601c:	980b883a 	mov	r5,r19
10006020:	8823d13a 	srai	r17,r17,4
10006024:	000e05c0 	call	1000e05c <__muldf3>
10006028:	d8800f15 	stw	r2,60(sp)
1000602c:	d8c01015 	stw	r3,64(sp)
10006030:	8800e826 	beq	r17,zero,100063d4 <_dtoa_r+0x15e0>
10006034:	05040074 	movhi	r20,4097
10006038:	a5093104 	addi	r20,r20,9412
1000603c:	04000084 	movi	r16,2
10006040:	8980004c 	andi	r6,r17,1
10006044:	1009883a 	mov	r4,r2
10006048:	8823d07a 	srai	r17,r17,1
1000604c:	180b883a 	mov	r5,r3
10006050:	30000426 	beq	r6,zero,10006064 <_dtoa_r+0x1270>
10006054:	a1800017 	ldw	r6,0(r20)
10006058:	a1c00117 	ldw	r7,4(r20)
1000605c:	84000044 	addi	r16,r16,1
10006060:	000e05c0 	call	1000e05c <__muldf3>
10006064:	a5000204 	addi	r20,r20,8
10006068:	883ff51e 	bne	r17,zero,10006040 <__alt_data_end+0xf8006040>
1000606c:	d8800f15 	stw	r2,60(sp)
10006070:	d8c01015 	stw	r3,64(sp)
10006074:	003c7606 	br	10005250 <__alt_data_end+0xf8005250>
10006078:	00c00c04 	movi	r3,48
1000607c:	10c00005 	stb	r3,0(r2)
10006080:	d8c00517 	ldw	r3,20(sp)
10006084:	bd3fffc3 	ldbu	r20,-1(r23)
10006088:	18c00044 	addi	r3,r3,1
1000608c:	d8c00515 	stw	r3,20(sp)
10006090:	003db906 	br	10005778 <__alt_data_end+0xf8005778>
10006094:	89400117 	ldw	r5,4(r17)
10006098:	e009883a 	mov	r4,fp
1000609c:	00084ac0 	call	100084ac <_Balloc>
100060a0:	89800417 	ldw	r6,16(r17)
100060a4:	89400304 	addi	r5,r17,12
100060a8:	11000304 	addi	r4,r2,12
100060ac:	31800084 	addi	r6,r6,2
100060b0:	318d883a 	add	r6,r6,r6
100060b4:	318d883a 	add	r6,r6,r6
100060b8:	1027883a 	mov	r19,r2
100060bc:	00080e00 	call	100080e0 <memcpy>
100060c0:	01800044 	movi	r6,1
100060c4:	980b883a 	mov	r5,r19
100060c8:	e009883a 	mov	r4,fp
100060cc:	0008ce80 	call	10008ce8 <__lshift>
100060d0:	1029883a 	mov	r20,r2
100060d4:	003ecc06 	br	10005c08 <__alt_data_end+0xf8005c08>
100060d8:	00800e44 	movi	r2,57
100060dc:	90809026 	beq	r18,r2,10006320 <_dtoa_r+0x152c>
100060e0:	92000044 	addi	r8,r18,1
100060e4:	003f1f06 	br	10005d64 <__alt_data_end+0xf8005d64>
100060e8:	9011883a 	mov	r8,r18
100060ec:	8825883a 	mov	r18,r17
100060f0:	a023883a 	mov	r17,r20
100060f4:	003e2906 	br	1000599c <__alt_data_end+0xf800599c>
100060f8:	002b883a 	mov	r21,zero
100060fc:	0023883a 	mov	r17,zero
10006100:	003f5406 	br	10005e54 <__alt_data_end+0xf8005e54>
10006104:	61bfffc4 	addi	r6,r12,-1
10006108:	300490fa 	slli	r2,r6,3
1000610c:	00c40074 	movhi	r3,4097
10006110:	18c93b04 	addi	r3,r3,9452
10006114:	1885883a 	add	r2,r3,r2
10006118:	11000017 	ldw	r4,0(r2)
1000611c:	11400117 	ldw	r5,4(r2)
10006120:	d8800717 	ldw	r2,28(sp)
10006124:	880f883a 	mov	r7,r17
10006128:	d9801215 	stw	r6,72(sp)
1000612c:	800d883a 	mov	r6,r16
10006130:	db001615 	stw	r12,88(sp)
10006134:	15c00044 	addi	r23,r2,1
10006138:	000e05c0 	call	1000e05c <__muldf3>
1000613c:	d9401017 	ldw	r5,64(sp)
10006140:	d9000f17 	ldw	r4,60(sp)
10006144:	d8c01515 	stw	r3,84(sp)
10006148:	d8801415 	stw	r2,80(sp)
1000614c:	000f1c40 	call	1000f1c4 <__fixdfsi>
10006150:	1009883a 	mov	r4,r2
10006154:	1021883a 	mov	r16,r2
10006158:	000f2440 	call	1000f244 <__floatsidf>
1000615c:	d9000f17 	ldw	r4,60(sp)
10006160:	d9401017 	ldw	r5,64(sp)
10006164:	100d883a 	mov	r6,r2
10006168:	180f883a 	mov	r7,r3
1000616c:	000e8c80 	call	1000e8c8 <__subdf3>
10006170:	1829883a 	mov	r20,r3
10006174:	d8c00717 	ldw	r3,28(sp)
10006178:	84000c04 	addi	r16,r16,48
1000617c:	1023883a 	mov	r17,r2
10006180:	1c000005 	stb	r16,0(r3)
10006184:	db001617 	ldw	r12,88(sp)
10006188:	00800044 	movi	r2,1
1000618c:	60802226 	beq	r12,r2,10006218 <_dtoa_r+0x1424>
10006190:	d9c00717 	ldw	r7,28(sp)
10006194:	8805883a 	mov	r2,r17
10006198:	b82b883a 	mov	r21,r23
1000619c:	3b19883a 	add	r12,r7,r12
100061a0:	6023883a 	mov	r17,r12
100061a4:	a007883a 	mov	r3,r20
100061a8:	dc800f15 	stw	r18,60(sp)
100061ac:	000d883a 	mov	r6,zero
100061b0:	01d00934 	movhi	r7,16420
100061b4:	1009883a 	mov	r4,r2
100061b8:	180b883a 	mov	r5,r3
100061bc:	000e05c0 	call	1000e05c <__muldf3>
100061c0:	180b883a 	mov	r5,r3
100061c4:	1009883a 	mov	r4,r2
100061c8:	1829883a 	mov	r20,r3
100061cc:	1025883a 	mov	r18,r2
100061d0:	000f1c40 	call	1000f1c4 <__fixdfsi>
100061d4:	1009883a 	mov	r4,r2
100061d8:	1021883a 	mov	r16,r2
100061dc:	000f2440 	call	1000f244 <__floatsidf>
100061e0:	100d883a 	mov	r6,r2
100061e4:	180f883a 	mov	r7,r3
100061e8:	9009883a 	mov	r4,r18
100061ec:	a00b883a 	mov	r5,r20
100061f0:	84000c04 	addi	r16,r16,48
100061f4:	000e8c80 	call	1000e8c8 <__subdf3>
100061f8:	ad400044 	addi	r21,r21,1
100061fc:	ac3fffc5 	stb	r16,-1(r21)
10006200:	ac7fea1e 	bne	r21,r17,100061ac <__alt_data_end+0xf80061ac>
10006204:	1023883a 	mov	r17,r2
10006208:	d8801217 	ldw	r2,72(sp)
1000620c:	dc800f17 	ldw	r18,60(sp)
10006210:	1829883a 	mov	r20,r3
10006214:	b8af883a 	add	r23,r23,r2
10006218:	d9001417 	ldw	r4,80(sp)
1000621c:	d9401517 	ldw	r5,84(sp)
10006220:	000d883a 	mov	r6,zero
10006224:	01cff834 	movhi	r7,16352
10006228:	000cb880 	call	1000cb88 <__adddf3>
1000622c:	880d883a 	mov	r6,r17
10006230:	a00f883a 	mov	r7,r20
10006234:	1009883a 	mov	r4,r2
10006238:	180b883a 	mov	r5,r3
1000623c:	000df680 	call	1000df68 <__ledf2>
10006240:	10003e0e 	bge	r2,zero,1000633c <_dtoa_r+0x1548>
10006244:	d9001317 	ldw	r4,76(sp)
10006248:	bd3fffc3 	ldbu	r20,-1(r23)
1000624c:	d9000515 	stw	r4,20(sp)
10006250:	003d3b06 	br	10005740 <__alt_data_end+0xf8005740>
10006254:	0027883a 	mov	r19,zero
10006258:	003f1b06 	br	10005ec8 <__alt_data_end+0xf8005ec8>
1000625c:	d8800817 	ldw	r2,32(sp)
10006260:	11e9c83a 	sub	r20,r2,r7
10006264:	0005883a 	mov	r2,zero
10006268:	003d5406 	br	100057bc <__alt_data_end+0xf80057bc>
1000626c:	00800044 	movi	r2,1
10006270:	003dc706 	br	10005990 <__alt_data_end+0xf8005990>
10006274:	d8c00217 	ldw	r3,8(sp)
10006278:	00800d84 	movi	r2,54
1000627c:	dd400a17 	ldw	r21,40(sp)
10006280:	10c5c83a 	sub	r2,r2,r3
10006284:	dd000817 	ldw	r20,32(sp)
10006288:	003d4c06 	br	100057bc <__alt_data_end+0xf80057bc>
1000628c:	dc800f15 	stw	r18,60(sp)
10006290:	dcc01015 	stw	r19,64(sp)
10006294:	04000084 	movi	r16,2
10006298:	003bed06 	br	10005250 <__alt_data_end+0xf8005250>
1000629c:	d9000617 	ldw	r4,24(sp)
100062a0:	203f0d26 	beq	r4,zero,10005ed8 <__alt_data_end+0xf8005ed8>
100062a4:	d9800c17 	ldw	r6,48(sp)
100062a8:	01bcab0e 	bge	zero,r6,10005558 <__alt_data_end+0xf8005558>
100062ac:	d9401017 	ldw	r5,64(sp)
100062b0:	d9000f17 	ldw	r4,60(sp)
100062b4:	000d883a 	mov	r6,zero
100062b8:	01d00934 	movhi	r7,16420
100062bc:	000e05c0 	call	1000e05c <__muldf3>
100062c0:	81000044 	addi	r4,r16,1
100062c4:	d8800f15 	stw	r2,60(sp)
100062c8:	d8c01015 	stw	r3,64(sp)
100062cc:	000f2440 	call	1000f244 <__floatsidf>
100062d0:	d9800f17 	ldw	r6,60(sp)
100062d4:	d9c01017 	ldw	r7,64(sp)
100062d8:	1009883a 	mov	r4,r2
100062dc:	180b883a 	mov	r5,r3
100062e0:	000e05c0 	call	1000e05c <__muldf3>
100062e4:	01d00734 	movhi	r7,16412
100062e8:	000d883a 	mov	r6,zero
100062ec:	1009883a 	mov	r4,r2
100062f0:	180b883a 	mov	r5,r3
100062f4:	000cb880 	call	1000cb88 <__adddf3>
100062f8:	d9c00517 	ldw	r7,20(sp)
100062fc:	047f3034 	movhi	r17,64704
10006300:	1021883a 	mov	r16,r2
10006304:	39ffffc4 	addi	r7,r7,-1
10006308:	d9c01315 	stw	r7,76(sp)
1000630c:	1c63883a 	add	r17,r3,r17
10006310:	db000c17 	ldw	r12,48(sp)
10006314:	003bea06 	br	100052c0 <__alt_data_end+0xf80052c0>
10006318:	dc000915 	stw	r16,36(sp)
1000631c:	003e0e06 	br	10005b58 <__alt_data_end+0xf8005b58>
10006320:	01000e44 	movi	r4,57
10006324:	8825883a 	mov	r18,r17
10006328:	9dc00044 	addi	r23,r19,1
1000632c:	99000005 	stb	r4,0(r19)
10006330:	a023883a 	mov	r17,r20
10006334:	dc000915 	stw	r16,36(sp)
10006338:	003da406 	br	100059cc <__alt_data_end+0xf80059cc>
1000633c:	d9801417 	ldw	r6,80(sp)
10006340:	d9c01517 	ldw	r7,84(sp)
10006344:	0009883a 	mov	r4,zero
10006348:	014ff834 	movhi	r5,16352
1000634c:	000e8c80 	call	1000e8c8 <__subdf3>
10006350:	880d883a 	mov	r6,r17
10006354:	a00f883a 	mov	r7,r20
10006358:	1009883a 	mov	r4,r2
1000635c:	180b883a 	mov	r5,r3
10006360:	000de8c0 	call	1000de8c <__gedf2>
10006364:	00bc7c0e 	bge	zero,r2,10005558 <__alt_data_end+0xf8005558>
10006368:	01000c04 	movi	r4,48
1000636c:	00000106 	br	10006374 <_dtoa_r+0x1580>
10006370:	102f883a 	mov	r23,r2
10006374:	b8bfffc4 	addi	r2,r23,-1
10006378:	10c00007 	ldb	r3,0(r2)
1000637c:	193ffc26 	beq	r3,r4,10006370 <__alt_data_end+0xf8006370>
10006380:	d9801317 	ldw	r6,76(sp)
10006384:	d9800515 	stw	r6,20(sp)
10006388:	003c4406 	br	1000549c <__alt_data_end+0xf800549c>
1000638c:	d9801317 	ldw	r6,76(sp)
10006390:	d9800515 	stw	r6,20(sp)
10006394:	003cea06 	br	10005740 <__alt_data_end+0xf8005740>
10006398:	dd800f17 	ldw	r22,60(sp)
1000639c:	dcc01017 	ldw	r19,64(sp)
100063a0:	dc801217 	ldw	r18,72(sp)
100063a4:	003c6c06 	br	10005558 <__alt_data_end+0xf8005558>
100063a8:	903e031e 	bne	r18,zero,10005bb8 <__alt_data_end+0xf8005bb8>
100063ac:	003ebb06 	br	10005e9c <__alt_data_end+0xf8005e9c>
100063b0:	103e6c1e 	bne	r2,zero,10005d64 <__alt_data_end+0xf8005d64>
100063b4:	4080004c 	andi	r2,r8,1
100063b8:	103e6a26 	beq	r2,zero,10005d64 <__alt_data_end+0xf8005d64>
100063bc:	003e6606 	br	10005d58 <__alt_data_end+0xf8005d58>
100063c0:	d8c00317 	ldw	r3,12(sp)
100063c4:	00800084 	movi	r2,2
100063c8:	10c02916 	blt	r2,r3,10006470 <_dtoa_r+0x167c>
100063cc:	d9000c17 	ldw	r4,48(sp)
100063d0:	003e8806 	br	10005df4 <__alt_data_end+0xf8005df4>
100063d4:	04000084 	movi	r16,2
100063d8:	003b9d06 	br	10005250 <__alt_data_end+0xf8005250>
100063dc:	d9001317 	ldw	r4,76(sp)
100063e0:	d9000515 	stw	r4,20(sp)
100063e4:	003cd606 	br	10005740 <__alt_data_end+0xf8005740>
100063e8:	d8801317 	ldw	r2,76(sp)
100063ec:	d8800515 	stw	r2,20(sp)
100063f0:	003c2a06 	br	1000549c <__alt_data_end+0xf800549c>
100063f4:	d9800317 	ldw	r6,12(sp)
100063f8:	00800084 	movi	r2,2
100063fc:	11801516 	blt	r2,r6,10006454 <_dtoa_r+0x1660>
10006400:	d9c00c17 	ldw	r7,48(sp)
10006404:	d9c00615 	stw	r7,24(sp)
10006408:	003df706 	br	10005be8 <__alt_data_end+0xf8005be8>
1000640c:	193d3926 	beq	r3,r4,100058f4 <__alt_data_end+0xf80058f4>
10006410:	00c00f04 	movi	r3,60
10006414:	1885c83a 	sub	r2,r3,r2
10006418:	003ddf06 	br	10005b98 <__alt_data_end+0xf8005b98>
1000641c:	e009883a 	mov	r4,fp
10006420:	e0001115 	stw	zero,68(fp)
10006424:	000b883a 	mov	r5,zero
10006428:	00084ac0 	call	100084ac <_Balloc>
1000642c:	d8800715 	stw	r2,28(sp)
10006430:	d8c00717 	ldw	r3,28(sp)
10006434:	00bfffc4 	movi	r2,-1
10006438:	01000044 	movi	r4,1
1000643c:	d8800c15 	stw	r2,48(sp)
10006440:	e0c01015 	stw	r3,64(fp)
10006444:	d9000b15 	stw	r4,44(sp)
10006448:	d8800615 	stw	r2,24(sp)
1000644c:	d8002215 	stw	zero,136(sp)
10006450:	003c4106 	br	10005558 <__alt_data_end+0xf8005558>
10006454:	d8c00c17 	ldw	r3,48(sp)
10006458:	d8c00615 	stw	r3,24(sp)
1000645c:	003e7006 	br	10005e20 <__alt_data_end+0xf8005e20>
10006460:	04400044 	movi	r17,1
10006464:	003b2006 	br	100050e8 <__alt_data_end+0xf80050e8>
10006468:	000b883a 	mov	r5,zero
1000646c:	003b3d06 	br	10005164 <__alt_data_end+0xf8005164>
10006470:	d8800c17 	ldw	r2,48(sp)
10006474:	d8800615 	stw	r2,24(sp)
10006478:	003e6906 	br	10005e20 <__alt_data_end+0xf8005e20>

1000647c <__sflush_r>:
1000647c:	2880030b 	ldhu	r2,12(r5)
10006480:	defffb04 	addi	sp,sp,-20
10006484:	dcc00315 	stw	r19,12(sp)
10006488:	dc400115 	stw	r17,4(sp)
1000648c:	dfc00415 	stw	ra,16(sp)
10006490:	dc800215 	stw	r18,8(sp)
10006494:	dc000015 	stw	r16,0(sp)
10006498:	10c0020c 	andi	r3,r2,8
1000649c:	2823883a 	mov	r17,r5
100064a0:	2027883a 	mov	r19,r4
100064a4:	1800311e 	bne	r3,zero,1000656c <__sflush_r+0xf0>
100064a8:	28c00117 	ldw	r3,4(r5)
100064ac:	10820014 	ori	r2,r2,2048
100064b0:	2880030d 	sth	r2,12(r5)
100064b4:	00c04b0e 	bge	zero,r3,100065e4 <__sflush_r+0x168>
100064b8:	8a000a17 	ldw	r8,40(r17)
100064bc:	40002326 	beq	r8,zero,1000654c <__sflush_r+0xd0>
100064c0:	9c000017 	ldw	r16,0(r19)
100064c4:	10c4000c 	andi	r3,r2,4096
100064c8:	98000015 	stw	zero,0(r19)
100064cc:	18004826 	beq	r3,zero,100065f0 <__sflush_r+0x174>
100064d0:	89801417 	ldw	r6,80(r17)
100064d4:	10c0010c 	andi	r3,r2,4
100064d8:	18000626 	beq	r3,zero,100064f4 <__sflush_r+0x78>
100064dc:	88c00117 	ldw	r3,4(r17)
100064e0:	88800c17 	ldw	r2,48(r17)
100064e4:	30cdc83a 	sub	r6,r6,r3
100064e8:	10000226 	beq	r2,zero,100064f4 <__sflush_r+0x78>
100064ec:	88800f17 	ldw	r2,60(r17)
100064f0:	308dc83a 	sub	r6,r6,r2
100064f4:	89400717 	ldw	r5,28(r17)
100064f8:	000f883a 	mov	r7,zero
100064fc:	9809883a 	mov	r4,r19
10006500:	403ee83a 	callr	r8
10006504:	00ffffc4 	movi	r3,-1
10006508:	10c04426 	beq	r2,r3,1000661c <__sflush_r+0x1a0>
1000650c:	88c0030b 	ldhu	r3,12(r17)
10006510:	89000417 	ldw	r4,16(r17)
10006514:	88000115 	stw	zero,4(r17)
10006518:	197dffcc 	andi	r5,r3,63487
1000651c:	8940030d 	sth	r5,12(r17)
10006520:	89000015 	stw	r4,0(r17)
10006524:	18c4000c 	andi	r3,r3,4096
10006528:	18002c1e 	bne	r3,zero,100065dc <__sflush_r+0x160>
1000652c:	89400c17 	ldw	r5,48(r17)
10006530:	9c000015 	stw	r16,0(r19)
10006534:	28000526 	beq	r5,zero,1000654c <__sflush_r+0xd0>
10006538:	88801004 	addi	r2,r17,64
1000653c:	28800226 	beq	r5,r2,10006548 <__sflush_r+0xcc>
10006540:	9809883a 	mov	r4,r19
10006544:	0006bf80 	call	10006bf8 <_free_r>
10006548:	88000c15 	stw	zero,48(r17)
1000654c:	0005883a 	mov	r2,zero
10006550:	dfc00417 	ldw	ra,16(sp)
10006554:	dcc00317 	ldw	r19,12(sp)
10006558:	dc800217 	ldw	r18,8(sp)
1000655c:	dc400117 	ldw	r17,4(sp)
10006560:	dc000017 	ldw	r16,0(sp)
10006564:	dec00504 	addi	sp,sp,20
10006568:	f800283a 	ret
1000656c:	2c800417 	ldw	r18,16(r5)
10006570:	903ff626 	beq	r18,zero,1000654c <__alt_data_end+0xf800654c>
10006574:	2c000017 	ldw	r16,0(r5)
10006578:	108000cc 	andi	r2,r2,3
1000657c:	2c800015 	stw	r18,0(r5)
10006580:	84a1c83a 	sub	r16,r16,r18
10006584:	1000131e 	bne	r2,zero,100065d4 <__sflush_r+0x158>
10006588:	28800517 	ldw	r2,20(r5)
1000658c:	88800215 	stw	r2,8(r17)
10006590:	04000316 	blt	zero,r16,100065a0 <__sflush_r+0x124>
10006594:	003fed06 	br	1000654c <__alt_data_end+0xf800654c>
10006598:	90a5883a 	add	r18,r18,r2
1000659c:	043feb0e 	bge	zero,r16,1000654c <__alt_data_end+0xf800654c>
100065a0:	88800917 	ldw	r2,36(r17)
100065a4:	89400717 	ldw	r5,28(r17)
100065a8:	800f883a 	mov	r7,r16
100065ac:	900d883a 	mov	r6,r18
100065b0:	9809883a 	mov	r4,r19
100065b4:	103ee83a 	callr	r2
100065b8:	80a1c83a 	sub	r16,r16,r2
100065bc:	00bff616 	blt	zero,r2,10006598 <__alt_data_end+0xf8006598>
100065c0:	88c0030b 	ldhu	r3,12(r17)
100065c4:	00bfffc4 	movi	r2,-1
100065c8:	18c01014 	ori	r3,r3,64
100065cc:	88c0030d 	sth	r3,12(r17)
100065d0:	003fdf06 	br	10006550 <__alt_data_end+0xf8006550>
100065d4:	0005883a 	mov	r2,zero
100065d8:	003fec06 	br	1000658c <__alt_data_end+0xf800658c>
100065dc:	88801415 	stw	r2,80(r17)
100065e0:	003fd206 	br	1000652c <__alt_data_end+0xf800652c>
100065e4:	28c00f17 	ldw	r3,60(r5)
100065e8:	00ffb316 	blt	zero,r3,100064b8 <__alt_data_end+0xf80064b8>
100065ec:	003fd706 	br	1000654c <__alt_data_end+0xf800654c>
100065f0:	89400717 	ldw	r5,28(r17)
100065f4:	000d883a 	mov	r6,zero
100065f8:	01c00044 	movi	r7,1
100065fc:	9809883a 	mov	r4,r19
10006600:	403ee83a 	callr	r8
10006604:	100d883a 	mov	r6,r2
10006608:	00bfffc4 	movi	r2,-1
1000660c:	30801426 	beq	r6,r2,10006660 <__sflush_r+0x1e4>
10006610:	8880030b 	ldhu	r2,12(r17)
10006614:	8a000a17 	ldw	r8,40(r17)
10006618:	003fae06 	br	100064d4 <__alt_data_end+0xf80064d4>
1000661c:	98c00017 	ldw	r3,0(r19)
10006620:	183fba26 	beq	r3,zero,1000650c <__alt_data_end+0xf800650c>
10006624:	01000744 	movi	r4,29
10006628:	19000626 	beq	r3,r4,10006644 <__sflush_r+0x1c8>
1000662c:	01000584 	movi	r4,22
10006630:	19000426 	beq	r3,r4,10006644 <__sflush_r+0x1c8>
10006634:	88c0030b 	ldhu	r3,12(r17)
10006638:	18c01014 	ori	r3,r3,64
1000663c:	88c0030d 	sth	r3,12(r17)
10006640:	003fc306 	br	10006550 <__alt_data_end+0xf8006550>
10006644:	8880030b 	ldhu	r2,12(r17)
10006648:	88c00417 	ldw	r3,16(r17)
1000664c:	88000115 	stw	zero,4(r17)
10006650:	10bdffcc 	andi	r2,r2,63487
10006654:	8880030d 	sth	r2,12(r17)
10006658:	88c00015 	stw	r3,0(r17)
1000665c:	003fb306 	br	1000652c <__alt_data_end+0xf800652c>
10006660:	98800017 	ldw	r2,0(r19)
10006664:	103fea26 	beq	r2,zero,10006610 <__alt_data_end+0xf8006610>
10006668:	00c00744 	movi	r3,29
1000666c:	10c00226 	beq	r2,r3,10006678 <__sflush_r+0x1fc>
10006670:	00c00584 	movi	r3,22
10006674:	10c0031e 	bne	r2,r3,10006684 <__sflush_r+0x208>
10006678:	9c000015 	stw	r16,0(r19)
1000667c:	0005883a 	mov	r2,zero
10006680:	003fb306 	br	10006550 <__alt_data_end+0xf8006550>
10006684:	88c0030b 	ldhu	r3,12(r17)
10006688:	3005883a 	mov	r2,r6
1000668c:	18c01014 	ori	r3,r3,64
10006690:	88c0030d 	sth	r3,12(r17)
10006694:	003fae06 	br	10006550 <__alt_data_end+0xf8006550>

10006698 <_fflush_r>:
10006698:	defffd04 	addi	sp,sp,-12
1000669c:	dc000115 	stw	r16,4(sp)
100066a0:	dfc00215 	stw	ra,8(sp)
100066a4:	2021883a 	mov	r16,r4
100066a8:	20000226 	beq	r4,zero,100066b4 <_fflush_r+0x1c>
100066ac:	20800e17 	ldw	r2,56(r4)
100066b0:	10000c26 	beq	r2,zero,100066e4 <_fflush_r+0x4c>
100066b4:	2880030f 	ldh	r2,12(r5)
100066b8:	1000051e 	bne	r2,zero,100066d0 <_fflush_r+0x38>
100066bc:	0005883a 	mov	r2,zero
100066c0:	dfc00217 	ldw	ra,8(sp)
100066c4:	dc000117 	ldw	r16,4(sp)
100066c8:	dec00304 	addi	sp,sp,12
100066cc:	f800283a 	ret
100066d0:	8009883a 	mov	r4,r16
100066d4:	dfc00217 	ldw	ra,8(sp)
100066d8:	dc000117 	ldw	r16,4(sp)
100066dc:	dec00304 	addi	sp,sp,12
100066e0:	000647c1 	jmpi	1000647c <__sflush_r>
100066e4:	d9400015 	stw	r5,0(sp)
100066e8:	0006a840 	call	10006a84 <__sinit>
100066ec:	d9400017 	ldw	r5,0(sp)
100066f0:	003ff006 	br	100066b4 <__alt_data_end+0xf80066b4>

100066f4 <fflush>:
100066f4:	20000526 	beq	r4,zero,1000670c <fflush+0x18>
100066f8:	00840074 	movhi	r2,4097
100066fc:	10906f04 	addi	r2,r2,16828
10006700:	200b883a 	mov	r5,r4
10006704:	11000017 	ldw	r4,0(r2)
10006708:	00066981 	jmpi	10006698 <_fflush_r>
1000670c:	00840074 	movhi	r2,4097
10006710:	10906e04 	addi	r2,r2,16824
10006714:	11000017 	ldw	r4,0(r2)
10006718:	01440034 	movhi	r5,4096
1000671c:	2959a604 	addi	r5,r5,26264
10006720:	00074941 	jmpi	10007494 <_fwalk_reent>

10006724 <__fp_unlock>:
10006724:	0005883a 	mov	r2,zero
10006728:	f800283a 	ret

1000672c <_cleanup_r>:
1000672c:	01440074 	movhi	r5,4097
10006730:	296d8c04 	addi	r5,r5,-18896
10006734:	00074941 	jmpi	10007494 <_fwalk_reent>

10006738 <__sinit.part.1>:
10006738:	defff704 	addi	sp,sp,-36
1000673c:	00c40034 	movhi	r3,4096
10006740:	dfc00815 	stw	ra,32(sp)
10006744:	ddc00715 	stw	r23,28(sp)
10006748:	dd800615 	stw	r22,24(sp)
1000674c:	dd400515 	stw	r21,20(sp)
10006750:	dd000415 	stw	r20,16(sp)
10006754:	dcc00315 	stw	r19,12(sp)
10006758:	dc800215 	stw	r18,8(sp)
1000675c:	dc400115 	stw	r17,4(sp)
10006760:	dc000015 	stw	r16,0(sp)
10006764:	18d9cb04 	addi	r3,r3,26412
10006768:	24000117 	ldw	r16,4(r4)
1000676c:	20c00f15 	stw	r3,60(r4)
10006770:	2080bb04 	addi	r2,r4,748
10006774:	00c000c4 	movi	r3,3
10006778:	20c0b915 	stw	r3,740(r4)
1000677c:	2080ba15 	stw	r2,744(r4)
10006780:	2000b815 	stw	zero,736(r4)
10006784:	05c00204 	movi	r23,8
10006788:	00800104 	movi	r2,4
1000678c:	2025883a 	mov	r18,r4
10006790:	b80d883a 	mov	r6,r23
10006794:	81001704 	addi	r4,r16,92
10006798:	000b883a 	mov	r5,zero
1000679c:	80000015 	stw	zero,0(r16)
100067a0:	80000115 	stw	zero,4(r16)
100067a4:	80000215 	stw	zero,8(r16)
100067a8:	8080030d 	sth	r2,12(r16)
100067ac:	80001915 	stw	zero,100(r16)
100067b0:	8000038d 	sth	zero,14(r16)
100067b4:	80000415 	stw	zero,16(r16)
100067b8:	80000515 	stw	zero,20(r16)
100067bc:	80000615 	stw	zero,24(r16)
100067c0:	00083840 	call	10008384 <memset>
100067c4:	05840074 	movhi	r22,4097
100067c8:	94400217 	ldw	r17,8(r18)
100067cc:	05440074 	movhi	r21,4097
100067d0:	05040074 	movhi	r20,4097
100067d4:	04c40074 	movhi	r19,4097
100067d8:	b5a6e404 	addi	r22,r22,-25712
100067dc:	ad66fb04 	addi	r21,r21,-25620
100067e0:	a5271a04 	addi	r20,r20,-25496
100067e4:	9ce73104 	addi	r19,r19,-25404
100067e8:	85800815 	stw	r22,32(r16)
100067ec:	85400915 	stw	r21,36(r16)
100067f0:	85000a15 	stw	r20,40(r16)
100067f4:	84c00b15 	stw	r19,44(r16)
100067f8:	84000715 	stw	r16,28(r16)
100067fc:	00800284 	movi	r2,10
10006800:	8880030d 	sth	r2,12(r17)
10006804:	00800044 	movi	r2,1
10006808:	b80d883a 	mov	r6,r23
1000680c:	89001704 	addi	r4,r17,92
10006810:	000b883a 	mov	r5,zero
10006814:	88000015 	stw	zero,0(r17)
10006818:	88000115 	stw	zero,4(r17)
1000681c:	88000215 	stw	zero,8(r17)
10006820:	88001915 	stw	zero,100(r17)
10006824:	8880038d 	sth	r2,14(r17)
10006828:	88000415 	stw	zero,16(r17)
1000682c:	88000515 	stw	zero,20(r17)
10006830:	88000615 	stw	zero,24(r17)
10006834:	00083840 	call	10008384 <memset>
10006838:	94000317 	ldw	r16,12(r18)
1000683c:	00800484 	movi	r2,18
10006840:	8c400715 	stw	r17,28(r17)
10006844:	8d800815 	stw	r22,32(r17)
10006848:	8d400915 	stw	r21,36(r17)
1000684c:	8d000a15 	stw	r20,40(r17)
10006850:	8cc00b15 	stw	r19,44(r17)
10006854:	8080030d 	sth	r2,12(r16)
10006858:	00800084 	movi	r2,2
1000685c:	80000015 	stw	zero,0(r16)
10006860:	80000115 	stw	zero,4(r16)
10006864:	80000215 	stw	zero,8(r16)
10006868:	80001915 	stw	zero,100(r16)
1000686c:	8080038d 	sth	r2,14(r16)
10006870:	80000415 	stw	zero,16(r16)
10006874:	80000515 	stw	zero,20(r16)
10006878:	80000615 	stw	zero,24(r16)
1000687c:	b80d883a 	mov	r6,r23
10006880:	000b883a 	mov	r5,zero
10006884:	81001704 	addi	r4,r16,92
10006888:	00083840 	call	10008384 <memset>
1000688c:	00800044 	movi	r2,1
10006890:	84000715 	stw	r16,28(r16)
10006894:	85800815 	stw	r22,32(r16)
10006898:	85400915 	stw	r21,36(r16)
1000689c:	85000a15 	stw	r20,40(r16)
100068a0:	84c00b15 	stw	r19,44(r16)
100068a4:	90800e15 	stw	r2,56(r18)
100068a8:	dfc00817 	ldw	ra,32(sp)
100068ac:	ddc00717 	ldw	r23,28(sp)
100068b0:	dd800617 	ldw	r22,24(sp)
100068b4:	dd400517 	ldw	r21,20(sp)
100068b8:	dd000417 	ldw	r20,16(sp)
100068bc:	dcc00317 	ldw	r19,12(sp)
100068c0:	dc800217 	ldw	r18,8(sp)
100068c4:	dc400117 	ldw	r17,4(sp)
100068c8:	dc000017 	ldw	r16,0(sp)
100068cc:	dec00904 	addi	sp,sp,36
100068d0:	f800283a 	ret

100068d4 <__fp_lock>:
100068d4:	0005883a 	mov	r2,zero
100068d8:	f800283a 	ret

100068dc <__sfmoreglue>:
100068dc:	defffc04 	addi	sp,sp,-16
100068e0:	dc800215 	stw	r18,8(sp)
100068e4:	2825883a 	mov	r18,r5
100068e8:	dc000015 	stw	r16,0(sp)
100068ec:	01401a04 	movi	r5,104
100068f0:	2021883a 	mov	r16,r4
100068f4:	913fffc4 	addi	r4,r18,-1
100068f8:	dfc00315 	stw	ra,12(sp)
100068fc:	dc400115 	stw	r17,4(sp)
10006900:	000cb600 	call	1000cb60 <__mulsi3>
10006904:	8009883a 	mov	r4,r16
10006908:	11401d04 	addi	r5,r2,116
1000690c:	1023883a 	mov	r17,r2
10006910:	00077f00 	call	100077f0 <_malloc_r>
10006914:	1021883a 	mov	r16,r2
10006918:	10000726 	beq	r2,zero,10006938 <__sfmoreglue+0x5c>
1000691c:	11000304 	addi	r4,r2,12
10006920:	10000015 	stw	zero,0(r2)
10006924:	14800115 	stw	r18,4(r2)
10006928:	11000215 	stw	r4,8(r2)
1000692c:	89801a04 	addi	r6,r17,104
10006930:	000b883a 	mov	r5,zero
10006934:	00083840 	call	10008384 <memset>
10006938:	8005883a 	mov	r2,r16
1000693c:	dfc00317 	ldw	ra,12(sp)
10006940:	dc800217 	ldw	r18,8(sp)
10006944:	dc400117 	ldw	r17,4(sp)
10006948:	dc000017 	ldw	r16,0(sp)
1000694c:	dec00404 	addi	sp,sp,16
10006950:	f800283a 	ret

10006954 <__sfp>:
10006954:	defffb04 	addi	sp,sp,-20
10006958:	dc000015 	stw	r16,0(sp)
1000695c:	04040074 	movhi	r16,4097
10006960:	84106e04 	addi	r16,r16,16824
10006964:	dcc00315 	stw	r19,12(sp)
10006968:	2027883a 	mov	r19,r4
1000696c:	81000017 	ldw	r4,0(r16)
10006970:	dfc00415 	stw	ra,16(sp)
10006974:	dc800215 	stw	r18,8(sp)
10006978:	20800e17 	ldw	r2,56(r4)
1000697c:	dc400115 	stw	r17,4(sp)
10006980:	1000021e 	bne	r2,zero,1000698c <__sfp+0x38>
10006984:	00067380 	call	10006738 <__sinit.part.1>
10006988:	81000017 	ldw	r4,0(r16)
1000698c:	2480b804 	addi	r18,r4,736
10006990:	047fffc4 	movi	r17,-1
10006994:	91000117 	ldw	r4,4(r18)
10006998:	94000217 	ldw	r16,8(r18)
1000699c:	213fffc4 	addi	r4,r4,-1
100069a0:	20000a16 	blt	r4,zero,100069cc <__sfp+0x78>
100069a4:	8080030f 	ldh	r2,12(r16)
100069a8:	10000c26 	beq	r2,zero,100069dc <__sfp+0x88>
100069ac:	80c01d04 	addi	r3,r16,116
100069b0:	00000206 	br	100069bc <__sfp+0x68>
100069b4:	18bfe60f 	ldh	r2,-104(r3)
100069b8:	10000826 	beq	r2,zero,100069dc <__sfp+0x88>
100069bc:	213fffc4 	addi	r4,r4,-1
100069c0:	1c3ffd04 	addi	r16,r3,-12
100069c4:	18c01a04 	addi	r3,r3,104
100069c8:	247ffa1e 	bne	r4,r17,100069b4 <__alt_data_end+0xf80069b4>
100069cc:	90800017 	ldw	r2,0(r18)
100069d0:	10001d26 	beq	r2,zero,10006a48 <__sfp+0xf4>
100069d4:	1025883a 	mov	r18,r2
100069d8:	003fee06 	br	10006994 <__alt_data_end+0xf8006994>
100069dc:	00bfffc4 	movi	r2,-1
100069e0:	8080038d 	sth	r2,14(r16)
100069e4:	00800044 	movi	r2,1
100069e8:	8080030d 	sth	r2,12(r16)
100069ec:	80001915 	stw	zero,100(r16)
100069f0:	80000015 	stw	zero,0(r16)
100069f4:	80000215 	stw	zero,8(r16)
100069f8:	80000115 	stw	zero,4(r16)
100069fc:	80000415 	stw	zero,16(r16)
10006a00:	80000515 	stw	zero,20(r16)
10006a04:	80000615 	stw	zero,24(r16)
10006a08:	01800204 	movi	r6,8
10006a0c:	000b883a 	mov	r5,zero
10006a10:	81001704 	addi	r4,r16,92
10006a14:	00083840 	call	10008384 <memset>
10006a18:	8005883a 	mov	r2,r16
10006a1c:	80000c15 	stw	zero,48(r16)
10006a20:	80000d15 	stw	zero,52(r16)
10006a24:	80001115 	stw	zero,68(r16)
10006a28:	80001215 	stw	zero,72(r16)
10006a2c:	dfc00417 	ldw	ra,16(sp)
10006a30:	dcc00317 	ldw	r19,12(sp)
10006a34:	dc800217 	ldw	r18,8(sp)
10006a38:	dc400117 	ldw	r17,4(sp)
10006a3c:	dc000017 	ldw	r16,0(sp)
10006a40:	dec00504 	addi	sp,sp,20
10006a44:	f800283a 	ret
10006a48:	01400104 	movi	r5,4
10006a4c:	9809883a 	mov	r4,r19
10006a50:	00068dc0 	call	100068dc <__sfmoreglue>
10006a54:	90800015 	stw	r2,0(r18)
10006a58:	103fde1e 	bne	r2,zero,100069d4 <__alt_data_end+0xf80069d4>
10006a5c:	00800304 	movi	r2,12
10006a60:	98800015 	stw	r2,0(r19)
10006a64:	0005883a 	mov	r2,zero
10006a68:	003ff006 	br	10006a2c <__alt_data_end+0xf8006a2c>

10006a6c <_cleanup>:
10006a6c:	00840074 	movhi	r2,4097
10006a70:	10906e04 	addi	r2,r2,16824
10006a74:	11000017 	ldw	r4,0(r2)
10006a78:	01440074 	movhi	r5,4097
10006a7c:	296d8c04 	addi	r5,r5,-18896
10006a80:	00074941 	jmpi	10007494 <_fwalk_reent>

10006a84 <__sinit>:
10006a84:	20800e17 	ldw	r2,56(r4)
10006a88:	10000126 	beq	r2,zero,10006a90 <__sinit+0xc>
10006a8c:	f800283a 	ret
10006a90:	00067381 	jmpi	10006738 <__sinit.part.1>

10006a94 <__sfp_lock_acquire>:
10006a94:	f800283a 	ret

10006a98 <__sfp_lock_release>:
10006a98:	f800283a 	ret

10006a9c <__sinit_lock_acquire>:
10006a9c:	f800283a 	ret

10006aa0 <__sinit_lock_release>:
10006aa0:	f800283a 	ret

10006aa4 <__fp_lock_all>:
10006aa4:	00840074 	movhi	r2,4097
10006aa8:	10906f04 	addi	r2,r2,16828
10006aac:	11000017 	ldw	r4,0(r2)
10006ab0:	01440034 	movhi	r5,4096
10006ab4:	295a3504 	addi	r5,r5,26836
10006ab8:	00073d01 	jmpi	100073d0 <_fwalk>

10006abc <__fp_unlock_all>:
10006abc:	00840074 	movhi	r2,4097
10006ac0:	10906f04 	addi	r2,r2,16828
10006ac4:	11000017 	ldw	r4,0(r2)
10006ac8:	01440034 	movhi	r5,4096
10006acc:	2959c904 	addi	r5,r5,26404
10006ad0:	00073d01 	jmpi	100073d0 <_fwalk>

10006ad4 <_malloc_trim_r>:
10006ad4:	defffb04 	addi	sp,sp,-20
10006ad8:	dcc00315 	stw	r19,12(sp)
10006adc:	04c40074 	movhi	r19,4097
10006ae0:	dc800215 	stw	r18,8(sp)
10006ae4:	dc400115 	stw	r17,4(sp)
10006ae8:	dc000015 	stw	r16,0(sp)
10006aec:	dfc00415 	stw	ra,16(sp)
10006af0:	2821883a 	mov	r16,r5
10006af4:	9ccae904 	addi	r19,r19,11172
10006af8:	2025883a 	mov	r18,r4
10006afc:	000f9c80 	call	1000f9c8 <__malloc_lock>
10006b00:	98800217 	ldw	r2,8(r19)
10006b04:	14400117 	ldw	r17,4(r2)
10006b08:	00bfff04 	movi	r2,-4
10006b0c:	88a2703a 	and	r17,r17,r2
10006b10:	8c21c83a 	sub	r16,r17,r16
10006b14:	8403fbc4 	addi	r16,r16,4079
10006b18:	8020d33a 	srli	r16,r16,12
10006b1c:	0083ffc4 	movi	r2,4095
10006b20:	843fffc4 	addi	r16,r16,-1
10006b24:	8020933a 	slli	r16,r16,12
10006b28:	1400060e 	bge	r2,r16,10006b44 <_malloc_trim_r+0x70>
10006b2c:	000b883a 	mov	r5,zero
10006b30:	9009883a 	mov	r4,r18
10006b34:	0009b3c0 	call	10009b3c <_sbrk_r>
10006b38:	98c00217 	ldw	r3,8(r19)
10006b3c:	1c47883a 	add	r3,r3,r17
10006b40:	10c00a26 	beq	r2,r3,10006b6c <_malloc_trim_r+0x98>
10006b44:	9009883a 	mov	r4,r18
10006b48:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10006b4c:	0005883a 	mov	r2,zero
10006b50:	dfc00417 	ldw	ra,16(sp)
10006b54:	dcc00317 	ldw	r19,12(sp)
10006b58:	dc800217 	ldw	r18,8(sp)
10006b5c:	dc400117 	ldw	r17,4(sp)
10006b60:	dc000017 	ldw	r16,0(sp)
10006b64:	dec00504 	addi	sp,sp,20
10006b68:	f800283a 	ret
10006b6c:	040bc83a 	sub	r5,zero,r16
10006b70:	9009883a 	mov	r4,r18
10006b74:	0009b3c0 	call	10009b3c <_sbrk_r>
10006b78:	00ffffc4 	movi	r3,-1
10006b7c:	10c00d26 	beq	r2,r3,10006bb4 <_malloc_trim_r+0xe0>
10006b80:	00c40074 	movhi	r3,4097
10006b84:	18d74e04 	addi	r3,r3,23864
10006b88:	18800017 	ldw	r2,0(r3)
10006b8c:	99000217 	ldw	r4,8(r19)
10006b90:	8c23c83a 	sub	r17,r17,r16
10006b94:	8c400054 	ori	r17,r17,1
10006b98:	1421c83a 	sub	r16,r2,r16
10006b9c:	24400115 	stw	r17,4(r4)
10006ba0:	9009883a 	mov	r4,r18
10006ba4:	1c000015 	stw	r16,0(r3)
10006ba8:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10006bac:	00800044 	movi	r2,1
10006bb0:	003fe706 	br	10006b50 <__alt_data_end+0xf8006b50>
10006bb4:	000b883a 	mov	r5,zero
10006bb8:	9009883a 	mov	r4,r18
10006bbc:	0009b3c0 	call	10009b3c <_sbrk_r>
10006bc0:	99000217 	ldw	r4,8(r19)
10006bc4:	014003c4 	movi	r5,15
10006bc8:	1107c83a 	sub	r3,r2,r4
10006bcc:	28ffdd0e 	bge	r5,r3,10006b44 <__alt_data_end+0xf8006b44>
10006bd0:	01440074 	movhi	r5,4097
10006bd4:	29507104 	addi	r5,r5,16836
10006bd8:	29400017 	ldw	r5,0(r5)
10006bdc:	18c00054 	ori	r3,r3,1
10006be0:	20c00115 	stw	r3,4(r4)
10006be4:	00c40074 	movhi	r3,4097
10006be8:	1145c83a 	sub	r2,r2,r5
10006bec:	18d74e04 	addi	r3,r3,23864
10006bf0:	18800015 	stw	r2,0(r3)
10006bf4:	003fd306 	br	10006b44 <__alt_data_end+0xf8006b44>

10006bf8 <_free_r>:
10006bf8:	28004126 	beq	r5,zero,10006d00 <_free_r+0x108>
10006bfc:	defffd04 	addi	sp,sp,-12
10006c00:	dc400115 	stw	r17,4(sp)
10006c04:	dc000015 	stw	r16,0(sp)
10006c08:	2023883a 	mov	r17,r4
10006c0c:	2821883a 	mov	r16,r5
10006c10:	dfc00215 	stw	ra,8(sp)
10006c14:	000f9c80 	call	1000f9c8 <__malloc_lock>
10006c18:	81ffff17 	ldw	r7,-4(r16)
10006c1c:	00bfff84 	movi	r2,-2
10006c20:	01040074 	movhi	r4,4097
10006c24:	81bffe04 	addi	r6,r16,-8
10006c28:	3884703a 	and	r2,r7,r2
10006c2c:	210ae904 	addi	r4,r4,11172
10006c30:	308b883a 	add	r5,r6,r2
10006c34:	2a400117 	ldw	r9,4(r5)
10006c38:	22000217 	ldw	r8,8(r4)
10006c3c:	00ffff04 	movi	r3,-4
10006c40:	48c6703a 	and	r3,r9,r3
10006c44:	2a005726 	beq	r5,r8,10006da4 <_free_r+0x1ac>
10006c48:	28c00115 	stw	r3,4(r5)
10006c4c:	39c0004c 	andi	r7,r7,1
10006c50:	3800091e 	bne	r7,zero,10006c78 <_free_r+0x80>
10006c54:	823ffe17 	ldw	r8,-8(r16)
10006c58:	22400204 	addi	r9,r4,8
10006c5c:	320dc83a 	sub	r6,r6,r8
10006c60:	31c00217 	ldw	r7,8(r6)
10006c64:	1205883a 	add	r2,r2,r8
10006c68:	3a406526 	beq	r7,r9,10006e00 <_free_r+0x208>
10006c6c:	32000317 	ldw	r8,12(r6)
10006c70:	3a000315 	stw	r8,12(r7)
10006c74:	41c00215 	stw	r7,8(r8)
10006c78:	28cf883a 	add	r7,r5,r3
10006c7c:	39c00117 	ldw	r7,4(r7)
10006c80:	39c0004c 	andi	r7,r7,1
10006c84:	38003a26 	beq	r7,zero,10006d70 <_free_r+0x178>
10006c88:	10c00054 	ori	r3,r2,1
10006c8c:	30c00115 	stw	r3,4(r6)
10006c90:	3087883a 	add	r3,r6,r2
10006c94:	18800015 	stw	r2,0(r3)
10006c98:	00c07fc4 	movi	r3,511
10006c9c:	18801936 	bltu	r3,r2,10006d04 <_free_r+0x10c>
10006ca0:	1004d0fa 	srli	r2,r2,3
10006ca4:	01c00044 	movi	r7,1
10006ca8:	21400117 	ldw	r5,4(r4)
10006cac:	10c00044 	addi	r3,r2,1
10006cb0:	18c7883a 	add	r3,r3,r3
10006cb4:	1005d0ba 	srai	r2,r2,2
10006cb8:	18c7883a 	add	r3,r3,r3
10006cbc:	18c7883a 	add	r3,r3,r3
10006cc0:	1907883a 	add	r3,r3,r4
10006cc4:	3884983a 	sll	r2,r7,r2
10006cc8:	19c00017 	ldw	r7,0(r3)
10006ccc:	1a3ffe04 	addi	r8,r3,-8
10006cd0:	1144b03a 	or	r2,r2,r5
10006cd4:	32000315 	stw	r8,12(r6)
10006cd8:	31c00215 	stw	r7,8(r6)
10006cdc:	20800115 	stw	r2,4(r4)
10006ce0:	19800015 	stw	r6,0(r3)
10006ce4:	39800315 	stw	r6,12(r7)
10006ce8:	8809883a 	mov	r4,r17
10006cec:	dfc00217 	ldw	ra,8(sp)
10006cf0:	dc400117 	ldw	r17,4(sp)
10006cf4:	dc000017 	ldw	r16,0(sp)
10006cf8:	dec00304 	addi	sp,sp,12
10006cfc:	000f9ec1 	jmpi	1000f9ec <__malloc_unlock>
10006d00:	f800283a 	ret
10006d04:	100ad27a 	srli	r5,r2,9
10006d08:	00c00104 	movi	r3,4
10006d0c:	19404a36 	bltu	r3,r5,10006e38 <_free_r+0x240>
10006d10:	100ad1ba 	srli	r5,r2,6
10006d14:	28c00e44 	addi	r3,r5,57
10006d18:	18c7883a 	add	r3,r3,r3
10006d1c:	29400e04 	addi	r5,r5,56
10006d20:	18c7883a 	add	r3,r3,r3
10006d24:	18c7883a 	add	r3,r3,r3
10006d28:	1909883a 	add	r4,r3,r4
10006d2c:	20c00017 	ldw	r3,0(r4)
10006d30:	01c40074 	movhi	r7,4097
10006d34:	213ffe04 	addi	r4,r4,-8
10006d38:	39cae904 	addi	r7,r7,11172
10006d3c:	20c04426 	beq	r4,r3,10006e50 <_free_r+0x258>
10006d40:	01ffff04 	movi	r7,-4
10006d44:	19400117 	ldw	r5,4(r3)
10006d48:	29ca703a 	and	r5,r5,r7
10006d4c:	1140022e 	bgeu	r2,r5,10006d58 <_free_r+0x160>
10006d50:	18c00217 	ldw	r3,8(r3)
10006d54:	20fffb1e 	bne	r4,r3,10006d44 <__alt_data_end+0xf8006d44>
10006d58:	19000317 	ldw	r4,12(r3)
10006d5c:	31000315 	stw	r4,12(r6)
10006d60:	30c00215 	stw	r3,8(r6)
10006d64:	21800215 	stw	r6,8(r4)
10006d68:	19800315 	stw	r6,12(r3)
10006d6c:	003fde06 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006d70:	29c00217 	ldw	r7,8(r5)
10006d74:	10c5883a 	add	r2,r2,r3
10006d78:	00c40074 	movhi	r3,4097
10006d7c:	18caeb04 	addi	r3,r3,11180
10006d80:	38c03b26 	beq	r7,r3,10006e70 <_free_r+0x278>
10006d84:	2a000317 	ldw	r8,12(r5)
10006d88:	11400054 	ori	r5,r2,1
10006d8c:	3087883a 	add	r3,r6,r2
10006d90:	3a000315 	stw	r8,12(r7)
10006d94:	41c00215 	stw	r7,8(r8)
10006d98:	31400115 	stw	r5,4(r6)
10006d9c:	18800015 	stw	r2,0(r3)
10006da0:	003fbd06 	br	10006c98 <__alt_data_end+0xf8006c98>
10006da4:	39c0004c 	andi	r7,r7,1
10006da8:	10c5883a 	add	r2,r2,r3
10006dac:	3800071e 	bne	r7,zero,10006dcc <_free_r+0x1d4>
10006db0:	81fffe17 	ldw	r7,-8(r16)
10006db4:	31cdc83a 	sub	r6,r6,r7
10006db8:	30c00317 	ldw	r3,12(r6)
10006dbc:	31400217 	ldw	r5,8(r6)
10006dc0:	11c5883a 	add	r2,r2,r7
10006dc4:	28c00315 	stw	r3,12(r5)
10006dc8:	19400215 	stw	r5,8(r3)
10006dcc:	10c00054 	ori	r3,r2,1
10006dd0:	30c00115 	stw	r3,4(r6)
10006dd4:	00c40074 	movhi	r3,4097
10006dd8:	18d07204 	addi	r3,r3,16840
10006ddc:	18c00017 	ldw	r3,0(r3)
10006de0:	21800215 	stw	r6,8(r4)
10006de4:	10ffc036 	bltu	r2,r3,10006ce8 <__alt_data_end+0xf8006ce8>
10006de8:	00840074 	movhi	r2,4097
10006dec:	10974504 	addi	r2,r2,23828
10006df0:	11400017 	ldw	r5,0(r2)
10006df4:	8809883a 	mov	r4,r17
10006df8:	0006ad40 	call	10006ad4 <_malloc_trim_r>
10006dfc:	003fba06 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006e00:	28c9883a 	add	r4,r5,r3
10006e04:	21000117 	ldw	r4,4(r4)
10006e08:	2100004c 	andi	r4,r4,1
10006e0c:	2000391e 	bne	r4,zero,10006ef4 <_free_r+0x2fc>
10006e10:	29c00217 	ldw	r7,8(r5)
10006e14:	29000317 	ldw	r4,12(r5)
10006e18:	1885883a 	add	r2,r3,r2
10006e1c:	10c00054 	ori	r3,r2,1
10006e20:	39000315 	stw	r4,12(r7)
10006e24:	21c00215 	stw	r7,8(r4)
10006e28:	30c00115 	stw	r3,4(r6)
10006e2c:	308d883a 	add	r6,r6,r2
10006e30:	30800015 	stw	r2,0(r6)
10006e34:	003fac06 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006e38:	00c00504 	movi	r3,20
10006e3c:	19401536 	bltu	r3,r5,10006e94 <_free_r+0x29c>
10006e40:	28c01704 	addi	r3,r5,92
10006e44:	18c7883a 	add	r3,r3,r3
10006e48:	294016c4 	addi	r5,r5,91
10006e4c:	003fb406 	br	10006d20 <__alt_data_end+0xf8006d20>
10006e50:	280bd0ba 	srai	r5,r5,2
10006e54:	00c00044 	movi	r3,1
10006e58:	38800117 	ldw	r2,4(r7)
10006e5c:	194a983a 	sll	r5,r3,r5
10006e60:	2007883a 	mov	r3,r4
10006e64:	2884b03a 	or	r2,r5,r2
10006e68:	38800115 	stw	r2,4(r7)
10006e6c:	003fbb06 	br	10006d5c <__alt_data_end+0xf8006d5c>
10006e70:	21800515 	stw	r6,20(r4)
10006e74:	21800415 	stw	r6,16(r4)
10006e78:	10c00054 	ori	r3,r2,1
10006e7c:	31c00315 	stw	r7,12(r6)
10006e80:	31c00215 	stw	r7,8(r6)
10006e84:	30c00115 	stw	r3,4(r6)
10006e88:	308d883a 	add	r6,r6,r2
10006e8c:	30800015 	stw	r2,0(r6)
10006e90:	003f9506 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006e94:	00c01504 	movi	r3,84
10006e98:	19400536 	bltu	r3,r5,10006eb0 <_free_r+0x2b8>
10006e9c:	100ad33a 	srli	r5,r2,12
10006ea0:	28c01bc4 	addi	r3,r5,111
10006ea4:	18c7883a 	add	r3,r3,r3
10006ea8:	29401b84 	addi	r5,r5,110
10006eac:	003f9c06 	br	10006d20 <__alt_data_end+0xf8006d20>
10006eb0:	00c05504 	movi	r3,340
10006eb4:	19400536 	bltu	r3,r5,10006ecc <_free_r+0x2d4>
10006eb8:	100ad3fa 	srli	r5,r2,15
10006ebc:	28c01e04 	addi	r3,r5,120
10006ec0:	18c7883a 	add	r3,r3,r3
10006ec4:	29401dc4 	addi	r5,r5,119
10006ec8:	003f9506 	br	10006d20 <__alt_data_end+0xf8006d20>
10006ecc:	00c15504 	movi	r3,1364
10006ed0:	19400536 	bltu	r3,r5,10006ee8 <_free_r+0x2f0>
10006ed4:	100ad4ba 	srli	r5,r2,18
10006ed8:	28c01f44 	addi	r3,r5,125
10006edc:	18c7883a 	add	r3,r3,r3
10006ee0:	29401f04 	addi	r5,r5,124
10006ee4:	003f8e06 	br	10006d20 <__alt_data_end+0xf8006d20>
10006ee8:	00c03f84 	movi	r3,254
10006eec:	01401f84 	movi	r5,126
10006ef0:	003f8b06 	br	10006d20 <__alt_data_end+0xf8006d20>
10006ef4:	10c00054 	ori	r3,r2,1
10006ef8:	30c00115 	stw	r3,4(r6)
10006efc:	308d883a 	add	r6,r6,r2
10006f00:	30800015 	stw	r2,0(r6)
10006f04:	003f7806 	br	10006ce8 <__alt_data_end+0xf8006ce8>

10006f08 <__sfvwrite_r>:
10006f08:	30800217 	ldw	r2,8(r6)
10006f0c:	10006726 	beq	r2,zero,100070ac <__sfvwrite_r+0x1a4>
10006f10:	28c0030b 	ldhu	r3,12(r5)
10006f14:	defff404 	addi	sp,sp,-48
10006f18:	dd400715 	stw	r21,28(sp)
10006f1c:	dd000615 	stw	r20,24(sp)
10006f20:	dc000215 	stw	r16,8(sp)
10006f24:	dfc00b15 	stw	ra,44(sp)
10006f28:	df000a15 	stw	fp,40(sp)
10006f2c:	ddc00915 	stw	r23,36(sp)
10006f30:	dd800815 	stw	r22,32(sp)
10006f34:	dcc00515 	stw	r19,20(sp)
10006f38:	dc800415 	stw	r18,16(sp)
10006f3c:	dc400315 	stw	r17,12(sp)
10006f40:	1880020c 	andi	r2,r3,8
10006f44:	2821883a 	mov	r16,r5
10006f48:	202b883a 	mov	r21,r4
10006f4c:	3029883a 	mov	r20,r6
10006f50:	10002726 	beq	r2,zero,10006ff0 <__sfvwrite_r+0xe8>
10006f54:	28800417 	ldw	r2,16(r5)
10006f58:	10002526 	beq	r2,zero,10006ff0 <__sfvwrite_r+0xe8>
10006f5c:	1880008c 	andi	r2,r3,2
10006f60:	a4400017 	ldw	r17,0(r20)
10006f64:	10002a26 	beq	r2,zero,10007010 <__sfvwrite_r+0x108>
10006f68:	05a00034 	movhi	r22,32768
10006f6c:	0027883a 	mov	r19,zero
10006f70:	0025883a 	mov	r18,zero
10006f74:	b5bf0004 	addi	r22,r22,-1024
10006f78:	980d883a 	mov	r6,r19
10006f7c:	a809883a 	mov	r4,r21
10006f80:	90004626 	beq	r18,zero,1000709c <__sfvwrite_r+0x194>
10006f84:	900f883a 	mov	r7,r18
10006f88:	b480022e 	bgeu	r22,r18,10006f94 <__sfvwrite_r+0x8c>
10006f8c:	01e00034 	movhi	r7,32768
10006f90:	39ff0004 	addi	r7,r7,-1024
10006f94:	80800917 	ldw	r2,36(r16)
10006f98:	81400717 	ldw	r5,28(r16)
10006f9c:	103ee83a 	callr	r2
10006fa0:	00805a0e 	bge	zero,r2,1000710c <__sfvwrite_r+0x204>
10006fa4:	a0c00217 	ldw	r3,8(r20)
10006fa8:	98a7883a 	add	r19,r19,r2
10006fac:	90a5c83a 	sub	r18,r18,r2
10006fb0:	1885c83a 	sub	r2,r3,r2
10006fb4:	a0800215 	stw	r2,8(r20)
10006fb8:	103fef1e 	bne	r2,zero,10006f78 <__alt_data_end+0xf8006f78>
10006fbc:	0005883a 	mov	r2,zero
10006fc0:	dfc00b17 	ldw	ra,44(sp)
10006fc4:	df000a17 	ldw	fp,40(sp)
10006fc8:	ddc00917 	ldw	r23,36(sp)
10006fcc:	dd800817 	ldw	r22,32(sp)
10006fd0:	dd400717 	ldw	r21,28(sp)
10006fd4:	dd000617 	ldw	r20,24(sp)
10006fd8:	dcc00517 	ldw	r19,20(sp)
10006fdc:	dc800417 	ldw	r18,16(sp)
10006fe0:	dc400317 	ldw	r17,12(sp)
10006fe4:	dc000217 	ldw	r16,8(sp)
10006fe8:	dec00c04 	addi	sp,sp,48
10006fec:	f800283a 	ret
10006ff0:	800b883a 	mov	r5,r16
10006ff4:	a809883a 	mov	r4,r21
10006ff8:	0004a780 	call	10004a78 <__swsetup_r>
10006ffc:	1000ee1e 	bne	r2,zero,100073b8 <__sfvwrite_r+0x4b0>
10007000:	80c0030b 	ldhu	r3,12(r16)
10007004:	a4400017 	ldw	r17,0(r20)
10007008:	1880008c 	andi	r2,r3,2
1000700c:	103fd61e 	bne	r2,zero,10006f68 <__alt_data_end+0xf8006f68>
10007010:	1880004c 	andi	r2,r3,1
10007014:	1000421e 	bne	r2,zero,10007120 <__sfvwrite_r+0x218>
10007018:	0039883a 	mov	fp,zero
1000701c:	0025883a 	mov	r18,zero
10007020:	90001a26 	beq	r18,zero,1000708c <__sfvwrite_r+0x184>
10007024:	1880800c 	andi	r2,r3,512
10007028:	84c00217 	ldw	r19,8(r16)
1000702c:	10002126 	beq	r2,zero,100070b4 <__sfvwrite_r+0x1ac>
10007030:	982f883a 	mov	r23,r19
10007034:	94c09636 	bltu	r18,r19,10007290 <__sfvwrite_r+0x388>
10007038:	1881200c 	andi	r2,r3,1152
1000703c:	1000a11e 	bne	r2,zero,100072c4 <__sfvwrite_r+0x3bc>
10007040:	81000017 	ldw	r4,0(r16)
10007044:	b80d883a 	mov	r6,r23
10007048:	e00b883a 	mov	r5,fp
1000704c:	00082280 	call	10008228 <memmove>
10007050:	80c00217 	ldw	r3,8(r16)
10007054:	81000017 	ldw	r4,0(r16)
10007058:	9005883a 	mov	r2,r18
1000705c:	1ce7c83a 	sub	r19,r3,r19
10007060:	25cf883a 	add	r7,r4,r23
10007064:	84c00215 	stw	r19,8(r16)
10007068:	81c00015 	stw	r7,0(r16)
1000706c:	a0c00217 	ldw	r3,8(r20)
10007070:	e0b9883a 	add	fp,fp,r2
10007074:	90a5c83a 	sub	r18,r18,r2
10007078:	18a7c83a 	sub	r19,r3,r2
1000707c:	a4c00215 	stw	r19,8(r20)
10007080:	983fce26 	beq	r19,zero,10006fbc <__alt_data_end+0xf8006fbc>
10007084:	80c0030b 	ldhu	r3,12(r16)
10007088:	903fe61e 	bne	r18,zero,10007024 <__alt_data_end+0xf8007024>
1000708c:	8f000017 	ldw	fp,0(r17)
10007090:	8c800117 	ldw	r18,4(r17)
10007094:	8c400204 	addi	r17,r17,8
10007098:	003fe106 	br	10007020 <__alt_data_end+0xf8007020>
1000709c:	8cc00017 	ldw	r19,0(r17)
100070a0:	8c800117 	ldw	r18,4(r17)
100070a4:	8c400204 	addi	r17,r17,8
100070a8:	003fb306 	br	10006f78 <__alt_data_end+0xf8006f78>
100070ac:	0005883a 	mov	r2,zero
100070b0:	f800283a 	ret
100070b4:	81000017 	ldw	r4,0(r16)
100070b8:	80800417 	ldw	r2,16(r16)
100070bc:	11005a36 	bltu	r2,r4,10007228 <__sfvwrite_r+0x320>
100070c0:	85c00517 	ldw	r23,20(r16)
100070c4:	95c05836 	bltu	r18,r23,10007228 <__sfvwrite_r+0x320>
100070c8:	00a00034 	movhi	r2,32768
100070cc:	10bfffc4 	addi	r2,r2,-1
100070d0:	9009883a 	mov	r4,r18
100070d4:	1480012e 	bgeu	r2,r18,100070dc <__sfvwrite_r+0x1d4>
100070d8:	1009883a 	mov	r4,r2
100070dc:	b80b883a 	mov	r5,r23
100070e0:	000c9ac0 	call	1000c9ac <__divsi3>
100070e4:	b80b883a 	mov	r5,r23
100070e8:	1009883a 	mov	r4,r2
100070ec:	000cb600 	call	1000cb60 <__mulsi3>
100070f0:	81400717 	ldw	r5,28(r16)
100070f4:	80c00917 	ldw	r3,36(r16)
100070f8:	100f883a 	mov	r7,r2
100070fc:	e00d883a 	mov	r6,fp
10007100:	a809883a 	mov	r4,r21
10007104:	183ee83a 	callr	r3
10007108:	00bfd816 	blt	zero,r2,1000706c <__alt_data_end+0xf800706c>
1000710c:	8080030b 	ldhu	r2,12(r16)
10007110:	10801014 	ori	r2,r2,64
10007114:	8080030d 	sth	r2,12(r16)
10007118:	00bfffc4 	movi	r2,-1
1000711c:	003fa806 	br	10006fc0 <__alt_data_end+0xf8006fc0>
10007120:	0027883a 	mov	r19,zero
10007124:	0011883a 	mov	r8,zero
10007128:	0039883a 	mov	fp,zero
1000712c:	0025883a 	mov	r18,zero
10007130:	90001f26 	beq	r18,zero,100071b0 <__sfvwrite_r+0x2a8>
10007134:	40005a26 	beq	r8,zero,100072a0 <__sfvwrite_r+0x398>
10007138:	982d883a 	mov	r22,r19
1000713c:	94c0012e 	bgeu	r18,r19,10007144 <__sfvwrite_r+0x23c>
10007140:	902d883a 	mov	r22,r18
10007144:	81000017 	ldw	r4,0(r16)
10007148:	80800417 	ldw	r2,16(r16)
1000714c:	b02f883a 	mov	r23,r22
10007150:	81c00517 	ldw	r7,20(r16)
10007154:	1100032e 	bgeu	r2,r4,10007164 <__sfvwrite_r+0x25c>
10007158:	80c00217 	ldw	r3,8(r16)
1000715c:	38c7883a 	add	r3,r7,r3
10007160:	1d801816 	blt	r3,r22,100071c4 <__sfvwrite_r+0x2bc>
10007164:	b1c03e16 	blt	r22,r7,10007260 <__sfvwrite_r+0x358>
10007168:	80800917 	ldw	r2,36(r16)
1000716c:	81400717 	ldw	r5,28(r16)
10007170:	e00d883a 	mov	r6,fp
10007174:	da000115 	stw	r8,4(sp)
10007178:	a809883a 	mov	r4,r21
1000717c:	103ee83a 	callr	r2
10007180:	102f883a 	mov	r23,r2
10007184:	da000117 	ldw	r8,4(sp)
10007188:	00bfe00e 	bge	zero,r2,1000710c <__alt_data_end+0xf800710c>
1000718c:	9de7c83a 	sub	r19,r19,r23
10007190:	98001f26 	beq	r19,zero,10007210 <__sfvwrite_r+0x308>
10007194:	a0800217 	ldw	r2,8(r20)
10007198:	e5f9883a 	add	fp,fp,r23
1000719c:	95e5c83a 	sub	r18,r18,r23
100071a0:	15efc83a 	sub	r23,r2,r23
100071a4:	a5c00215 	stw	r23,8(r20)
100071a8:	b83f8426 	beq	r23,zero,10006fbc <__alt_data_end+0xf8006fbc>
100071ac:	903fe11e 	bne	r18,zero,10007134 <__alt_data_end+0xf8007134>
100071b0:	8f000017 	ldw	fp,0(r17)
100071b4:	8c800117 	ldw	r18,4(r17)
100071b8:	0011883a 	mov	r8,zero
100071bc:	8c400204 	addi	r17,r17,8
100071c0:	003fdb06 	br	10007130 <__alt_data_end+0xf8007130>
100071c4:	180d883a 	mov	r6,r3
100071c8:	e00b883a 	mov	r5,fp
100071cc:	da000115 	stw	r8,4(sp)
100071d0:	d8c00015 	stw	r3,0(sp)
100071d4:	00082280 	call	10008228 <memmove>
100071d8:	d8c00017 	ldw	r3,0(sp)
100071dc:	80800017 	ldw	r2,0(r16)
100071e0:	800b883a 	mov	r5,r16
100071e4:	a809883a 	mov	r4,r21
100071e8:	10c5883a 	add	r2,r2,r3
100071ec:	80800015 	stw	r2,0(r16)
100071f0:	d8c00015 	stw	r3,0(sp)
100071f4:	00066980 	call	10006698 <_fflush_r>
100071f8:	d8c00017 	ldw	r3,0(sp)
100071fc:	da000117 	ldw	r8,4(sp)
10007200:	103fc21e 	bne	r2,zero,1000710c <__alt_data_end+0xf800710c>
10007204:	182f883a 	mov	r23,r3
10007208:	9de7c83a 	sub	r19,r19,r23
1000720c:	983fe11e 	bne	r19,zero,10007194 <__alt_data_end+0xf8007194>
10007210:	800b883a 	mov	r5,r16
10007214:	a809883a 	mov	r4,r21
10007218:	00066980 	call	10006698 <_fflush_r>
1000721c:	103fbb1e 	bne	r2,zero,1000710c <__alt_data_end+0xf800710c>
10007220:	0011883a 	mov	r8,zero
10007224:	003fdb06 	br	10007194 <__alt_data_end+0xf8007194>
10007228:	94c0012e 	bgeu	r18,r19,10007230 <__sfvwrite_r+0x328>
1000722c:	9027883a 	mov	r19,r18
10007230:	980d883a 	mov	r6,r19
10007234:	e00b883a 	mov	r5,fp
10007238:	00082280 	call	10008228 <memmove>
1000723c:	80800217 	ldw	r2,8(r16)
10007240:	80c00017 	ldw	r3,0(r16)
10007244:	14c5c83a 	sub	r2,r2,r19
10007248:	1cc7883a 	add	r3,r3,r19
1000724c:	80800215 	stw	r2,8(r16)
10007250:	80c00015 	stw	r3,0(r16)
10007254:	10004326 	beq	r2,zero,10007364 <__sfvwrite_r+0x45c>
10007258:	9805883a 	mov	r2,r19
1000725c:	003f8306 	br	1000706c <__alt_data_end+0xf800706c>
10007260:	b00d883a 	mov	r6,r22
10007264:	e00b883a 	mov	r5,fp
10007268:	da000115 	stw	r8,4(sp)
1000726c:	00082280 	call	10008228 <memmove>
10007270:	80800217 	ldw	r2,8(r16)
10007274:	80c00017 	ldw	r3,0(r16)
10007278:	da000117 	ldw	r8,4(sp)
1000727c:	1585c83a 	sub	r2,r2,r22
10007280:	1dad883a 	add	r22,r3,r22
10007284:	80800215 	stw	r2,8(r16)
10007288:	85800015 	stw	r22,0(r16)
1000728c:	003fbf06 	br	1000718c <__alt_data_end+0xf800718c>
10007290:	81000017 	ldw	r4,0(r16)
10007294:	9027883a 	mov	r19,r18
10007298:	902f883a 	mov	r23,r18
1000729c:	003f6906 	br	10007044 <__alt_data_end+0xf8007044>
100072a0:	900d883a 	mov	r6,r18
100072a4:	01400284 	movi	r5,10
100072a8:	e009883a 	mov	r4,fp
100072ac:	0007ffc0 	call	10007ffc <memchr>
100072b0:	10003e26 	beq	r2,zero,100073ac <__sfvwrite_r+0x4a4>
100072b4:	10800044 	addi	r2,r2,1
100072b8:	1727c83a 	sub	r19,r2,fp
100072bc:	02000044 	movi	r8,1
100072c0:	003f9d06 	br	10007138 <__alt_data_end+0xf8007138>
100072c4:	80800517 	ldw	r2,20(r16)
100072c8:	81400417 	ldw	r5,16(r16)
100072cc:	81c00017 	ldw	r7,0(r16)
100072d0:	10a7883a 	add	r19,r2,r2
100072d4:	9885883a 	add	r2,r19,r2
100072d8:	1026d7fa 	srli	r19,r2,31
100072dc:	396dc83a 	sub	r22,r7,r5
100072e0:	b1000044 	addi	r4,r22,1
100072e4:	9885883a 	add	r2,r19,r2
100072e8:	1027d07a 	srai	r19,r2,1
100072ec:	2485883a 	add	r2,r4,r18
100072f0:	980d883a 	mov	r6,r19
100072f4:	9880022e 	bgeu	r19,r2,10007300 <__sfvwrite_r+0x3f8>
100072f8:	1027883a 	mov	r19,r2
100072fc:	100d883a 	mov	r6,r2
10007300:	18c1000c 	andi	r3,r3,1024
10007304:	18001c26 	beq	r3,zero,10007378 <__sfvwrite_r+0x470>
10007308:	300b883a 	mov	r5,r6
1000730c:	a809883a 	mov	r4,r21
10007310:	00077f00 	call	100077f0 <_malloc_r>
10007314:	102f883a 	mov	r23,r2
10007318:	10002926 	beq	r2,zero,100073c0 <__sfvwrite_r+0x4b8>
1000731c:	81400417 	ldw	r5,16(r16)
10007320:	b00d883a 	mov	r6,r22
10007324:	1009883a 	mov	r4,r2
10007328:	00080e00 	call	100080e0 <memcpy>
1000732c:	8080030b 	ldhu	r2,12(r16)
10007330:	00fedfc4 	movi	r3,-1153
10007334:	10c4703a 	and	r2,r2,r3
10007338:	10802014 	ori	r2,r2,128
1000733c:	8080030d 	sth	r2,12(r16)
10007340:	bd89883a 	add	r4,r23,r22
10007344:	9d8fc83a 	sub	r7,r19,r22
10007348:	85c00415 	stw	r23,16(r16)
1000734c:	84c00515 	stw	r19,20(r16)
10007350:	81000015 	stw	r4,0(r16)
10007354:	9027883a 	mov	r19,r18
10007358:	81c00215 	stw	r7,8(r16)
1000735c:	902f883a 	mov	r23,r18
10007360:	003f3806 	br	10007044 <__alt_data_end+0xf8007044>
10007364:	800b883a 	mov	r5,r16
10007368:	a809883a 	mov	r4,r21
1000736c:	00066980 	call	10006698 <_fflush_r>
10007370:	103fb926 	beq	r2,zero,10007258 <__alt_data_end+0xf8007258>
10007374:	003f6506 	br	1000710c <__alt_data_end+0xf800710c>
10007378:	a809883a 	mov	r4,r21
1000737c:	00095640 	call	10009564 <_realloc_r>
10007380:	102f883a 	mov	r23,r2
10007384:	103fee1e 	bne	r2,zero,10007340 <__alt_data_end+0xf8007340>
10007388:	81400417 	ldw	r5,16(r16)
1000738c:	a809883a 	mov	r4,r21
10007390:	0006bf80 	call	10006bf8 <_free_r>
10007394:	8080030b 	ldhu	r2,12(r16)
10007398:	00ffdfc4 	movi	r3,-129
1000739c:	1884703a 	and	r2,r3,r2
100073a0:	00c00304 	movi	r3,12
100073a4:	a8c00015 	stw	r3,0(r21)
100073a8:	003f5906 	br	10007110 <__alt_data_end+0xf8007110>
100073ac:	94c00044 	addi	r19,r18,1
100073b0:	02000044 	movi	r8,1
100073b4:	003f6006 	br	10007138 <__alt_data_end+0xf8007138>
100073b8:	00bfffc4 	movi	r2,-1
100073bc:	003f0006 	br	10006fc0 <__alt_data_end+0xf8006fc0>
100073c0:	00800304 	movi	r2,12
100073c4:	a8800015 	stw	r2,0(r21)
100073c8:	8080030b 	ldhu	r2,12(r16)
100073cc:	003f5006 	br	10007110 <__alt_data_end+0xf8007110>

100073d0 <_fwalk>:
100073d0:	defff704 	addi	sp,sp,-36
100073d4:	dd000415 	stw	r20,16(sp)
100073d8:	dfc00815 	stw	ra,32(sp)
100073dc:	ddc00715 	stw	r23,28(sp)
100073e0:	dd800615 	stw	r22,24(sp)
100073e4:	dd400515 	stw	r21,20(sp)
100073e8:	dcc00315 	stw	r19,12(sp)
100073ec:	dc800215 	stw	r18,8(sp)
100073f0:	dc400115 	stw	r17,4(sp)
100073f4:	dc000015 	stw	r16,0(sp)
100073f8:	2500b804 	addi	r20,r4,736
100073fc:	a0002326 	beq	r20,zero,1000748c <_fwalk+0xbc>
10007400:	282b883a 	mov	r21,r5
10007404:	002f883a 	mov	r23,zero
10007408:	05800044 	movi	r22,1
1000740c:	04ffffc4 	movi	r19,-1
10007410:	a4400117 	ldw	r17,4(r20)
10007414:	a4800217 	ldw	r18,8(r20)
10007418:	8c7fffc4 	addi	r17,r17,-1
1000741c:	88000d16 	blt	r17,zero,10007454 <_fwalk+0x84>
10007420:	94000304 	addi	r16,r18,12
10007424:	94800384 	addi	r18,r18,14
10007428:	8080000b 	ldhu	r2,0(r16)
1000742c:	8c7fffc4 	addi	r17,r17,-1
10007430:	813ffd04 	addi	r4,r16,-12
10007434:	b080042e 	bgeu	r22,r2,10007448 <_fwalk+0x78>
10007438:	9080000f 	ldh	r2,0(r18)
1000743c:	14c00226 	beq	r2,r19,10007448 <_fwalk+0x78>
10007440:	a83ee83a 	callr	r21
10007444:	b8aeb03a 	or	r23,r23,r2
10007448:	84001a04 	addi	r16,r16,104
1000744c:	94801a04 	addi	r18,r18,104
10007450:	8cfff51e 	bne	r17,r19,10007428 <__alt_data_end+0xf8007428>
10007454:	a5000017 	ldw	r20,0(r20)
10007458:	a03fed1e 	bne	r20,zero,10007410 <__alt_data_end+0xf8007410>
1000745c:	b805883a 	mov	r2,r23
10007460:	dfc00817 	ldw	ra,32(sp)
10007464:	ddc00717 	ldw	r23,28(sp)
10007468:	dd800617 	ldw	r22,24(sp)
1000746c:	dd400517 	ldw	r21,20(sp)
10007470:	dd000417 	ldw	r20,16(sp)
10007474:	dcc00317 	ldw	r19,12(sp)
10007478:	dc800217 	ldw	r18,8(sp)
1000747c:	dc400117 	ldw	r17,4(sp)
10007480:	dc000017 	ldw	r16,0(sp)
10007484:	dec00904 	addi	sp,sp,36
10007488:	f800283a 	ret
1000748c:	002f883a 	mov	r23,zero
10007490:	003ff206 	br	1000745c <__alt_data_end+0xf800745c>

10007494 <_fwalk_reent>:
10007494:	defff704 	addi	sp,sp,-36
10007498:	dd000415 	stw	r20,16(sp)
1000749c:	dfc00815 	stw	ra,32(sp)
100074a0:	ddc00715 	stw	r23,28(sp)
100074a4:	dd800615 	stw	r22,24(sp)
100074a8:	dd400515 	stw	r21,20(sp)
100074ac:	dcc00315 	stw	r19,12(sp)
100074b0:	dc800215 	stw	r18,8(sp)
100074b4:	dc400115 	stw	r17,4(sp)
100074b8:	dc000015 	stw	r16,0(sp)
100074bc:	2500b804 	addi	r20,r4,736
100074c0:	a0002326 	beq	r20,zero,10007550 <_fwalk_reent+0xbc>
100074c4:	282b883a 	mov	r21,r5
100074c8:	2027883a 	mov	r19,r4
100074cc:	002f883a 	mov	r23,zero
100074d0:	05800044 	movi	r22,1
100074d4:	04bfffc4 	movi	r18,-1
100074d8:	a4400117 	ldw	r17,4(r20)
100074dc:	a4000217 	ldw	r16,8(r20)
100074e0:	8c7fffc4 	addi	r17,r17,-1
100074e4:	88000c16 	blt	r17,zero,10007518 <_fwalk_reent+0x84>
100074e8:	84000304 	addi	r16,r16,12
100074ec:	8080000b 	ldhu	r2,0(r16)
100074f0:	8c7fffc4 	addi	r17,r17,-1
100074f4:	817ffd04 	addi	r5,r16,-12
100074f8:	b080052e 	bgeu	r22,r2,10007510 <_fwalk_reent+0x7c>
100074fc:	8080008f 	ldh	r2,2(r16)
10007500:	9809883a 	mov	r4,r19
10007504:	14800226 	beq	r2,r18,10007510 <_fwalk_reent+0x7c>
10007508:	a83ee83a 	callr	r21
1000750c:	b8aeb03a 	or	r23,r23,r2
10007510:	84001a04 	addi	r16,r16,104
10007514:	8cbff51e 	bne	r17,r18,100074ec <__alt_data_end+0xf80074ec>
10007518:	a5000017 	ldw	r20,0(r20)
1000751c:	a03fee1e 	bne	r20,zero,100074d8 <__alt_data_end+0xf80074d8>
10007520:	b805883a 	mov	r2,r23
10007524:	dfc00817 	ldw	ra,32(sp)
10007528:	ddc00717 	ldw	r23,28(sp)
1000752c:	dd800617 	ldw	r22,24(sp)
10007530:	dd400517 	ldw	r21,20(sp)
10007534:	dd000417 	ldw	r20,16(sp)
10007538:	dcc00317 	ldw	r19,12(sp)
1000753c:	dc800217 	ldw	r18,8(sp)
10007540:	dc400117 	ldw	r17,4(sp)
10007544:	dc000017 	ldw	r16,0(sp)
10007548:	dec00904 	addi	sp,sp,36
1000754c:	f800283a 	ret
10007550:	002f883a 	mov	r23,zero
10007554:	003ff206 	br	10007520 <__alt_data_end+0xf8007520>

10007558 <_setlocale_r>:
10007558:	30001b26 	beq	r6,zero,100075c8 <_setlocale_r+0x70>
1000755c:	01440074 	movhi	r5,4097
10007560:	defffe04 	addi	sp,sp,-8
10007564:	29492104 	addi	r5,r5,9348
10007568:	3009883a 	mov	r4,r6
1000756c:	dc000015 	stw	r16,0(sp)
10007570:	dfc00115 	stw	ra,4(sp)
10007574:	3021883a 	mov	r16,r6
10007578:	0009ccc0 	call	10009ccc <strcmp>
1000757c:	1000061e 	bne	r2,zero,10007598 <_setlocale_r+0x40>
10007580:	00840074 	movhi	r2,4097
10007584:	10892004 	addi	r2,r2,9344
10007588:	dfc00117 	ldw	ra,4(sp)
1000758c:	dc000017 	ldw	r16,0(sp)
10007590:	dec00204 	addi	sp,sp,8
10007594:	f800283a 	ret
10007598:	01440074 	movhi	r5,4097
1000759c:	29492004 	addi	r5,r5,9344
100075a0:	8009883a 	mov	r4,r16
100075a4:	0009ccc0 	call	10009ccc <strcmp>
100075a8:	103ff526 	beq	r2,zero,10007580 <__alt_data_end+0xf8007580>
100075ac:	01440074 	movhi	r5,4097
100075b0:	29490b04 	addi	r5,r5,9260
100075b4:	8009883a 	mov	r4,r16
100075b8:	0009ccc0 	call	10009ccc <strcmp>
100075bc:	103ff026 	beq	r2,zero,10007580 <__alt_data_end+0xf8007580>
100075c0:	0005883a 	mov	r2,zero
100075c4:	003ff006 	br	10007588 <__alt_data_end+0xf8007588>
100075c8:	00840074 	movhi	r2,4097
100075cc:	10892004 	addi	r2,r2,9344
100075d0:	f800283a 	ret

100075d4 <__locale_charset>:
100075d4:	00840074 	movhi	r2,4097
100075d8:	108ad304 	addi	r2,r2,11084
100075dc:	f800283a 	ret

100075e0 <__locale_mb_cur_max>:
100075e0:	00840074 	movhi	r2,4097
100075e4:	10907004 	addi	r2,r2,16832
100075e8:	10800017 	ldw	r2,0(r2)
100075ec:	f800283a 	ret

100075f0 <__locale_msgcharset>:
100075f0:	00840074 	movhi	r2,4097
100075f4:	108acb04 	addi	r2,r2,11052
100075f8:	f800283a 	ret

100075fc <__locale_cjk_lang>:
100075fc:	0005883a 	mov	r2,zero
10007600:	f800283a 	ret

10007604 <_localeconv_r>:
10007604:	00840074 	movhi	r2,4097
10007608:	108adb04 	addi	r2,r2,11116
1000760c:	f800283a 	ret

10007610 <setlocale>:
10007610:	00840074 	movhi	r2,4097
10007614:	10906f04 	addi	r2,r2,16828
10007618:	280d883a 	mov	r6,r5
1000761c:	200b883a 	mov	r5,r4
10007620:	11000017 	ldw	r4,0(r2)
10007624:	00075581 	jmpi	10007558 <_setlocale_r>

10007628 <localeconv>:
10007628:	00840074 	movhi	r2,4097
1000762c:	108adb04 	addi	r2,r2,11116
10007630:	f800283a 	ret

10007634 <__smakebuf_r>:
10007634:	2880030b 	ldhu	r2,12(r5)
10007638:	10c0008c 	andi	r3,r2,2
1000763c:	1800411e 	bne	r3,zero,10007744 <__smakebuf_r+0x110>
10007640:	deffec04 	addi	sp,sp,-80
10007644:	dc000f15 	stw	r16,60(sp)
10007648:	2821883a 	mov	r16,r5
1000764c:	2940038f 	ldh	r5,14(r5)
10007650:	dc401015 	stw	r17,64(sp)
10007654:	dfc01315 	stw	ra,76(sp)
10007658:	dcc01215 	stw	r19,72(sp)
1000765c:	dc801115 	stw	r18,68(sp)
10007660:	2023883a 	mov	r17,r4
10007664:	28001c16 	blt	r5,zero,100076d8 <__smakebuf_r+0xa4>
10007668:	d80d883a 	mov	r6,sp
1000766c:	000b93c0 	call	1000b93c <_fstat_r>
10007670:	10001816 	blt	r2,zero,100076d4 <__smakebuf_r+0xa0>
10007674:	d8800117 	ldw	r2,4(sp)
10007678:	00e00014 	movui	r3,32768
1000767c:	10bc000c 	andi	r2,r2,61440
10007680:	14c80020 	cmpeqi	r19,r2,8192
10007684:	10c03726 	beq	r2,r3,10007764 <__smakebuf_r+0x130>
10007688:	80c0030b 	ldhu	r3,12(r16)
1000768c:	18c20014 	ori	r3,r3,2048
10007690:	80c0030d 	sth	r3,12(r16)
10007694:	00c80004 	movi	r3,8192
10007698:	10c0521e 	bne	r2,r3,100077e4 <__smakebuf_r+0x1b0>
1000769c:	8140038f 	ldh	r5,14(r16)
100076a0:	8809883a 	mov	r4,r17
100076a4:	000b9980 	call	1000b998 <_isatty_r>
100076a8:	10004c26 	beq	r2,zero,100077dc <__smakebuf_r+0x1a8>
100076ac:	8080030b 	ldhu	r2,12(r16)
100076b0:	80c010c4 	addi	r3,r16,67
100076b4:	80c00015 	stw	r3,0(r16)
100076b8:	10800054 	ori	r2,r2,1
100076bc:	8080030d 	sth	r2,12(r16)
100076c0:	00800044 	movi	r2,1
100076c4:	80c00415 	stw	r3,16(r16)
100076c8:	80800515 	stw	r2,20(r16)
100076cc:	04810004 	movi	r18,1024
100076d0:	00000706 	br	100076f0 <__smakebuf_r+0xbc>
100076d4:	8080030b 	ldhu	r2,12(r16)
100076d8:	10c0200c 	andi	r3,r2,128
100076dc:	18001f1e 	bne	r3,zero,1000775c <__smakebuf_r+0x128>
100076e0:	04810004 	movi	r18,1024
100076e4:	10820014 	ori	r2,r2,2048
100076e8:	8080030d 	sth	r2,12(r16)
100076ec:	0027883a 	mov	r19,zero
100076f0:	900b883a 	mov	r5,r18
100076f4:	8809883a 	mov	r4,r17
100076f8:	00077f00 	call	100077f0 <_malloc_r>
100076fc:	10002c26 	beq	r2,zero,100077b0 <__smakebuf_r+0x17c>
10007700:	80c0030b 	ldhu	r3,12(r16)
10007704:	01040034 	movhi	r4,4096
10007708:	2119cb04 	addi	r4,r4,26412
1000770c:	89000f15 	stw	r4,60(r17)
10007710:	18c02014 	ori	r3,r3,128
10007714:	80c0030d 	sth	r3,12(r16)
10007718:	80800015 	stw	r2,0(r16)
1000771c:	80800415 	stw	r2,16(r16)
10007720:	84800515 	stw	r18,20(r16)
10007724:	98001a1e 	bne	r19,zero,10007790 <__smakebuf_r+0x15c>
10007728:	dfc01317 	ldw	ra,76(sp)
1000772c:	dcc01217 	ldw	r19,72(sp)
10007730:	dc801117 	ldw	r18,68(sp)
10007734:	dc401017 	ldw	r17,64(sp)
10007738:	dc000f17 	ldw	r16,60(sp)
1000773c:	dec01404 	addi	sp,sp,80
10007740:	f800283a 	ret
10007744:	288010c4 	addi	r2,r5,67
10007748:	28800015 	stw	r2,0(r5)
1000774c:	28800415 	stw	r2,16(r5)
10007750:	00800044 	movi	r2,1
10007754:	28800515 	stw	r2,20(r5)
10007758:	f800283a 	ret
1000775c:	04801004 	movi	r18,64
10007760:	003fe006 	br	100076e4 <__alt_data_end+0xf80076e4>
10007764:	81000a17 	ldw	r4,40(r16)
10007768:	00c40074 	movhi	r3,4097
1000776c:	18e71a04 	addi	r3,r3,-25496
10007770:	20ffc51e 	bne	r4,r3,10007688 <__alt_data_end+0xf8007688>
10007774:	8080030b 	ldhu	r2,12(r16)
10007778:	04810004 	movi	r18,1024
1000777c:	84801315 	stw	r18,76(r16)
10007780:	1484b03a 	or	r2,r2,r18
10007784:	8080030d 	sth	r2,12(r16)
10007788:	0027883a 	mov	r19,zero
1000778c:	003fd806 	br	100076f0 <__alt_data_end+0xf80076f0>
10007790:	8140038f 	ldh	r5,14(r16)
10007794:	8809883a 	mov	r4,r17
10007798:	000b9980 	call	1000b998 <_isatty_r>
1000779c:	103fe226 	beq	r2,zero,10007728 <__alt_data_end+0xf8007728>
100077a0:	8080030b 	ldhu	r2,12(r16)
100077a4:	10800054 	ori	r2,r2,1
100077a8:	8080030d 	sth	r2,12(r16)
100077ac:	003fde06 	br	10007728 <__alt_data_end+0xf8007728>
100077b0:	8080030b 	ldhu	r2,12(r16)
100077b4:	10c0800c 	andi	r3,r2,512
100077b8:	183fdb1e 	bne	r3,zero,10007728 <__alt_data_end+0xf8007728>
100077bc:	10800094 	ori	r2,r2,2
100077c0:	80c010c4 	addi	r3,r16,67
100077c4:	8080030d 	sth	r2,12(r16)
100077c8:	00800044 	movi	r2,1
100077cc:	80c00015 	stw	r3,0(r16)
100077d0:	80c00415 	stw	r3,16(r16)
100077d4:	80800515 	stw	r2,20(r16)
100077d8:	003fd306 	br	10007728 <__alt_data_end+0xf8007728>
100077dc:	04810004 	movi	r18,1024
100077e0:	003fc306 	br	100076f0 <__alt_data_end+0xf80076f0>
100077e4:	0027883a 	mov	r19,zero
100077e8:	04810004 	movi	r18,1024
100077ec:	003fc006 	br	100076f0 <__alt_data_end+0xf80076f0>

100077f0 <_malloc_r>:
100077f0:	defff504 	addi	sp,sp,-44
100077f4:	dc800315 	stw	r18,12(sp)
100077f8:	dfc00a15 	stw	ra,40(sp)
100077fc:	df000915 	stw	fp,36(sp)
10007800:	ddc00815 	stw	r23,32(sp)
10007804:	dd800715 	stw	r22,28(sp)
10007808:	dd400615 	stw	r21,24(sp)
1000780c:	dd000515 	stw	r20,20(sp)
10007810:	dcc00415 	stw	r19,16(sp)
10007814:	dc400215 	stw	r17,8(sp)
10007818:	dc000115 	stw	r16,4(sp)
1000781c:	288002c4 	addi	r2,r5,11
10007820:	00c00584 	movi	r3,22
10007824:	2025883a 	mov	r18,r4
10007828:	18807f2e 	bgeu	r3,r2,10007a28 <_malloc_r+0x238>
1000782c:	047ffe04 	movi	r17,-8
10007830:	1462703a 	and	r17,r2,r17
10007834:	8800a316 	blt	r17,zero,10007ac4 <_malloc_r+0x2d4>
10007838:	8940a236 	bltu	r17,r5,10007ac4 <_malloc_r+0x2d4>
1000783c:	000f9c80 	call	1000f9c8 <__malloc_lock>
10007840:	00807dc4 	movi	r2,503
10007844:	1441e92e 	bgeu	r2,r17,10007fec <_malloc_r+0x7fc>
10007848:	8804d27a 	srli	r2,r17,9
1000784c:	1000a126 	beq	r2,zero,10007ad4 <_malloc_r+0x2e4>
10007850:	00c00104 	movi	r3,4
10007854:	18811e36 	bltu	r3,r2,10007cd0 <_malloc_r+0x4e0>
10007858:	8804d1ba 	srli	r2,r17,6
1000785c:	12000e44 	addi	r8,r2,57
10007860:	11c00e04 	addi	r7,r2,56
10007864:	4209883a 	add	r4,r8,r8
10007868:	04c40074 	movhi	r19,4097
1000786c:	2109883a 	add	r4,r4,r4
10007870:	9ccae904 	addi	r19,r19,11172
10007874:	2109883a 	add	r4,r4,r4
10007878:	9909883a 	add	r4,r19,r4
1000787c:	24000117 	ldw	r16,4(r4)
10007880:	213ffe04 	addi	r4,r4,-8
10007884:	24009726 	beq	r4,r16,10007ae4 <_malloc_r+0x2f4>
10007888:	80800117 	ldw	r2,4(r16)
1000788c:	01bfff04 	movi	r6,-4
10007890:	014003c4 	movi	r5,15
10007894:	1184703a 	and	r2,r2,r6
10007898:	1447c83a 	sub	r3,r2,r17
1000789c:	28c00716 	blt	r5,r3,100078bc <_malloc_r+0xcc>
100078a0:	1800920e 	bge	r3,zero,10007aec <_malloc_r+0x2fc>
100078a4:	84000317 	ldw	r16,12(r16)
100078a8:	24008e26 	beq	r4,r16,10007ae4 <_malloc_r+0x2f4>
100078ac:	80800117 	ldw	r2,4(r16)
100078b0:	1184703a 	and	r2,r2,r6
100078b4:	1447c83a 	sub	r3,r2,r17
100078b8:	28fff90e 	bge	r5,r3,100078a0 <__alt_data_end+0xf80078a0>
100078bc:	3809883a 	mov	r4,r7
100078c0:	01840074 	movhi	r6,4097
100078c4:	9c000417 	ldw	r16,16(r19)
100078c8:	318ae904 	addi	r6,r6,11172
100078cc:	32000204 	addi	r8,r6,8
100078d0:	82013426 	beq	r16,r8,10007da4 <_malloc_r+0x5b4>
100078d4:	80c00117 	ldw	r3,4(r16)
100078d8:	00bfff04 	movi	r2,-4
100078dc:	188e703a 	and	r7,r3,r2
100078e0:	3c45c83a 	sub	r2,r7,r17
100078e4:	00c003c4 	movi	r3,15
100078e8:	18811f16 	blt	r3,r2,10007d68 <_malloc_r+0x578>
100078ec:	32000515 	stw	r8,20(r6)
100078f0:	32000415 	stw	r8,16(r6)
100078f4:	10007f0e 	bge	r2,zero,10007af4 <_malloc_r+0x304>
100078f8:	00807fc4 	movi	r2,511
100078fc:	11c0fd36 	bltu	r2,r7,10007cf4 <_malloc_r+0x504>
10007900:	3806d0fa 	srli	r3,r7,3
10007904:	01c00044 	movi	r7,1
10007908:	30800117 	ldw	r2,4(r6)
1000790c:	19400044 	addi	r5,r3,1
10007910:	294b883a 	add	r5,r5,r5
10007914:	1807d0ba 	srai	r3,r3,2
10007918:	294b883a 	add	r5,r5,r5
1000791c:	294b883a 	add	r5,r5,r5
10007920:	298b883a 	add	r5,r5,r6
10007924:	38c6983a 	sll	r3,r7,r3
10007928:	29c00017 	ldw	r7,0(r5)
1000792c:	2a7ffe04 	addi	r9,r5,-8
10007930:	1886b03a 	or	r3,r3,r2
10007934:	82400315 	stw	r9,12(r16)
10007938:	81c00215 	stw	r7,8(r16)
1000793c:	30c00115 	stw	r3,4(r6)
10007940:	2c000015 	stw	r16,0(r5)
10007944:	3c000315 	stw	r16,12(r7)
10007948:	2005d0ba 	srai	r2,r4,2
1000794c:	01400044 	movi	r5,1
10007950:	288a983a 	sll	r5,r5,r2
10007954:	19406f36 	bltu	r3,r5,10007b14 <_malloc_r+0x324>
10007958:	28c4703a 	and	r2,r5,r3
1000795c:	10000a1e 	bne	r2,zero,10007988 <_malloc_r+0x198>
10007960:	00bfff04 	movi	r2,-4
10007964:	294b883a 	add	r5,r5,r5
10007968:	2088703a 	and	r4,r4,r2
1000796c:	28c4703a 	and	r2,r5,r3
10007970:	21000104 	addi	r4,r4,4
10007974:	1000041e 	bne	r2,zero,10007988 <_malloc_r+0x198>
10007978:	294b883a 	add	r5,r5,r5
1000797c:	28c4703a 	and	r2,r5,r3
10007980:	21000104 	addi	r4,r4,4
10007984:	103ffc26 	beq	r2,zero,10007978 <__alt_data_end+0xf8007978>
10007988:	02bfff04 	movi	r10,-4
1000798c:	024003c4 	movi	r9,15
10007990:	21800044 	addi	r6,r4,1
10007994:	318d883a 	add	r6,r6,r6
10007998:	318d883a 	add	r6,r6,r6
1000799c:	318d883a 	add	r6,r6,r6
100079a0:	998d883a 	add	r6,r19,r6
100079a4:	333ffe04 	addi	r12,r6,-8
100079a8:	2017883a 	mov	r11,r4
100079ac:	31800104 	addi	r6,r6,4
100079b0:	34000017 	ldw	r16,0(r6)
100079b4:	31fffd04 	addi	r7,r6,-12
100079b8:	81c0041e 	bne	r16,r7,100079cc <_malloc_r+0x1dc>
100079bc:	0000fb06 	br	10007dac <_malloc_r+0x5bc>
100079c0:	1801030e 	bge	r3,zero,10007dd0 <_malloc_r+0x5e0>
100079c4:	84000317 	ldw	r16,12(r16)
100079c8:	81c0f826 	beq	r16,r7,10007dac <_malloc_r+0x5bc>
100079cc:	80800117 	ldw	r2,4(r16)
100079d0:	1284703a 	and	r2,r2,r10
100079d4:	1447c83a 	sub	r3,r2,r17
100079d8:	48fff90e 	bge	r9,r3,100079c0 <__alt_data_end+0xf80079c0>
100079dc:	80800317 	ldw	r2,12(r16)
100079e0:	81000217 	ldw	r4,8(r16)
100079e4:	89400054 	ori	r5,r17,1
100079e8:	81400115 	stw	r5,4(r16)
100079ec:	20800315 	stw	r2,12(r4)
100079f0:	11000215 	stw	r4,8(r2)
100079f4:	8463883a 	add	r17,r16,r17
100079f8:	9c400515 	stw	r17,20(r19)
100079fc:	9c400415 	stw	r17,16(r19)
10007a00:	18800054 	ori	r2,r3,1
10007a04:	88800115 	stw	r2,4(r17)
10007a08:	8a000315 	stw	r8,12(r17)
10007a0c:	8a000215 	stw	r8,8(r17)
10007a10:	88e3883a 	add	r17,r17,r3
10007a14:	88c00015 	stw	r3,0(r17)
10007a18:	9009883a 	mov	r4,r18
10007a1c:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007a20:	80800204 	addi	r2,r16,8
10007a24:	00001b06 	br	10007a94 <_malloc_r+0x2a4>
10007a28:	04400404 	movi	r17,16
10007a2c:	89402536 	bltu	r17,r5,10007ac4 <_malloc_r+0x2d4>
10007a30:	000f9c80 	call	1000f9c8 <__malloc_lock>
10007a34:	00800184 	movi	r2,6
10007a38:	01000084 	movi	r4,2
10007a3c:	04c40074 	movhi	r19,4097
10007a40:	1085883a 	add	r2,r2,r2
10007a44:	9ccae904 	addi	r19,r19,11172
10007a48:	1085883a 	add	r2,r2,r2
10007a4c:	9885883a 	add	r2,r19,r2
10007a50:	14000117 	ldw	r16,4(r2)
10007a54:	10fffe04 	addi	r3,r2,-8
10007a58:	80c0d926 	beq	r16,r3,10007dc0 <_malloc_r+0x5d0>
10007a5c:	80c00117 	ldw	r3,4(r16)
10007a60:	81000317 	ldw	r4,12(r16)
10007a64:	00bfff04 	movi	r2,-4
10007a68:	1884703a 	and	r2,r3,r2
10007a6c:	81400217 	ldw	r5,8(r16)
10007a70:	8085883a 	add	r2,r16,r2
10007a74:	10c00117 	ldw	r3,4(r2)
10007a78:	29000315 	stw	r4,12(r5)
10007a7c:	21400215 	stw	r5,8(r4)
10007a80:	18c00054 	ori	r3,r3,1
10007a84:	10c00115 	stw	r3,4(r2)
10007a88:	9009883a 	mov	r4,r18
10007a8c:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007a90:	80800204 	addi	r2,r16,8
10007a94:	dfc00a17 	ldw	ra,40(sp)
10007a98:	df000917 	ldw	fp,36(sp)
10007a9c:	ddc00817 	ldw	r23,32(sp)
10007aa0:	dd800717 	ldw	r22,28(sp)
10007aa4:	dd400617 	ldw	r21,24(sp)
10007aa8:	dd000517 	ldw	r20,20(sp)
10007aac:	dcc00417 	ldw	r19,16(sp)
10007ab0:	dc800317 	ldw	r18,12(sp)
10007ab4:	dc400217 	ldw	r17,8(sp)
10007ab8:	dc000117 	ldw	r16,4(sp)
10007abc:	dec00b04 	addi	sp,sp,44
10007ac0:	f800283a 	ret
10007ac4:	00800304 	movi	r2,12
10007ac8:	90800015 	stw	r2,0(r18)
10007acc:	0005883a 	mov	r2,zero
10007ad0:	003ff006 	br	10007a94 <__alt_data_end+0xf8007a94>
10007ad4:	01002004 	movi	r4,128
10007ad8:	02001004 	movi	r8,64
10007adc:	01c00fc4 	movi	r7,63
10007ae0:	003f6106 	br	10007868 <__alt_data_end+0xf8007868>
10007ae4:	4009883a 	mov	r4,r8
10007ae8:	003f7506 	br	100078c0 <__alt_data_end+0xf80078c0>
10007aec:	81000317 	ldw	r4,12(r16)
10007af0:	003fde06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007af4:	81c5883a 	add	r2,r16,r7
10007af8:	11400117 	ldw	r5,4(r2)
10007afc:	9009883a 	mov	r4,r18
10007b00:	29400054 	ori	r5,r5,1
10007b04:	11400115 	stw	r5,4(r2)
10007b08:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007b0c:	80800204 	addi	r2,r16,8
10007b10:	003fe006 	br	10007a94 <__alt_data_end+0xf8007a94>
10007b14:	9c000217 	ldw	r16,8(r19)
10007b18:	00bfff04 	movi	r2,-4
10007b1c:	85800117 	ldw	r22,4(r16)
10007b20:	b0ac703a 	and	r22,r22,r2
10007b24:	b4400336 	bltu	r22,r17,10007b34 <_malloc_r+0x344>
10007b28:	b445c83a 	sub	r2,r22,r17
10007b2c:	00c003c4 	movi	r3,15
10007b30:	18805d16 	blt	r3,r2,10007ca8 <_malloc_r+0x4b8>
10007b34:	05c40074 	movhi	r23,4097
10007b38:	00840074 	movhi	r2,4097
10007b3c:	10974504 	addi	r2,r2,23828
10007b40:	bdd07104 	addi	r23,r23,16836
10007b44:	15400017 	ldw	r21,0(r2)
10007b48:	b8c00017 	ldw	r3,0(r23)
10007b4c:	00bfffc4 	movi	r2,-1
10007b50:	858d883a 	add	r6,r16,r22
10007b54:	8d6b883a 	add	r21,r17,r21
10007b58:	1880ea26 	beq	r3,r2,10007f04 <_malloc_r+0x714>
10007b5c:	ad4403c4 	addi	r21,r21,4111
10007b60:	00bc0004 	movi	r2,-4096
10007b64:	a8aa703a 	and	r21,r21,r2
10007b68:	a80b883a 	mov	r5,r21
10007b6c:	9009883a 	mov	r4,r18
10007b70:	d9800015 	stw	r6,0(sp)
10007b74:	0009b3c0 	call	10009b3c <_sbrk_r>
10007b78:	1029883a 	mov	r20,r2
10007b7c:	00bfffc4 	movi	r2,-1
10007b80:	d9800017 	ldw	r6,0(sp)
10007b84:	a080e826 	beq	r20,r2,10007f28 <_malloc_r+0x738>
10007b88:	a180a636 	bltu	r20,r6,10007e24 <_malloc_r+0x634>
10007b8c:	07040074 	movhi	fp,4097
10007b90:	e7174e04 	addi	fp,fp,23864
10007b94:	e0800017 	ldw	r2,0(fp)
10007b98:	a887883a 	add	r3,r21,r2
10007b9c:	e0c00015 	stw	r3,0(fp)
10007ba0:	3500e626 	beq	r6,r20,10007f3c <_malloc_r+0x74c>
10007ba4:	b9000017 	ldw	r4,0(r23)
10007ba8:	00bfffc4 	movi	r2,-1
10007bac:	2080ee26 	beq	r4,r2,10007f68 <_malloc_r+0x778>
10007bb0:	a185c83a 	sub	r2,r20,r6
10007bb4:	10c5883a 	add	r2,r2,r3
10007bb8:	e0800015 	stw	r2,0(fp)
10007bbc:	a0c001cc 	andi	r3,r20,7
10007bc0:	1800bc26 	beq	r3,zero,10007eb4 <_malloc_r+0x6c4>
10007bc4:	a0e9c83a 	sub	r20,r20,r3
10007bc8:	00840204 	movi	r2,4104
10007bcc:	a5000204 	addi	r20,r20,8
10007bd0:	10c7c83a 	sub	r3,r2,r3
10007bd4:	a545883a 	add	r2,r20,r21
10007bd8:	1083ffcc 	andi	r2,r2,4095
10007bdc:	18abc83a 	sub	r21,r3,r2
10007be0:	a80b883a 	mov	r5,r21
10007be4:	9009883a 	mov	r4,r18
10007be8:	0009b3c0 	call	10009b3c <_sbrk_r>
10007bec:	00ffffc4 	movi	r3,-1
10007bf0:	10c0e126 	beq	r2,r3,10007f78 <_malloc_r+0x788>
10007bf4:	1505c83a 	sub	r2,r2,r20
10007bf8:	1545883a 	add	r2,r2,r21
10007bfc:	10800054 	ori	r2,r2,1
10007c00:	e0c00017 	ldw	r3,0(fp)
10007c04:	9d000215 	stw	r20,8(r19)
10007c08:	a0800115 	stw	r2,4(r20)
10007c0c:	a8c7883a 	add	r3,r21,r3
10007c10:	e0c00015 	stw	r3,0(fp)
10007c14:	84c00e26 	beq	r16,r19,10007c50 <_malloc_r+0x460>
10007c18:	018003c4 	movi	r6,15
10007c1c:	3580a72e 	bgeu	r6,r22,10007ebc <_malloc_r+0x6cc>
10007c20:	81400117 	ldw	r5,4(r16)
10007c24:	013ffe04 	movi	r4,-8
10007c28:	b0bffd04 	addi	r2,r22,-12
10007c2c:	1104703a 	and	r2,r2,r4
10007c30:	2900004c 	andi	r4,r5,1
10007c34:	2088b03a 	or	r4,r4,r2
10007c38:	81000115 	stw	r4,4(r16)
10007c3c:	01400144 	movi	r5,5
10007c40:	8089883a 	add	r4,r16,r2
10007c44:	21400115 	stw	r5,4(r4)
10007c48:	21400215 	stw	r5,8(r4)
10007c4c:	3080cd36 	bltu	r6,r2,10007f84 <_malloc_r+0x794>
10007c50:	00840074 	movhi	r2,4097
10007c54:	10974404 	addi	r2,r2,23824
10007c58:	11000017 	ldw	r4,0(r2)
10007c5c:	20c0012e 	bgeu	r4,r3,10007c64 <_malloc_r+0x474>
10007c60:	10c00015 	stw	r3,0(r2)
10007c64:	00840074 	movhi	r2,4097
10007c68:	10974304 	addi	r2,r2,23820
10007c6c:	11000017 	ldw	r4,0(r2)
10007c70:	9c000217 	ldw	r16,8(r19)
10007c74:	20c0012e 	bgeu	r4,r3,10007c7c <_malloc_r+0x48c>
10007c78:	10c00015 	stw	r3,0(r2)
10007c7c:	80c00117 	ldw	r3,4(r16)
10007c80:	00bfff04 	movi	r2,-4
10007c84:	1886703a 	and	r3,r3,r2
10007c88:	1c45c83a 	sub	r2,r3,r17
10007c8c:	1c400236 	bltu	r3,r17,10007c98 <_malloc_r+0x4a8>
10007c90:	00c003c4 	movi	r3,15
10007c94:	18800416 	blt	r3,r2,10007ca8 <_malloc_r+0x4b8>
10007c98:	9009883a 	mov	r4,r18
10007c9c:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007ca0:	0005883a 	mov	r2,zero
10007ca4:	003f7b06 	br	10007a94 <__alt_data_end+0xf8007a94>
10007ca8:	88c00054 	ori	r3,r17,1
10007cac:	80c00115 	stw	r3,4(r16)
10007cb0:	8463883a 	add	r17,r16,r17
10007cb4:	10800054 	ori	r2,r2,1
10007cb8:	9c400215 	stw	r17,8(r19)
10007cbc:	88800115 	stw	r2,4(r17)
10007cc0:	9009883a 	mov	r4,r18
10007cc4:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007cc8:	80800204 	addi	r2,r16,8
10007ccc:	003f7106 	br	10007a94 <__alt_data_end+0xf8007a94>
10007cd0:	00c00504 	movi	r3,20
10007cd4:	18804a2e 	bgeu	r3,r2,10007e00 <_malloc_r+0x610>
10007cd8:	00c01504 	movi	r3,84
10007cdc:	18806e36 	bltu	r3,r2,10007e98 <_malloc_r+0x6a8>
10007ce0:	8804d33a 	srli	r2,r17,12
10007ce4:	12001bc4 	addi	r8,r2,111
10007ce8:	11c01b84 	addi	r7,r2,110
10007cec:	4209883a 	add	r4,r8,r8
10007cf0:	003edd06 	br	10007868 <__alt_data_end+0xf8007868>
10007cf4:	3804d27a 	srli	r2,r7,9
10007cf8:	00c00104 	movi	r3,4
10007cfc:	1880442e 	bgeu	r3,r2,10007e10 <_malloc_r+0x620>
10007d00:	00c00504 	movi	r3,20
10007d04:	18808136 	bltu	r3,r2,10007f0c <_malloc_r+0x71c>
10007d08:	11401704 	addi	r5,r2,92
10007d0c:	10c016c4 	addi	r3,r2,91
10007d10:	294b883a 	add	r5,r5,r5
10007d14:	294b883a 	add	r5,r5,r5
10007d18:	294b883a 	add	r5,r5,r5
10007d1c:	994b883a 	add	r5,r19,r5
10007d20:	28800017 	ldw	r2,0(r5)
10007d24:	01840074 	movhi	r6,4097
10007d28:	297ffe04 	addi	r5,r5,-8
10007d2c:	318ae904 	addi	r6,r6,11172
10007d30:	28806526 	beq	r5,r2,10007ec8 <_malloc_r+0x6d8>
10007d34:	01bfff04 	movi	r6,-4
10007d38:	10c00117 	ldw	r3,4(r2)
10007d3c:	1986703a 	and	r3,r3,r6
10007d40:	38c0022e 	bgeu	r7,r3,10007d4c <_malloc_r+0x55c>
10007d44:	10800217 	ldw	r2,8(r2)
10007d48:	28bffb1e 	bne	r5,r2,10007d38 <__alt_data_end+0xf8007d38>
10007d4c:	11400317 	ldw	r5,12(r2)
10007d50:	98c00117 	ldw	r3,4(r19)
10007d54:	81400315 	stw	r5,12(r16)
10007d58:	80800215 	stw	r2,8(r16)
10007d5c:	2c000215 	stw	r16,8(r5)
10007d60:	14000315 	stw	r16,12(r2)
10007d64:	003ef806 	br	10007948 <__alt_data_end+0xf8007948>
10007d68:	88c00054 	ori	r3,r17,1
10007d6c:	80c00115 	stw	r3,4(r16)
10007d70:	8463883a 	add	r17,r16,r17
10007d74:	34400515 	stw	r17,20(r6)
10007d78:	34400415 	stw	r17,16(r6)
10007d7c:	10c00054 	ori	r3,r2,1
10007d80:	8a000315 	stw	r8,12(r17)
10007d84:	8a000215 	stw	r8,8(r17)
10007d88:	88c00115 	stw	r3,4(r17)
10007d8c:	88a3883a 	add	r17,r17,r2
10007d90:	88800015 	stw	r2,0(r17)
10007d94:	9009883a 	mov	r4,r18
10007d98:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007d9c:	80800204 	addi	r2,r16,8
10007da0:	003f3c06 	br	10007a94 <__alt_data_end+0xf8007a94>
10007da4:	30c00117 	ldw	r3,4(r6)
10007da8:	003ee706 	br	10007948 <__alt_data_end+0xf8007948>
10007dac:	5ac00044 	addi	r11,r11,1
10007db0:	588000cc 	andi	r2,r11,3
10007db4:	31800204 	addi	r6,r6,8
10007db8:	103efd1e 	bne	r2,zero,100079b0 <__alt_data_end+0xf80079b0>
10007dbc:	00002406 	br	10007e50 <_malloc_r+0x660>
10007dc0:	14000317 	ldw	r16,12(r2)
10007dc4:	143f251e 	bne	r2,r16,10007a5c <__alt_data_end+0xf8007a5c>
10007dc8:	21000084 	addi	r4,r4,2
10007dcc:	003ebc06 	br	100078c0 <__alt_data_end+0xf80078c0>
10007dd0:	8085883a 	add	r2,r16,r2
10007dd4:	10c00117 	ldw	r3,4(r2)
10007dd8:	81000317 	ldw	r4,12(r16)
10007ddc:	81400217 	ldw	r5,8(r16)
10007de0:	18c00054 	ori	r3,r3,1
10007de4:	10c00115 	stw	r3,4(r2)
10007de8:	29000315 	stw	r4,12(r5)
10007dec:	21400215 	stw	r5,8(r4)
10007df0:	9009883a 	mov	r4,r18
10007df4:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10007df8:	80800204 	addi	r2,r16,8
10007dfc:	003f2506 	br	10007a94 <__alt_data_end+0xf8007a94>
10007e00:	12001704 	addi	r8,r2,92
10007e04:	11c016c4 	addi	r7,r2,91
10007e08:	4209883a 	add	r4,r8,r8
10007e0c:	003e9606 	br	10007868 <__alt_data_end+0xf8007868>
10007e10:	3804d1ba 	srli	r2,r7,6
10007e14:	11400e44 	addi	r5,r2,57
10007e18:	10c00e04 	addi	r3,r2,56
10007e1c:	294b883a 	add	r5,r5,r5
10007e20:	003fbc06 	br	10007d14 <__alt_data_end+0xf8007d14>
10007e24:	84ff5926 	beq	r16,r19,10007b8c <__alt_data_end+0xf8007b8c>
10007e28:	00840074 	movhi	r2,4097
10007e2c:	108ae904 	addi	r2,r2,11172
10007e30:	14000217 	ldw	r16,8(r2)
10007e34:	00bfff04 	movi	r2,-4
10007e38:	80c00117 	ldw	r3,4(r16)
10007e3c:	1886703a 	and	r3,r3,r2
10007e40:	003f9106 	br	10007c88 <__alt_data_end+0xf8007c88>
10007e44:	60800217 	ldw	r2,8(r12)
10007e48:	213fffc4 	addi	r4,r4,-1
10007e4c:	1300651e 	bne	r2,r12,10007fe4 <_malloc_r+0x7f4>
10007e50:	208000cc 	andi	r2,r4,3
10007e54:	633ffe04 	addi	r12,r12,-8
10007e58:	103ffa1e 	bne	r2,zero,10007e44 <__alt_data_end+0xf8007e44>
10007e5c:	98800117 	ldw	r2,4(r19)
10007e60:	0146303a 	nor	r3,zero,r5
10007e64:	1884703a 	and	r2,r3,r2
10007e68:	98800115 	stw	r2,4(r19)
10007e6c:	294b883a 	add	r5,r5,r5
10007e70:	117f2836 	bltu	r2,r5,10007b14 <__alt_data_end+0xf8007b14>
10007e74:	283f2726 	beq	r5,zero,10007b14 <__alt_data_end+0xf8007b14>
10007e78:	2886703a 	and	r3,r5,r2
10007e7c:	5809883a 	mov	r4,r11
10007e80:	183ec31e 	bne	r3,zero,10007990 <__alt_data_end+0xf8007990>
10007e84:	294b883a 	add	r5,r5,r5
10007e88:	2886703a 	and	r3,r5,r2
10007e8c:	21000104 	addi	r4,r4,4
10007e90:	183ffc26 	beq	r3,zero,10007e84 <__alt_data_end+0xf8007e84>
10007e94:	003ebe06 	br	10007990 <__alt_data_end+0xf8007990>
10007e98:	00c05504 	movi	r3,340
10007e9c:	18801236 	bltu	r3,r2,10007ee8 <_malloc_r+0x6f8>
10007ea0:	8804d3fa 	srli	r2,r17,15
10007ea4:	12001e04 	addi	r8,r2,120
10007ea8:	11c01dc4 	addi	r7,r2,119
10007eac:	4209883a 	add	r4,r8,r8
10007eb0:	003e6d06 	br	10007868 <__alt_data_end+0xf8007868>
10007eb4:	00c40004 	movi	r3,4096
10007eb8:	003f4606 	br	10007bd4 <__alt_data_end+0xf8007bd4>
10007ebc:	00800044 	movi	r2,1
10007ec0:	a0800115 	stw	r2,4(r20)
10007ec4:	003f7406 	br	10007c98 <__alt_data_end+0xf8007c98>
10007ec8:	1805d0ba 	srai	r2,r3,2
10007ecc:	01c00044 	movi	r7,1
10007ed0:	30c00117 	ldw	r3,4(r6)
10007ed4:	388e983a 	sll	r7,r7,r2
10007ed8:	2805883a 	mov	r2,r5
10007edc:	38c6b03a 	or	r3,r7,r3
10007ee0:	30c00115 	stw	r3,4(r6)
10007ee4:	003f9b06 	br	10007d54 <__alt_data_end+0xf8007d54>
10007ee8:	00c15504 	movi	r3,1364
10007eec:	18801a36 	bltu	r3,r2,10007f58 <_malloc_r+0x768>
10007ef0:	8804d4ba 	srli	r2,r17,18
10007ef4:	12001f44 	addi	r8,r2,125
10007ef8:	11c01f04 	addi	r7,r2,124
10007efc:	4209883a 	add	r4,r8,r8
10007f00:	003e5906 	br	10007868 <__alt_data_end+0xf8007868>
10007f04:	ad400404 	addi	r21,r21,16
10007f08:	003f1706 	br	10007b68 <__alt_data_end+0xf8007b68>
10007f0c:	00c01504 	movi	r3,84
10007f10:	18802336 	bltu	r3,r2,10007fa0 <_malloc_r+0x7b0>
10007f14:	3804d33a 	srli	r2,r7,12
10007f18:	11401bc4 	addi	r5,r2,111
10007f1c:	10c01b84 	addi	r3,r2,110
10007f20:	294b883a 	add	r5,r5,r5
10007f24:	003f7b06 	br	10007d14 <__alt_data_end+0xf8007d14>
10007f28:	9c000217 	ldw	r16,8(r19)
10007f2c:	00bfff04 	movi	r2,-4
10007f30:	80c00117 	ldw	r3,4(r16)
10007f34:	1886703a 	and	r3,r3,r2
10007f38:	003f5306 	br	10007c88 <__alt_data_end+0xf8007c88>
10007f3c:	3083ffcc 	andi	r2,r6,4095
10007f40:	103f181e 	bne	r2,zero,10007ba4 <__alt_data_end+0xf8007ba4>
10007f44:	99000217 	ldw	r4,8(r19)
10007f48:	b545883a 	add	r2,r22,r21
10007f4c:	10800054 	ori	r2,r2,1
10007f50:	20800115 	stw	r2,4(r4)
10007f54:	003f3e06 	br	10007c50 <__alt_data_end+0xf8007c50>
10007f58:	01003f84 	movi	r4,254
10007f5c:	02001fc4 	movi	r8,127
10007f60:	01c01f84 	movi	r7,126
10007f64:	003e4006 	br	10007868 <__alt_data_end+0xf8007868>
10007f68:	00840074 	movhi	r2,4097
10007f6c:	10907104 	addi	r2,r2,16836
10007f70:	15000015 	stw	r20,0(r2)
10007f74:	003f1106 	br	10007bbc <__alt_data_end+0xf8007bbc>
10007f78:	00800044 	movi	r2,1
10007f7c:	002b883a 	mov	r21,zero
10007f80:	003f1f06 	br	10007c00 <__alt_data_end+0xf8007c00>
10007f84:	81400204 	addi	r5,r16,8
10007f88:	9009883a 	mov	r4,r18
10007f8c:	0006bf80 	call	10006bf8 <_free_r>
10007f90:	00840074 	movhi	r2,4097
10007f94:	10974e04 	addi	r2,r2,23864
10007f98:	10c00017 	ldw	r3,0(r2)
10007f9c:	003f2c06 	br	10007c50 <__alt_data_end+0xf8007c50>
10007fa0:	00c05504 	movi	r3,340
10007fa4:	18800536 	bltu	r3,r2,10007fbc <_malloc_r+0x7cc>
10007fa8:	3804d3fa 	srli	r2,r7,15
10007fac:	11401e04 	addi	r5,r2,120
10007fb0:	10c01dc4 	addi	r3,r2,119
10007fb4:	294b883a 	add	r5,r5,r5
10007fb8:	003f5606 	br	10007d14 <__alt_data_end+0xf8007d14>
10007fbc:	00c15504 	movi	r3,1364
10007fc0:	18800536 	bltu	r3,r2,10007fd8 <_malloc_r+0x7e8>
10007fc4:	3804d4ba 	srli	r2,r7,18
10007fc8:	11401f44 	addi	r5,r2,125
10007fcc:	10c01f04 	addi	r3,r2,124
10007fd0:	294b883a 	add	r5,r5,r5
10007fd4:	003f4f06 	br	10007d14 <__alt_data_end+0xf8007d14>
10007fd8:	01403f84 	movi	r5,254
10007fdc:	00c01f84 	movi	r3,126
10007fe0:	003f4c06 	br	10007d14 <__alt_data_end+0xf8007d14>
10007fe4:	98800117 	ldw	r2,4(r19)
10007fe8:	003fa006 	br	10007e6c <__alt_data_end+0xf8007e6c>
10007fec:	8808d0fa 	srli	r4,r17,3
10007ff0:	20800044 	addi	r2,r4,1
10007ff4:	1085883a 	add	r2,r2,r2
10007ff8:	003e9006 	br	10007a3c <__alt_data_end+0xf8007a3c>

10007ffc <memchr>:
10007ffc:	208000cc 	andi	r2,r4,3
10008000:	280f883a 	mov	r7,r5
10008004:	10003426 	beq	r2,zero,100080d8 <memchr+0xdc>
10008008:	30bfffc4 	addi	r2,r6,-1
1000800c:	30001a26 	beq	r6,zero,10008078 <memchr+0x7c>
10008010:	20c00003 	ldbu	r3,0(r4)
10008014:	29803fcc 	andi	r6,r5,255
10008018:	30c0051e 	bne	r6,r3,10008030 <memchr+0x34>
1000801c:	00001806 	br	10008080 <memchr+0x84>
10008020:	10001526 	beq	r2,zero,10008078 <memchr+0x7c>
10008024:	20c00003 	ldbu	r3,0(r4)
10008028:	10bfffc4 	addi	r2,r2,-1
1000802c:	30c01426 	beq	r6,r3,10008080 <memchr+0x84>
10008030:	21000044 	addi	r4,r4,1
10008034:	20c000cc 	andi	r3,r4,3
10008038:	183ff91e 	bne	r3,zero,10008020 <__alt_data_end+0xf8008020>
1000803c:	020000c4 	movi	r8,3
10008040:	40801136 	bltu	r8,r2,10008088 <memchr+0x8c>
10008044:	10000c26 	beq	r2,zero,10008078 <memchr+0x7c>
10008048:	20c00003 	ldbu	r3,0(r4)
1000804c:	29403fcc 	andi	r5,r5,255
10008050:	28c00b26 	beq	r5,r3,10008080 <memchr+0x84>
10008054:	20c00044 	addi	r3,r4,1
10008058:	39803fcc 	andi	r6,r7,255
1000805c:	2089883a 	add	r4,r4,r2
10008060:	00000306 	br	10008070 <memchr+0x74>
10008064:	18c00044 	addi	r3,r3,1
10008068:	197fffc3 	ldbu	r5,-1(r3)
1000806c:	31400526 	beq	r6,r5,10008084 <memchr+0x88>
10008070:	1805883a 	mov	r2,r3
10008074:	20fffb1e 	bne	r4,r3,10008064 <__alt_data_end+0xf8008064>
10008078:	0005883a 	mov	r2,zero
1000807c:	f800283a 	ret
10008080:	2005883a 	mov	r2,r4
10008084:	f800283a 	ret
10008088:	28c03fcc 	andi	r3,r5,255
1000808c:	1812923a 	slli	r9,r3,8
10008090:	02ffbff4 	movhi	r11,65279
10008094:	02a02074 	movhi	r10,32897
10008098:	48d2b03a 	or	r9,r9,r3
1000809c:	4806943a 	slli	r3,r9,16
100080a0:	5affbfc4 	addi	r11,r11,-257
100080a4:	52a02004 	addi	r10,r10,-32640
100080a8:	48d2b03a 	or	r9,r9,r3
100080ac:	20c00017 	ldw	r3,0(r4)
100080b0:	48c6f03a 	xor	r3,r9,r3
100080b4:	1acd883a 	add	r6,r3,r11
100080b8:	00c6303a 	nor	r3,zero,r3
100080bc:	30c6703a 	and	r3,r6,r3
100080c0:	1a86703a 	and	r3,r3,r10
100080c4:	183fe01e 	bne	r3,zero,10008048 <__alt_data_end+0xf8008048>
100080c8:	10bfff04 	addi	r2,r2,-4
100080cc:	21000104 	addi	r4,r4,4
100080d0:	40bff636 	bltu	r8,r2,100080ac <__alt_data_end+0xf80080ac>
100080d4:	003fdb06 	br	10008044 <__alt_data_end+0xf8008044>
100080d8:	3005883a 	mov	r2,r6
100080dc:	003fd706 	br	1000803c <__alt_data_end+0xf800803c>

100080e0 <memcpy>:
100080e0:	defffd04 	addi	sp,sp,-12
100080e4:	dfc00215 	stw	ra,8(sp)
100080e8:	dc400115 	stw	r17,4(sp)
100080ec:	dc000015 	stw	r16,0(sp)
100080f0:	00c003c4 	movi	r3,15
100080f4:	2005883a 	mov	r2,r4
100080f8:	1980452e 	bgeu	r3,r6,10008210 <memcpy+0x130>
100080fc:	2906b03a 	or	r3,r5,r4
10008100:	18c000cc 	andi	r3,r3,3
10008104:	1800441e 	bne	r3,zero,10008218 <memcpy+0x138>
10008108:	347ffc04 	addi	r17,r6,-16
1000810c:	8822d13a 	srli	r17,r17,4
10008110:	28c00104 	addi	r3,r5,4
10008114:	23400104 	addi	r13,r4,4
10008118:	8820913a 	slli	r16,r17,4
1000811c:	2b000204 	addi	r12,r5,8
10008120:	22c00204 	addi	r11,r4,8
10008124:	84000504 	addi	r16,r16,20
10008128:	2a800304 	addi	r10,r5,12
1000812c:	22400304 	addi	r9,r4,12
10008130:	2c21883a 	add	r16,r5,r16
10008134:	2811883a 	mov	r8,r5
10008138:	200f883a 	mov	r7,r4
1000813c:	41000017 	ldw	r4,0(r8)
10008140:	1fc00017 	ldw	ra,0(r3)
10008144:	63c00017 	ldw	r15,0(r12)
10008148:	39000015 	stw	r4,0(r7)
1000814c:	53800017 	ldw	r14,0(r10)
10008150:	6fc00015 	stw	ra,0(r13)
10008154:	5bc00015 	stw	r15,0(r11)
10008158:	4b800015 	stw	r14,0(r9)
1000815c:	18c00404 	addi	r3,r3,16
10008160:	39c00404 	addi	r7,r7,16
10008164:	42000404 	addi	r8,r8,16
10008168:	6b400404 	addi	r13,r13,16
1000816c:	63000404 	addi	r12,r12,16
10008170:	5ac00404 	addi	r11,r11,16
10008174:	52800404 	addi	r10,r10,16
10008178:	4a400404 	addi	r9,r9,16
1000817c:	1c3fef1e 	bne	r3,r16,1000813c <__alt_data_end+0xf800813c>
10008180:	89c00044 	addi	r7,r17,1
10008184:	380e913a 	slli	r7,r7,4
10008188:	310003cc 	andi	r4,r6,15
1000818c:	02c000c4 	movi	r11,3
10008190:	11c7883a 	add	r3,r2,r7
10008194:	29cb883a 	add	r5,r5,r7
10008198:	5900212e 	bgeu	r11,r4,10008220 <memcpy+0x140>
1000819c:	1813883a 	mov	r9,r3
100081a0:	2811883a 	mov	r8,r5
100081a4:	200f883a 	mov	r7,r4
100081a8:	42800017 	ldw	r10,0(r8)
100081ac:	4a400104 	addi	r9,r9,4
100081b0:	39ffff04 	addi	r7,r7,-4
100081b4:	4abfff15 	stw	r10,-4(r9)
100081b8:	42000104 	addi	r8,r8,4
100081bc:	59fffa36 	bltu	r11,r7,100081a8 <__alt_data_end+0xf80081a8>
100081c0:	213fff04 	addi	r4,r4,-4
100081c4:	2008d0ba 	srli	r4,r4,2
100081c8:	318000cc 	andi	r6,r6,3
100081cc:	21000044 	addi	r4,r4,1
100081d0:	2109883a 	add	r4,r4,r4
100081d4:	2109883a 	add	r4,r4,r4
100081d8:	1907883a 	add	r3,r3,r4
100081dc:	290b883a 	add	r5,r5,r4
100081e0:	30000626 	beq	r6,zero,100081fc <memcpy+0x11c>
100081e4:	198d883a 	add	r6,r3,r6
100081e8:	29c00003 	ldbu	r7,0(r5)
100081ec:	18c00044 	addi	r3,r3,1
100081f0:	29400044 	addi	r5,r5,1
100081f4:	19ffffc5 	stb	r7,-1(r3)
100081f8:	19bffb1e 	bne	r3,r6,100081e8 <__alt_data_end+0xf80081e8>
100081fc:	dfc00217 	ldw	ra,8(sp)
10008200:	dc400117 	ldw	r17,4(sp)
10008204:	dc000017 	ldw	r16,0(sp)
10008208:	dec00304 	addi	sp,sp,12
1000820c:	f800283a 	ret
10008210:	2007883a 	mov	r3,r4
10008214:	003ff206 	br	100081e0 <__alt_data_end+0xf80081e0>
10008218:	2007883a 	mov	r3,r4
1000821c:	003ff106 	br	100081e4 <__alt_data_end+0xf80081e4>
10008220:	200d883a 	mov	r6,r4
10008224:	003fee06 	br	100081e0 <__alt_data_end+0xf80081e0>

10008228 <memmove>:
10008228:	2005883a 	mov	r2,r4
1000822c:	29000b2e 	bgeu	r5,r4,1000825c <memmove+0x34>
10008230:	298f883a 	add	r7,r5,r6
10008234:	21c0092e 	bgeu	r4,r7,1000825c <memmove+0x34>
10008238:	2187883a 	add	r3,r4,r6
1000823c:	198bc83a 	sub	r5,r3,r6
10008240:	30004826 	beq	r6,zero,10008364 <memmove+0x13c>
10008244:	39ffffc4 	addi	r7,r7,-1
10008248:	39000003 	ldbu	r4,0(r7)
1000824c:	18ffffc4 	addi	r3,r3,-1
10008250:	19000005 	stb	r4,0(r3)
10008254:	28fffb1e 	bne	r5,r3,10008244 <__alt_data_end+0xf8008244>
10008258:	f800283a 	ret
1000825c:	00c003c4 	movi	r3,15
10008260:	1980412e 	bgeu	r3,r6,10008368 <memmove+0x140>
10008264:	2886b03a 	or	r3,r5,r2
10008268:	18c000cc 	andi	r3,r3,3
1000826c:	1800401e 	bne	r3,zero,10008370 <memmove+0x148>
10008270:	33fffc04 	addi	r15,r6,-16
10008274:	781ed13a 	srli	r15,r15,4
10008278:	28c00104 	addi	r3,r5,4
1000827c:	13400104 	addi	r13,r2,4
10008280:	781c913a 	slli	r14,r15,4
10008284:	2b000204 	addi	r12,r5,8
10008288:	12c00204 	addi	r11,r2,8
1000828c:	73800504 	addi	r14,r14,20
10008290:	2a800304 	addi	r10,r5,12
10008294:	12400304 	addi	r9,r2,12
10008298:	2b9d883a 	add	r14,r5,r14
1000829c:	2811883a 	mov	r8,r5
100082a0:	100f883a 	mov	r7,r2
100082a4:	41000017 	ldw	r4,0(r8)
100082a8:	39c00404 	addi	r7,r7,16
100082ac:	18c00404 	addi	r3,r3,16
100082b0:	393ffc15 	stw	r4,-16(r7)
100082b4:	193ffc17 	ldw	r4,-16(r3)
100082b8:	6b400404 	addi	r13,r13,16
100082bc:	5ac00404 	addi	r11,r11,16
100082c0:	693ffc15 	stw	r4,-16(r13)
100082c4:	61000017 	ldw	r4,0(r12)
100082c8:	4a400404 	addi	r9,r9,16
100082cc:	42000404 	addi	r8,r8,16
100082d0:	593ffc15 	stw	r4,-16(r11)
100082d4:	51000017 	ldw	r4,0(r10)
100082d8:	63000404 	addi	r12,r12,16
100082dc:	52800404 	addi	r10,r10,16
100082e0:	493ffc15 	stw	r4,-16(r9)
100082e4:	1bbfef1e 	bne	r3,r14,100082a4 <__alt_data_end+0xf80082a4>
100082e8:	79000044 	addi	r4,r15,1
100082ec:	2008913a 	slli	r4,r4,4
100082f0:	328003cc 	andi	r10,r6,15
100082f4:	02c000c4 	movi	r11,3
100082f8:	1107883a 	add	r3,r2,r4
100082fc:	290b883a 	add	r5,r5,r4
10008300:	5a801e2e 	bgeu	r11,r10,1000837c <memmove+0x154>
10008304:	1813883a 	mov	r9,r3
10008308:	2811883a 	mov	r8,r5
1000830c:	500f883a 	mov	r7,r10
10008310:	41000017 	ldw	r4,0(r8)
10008314:	4a400104 	addi	r9,r9,4
10008318:	39ffff04 	addi	r7,r7,-4
1000831c:	493fff15 	stw	r4,-4(r9)
10008320:	42000104 	addi	r8,r8,4
10008324:	59fffa36 	bltu	r11,r7,10008310 <__alt_data_end+0xf8008310>
10008328:	513fff04 	addi	r4,r10,-4
1000832c:	2008d0ba 	srli	r4,r4,2
10008330:	318000cc 	andi	r6,r6,3
10008334:	21000044 	addi	r4,r4,1
10008338:	2109883a 	add	r4,r4,r4
1000833c:	2109883a 	add	r4,r4,r4
10008340:	1907883a 	add	r3,r3,r4
10008344:	290b883a 	add	r5,r5,r4
10008348:	30000b26 	beq	r6,zero,10008378 <memmove+0x150>
1000834c:	198d883a 	add	r6,r3,r6
10008350:	29c00003 	ldbu	r7,0(r5)
10008354:	18c00044 	addi	r3,r3,1
10008358:	29400044 	addi	r5,r5,1
1000835c:	19ffffc5 	stb	r7,-1(r3)
10008360:	19bffb1e 	bne	r3,r6,10008350 <__alt_data_end+0xf8008350>
10008364:	f800283a 	ret
10008368:	1007883a 	mov	r3,r2
1000836c:	003ff606 	br	10008348 <__alt_data_end+0xf8008348>
10008370:	1007883a 	mov	r3,r2
10008374:	003ff506 	br	1000834c <__alt_data_end+0xf800834c>
10008378:	f800283a 	ret
1000837c:	500d883a 	mov	r6,r10
10008380:	003ff106 	br	10008348 <__alt_data_end+0xf8008348>

10008384 <memset>:
10008384:	20c000cc 	andi	r3,r4,3
10008388:	2005883a 	mov	r2,r4
1000838c:	18004426 	beq	r3,zero,100084a0 <memset+0x11c>
10008390:	31ffffc4 	addi	r7,r6,-1
10008394:	30004026 	beq	r6,zero,10008498 <memset+0x114>
10008398:	2813883a 	mov	r9,r5
1000839c:	200d883a 	mov	r6,r4
100083a0:	2007883a 	mov	r3,r4
100083a4:	00000406 	br	100083b8 <memset+0x34>
100083a8:	3a3fffc4 	addi	r8,r7,-1
100083ac:	31800044 	addi	r6,r6,1
100083b0:	38003926 	beq	r7,zero,10008498 <memset+0x114>
100083b4:	400f883a 	mov	r7,r8
100083b8:	18c00044 	addi	r3,r3,1
100083bc:	32400005 	stb	r9,0(r6)
100083c0:	1a0000cc 	andi	r8,r3,3
100083c4:	403ff81e 	bne	r8,zero,100083a8 <__alt_data_end+0xf80083a8>
100083c8:	010000c4 	movi	r4,3
100083cc:	21c02d2e 	bgeu	r4,r7,10008484 <memset+0x100>
100083d0:	29003fcc 	andi	r4,r5,255
100083d4:	200c923a 	slli	r6,r4,8
100083d8:	3108b03a 	or	r4,r6,r4
100083dc:	200c943a 	slli	r6,r4,16
100083e0:	218cb03a 	or	r6,r4,r6
100083e4:	010003c4 	movi	r4,15
100083e8:	21c0182e 	bgeu	r4,r7,1000844c <memset+0xc8>
100083ec:	3b3ffc04 	addi	r12,r7,-16
100083f0:	6018d13a 	srli	r12,r12,4
100083f4:	1a000104 	addi	r8,r3,4
100083f8:	1ac00204 	addi	r11,r3,8
100083fc:	6008913a 	slli	r4,r12,4
10008400:	1a800304 	addi	r10,r3,12
10008404:	1813883a 	mov	r9,r3
10008408:	21000504 	addi	r4,r4,20
1000840c:	1909883a 	add	r4,r3,r4
10008410:	49800015 	stw	r6,0(r9)
10008414:	41800015 	stw	r6,0(r8)
10008418:	59800015 	stw	r6,0(r11)
1000841c:	51800015 	stw	r6,0(r10)
10008420:	42000404 	addi	r8,r8,16
10008424:	4a400404 	addi	r9,r9,16
10008428:	5ac00404 	addi	r11,r11,16
1000842c:	52800404 	addi	r10,r10,16
10008430:	413ff71e 	bne	r8,r4,10008410 <__alt_data_end+0xf8008410>
10008434:	63000044 	addi	r12,r12,1
10008438:	6018913a 	slli	r12,r12,4
1000843c:	39c003cc 	andi	r7,r7,15
10008440:	010000c4 	movi	r4,3
10008444:	1b07883a 	add	r3,r3,r12
10008448:	21c00e2e 	bgeu	r4,r7,10008484 <memset+0x100>
1000844c:	1813883a 	mov	r9,r3
10008450:	3811883a 	mov	r8,r7
10008454:	010000c4 	movi	r4,3
10008458:	49800015 	stw	r6,0(r9)
1000845c:	423fff04 	addi	r8,r8,-4
10008460:	4a400104 	addi	r9,r9,4
10008464:	223ffc36 	bltu	r4,r8,10008458 <__alt_data_end+0xf8008458>
10008468:	393fff04 	addi	r4,r7,-4
1000846c:	2008d0ba 	srli	r4,r4,2
10008470:	39c000cc 	andi	r7,r7,3
10008474:	21000044 	addi	r4,r4,1
10008478:	2109883a 	add	r4,r4,r4
1000847c:	2109883a 	add	r4,r4,r4
10008480:	1907883a 	add	r3,r3,r4
10008484:	38000526 	beq	r7,zero,1000849c <memset+0x118>
10008488:	19cf883a 	add	r7,r3,r7
1000848c:	19400005 	stb	r5,0(r3)
10008490:	18c00044 	addi	r3,r3,1
10008494:	38fffd1e 	bne	r7,r3,1000848c <__alt_data_end+0xf800848c>
10008498:	f800283a 	ret
1000849c:	f800283a 	ret
100084a0:	2007883a 	mov	r3,r4
100084a4:	300f883a 	mov	r7,r6
100084a8:	003fc706 	br	100083c8 <__alt_data_end+0xf80083c8>

100084ac <_Balloc>:
100084ac:	20801317 	ldw	r2,76(r4)
100084b0:	defffc04 	addi	sp,sp,-16
100084b4:	dc400115 	stw	r17,4(sp)
100084b8:	dc000015 	stw	r16,0(sp)
100084bc:	dfc00315 	stw	ra,12(sp)
100084c0:	dc800215 	stw	r18,8(sp)
100084c4:	2023883a 	mov	r17,r4
100084c8:	2821883a 	mov	r16,r5
100084cc:	10000f26 	beq	r2,zero,1000850c <_Balloc+0x60>
100084d0:	8407883a 	add	r3,r16,r16
100084d4:	18c7883a 	add	r3,r3,r3
100084d8:	10c7883a 	add	r3,r2,r3
100084dc:	18800017 	ldw	r2,0(r3)
100084e0:	10001126 	beq	r2,zero,10008528 <_Balloc+0x7c>
100084e4:	11000017 	ldw	r4,0(r2)
100084e8:	19000015 	stw	r4,0(r3)
100084ec:	10000415 	stw	zero,16(r2)
100084f0:	10000315 	stw	zero,12(r2)
100084f4:	dfc00317 	ldw	ra,12(sp)
100084f8:	dc800217 	ldw	r18,8(sp)
100084fc:	dc400117 	ldw	r17,4(sp)
10008500:	dc000017 	ldw	r16,0(sp)
10008504:	dec00404 	addi	sp,sp,16
10008508:	f800283a 	ret
1000850c:	01800844 	movi	r6,33
10008510:	01400104 	movi	r5,4
10008514:	000b5540 	call	1000b554 <_calloc_r>
10008518:	88801315 	stw	r2,76(r17)
1000851c:	103fec1e 	bne	r2,zero,100084d0 <__alt_data_end+0xf80084d0>
10008520:	0005883a 	mov	r2,zero
10008524:	003ff306 	br	100084f4 <__alt_data_end+0xf80084f4>
10008528:	01400044 	movi	r5,1
1000852c:	2c24983a 	sll	r18,r5,r16
10008530:	8809883a 	mov	r4,r17
10008534:	91800144 	addi	r6,r18,5
10008538:	318d883a 	add	r6,r6,r6
1000853c:	318d883a 	add	r6,r6,r6
10008540:	000b5540 	call	1000b554 <_calloc_r>
10008544:	103ff626 	beq	r2,zero,10008520 <__alt_data_end+0xf8008520>
10008548:	14000115 	stw	r16,4(r2)
1000854c:	14800215 	stw	r18,8(r2)
10008550:	003fe606 	br	100084ec <__alt_data_end+0xf80084ec>

10008554 <_Bfree>:
10008554:	28000826 	beq	r5,zero,10008578 <_Bfree+0x24>
10008558:	28c00117 	ldw	r3,4(r5)
1000855c:	20801317 	ldw	r2,76(r4)
10008560:	18c7883a 	add	r3,r3,r3
10008564:	18c7883a 	add	r3,r3,r3
10008568:	10c5883a 	add	r2,r2,r3
1000856c:	10c00017 	ldw	r3,0(r2)
10008570:	28c00015 	stw	r3,0(r5)
10008574:	11400015 	stw	r5,0(r2)
10008578:	f800283a 	ret

1000857c <__multadd>:
1000857c:	defff704 	addi	sp,sp,-36
10008580:	dc800215 	stw	r18,8(sp)
10008584:	2c800417 	ldw	r18,16(r5)
10008588:	dd800615 	stw	r22,24(sp)
1000858c:	dd400515 	stw	r21,20(sp)
10008590:	dd000415 	stw	r20,16(sp)
10008594:	dcc00315 	stw	r19,12(sp)
10008598:	dc400115 	stw	r17,4(sp)
1000859c:	dc000015 	stw	r16,0(sp)
100085a0:	dfc00815 	stw	ra,32(sp)
100085a4:	ddc00715 	stw	r23,28(sp)
100085a8:	2827883a 	mov	r19,r5
100085ac:	2029883a 	mov	r20,r4
100085b0:	3023883a 	mov	r17,r6
100085b4:	3821883a 	mov	r16,r7
100085b8:	2d400504 	addi	r21,r5,20
100085bc:	002d883a 	mov	r22,zero
100085c0:	adc00017 	ldw	r23,0(r21)
100085c4:	880b883a 	mov	r5,r17
100085c8:	ad400104 	addi	r21,r21,4
100085cc:	b93fffcc 	andi	r4,r23,65535
100085d0:	000cb600 	call	1000cb60 <__mulsi3>
100085d4:	b808d43a 	srli	r4,r23,16
100085d8:	880b883a 	mov	r5,r17
100085dc:	1421883a 	add	r16,r2,r16
100085e0:	000cb600 	call	1000cb60 <__mulsi3>
100085e4:	800ed43a 	srli	r7,r16,16
100085e8:	80ffffcc 	andi	r3,r16,65535
100085ec:	b5800044 	addi	r22,r22,1
100085f0:	11c5883a 	add	r2,r2,r7
100085f4:	100e943a 	slli	r7,r2,16
100085f8:	1020d43a 	srli	r16,r2,16
100085fc:	38c7883a 	add	r3,r7,r3
10008600:	a8ffff15 	stw	r3,-4(r21)
10008604:	b4bfee16 	blt	r22,r18,100085c0 <__alt_data_end+0xf80085c0>
10008608:	80000926 	beq	r16,zero,10008630 <__multadd+0xb4>
1000860c:	98800217 	ldw	r2,8(r19)
10008610:	9080130e 	bge	r18,r2,10008660 <__multadd+0xe4>
10008614:	90800144 	addi	r2,r18,5
10008618:	1085883a 	add	r2,r2,r2
1000861c:	1085883a 	add	r2,r2,r2
10008620:	9885883a 	add	r2,r19,r2
10008624:	14000015 	stw	r16,0(r2)
10008628:	94800044 	addi	r18,r18,1
1000862c:	9c800415 	stw	r18,16(r19)
10008630:	9805883a 	mov	r2,r19
10008634:	dfc00817 	ldw	ra,32(sp)
10008638:	ddc00717 	ldw	r23,28(sp)
1000863c:	dd800617 	ldw	r22,24(sp)
10008640:	dd400517 	ldw	r21,20(sp)
10008644:	dd000417 	ldw	r20,16(sp)
10008648:	dcc00317 	ldw	r19,12(sp)
1000864c:	dc800217 	ldw	r18,8(sp)
10008650:	dc400117 	ldw	r17,4(sp)
10008654:	dc000017 	ldw	r16,0(sp)
10008658:	dec00904 	addi	sp,sp,36
1000865c:	f800283a 	ret
10008660:	99400117 	ldw	r5,4(r19)
10008664:	a009883a 	mov	r4,r20
10008668:	29400044 	addi	r5,r5,1
1000866c:	00084ac0 	call	100084ac <_Balloc>
10008670:	99800417 	ldw	r6,16(r19)
10008674:	99400304 	addi	r5,r19,12
10008678:	11000304 	addi	r4,r2,12
1000867c:	31800084 	addi	r6,r6,2
10008680:	318d883a 	add	r6,r6,r6
10008684:	318d883a 	add	r6,r6,r6
10008688:	1023883a 	mov	r17,r2
1000868c:	00080e00 	call	100080e0 <memcpy>
10008690:	98000a26 	beq	r19,zero,100086bc <__multadd+0x140>
10008694:	98c00117 	ldw	r3,4(r19)
10008698:	a0801317 	ldw	r2,76(r20)
1000869c:	18c7883a 	add	r3,r3,r3
100086a0:	18c7883a 	add	r3,r3,r3
100086a4:	10c5883a 	add	r2,r2,r3
100086a8:	10c00017 	ldw	r3,0(r2)
100086ac:	98c00015 	stw	r3,0(r19)
100086b0:	14c00015 	stw	r19,0(r2)
100086b4:	8827883a 	mov	r19,r17
100086b8:	003fd606 	br	10008614 <__alt_data_end+0xf8008614>
100086bc:	8827883a 	mov	r19,r17
100086c0:	003fd406 	br	10008614 <__alt_data_end+0xf8008614>

100086c4 <__s2b>:
100086c4:	defff904 	addi	sp,sp,-28
100086c8:	dc400115 	stw	r17,4(sp)
100086cc:	dc000015 	stw	r16,0(sp)
100086d0:	2023883a 	mov	r17,r4
100086d4:	2821883a 	mov	r16,r5
100086d8:	39000204 	addi	r4,r7,8
100086dc:	01400244 	movi	r5,9
100086e0:	dcc00315 	stw	r19,12(sp)
100086e4:	dc800215 	stw	r18,8(sp)
100086e8:	dfc00615 	stw	ra,24(sp)
100086ec:	dd400515 	stw	r21,20(sp)
100086f0:	dd000415 	stw	r20,16(sp)
100086f4:	3825883a 	mov	r18,r7
100086f8:	3027883a 	mov	r19,r6
100086fc:	000c9ac0 	call	1000c9ac <__divsi3>
10008700:	00c00044 	movi	r3,1
10008704:	000b883a 	mov	r5,zero
10008708:	1880030e 	bge	r3,r2,10008718 <__s2b+0x54>
1000870c:	18c7883a 	add	r3,r3,r3
10008710:	29400044 	addi	r5,r5,1
10008714:	18bffd16 	blt	r3,r2,1000870c <__alt_data_end+0xf800870c>
10008718:	8809883a 	mov	r4,r17
1000871c:	00084ac0 	call	100084ac <_Balloc>
10008720:	d8c00717 	ldw	r3,28(sp)
10008724:	10c00515 	stw	r3,20(r2)
10008728:	00c00044 	movi	r3,1
1000872c:	10c00415 	stw	r3,16(r2)
10008730:	00c00244 	movi	r3,9
10008734:	1cc0210e 	bge	r3,r19,100087bc <__s2b+0xf8>
10008738:	80eb883a 	add	r21,r16,r3
1000873c:	a829883a 	mov	r20,r21
10008740:	84e1883a 	add	r16,r16,r19
10008744:	a1c00007 	ldb	r7,0(r20)
10008748:	01800284 	movi	r6,10
1000874c:	a5000044 	addi	r20,r20,1
10008750:	100b883a 	mov	r5,r2
10008754:	39fff404 	addi	r7,r7,-48
10008758:	8809883a 	mov	r4,r17
1000875c:	000857c0 	call	1000857c <__multadd>
10008760:	a43ff81e 	bne	r20,r16,10008744 <__alt_data_end+0xf8008744>
10008764:	ace1883a 	add	r16,r21,r19
10008768:	843ffe04 	addi	r16,r16,-8
1000876c:	9c800a0e 	bge	r19,r18,10008798 <__s2b+0xd4>
10008770:	94e5c83a 	sub	r18,r18,r19
10008774:	84a5883a 	add	r18,r16,r18
10008778:	81c00007 	ldb	r7,0(r16)
1000877c:	01800284 	movi	r6,10
10008780:	84000044 	addi	r16,r16,1
10008784:	100b883a 	mov	r5,r2
10008788:	39fff404 	addi	r7,r7,-48
1000878c:	8809883a 	mov	r4,r17
10008790:	000857c0 	call	1000857c <__multadd>
10008794:	84bff81e 	bne	r16,r18,10008778 <__alt_data_end+0xf8008778>
10008798:	dfc00617 	ldw	ra,24(sp)
1000879c:	dd400517 	ldw	r21,20(sp)
100087a0:	dd000417 	ldw	r20,16(sp)
100087a4:	dcc00317 	ldw	r19,12(sp)
100087a8:	dc800217 	ldw	r18,8(sp)
100087ac:	dc400117 	ldw	r17,4(sp)
100087b0:	dc000017 	ldw	r16,0(sp)
100087b4:	dec00704 	addi	sp,sp,28
100087b8:	f800283a 	ret
100087bc:	84000284 	addi	r16,r16,10
100087c0:	1827883a 	mov	r19,r3
100087c4:	003fe906 	br	1000876c <__alt_data_end+0xf800876c>

100087c8 <__hi0bits>:
100087c8:	20bfffec 	andhi	r2,r4,65535
100087cc:	1000141e 	bne	r2,zero,10008820 <__hi0bits+0x58>
100087d0:	2008943a 	slli	r4,r4,16
100087d4:	00800404 	movi	r2,16
100087d8:	20ffc02c 	andhi	r3,r4,65280
100087dc:	1800021e 	bne	r3,zero,100087e8 <__hi0bits+0x20>
100087e0:	2008923a 	slli	r4,r4,8
100087e4:	10800204 	addi	r2,r2,8
100087e8:	20fc002c 	andhi	r3,r4,61440
100087ec:	1800021e 	bne	r3,zero,100087f8 <__hi0bits+0x30>
100087f0:	2008913a 	slli	r4,r4,4
100087f4:	10800104 	addi	r2,r2,4
100087f8:	20f0002c 	andhi	r3,r4,49152
100087fc:	1800031e 	bne	r3,zero,1000880c <__hi0bits+0x44>
10008800:	2109883a 	add	r4,r4,r4
10008804:	10800084 	addi	r2,r2,2
10008808:	2109883a 	add	r4,r4,r4
1000880c:	20000316 	blt	r4,zero,1000881c <__hi0bits+0x54>
10008810:	2110002c 	andhi	r4,r4,16384
10008814:	2000041e 	bne	r4,zero,10008828 <__hi0bits+0x60>
10008818:	00800804 	movi	r2,32
1000881c:	f800283a 	ret
10008820:	0005883a 	mov	r2,zero
10008824:	003fec06 	br	100087d8 <__alt_data_end+0xf80087d8>
10008828:	10800044 	addi	r2,r2,1
1000882c:	f800283a 	ret

10008830 <__lo0bits>:
10008830:	20c00017 	ldw	r3,0(r4)
10008834:	188001cc 	andi	r2,r3,7
10008838:	10000826 	beq	r2,zero,1000885c <__lo0bits+0x2c>
1000883c:	1880004c 	andi	r2,r3,1
10008840:	1000211e 	bne	r2,zero,100088c8 <__lo0bits+0x98>
10008844:	1880008c 	andi	r2,r3,2
10008848:	1000211e 	bne	r2,zero,100088d0 <__lo0bits+0xa0>
1000884c:	1806d0ba 	srli	r3,r3,2
10008850:	00800084 	movi	r2,2
10008854:	20c00015 	stw	r3,0(r4)
10008858:	f800283a 	ret
1000885c:	18bfffcc 	andi	r2,r3,65535
10008860:	10001326 	beq	r2,zero,100088b0 <__lo0bits+0x80>
10008864:	0005883a 	mov	r2,zero
10008868:	19403fcc 	andi	r5,r3,255
1000886c:	2800021e 	bne	r5,zero,10008878 <__lo0bits+0x48>
10008870:	1806d23a 	srli	r3,r3,8
10008874:	10800204 	addi	r2,r2,8
10008878:	194003cc 	andi	r5,r3,15
1000887c:	2800021e 	bne	r5,zero,10008888 <__lo0bits+0x58>
10008880:	1806d13a 	srli	r3,r3,4
10008884:	10800104 	addi	r2,r2,4
10008888:	194000cc 	andi	r5,r3,3
1000888c:	2800021e 	bne	r5,zero,10008898 <__lo0bits+0x68>
10008890:	1806d0ba 	srli	r3,r3,2
10008894:	10800084 	addi	r2,r2,2
10008898:	1940004c 	andi	r5,r3,1
1000889c:	2800081e 	bne	r5,zero,100088c0 <__lo0bits+0x90>
100088a0:	1806d07a 	srli	r3,r3,1
100088a4:	1800051e 	bne	r3,zero,100088bc <__lo0bits+0x8c>
100088a8:	00800804 	movi	r2,32
100088ac:	f800283a 	ret
100088b0:	1806d43a 	srli	r3,r3,16
100088b4:	00800404 	movi	r2,16
100088b8:	003feb06 	br	10008868 <__alt_data_end+0xf8008868>
100088bc:	10800044 	addi	r2,r2,1
100088c0:	20c00015 	stw	r3,0(r4)
100088c4:	f800283a 	ret
100088c8:	0005883a 	mov	r2,zero
100088cc:	f800283a 	ret
100088d0:	1806d07a 	srli	r3,r3,1
100088d4:	00800044 	movi	r2,1
100088d8:	20c00015 	stw	r3,0(r4)
100088dc:	f800283a 	ret

100088e0 <__i2b>:
100088e0:	defffd04 	addi	sp,sp,-12
100088e4:	dc000015 	stw	r16,0(sp)
100088e8:	04000044 	movi	r16,1
100088ec:	dc400115 	stw	r17,4(sp)
100088f0:	2823883a 	mov	r17,r5
100088f4:	800b883a 	mov	r5,r16
100088f8:	dfc00215 	stw	ra,8(sp)
100088fc:	00084ac0 	call	100084ac <_Balloc>
10008900:	14400515 	stw	r17,20(r2)
10008904:	14000415 	stw	r16,16(r2)
10008908:	dfc00217 	ldw	ra,8(sp)
1000890c:	dc400117 	ldw	r17,4(sp)
10008910:	dc000017 	ldw	r16,0(sp)
10008914:	dec00304 	addi	sp,sp,12
10008918:	f800283a 	ret

1000891c <__multiply>:
1000891c:	deffef04 	addi	sp,sp,-68
10008920:	dc400815 	stw	r17,32(sp)
10008924:	dc000715 	stw	r16,28(sp)
10008928:	34400417 	ldw	r17,16(r6)
1000892c:	2c000417 	ldw	r16,16(r5)
10008930:	dd800d15 	stw	r22,52(sp)
10008934:	dc800915 	stw	r18,36(sp)
10008938:	dfc01015 	stw	ra,64(sp)
1000893c:	df000f15 	stw	fp,60(sp)
10008940:	ddc00e15 	stw	r23,56(sp)
10008944:	dd400c15 	stw	r21,48(sp)
10008948:	dd000b15 	stw	r20,44(sp)
1000894c:	dcc00a15 	stw	r19,40(sp)
10008950:	2825883a 	mov	r18,r5
10008954:	302d883a 	mov	r22,r6
10008958:	8440050e 	bge	r16,r17,10008970 <__multiply+0x54>
1000895c:	8007883a 	mov	r3,r16
10008960:	3025883a 	mov	r18,r6
10008964:	8821883a 	mov	r16,r17
10008968:	282d883a 	mov	r22,r5
1000896c:	1823883a 	mov	r17,r3
10008970:	90800217 	ldw	r2,8(r18)
10008974:	8447883a 	add	r3,r16,r17
10008978:	d8c00215 	stw	r3,8(sp)
1000897c:	91400117 	ldw	r5,4(r18)
10008980:	10c0010e 	bge	r2,r3,10008988 <__multiply+0x6c>
10008984:	29400044 	addi	r5,r5,1
10008988:	00084ac0 	call	100084ac <_Balloc>
1000898c:	d8c00217 	ldw	r3,8(sp)
10008990:	d8800615 	stw	r2,24(sp)
10008994:	18eb883a 	add	r21,r3,r3
10008998:	ad6b883a 	add	r21,r21,r21
1000899c:	10c00504 	addi	r3,r2,20
100089a0:	1d6b883a 	add	r21,r3,r21
100089a4:	d8c00115 	stw	r3,4(sp)
100089a8:	dd400315 	stw	r21,12(sp)
100089ac:	1805883a 	mov	r2,r3
100089b0:	1d40042e 	bgeu	r3,r21,100089c4 <__multiply+0xa8>
100089b4:	d8c00317 	ldw	r3,12(sp)
100089b8:	10000015 	stw	zero,0(r2)
100089bc:	10800104 	addi	r2,r2,4
100089c0:	10fffc36 	bltu	r2,r3,100089b4 <__alt_data_end+0xf80089b4>
100089c4:	8c63883a 	add	r17,r17,r17
100089c8:	b5800504 	addi	r22,r22,20
100089cc:	8c63883a 	add	r17,r17,r17
100089d0:	94800504 	addi	r18,r18,20
100089d4:	8421883a 	add	r16,r16,r16
100089d8:	b463883a 	add	r17,r22,r17
100089dc:	8421883a 	add	r16,r16,r16
100089e0:	dd800015 	stw	r22,0(sp)
100089e4:	dc800415 	stw	r18,16(sp)
100089e8:	dc400515 	stw	r17,20(sp)
100089ec:	9429883a 	add	r20,r18,r16
100089f0:	b4404f2e 	bgeu	r22,r17,10008b30 <__multiply+0x214>
100089f4:	d8c00017 	ldw	r3,0(sp)
100089f8:	1c800017 	ldw	r18,0(r3)
100089fc:	947fffcc 	andi	r17,r18,65535
10008a00:	88001e26 	beq	r17,zero,10008a7c <__multiply+0x160>
10008a04:	dd800117 	ldw	r22,4(sp)
10008a08:	dd400417 	ldw	r21,16(sp)
10008a0c:	0027883a 	mov	r19,zero
10008a10:	ac800017 	ldw	r18,0(r21)
10008a14:	b4000017 	ldw	r16,0(r22)
10008a18:	880b883a 	mov	r5,r17
10008a1c:	913fffcc 	andi	r4,r18,65535
10008a20:	000cb600 	call	1000cb60 <__mulsi3>
10008a24:	9008d43a 	srli	r4,r18,16
10008a28:	84bfffcc 	andi	r18,r16,65535
10008a2c:	1485883a 	add	r2,r2,r18
10008a30:	14e5883a 	add	r18,r2,r19
10008a34:	8020d43a 	srli	r16,r16,16
10008a38:	9026d43a 	srli	r19,r18,16
10008a3c:	880b883a 	mov	r5,r17
10008a40:	000cb600 	call	1000cb60 <__mulsi3>
10008a44:	1405883a 	add	r2,r2,r16
10008a48:	14e1883a 	add	r16,r2,r19
10008a4c:	90ffffcc 	andi	r3,r18,65535
10008a50:	8024943a 	slli	r18,r16,16
10008a54:	ad400104 	addi	r21,r21,4
10008a58:	b005883a 	mov	r2,r22
10008a5c:	90c6b03a 	or	r3,r18,r3
10008a60:	b0c00015 	stw	r3,0(r22)
10008a64:	8026d43a 	srli	r19,r16,16
10008a68:	b5800104 	addi	r22,r22,4
10008a6c:	ad3fe836 	bltu	r21,r20,10008a10 <__alt_data_end+0xf8008a10>
10008a70:	d8c00017 	ldw	r3,0(sp)
10008a74:	14c00115 	stw	r19,4(r2)
10008a78:	1c800017 	ldw	r18,0(r3)
10008a7c:	9024d43a 	srli	r18,r18,16
10008a80:	90002226 	beq	r18,zero,10008b0c <__multiply+0x1f0>
10008a84:	d8c00117 	ldw	r3,4(sp)
10008a88:	dd800417 	ldw	r22,16(sp)
10008a8c:	002f883a 	mov	r23,zero
10008a90:	1f000017 	ldw	fp,0(r3)
10008a94:	1823883a 	mov	r17,r3
10008a98:	182b883a 	mov	r21,r3
10008a9c:	e021883a 	mov	r16,fp
10008aa0:	00000106 	br	10008aa8 <__multiply+0x18c>
10008aa4:	982b883a 	mov	r21,r19
10008aa8:	b100000b 	ldhu	r4,0(r22)
10008aac:	8020d43a 	srli	r16,r16,16
10008ab0:	900b883a 	mov	r5,r18
10008ab4:	000cb600 	call	1000cb60 <__mulsi3>
10008ab8:	1405883a 	add	r2,r2,r16
10008abc:	15ef883a 	add	r23,r2,r23
10008ac0:	b804943a 	slli	r2,r23,16
10008ac4:	e0ffffcc 	andi	r3,fp,65535
10008ac8:	8c400104 	addi	r17,r17,4
10008acc:	10c6b03a 	or	r3,r2,r3
10008ad0:	88ffff15 	stw	r3,-4(r17)
10008ad4:	b5800104 	addi	r22,r22,4
10008ad8:	b13fff17 	ldw	r4,-4(r22)
10008adc:	acc00104 	addi	r19,r21,4
10008ae0:	900b883a 	mov	r5,r18
10008ae4:	2008d43a 	srli	r4,r4,16
10008ae8:	9c000017 	ldw	r16,0(r19)
10008aec:	000cb600 	call	1000cb60 <__mulsi3>
10008af0:	b806d43a 	srli	r3,r23,16
10008af4:	813fffcc 	andi	r4,r16,65535
10008af8:	1105883a 	add	r2,r2,r4
10008afc:	10f9883a 	add	fp,r2,r3
10008b00:	e02ed43a 	srli	r23,fp,16
10008b04:	b53fe736 	bltu	r22,r20,10008aa4 <__alt_data_end+0xf8008aa4>
10008b08:	af000115 	stw	fp,4(r21)
10008b0c:	d8c00017 	ldw	r3,0(sp)
10008b10:	d9000517 	ldw	r4,20(sp)
10008b14:	18c00104 	addi	r3,r3,4
10008b18:	d8c00015 	stw	r3,0(sp)
10008b1c:	d8c00117 	ldw	r3,4(sp)
10008b20:	18c00104 	addi	r3,r3,4
10008b24:	d8c00115 	stw	r3,4(sp)
10008b28:	d8c00017 	ldw	r3,0(sp)
10008b2c:	193fb136 	bltu	r3,r4,100089f4 <__alt_data_end+0xf80089f4>
10008b30:	d8c00217 	ldw	r3,8(sp)
10008b34:	00c00c0e 	bge	zero,r3,10008b68 <__multiply+0x24c>
10008b38:	d8c00317 	ldw	r3,12(sp)
10008b3c:	18bfff17 	ldw	r2,-4(r3)
10008b40:	1d7fff04 	addi	r21,r3,-4
10008b44:	10000326 	beq	r2,zero,10008b54 <__multiply+0x238>
10008b48:	00000706 	br	10008b68 <__multiply+0x24c>
10008b4c:	a8800017 	ldw	r2,0(r21)
10008b50:	1000051e 	bne	r2,zero,10008b68 <__multiply+0x24c>
10008b54:	d8c00217 	ldw	r3,8(sp)
10008b58:	ad7fff04 	addi	r21,r21,-4
10008b5c:	18ffffc4 	addi	r3,r3,-1
10008b60:	d8c00215 	stw	r3,8(sp)
10008b64:	183ff91e 	bne	r3,zero,10008b4c <__alt_data_end+0xf8008b4c>
10008b68:	d8c00617 	ldw	r3,24(sp)
10008b6c:	d9000217 	ldw	r4,8(sp)
10008b70:	1805883a 	mov	r2,r3
10008b74:	19000415 	stw	r4,16(r3)
10008b78:	dfc01017 	ldw	ra,64(sp)
10008b7c:	df000f17 	ldw	fp,60(sp)
10008b80:	ddc00e17 	ldw	r23,56(sp)
10008b84:	dd800d17 	ldw	r22,52(sp)
10008b88:	dd400c17 	ldw	r21,48(sp)
10008b8c:	dd000b17 	ldw	r20,44(sp)
10008b90:	dcc00a17 	ldw	r19,40(sp)
10008b94:	dc800917 	ldw	r18,36(sp)
10008b98:	dc400817 	ldw	r17,32(sp)
10008b9c:	dc000717 	ldw	r16,28(sp)
10008ba0:	dec01104 	addi	sp,sp,68
10008ba4:	f800283a 	ret

10008ba8 <__pow5mult>:
10008ba8:	defffa04 	addi	sp,sp,-24
10008bac:	dcc00315 	stw	r19,12(sp)
10008bb0:	dc000015 	stw	r16,0(sp)
10008bb4:	dfc00515 	stw	ra,20(sp)
10008bb8:	dd000415 	stw	r20,16(sp)
10008bbc:	dc800215 	stw	r18,8(sp)
10008bc0:	dc400115 	stw	r17,4(sp)
10008bc4:	308000cc 	andi	r2,r6,3
10008bc8:	3021883a 	mov	r16,r6
10008bcc:	2027883a 	mov	r19,r4
10008bd0:	10002f1e 	bne	r2,zero,10008c90 <__pow5mult+0xe8>
10008bd4:	2825883a 	mov	r18,r5
10008bd8:	8021d0ba 	srai	r16,r16,2
10008bdc:	80001a26 	beq	r16,zero,10008c48 <__pow5mult+0xa0>
10008be0:	9c401217 	ldw	r17,72(r19)
10008be4:	8800061e 	bne	r17,zero,10008c00 <__pow5mult+0x58>
10008be8:	00003406 	br	10008cbc <__pow5mult+0x114>
10008bec:	8021d07a 	srai	r16,r16,1
10008bf0:	80001526 	beq	r16,zero,10008c48 <__pow5mult+0xa0>
10008bf4:	88800017 	ldw	r2,0(r17)
10008bf8:	10001c26 	beq	r2,zero,10008c6c <__pow5mult+0xc4>
10008bfc:	1023883a 	mov	r17,r2
10008c00:	8080004c 	andi	r2,r16,1
10008c04:	103ff926 	beq	r2,zero,10008bec <__alt_data_end+0xf8008bec>
10008c08:	880d883a 	mov	r6,r17
10008c0c:	900b883a 	mov	r5,r18
10008c10:	9809883a 	mov	r4,r19
10008c14:	000891c0 	call	1000891c <__multiply>
10008c18:	90001b26 	beq	r18,zero,10008c88 <__pow5mult+0xe0>
10008c1c:	91000117 	ldw	r4,4(r18)
10008c20:	98c01317 	ldw	r3,76(r19)
10008c24:	8021d07a 	srai	r16,r16,1
10008c28:	2109883a 	add	r4,r4,r4
10008c2c:	2109883a 	add	r4,r4,r4
10008c30:	1907883a 	add	r3,r3,r4
10008c34:	19000017 	ldw	r4,0(r3)
10008c38:	91000015 	stw	r4,0(r18)
10008c3c:	1c800015 	stw	r18,0(r3)
10008c40:	1025883a 	mov	r18,r2
10008c44:	803feb1e 	bne	r16,zero,10008bf4 <__alt_data_end+0xf8008bf4>
10008c48:	9005883a 	mov	r2,r18
10008c4c:	dfc00517 	ldw	ra,20(sp)
10008c50:	dd000417 	ldw	r20,16(sp)
10008c54:	dcc00317 	ldw	r19,12(sp)
10008c58:	dc800217 	ldw	r18,8(sp)
10008c5c:	dc400117 	ldw	r17,4(sp)
10008c60:	dc000017 	ldw	r16,0(sp)
10008c64:	dec00604 	addi	sp,sp,24
10008c68:	f800283a 	ret
10008c6c:	880d883a 	mov	r6,r17
10008c70:	880b883a 	mov	r5,r17
10008c74:	9809883a 	mov	r4,r19
10008c78:	000891c0 	call	1000891c <__multiply>
10008c7c:	88800015 	stw	r2,0(r17)
10008c80:	10000015 	stw	zero,0(r2)
10008c84:	003fdd06 	br	10008bfc <__alt_data_end+0xf8008bfc>
10008c88:	1025883a 	mov	r18,r2
10008c8c:	003fd706 	br	10008bec <__alt_data_end+0xf8008bec>
10008c90:	10bfffc4 	addi	r2,r2,-1
10008c94:	1085883a 	add	r2,r2,r2
10008c98:	00c40074 	movhi	r3,4097
10008c9c:	18c92404 	addi	r3,r3,9360
10008ca0:	1085883a 	add	r2,r2,r2
10008ca4:	1885883a 	add	r2,r3,r2
10008ca8:	11800017 	ldw	r6,0(r2)
10008cac:	000f883a 	mov	r7,zero
10008cb0:	000857c0 	call	1000857c <__multadd>
10008cb4:	1025883a 	mov	r18,r2
10008cb8:	003fc706 	br	10008bd8 <__alt_data_end+0xf8008bd8>
10008cbc:	05000044 	movi	r20,1
10008cc0:	a00b883a 	mov	r5,r20
10008cc4:	9809883a 	mov	r4,r19
10008cc8:	00084ac0 	call	100084ac <_Balloc>
10008ccc:	1023883a 	mov	r17,r2
10008cd0:	00809c44 	movi	r2,625
10008cd4:	88800515 	stw	r2,20(r17)
10008cd8:	8d000415 	stw	r20,16(r17)
10008cdc:	9c401215 	stw	r17,72(r19)
10008ce0:	88000015 	stw	zero,0(r17)
10008ce4:	003fc606 	br	10008c00 <__alt_data_end+0xf8008c00>

10008ce8 <__lshift>:
10008ce8:	defff904 	addi	sp,sp,-28
10008cec:	dd400515 	stw	r21,20(sp)
10008cf0:	dcc00315 	stw	r19,12(sp)
10008cf4:	302bd17a 	srai	r21,r6,5
10008cf8:	2cc00417 	ldw	r19,16(r5)
10008cfc:	28800217 	ldw	r2,8(r5)
10008d00:	dd000415 	stw	r20,16(sp)
10008d04:	ace7883a 	add	r19,r21,r19
10008d08:	dc800215 	stw	r18,8(sp)
10008d0c:	dc400115 	stw	r17,4(sp)
10008d10:	dc000015 	stw	r16,0(sp)
10008d14:	dfc00615 	stw	ra,24(sp)
10008d18:	9c000044 	addi	r16,r19,1
10008d1c:	2823883a 	mov	r17,r5
10008d20:	3029883a 	mov	r20,r6
10008d24:	2025883a 	mov	r18,r4
10008d28:	29400117 	ldw	r5,4(r5)
10008d2c:	1400030e 	bge	r2,r16,10008d3c <__lshift+0x54>
10008d30:	1085883a 	add	r2,r2,r2
10008d34:	29400044 	addi	r5,r5,1
10008d38:	143ffd16 	blt	r2,r16,10008d30 <__alt_data_end+0xf8008d30>
10008d3c:	9009883a 	mov	r4,r18
10008d40:	00084ac0 	call	100084ac <_Balloc>
10008d44:	10c00504 	addi	r3,r2,20
10008d48:	0540070e 	bge	zero,r21,10008d68 <__lshift+0x80>
10008d4c:	ad6b883a 	add	r21,r21,r21
10008d50:	ad6b883a 	add	r21,r21,r21
10008d54:	1809883a 	mov	r4,r3
10008d58:	1d47883a 	add	r3,r3,r21
10008d5c:	20000015 	stw	zero,0(r4)
10008d60:	21000104 	addi	r4,r4,4
10008d64:	193ffd1e 	bne	r3,r4,10008d5c <__alt_data_end+0xf8008d5c>
10008d68:	8a000417 	ldw	r8,16(r17)
10008d6c:	89000504 	addi	r4,r17,20
10008d70:	a18007cc 	andi	r6,r20,31
10008d74:	4211883a 	add	r8,r8,r8
10008d78:	4211883a 	add	r8,r8,r8
10008d7c:	2211883a 	add	r8,r4,r8
10008d80:	30002326 	beq	r6,zero,10008e10 <__lshift+0x128>
10008d84:	02400804 	movi	r9,32
10008d88:	4993c83a 	sub	r9,r9,r6
10008d8c:	000b883a 	mov	r5,zero
10008d90:	21c00017 	ldw	r7,0(r4)
10008d94:	1815883a 	mov	r10,r3
10008d98:	18c00104 	addi	r3,r3,4
10008d9c:	398e983a 	sll	r7,r7,r6
10008da0:	21000104 	addi	r4,r4,4
10008da4:	394ab03a 	or	r5,r7,r5
10008da8:	197fff15 	stw	r5,-4(r3)
10008dac:	217fff17 	ldw	r5,-4(r4)
10008db0:	2a4ad83a 	srl	r5,r5,r9
10008db4:	223ff636 	bltu	r4,r8,10008d90 <__alt_data_end+0xf8008d90>
10008db8:	51400115 	stw	r5,4(r10)
10008dbc:	28001a1e 	bne	r5,zero,10008e28 <__lshift+0x140>
10008dc0:	843fffc4 	addi	r16,r16,-1
10008dc4:	14000415 	stw	r16,16(r2)
10008dc8:	88000826 	beq	r17,zero,10008dec <__lshift+0x104>
10008dcc:	89000117 	ldw	r4,4(r17)
10008dd0:	90c01317 	ldw	r3,76(r18)
10008dd4:	2109883a 	add	r4,r4,r4
10008dd8:	2109883a 	add	r4,r4,r4
10008ddc:	1907883a 	add	r3,r3,r4
10008de0:	19000017 	ldw	r4,0(r3)
10008de4:	89000015 	stw	r4,0(r17)
10008de8:	1c400015 	stw	r17,0(r3)
10008dec:	dfc00617 	ldw	ra,24(sp)
10008df0:	dd400517 	ldw	r21,20(sp)
10008df4:	dd000417 	ldw	r20,16(sp)
10008df8:	dcc00317 	ldw	r19,12(sp)
10008dfc:	dc800217 	ldw	r18,8(sp)
10008e00:	dc400117 	ldw	r17,4(sp)
10008e04:	dc000017 	ldw	r16,0(sp)
10008e08:	dec00704 	addi	sp,sp,28
10008e0c:	f800283a 	ret
10008e10:	21400017 	ldw	r5,0(r4)
10008e14:	18c00104 	addi	r3,r3,4
10008e18:	21000104 	addi	r4,r4,4
10008e1c:	197fff15 	stw	r5,-4(r3)
10008e20:	223ffb36 	bltu	r4,r8,10008e10 <__alt_data_end+0xf8008e10>
10008e24:	003fe606 	br	10008dc0 <__alt_data_end+0xf8008dc0>
10008e28:	9c000084 	addi	r16,r19,2
10008e2c:	003fe406 	br	10008dc0 <__alt_data_end+0xf8008dc0>

10008e30 <__mcmp>:
10008e30:	20800417 	ldw	r2,16(r4)
10008e34:	28c00417 	ldw	r3,16(r5)
10008e38:	10c5c83a 	sub	r2,r2,r3
10008e3c:	1000111e 	bne	r2,zero,10008e84 <__mcmp+0x54>
10008e40:	18c7883a 	add	r3,r3,r3
10008e44:	18c7883a 	add	r3,r3,r3
10008e48:	21000504 	addi	r4,r4,20
10008e4c:	29400504 	addi	r5,r5,20
10008e50:	20c5883a 	add	r2,r4,r3
10008e54:	28cb883a 	add	r5,r5,r3
10008e58:	00000106 	br	10008e60 <__mcmp+0x30>
10008e5c:	20800a2e 	bgeu	r4,r2,10008e88 <__mcmp+0x58>
10008e60:	10bfff04 	addi	r2,r2,-4
10008e64:	297fff04 	addi	r5,r5,-4
10008e68:	11800017 	ldw	r6,0(r2)
10008e6c:	28c00017 	ldw	r3,0(r5)
10008e70:	30fffa26 	beq	r6,r3,10008e5c <__alt_data_end+0xf8008e5c>
10008e74:	30c00236 	bltu	r6,r3,10008e80 <__mcmp+0x50>
10008e78:	00800044 	movi	r2,1
10008e7c:	f800283a 	ret
10008e80:	00bfffc4 	movi	r2,-1
10008e84:	f800283a 	ret
10008e88:	0005883a 	mov	r2,zero
10008e8c:	f800283a 	ret

10008e90 <__mdiff>:
10008e90:	28c00417 	ldw	r3,16(r5)
10008e94:	30800417 	ldw	r2,16(r6)
10008e98:	defffa04 	addi	sp,sp,-24
10008e9c:	dcc00315 	stw	r19,12(sp)
10008ea0:	dc800215 	stw	r18,8(sp)
10008ea4:	dfc00515 	stw	ra,20(sp)
10008ea8:	dd000415 	stw	r20,16(sp)
10008eac:	dc400115 	stw	r17,4(sp)
10008eb0:	dc000015 	stw	r16,0(sp)
10008eb4:	1887c83a 	sub	r3,r3,r2
10008eb8:	2825883a 	mov	r18,r5
10008ebc:	3027883a 	mov	r19,r6
10008ec0:	1800141e 	bne	r3,zero,10008f14 <__mdiff+0x84>
10008ec4:	1085883a 	add	r2,r2,r2
10008ec8:	1085883a 	add	r2,r2,r2
10008ecc:	2a000504 	addi	r8,r5,20
10008ed0:	34000504 	addi	r16,r6,20
10008ed4:	4087883a 	add	r3,r8,r2
10008ed8:	8085883a 	add	r2,r16,r2
10008edc:	00000106 	br	10008ee4 <__mdiff+0x54>
10008ee0:	40c0592e 	bgeu	r8,r3,10009048 <__mdiff+0x1b8>
10008ee4:	18ffff04 	addi	r3,r3,-4
10008ee8:	10bfff04 	addi	r2,r2,-4
10008eec:	19c00017 	ldw	r7,0(r3)
10008ef0:	11400017 	ldw	r5,0(r2)
10008ef4:	397ffa26 	beq	r7,r5,10008ee0 <__alt_data_end+0xf8008ee0>
10008ef8:	3940592e 	bgeu	r7,r5,10009060 <__mdiff+0x1d0>
10008efc:	9005883a 	mov	r2,r18
10008f00:	4023883a 	mov	r17,r8
10008f04:	9825883a 	mov	r18,r19
10008f08:	05000044 	movi	r20,1
10008f0c:	1027883a 	mov	r19,r2
10008f10:	00000406 	br	10008f24 <__mdiff+0x94>
10008f14:	18005616 	blt	r3,zero,10009070 <__mdiff+0x1e0>
10008f18:	34400504 	addi	r17,r6,20
10008f1c:	2c000504 	addi	r16,r5,20
10008f20:	0029883a 	mov	r20,zero
10008f24:	91400117 	ldw	r5,4(r18)
10008f28:	00084ac0 	call	100084ac <_Balloc>
10008f2c:	92400417 	ldw	r9,16(r18)
10008f30:	9b000417 	ldw	r12,16(r19)
10008f34:	12c00504 	addi	r11,r2,20
10008f38:	4a51883a 	add	r8,r9,r9
10008f3c:	6319883a 	add	r12,r12,r12
10008f40:	4211883a 	add	r8,r8,r8
10008f44:	6319883a 	add	r12,r12,r12
10008f48:	15000315 	stw	r20,12(r2)
10008f4c:	8211883a 	add	r8,r16,r8
10008f50:	8b19883a 	add	r12,r17,r12
10008f54:	0007883a 	mov	r3,zero
10008f58:	81400017 	ldw	r5,0(r16)
10008f5c:	89c00017 	ldw	r7,0(r17)
10008f60:	59800104 	addi	r6,r11,4
10008f64:	293fffcc 	andi	r4,r5,65535
10008f68:	20c7883a 	add	r3,r4,r3
10008f6c:	393fffcc 	andi	r4,r7,65535
10008f70:	1909c83a 	sub	r4,r3,r4
10008f74:	280ad43a 	srli	r5,r5,16
10008f78:	380ed43a 	srli	r7,r7,16
10008f7c:	2007d43a 	srai	r3,r4,16
10008f80:	213fffcc 	andi	r4,r4,65535
10008f84:	29cbc83a 	sub	r5,r5,r7
10008f88:	28c7883a 	add	r3,r5,r3
10008f8c:	180a943a 	slli	r5,r3,16
10008f90:	8c400104 	addi	r17,r17,4
10008f94:	84000104 	addi	r16,r16,4
10008f98:	2908b03a 	or	r4,r5,r4
10008f9c:	59000015 	stw	r4,0(r11)
10008fa0:	1807d43a 	srai	r3,r3,16
10008fa4:	3015883a 	mov	r10,r6
10008fa8:	3017883a 	mov	r11,r6
10008fac:	8b3fea36 	bltu	r17,r12,10008f58 <__alt_data_end+0xf8008f58>
10008fb0:	8200162e 	bgeu	r16,r8,1000900c <__mdiff+0x17c>
10008fb4:	8017883a 	mov	r11,r16
10008fb8:	59400017 	ldw	r5,0(r11)
10008fbc:	31800104 	addi	r6,r6,4
10008fc0:	5ac00104 	addi	r11,r11,4
10008fc4:	293fffcc 	andi	r4,r5,65535
10008fc8:	20c7883a 	add	r3,r4,r3
10008fcc:	280ed43a 	srli	r7,r5,16
10008fd0:	180bd43a 	srai	r5,r3,16
10008fd4:	193fffcc 	andi	r4,r3,65535
10008fd8:	3947883a 	add	r3,r7,r5
10008fdc:	180a943a 	slli	r5,r3,16
10008fe0:	1807d43a 	srai	r3,r3,16
10008fe4:	2908b03a 	or	r4,r5,r4
10008fe8:	313fff15 	stw	r4,-4(r6)
10008fec:	5a3ff236 	bltu	r11,r8,10008fb8 <__alt_data_end+0xf8008fb8>
10008ff0:	0406303a 	nor	r3,zero,r16
10008ff4:	1a07883a 	add	r3,r3,r8
10008ff8:	1806d0ba 	srli	r3,r3,2
10008ffc:	18c00044 	addi	r3,r3,1
10009000:	18c7883a 	add	r3,r3,r3
10009004:	18c7883a 	add	r3,r3,r3
10009008:	50d5883a 	add	r10,r10,r3
1000900c:	50ffff04 	addi	r3,r10,-4
10009010:	2000041e 	bne	r4,zero,10009024 <__mdiff+0x194>
10009014:	18ffff04 	addi	r3,r3,-4
10009018:	19000017 	ldw	r4,0(r3)
1000901c:	4a7fffc4 	addi	r9,r9,-1
10009020:	203ffc26 	beq	r4,zero,10009014 <__alt_data_end+0xf8009014>
10009024:	12400415 	stw	r9,16(r2)
10009028:	dfc00517 	ldw	ra,20(sp)
1000902c:	dd000417 	ldw	r20,16(sp)
10009030:	dcc00317 	ldw	r19,12(sp)
10009034:	dc800217 	ldw	r18,8(sp)
10009038:	dc400117 	ldw	r17,4(sp)
1000903c:	dc000017 	ldw	r16,0(sp)
10009040:	dec00604 	addi	sp,sp,24
10009044:	f800283a 	ret
10009048:	000b883a 	mov	r5,zero
1000904c:	00084ac0 	call	100084ac <_Balloc>
10009050:	00c00044 	movi	r3,1
10009054:	10c00415 	stw	r3,16(r2)
10009058:	10000515 	stw	zero,20(r2)
1000905c:	003ff206 	br	10009028 <__alt_data_end+0xf8009028>
10009060:	8023883a 	mov	r17,r16
10009064:	0029883a 	mov	r20,zero
10009068:	4021883a 	mov	r16,r8
1000906c:	003fad06 	br	10008f24 <__alt_data_end+0xf8008f24>
10009070:	9005883a 	mov	r2,r18
10009074:	94400504 	addi	r17,r18,20
10009078:	9c000504 	addi	r16,r19,20
1000907c:	9825883a 	mov	r18,r19
10009080:	05000044 	movi	r20,1
10009084:	1027883a 	mov	r19,r2
10009088:	003fa606 	br	10008f24 <__alt_data_end+0xf8008f24>

1000908c <__ulp>:
1000908c:	295ffc2c 	andhi	r5,r5,32752
10009090:	00bf3034 	movhi	r2,64704
10009094:	2887883a 	add	r3,r5,r2
10009098:	00c0020e 	bge	zero,r3,100090a4 <__ulp+0x18>
1000909c:	0005883a 	mov	r2,zero
100090a0:	f800283a 	ret
100090a4:	00c7c83a 	sub	r3,zero,r3
100090a8:	1807d53a 	srai	r3,r3,20
100090ac:	008004c4 	movi	r2,19
100090b0:	10c00b0e 	bge	r2,r3,100090e0 <__ulp+0x54>
100090b4:	18bffb04 	addi	r2,r3,-20
100090b8:	01000784 	movi	r4,30
100090bc:	0007883a 	mov	r3,zero
100090c0:	20800516 	blt	r4,r2,100090d8 <__ulp+0x4c>
100090c4:	010007c4 	movi	r4,31
100090c8:	2089c83a 	sub	r4,r4,r2
100090cc:	00800044 	movi	r2,1
100090d0:	1104983a 	sll	r2,r2,r4
100090d4:	f800283a 	ret
100090d8:	00800044 	movi	r2,1
100090dc:	f800283a 	ret
100090e0:	01400234 	movhi	r5,8
100090e4:	28c7d83a 	sra	r3,r5,r3
100090e8:	0005883a 	mov	r2,zero
100090ec:	f800283a 	ret

100090f0 <__b2d>:
100090f0:	defffa04 	addi	sp,sp,-24
100090f4:	dc000015 	stw	r16,0(sp)
100090f8:	24000417 	ldw	r16,16(r4)
100090fc:	dc400115 	stw	r17,4(sp)
10009100:	24400504 	addi	r17,r4,20
10009104:	8421883a 	add	r16,r16,r16
10009108:	8421883a 	add	r16,r16,r16
1000910c:	8c21883a 	add	r16,r17,r16
10009110:	dc800215 	stw	r18,8(sp)
10009114:	84bfff17 	ldw	r18,-4(r16)
10009118:	dd000415 	stw	r20,16(sp)
1000911c:	dcc00315 	stw	r19,12(sp)
10009120:	9009883a 	mov	r4,r18
10009124:	2829883a 	mov	r20,r5
10009128:	dfc00515 	stw	ra,20(sp)
1000912c:	00087c80 	call	100087c8 <__hi0bits>
10009130:	00c00804 	movi	r3,32
10009134:	1889c83a 	sub	r4,r3,r2
10009138:	a1000015 	stw	r4,0(r20)
1000913c:	01000284 	movi	r4,10
10009140:	84ffff04 	addi	r19,r16,-4
10009144:	20801216 	blt	r4,r2,10009190 <__b2d+0xa0>
10009148:	018002c4 	movi	r6,11
1000914c:	308dc83a 	sub	r6,r6,r2
10009150:	9186d83a 	srl	r3,r18,r6
10009154:	18cffc34 	orhi	r3,r3,16368
10009158:	8cc0212e 	bgeu	r17,r19,100091e0 <__b2d+0xf0>
1000915c:	813ffe17 	ldw	r4,-8(r16)
10009160:	218cd83a 	srl	r6,r4,r6
10009164:	10800544 	addi	r2,r2,21
10009168:	9084983a 	sll	r2,r18,r2
1000916c:	1184b03a 	or	r2,r2,r6
10009170:	dfc00517 	ldw	ra,20(sp)
10009174:	dd000417 	ldw	r20,16(sp)
10009178:	dcc00317 	ldw	r19,12(sp)
1000917c:	dc800217 	ldw	r18,8(sp)
10009180:	dc400117 	ldw	r17,4(sp)
10009184:	dc000017 	ldw	r16,0(sp)
10009188:	dec00604 	addi	sp,sp,24
1000918c:	f800283a 	ret
10009190:	8cc00f2e 	bgeu	r17,r19,100091d0 <__b2d+0xe0>
10009194:	117ffd44 	addi	r5,r2,-11
10009198:	80bffe17 	ldw	r2,-8(r16)
1000919c:	28000e26 	beq	r5,zero,100091d8 <__b2d+0xe8>
100091a0:	1949c83a 	sub	r4,r3,r5
100091a4:	9164983a 	sll	r18,r18,r5
100091a8:	1106d83a 	srl	r3,r2,r4
100091ac:	81bffe04 	addi	r6,r16,-8
100091b0:	948ffc34 	orhi	r18,r18,16368
100091b4:	90c6b03a 	or	r3,r18,r3
100091b8:	89800e2e 	bgeu	r17,r6,100091f4 <__b2d+0x104>
100091bc:	81bffd17 	ldw	r6,-12(r16)
100091c0:	1144983a 	sll	r2,r2,r5
100091c4:	310ad83a 	srl	r5,r6,r4
100091c8:	2884b03a 	or	r2,r5,r2
100091cc:	003fe806 	br	10009170 <__alt_data_end+0xf8009170>
100091d0:	10bffd44 	addi	r2,r2,-11
100091d4:	1000041e 	bne	r2,zero,100091e8 <__b2d+0xf8>
100091d8:	90cffc34 	orhi	r3,r18,16368
100091dc:	003fe406 	br	10009170 <__alt_data_end+0xf8009170>
100091e0:	000d883a 	mov	r6,zero
100091e4:	003fdf06 	br	10009164 <__alt_data_end+0xf8009164>
100091e8:	90a4983a 	sll	r18,r18,r2
100091ec:	0005883a 	mov	r2,zero
100091f0:	003ff906 	br	100091d8 <__alt_data_end+0xf80091d8>
100091f4:	1144983a 	sll	r2,r2,r5
100091f8:	003fdd06 	br	10009170 <__alt_data_end+0xf8009170>

100091fc <__d2b>:
100091fc:	defff804 	addi	sp,sp,-32
10009200:	dc000215 	stw	r16,8(sp)
10009204:	3021883a 	mov	r16,r6
10009208:	dc400315 	stw	r17,12(sp)
1000920c:	8022907a 	slli	r17,r16,1
10009210:	dd000615 	stw	r20,24(sp)
10009214:	2829883a 	mov	r20,r5
10009218:	01400044 	movi	r5,1
1000921c:	dcc00515 	stw	r19,20(sp)
10009220:	dc800415 	stw	r18,16(sp)
10009224:	dfc00715 	stw	ra,28(sp)
10009228:	3825883a 	mov	r18,r7
1000922c:	8822d57a 	srli	r17,r17,21
10009230:	00084ac0 	call	100084ac <_Balloc>
10009234:	1027883a 	mov	r19,r2
10009238:	00800434 	movhi	r2,16
1000923c:	10bfffc4 	addi	r2,r2,-1
10009240:	808c703a 	and	r6,r16,r2
10009244:	88000126 	beq	r17,zero,1000924c <__d2b+0x50>
10009248:	31800434 	orhi	r6,r6,16
1000924c:	d9800015 	stw	r6,0(sp)
10009250:	a0002426 	beq	r20,zero,100092e4 <__d2b+0xe8>
10009254:	d9000104 	addi	r4,sp,4
10009258:	dd000115 	stw	r20,4(sp)
1000925c:	00088300 	call	10008830 <__lo0bits>
10009260:	d8c00017 	ldw	r3,0(sp)
10009264:	10002f1e 	bne	r2,zero,10009324 <__d2b+0x128>
10009268:	d9000117 	ldw	r4,4(sp)
1000926c:	99000515 	stw	r4,20(r19)
10009270:	1821003a 	cmpeq	r16,r3,zero
10009274:	01000084 	movi	r4,2
10009278:	2421c83a 	sub	r16,r4,r16
1000927c:	98c00615 	stw	r3,24(r19)
10009280:	9c000415 	stw	r16,16(r19)
10009284:	88001f1e 	bne	r17,zero,10009304 <__d2b+0x108>
10009288:	10bef384 	addi	r2,r2,-1074
1000928c:	90800015 	stw	r2,0(r18)
10009290:	00900034 	movhi	r2,16384
10009294:	10bfffc4 	addi	r2,r2,-1
10009298:	8085883a 	add	r2,r16,r2
1000929c:	1085883a 	add	r2,r2,r2
100092a0:	1085883a 	add	r2,r2,r2
100092a4:	9885883a 	add	r2,r19,r2
100092a8:	11000517 	ldw	r4,20(r2)
100092ac:	8020917a 	slli	r16,r16,5
100092b0:	00087c80 	call	100087c8 <__hi0bits>
100092b4:	d8c00817 	ldw	r3,32(sp)
100092b8:	8085c83a 	sub	r2,r16,r2
100092bc:	18800015 	stw	r2,0(r3)
100092c0:	9805883a 	mov	r2,r19
100092c4:	dfc00717 	ldw	ra,28(sp)
100092c8:	dd000617 	ldw	r20,24(sp)
100092cc:	dcc00517 	ldw	r19,20(sp)
100092d0:	dc800417 	ldw	r18,16(sp)
100092d4:	dc400317 	ldw	r17,12(sp)
100092d8:	dc000217 	ldw	r16,8(sp)
100092dc:	dec00804 	addi	sp,sp,32
100092e0:	f800283a 	ret
100092e4:	d809883a 	mov	r4,sp
100092e8:	00088300 	call	10008830 <__lo0bits>
100092ec:	d8c00017 	ldw	r3,0(sp)
100092f0:	04000044 	movi	r16,1
100092f4:	9c000415 	stw	r16,16(r19)
100092f8:	98c00515 	stw	r3,20(r19)
100092fc:	10800804 	addi	r2,r2,32
10009300:	883fe126 	beq	r17,zero,10009288 <__alt_data_end+0xf8009288>
10009304:	00c00d44 	movi	r3,53
10009308:	8c7ef344 	addi	r17,r17,-1075
1000930c:	88a3883a 	add	r17,r17,r2
10009310:	1885c83a 	sub	r2,r3,r2
10009314:	d8c00817 	ldw	r3,32(sp)
10009318:	94400015 	stw	r17,0(r18)
1000931c:	18800015 	stw	r2,0(r3)
10009320:	003fe706 	br	100092c0 <__alt_data_end+0xf80092c0>
10009324:	01000804 	movi	r4,32
10009328:	2089c83a 	sub	r4,r4,r2
1000932c:	1908983a 	sll	r4,r3,r4
10009330:	d9400117 	ldw	r5,4(sp)
10009334:	1886d83a 	srl	r3,r3,r2
10009338:	2148b03a 	or	r4,r4,r5
1000933c:	99000515 	stw	r4,20(r19)
10009340:	d8c00015 	stw	r3,0(sp)
10009344:	003fca06 	br	10009270 <__alt_data_end+0xf8009270>

10009348 <__ratio>:
10009348:	defff904 	addi	sp,sp,-28
1000934c:	dc400315 	stw	r17,12(sp)
10009350:	2823883a 	mov	r17,r5
10009354:	d9400104 	addi	r5,sp,4
10009358:	dfc00615 	stw	ra,24(sp)
1000935c:	dcc00515 	stw	r19,20(sp)
10009360:	dc800415 	stw	r18,16(sp)
10009364:	2027883a 	mov	r19,r4
10009368:	dc000215 	stw	r16,8(sp)
1000936c:	00090f00 	call	100090f0 <__b2d>
10009370:	d80b883a 	mov	r5,sp
10009374:	8809883a 	mov	r4,r17
10009378:	1025883a 	mov	r18,r2
1000937c:	1821883a 	mov	r16,r3
10009380:	00090f00 	call	100090f0 <__b2d>
10009384:	8a000417 	ldw	r8,16(r17)
10009388:	99000417 	ldw	r4,16(r19)
1000938c:	d9400117 	ldw	r5,4(sp)
10009390:	2209c83a 	sub	r4,r4,r8
10009394:	2010917a 	slli	r8,r4,5
10009398:	d9000017 	ldw	r4,0(sp)
1000939c:	2909c83a 	sub	r4,r5,r4
100093a0:	4109883a 	add	r4,r8,r4
100093a4:	01000e0e 	bge	zero,r4,100093e0 <__ratio+0x98>
100093a8:	2008953a 	slli	r4,r4,20
100093ac:	2421883a 	add	r16,r4,r16
100093b0:	100d883a 	mov	r6,r2
100093b4:	180f883a 	mov	r7,r3
100093b8:	9009883a 	mov	r4,r18
100093bc:	800b883a 	mov	r5,r16
100093c0:	000d4340 	call	1000d434 <__divdf3>
100093c4:	dfc00617 	ldw	ra,24(sp)
100093c8:	dcc00517 	ldw	r19,20(sp)
100093cc:	dc800417 	ldw	r18,16(sp)
100093d0:	dc400317 	ldw	r17,12(sp)
100093d4:	dc000217 	ldw	r16,8(sp)
100093d8:	dec00704 	addi	sp,sp,28
100093dc:	f800283a 	ret
100093e0:	2008953a 	slli	r4,r4,20
100093e4:	1907c83a 	sub	r3,r3,r4
100093e8:	003ff106 	br	100093b0 <__alt_data_end+0xf80093b0>

100093ec <_mprec_log10>:
100093ec:	defffe04 	addi	sp,sp,-8
100093f0:	dc000015 	stw	r16,0(sp)
100093f4:	dfc00115 	stw	ra,4(sp)
100093f8:	008005c4 	movi	r2,23
100093fc:	2021883a 	mov	r16,r4
10009400:	11000d0e 	bge	r2,r4,10009438 <_mprec_log10+0x4c>
10009404:	0005883a 	mov	r2,zero
10009408:	00cffc34 	movhi	r3,16368
1000940c:	843fffc4 	addi	r16,r16,-1
10009410:	000d883a 	mov	r6,zero
10009414:	01d00934 	movhi	r7,16420
10009418:	1009883a 	mov	r4,r2
1000941c:	180b883a 	mov	r5,r3
10009420:	000e05c0 	call	1000e05c <__muldf3>
10009424:	803ff91e 	bne	r16,zero,1000940c <__alt_data_end+0xf800940c>
10009428:	dfc00117 	ldw	ra,4(sp)
1000942c:	dc000017 	ldw	r16,0(sp)
10009430:	dec00204 	addi	sp,sp,8
10009434:	f800283a 	ret
10009438:	202090fa 	slli	r16,r4,3
1000943c:	00840074 	movhi	r2,4097
10009440:	10893b04 	addi	r2,r2,9452
10009444:	1421883a 	add	r16,r2,r16
10009448:	80800017 	ldw	r2,0(r16)
1000944c:	80c00117 	ldw	r3,4(r16)
10009450:	dfc00117 	ldw	ra,4(sp)
10009454:	dc000017 	ldw	r16,0(sp)
10009458:	dec00204 	addi	sp,sp,8
1000945c:	f800283a 	ret

10009460 <__copybits>:
10009460:	297fffc4 	addi	r5,r5,-1
10009464:	280fd17a 	srai	r7,r5,5
10009468:	30c00417 	ldw	r3,16(r6)
1000946c:	30800504 	addi	r2,r6,20
10009470:	39c00044 	addi	r7,r7,1
10009474:	18c7883a 	add	r3,r3,r3
10009478:	39cf883a 	add	r7,r7,r7
1000947c:	18c7883a 	add	r3,r3,r3
10009480:	39cf883a 	add	r7,r7,r7
10009484:	10c7883a 	add	r3,r2,r3
10009488:	21cf883a 	add	r7,r4,r7
1000948c:	10c00d2e 	bgeu	r2,r3,100094c4 <__copybits+0x64>
10009490:	200b883a 	mov	r5,r4
10009494:	12000017 	ldw	r8,0(r2)
10009498:	29400104 	addi	r5,r5,4
1000949c:	10800104 	addi	r2,r2,4
100094a0:	2a3fff15 	stw	r8,-4(r5)
100094a4:	10fffb36 	bltu	r2,r3,10009494 <__alt_data_end+0xf8009494>
100094a8:	1985c83a 	sub	r2,r3,r6
100094ac:	10bffac4 	addi	r2,r2,-21
100094b0:	1004d0ba 	srli	r2,r2,2
100094b4:	10800044 	addi	r2,r2,1
100094b8:	1085883a 	add	r2,r2,r2
100094bc:	1085883a 	add	r2,r2,r2
100094c0:	2089883a 	add	r4,r4,r2
100094c4:	21c0032e 	bgeu	r4,r7,100094d4 <__copybits+0x74>
100094c8:	20000015 	stw	zero,0(r4)
100094cc:	21000104 	addi	r4,r4,4
100094d0:	21fffd36 	bltu	r4,r7,100094c8 <__alt_data_end+0xf80094c8>
100094d4:	f800283a 	ret

100094d8 <__any_on>:
100094d8:	20c00417 	ldw	r3,16(r4)
100094dc:	2805d17a 	srai	r2,r5,5
100094e0:	21000504 	addi	r4,r4,20
100094e4:	18800d0e 	bge	r3,r2,1000951c <__any_on+0x44>
100094e8:	18c7883a 	add	r3,r3,r3
100094ec:	18c7883a 	add	r3,r3,r3
100094f0:	20c7883a 	add	r3,r4,r3
100094f4:	20c0192e 	bgeu	r4,r3,1000955c <__any_on+0x84>
100094f8:	18bfff17 	ldw	r2,-4(r3)
100094fc:	18ffff04 	addi	r3,r3,-4
10009500:	1000041e 	bne	r2,zero,10009514 <__any_on+0x3c>
10009504:	20c0142e 	bgeu	r4,r3,10009558 <__any_on+0x80>
10009508:	18ffff04 	addi	r3,r3,-4
1000950c:	19400017 	ldw	r5,0(r3)
10009510:	283ffc26 	beq	r5,zero,10009504 <__alt_data_end+0xf8009504>
10009514:	00800044 	movi	r2,1
10009518:	f800283a 	ret
1000951c:	10c00a0e 	bge	r2,r3,10009548 <__any_on+0x70>
10009520:	1085883a 	add	r2,r2,r2
10009524:	1085883a 	add	r2,r2,r2
10009528:	294007cc 	andi	r5,r5,31
1000952c:	2087883a 	add	r3,r4,r2
10009530:	283ff026 	beq	r5,zero,100094f4 <__alt_data_end+0xf80094f4>
10009534:	19800017 	ldw	r6,0(r3)
10009538:	3144d83a 	srl	r2,r6,r5
1000953c:	114a983a 	sll	r5,r2,r5
10009540:	317ff41e 	bne	r6,r5,10009514 <__alt_data_end+0xf8009514>
10009544:	003feb06 	br	100094f4 <__alt_data_end+0xf80094f4>
10009548:	1085883a 	add	r2,r2,r2
1000954c:	1085883a 	add	r2,r2,r2
10009550:	2087883a 	add	r3,r4,r2
10009554:	003fe706 	br	100094f4 <__alt_data_end+0xf80094f4>
10009558:	f800283a 	ret
1000955c:	0005883a 	mov	r2,zero
10009560:	f800283a 	ret

10009564 <_realloc_r>:
10009564:	defff604 	addi	sp,sp,-40
10009568:	dc800215 	stw	r18,8(sp)
1000956c:	dfc00915 	stw	ra,36(sp)
10009570:	df000815 	stw	fp,32(sp)
10009574:	ddc00715 	stw	r23,28(sp)
10009578:	dd800615 	stw	r22,24(sp)
1000957c:	dd400515 	stw	r21,20(sp)
10009580:	dd000415 	stw	r20,16(sp)
10009584:	dcc00315 	stw	r19,12(sp)
10009588:	dc400115 	stw	r17,4(sp)
1000958c:	dc000015 	stw	r16,0(sp)
10009590:	3025883a 	mov	r18,r6
10009594:	2800b726 	beq	r5,zero,10009874 <_realloc_r+0x310>
10009598:	282b883a 	mov	r21,r5
1000959c:	2029883a 	mov	r20,r4
100095a0:	000f9c80 	call	1000f9c8 <__malloc_lock>
100095a4:	a8bfff17 	ldw	r2,-4(r21)
100095a8:	043fff04 	movi	r16,-4
100095ac:	90c002c4 	addi	r3,r18,11
100095b0:	01000584 	movi	r4,22
100095b4:	acfffe04 	addi	r19,r21,-8
100095b8:	1420703a 	and	r16,r2,r16
100095bc:	20c0332e 	bgeu	r4,r3,1000968c <_realloc_r+0x128>
100095c0:	047ffe04 	movi	r17,-8
100095c4:	1c62703a 	and	r17,r3,r17
100095c8:	8807883a 	mov	r3,r17
100095cc:	88005816 	blt	r17,zero,10009730 <_realloc_r+0x1cc>
100095d0:	8c805736 	bltu	r17,r18,10009730 <_realloc_r+0x1cc>
100095d4:	80c0300e 	bge	r16,r3,10009698 <_realloc_r+0x134>
100095d8:	07040074 	movhi	fp,4097
100095dc:	e70ae904 	addi	fp,fp,11172
100095e0:	e1c00217 	ldw	r7,8(fp)
100095e4:	9c09883a 	add	r4,r19,r16
100095e8:	22000117 	ldw	r8,4(r4)
100095ec:	21c06326 	beq	r4,r7,1000977c <_realloc_r+0x218>
100095f0:	017fff84 	movi	r5,-2
100095f4:	414a703a 	and	r5,r8,r5
100095f8:	214b883a 	add	r5,r4,r5
100095fc:	29800117 	ldw	r6,4(r5)
10009600:	3180004c 	andi	r6,r6,1
10009604:	30003f26 	beq	r6,zero,10009704 <_realloc_r+0x1a0>
10009608:	1080004c 	andi	r2,r2,1
1000960c:	10008326 	beq	r2,zero,1000981c <_realloc_r+0x2b8>
10009610:	900b883a 	mov	r5,r18
10009614:	a009883a 	mov	r4,r20
10009618:	00077f00 	call	100077f0 <_malloc_r>
1000961c:	1025883a 	mov	r18,r2
10009620:	10011e26 	beq	r2,zero,10009a9c <_realloc_r+0x538>
10009624:	a93fff17 	ldw	r4,-4(r21)
10009628:	10fffe04 	addi	r3,r2,-8
1000962c:	00bfff84 	movi	r2,-2
10009630:	2084703a 	and	r2,r4,r2
10009634:	9885883a 	add	r2,r19,r2
10009638:	1880ee26 	beq	r3,r2,100099f4 <_realloc_r+0x490>
1000963c:	81bfff04 	addi	r6,r16,-4
10009640:	00800904 	movi	r2,36
10009644:	1180b836 	bltu	r2,r6,10009928 <_realloc_r+0x3c4>
10009648:	00c004c4 	movi	r3,19
1000964c:	19809636 	bltu	r3,r6,100098a8 <_realloc_r+0x344>
10009650:	9005883a 	mov	r2,r18
10009654:	a807883a 	mov	r3,r21
10009658:	19000017 	ldw	r4,0(r3)
1000965c:	11000015 	stw	r4,0(r2)
10009660:	19000117 	ldw	r4,4(r3)
10009664:	11000115 	stw	r4,4(r2)
10009668:	18c00217 	ldw	r3,8(r3)
1000966c:	10c00215 	stw	r3,8(r2)
10009670:	a80b883a 	mov	r5,r21
10009674:	a009883a 	mov	r4,r20
10009678:	0006bf80 	call	10006bf8 <_free_r>
1000967c:	a009883a 	mov	r4,r20
10009680:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10009684:	9005883a 	mov	r2,r18
10009688:	00001206 	br	100096d4 <_realloc_r+0x170>
1000968c:	00c00404 	movi	r3,16
10009690:	1823883a 	mov	r17,r3
10009694:	003fce06 	br	100095d0 <__alt_data_end+0xf80095d0>
10009698:	a825883a 	mov	r18,r21
1000969c:	8445c83a 	sub	r2,r16,r17
100096a0:	00c003c4 	movi	r3,15
100096a4:	18802636 	bltu	r3,r2,10009740 <_realloc_r+0x1dc>
100096a8:	99800117 	ldw	r6,4(r19)
100096ac:	9c07883a 	add	r3,r19,r16
100096b0:	3180004c 	andi	r6,r6,1
100096b4:	3420b03a 	or	r16,r6,r16
100096b8:	9c000115 	stw	r16,4(r19)
100096bc:	18800117 	ldw	r2,4(r3)
100096c0:	10800054 	ori	r2,r2,1
100096c4:	18800115 	stw	r2,4(r3)
100096c8:	a009883a 	mov	r4,r20
100096cc:	000f9ec0 	call	1000f9ec <__malloc_unlock>
100096d0:	9005883a 	mov	r2,r18
100096d4:	dfc00917 	ldw	ra,36(sp)
100096d8:	df000817 	ldw	fp,32(sp)
100096dc:	ddc00717 	ldw	r23,28(sp)
100096e0:	dd800617 	ldw	r22,24(sp)
100096e4:	dd400517 	ldw	r21,20(sp)
100096e8:	dd000417 	ldw	r20,16(sp)
100096ec:	dcc00317 	ldw	r19,12(sp)
100096f0:	dc800217 	ldw	r18,8(sp)
100096f4:	dc400117 	ldw	r17,4(sp)
100096f8:	dc000017 	ldw	r16,0(sp)
100096fc:	dec00a04 	addi	sp,sp,40
10009700:	f800283a 	ret
10009704:	017fff04 	movi	r5,-4
10009708:	414a703a 	and	r5,r8,r5
1000970c:	814d883a 	add	r6,r16,r5
10009710:	30c01f16 	blt	r6,r3,10009790 <_realloc_r+0x22c>
10009714:	20800317 	ldw	r2,12(r4)
10009718:	20c00217 	ldw	r3,8(r4)
1000971c:	a825883a 	mov	r18,r21
10009720:	3021883a 	mov	r16,r6
10009724:	18800315 	stw	r2,12(r3)
10009728:	10c00215 	stw	r3,8(r2)
1000972c:	003fdb06 	br	1000969c <__alt_data_end+0xf800969c>
10009730:	00800304 	movi	r2,12
10009734:	a0800015 	stw	r2,0(r20)
10009738:	0005883a 	mov	r2,zero
1000973c:	003fe506 	br	100096d4 <__alt_data_end+0xf80096d4>
10009740:	98c00117 	ldw	r3,4(r19)
10009744:	9c4b883a 	add	r5,r19,r17
10009748:	11000054 	ori	r4,r2,1
1000974c:	18c0004c 	andi	r3,r3,1
10009750:	1c62b03a 	or	r17,r3,r17
10009754:	9c400115 	stw	r17,4(r19)
10009758:	29000115 	stw	r4,4(r5)
1000975c:	2885883a 	add	r2,r5,r2
10009760:	10c00117 	ldw	r3,4(r2)
10009764:	29400204 	addi	r5,r5,8
10009768:	a009883a 	mov	r4,r20
1000976c:	18c00054 	ori	r3,r3,1
10009770:	10c00115 	stw	r3,4(r2)
10009774:	0006bf80 	call	10006bf8 <_free_r>
10009778:	003fd306 	br	100096c8 <__alt_data_end+0xf80096c8>
1000977c:	017fff04 	movi	r5,-4
10009780:	414a703a 	and	r5,r8,r5
10009784:	89800404 	addi	r6,r17,16
10009788:	8151883a 	add	r8,r16,r5
1000978c:	4180590e 	bge	r8,r6,100098f4 <_realloc_r+0x390>
10009790:	1080004c 	andi	r2,r2,1
10009794:	103f9e1e 	bne	r2,zero,10009610 <__alt_data_end+0xf8009610>
10009798:	adbffe17 	ldw	r22,-8(r21)
1000979c:	00bfff04 	movi	r2,-4
100097a0:	9dadc83a 	sub	r22,r19,r22
100097a4:	b1800117 	ldw	r6,4(r22)
100097a8:	3084703a 	and	r2,r6,r2
100097ac:	20002026 	beq	r4,zero,10009830 <_realloc_r+0x2cc>
100097b0:	80af883a 	add	r23,r16,r2
100097b4:	b96f883a 	add	r23,r23,r5
100097b8:	21c05f26 	beq	r4,r7,10009938 <_realloc_r+0x3d4>
100097bc:	b8c01c16 	blt	r23,r3,10009830 <_realloc_r+0x2cc>
100097c0:	20800317 	ldw	r2,12(r4)
100097c4:	20c00217 	ldw	r3,8(r4)
100097c8:	81bfff04 	addi	r6,r16,-4
100097cc:	01000904 	movi	r4,36
100097d0:	18800315 	stw	r2,12(r3)
100097d4:	10c00215 	stw	r3,8(r2)
100097d8:	b0c00217 	ldw	r3,8(r22)
100097dc:	b0800317 	ldw	r2,12(r22)
100097e0:	b4800204 	addi	r18,r22,8
100097e4:	18800315 	stw	r2,12(r3)
100097e8:	10c00215 	stw	r3,8(r2)
100097ec:	21801b36 	bltu	r4,r6,1000985c <_realloc_r+0x2f8>
100097f0:	008004c4 	movi	r2,19
100097f4:	1180352e 	bgeu	r2,r6,100098cc <_realloc_r+0x368>
100097f8:	a8800017 	ldw	r2,0(r21)
100097fc:	b0800215 	stw	r2,8(r22)
10009800:	a8800117 	ldw	r2,4(r21)
10009804:	b0800315 	stw	r2,12(r22)
10009808:	008006c4 	movi	r2,27
1000980c:	11807f36 	bltu	r2,r6,10009a0c <_realloc_r+0x4a8>
10009810:	b0800404 	addi	r2,r22,16
10009814:	ad400204 	addi	r21,r21,8
10009818:	00002d06 	br	100098d0 <_realloc_r+0x36c>
1000981c:	adbffe17 	ldw	r22,-8(r21)
10009820:	00bfff04 	movi	r2,-4
10009824:	9dadc83a 	sub	r22,r19,r22
10009828:	b1000117 	ldw	r4,4(r22)
1000982c:	2084703a 	and	r2,r4,r2
10009830:	b03f7726 	beq	r22,zero,10009610 <__alt_data_end+0xf8009610>
10009834:	80af883a 	add	r23,r16,r2
10009838:	b8ff7516 	blt	r23,r3,10009610 <__alt_data_end+0xf8009610>
1000983c:	b0800317 	ldw	r2,12(r22)
10009840:	b0c00217 	ldw	r3,8(r22)
10009844:	81bfff04 	addi	r6,r16,-4
10009848:	01000904 	movi	r4,36
1000984c:	18800315 	stw	r2,12(r3)
10009850:	10c00215 	stw	r3,8(r2)
10009854:	b4800204 	addi	r18,r22,8
10009858:	21bfe52e 	bgeu	r4,r6,100097f0 <__alt_data_end+0xf80097f0>
1000985c:	a80b883a 	mov	r5,r21
10009860:	9009883a 	mov	r4,r18
10009864:	00082280 	call	10008228 <memmove>
10009868:	b821883a 	mov	r16,r23
1000986c:	b027883a 	mov	r19,r22
10009870:	003f8a06 	br	1000969c <__alt_data_end+0xf800969c>
10009874:	300b883a 	mov	r5,r6
10009878:	dfc00917 	ldw	ra,36(sp)
1000987c:	df000817 	ldw	fp,32(sp)
10009880:	ddc00717 	ldw	r23,28(sp)
10009884:	dd800617 	ldw	r22,24(sp)
10009888:	dd400517 	ldw	r21,20(sp)
1000988c:	dd000417 	ldw	r20,16(sp)
10009890:	dcc00317 	ldw	r19,12(sp)
10009894:	dc800217 	ldw	r18,8(sp)
10009898:	dc400117 	ldw	r17,4(sp)
1000989c:	dc000017 	ldw	r16,0(sp)
100098a0:	dec00a04 	addi	sp,sp,40
100098a4:	00077f01 	jmpi	100077f0 <_malloc_r>
100098a8:	a8c00017 	ldw	r3,0(r21)
100098ac:	90c00015 	stw	r3,0(r18)
100098b0:	a8c00117 	ldw	r3,4(r21)
100098b4:	90c00115 	stw	r3,4(r18)
100098b8:	00c006c4 	movi	r3,27
100098bc:	19804536 	bltu	r3,r6,100099d4 <_realloc_r+0x470>
100098c0:	90800204 	addi	r2,r18,8
100098c4:	a8c00204 	addi	r3,r21,8
100098c8:	003f6306 	br	10009658 <__alt_data_end+0xf8009658>
100098cc:	9005883a 	mov	r2,r18
100098d0:	a8c00017 	ldw	r3,0(r21)
100098d4:	b821883a 	mov	r16,r23
100098d8:	b027883a 	mov	r19,r22
100098dc:	10c00015 	stw	r3,0(r2)
100098e0:	a8c00117 	ldw	r3,4(r21)
100098e4:	10c00115 	stw	r3,4(r2)
100098e8:	a8c00217 	ldw	r3,8(r21)
100098ec:	10c00215 	stw	r3,8(r2)
100098f0:	003f6a06 	br	1000969c <__alt_data_end+0xf800969c>
100098f4:	9c67883a 	add	r19,r19,r17
100098f8:	4445c83a 	sub	r2,r8,r17
100098fc:	e4c00215 	stw	r19,8(fp)
10009900:	10800054 	ori	r2,r2,1
10009904:	98800115 	stw	r2,4(r19)
10009908:	a8bfff17 	ldw	r2,-4(r21)
1000990c:	a009883a 	mov	r4,r20
10009910:	1080004c 	andi	r2,r2,1
10009914:	1462b03a 	or	r17,r2,r17
10009918:	ac7fff15 	stw	r17,-4(r21)
1000991c:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10009920:	a805883a 	mov	r2,r21
10009924:	003f6b06 	br	100096d4 <__alt_data_end+0xf80096d4>
10009928:	a80b883a 	mov	r5,r21
1000992c:	9009883a 	mov	r4,r18
10009930:	00082280 	call	10008228 <memmove>
10009934:	003f4e06 	br	10009670 <__alt_data_end+0xf8009670>
10009938:	89000404 	addi	r4,r17,16
1000993c:	b93fbc16 	blt	r23,r4,10009830 <__alt_data_end+0xf8009830>
10009940:	b0800317 	ldw	r2,12(r22)
10009944:	b0c00217 	ldw	r3,8(r22)
10009948:	81bfff04 	addi	r6,r16,-4
1000994c:	01000904 	movi	r4,36
10009950:	18800315 	stw	r2,12(r3)
10009954:	10c00215 	stw	r3,8(r2)
10009958:	b4800204 	addi	r18,r22,8
1000995c:	21804336 	bltu	r4,r6,10009a6c <_realloc_r+0x508>
10009960:	008004c4 	movi	r2,19
10009964:	11803f2e 	bgeu	r2,r6,10009a64 <_realloc_r+0x500>
10009968:	a8800017 	ldw	r2,0(r21)
1000996c:	b0800215 	stw	r2,8(r22)
10009970:	a8800117 	ldw	r2,4(r21)
10009974:	b0800315 	stw	r2,12(r22)
10009978:	008006c4 	movi	r2,27
1000997c:	11803f36 	bltu	r2,r6,10009a7c <_realloc_r+0x518>
10009980:	b0800404 	addi	r2,r22,16
10009984:	ad400204 	addi	r21,r21,8
10009988:	a8c00017 	ldw	r3,0(r21)
1000998c:	10c00015 	stw	r3,0(r2)
10009990:	a8c00117 	ldw	r3,4(r21)
10009994:	10c00115 	stw	r3,4(r2)
10009998:	a8c00217 	ldw	r3,8(r21)
1000999c:	10c00215 	stw	r3,8(r2)
100099a0:	b447883a 	add	r3,r22,r17
100099a4:	bc45c83a 	sub	r2,r23,r17
100099a8:	e0c00215 	stw	r3,8(fp)
100099ac:	10800054 	ori	r2,r2,1
100099b0:	18800115 	stw	r2,4(r3)
100099b4:	b0800117 	ldw	r2,4(r22)
100099b8:	a009883a 	mov	r4,r20
100099bc:	1080004c 	andi	r2,r2,1
100099c0:	1462b03a 	or	r17,r2,r17
100099c4:	b4400115 	stw	r17,4(r22)
100099c8:	000f9ec0 	call	1000f9ec <__malloc_unlock>
100099cc:	9005883a 	mov	r2,r18
100099d0:	003f4006 	br	100096d4 <__alt_data_end+0xf80096d4>
100099d4:	a8c00217 	ldw	r3,8(r21)
100099d8:	90c00215 	stw	r3,8(r18)
100099dc:	a8c00317 	ldw	r3,12(r21)
100099e0:	90c00315 	stw	r3,12(r18)
100099e4:	30801126 	beq	r6,r2,10009a2c <_realloc_r+0x4c8>
100099e8:	90800404 	addi	r2,r18,16
100099ec:	a8c00404 	addi	r3,r21,16
100099f0:	003f1906 	br	10009658 <__alt_data_end+0xf8009658>
100099f4:	90ffff17 	ldw	r3,-4(r18)
100099f8:	00bfff04 	movi	r2,-4
100099fc:	a825883a 	mov	r18,r21
10009a00:	1884703a 	and	r2,r3,r2
10009a04:	80a1883a 	add	r16,r16,r2
10009a08:	003f2406 	br	1000969c <__alt_data_end+0xf800969c>
10009a0c:	a8800217 	ldw	r2,8(r21)
10009a10:	b0800415 	stw	r2,16(r22)
10009a14:	a8800317 	ldw	r2,12(r21)
10009a18:	b0800515 	stw	r2,20(r22)
10009a1c:	31000a26 	beq	r6,r4,10009a48 <_realloc_r+0x4e4>
10009a20:	b0800604 	addi	r2,r22,24
10009a24:	ad400404 	addi	r21,r21,16
10009a28:	003fa906 	br	100098d0 <__alt_data_end+0xf80098d0>
10009a2c:	a9000417 	ldw	r4,16(r21)
10009a30:	90800604 	addi	r2,r18,24
10009a34:	a8c00604 	addi	r3,r21,24
10009a38:	91000415 	stw	r4,16(r18)
10009a3c:	a9000517 	ldw	r4,20(r21)
10009a40:	91000515 	stw	r4,20(r18)
10009a44:	003f0406 	br	10009658 <__alt_data_end+0xf8009658>
10009a48:	a8c00417 	ldw	r3,16(r21)
10009a4c:	ad400604 	addi	r21,r21,24
10009a50:	b0800804 	addi	r2,r22,32
10009a54:	b0c00615 	stw	r3,24(r22)
10009a58:	a8ffff17 	ldw	r3,-4(r21)
10009a5c:	b0c00715 	stw	r3,28(r22)
10009a60:	003f9b06 	br	100098d0 <__alt_data_end+0xf80098d0>
10009a64:	9005883a 	mov	r2,r18
10009a68:	003fc706 	br	10009988 <__alt_data_end+0xf8009988>
10009a6c:	a80b883a 	mov	r5,r21
10009a70:	9009883a 	mov	r4,r18
10009a74:	00082280 	call	10008228 <memmove>
10009a78:	003fc906 	br	100099a0 <__alt_data_end+0xf80099a0>
10009a7c:	a8800217 	ldw	r2,8(r21)
10009a80:	b0800415 	stw	r2,16(r22)
10009a84:	a8800317 	ldw	r2,12(r21)
10009a88:	b0800515 	stw	r2,20(r22)
10009a8c:	31000726 	beq	r6,r4,10009aac <_realloc_r+0x548>
10009a90:	b0800604 	addi	r2,r22,24
10009a94:	ad400404 	addi	r21,r21,16
10009a98:	003fbb06 	br	10009988 <__alt_data_end+0xf8009988>
10009a9c:	a009883a 	mov	r4,r20
10009aa0:	000f9ec0 	call	1000f9ec <__malloc_unlock>
10009aa4:	0005883a 	mov	r2,zero
10009aa8:	003f0a06 	br	100096d4 <__alt_data_end+0xf80096d4>
10009aac:	a8c00417 	ldw	r3,16(r21)
10009ab0:	ad400604 	addi	r21,r21,24
10009ab4:	b0800804 	addi	r2,r22,32
10009ab8:	b0c00615 	stw	r3,24(r22)
10009abc:	a8ffff17 	ldw	r3,-4(r21)
10009ac0:	b0c00715 	stw	r3,28(r22)
10009ac4:	003fb006 	br	10009988 <__alt_data_end+0xf8009988>

10009ac8 <__fpclassifyd>:
10009ac8:	00a00034 	movhi	r2,32768
10009acc:	10bfffc4 	addi	r2,r2,-1
10009ad0:	2884703a 	and	r2,r5,r2
10009ad4:	10000726 	beq	r2,zero,10009af4 <__fpclassifyd+0x2c>
10009ad8:	00fffc34 	movhi	r3,65520
10009adc:	019ff834 	movhi	r6,32736
10009ae0:	28c7883a 	add	r3,r5,r3
10009ae4:	31bfffc4 	addi	r6,r6,-1
10009ae8:	30c00536 	bltu	r6,r3,10009b00 <__fpclassifyd+0x38>
10009aec:	00800104 	movi	r2,4
10009af0:	f800283a 	ret
10009af4:	2000021e 	bne	r4,zero,10009b00 <__fpclassifyd+0x38>
10009af8:	00800084 	movi	r2,2
10009afc:	f800283a 	ret
10009b00:	00dffc34 	movhi	r3,32752
10009b04:	019ff834 	movhi	r6,32736
10009b08:	28cb883a 	add	r5,r5,r3
10009b0c:	31bfffc4 	addi	r6,r6,-1
10009b10:	317ff62e 	bgeu	r6,r5,10009aec <__alt_data_end+0xf8009aec>
10009b14:	01400434 	movhi	r5,16
10009b18:	297fffc4 	addi	r5,r5,-1
10009b1c:	28800236 	bltu	r5,r2,10009b28 <__fpclassifyd+0x60>
10009b20:	008000c4 	movi	r2,3
10009b24:	f800283a 	ret
10009b28:	10c00226 	beq	r2,r3,10009b34 <__fpclassifyd+0x6c>
10009b2c:	0005883a 	mov	r2,zero
10009b30:	f800283a 	ret
10009b34:	2005003a 	cmpeq	r2,r4,zero
10009b38:	f800283a 	ret

10009b3c <_sbrk_r>:
10009b3c:	defffd04 	addi	sp,sp,-12
10009b40:	dc000015 	stw	r16,0(sp)
10009b44:	04040074 	movhi	r16,4097
10009b48:	dc400115 	stw	r17,4(sp)
10009b4c:	84174604 	addi	r16,r16,23832
10009b50:	2023883a 	mov	r17,r4
10009b54:	2809883a 	mov	r4,r5
10009b58:	dfc00215 	stw	ra,8(sp)
10009b5c:	80000015 	stw	zero,0(r16)
10009b60:	000fbd40 	call	1000fbd4 <sbrk>
10009b64:	00ffffc4 	movi	r3,-1
10009b68:	10c00526 	beq	r2,r3,10009b80 <_sbrk_r+0x44>
10009b6c:	dfc00217 	ldw	ra,8(sp)
10009b70:	dc400117 	ldw	r17,4(sp)
10009b74:	dc000017 	ldw	r16,0(sp)
10009b78:	dec00304 	addi	sp,sp,12
10009b7c:	f800283a 	ret
10009b80:	80c00017 	ldw	r3,0(r16)
10009b84:	183ff926 	beq	r3,zero,10009b6c <__alt_data_end+0xf8009b6c>
10009b88:	88c00015 	stw	r3,0(r17)
10009b8c:	003ff706 	br	10009b6c <__alt_data_end+0xf8009b6c>

10009b90 <__sread>:
10009b90:	defffe04 	addi	sp,sp,-8
10009b94:	dc000015 	stw	r16,0(sp)
10009b98:	2821883a 	mov	r16,r5
10009b9c:	2940038f 	ldh	r5,14(r5)
10009ba0:	dfc00115 	stw	ra,4(sp)
10009ba4:	000ba4c0 	call	1000ba4c <_read_r>
10009ba8:	10000716 	blt	r2,zero,10009bc8 <__sread+0x38>
10009bac:	80c01417 	ldw	r3,80(r16)
10009bb0:	1887883a 	add	r3,r3,r2
10009bb4:	80c01415 	stw	r3,80(r16)
10009bb8:	dfc00117 	ldw	ra,4(sp)
10009bbc:	dc000017 	ldw	r16,0(sp)
10009bc0:	dec00204 	addi	sp,sp,8
10009bc4:	f800283a 	ret
10009bc8:	80c0030b 	ldhu	r3,12(r16)
10009bcc:	18fbffcc 	andi	r3,r3,61439
10009bd0:	80c0030d 	sth	r3,12(r16)
10009bd4:	dfc00117 	ldw	ra,4(sp)
10009bd8:	dc000017 	ldw	r16,0(sp)
10009bdc:	dec00204 	addi	sp,sp,8
10009be0:	f800283a 	ret

10009be4 <__seofread>:
10009be4:	0005883a 	mov	r2,zero
10009be8:	f800283a 	ret

10009bec <__swrite>:
10009bec:	2880030b 	ldhu	r2,12(r5)
10009bf0:	defffb04 	addi	sp,sp,-20
10009bf4:	dcc00315 	stw	r19,12(sp)
10009bf8:	dc800215 	stw	r18,8(sp)
10009bfc:	dc400115 	stw	r17,4(sp)
10009c00:	dc000015 	stw	r16,0(sp)
10009c04:	dfc00415 	stw	ra,16(sp)
10009c08:	10c0400c 	andi	r3,r2,256
10009c0c:	2821883a 	mov	r16,r5
10009c10:	2023883a 	mov	r17,r4
10009c14:	3025883a 	mov	r18,r6
10009c18:	3827883a 	mov	r19,r7
10009c1c:	18000526 	beq	r3,zero,10009c34 <__swrite+0x48>
10009c20:	2940038f 	ldh	r5,14(r5)
10009c24:	01c00084 	movi	r7,2
10009c28:	000d883a 	mov	r6,zero
10009c2c:	000b9ec0 	call	1000b9ec <_lseek_r>
10009c30:	8080030b 	ldhu	r2,12(r16)
10009c34:	8140038f 	ldh	r5,14(r16)
10009c38:	10bbffcc 	andi	r2,r2,61439
10009c3c:	980f883a 	mov	r7,r19
10009c40:	900d883a 	mov	r6,r18
10009c44:	8809883a 	mov	r4,r17
10009c48:	8080030d 	sth	r2,12(r16)
10009c4c:	dfc00417 	ldw	ra,16(sp)
10009c50:	dcc00317 	ldw	r19,12(sp)
10009c54:	dc800217 	ldw	r18,8(sp)
10009c58:	dc400117 	ldw	r17,4(sp)
10009c5c:	dc000017 	ldw	r16,0(sp)
10009c60:	dec00504 	addi	sp,sp,20
10009c64:	000b4a01 	jmpi	1000b4a0 <_write_r>

10009c68 <__sseek>:
10009c68:	defffe04 	addi	sp,sp,-8
10009c6c:	dc000015 	stw	r16,0(sp)
10009c70:	2821883a 	mov	r16,r5
10009c74:	2940038f 	ldh	r5,14(r5)
10009c78:	dfc00115 	stw	ra,4(sp)
10009c7c:	000b9ec0 	call	1000b9ec <_lseek_r>
10009c80:	00ffffc4 	movi	r3,-1
10009c84:	10c00826 	beq	r2,r3,10009ca8 <__sseek+0x40>
10009c88:	80c0030b 	ldhu	r3,12(r16)
10009c8c:	80801415 	stw	r2,80(r16)
10009c90:	18c40014 	ori	r3,r3,4096
10009c94:	80c0030d 	sth	r3,12(r16)
10009c98:	dfc00117 	ldw	ra,4(sp)
10009c9c:	dc000017 	ldw	r16,0(sp)
10009ca0:	dec00204 	addi	sp,sp,8
10009ca4:	f800283a 	ret
10009ca8:	80c0030b 	ldhu	r3,12(r16)
10009cac:	18fbffcc 	andi	r3,r3,61439
10009cb0:	80c0030d 	sth	r3,12(r16)
10009cb4:	dfc00117 	ldw	ra,4(sp)
10009cb8:	dc000017 	ldw	r16,0(sp)
10009cbc:	dec00204 	addi	sp,sp,8
10009cc0:	f800283a 	ret

10009cc4 <__sclose>:
10009cc4:	2940038f 	ldh	r5,14(r5)
10009cc8:	000b5001 	jmpi	1000b500 <_close_r>

10009ccc <strcmp>:
10009ccc:	2144b03a 	or	r2,r4,r5
10009cd0:	108000cc 	andi	r2,r2,3
10009cd4:	1000171e 	bne	r2,zero,10009d34 <strcmp+0x68>
10009cd8:	20800017 	ldw	r2,0(r4)
10009cdc:	28c00017 	ldw	r3,0(r5)
10009ce0:	10c0141e 	bne	r2,r3,10009d34 <strcmp+0x68>
10009ce4:	027fbff4 	movhi	r9,65279
10009ce8:	4a7fbfc4 	addi	r9,r9,-257
10009cec:	0086303a 	nor	r3,zero,r2
10009cf0:	02202074 	movhi	r8,32897
10009cf4:	1245883a 	add	r2,r2,r9
10009cf8:	42202004 	addi	r8,r8,-32640
10009cfc:	10c4703a 	and	r2,r2,r3
10009d00:	1204703a 	and	r2,r2,r8
10009d04:	10000226 	beq	r2,zero,10009d10 <strcmp+0x44>
10009d08:	00002306 	br	10009d98 <strcmp+0xcc>
10009d0c:	1000221e 	bne	r2,zero,10009d98 <strcmp+0xcc>
10009d10:	21000104 	addi	r4,r4,4
10009d14:	20c00017 	ldw	r3,0(r4)
10009d18:	29400104 	addi	r5,r5,4
10009d1c:	29800017 	ldw	r6,0(r5)
10009d20:	1a4f883a 	add	r7,r3,r9
10009d24:	00c4303a 	nor	r2,zero,r3
10009d28:	3884703a 	and	r2,r7,r2
10009d2c:	1204703a 	and	r2,r2,r8
10009d30:	19bff626 	beq	r3,r6,10009d0c <__alt_data_end+0xf8009d0c>
10009d34:	20800003 	ldbu	r2,0(r4)
10009d38:	10c03fcc 	andi	r3,r2,255
10009d3c:	18c0201c 	xori	r3,r3,128
10009d40:	18ffe004 	addi	r3,r3,-128
10009d44:	18000c26 	beq	r3,zero,10009d78 <strcmp+0xac>
10009d48:	29800007 	ldb	r6,0(r5)
10009d4c:	19800326 	beq	r3,r6,10009d5c <strcmp+0x90>
10009d50:	00001306 	br	10009da0 <strcmp+0xd4>
10009d54:	29800007 	ldb	r6,0(r5)
10009d58:	11800b1e 	bne	r2,r6,10009d88 <strcmp+0xbc>
10009d5c:	21000044 	addi	r4,r4,1
10009d60:	20c00003 	ldbu	r3,0(r4)
10009d64:	29400044 	addi	r5,r5,1
10009d68:	18803fcc 	andi	r2,r3,255
10009d6c:	1080201c 	xori	r2,r2,128
10009d70:	10bfe004 	addi	r2,r2,-128
10009d74:	103ff71e 	bne	r2,zero,10009d54 <__alt_data_end+0xf8009d54>
10009d78:	0007883a 	mov	r3,zero
10009d7c:	28800003 	ldbu	r2,0(r5)
10009d80:	1885c83a 	sub	r2,r3,r2
10009d84:	f800283a 	ret
10009d88:	28800003 	ldbu	r2,0(r5)
10009d8c:	18c03fcc 	andi	r3,r3,255
10009d90:	1885c83a 	sub	r2,r3,r2
10009d94:	f800283a 	ret
10009d98:	0005883a 	mov	r2,zero
10009d9c:	f800283a 	ret
10009da0:	10c03fcc 	andi	r3,r2,255
10009da4:	003ff506 	br	10009d7c <__alt_data_end+0xf8009d7c>

10009da8 <__sprint_r.part.0>:
10009da8:	28801917 	ldw	r2,100(r5)
10009dac:	defff604 	addi	sp,sp,-40
10009db0:	dd400515 	stw	r21,20(sp)
10009db4:	dfc00915 	stw	ra,36(sp)
10009db8:	df000815 	stw	fp,32(sp)
10009dbc:	ddc00715 	stw	r23,28(sp)
10009dc0:	dd800615 	stw	r22,24(sp)
10009dc4:	dd000415 	stw	r20,16(sp)
10009dc8:	dcc00315 	stw	r19,12(sp)
10009dcc:	dc800215 	stw	r18,8(sp)
10009dd0:	dc400115 	stw	r17,4(sp)
10009dd4:	dc000015 	stw	r16,0(sp)
10009dd8:	1088000c 	andi	r2,r2,8192
10009ddc:	302b883a 	mov	r21,r6
10009de0:	10002e26 	beq	r2,zero,10009e9c <__sprint_r.part.0+0xf4>
10009de4:	30800217 	ldw	r2,8(r6)
10009de8:	35800017 	ldw	r22,0(r6)
10009dec:	10002926 	beq	r2,zero,10009e94 <__sprint_r.part.0+0xec>
10009df0:	2827883a 	mov	r19,r5
10009df4:	2029883a 	mov	r20,r4
10009df8:	b5c00104 	addi	r23,r22,4
10009dfc:	04bfffc4 	movi	r18,-1
10009e00:	bc400017 	ldw	r17,0(r23)
10009e04:	b4000017 	ldw	r16,0(r22)
10009e08:	0039883a 	mov	fp,zero
10009e0c:	8822d0ba 	srli	r17,r17,2
10009e10:	8800031e 	bne	r17,zero,10009e20 <__sprint_r.part.0+0x78>
10009e14:	00001806 	br	10009e78 <__sprint_r.part.0+0xd0>
10009e18:	84000104 	addi	r16,r16,4
10009e1c:	8f001526 	beq	r17,fp,10009e74 <__sprint_r.part.0+0xcc>
10009e20:	81400017 	ldw	r5,0(r16)
10009e24:	980d883a 	mov	r6,r19
10009e28:	a009883a 	mov	r4,r20
10009e2c:	000b8980 	call	1000b898 <_fputwc_r>
10009e30:	e7000044 	addi	fp,fp,1
10009e34:	14bff81e 	bne	r2,r18,10009e18 <__alt_data_end+0xf8009e18>
10009e38:	9005883a 	mov	r2,r18
10009e3c:	a8000215 	stw	zero,8(r21)
10009e40:	a8000115 	stw	zero,4(r21)
10009e44:	dfc00917 	ldw	ra,36(sp)
10009e48:	df000817 	ldw	fp,32(sp)
10009e4c:	ddc00717 	ldw	r23,28(sp)
10009e50:	dd800617 	ldw	r22,24(sp)
10009e54:	dd400517 	ldw	r21,20(sp)
10009e58:	dd000417 	ldw	r20,16(sp)
10009e5c:	dcc00317 	ldw	r19,12(sp)
10009e60:	dc800217 	ldw	r18,8(sp)
10009e64:	dc400117 	ldw	r17,4(sp)
10009e68:	dc000017 	ldw	r16,0(sp)
10009e6c:	dec00a04 	addi	sp,sp,40
10009e70:	f800283a 	ret
10009e74:	a8800217 	ldw	r2,8(r21)
10009e78:	8c63883a 	add	r17,r17,r17
10009e7c:	8c63883a 	add	r17,r17,r17
10009e80:	1445c83a 	sub	r2,r2,r17
10009e84:	a8800215 	stw	r2,8(r21)
10009e88:	b5800204 	addi	r22,r22,8
10009e8c:	bdc00204 	addi	r23,r23,8
10009e90:	103fdb1e 	bne	r2,zero,10009e00 <__alt_data_end+0xf8009e00>
10009e94:	0005883a 	mov	r2,zero
10009e98:	003fe806 	br	10009e3c <__alt_data_end+0xf8009e3c>
10009e9c:	0006f080 	call	10006f08 <__sfvwrite_r>
10009ea0:	003fe606 	br	10009e3c <__alt_data_end+0xf8009e3c>

10009ea4 <__sprint_r>:
10009ea4:	30c00217 	ldw	r3,8(r6)
10009ea8:	18000126 	beq	r3,zero,10009eb0 <__sprint_r+0xc>
10009eac:	0009da81 	jmpi	10009da8 <__sprint_r.part.0>
10009eb0:	30000115 	stw	zero,4(r6)
10009eb4:	0005883a 	mov	r2,zero
10009eb8:	f800283a 	ret

10009ebc <___vfiprintf_internal_r>:
10009ebc:	deffca04 	addi	sp,sp,-216
10009ec0:	dd403115 	stw	r21,196(sp)
10009ec4:	dfc03515 	stw	ra,212(sp)
10009ec8:	df003415 	stw	fp,208(sp)
10009ecc:	ddc03315 	stw	r23,204(sp)
10009ed0:	dd803215 	stw	r22,200(sp)
10009ed4:	dd003015 	stw	r20,192(sp)
10009ed8:	dcc02f15 	stw	r19,188(sp)
10009edc:	dc802e15 	stw	r18,184(sp)
10009ee0:	dc402d15 	stw	r17,180(sp)
10009ee4:	dc002c15 	stw	r16,176(sp)
10009ee8:	d9002115 	stw	r4,132(sp)
10009eec:	d9402015 	stw	r5,128(sp)
10009ef0:	d9c02215 	stw	r7,136(sp)
10009ef4:	302b883a 	mov	r21,r6
10009ef8:	20000226 	beq	r4,zero,10009f04 <___vfiprintf_internal_r+0x48>
10009efc:	20800e17 	ldw	r2,56(r4)
10009f00:	1000cf26 	beq	r2,zero,1000a240 <___vfiprintf_internal_r+0x384>
10009f04:	d8c02017 	ldw	r3,128(sp)
10009f08:	1880030b 	ldhu	r2,12(r3)
10009f0c:	10c8000c 	andi	r3,r2,8192
10009f10:	1800071e 	bne	r3,zero,10009f30 <___vfiprintf_internal_r+0x74>
10009f14:	d9402017 	ldw	r5,128(sp)
10009f18:	00f7ffc4 	movi	r3,-8193
10009f1c:	10880014 	ori	r2,r2,8192
10009f20:	29001917 	ldw	r4,100(r5)
10009f24:	2880030d 	sth	r2,12(r5)
10009f28:	20c6703a 	and	r3,r4,r3
10009f2c:	28c01915 	stw	r3,100(r5)
10009f30:	10c0020c 	andi	r3,r2,8
10009f34:	1800a526 	beq	r3,zero,1000a1cc <___vfiprintf_internal_r+0x310>
10009f38:	d9002017 	ldw	r4,128(sp)
10009f3c:	20c00417 	ldw	r3,16(r4)
10009f40:	1800a226 	beq	r3,zero,1000a1cc <___vfiprintf_internal_r+0x310>
10009f44:	1080068c 	andi	r2,r2,26
10009f48:	00c00284 	movi	r3,10
10009f4c:	10c0a826 	beq	r2,r3,1000a1f0 <___vfiprintf_internal_r+0x334>
10009f50:	d9001a04 	addi	r4,sp,104
10009f54:	d94019c4 	addi	r5,sp,103
10009f58:	04840074 	movhi	r18,4097
10009f5c:	2145c83a 	sub	r2,r4,r5
10009f60:	94896d04 	addi	r18,r18,9652
10009f64:	d9001e15 	stw	r4,120(sp)
10009f68:	d9401f15 	stw	r5,124(sp)
10009f6c:	dec01a15 	stw	sp,104(sp)
10009f70:	d8001c15 	stw	zero,112(sp)
10009f74:	d8001b15 	stw	zero,108(sp)
10009f78:	d811883a 	mov	r8,sp
10009f7c:	d8002615 	stw	zero,152(sp)
10009f80:	d8002415 	stw	zero,144(sp)
10009f84:	d8802815 	stw	r2,160(sp)
10009f88:	a82d883a 	mov	r22,r21
10009f8c:	b0800007 	ldb	r2,0(r22)
10009f90:	10040d26 	beq	r2,zero,1000afc8 <___vfiprintf_internal_r+0x110c>
10009f94:	00c00944 	movi	r3,37
10009f98:	b029883a 	mov	r20,r22
10009f9c:	10c0021e 	bne	r2,r3,10009fa8 <___vfiprintf_internal_r+0xec>
10009fa0:	00001606 	br	10009ffc <___vfiprintf_internal_r+0x140>
10009fa4:	10c00326 	beq	r2,r3,10009fb4 <___vfiprintf_internal_r+0xf8>
10009fa8:	a5000044 	addi	r20,r20,1
10009fac:	a0800007 	ldb	r2,0(r20)
10009fb0:	103ffc1e 	bne	r2,zero,10009fa4 <__alt_data_end+0xf8009fa4>
10009fb4:	a5a1c83a 	sub	r16,r20,r22
10009fb8:	80001026 	beq	r16,zero,10009ffc <___vfiprintf_internal_r+0x140>
10009fbc:	d8c01c17 	ldw	r3,112(sp)
10009fc0:	d8801b17 	ldw	r2,108(sp)
10009fc4:	45800015 	stw	r22,0(r8)
10009fc8:	80c7883a 	add	r3,r16,r3
10009fcc:	10800044 	addi	r2,r2,1
10009fd0:	44000115 	stw	r16,4(r8)
10009fd4:	d8c01c15 	stw	r3,112(sp)
10009fd8:	d8801b15 	stw	r2,108(sp)
10009fdc:	010001c4 	movi	r4,7
10009fe0:	2080750e 	bge	r4,r2,1000a1b8 <___vfiprintf_internal_r+0x2fc>
10009fe4:	1803951e 	bne	r3,zero,1000ae3c <___vfiprintf_internal_r+0xf80>
10009fe8:	d8c02417 	ldw	r3,144(sp)
10009fec:	d8001b15 	stw	zero,108(sp)
10009ff0:	d811883a 	mov	r8,sp
10009ff4:	1c07883a 	add	r3,r3,r16
10009ff8:	d8c02415 	stw	r3,144(sp)
10009ffc:	a0800007 	ldb	r2,0(r20)
1000a000:	1002e026 	beq	r2,zero,1000ab84 <___vfiprintf_internal_r+0xcc8>
1000a004:	a5800044 	addi	r22,r20,1
1000a008:	a0c00047 	ldb	r3,1(r20)
1000a00c:	d8001d85 	stb	zero,118(sp)
1000a010:	0027883a 	mov	r19,zero
1000a014:	d8002305 	stb	zero,140(sp)
1000a018:	043fffc4 	movi	r16,-1
1000a01c:	d8002515 	stw	zero,148(sp)
1000a020:	0023883a 	mov	r17,zero
1000a024:	05001604 	movi	r20,88
1000a028:	05400244 	movi	r21,9
1000a02c:	402f883a 	mov	r23,r8
1000a030:	b5800044 	addi	r22,r22,1
1000a034:	18bff804 	addi	r2,r3,-32
1000a038:	a0827736 	bltu	r20,r2,1000aa18 <___vfiprintf_internal_r+0xb5c>
1000a03c:	100490ba 	slli	r2,r2,2
1000a040:	01040074 	movhi	r4,4097
1000a044:	21281504 	addi	r4,r4,-24492
1000a048:	1105883a 	add	r2,r2,r4
1000a04c:	10800017 	ldw	r2,0(r2)
1000a050:	1000683a 	jmp	r2
1000a054:	1000a718 	cmpnei	zero,r2,668
1000a058:	1000aa18 	cmpnei	zero,r2,680
1000a05c:	1000aa18 	cmpnei	zero,r2,680
1000a060:	1000a734 	orhi	zero,r2,668
1000a064:	1000aa18 	cmpnei	zero,r2,680
1000a068:	1000aa18 	cmpnei	zero,r2,680
1000a06c:	1000aa18 	cmpnei	zero,r2,680
1000a070:	1000aa18 	cmpnei	zero,r2,680
1000a074:	1000aa18 	cmpnei	zero,r2,680
1000a078:	1000aa18 	cmpnei	zero,r2,680
1000a07c:	1000a93c 	xorhi	zero,r2,676
1000a080:	1000a960 	cmpeqi	zero,r2,677
1000a084:	1000aa18 	cmpnei	zero,r2,680
1000a088:	1000a258 	cmpnei	zero,r2,649
1000a08c:	1000a974 	orhi	zero,r2,677
1000a090:	1000aa18 	cmpnei	zero,r2,680
1000a094:	1000a740 	call	11000a74 <_gp+0xfe48c0>
1000a098:	1000a74c 	andi	zero,r2,669
1000a09c:	1000a74c 	andi	zero,r2,669
1000a0a0:	1000a74c 	andi	zero,r2,669
1000a0a4:	1000a74c 	andi	zero,r2,669
1000a0a8:	1000a74c 	andi	zero,r2,669
1000a0ac:	1000a74c 	andi	zero,r2,669
1000a0b0:	1000a74c 	andi	zero,r2,669
1000a0b4:	1000a74c 	andi	zero,r2,669
1000a0b8:	1000a74c 	andi	zero,r2,669
1000a0bc:	1000aa18 	cmpnei	zero,r2,680
1000a0c0:	1000aa18 	cmpnei	zero,r2,680
1000a0c4:	1000aa18 	cmpnei	zero,r2,680
1000a0c8:	1000aa18 	cmpnei	zero,r2,680
1000a0cc:	1000aa18 	cmpnei	zero,r2,680
1000a0d0:	1000aa18 	cmpnei	zero,r2,680
1000a0d4:	1000aa18 	cmpnei	zero,r2,680
1000a0d8:	1000aa18 	cmpnei	zero,r2,680
1000a0dc:	1000aa18 	cmpnei	zero,r2,680
1000a0e0:	1000aa18 	cmpnei	zero,r2,680
1000a0e4:	1000a78c 	andi	zero,r2,670
1000a0e8:	1000aa18 	cmpnei	zero,r2,680
1000a0ec:	1000aa18 	cmpnei	zero,r2,680
1000a0f0:	1000aa18 	cmpnei	zero,r2,680
1000a0f4:	1000aa18 	cmpnei	zero,r2,680
1000a0f8:	1000aa18 	cmpnei	zero,r2,680
1000a0fc:	1000aa18 	cmpnei	zero,r2,680
1000a100:	1000aa18 	cmpnei	zero,r2,680
1000a104:	1000aa18 	cmpnei	zero,r2,680
1000a108:	1000aa18 	cmpnei	zero,r2,680
1000a10c:	1000aa18 	cmpnei	zero,r2,680
1000a110:	1000a7c8 	cmpgei	zero,r2,671
1000a114:	1000aa18 	cmpnei	zero,r2,680
1000a118:	1000aa18 	cmpnei	zero,r2,680
1000a11c:	1000aa18 	cmpnei	zero,r2,680
1000a120:	1000aa18 	cmpnei	zero,r2,680
1000a124:	1000aa18 	cmpnei	zero,r2,680
1000a128:	1000a824 	muli	zero,r2,672
1000a12c:	1000aa18 	cmpnei	zero,r2,680
1000a130:	1000aa18 	cmpnei	zero,r2,680
1000a134:	1000a898 	cmpnei	zero,r2,674
1000a138:	1000aa18 	cmpnei	zero,r2,680
1000a13c:	1000aa18 	cmpnei	zero,r2,680
1000a140:	1000aa18 	cmpnei	zero,r2,680
1000a144:	1000aa18 	cmpnei	zero,r2,680
1000a148:	1000aa18 	cmpnei	zero,r2,680
1000a14c:	1000aa18 	cmpnei	zero,r2,680
1000a150:	1000aa18 	cmpnei	zero,r2,680
1000a154:	1000aa18 	cmpnei	zero,r2,680
1000a158:	1000aa18 	cmpnei	zero,r2,680
1000a15c:	1000aa18 	cmpnei	zero,r2,680
1000a160:	1000a640 	call	11000a64 <_gp+0xfe48b0>
1000a164:	1000a670 	cmpltui	zero,r2,665
1000a168:	1000aa18 	cmpnei	zero,r2,680
1000a16c:	1000aa18 	cmpnei	zero,r2,680
1000a170:	1000aa18 	cmpnei	zero,r2,680
1000a174:	1000a9c0 	call	11000a9c <_gp+0xfe48e8>
1000a178:	1000a670 	cmpltui	zero,r2,665
1000a17c:	1000aa18 	cmpnei	zero,r2,680
1000a180:	1000aa18 	cmpnei	zero,r2,680
1000a184:	1000a518 	cmpnei	zero,r2,660
1000a188:	1000aa18 	cmpnei	zero,r2,680
1000a18c:	1000a52c 	andhi	zero,r2,660
1000a190:	1000a564 	muli	zero,r2,661
1000a194:	1000a264 	muli	zero,r2,649
1000a198:	1000a50c 	andi	zero,r2,660
1000a19c:	1000aa18 	cmpnei	zero,r2,680
1000a1a0:	1000a8d8 	cmpnei	zero,r2,675
1000a1a4:	1000aa18 	cmpnei	zero,r2,680
1000a1a8:	1000a924 	muli	zero,r2,676
1000a1ac:	1000aa18 	cmpnei	zero,r2,680
1000a1b0:	1000aa18 	cmpnei	zero,r2,680
1000a1b4:	1000a5e8 	cmpgeui	zero,r2,663
1000a1b8:	42000204 	addi	r8,r8,8
1000a1bc:	d8c02417 	ldw	r3,144(sp)
1000a1c0:	1c07883a 	add	r3,r3,r16
1000a1c4:	d8c02415 	stw	r3,144(sp)
1000a1c8:	003f8c06 	br	10009ffc <__alt_data_end+0xf8009ffc>
1000a1cc:	d9402017 	ldw	r5,128(sp)
1000a1d0:	d9002117 	ldw	r4,132(sp)
1000a1d4:	0004a780 	call	10004a78 <__swsetup_r>
1000a1d8:	1003c11e 	bne	r2,zero,1000b0e0 <___vfiprintf_internal_r+0x1224>
1000a1dc:	d9402017 	ldw	r5,128(sp)
1000a1e0:	00c00284 	movi	r3,10
1000a1e4:	2880030b 	ldhu	r2,12(r5)
1000a1e8:	1080068c 	andi	r2,r2,26
1000a1ec:	10ff581e 	bne	r2,r3,10009f50 <__alt_data_end+0xf8009f50>
1000a1f0:	d8c02017 	ldw	r3,128(sp)
1000a1f4:	1880038f 	ldh	r2,14(r3)
1000a1f8:	103f5516 	blt	r2,zero,10009f50 <__alt_data_end+0xf8009f50>
1000a1fc:	d9c02217 	ldw	r7,136(sp)
1000a200:	d9002117 	ldw	r4,132(sp)
1000a204:	a80d883a 	mov	r6,r21
1000a208:	180b883a 	mov	r5,r3
1000a20c:	000b3e40 	call	1000b3e4 <__sbprintf>
1000a210:	dfc03517 	ldw	ra,212(sp)
1000a214:	df003417 	ldw	fp,208(sp)
1000a218:	ddc03317 	ldw	r23,204(sp)
1000a21c:	dd803217 	ldw	r22,200(sp)
1000a220:	dd403117 	ldw	r21,196(sp)
1000a224:	dd003017 	ldw	r20,192(sp)
1000a228:	dcc02f17 	ldw	r19,188(sp)
1000a22c:	dc802e17 	ldw	r18,184(sp)
1000a230:	dc402d17 	ldw	r17,180(sp)
1000a234:	dc002c17 	ldw	r16,176(sp)
1000a238:	dec03604 	addi	sp,sp,216
1000a23c:	f800283a 	ret
1000a240:	0006a840 	call	10006a84 <__sinit>
1000a244:	003f2f06 	br	10009f04 <__alt_data_end+0xf8009f04>
1000a248:	d8c02517 	ldw	r3,148(sp)
1000a24c:	d8802215 	stw	r2,136(sp)
1000a250:	00c7c83a 	sub	r3,zero,r3
1000a254:	d8c02515 	stw	r3,148(sp)
1000a258:	8c400114 	ori	r17,r17,4
1000a25c:	b0c00007 	ldb	r3,0(r22)
1000a260:	003f7306 	br	1000a030 <__alt_data_end+0xf800a030>
1000a264:	00800c04 	movi	r2,48
1000a268:	d9402217 	ldw	r5,136(sp)
1000a26c:	d8801d05 	stb	r2,116(sp)
1000a270:	00801e04 	movi	r2,120
1000a274:	d8801d45 	stb	r2,117(sp)
1000a278:	d8001d85 	stb	zero,118(sp)
1000a27c:	b811883a 	mov	r8,r23
1000a280:	28c00104 	addi	r3,r5,4
1000a284:	2cc00017 	ldw	r19,0(r5)
1000a288:	0029883a 	mov	r20,zero
1000a28c:	88800094 	ori	r2,r17,2
1000a290:	80032516 	blt	r16,zero,1000af28 <___vfiprintf_internal_r+0x106c>
1000a294:	00bfdfc4 	movi	r2,-129
1000a298:	88a2703a 	and	r17,r17,r2
1000a29c:	d8c02215 	stw	r3,136(sp)
1000a2a0:	8c400094 	ori	r17,r17,2
1000a2a4:	98032a1e 	bne	r19,zero,1000af50 <___vfiprintf_internal_r+0x1094>
1000a2a8:	00840074 	movhi	r2,4097
1000a2ac:	10890c04 	addi	r2,r2,9264
1000a2b0:	d8802615 	stw	r2,152(sp)
1000a2b4:	002b883a 	mov	r21,zero
1000a2b8:	8001741e 	bne	r16,zero,1000a88c <___vfiprintf_internal_r+0x9d0>
1000a2bc:	0021883a 	mov	r16,zero
1000a2c0:	0029883a 	mov	r20,zero
1000a2c4:	ddc01a04 	addi	r23,sp,104
1000a2c8:	8027883a 	mov	r19,r16
1000a2cc:	8500010e 	bge	r16,r20,1000a2d4 <___vfiprintf_internal_r+0x418>
1000a2d0:	a027883a 	mov	r19,r20
1000a2d4:	ad403fcc 	andi	r21,r21,255
1000a2d8:	ad40201c 	xori	r21,r21,128
1000a2dc:	ad7fe004 	addi	r21,r21,-128
1000a2e0:	a8000126 	beq	r21,zero,1000a2e8 <___vfiprintf_internal_r+0x42c>
1000a2e4:	9cc00044 	addi	r19,r19,1
1000a2e8:	89c0008c 	andi	r7,r17,2
1000a2ec:	38000126 	beq	r7,zero,1000a2f4 <___vfiprintf_internal_r+0x438>
1000a2f0:	9cc00084 	addi	r19,r19,2
1000a2f4:	88c0210c 	andi	r3,r17,132
1000a2f8:	1801dd1e 	bne	r3,zero,1000aa70 <___vfiprintf_internal_r+0xbb4>
1000a2fc:	d9402517 	ldw	r5,148(sp)
1000a300:	2cebc83a 	sub	r21,r5,r19
1000a304:	0541da0e 	bge	zero,r21,1000aa70 <___vfiprintf_internal_r+0xbb4>
1000a308:	07000404 	movi	fp,16
1000a30c:	d8801c17 	ldw	r2,112(sp)
1000a310:	e543be0e 	bge	fp,r21,1000b20c <___vfiprintf_internal_r+0x1350>
1000a314:	01440074 	movhi	r5,4097
1000a318:	29497104 	addi	r5,r5,9668
1000a31c:	dc002715 	stw	r16,156(sp)
1000a320:	d9801b17 	ldw	r6,108(sp)
1000a324:	a821883a 	mov	r16,r21
1000a328:	d9402315 	stw	r5,140(sp)
1000a32c:	028001c4 	movi	r10,7
1000a330:	d9c02915 	stw	r7,164(sp)
1000a334:	182b883a 	mov	r21,r3
1000a338:	00000506 	br	1000a350 <___vfiprintf_internal_r+0x494>
1000a33c:	31000084 	addi	r4,r6,2
1000a340:	42000204 	addi	r8,r8,8
1000a344:	180d883a 	mov	r6,r3
1000a348:	843ffc04 	addi	r16,r16,-16
1000a34c:	e4000f0e 	bge	fp,r16,1000a38c <___vfiprintf_internal_r+0x4d0>
1000a350:	01040074 	movhi	r4,4097
1000a354:	10800404 	addi	r2,r2,16
1000a358:	30c00044 	addi	r3,r6,1
1000a35c:	21097104 	addi	r4,r4,9668
1000a360:	41000015 	stw	r4,0(r8)
1000a364:	47000115 	stw	fp,4(r8)
1000a368:	d8801c15 	stw	r2,112(sp)
1000a36c:	d8c01b15 	stw	r3,108(sp)
1000a370:	50fff20e 	bge	r10,r3,1000a33c <__alt_data_end+0xf800a33c>
1000a374:	1001b21e 	bne	r2,zero,1000aa40 <___vfiprintf_internal_r+0xb84>
1000a378:	843ffc04 	addi	r16,r16,-16
1000a37c:	000d883a 	mov	r6,zero
1000a380:	01000044 	movi	r4,1
1000a384:	d811883a 	mov	r8,sp
1000a388:	e43ff116 	blt	fp,r16,1000a350 <__alt_data_end+0xf800a350>
1000a38c:	a807883a 	mov	r3,r21
1000a390:	d9c02917 	ldw	r7,164(sp)
1000a394:	802b883a 	mov	r21,r16
1000a398:	dc002717 	ldw	r16,156(sp)
1000a39c:	d9402317 	ldw	r5,140(sp)
1000a3a0:	a885883a 	add	r2,r21,r2
1000a3a4:	45400115 	stw	r21,4(r8)
1000a3a8:	41400015 	stw	r5,0(r8)
1000a3ac:	d8801c15 	stw	r2,112(sp)
1000a3b0:	d9001b15 	stw	r4,108(sp)
1000a3b4:	014001c4 	movi	r5,7
1000a3b8:	29026216 	blt	r5,r4,1000ad44 <___vfiprintf_internal_r+0xe88>
1000a3bc:	d9801d87 	ldb	r6,118(sp)
1000a3c0:	42000204 	addi	r8,r8,8
1000a3c4:	21400044 	addi	r5,r4,1
1000a3c8:	3001ae1e 	bne	r6,zero,1000aa84 <___vfiprintf_internal_r+0xbc8>
1000a3cc:	3801bb26 	beq	r7,zero,1000aabc <___vfiprintf_internal_r+0xc00>
1000a3d0:	d9001d04 	addi	r4,sp,116
1000a3d4:	10800084 	addi	r2,r2,2
1000a3d8:	41000015 	stw	r4,0(r8)
1000a3dc:	01000084 	movi	r4,2
1000a3e0:	41000115 	stw	r4,4(r8)
1000a3e4:	d8801c15 	stw	r2,112(sp)
1000a3e8:	d9401b15 	stw	r5,108(sp)
1000a3ec:	010001c4 	movi	r4,7
1000a3f0:	2142680e 	bge	r4,r5,1000ad94 <___vfiprintf_internal_r+0xed8>
1000a3f4:	1002b11e 	bne	r2,zero,1000aebc <___vfiprintf_internal_r+0x1000>
1000a3f8:	01802004 	movi	r6,128
1000a3fc:	01400044 	movi	r5,1
1000a400:	0009883a 	mov	r4,zero
1000a404:	d811883a 	mov	r8,sp
1000a408:	1981ae1e 	bne	r3,r6,1000aac4 <___vfiprintf_internal_r+0xc08>
1000a40c:	d8c02517 	ldw	r3,148(sp)
1000a410:	1cf9c83a 	sub	fp,r3,r19
1000a414:	0701ab0e 	bge	zero,fp,1000aac4 <___vfiprintf_internal_r+0xc08>
1000a418:	05400404 	movi	r21,16
1000a41c:	af03a90e 	bge	r21,fp,1000b2c4 <___vfiprintf_internal_r+0x1408>
1000a420:	01440074 	movhi	r5,4097
1000a424:	29496d04 	addi	r5,r5,9652
1000a428:	d9402315 	stw	r5,140(sp)
1000a42c:	01c001c4 	movi	r7,7
1000a430:	00000506 	br	1000a448 <___vfiprintf_internal_r+0x58c>
1000a434:	21800084 	addi	r6,r4,2
1000a438:	42000204 	addi	r8,r8,8
1000a43c:	1809883a 	mov	r4,r3
1000a440:	e73ffc04 	addi	fp,fp,-16
1000a444:	af000d0e 	bge	r21,fp,1000a47c <___vfiprintf_internal_r+0x5c0>
1000a448:	10800404 	addi	r2,r2,16
1000a44c:	20c00044 	addi	r3,r4,1
1000a450:	44800015 	stw	r18,0(r8)
1000a454:	45400115 	stw	r21,4(r8)
1000a458:	d8801c15 	stw	r2,112(sp)
1000a45c:	d8c01b15 	stw	r3,108(sp)
1000a460:	38fff40e 	bge	r7,r3,1000a434 <__alt_data_end+0xf800a434>
1000a464:	10022b1e 	bne	r2,zero,1000ad14 <___vfiprintf_internal_r+0xe58>
1000a468:	e73ffc04 	addi	fp,fp,-16
1000a46c:	01800044 	movi	r6,1
1000a470:	0009883a 	mov	r4,zero
1000a474:	d811883a 	mov	r8,sp
1000a478:	af3ff316 	blt	r21,fp,1000a448 <__alt_data_end+0xf800a448>
1000a47c:	d8c02317 	ldw	r3,140(sp)
1000a480:	1705883a 	add	r2,r2,fp
1000a484:	47000115 	stw	fp,4(r8)
1000a488:	40c00015 	stw	r3,0(r8)
1000a48c:	d8801c15 	stw	r2,112(sp)
1000a490:	d9801b15 	stw	r6,108(sp)
1000a494:	00c001c4 	movi	r3,7
1000a498:	19829416 	blt	r3,r6,1000aeec <___vfiprintf_internal_r+0x1030>
1000a49c:	8521c83a 	sub	r16,r16,r20
1000a4a0:	42000204 	addi	r8,r8,8
1000a4a4:	31400044 	addi	r5,r6,1
1000a4a8:	3009883a 	mov	r4,r6
1000a4ac:	04018716 	blt	zero,r16,1000aacc <___vfiprintf_internal_r+0xc10>
1000a4b0:	a085883a 	add	r2,r20,r2
1000a4b4:	45c00015 	stw	r23,0(r8)
1000a4b8:	45000115 	stw	r20,4(r8)
1000a4bc:	d8801c15 	stw	r2,112(sp)
1000a4c0:	d9401b15 	stw	r5,108(sp)
1000a4c4:	00c001c4 	movi	r3,7
1000a4c8:	1941c20e 	bge	r3,r5,1000abd4 <___vfiprintf_internal_r+0xd18>
1000a4cc:	1002531e 	bne	r2,zero,1000ae1c <___vfiprintf_internal_r+0xf60>
1000a4d0:	d8001b15 	stw	zero,108(sp)
1000a4d4:	8c40010c 	andi	r17,r17,4
1000a4d8:	88023226 	beq	r17,zero,1000ada4 <___vfiprintf_internal_r+0xee8>
1000a4dc:	d9002517 	ldw	r4,148(sp)
1000a4e0:	24e3c83a 	sub	r17,r4,r19
1000a4e4:	04432916 	blt	zero,r17,1000b18c <___vfiprintf_internal_r+0x12d0>
1000a4e8:	d8802517 	ldw	r2,148(sp)
1000a4ec:	14c0010e 	bge	r2,r19,1000a4f4 <___vfiprintf_internal_r+0x638>
1000a4f0:	9805883a 	mov	r2,r19
1000a4f4:	d8c02417 	ldw	r3,144(sp)
1000a4f8:	1887883a 	add	r3,r3,r2
1000a4fc:	d8c02415 	stw	r3,144(sp)
1000a500:	d8001b15 	stw	zero,108(sp)
1000a504:	d811883a 	mov	r8,sp
1000a508:	003ea006 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000a50c:	8c400814 	ori	r17,r17,32
1000a510:	b0c00007 	ldb	r3,0(r22)
1000a514:	003ec606 	br	1000a030 <__alt_data_end+0xf800a030>
1000a518:	b0c00007 	ldb	r3,0(r22)
1000a51c:	00801b04 	movi	r2,108
1000a520:	18832026 	beq	r3,r2,1000b1a4 <___vfiprintf_internal_r+0x12e8>
1000a524:	8c400414 	ori	r17,r17,16
1000a528:	003ec106 	br	1000a030 <__alt_data_end+0xf800a030>
1000a52c:	9cc03fcc 	andi	r19,r19,255
1000a530:	b811883a 	mov	r8,r23
1000a534:	9803981e 	bne	r19,zero,1000b398 <___vfiprintf_internal_r+0x14dc>
1000a538:	8880080c 	andi	r2,r17,32
1000a53c:	1002be26 	beq	r2,zero,1000b038 <___vfiprintf_internal_r+0x117c>
1000a540:	d9002217 	ldw	r4,136(sp)
1000a544:	d9402417 	ldw	r5,144(sp)
1000a548:	20800017 	ldw	r2,0(r4)
1000a54c:	2807d7fa 	srai	r3,r5,31
1000a550:	21000104 	addi	r4,r4,4
1000a554:	d9002215 	stw	r4,136(sp)
1000a558:	11400015 	stw	r5,0(r2)
1000a55c:	10c00115 	stw	r3,4(r2)
1000a560:	003e8a06 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000a564:	9cc03fcc 	andi	r19,r19,255
1000a568:	b811883a 	mov	r8,r23
1000a56c:	9803871e 	bne	r19,zero,1000b38c <___vfiprintf_internal_r+0x14d0>
1000a570:	8880080c 	andi	r2,r17,32
1000a574:	10009a26 	beq	r2,zero,1000a7e0 <___vfiprintf_internal_r+0x924>
1000a578:	d9002217 	ldw	r4,136(sp)
1000a57c:	d8001d85 	stb	zero,118(sp)
1000a580:	20800204 	addi	r2,r4,8
1000a584:	24c00017 	ldw	r19,0(r4)
1000a588:	25000117 	ldw	r20,4(r4)
1000a58c:	8002a416 	blt	r16,zero,1000b020 <___vfiprintf_internal_r+0x1164>
1000a590:	013fdfc4 	movi	r4,-129
1000a594:	9d06b03a 	or	r3,r19,r20
1000a598:	d8802215 	stw	r2,136(sp)
1000a59c:	8922703a 	and	r17,r17,r4
1000a5a0:	18009b26 	beq	r3,zero,1000a810 <___vfiprintf_internal_r+0x954>
1000a5a4:	002b883a 	mov	r21,zero
1000a5a8:	ddc01a04 	addi	r23,sp,104
1000a5ac:	9806d0fa 	srli	r3,r19,3
1000a5b0:	a008977a 	slli	r4,r20,29
1000a5b4:	a028d0fa 	srli	r20,r20,3
1000a5b8:	9cc001cc 	andi	r19,r19,7
1000a5bc:	98800c04 	addi	r2,r19,48
1000a5c0:	bdffffc4 	addi	r23,r23,-1
1000a5c4:	20e6b03a 	or	r19,r4,r3
1000a5c8:	b8800005 	stb	r2,0(r23)
1000a5cc:	9d06b03a 	or	r3,r19,r20
1000a5d0:	183ff61e 	bne	r3,zero,1000a5ac <__alt_data_end+0xf800a5ac>
1000a5d4:	88c0004c 	andi	r3,r17,1
1000a5d8:	18021f1e 	bne	r3,zero,1000ae58 <___vfiprintf_internal_r+0xf9c>
1000a5dc:	d9401e17 	ldw	r5,120(sp)
1000a5e0:	2de9c83a 	sub	r20,r5,r23
1000a5e4:	003f3806 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000a5e8:	9cc03fcc 	andi	r19,r19,255
1000a5ec:	b811883a 	mov	r8,r23
1000a5f0:	98034f1e 	bne	r19,zero,1000b330 <___vfiprintf_internal_r+0x1474>
1000a5f4:	00840074 	movhi	r2,4097
1000a5f8:	10890c04 	addi	r2,r2,9264
1000a5fc:	d8802615 	stw	r2,152(sp)
1000a600:	8880080c 	andi	r2,r17,32
1000a604:	1000ac26 	beq	r2,zero,1000a8b8 <___vfiprintf_internal_r+0x9fc>
1000a608:	d9002217 	ldw	r4,136(sp)
1000a60c:	24c00017 	ldw	r19,0(r4)
1000a610:	25000117 	ldw	r20,4(r4)
1000a614:	21000204 	addi	r4,r4,8
1000a618:	d9002215 	stw	r4,136(sp)
1000a61c:	8880004c 	andi	r2,r17,1
1000a620:	1001e726 	beq	r2,zero,1000adc0 <___vfiprintf_internal_r+0xf04>
1000a624:	9d04b03a 	or	r2,r19,r20
1000a628:	10025c1e 	bne	r2,zero,1000af9c <___vfiprintf_internal_r+0x10e0>
1000a62c:	d8001d85 	stb	zero,118(sp)
1000a630:	80024416 	blt	r16,zero,1000af44 <___vfiprintf_internal_r+0x1088>
1000a634:	00bfdfc4 	movi	r2,-129
1000a638:	88a2703a 	and	r17,r17,r2
1000a63c:	003f1d06 	br	1000a2b4 <__alt_data_end+0xf800a2b4>
1000a640:	d8c02217 	ldw	r3,136(sp)
1000a644:	04c00044 	movi	r19,1
1000a648:	b811883a 	mov	r8,r23
1000a64c:	18800017 	ldw	r2,0(r3)
1000a650:	18c00104 	addi	r3,r3,4
1000a654:	d8001d85 	stb	zero,118(sp)
1000a658:	d8801005 	stb	r2,64(sp)
1000a65c:	d8c02215 	stw	r3,136(sp)
1000a660:	9829883a 	mov	r20,r19
1000a664:	ddc01004 	addi	r23,sp,64
1000a668:	0021883a 	mov	r16,zero
1000a66c:	003f1e06 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000a670:	9cc03fcc 	andi	r19,r19,255
1000a674:	b811883a 	mov	r8,r23
1000a678:	9803331e 	bne	r19,zero,1000b348 <___vfiprintf_internal_r+0x148c>
1000a67c:	8880080c 	andi	r2,r17,32
1000a680:	10004826 	beq	r2,zero,1000a7a4 <___vfiprintf_internal_r+0x8e8>
1000a684:	d9002217 	ldw	r4,136(sp)
1000a688:	20800117 	ldw	r2,4(r4)
1000a68c:	24c00017 	ldw	r19,0(r4)
1000a690:	21000204 	addi	r4,r4,8
1000a694:	d9002215 	stw	r4,136(sp)
1000a698:	1029883a 	mov	r20,r2
1000a69c:	10024c16 	blt	r2,zero,1000afd0 <___vfiprintf_internal_r+0x1114>
1000a6a0:	dd401d83 	ldbu	r21,118(sp)
1000a6a4:	80007116 	blt	r16,zero,1000a86c <___vfiprintf_internal_r+0x9b0>
1000a6a8:	00ffdfc4 	movi	r3,-129
1000a6ac:	9d04b03a 	or	r2,r19,r20
1000a6b0:	88e2703a 	and	r17,r17,r3
1000a6b4:	1000d126 	beq	r2,zero,1000a9fc <___vfiprintf_internal_r+0xb40>
1000a6b8:	a0023526 	beq	r20,zero,1000af90 <___vfiprintf_internal_r+0x10d4>
1000a6bc:	ddc01a04 	addi	r23,sp,104
1000a6c0:	4039883a 	mov	fp,r8
1000a6c4:	9809883a 	mov	r4,r19
1000a6c8:	a00b883a 	mov	r5,r20
1000a6cc:	01800284 	movi	r6,10
1000a6d0:	000f883a 	mov	r7,zero
1000a6d4:	000c3e80 	call	1000c3e8 <__umoddi3>
1000a6d8:	10800c04 	addi	r2,r2,48
1000a6dc:	bdffffc4 	addi	r23,r23,-1
1000a6e0:	9809883a 	mov	r4,r19
1000a6e4:	a00b883a 	mov	r5,r20
1000a6e8:	b8800005 	stb	r2,0(r23)
1000a6ec:	01800284 	movi	r6,10
1000a6f0:	000f883a 	mov	r7,zero
1000a6f4:	000bdec0 	call	1000bdec <__udivdi3>
1000a6f8:	1027883a 	mov	r19,r2
1000a6fc:	10c4b03a 	or	r2,r2,r3
1000a700:	1829883a 	mov	r20,r3
1000a704:	103fef1e 	bne	r2,zero,1000a6c4 <__alt_data_end+0xf800a6c4>
1000a708:	d9001e17 	ldw	r4,120(sp)
1000a70c:	e011883a 	mov	r8,fp
1000a710:	25e9c83a 	sub	r20,r4,r23
1000a714:	003eec06 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000a718:	d8802307 	ldb	r2,140(sp)
1000a71c:	1002361e 	bne	r2,zero,1000aff8 <___vfiprintf_internal_r+0x113c>
1000a720:	00c00804 	movi	r3,32
1000a724:	d8c02305 	stb	r3,140(sp)
1000a728:	04c00044 	movi	r19,1
1000a72c:	b0c00007 	ldb	r3,0(r22)
1000a730:	003e3f06 	br	1000a030 <__alt_data_end+0xf800a030>
1000a734:	8c400054 	ori	r17,r17,1
1000a738:	b0c00007 	ldb	r3,0(r22)
1000a73c:	003e3c06 	br	1000a030 <__alt_data_end+0xf800a030>
1000a740:	8c402014 	ori	r17,r17,128
1000a744:	b0c00007 	ldb	r3,0(r22)
1000a748:	003e3906 	br	1000a030 <__alt_data_end+0xf800a030>
1000a74c:	dc002715 	stw	r16,156(sp)
1000a750:	d8002515 	stw	zero,148(sp)
1000a754:	1f3ff404 	addi	fp,r3,-48
1000a758:	0009883a 	mov	r4,zero
1000a75c:	b021883a 	mov	r16,r22
1000a760:	01400284 	movi	r5,10
1000a764:	000cb600 	call	1000cb60 <__mulsi3>
1000a768:	80c00007 	ldb	r3,0(r16)
1000a76c:	e089883a 	add	r4,fp,r2
1000a770:	b5800044 	addi	r22,r22,1
1000a774:	1f3ff404 	addi	fp,r3,-48
1000a778:	b021883a 	mov	r16,r22
1000a77c:	af3ff82e 	bgeu	r21,fp,1000a760 <__alt_data_end+0xf800a760>
1000a780:	d9002515 	stw	r4,148(sp)
1000a784:	dc002717 	ldw	r16,156(sp)
1000a788:	003e2a06 	br	1000a034 <__alt_data_end+0xf800a034>
1000a78c:	9cc03fcc 	andi	r19,r19,255
1000a790:	b811883a 	mov	r8,r23
1000a794:	9802e91e 	bne	r19,zero,1000b33c <___vfiprintf_internal_r+0x1480>
1000a798:	8c400414 	ori	r17,r17,16
1000a79c:	8880080c 	andi	r2,r17,32
1000a7a0:	103fb81e 	bne	r2,zero,1000a684 <__alt_data_end+0xf800a684>
1000a7a4:	8880040c 	andi	r2,r17,16
1000a7a8:	10022e26 	beq	r2,zero,1000b064 <___vfiprintf_internal_r+0x11a8>
1000a7ac:	d9402217 	ldw	r5,136(sp)
1000a7b0:	2cc00017 	ldw	r19,0(r5)
1000a7b4:	29400104 	addi	r5,r5,4
1000a7b8:	d9402215 	stw	r5,136(sp)
1000a7bc:	9829d7fa 	srai	r20,r19,31
1000a7c0:	a005883a 	mov	r2,r20
1000a7c4:	003fb506 	br	1000a69c <__alt_data_end+0xf800a69c>
1000a7c8:	9cc03fcc 	andi	r19,r19,255
1000a7cc:	b811883a 	mov	r8,r23
1000a7d0:	9802fa1e 	bne	r19,zero,1000b3bc <___vfiprintf_internal_r+0x1500>
1000a7d4:	8c400414 	ori	r17,r17,16
1000a7d8:	8880080c 	andi	r2,r17,32
1000a7dc:	103f661e 	bne	r2,zero,1000a578 <__alt_data_end+0xf800a578>
1000a7e0:	8880040c 	andi	r2,r17,16
1000a7e4:	10020626 	beq	r2,zero,1000b000 <___vfiprintf_internal_r+0x1144>
1000a7e8:	d9402217 	ldw	r5,136(sp)
1000a7ec:	d8001d85 	stb	zero,118(sp)
1000a7f0:	0029883a 	mov	r20,zero
1000a7f4:	28800104 	addi	r2,r5,4
1000a7f8:	2cc00017 	ldw	r19,0(r5)
1000a7fc:	80020816 	blt	r16,zero,1000b020 <___vfiprintf_internal_r+0x1164>
1000a800:	00ffdfc4 	movi	r3,-129
1000a804:	d8802215 	stw	r2,136(sp)
1000a808:	88e2703a 	and	r17,r17,r3
1000a80c:	983f651e 	bne	r19,zero,1000a5a4 <__alt_data_end+0xf800a5a4>
1000a810:	002b883a 	mov	r21,zero
1000a814:	8002cf26 	beq	r16,zero,1000b354 <___vfiprintf_internal_r+0x1498>
1000a818:	0027883a 	mov	r19,zero
1000a81c:	0029883a 	mov	r20,zero
1000a820:	003f6106 	br	1000a5a8 <__alt_data_end+0xf800a5a8>
1000a824:	9cc03fcc 	andi	r19,r19,255
1000a828:	b811883a 	mov	r8,r23
1000a82c:	9802e01e 	bne	r19,zero,1000b3b0 <___vfiprintf_internal_r+0x14f4>
1000a830:	8c400414 	ori	r17,r17,16
1000a834:	8880080c 	andi	r2,r17,32
1000a838:	1000641e 	bne	r2,zero,1000a9cc <___vfiprintf_internal_r+0xb10>
1000a83c:	8880040c 	andi	r2,r17,16
1000a840:	1001c81e 	bne	r2,zero,1000af64 <___vfiprintf_internal_r+0x10a8>
1000a844:	8880100c 	andi	r2,r17,64
1000a848:	d8001d85 	stb	zero,118(sp)
1000a84c:	1002281e 	bne	r2,zero,1000b0f0 <___vfiprintf_internal_r+0x1234>
1000a850:	d9002217 	ldw	r4,136(sp)
1000a854:	0029883a 	mov	r20,zero
1000a858:	20800104 	addi	r2,r4,4
1000a85c:	24c00017 	ldw	r19,0(r4)
1000a860:	8001c60e 	bge	r16,zero,1000af7c <___vfiprintf_internal_r+0x10c0>
1000a864:	d8802215 	stw	r2,136(sp)
1000a868:	002b883a 	mov	r21,zero
1000a86c:	9d04b03a 	or	r2,r19,r20
1000a870:	103f911e 	bne	r2,zero,1000a6b8 <__alt_data_end+0xf800a6b8>
1000a874:	00800044 	movi	r2,1
1000a878:	10803fcc 	andi	r2,r2,255
1000a87c:	00c00044 	movi	r3,1
1000a880:	10c05f26 	beq	r2,r3,1000aa00 <___vfiprintf_internal_r+0xb44>
1000a884:	00c00084 	movi	r3,2
1000a888:	10ffe31e 	bne	r2,r3,1000a818 <__alt_data_end+0xf800a818>
1000a88c:	0027883a 	mov	r19,zero
1000a890:	0029883a 	mov	r20,zero
1000a894:	00015106 	br	1000addc <___vfiprintf_internal_r+0xf20>
1000a898:	9cc03fcc 	andi	r19,r19,255
1000a89c:	b811883a 	mov	r8,r23
1000a8a0:	9802c01e 	bne	r19,zero,1000b3a4 <___vfiprintf_internal_r+0x14e8>
1000a8a4:	01440074 	movhi	r5,4097
1000a8a8:	29490704 	addi	r5,r5,9244
1000a8ac:	d9402615 	stw	r5,152(sp)
1000a8b0:	8880080c 	andi	r2,r17,32
1000a8b4:	103f541e 	bne	r2,zero,1000a608 <__alt_data_end+0xf800a608>
1000a8b8:	8880040c 	andi	r2,r17,16
1000a8bc:	1001f226 	beq	r2,zero,1000b088 <___vfiprintf_internal_r+0x11cc>
1000a8c0:	d9402217 	ldw	r5,136(sp)
1000a8c4:	0029883a 	mov	r20,zero
1000a8c8:	2cc00017 	ldw	r19,0(r5)
1000a8cc:	29400104 	addi	r5,r5,4
1000a8d0:	d9402215 	stw	r5,136(sp)
1000a8d4:	003f5106 	br	1000a61c <__alt_data_end+0xf800a61c>
1000a8d8:	d8c02217 	ldw	r3,136(sp)
1000a8dc:	b811883a 	mov	r8,r23
1000a8e0:	d8001d85 	stb	zero,118(sp)
1000a8e4:	1dc00017 	ldw	r23,0(r3)
1000a8e8:	1f000104 	addi	fp,r3,4
1000a8ec:	b8025926 	beq	r23,zero,1000b254 <___vfiprintf_internal_r+0x1398>
1000a8f0:	80023316 	blt	r16,zero,1000b1c0 <___vfiprintf_internal_r+0x1304>
1000a8f4:	800d883a 	mov	r6,r16
1000a8f8:	000b883a 	mov	r5,zero
1000a8fc:	b809883a 	mov	r4,r23
1000a900:	da002a15 	stw	r8,168(sp)
1000a904:	0007ffc0 	call	10007ffc <memchr>
1000a908:	da002a17 	ldw	r8,168(sp)
1000a90c:	10026826 	beq	r2,zero,1000b2b0 <___vfiprintf_internal_r+0x13f4>
1000a910:	15e9c83a 	sub	r20,r2,r23
1000a914:	dd401d83 	ldbu	r21,118(sp)
1000a918:	df002215 	stw	fp,136(sp)
1000a91c:	0021883a 	mov	r16,zero
1000a920:	003e6906 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000a924:	9cc03fcc 	andi	r19,r19,255
1000a928:	b811883a 	mov	r8,r23
1000a92c:	983fc126 	beq	r19,zero,1000a834 <__alt_data_end+0xf800a834>
1000a930:	d8c02303 	ldbu	r3,140(sp)
1000a934:	d8c01d85 	stb	r3,118(sp)
1000a938:	003fbe06 	br	1000a834 <__alt_data_end+0xf800a834>
1000a93c:	d9002217 	ldw	r4,136(sp)
1000a940:	d9402217 	ldw	r5,136(sp)
1000a944:	21000017 	ldw	r4,0(r4)
1000a948:	28800104 	addi	r2,r5,4
1000a94c:	d9002515 	stw	r4,148(sp)
1000a950:	203e3d16 	blt	r4,zero,1000a248 <__alt_data_end+0xf800a248>
1000a954:	d8802215 	stw	r2,136(sp)
1000a958:	b0c00007 	ldb	r3,0(r22)
1000a95c:	003db406 	br	1000a030 <__alt_data_end+0xf800a030>
1000a960:	00c00ac4 	movi	r3,43
1000a964:	d8c02305 	stb	r3,140(sp)
1000a968:	04c00044 	movi	r19,1
1000a96c:	b0c00007 	ldb	r3,0(r22)
1000a970:	003daf06 	br	1000a030 <__alt_data_end+0xf800a030>
1000a974:	b0c00007 	ldb	r3,0(r22)
1000a978:	01000a84 	movi	r4,42
1000a97c:	b4000044 	addi	r16,r22,1
1000a980:	19025e26 	beq	r3,r4,1000b2fc <___vfiprintf_internal_r+0x1440>
1000a984:	1f3ff404 	addi	fp,r3,-48
1000a988:	0009883a 	mov	r4,zero
1000a98c:	af025236 	bltu	r21,fp,1000b2d8 <___vfiprintf_internal_r+0x141c>
1000a990:	01400284 	movi	r5,10
1000a994:	000cb600 	call	1000cb60 <__mulsi3>
1000a998:	80c00007 	ldb	r3,0(r16)
1000a99c:	1709883a 	add	r4,r2,fp
1000a9a0:	85800044 	addi	r22,r16,1
1000a9a4:	1f3ff404 	addi	fp,r3,-48
1000a9a8:	b021883a 	mov	r16,r22
1000a9ac:	af3ff82e 	bgeu	r21,fp,1000a990 <__alt_data_end+0xf800a990>
1000a9b0:	2021883a 	mov	r16,r4
1000a9b4:	203d9f0e 	bge	r4,zero,1000a034 <__alt_data_end+0xf800a034>
1000a9b8:	043fffc4 	movi	r16,-1
1000a9bc:	003d9d06 	br	1000a034 <__alt_data_end+0xf800a034>
1000a9c0:	8c401014 	ori	r17,r17,64
1000a9c4:	b0c00007 	ldb	r3,0(r22)
1000a9c8:	003d9906 	br	1000a030 <__alt_data_end+0xf800a030>
1000a9cc:	d9002217 	ldw	r4,136(sp)
1000a9d0:	d8001d85 	stb	zero,118(sp)
1000a9d4:	20c00204 	addi	r3,r4,8
1000a9d8:	24c00017 	ldw	r19,0(r4)
1000a9dc:	25000117 	ldw	r20,4(r4)
1000a9e0:	8001e716 	blt	r16,zero,1000b180 <___vfiprintf_internal_r+0x12c4>
1000a9e4:	013fdfc4 	movi	r4,-129
1000a9e8:	9d04b03a 	or	r2,r19,r20
1000a9ec:	d8c02215 	stw	r3,136(sp)
1000a9f0:	8922703a 	and	r17,r17,r4
1000a9f4:	002b883a 	mov	r21,zero
1000a9f8:	103f2f1e 	bne	r2,zero,1000a6b8 <__alt_data_end+0xf800a6b8>
1000a9fc:	803e2f26 	beq	r16,zero,1000a2bc <__alt_data_end+0xf800a2bc>
1000aa00:	0027883a 	mov	r19,zero
1000aa04:	9cc00c04 	addi	r19,r19,48
1000aa08:	dcc019c5 	stb	r19,103(sp)
1000aa0c:	dd002817 	ldw	r20,160(sp)
1000aa10:	ddc019c4 	addi	r23,sp,103
1000aa14:	003e2c06 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000aa18:	9cc03fcc 	andi	r19,r19,255
1000aa1c:	b811883a 	mov	r8,r23
1000aa20:	9802571e 	bne	r19,zero,1000b380 <___vfiprintf_internal_r+0x14c4>
1000aa24:	18005726 	beq	r3,zero,1000ab84 <___vfiprintf_internal_r+0xcc8>
1000aa28:	04c00044 	movi	r19,1
1000aa2c:	d8c01005 	stb	r3,64(sp)
1000aa30:	d8001d85 	stb	zero,118(sp)
1000aa34:	9829883a 	mov	r20,r19
1000aa38:	ddc01004 	addi	r23,sp,64
1000aa3c:	003f0a06 	br	1000a668 <__alt_data_end+0xf800a668>
1000aa40:	d9402017 	ldw	r5,128(sp)
1000aa44:	d9002117 	ldw	r4,132(sp)
1000aa48:	d9801a04 	addi	r6,sp,104
1000aa4c:	da802a15 	stw	r10,168(sp)
1000aa50:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000aa54:	da802a17 	ldw	r10,168(sp)
1000aa58:	1000501e 	bne	r2,zero,1000ab9c <___vfiprintf_internal_r+0xce0>
1000aa5c:	d9801b17 	ldw	r6,108(sp)
1000aa60:	d8801c17 	ldw	r2,112(sp)
1000aa64:	d811883a 	mov	r8,sp
1000aa68:	31000044 	addi	r4,r6,1
1000aa6c:	003e3606 	br	1000a348 <__alt_data_end+0xf800a348>
1000aa70:	d9001b17 	ldw	r4,108(sp)
1000aa74:	d8801c17 	ldw	r2,112(sp)
1000aa78:	21400044 	addi	r5,r4,1
1000aa7c:	d9801d87 	ldb	r6,118(sp)
1000aa80:	303e5226 	beq	r6,zero,1000a3cc <__alt_data_end+0xf800a3cc>
1000aa84:	01800044 	movi	r6,1
1000aa88:	d9001d84 	addi	r4,sp,118
1000aa8c:	1185883a 	add	r2,r2,r6
1000aa90:	41000015 	stw	r4,0(r8)
1000aa94:	41800115 	stw	r6,4(r8)
1000aa98:	d8801c15 	stw	r2,112(sp)
1000aa9c:	d9401b15 	stw	r5,108(sp)
1000aaa0:	010001c4 	movi	r4,7
1000aaa4:	2140b00e 	bge	r4,r5,1000ad68 <___vfiprintf_internal_r+0xeac>
1000aaa8:	1000f61e 	bne	r2,zero,1000ae84 <___vfiprintf_internal_r+0xfc8>
1000aaac:	3800b31e 	bne	r7,zero,1000ad7c <___vfiprintf_internal_r+0xec0>
1000aab0:	0009883a 	mov	r4,zero
1000aab4:	300b883a 	mov	r5,r6
1000aab8:	d811883a 	mov	r8,sp
1000aabc:	01802004 	movi	r6,128
1000aac0:	19be5226 	beq	r3,r6,1000a40c <__alt_data_end+0xf800a40c>
1000aac4:	8521c83a 	sub	r16,r16,r20
1000aac8:	043e790e 	bge	zero,r16,1000a4b0 <__alt_data_end+0xf800a4b0>
1000aacc:	05400404 	movi	r21,16
1000aad0:	ac01b00e 	bge	r21,r16,1000b194 <___vfiprintf_internal_r+0x12d8>
1000aad4:	01440074 	movhi	r5,4097
1000aad8:	29496d04 	addi	r5,r5,9652
1000aadc:	d9402315 	stw	r5,140(sp)
1000aae0:	070001c4 	movi	fp,7
1000aae4:	00000506 	br	1000aafc <___vfiprintf_internal_r+0xc40>
1000aae8:	21400084 	addi	r5,r4,2
1000aaec:	42000204 	addi	r8,r8,8
1000aaf0:	1809883a 	mov	r4,r3
1000aaf4:	843ffc04 	addi	r16,r16,-16
1000aaf8:	ac000d0e 	bge	r21,r16,1000ab30 <___vfiprintf_internal_r+0xc74>
1000aafc:	10800404 	addi	r2,r2,16
1000ab00:	20c00044 	addi	r3,r4,1
1000ab04:	44800015 	stw	r18,0(r8)
1000ab08:	45400115 	stw	r21,4(r8)
1000ab0c:	d8801c15 	stw	r2,112(sp)
1000ab10:	d8c01b15 	stw	r3,108(sp)
1000ab14:	e0fff40e 	bge	fp,r3,1000aae8 <__alt_data_end+0xf800aae8>
1000ab18:	1000101e 	bne	r2,zero,1000ab5c <___vfiprintf_internal_r+0xca0>
1000ab1c:	843ffc04 	addi	r16,r16,-16
1000ab20:	01400044 	movi	r5,1
1000ab24:	0009883a 	mov	r4,zero
1000ab28:	d811883a 	mov	r8,sp
1000ab2c:	ac3ff316 	blt	r21,r16,1000aafc <__alt_data_end+0xf800aafc>
1000ab30:	d8c02317 	ldw	r3,140(sp)
1000ab34:	1405883a 	add	r2,r2,r16
1000ab38:	44000115 	stw	r16,4(r8)
1000ab3c:	40c00015 	stw	r3,0(r8)
1000ab40:	d8801c15 	stw	r2,112(sp)
1000ab44:	d9401b15 	stw	r5,108(sp)
1000ab48:	00c001c4 	movi	r3,7
1000ab4c:	19401916 	blt	r3,r5,1000abb4 <___vfiprintf_internal_r+0xcf8>
1000ab50:	42000204 	addi	r8,r8,8
1000ab54:	29400044 	addi	r5,r5,1
1000ab58:	003e5506 	br	1000a4b0 <__alt_data_end+0xf800a4b0>
1000ab5c:	d9402017 	ldw	r5,128(sp)
1000ab60:	d9002117 	ldw	r4,132(sp)
1000ab64:	d9801a04 	addi	r6,sp,104
1000ab68:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ab6c:	10000b1e 	bne	r2,zero,1000ab9c <___vfiprintf_internal_r+0xce0>
1000ab70:	d9001b17 	ldw	r4,108(sp)
1000ab74:	d8801c17 	ldw	r2,112(sp)
1000ab78:	d811883a 	mov	r8,sp
1000ab7c:	21400044 	addi	r5,r4,1
1000ab80:	003fdc06 	br	1000aaf4 <__alt_data_end+0xf800aaf4>
1000ab84:	d8801c17 	ldw	r2,112(sp)
1000ab88:	10000426 	beq	r2,zero,1000ab9c <___vfiprintf_internal_r+0xce0>
1000ab8c:	d9402017 	ldw	r5,128(sp)
1000ab90:	d9002117 	ldw	r4,132(sp)
1000ab94:	d9801a04 	addi	r6,sp,104
1000ab98:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ab9c:	d9402017 	ldw	r5,128(sp)
1000aba0:	2880030b 	ldhu	r2,12(r5)
1000aba4:	1080100c 	andi	r2,r2,64
1000aba8:	10014d1e 	bne	r2,zero,1000b0e0 <___vfiprintf_internal_r+0x1224>
1000abac:	d8802417 	ldw	r2,144(sp)
1000abb0:	003d9706 	br	1000a210 <__alt_data_end+0xf800a210>
1000abb4:	1000d21e 	bne	r2,zero,1000af00 <___vfiprintf_internal_r+0x1044>
1000abb8:	00c00044 	movi	r3,1
1000abbc:	a005883a 	mov	r2,r20
1000abc0:	ddc00015 	stw	r23,0(sp)
1000abc4:	dd000115 	stw	r20,4(sp)
1000abc8:	dd001c15 	stw	r20,112(sp)
1000abcc:	d8c01b15 	stw	r3,108(sp)
1000abd0:	d811883a 	mov	r8,sp
1000abd4:	42000204 	addi	r8,r8,8
1000abd8:	8c40010c 	andi	r17,r17,4
1000abdc:	88004026 	beq	r17,zero,1000ace0 <___vfiprintf_internal_r+0xe24>
1000abe0:	d9002517 	ldw	r4,148(sp)
1000abe4:	24e3c83a 	sub	r17,r4,r19
1000abe8:	04403d0e 	bge	zero,r17,1000ace0 <___vfiprintf_internal_r+0xe24>
1000abec:	04000404 	movi	r16,16
1000abf0:	8441a90e 	bge	r16,r17,1000b298 <___vfiprintf_internal_r+0x13dc>
1000abf4:	00c40074 	movhi	r3,4097
1000abf8:	18c97104 	addi	r3,r3,9668
1000abfc:	d9001b17 	ldw	r4,108(sp)
1000ac00:	d8c02315 	stw	r3,140(sp)
1000ac04:	050001c4 	movi	r20,7
1000ac08:	dd402117 	ldw	r21,132(sp)
1000ac0c:	ddc02017 	ldw	r23,128(sp)
1000ac10:	00000506 	br	1000ac28 <___vfiprintf_internal_r+0xd6c>
1000ac14:	21400084 	addi	r5,r4,2
1000ac18:	42000204 	addi	r8,r8,8
1000ac1c:	1809883a 	mov	r4,r3
1000ac20:	8c7ffc04 	addi	r17,r17,-16
1000ac24:	84400f0e 	bge	r16,r17,1000ac64 <___vfiprintf_internal_r+0xda8>
1000ac28:	01440074 	movhi	r5,4097
1000ac2c:	10800404 	addi	r2,r2,16
1000ac30:	20c00044 	addi	r3,r4,1
1000ac34:	29497104 	addi	r5,r5,9668
1000ac38:	41400015 	stw	r5,0(r8)
1000ac3c:	44000115 	stw	r16,4(r8)
1000ac40:	d8801c15 	stw	r2,112(sp)
1000ac44:	d8c01b15 	stw	r3,108(sp)
1000ac48:	a0fff20e 	bge	r20,r3,1000ac14 <__alt_data_end+0xf800ac14>
1000ac4c:	1000141e 	bne	r2,zero,1000aca0 <___vfiprintf_internal_r+0xde4>
1000ac50:	8c7ffc04 	addi	r17,r17,-16
1000ac54:	01400044 	movi	r5,1
1000ac58:	0009883a 	mov	r4,zero
1000ac5c:	d811883a 	mov	r8,sp
1000ac60:	847ff116 	blt	r16,r17,1000ac28 <__alt_data_end+0xf800ac28>
1000ac64:	d8c02317 	ldw	r3,140(sp)
1000ac68:	1445883a 	add	r2,r2,r17
1000ac6c:	44400115 	stw	r17,4(r8)
1000ac70:	40c00015 	stw	r3,0(r8)
1000ac74:	d8801c15 	stw	r2,112(sp)
1000ac78:	d9401b15 	stw	r5,108(sp)
1000ac7c:	00c001c4 	movi	r3,7
1000ac80:	1940170e 	bge	r3,r5,1000ace0 <___vfiprintf_internal_r+0xe24>
1000ac84:	1000101e 	bne	r2,zero,1000acc8 <___vfiprintf_internal_r+0xe0c>
1000ac88:	d8802517 	ldw	r2,148(sp)
1000ac8c:	14c11616 	blt	r2,r19,1000b0e8 <___vfiprintf_internal_r+0x122c>
1000ac90:	d9002417 	ldw	r4,144(sp)
1000ac94:	2089883a 	add	r4,r4,r2
1000ac98:	d9002415 	stw	r4,144(sp)
1000ac9c:	003e1806 	br	1000a500 <__alt_data_end+0xf800a500>
1000aca0:	d9801a04 	addi	r6,sp,104
1000aca4:	b80b883a 	mov	r5,r23
1000aca8:	a809883a 	mov	r4,r21
1000acac:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000acb0:	103fba1e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000acb4:	d9001b17 	ldw	r4,108(sp)
1000acb8:	d8801c17 	ldw	r2,112(sp)
1000acbc:	d811883a 	mov	r8,sp
1000acc0:	21400044 	addi	r5,r4,1
1000acc4:	003fd606 	br	1000ac20 <__alt_data_end+0xf800ac20>
1000acc8:	d9402017 	ldw	r5,128(sp)
1000accc:	d9002117 	ldw	r4,132(sp)
1000acd0:	d9801a04 	addi	r6,sp,104
1000acd4:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000acd8:	103fb01e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000acdc:	d8801c17 	ldw	r2,112(sp)
1000ace0:	d8c02517 	ldw	r3,148(sp)
1000ace4:	1cc0010e 	bge	r3,r19,1000acec <___vfiprintf_internal_r+0xe30>
1000ace8:	9807883a 	mov	r3,r19
1000acec:	d9002417 	ldw	r4,144(sp)
1000acf0:	20c9883a 	add	r4,r4,r3
1000acf4:	d9002415 	stw	r4,144(sp)
1000acf8:	103e0126 	beq	r2,zero,1000a500 <__alt_data_end+0xf800a500>
1000acfc:	d9402017 	ldw	r5,128(sp)
1000ad00:	d9002117 	ldw	r4,132(sp)
1000ad04:	d9801a04 	addi	r6,sp,104
1000ad08:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ad0c:	103dfc26 	beq	r2,zero,1000a500 <__alt_data_end+0xf800a500>
1000ad10:	003fa206 	br	1000ab9c <__alt_data_end+0xf800ab9c>
1000ad14:	d9402017 	ldw	r5,128(sp)
1000ad18:	d9002117 	ldw	r4,132(sp)
1000ad1c:	d9801a04 	addi	r6,sp,104
1000ad20:	d9c02b15 	stw	r7,172(sp)
1000ad24:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ad28:	d9c02b17 	ldw	r7,172(sp)
1000ad2c:	103f9b1e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000ad30:	d9001b17 	ldw	r4,108(sp)
1000ad34:	d8801c17 	ldw	r2,112(sp)
1000ad38:	d811883a 	mov	r8,sp
1000ad3c:	21800044 	addi	r6,r4,1
1000ad40:	003dbf06 	br	1000a440 <__alt_data_end+0xf800a440>
1000ad44:	1000d81e 	bne	r2,zero,1000b0a8 <___vfiprintf_internal_r+0x11ec>
1000ad48:	d9001d87 	ldb	r4,118(sp)
1000ad4c:	20000a26 	beq	r4,zero,1000ad78 <___vfiprintf_internal_r+0xebc>
1000ad50:	00800044 	movi	r2,1
1000ad54:	d9001d84 	addi	r4,sp,118
1000ad58:	100b883a 	mov	r5,r2
1000ad5c:	d9000015 	stw	r4,0(sp)
1000ad60:	d8800115 	stw	r2,4(sp)
1000ad64:	d811883a 	mov	r8,sp
1000ad68:	2809883a 	mov	r4,r5
1000ad6c:	42000204 	addi	r8,r8,8
1000ad70:	29400044 	addi	r5,r5,1
1000ad74:	003d9506 	br	1000a3cc <__alt_data_end+0xf800a3cc>
1000ad78:	3800fd26 	beq	r7,zero,1000b170 <___vfiprintf_internal_r+0x12b4>
1000ad7c:	00800084 	movi	r2,2
1000ad80:	d9001d04 	addi	r4,sp,116
1000ad84:	d9000015 	stw	r4,0(sp)
1000ad88:	d8800115 	stw	r2,4(sp)
1000ad8c:	01400044 	movi	r5,1
1000ad90:	d811883a 	mov	r8,sp
1000ad94:	2809883a 	mov	r4,r5
1000ad98:	42000204 	addi	r8,r8,8
1000ad9c:	29400044 	addi	r5,r5,1
1000ada0:	003f4606 	br	1000aabc <__alt_data_end+0xf800aabc>
1000ada4:	d8802517 	ldw	r2,148(sp)
1000ada8:	14c0010e 	bge	r2,r19,1000adb0 <___vfiprintf_internal_r+0xef4>
1000adac:	9805883a 	mov	r2,r19
1000adb0:	d9402417 	ldw	r5,144(sp)
1000adb4:	288b883a 	add	r5,r5,r2
1000adb8:	d9402415 	stw	r5,144(sp)
1000adbc:	003dd006 	br	1000a500 <__alt_data_end+0xf800a500>
1000adc0:	d8001d85 	stb	zero,118(sp)
1000adc4:	80005d16 	blt	r16,zero,1000af3c <___vfiprintf_internal_r+0x1080>
1000adc8:	00ffdfc4 	movi	r3,-129
1000adcc:	9d04b03a 	or	r2,r19,r20
1000add0:	88e2703a 	and	r17,r17,r3
1000add4:	103d3726 	beq	r2,zero,1000a2b4 <__alt_data_end+0xf800a2b4>
1000add8:	002b883a 	mov	r21,zero
1000addc:	d9002617 	ldw	r4,152(sp)
1000ade0:	ddc01a04 	addi	r23,sp,104
1000ade4:	988003cc 	andi	r2,r19,15
1000ade8:	a006973a 	slli	r3,r20,28
1000adec:	2085883a 	add	r2,r4,r2
1000adf0:	9826d13a 	srli	r19,r19,4
1000adf4:	10800003 	ldbu	r2,0(r2)
1000adf8:	a028d13a 	srli	r20,r20,4
1000adfc:	bdffffc4 	addi	r23,r23,-1
1000ae00:	1ce6b03a 	or	r19,r3,r19
1000ae04:	b8800005 	stb	r2,0(r23)
1000ae08:	9d04b03a 	or	r2,r19,r20
1000ae0c:	103ff51e 	bne	r2,zero,1000ade4 <__alt_data_end+0xf800ade4>
1000ae10:	d8801e17 	ldw	r2,120(sp)
1000ae14:	15e9c83a 	sub	r20,r2,r23
1000ae18:	003d2b06 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000ae1c:	d9402017 	ldw	r5,128(sp)
1000ae20:	d9002117 	ldw	r4,132(sp)
1000ae24:	d9801a04 	addi	r6,sp,104
1000ae28:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ae2c:	103f5b1e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000ae30:	d8801c17 	ldw	r2,112(sp)
1000ae34:	d811883a 	mov	r8,sp
1000ae38:	003f6706 	br	1000abd8 <__alt_data_end+0xf800abd8>
1000ae3c:	d9402017 	ldw	r5,128(sp)
1000ae40:	d9002117 	ldw	r4,132(sp)
1000ae44:	d9801a04 	addi	r6,sp,104
1000ae48:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ae4c:	103f531e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000ae50:	d811883a 	mov	r8,sp
1000ae54:	003cd906 	br	1000a1bc <__alt_data_end+0xf800a1bc>
1000ae58:	10803fcc 	andi	r2,r2,255
1000ae5c:	1080201c 	xori	r2,r2,128
1000ae60:	10bfe004 	addi	r2,r2,-128
1000ae64:	00c00c04 	movi	r3,48
1000ae68:	10ffe926 	beq	r2,r3,1000ae10 <__alt_data_end+0xf800ae10>
1000ae6c:	b8ffffc5 	stb	r3,-1(r23)
1000ae70:	d8c01e17 	ldw	r3,120(sp)
1000ae74:	b8bfffc4 	addi	r2,r23,-1
1000ae78:	102f883a 	mov	r23,r2
1000ae7c:	18a9c83a 	sub	r20,r3,r2
1000ae80:	003d1106 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000ae84:	d9402017 	ldw	r5,128(sp)
1000ae88:	d9002117 	ldw	r4,132(sp)
1000ae8c:	d9801a04 	addi	r6,sp,104
1000ae90:	d8c02a15 	stw	r3,168(sp)
1000ae94:	d9c02b15 	stw	r7,172(sp)
1000ae98:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000ae9c:	d8c02a17 	ldw	r3,168(sp)
1000aea0:	d9c02b17 	ldw	r7,172(sp)
1000aea4:	103f3d1e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000aea8:	d9001b17 	ldw	r4,108(sp)
1000aeac:	d8801c17 	ldw	r2,112(sp)
1000aeb0:	d811883a 	mov	r8,sp
1000aeb4:	21400044 	addi	r5,r4,1
1000aeb8:	003d4406 	br	1000a3cc <__alt_data_end+0xf800a3cc>
1000aebc:	d9402017 	ldw	r5,128(sp)
1000aec0:	d9002117 	ldw	r4,132(sp)
1000aec4:	d9801a04 	addi	r6,sp,104
1000aec8:	d8c02a15 	stw	r3,168(sp)
1000aecc:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000aed0:	d8c02a17 	ldw	r3,168(sp)
1000aed4:	103f311e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000aed8:	d9001b17 	ldw	r4,108(sp)
1000aedc:	d8801c17 	ldw	r2,112(sp)
1000aee0:	d811883a 	mov	r8,sp
1000aee4:	21400044 	addi	r5,r4,1
1000aee8:	003ef406 	br	1000aabc <__alt_data_end+0xf800aabc>
1000aeec:	1000bd1e 	bne	r2,zero,1000b1e4 <___vfiprintf_internal_r+0x1328>
1000aef0:	01400044 	movi	r5,1
1000aef4:	0009883a 	mov	r4,zero
1000aef8:	d811883a 	mov	r8,sp
1000aefc:	003ef106 	br	1000aac4 <__alt_data_end+0xf800aac4>
1000af00:	d9402017 	ldw	r5,128(sp)
1000af04:	d9002117 	ldw	r4,132(sp)
1000af08:	d9801a04 	addi	r6,sp,104
1000af0c:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000af10:	103f221e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000af14:	d9401b17 	ldw	r5,108(sp)
1000af18:	d8801c17 	ldw	r2,112(sp)
1000af1c:	d811883a 	mov	r8,sp
1000af20:	29400044 	addi	r5,r5,1
1000af24:	003d6206 	br	1000a4b0 <__alt_data_end+0xf800a4b0>
1000af28:	01440074 	movhi	r5,4097
1000af2c:	29490c04 	addi	r5,r5,9264
1000af30:	d9402615 	stw	r5,152(sp)
1000af34:	d8c02215 	stw	r3,136(sp)
1000af38:	1023883a 	mov	r17,r2
1000af3c:	9d04b03a 	or	r2,r19,r20
1000af40:	103fa51e 	bne	r2,zero,1000add8 <__alt_data_end+0xf800add8>
1000af44:	002b883a 	mov	r21,zero
1000af48:	00800084 	movi	r2,2
1000af4c:	003e4a06 	br	1000a878 <__alt_data_end+0xf800a878>
1000af50:	01440074 	movhi	r5,4097
1000af54:	29490c04 	addi	r5,r5,9264
1000af58:	002b883a 	mov	r21,zero
1000af5c:	d9402615 	stw	r5,152(sp)
1000af60:	003f9e06 	br	1000addc <__alt_data_end+0xf800addc>
1000af64:	d9402217 	ldw	r5,136(sp)
1000af68:	d8001d85 	stb	zero,118(sp)
1000af6c:	0029883a 	mov	r20,zero
1000af70:	28800104 	addi	r2,r5,4
1000af74:	2cc00017 	ldw	r19,0(r5)
1000af78:	803e3a16 	blt	r16,zero,1000a864 <__alt_data_end+0xf800a864>
1000af7c:	00ffdfc4 	movi	r3,-129
1000af80:	d8802215 	stw	r2,136(sp)
1000af84:	88e2703a 	and	r17,r17,r3
1000af88:	002b883a 	mov	r21,zero
1000af8c:	983e9b26 	beq	r19,zero,1000a9fc <__alt_data_end+0xf800a9fc>
1000af90:	00800244 	movi	r2,9
1000af94:	14fdc936 	bltu	r2,r19,1000a6bc <__alt_data_end+0xf800a6bc>
1000af98:	003e9a06 	br	1000aa04 <__alt_data_end+0xf800aa04>
1000af9c:	00800c04 	movi	r2,48
1000afa0:	d8c01d45 	stb	r3,117(sp)
1000afa4:	d8801d05 	stb	r2,116(sp)
1000afa8:	d8001d85 	stb	zero,118(sp)
1000afac:	88c00094 	ori	r3,r17,2
1000afb0:	80009c16 	blt	r16,zero,1000b224 <___vfiprintf_internal_r+0x1368>
1000afb4:	00bfdfc4 	movi	r2,-129
1000afb8:	88a2703a 	and	r17,r17,r2
1000afbc:	8c400094 	ori	r17,r17,2
1000afc0:	002b883a 	mov	r21,zero
1000afc4:	003f8506 	br	1000addc <__alt_data_end+0xf800addc>
1000afc8:	b029883a 	mov	r20,r22
1000afcc:	003c0b06 	br	10009ffc <__alt_data_end+0xf8009ffc>
1000afd0:	04e7c83a 	sub	r19,zero,r19
1000afd4:	05400b44 	movi	r21,45
1000afd8:	9804c03a 	cmpne	r2,r19,zero
1000afdc:	0529c83a 	sub	r20,zero,r20
1000afe0:	dd401d85 	stb	r21,118(sp)
1000afe4:	a0a9c83a 	sub	r20,r20,r2
1000afe8:	80009716 	blt	r16,zero,1000b248 <___vfiprintf_internal_r+0x138c>
1000afec:	00bfdfc4 	movi	r2,-129
1000aff0:	88a2703a 	and	r17,r17,r2
1000aff4:	003db006 	br	1000a6b8 <__alt_data_end+0xf800a6b8>
1000aff8:	b0c00007 	ldb	r3,0(r22)
1000affc:	003c0c06 	br	1000a030 <__alt_data_end+0xf800a030>
1000b000:	8880100c 	andi	r2,r17,64
1000b004:	d8001d85 	stb	zero,118(sp)
1000b008:	1000461e 	bne	r2,zero,1000b124 <___vfiprintf_internal_r+0x1268>
1000b00c:	d9002217 	ldw	r4,136(sp)
1000b010:	0029883a 	mov	r20,zero
1000b014:	20800104 	addi	r2,r4,4
1000b018:	24c00017 	ldw	r19,0(r4)
1000b01c:	803df80e 	bge	r16,zero,1000a800 <__alt_data_end+0xf800a800>
1000b020:	9d06b03a 	or	r3,r19,r20
1000b024:	d8802215 	stw	r2,136(sp)
1000b028:	183d5e1e 	bne	r3,zero,1000a5a4 <__alt_data_end+0xf800a5a4>
1000b02c:	002b883a 	mov	r21,zero
1000b030:	0005883a 	mov	r2,zero
1000b034:	003e1006 	br	1000a878 <__alt_data_end+0xf800a878>
1000b038:	8880040c 	andi	r2,r17,16
1000b03c:	1000321e 	bne	r2,zero,1000b108 <___vfiprintf_internal_r+0x124c>
1000b040:	8c40100c 	andi	r17,r17,64
1000b044:	88008d26 	beq	r17,zero,1000b27c <___vfiprintf_internal_r+0x13c0>
1000b048:	d9402217 	ldw	r5,136(sp)
1000b04c:	d8c02417 	ldw	r3,144(sp)
1000b050:	28800017 	ldw	r2,0(r5)
1000b054:	29400104 	addi	r5,r5,4
1000b058:	d9402215 	stw	r5,136(sp)
1000b05c:	10c0000d 	sth	r3,0(r2)
1000b060:	003bca06 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000b064:	8880100c 	andi	r2,r17,64
1000b068:	10003a26 	beq	r2,zero,1000b154 <___vfiprintf_internal_r+0x1298>
1000b06c:	d8802217 	ldw	r2,136(sp)
1000b070:	14c0000f 	ldh	r19,0(r2)
1000b074:	10800104 	addi	r2,r2,4
1000b078:	d8802215 	stw	r2,136(sp)
1000b07c:	9829d7fa 	srai	r20,r19,31
1000b080:	a005883a 	mov	r2,r20
1000b084:	003d8506 	br	1000a69c <__alt_data_end+0xf800a69c>
1000b088:	8880100c 	andi	r2,r17,64
1000b08c:	10002b26 	beq	r2,zero,1000b13c <___vfiprintf_internal_r+0x1280>
1000b090:	d8802217 	ldw	r2,136(sp)
1000b094:	0029883a 	mov	r20,zero
1000b098:	14c0000b 	ldhu	r19,0(r2)
1000b09c:	10800104 	addi	r2,r2,4
1000b0a0:	d8802215 	stw	r2,136(sp)
1000b0a4:	003d5d06 	br	1000a61c <__alt_data_end+0xf800a61c>
1000b0a8:	d9402017 	ldw	r5,128(sp)
1000b0ac:	d9002117 	ldw	r4,132(sp)
1000b0b0:	d9801a04 	addi	r6,sp,104
1000b0b4:	d8c02a15 	stw	r3,168(sp)
1000b0b8:	d9c02b15 	stw	r7,172(sp)
1000b0bc:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000b0c0:	d8c02a17 	ldw	r3,168(sp)
1000b0c4:	d9c02b17 	ldw	r7,172(sp)
1000b0c8:	103eb41e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000b0cc:	d9001b17 	ldw	r4,108(sp)
1000b0d0:	d8801c17 	ldw	r2,112(sp)
1000b0d4:	d811883a 	mov	r8,sp
1000b0d8:	21400044 	addi	r5,r4,1
1000b0dc:	003e6706 	br	1000aa7c <__alt_data_end+0xf800aa7c>
1000b0e0:	00bfffc4 	movi	r2,-1
1000b0e4:	003c4a06 	br	1000a210 <__alt_data_end+0xf800a210>
1000b0e8:	9805883a 	mov	r2,r19
1000b0ec:	003ee806 	br	1000ac90 <__alt_data_end+0xf800ac90>
1000b0f0:	d8c02217 	ldw	r3,136(sp)
1000b0f4:	0029883a 	mov	r20,zero
1000b0f8:	18800104 	addi	r2,r3,4
1000b0fc:	1cc0000b 	ldhu	r19,0(r3)
1000b100:	803f9e0e 	bge	r16,zero,1000af7c <__alt_data_end+0xf800af7c>
1000b104:	003dd706 	br	1000a864 <__alt_data_end+0xf800a864>
1000b108:	d8c02217 	ldw	r3,136(sp)
1000b10c:	d9002417 	ldw	r4,144(sp)
1000b110:	18800017 	ldw	r2,0(r3)
1000b114:	18c00104 	addi	r3,r3,4
1000b118:	d8c02215 	stw	r3,136(sp)
1000b11c:	11000015 	stw	r4,0(r2)
1000b120:	003b9a06 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000b124:	d8c02217 	ldw	r3,136(sp)
1000b128:	0029883a 	mov	r20,zero
1000b12c:	18800104 	addi	r2,r3,4
1000b130:	1cc0000b 	ldhu	r19,0(r3)
1000b134:	803db20e 	bge	r16,zero,1000a800 <__alt_data_end+0xf800a800>
1000b138:	003fb906 	br	1000b020 <__alt_data_end+0xf800b020>
1000b13c:	d9002217 	ldw	r4,136(sp)
1000b140:	0029883a 	mov	r20,zero
1000b144:	24c00017 	ldw	r19,0(r4)
1000b148:	21000104 	addi	r4,r4,4
1000b14c:	d9002215 	stw	r4,136(sp)
1000b150:	003d3206 	br	1000a61c <__alt_data_end+0xf800a61c>
1000b154:	d8c02217 	ldw	r3,136(sp)
1000b158:	1cc00017 	ldw	r19,0(r3)
1000b15c:	18c00104 	addi	r3,r3,4
1000b160:	d8c02215 	stw	r3,136(sp)
1000b164:	9829d7fa 	srai	r20,r19,31
1000b168:	a005883a 	mov	r2,r20
1000b16c:	003d4b06 	br	1000a69c <__alt_data_end+0xf800a69c>
1000b170:	0009883a 	mov	r4,zero
1000b174:	01400044 	movi	r5,1
1000b178:	d811883a 	mov	r8,sp
1000b17c:	003e4f06 	br	1000aabc <__alt_data_end+0xf800aabc>
1000b180:	d8c02215 	stw	r3,136(sp)
1000b184:	002b883a 	mov	r21,zero
1000b188:	003db806 	br	1000a86c <__alt_data_end+0xf800a86c>
1000b18c:	d811883a 	mov	r8,sp
1000b190:	003e9606 	br	1000abec <__alt_data_end+0xf800abec>
1000b194:	01040074 	movhi	r4,4097
1000b198:	21096d04 	addi	r4,r4,9652
1000b19c:	d9002315 	stw	r4,140(sp)
1000b1a0:	003e6306 	br	1000ab30 <__alt_data_end+0xf800ab30>
1000b1a4:	b0c00043 	ldbu	r3,1(r22)
1000b1a8:	8c400814 	ori	r17,r17,32
1000b1ac:	b5800044 	addi	r22,r22,1
1000b1b0:	18c03fcc 	andi	r3,r3,255
1000b1b4:	18c0201c 	xori	r3,r3,128
1000b1b8:	18ffe004 	addi	r3,r3,-128
1000b1bc:	003b9c06 	br	1000a030 <__alt_data_end+0xf800a030>
1000b1c0:	b809883a 	mov	r4,r23
1000b1c4:	da002a15 	stw	r8,168(sp)
1000b1c8:	000262c0 	call	1000262c <strlen>
1000b1cc:	1029883a 	mov	r20,r2
1000b1d0:	dd401d83 	ldbu	r21,118(sp)
1000b1d4:	df002215 	stw	fp,136(sp)
1000b1d8:	0021883a 	mov	r16,zero
1000b1dc:	da002a17 	ldw	r8,168(sp)
1000b1e0:	003c3906 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000b1e4:	d9402017 	ldw	r5,128(sp)
1000b1e8:	d9002117 	ldw	r4,132(sp)
1000b1ec:	d9801a04 	addi	r6,sp,104
1000b1f0:	0009da80 	call	10009da8 <__sprint_r.part.0>
1000b1f4:	103e691e 	bne	r2,zero,1000ab9c <__alt_data_end+0xf800ab9c>
1000b1f8:	d9001b17 	ldw	r4,108(sp)
1000b1fc:	d8801c17 	ldw	r2,112(sp)
1000b200:	d811883a 	mov	r8,sp
1000b204:	21400044 	addi	r5,r4,1
1000b208:	003e2e06 	br	1000aac4 <__alt_data_end+0xf800aac4>
1000b20c:	01040074 	movhi	r4,4097
1000b210:	21097104 	addi	r4,r4,9668
1000b214:	d9002315 	stw	r4,140(sp)
1000b218:	d9001b17 	ldw	r4,108(sp)
1000b21c:	21000044 	addi	r4,r4,1
1000b220:	003c5e06 	br	1000a39c <__alt_data_end+0xf800a39c>
1000b224:	002b883a 	mov	r21,zero
1000b228:	00800084 	movi	r2,2
1000b22c:	10803fcc 	andi	r2,r2,255
1000b230:	01000044 	movi	r4,1
1000b234:	11002b26 	beq	r2,r4,1000b2e4 <___vfiprintf_internal_r+0x1428>
1000b238:	01000084 	movi	r4,2
1000b23c:	11002b1e 	bne	r2,r4,1000b2ec <___vfiprintf_internal_r+0x1430>
1000b240:	1823883a 	mov	r17,r3
1000b244:	003ee506 	br	1000addc <__alt_data_end+0xf800addc>
1000b248:	8807883a 	mov	r3,r17
1000b24c:	00800044 	movi	r2,1
1000b250:	003ff606 	br	1000b22c <__alt_data_end+0xf800b22c>
1000b254:	00800184 	movi	r2,6
1000b258:	1400012e 	bgeu	r2,r16,1000b260 <___vfiprintf_internal_r+0x13a4>
1000b25c:	1021883a 	mov	r16,r2
1000b260:	8029883a 	mov	r20,r16
1000b264:	8027883a 	mov	r19,r16
1000b268:	80002216 	blt	r16,zero,1000b2f4 <___vfiprintf_internal_r+0x1438>
1000b26c:	05c40074 	movhi	r23,4097
1000b270:	df002215 	stw	fp,136(sp)
1000b274:	bdc91104 	addi	r23,r23,9284
1000b278:	003cfb06 	br	1000a668 <__alt_data_end+0xf800a668>
1000b27c:	d9002217 	ldw	r4,136(sp)
1000b280:	d9402417 	ldw	r5,144(sp)
1000b284:	20800017 	ldw	r2,0(r4)
1000b288:	21000104 	addi	r4,r4,4
1000b28c:	d9002215 	stw	r4,136(sp)
1000b290:	11400015 	stw	r5,0(r2)
1000b294:	003b3d06 	br	10009f8c <__alt_data_end+0xf8009f8c>
1000b298:	01440074 	movhi	r5,4097
1000b29c:	29497104 	addi	r5,r5,9668
1000b2a0:	d9402315 	stw	r5,140(sp)
1000b2a4:	d9401b17 	ldw	r5,108(sp)
1000b2a8:	29400044 	addi	r5,r5,1
1000b2ac:	003e6d06 	br	1000ac64 <__alt_data_end+0xf800ac64>
1000b2b0:	8029883a 	mov	r20,r16
1000b2b4:	dd401d83 	ldbu	r21,118(sp)
1000b2b8:	df002215 	stw	fp,136(sp)
1000b2bc:	0021883a 	mov	r16,zero
1000b2c0:	003c0106 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000b2c4:	00c40074 	movhi	r3,4097
1000b2c8:	18c96d04 	addi	r3,r3,9652
1000b2cc:	d8c02315 	stw	r3,140(sp)
1000b2d0:	280d883a 	mov	r6,r5
1000b2d4:	003c6906 	br	1000a47c <__alt_data_end+0xf800a47c>
1000b2d8:	802d883a 	mov	r22,r16
1000b2dc:	0021883a 	mov	r16,zero
1000b2e0:	003b5406 	br	1000a034 <__alt_data_end+0xf800a034>
1000b2e4:	1823883a 	mov	r17,r3
1000b2e8:	003cf306 	br	1000a6b8 <__alt_data_end+0xf800a6b8>
1000b2ec:	1823883a 	mov	r17,r3
1000b2f0:	003cad06 	br	1000a5a8 <__alt_data_end+0xf800a5a8>
1000b2f4:	0027883a 	mov	r19,zero
1000b2f8:	003fdc06 	br	1000b26c <__alt_data_end+0xf800b26c>
1000b2fc:	d9402217 	ldw	r5,136(sp)
1000b300:	8005883a 	mov	r2,r16
1000b304:	b0c00043 	ldbu	r3,1(r22)
1000b308:	2c000017 	ldw	r16,0(r5)
1000b30c:	29000104 	addi	r4,r5,4
1000b310:	d9002215 	stw	r4,136(sp)
1000b314:	102d883a 	mov	r22,r2
1000b318:	803fa50e 	bge	r16,zero,1000b1b0 <__alt_data_end+0xf800b1b0>
1000b31c:	18c03fcc 	andi	r3,r3,255
1000b320:	18c0201c 	xori	r3,r3,128
1000b324:	043fffc4 	movi	r16,-1
1000b328:	18ffe004 	addi	r3,r3,-128
1000b32c:	003b4006 	br	1000a030 <__alt_data_end+0xf800a030>
1000b330:	d9402303 	ldbu	r5,140(sp)
1000b334:	d9401d85 	stb	r5,118(sp)
1000b338:	003cae06 	br	1000a5f4 <__alt_data_end+0xf800a5f4>
1000b33c:	d8c02303 	ldbu	r3,140(sp)
1000b340:	d8c01d85 	stb	r3,118(sp)
1000b344:	003d1406 	br	1000a798 <__alt_data_end+0xf800a798>
1000b348:	d8c02303 	ldbu	r3,140(sp)
1000b34c:	d8c01d85 	stb	r3,118(sp)
1000b350:	003cca06 	br	1000a67c <__alt_data_end+0xf800a67c>
1000b354:	8880004c 	andi	r2,r17,1
1000b358:	002b883a 	mov	r21,zero
1000b35c:	10000526 	beq	r2,zero,1000b374 <___vfiprintf_internal_r+0x14b8>
1000b360:	00800c04 	movi	r2,48
1000b364:	d88019c5 	stb	r2,103(sp)
1000b368:	dd002817 	ldw	r20,160(sp)
1000b36c:	ddc019c4 	addi	r23,sp,103
1000b370:	003bd506 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000b374:	0029883a 	mov	r20,zero
1000b378:	ddc01a04 	addi	r23,sp,104
1000b37c:	003bd206 	br	1000a2c8 <__alt_data_end+0xf800a2c8>
1000b380:	d9002303 	ldbu	r4,140(sp)
1000b384:	d9001d85 	stb	r4,118(sp)
1000b388:	003da606 	br	1000aa24 <__alt_data_end+0xf800aa24>
1000b38c:	d8c02303 	ldbu	r3,140(sp)
1000b390:	d8c01d85 	stb	r3,118(sp)
1000b394:	003c7606 	br	1000a570 <__alt_data_end+0xf800a570>
1000b398:	d8c02303 	ldbu	r3,140(sp)
1000b39c:	d8c01d85 	stb	r3,118(sp)
1000b3a0:	003c6506 	br	1000a538 <__alt_data_end+0xf800a538>
1000b3a4:	d9002303 	ldbu	r4,140(sp)
1000b3a8:	d9001d85 	stb	r4,118(sp)
1000b3ac:	003d3d06 	br	1000a8a4 <__alt_data_end+0xf800a8a4>
1000b3b0:	d8c02303 	ldbu	r3,140(sp)
1000b3b4:	d8c01d85 	stb	r3,118(sp)
1000b3b8:	003d1d06 	br	1000a830 <__alt_data_end+0xf800a830>
1000b3bc:	d8c02303 	ldbu	r3,140(sp)
1000b3c0:	d8c01d85 	stb	r3,118(sp)
1000b3c4:	003d0306 	br	1000a7d4 <__alt_data_end+0xf800a7d4>

1000b3c8 <__vfiprintf_internal>:
1000b3c8:	00840074 	movhi	r2,4097
1000b3cc:	10906f04 	addi	r2,r2,16828
1000b3d0:	300f883a 	mov	r7,r6
1000b3d4:	280d883a 	mov	r6,r5
1000b3d8:	200b883a 	mov	r5,r4
1000b3dc:	11000017 	ldw	r4,0(r2)
1000b3e0:	0009ebc1 	jmpi	10009ebc <___vfiprintf_internal_r>

1000b3e4 <__sbprintf>:
1000b3e4:	2880030b 	ldhu	r2,12(r5)
1000b3e8:	2ac01917 	ldw	r11,100(r5)
1000b3ec:	2a80038b 	ldhu	r10,14(r5)
1000b3f0:	2a400717 	ldw	r9,28(r5)
1000b3f4:	2a000917 	ldw	r8,36(r5)
1000b3f8:	defee204 	addi	sp,sp,-1144
1000b3fc:	00c10004 	movi	r3,1024
1000b400:	dc011a15 	stw	r16,1128(sp)
1000b404:	10bfff4c 	andi	r2,r2,65533
1000b408:	2821883a 	mov	r16,r5
1000b40c:	d8cb883a 	add	r5,sp,r3
1000b410:	dc811c15 	stw	r18,1136(sp)
1000b414:	dc411b15 	stw	r17,1132(sp)
1000b418:	dfc11d15 	stw	ra,1140(sp)
1000b41c:	2025883a 	mov	r18,r4
1000b420:	d881030d 	sth	r2,1036(sp)
1000b424:	dac11915 	stw	r11,1124(sp)
1000b428:	da81038d 	sth	r10,1038(sp)
1000b42c:	da410715 	stw	r9,1052(sp)
1000b430:	da010915 	stw	r8,1060(sp)
1000b434:	dec10015 	stw	sp,1024(sp)
1000b438:	dec10415 	stw	sp,1040(sp)
1000b43c:	d8c10215 	stw	r3,1032(sp)
1000b440:	d8c10515 	stw	r3,1044(sp)
1000b444:	d8010615 	stw	zero,1048(sp)
1000b448:	0009ebc0 	call	10009ebc <___vfiprintf_internal_r>
1000b44c:	1023883a 	mov	r17,r2
1000b450:	10000416 	blt	r2,zero,1000b464 <__sbprintf+0x80>
1000b454:	d9410004 	addi	r5,sp,1024
1000b458:	9009883a 	mov	r4,r18
1000b45c:	00066980 	call	10006698 <_fflush_r>
1000b460:	10000d1e 	bne	r2,zero,1000b498 <__sbprintf+0xb4>
1000b464:	d881030b 	ldhu	r2,1036(sp)
1000b468:	1080100c 	andi	r2,r2,64
1000b46c:	10000326 	beq	r2,zero,1000b47c <__sbprintf+0x98>
1000b470:	8080030b 	ldhu	r2,12(r16)
1000b474:	10801014 	ori	r2,r2,64
1000b478:	8080030d 	sth	r2,12(r16)
1000b47c:	8805883a 	mov	r2,r17
1000b480:	dfc11d17 	ldw	ra,1140(sp)
1000b484:	dc811c17 	ldw	r18,1136(sp)
1000b488:	dc411b17 	ldw	r17,1132(sp)
1000b48c:	dc011a17 	ldw	r16,1128(sp)
1000b490:	dec11e04 	addi	sp,sp,1144
1000b494:	f800283a 	ret
1000b498:	047fffc4 	movi	r17,-1
1000b49c:	003ff106 	br	1000b464 <__alt_data_end+0xf800b464>

1000b4a0 <_write_r>:
1000b4a0:	defffd04 	addi	sp,sp,-12
1000b4a4:	2805883a 	mov	r2,r5
1000b4a8:	dc000015 	stw	r16,0(sp)
1000b4ac:	04040074 	movhi	r16,4097
1000b4b0:	dc400115 	stw	r17,4(sp)
1000b4b4:	300b883a 	mov	r5,r6
1000b4b8:	84174604 	addi	r16,r16,23832
1000b4bc:	2023883a 	mov	r17,r4
1000b4c0:	380d883a 	mov	r6,r7
1000b4c4:	1009883a 	mov	r4,r2
1000b4c8:	dfc00215 	stw	ra,8(sp)
1000b4cc:	80000015 	stw	zero,0(r16)
1000b4d0:	000fcf00 	call	1000fcf0 <write>
1000b4d4:	00ffffc4 	movi	r3,-1
1000b4d8:	10c00526 	beq	r2,r3,1000b4f0 <_write_r+0x50>
1000b4dc:	dfc00217 	ldw	ra,8(sp)
1000b4e0:	dc400117 	ldw	r17,4(sp)
1000b4e4:	dc000017 	ldw	r16,0(sp)
1000b4e8:	dec00304 	addi	sp,sp,12
1000b4ec:	f800283a 	ret
1000b4f0:	80c00017 	ldw	r3,0(r16)
1000b4f4:	183ff926 	beq	r3,zero,1000b4dc <__alt_data_end+0xf800b4dc>
1000b4f8:	88c00015 	stw	r3,0(r17)
1000b4fc:	003ff706 	br	1000b4dc <__alt_data_end+0xf800b4dc>

1000b500 <_close_r>:
1000b500:	defffd04 	addi	sp,sp,-12
1000b504:	dc000015 	stw	r16,0(sp)
1000b508:	04040074 	movhi	r16,4097
1000b50c:	dc400115 	stw	r17,4(sp)
1000b510:	84174604 	addi	r16,r16,23832
1000b514:	2023883a 	mov	r17,r4
1000b518:	2809883a 	mov	r4,r5
1000b51c:	dfc00215 	stw	ra,8(sp)
1000b520:	80000015 	stw	zero,0(r16)
1000b524:	000f4680 	call	1000f468 <close>
1000b528:	00ffffc4 	movi	r3,-1
1000b52c:	10c00526 	beq	r2,r3,1000b544 <_close_r+0x44>
1000b530:	dfc00217 	ldw	ra,8(sp)
1000b534:	dc400117 	ldw	r17,4(sp)
1000b538:	dc000017 	ldw	r16,0(sp)
1000b53c:	dec00304 	addi	sp,sp,12
1000b540:	f800283a 	ret
1000b544:	80c00017 	ldw	r3,0(r16)
1000b548:	183ff926 	beq	r3,zero,1000b530 <__alt_data_end+0xf800b530>
1000b54c:	88c00015 	stw	r3,0(r17)
1000b550:	003ff706 	br	1000b530 <__alt_data_end+0xf800b530>

1000b554 <_calloc_r>:
1000b554:	defffe04 	addi	sp,sp,-8
1000b558:	2805883a 	mov	r2,r5
1000b55c:	dc000015 	stw	r16,0(sp)
1000b560:	300b883a 	mov	r5,r6
1000b564:	2021883a 	mov	r16,r4
1000b568:	1009883a 	mov	r4,r2
1000b56c:	dfc00115 	stw	ra,4(sp)
1000b570:	000cb600 	call	1000cb60 <__mulsi3>
1000b574:	100b883a 	mov	r5,r2
1000b578:	8009883a 	mov	r4,r16
1000b57c:	00077f00 	call	100077f0 <_malloc_r>
1000b580:	10002926 	beq	r2,zero,1000b628 <_calloc_r+0xd4>
1000b584:	11bfff17 	ldw	r6,-4(r2)
1000b588:	1021883a 	mov	r16,r2
1000b58c:	00bfff04 	movi	r2,-4
1000b590:	308c703a 	and	r6,r6,r2
1000b594:	00c00904 	movi	r3,36
1000b598:	308d883a 	add	r6,r6,r2
1000b59c:	19801636 	bltu	r3,r6,1000b5f8 <_calloc_r+0xa4>
1000b5a0:	008004c4 	movi	r2,19
1000b5a4:	11800b2e 	bgeu	r2,r6,1000b5d4 <_calloc_r+0x80>
1000b5a8:	80000015 	stw	zero,0(r16)
1000b5ac:	80000115 	stw	zero,4(r16)
1000b5b0:	008006c4 	movi	r2,27
1000b5b4:	11801a2e 	bgeu	r2,r6,1000b620 <_calloc_r+0xcc>
1000b5b8:	80000215 	stw	zero,8(r16)
1000b5bc:	80000315 	stw	zero,12(r16)
1000b5c0:	30c0151e 	bne	r6,r3,1000b618 <_calloc_r+0xc4>
1000b5c4:	80000415 	stw	zero,16(r16)
1000b5c8:	80800604 	addi	r2,r16,24
1000b5cc:	80000515 	stw	zero,20(r16)
1000b5d0:	00000106 	br	1000b5d8 <_calloc_r+0x84>
1000b5d4:	8005883a 	mov	r2,r16
1000b5d8:	10000015 	stw	zero,0(r2)
1000b5dc:	10000115 	stw	zero,4(r2)
1000b5e0:	10000215 	stw	zero,8(r2)
1000b5e4:	8005883a 	mov	r2,r16
1000b5e8:	dfc00117 	ldw	ra,4(sp)
1000b5ec:	dc000017 	ldw	r16,0(sp)
1000b5f0:	dec00204 	addi	sp,sp,8
1000b5f4:	f800283a 	ret
1000b5f8:	000b883a 	mov	r5,zero
1000b5fc:	8009883a 	mov	r4,r16
1000b600:	00083840 	call	10008384 <memset>
1000b604:	8005883a 	mov	r2,r16
1000b608:	dfc00117 	ldw	ra,4(sp)
1000b60c:	dc000017 	ldw	r16,0(sp)
1000b610:	dec00204 	addi	sp,sp,8
1000b614:	f800283a 	ret
1000b618:	80800404 	addi	r2,r16,16
1000b61c:	003fee06 	br	1000b5d8 <__alt_data_end+0xf800b5d8>
1000b620:	80800204 	addi	r2,r16,8
1000b624:	003fec06 	br	1000b5d8 <__alt_data_end+0xf800b5d8>
1000b628:	0005883a 	mov	r2,zero
1000b62c:	003fee06 	br	1000b5e8 <__alt_data_end+0xf800b5e8>

1000b630 <_fclose_r>:
1000b630:	28003926 	beq	r5,zero,1000b718 <_fclose_r+0xe8>
1000b634:	defffc04 	addi	sp,sp,-16
1000b638:	dc400115 	stw	r17,4(sp)
1000b63c:	dc000015 	stw	r16,0(sp)
1000b640:	dfc00315 	stw	ra,12(sp)
1000b644:	dc800215 	stw	r18,8(sp)
1000b648:	2023883a 	mov	r17,r4
1000b64c:	2821883a 	mov	r16,r5
1000b650:	20000226 	beq	r4,zero,1000b65c <_fclose_r+0x2c>
1000b654:	20800e17 	ldw	r2,56(r4)
1000b658:	10002726 	beq	r2,zero,1000b6f8 <_fclose_r+0xc8>
1000b65c:	8080030f 	ldh	r2,12(r16)
1000b660:	1000071e 	bne	r2,zero,1000b680 <_fclose_r+0x50>
1000b664:	0005883a 	mov	r2,zero
1000b668:	dfc00317 	ldw	ra,12(sp)
1000b66c:	dc800217 	ldw	r18,8(sp)
1000b670:	dc400117 	ldw	r17,4(sp)
1000b674:	dc000017 	ldw	r16,0(sp)
1000b678:	dec00404 	addi	sp,sp,16
1000b67c:	f800283a 	ret
1000b680:	800b883a 	mov	r5,r16
1000b684:	8809883a 	mov	r4,r17
1000b688:	000647c0 	call	1000647c <__sflush_r>
1000b68c:	1025883a 	mov	r18,r2
1000b690:	80800b17 	ldw	r2,44(r16)
1000b694:	10000426 	beq	r2,zero,1000b6a8 <_fclose_r+0x78>
1000b698:	81400717 	ldw	r5,28(r16)
1000b69c:	8809883a 	mov	r4,r17
1000b6a0:	103ee83a 	callr	r2
1000b6a4:	10001616 	blt	r2,zero,1000b700 <_fclose_r+0xd0>
1000b6a8:	8080030b 	ldhu	r2,12(r16)
1000b6ac:	1080200c 	andi	r2,r2,128
1000b6b0:	1000151e 	bne	r2,zero,1000b708 <_fclose_r+0xd8>
1000b6b4:	81400c17 	ldw	r5,48(r16)
1000b6b8:	28000526 	beq	r5,zero,1000b6d0 <_fclose_r+0xa0>
1000b6bc:	80801004 	addi	r2,r16,64
1000b6c0:	28800226 	beq	r5,r2,1000b6cc <_fclose_r+0x9c>
1000b6c4:	8809883a 	mov	r4,r17
1000b6c8:	0006bf80 	call	10006bf8 <_free_r>
1000b6cc:	80000c15 	stw	zero,48(r16)
1000b6d0:	81401117 	ldw	r5,68(r16)
1000b6d4:	28000326 	beq	r5,zero,1000b6e4 <_fclose_r+0xb4>
1000b6d8:	8809883a 	mov	r4,r17
1000b6dc:	0006bf80 	call	10006bf8 <_free_r>
1000b6e0:	80001115 	stw	zero,68(r16)
1000b6e4:	0006a940 	call	10006a94 <__sfp_lock_acquire>
1000b6e8:	8000030d 	sth	zero,12(r16)
1000b6ec:	0006a980 	call	10006a98 <__sfp_lock_release>
1000b6f0:	9005883a 	mov	r2,r18
1000b6f4:	003fdc06 	br	1000b668 <__alt_data_end+0xf800b668>
1000b6f8:	0006a840 	call	10006a84 <__sinit>
1000b6fc:	003fd706 	br	1000b65c <__alt_data_end+0xf800b65c>
1000b700:	04bfffc4 	movi	r18,-1
1000b704:	003fe806 	br	1000b6a8 <__alt_data_end+0xf800b6a8>
1000b708:	81400417 	ldw	r5,16(r16)
1000b70c:	8809883a 	mov	r4,r17
1000b710:	0006bf80 	call	10006bf8 <_free_r>
1000b714:	003fe706 	br	1000b6b4 <__alt_data_end+0xf800b6b4>
1000b718:	0005883a 	mov	r2,zero
1000b71c:	f800283a 	ret

1000b720 <fclose>:
1000b720:	00840074 	movhi	r2,4097
1000b724:	10906f04 	addi	r2,r2,16828
1000b728:	200b883a 	mov	r5,r4
1000b72c:	11000017 	ldw	r4,0(r2)
1000b730:	000b6301 	jmpi	1000b630 <_fclose_r>

1000b734 <__fputwc>:
1000b734:	defff804 	addi	sp,sp,-32
1000b738:	dcc00415 	stw	r19,16(sp)
1000b73c:	dc800315 	stw	r18,12(sp)
1000b740:	dc000115 	stw	r16,4(sp)
1000b744:	dfc00715 	stw	ra,28(sp)
1000b748:	dd400615 	stw	r21,24(sp)
1000b74c:	dd000515 	stw	r20,20(sp)
1000b750:	dc400215 	stw	r17,8(sp)
1000b754:	2027883a 	mov	r19,r4
1000b758:	2825883a 	mov	r18,r5
1000b75c:	3021883a 	mov	r16,r6
1000b760:	00075e00 	call	100075e0 <__locale_mb_cur_max>
1000b764:	00c00044 	movi	r3,1
1000b768:	10c03e26 	beq	r2,r3,1000b864 <__fputwc+0x130>
1000b76c:	81c01704 	addi	r7,r16,92
1000b770:	900d883a 	mov	r6,r18
1000b774:	d80b883a 	mov	r5,sp
1000b778:	9809883a 	mov	r4,r19
1000b77c:	000bc040 	call	1000bc04 <_wcrtomb_r>
1000b780:	1029883a 	mov	r20,r2
1000b784:	00bfffc4 	movi	r2,-1
1000b788:	a0802026 	beq	r20,r2,1000b80c <__fputwc+0xd8>
1000b78c:	d9400003 	ldbu	r5,0(sp)
1000b790:	a0001c26 	beq	r20,zero,1000b804 <__fputwc+0xd0>
1000b794:	0023883a 	mov	r17,zero
1000b798:	05400284 	movi	r21,10
1000b79c:	00000906 	br	1000b7c4 <__fputwc+0x90>
1000b7a0:	80800017 	ldw	r2,0(r16)
1000b7a4:	11400005 	stb	r5,0(r2)
1000b7a8:	80c00017 	ldw	r3,0(r16)
1000b7ac:	18c00044 	addi	r3,r3,1
1000b7b0:	80c00015 	stw	r3,0(r16)
1000b7b4:	8c400044 	addi	r17,r17,1
1000b7b8:	dc45883a 	add	r2,sp,r17
1000b7bc:	8d00112e 	bgeu	r17,r20,1000b804 <__fputwc+0xd0>
1000b7c0:	11400003 	ldbu	r5,0(r2)
1000b7c4:	80c00217 	ldw	r3,8(r16)
1000b7c8:	18ffffc4 	addi	r3,r3,-1
1000b7cc:	80c00215 	stw	r3,8(r16)
1000b7d0:	183ff30e 	bge	r3,zero,1000b7a0 <__alt_data_end+0xf800b7a0>
1000b7d4:	80800617 	ldw	r2,24(r16)
1000b7d8:	18801916 	blt	r3,r2,1000b840 <__fputwc+0x10c>
1000b7dc:	80800017 	ldw	r2,0(r16)
1000b7e0:	11400005 	stb	r5,0(r2)
1000b7e4:	80800017 	ldw	r2,0(r16)
1000b7e8:	10c00003 	ldbu	r3,0(r2)
1000b7ec:	10800044 	addi	r2,r2,1
1000b7f0:	1d402326 	beq	r3,r21,1000b880 <__fputwc+0x14c>
1000b7f4:	80800015 	stw	r2,0(r16)
1000b7f8:	8c400044 	addi	r17,r17,1
1000b7fc:	dc45883a 	add	r2,sp,r17
1000b800:	8d3fef36 	bltu	r17,r20,1000b7c0 <__alt_data_end+0xf800b7c0>
1000b804:	9005883a 	mov	r2,r18
1000b808:	00000406 	br	1000b81c <__fputwc+0xe8>
1000b80c:	80c0030b 	ldhu	r3,12(r16)
1000b810:	a005883a 	mov	r2,r20
1000b814:	18c01014 	ori	r3,r3,64
1000b818:	80c0030d 	sth	r3,12(r16)
1000b81c:	dfc00717 	ldw	ra,28(sp)
1000b820:	dd400617 	ldw	r21,24(sp)
1000b824:	dd000517 	ldw	r20,20(sp)
1000b828:	dcc00417 	ldw	r19,16(sp)
1000b82c:	dc800317 	ldw	r18,12(sp)
1000b830:	dc400217 	ldw	r17,8(sp)
1000b834:	dc000117 	ldw	r16,4(sp)
1000b838:	dec00804 	addi	sp,sp,32
1000b83c:	f800283a 	ret
1000b840:	800d883a 	mov	r6,r16
1000b844:	29403fcc 	andi	r5,r5,255
1000b848:	9809883a 	mov	r4,r19
1000b84c:	000baac0 	call	1000baac <__swbuf_r>
1000b850:	10bfffe0 	cmpeqi	r2,r2,-1
1000b854:	10803fcc 	andi	r2,r2,255
1000b858:	103fd626 	beq	r2,zero,1000b7b4 <__alt_data_end+0xf800b7b4>
1000b85c:	00bfffc4 	movi	r2,-1
1000b860:	003fee06 	br	1000b81c <__alt_data_end+0xf800b81c>
1000b864:	90ffffc4 	addi	r3,r18,-1
1000b868:	01003f84 	movi	r4,254
1000b86c:	20ffbf36 	bltu	r4,r3,1000b76c <__alt_data_end+0xf800b76c>
1000b870:	900b883a 	mov	r5,r18
1000b874:	dc800005 	stb	r18,0(sp)
1000b878:	1029883a 	mov	r20,r2
1000b87c:	003fc506 	br	1000b794 <__alt_data_end+0xf800b794>
1000b880:	800d883a 	mov	r6,r16
1000b884:	a80b883a 	mov	r5,r21
1000b888:	9809883a 	mov	r4,r19
1000b88c:	000baac0 	call	1000baac <__swbuf_r>
1000b890:	10bfffe0 	cmpeqi	r2,r2,-1
1000b894:	003fef06 	br	1000b854 <__alt_data_end+0xf800b854>

1000b898 <_fputwc_r>:
1000b898:	3080030b 	ldhu	r2,12(r6)
1000b89c:	10c8000c 	andi	r3,r2,8192
1000b8a0:	1800051e 	bne	r3,zero,1000b8b8 <_fputwc_r+0x20>
1000b8a4:	30c01917 	ldw	r3,100(r6)
1000b8a8:	10880014 	ori	r2,r2,8192
1000b8ac:	3080030d 	sth	r2,12(r6)
1000b8b0:	18880014 	ori	r2,r3,8192
1000b8b4:	30801915 	stw	r2,100(r6)
1000b8b8:	000b7341 	jmpi	1000b734 <__fputwc>

1000b8bc <fputwc>:
1000b8bc:	00840074 	movhi	r2,4097
1000b8c0:	defffc04 	addi	sp,sp,-16
1000b8c4:	10906f04 	addi	r2,r2,16828
1000b8c8:	dc000115 	stw	r16,4(sp)
1000b8cc:	14000017 	ldw	r16,0(r2)
1000b8d0:	dc400215 	stw	r17,8(sp)
1000b8d4:	dfc00315 	stw	ra,12(sp)
1000b8d8:	2023883a 	mov	r17,r4
1000b8dc:	80000226 	beq	r16,zero,1000b8e8 <fputwc+0x2c>
1000b8e0:	80800e17 	ldw	r2,56(r16)
1000b8e4:	10001026 	beq	r2,zero,1000b928 <fputwc+0x6c>
1000b8e8:	2880030b 	ldhu	r2,12(r5)
1000b8ec:	10c8000c 	andi	r3,r2,8192
1000b8f0:	1800051e 	bne	r3,zero,1000b908 <fputwc+0x4c>
1000b8f4:	28c01917 	ldw	r3,100(r5)
1000b8f8:	10880014 	ori	r2,r2,8192
1000b8fc:	2880030d 	sth	r2,12(r5)
1000b900:	18880014 	ori	r2,r3,8192
1000b904:	28801915 	stw	r2,100(r5)
1000b908:	280d883a 	mov	r6,r5
1000b90c:	8009883a 	mov	r4,r16
1000b910:	880b883a 	mov	r5,r17
1000b914:	dfc00317 	ldw	ra,12(sp)
1000b918:	dc400217 	ldw	r17,8(sp)
1000b91c:	dc000117 	ldw	r16,4(sp)
1000b920:	dec00404 	addi	sp,sp,16
1000b924:	000b7341 	jmpi	1000b734 <__fputwc>
1000b928:	8009883a 	mov	r4,r16
1000b92c:	d9400015 	stw	r5,0(sp)
1000b930:	0006a840 	call	10006a84 <__sinit>
1000b934:	d9400017 	ldw	r5,0(sp)
1000b938:	003feb06 	br	1000b8e8 <__alt_data_end+0xf800b8e8>

1000b93c <_fstat_r>:
1000b93c:	defffd04 	addi	sp,sp,-12
1000b940:	2805883a 	mov	r2,r5
1000b944:	dc000015 	stw	r16,0(sp)
1000b948:	04040074 	movhi	r16,4097
1000b94c:	dc400115 	stw	r17,4(sp)
1000b950:	84174604 	addi	r16,r16,23832
1000b954:	2023883a 	mov	r17,r4
1000b958:	300b883a 	mov	r5,r6
1000b95c:	1009883a 	mov	r4,r2
1000b960:	dfc00215 	stw	ra,8(sp)
1000b964:	80000015 	stw	zero,0(r16)
1000b968:	000f5a80 	call	1000f5a8 <fstat>
1000b96c:	00ffffc4 	movi	r3,-1
1000b970:	10c00526 	beq	r2,r3,1000b988 <_fstat_r+0x4c>
1000b974:	dfc00217 	ldw	ra,8(sp)
1000b978:	dc400117 	ldw	r17,4(sp)
1000b97c:	dc000017 	ldw	r16,0(sp)
1000b980:	dec00304 	addi	sp,sp,12
1000b984:	f800283a 	ret
1000b988:	80c00017 	ldw	r3,0(r16)
1000b98c:	183ff926 	beq	r3,zero,1000b974 <__alt_data_end+0xf800b974>
1000b990:	88c00015 	stw	r3,0(r17)
1000b994:	003ff706 	br	1000b974 <__alt_data_end+0xf800b974>

1000b998 <_isatty_r>:
1000b998:	defffd04 	addi	sp,sp,-12
1000b99c:	dc000015 	stw	r16,0(sp)
1000b9a0:	04040074 	movhi	r16,4097
1000b9a4:	dc400115 	stw	r17,4(sp)
1000b9a8:	84174604 	addi	r16,r16,23832
1000b9ac:	2023883a 	mov	r17,r4
1000b9b0:	2809883a 	mov	r4,r5
1000b9b4:	dfc00215 	stw	ra,8(sp)
1000b9b8:	80000015 	stw	zero,0(r16)
1000b9bc:	000f69c0 	call	1000f69c <isatty>
1000b9c0:	00ffffc4 	movi	r3,-1
1000b9c4:	10c00526 	beq	r2,r3,1000b9dc <_isatty_r+0x44>
1000b9c8:	dfc00217 	ldw	ra,8(sp)
1000b9cc:	dc400117 	ldw	r17,4(sp)
1000b9d0:	dc000017 	ldw	r16,0(sp)
1000b9d4:	dec00304 	addi	sp,sp,12
1000b9d8:	f800283a 	ret
1000b9dc:	80c00017 	ldw	r3,0(r16)
1000b9e0:	183ff926 	beq	r3,zero,1000b9c8 <__alt_data_end+0xf800b9c8>
1000b9e4:	88c00015 	stw	r3,0(r17)
1000b9e8:	003ff706 	br	1000b9c8 <__alt_data_end+0xf800b9c8>

1000b9ec <_lseek_r>:
1000b9ec:	defffd04 	addi	sp,sp,-12
1000b9f0:	2805883a 	mov	r2,r5
1000b9f4:	dc000015 	stw	r16,0(sp)
1000b9f8:	04040074 	movhi	r16,4097
1000b9fc:	dc400115 	stw	r17,4(sp)
1000ba00:	300b883a 	mov	r5,r6
1000ba04:	84174604 	addi	r16,r16,23832
1000ba08:	2023883a 	mov	r17,r4
1000ba0c:	380d883a 	mov	r6,r7
1000ba10:	1009883a 	mov	r4,r2
1000ba14:	dfc00215 	stw	ra,8(sp)
1000ba18:	80000015 	stw	zero,0(r16)
1000ba1c:	000f8700 	call	1000f870 <lseek>
1000ba20:	00ffffc4 	movi	r3,-1
1000ba24:	10c00526 	beq	r2,r3,1000ba3c <_lseek_r+0x50>
1000ba28:	dfc00217 	ldw	ra,8(sp)
1000ba2c:	dc400117 	ldw	r17,4(sp)
1000ba30:	dc000017 	ldw	r16,0(sp)
1000ba34:	dec00304 	addi	sp,sp,12
1000ba38:	f800283a 	ret
1000ba3c:	80c00017 	ldw	r3,0(r16)
1000ba40:	183ff926 	beq	r3,zero,1000ba28 <__alt_data_end+0xf800ba28>
1000ba44:	88c00015 	stw	r3,0(r17)
1000ba48:	003ff706 	br	1000ba28 <__alt_data_end+0xf800ba28>

1000ba4c <_read_r>:
1000ba4c:	defffd04 	addi	sp,sp,-12
1000ba50:	2805883a 	mov	r2,r5
1000ba54:	dc000015 	stw	r16,0(sp)
1000ba58:	04040074 	movhi	r16,4097
1000ba5c:	dc400115 	stw	r17,4(sp)
1000ba60:	300b883a 	mov	r5,r6
1000ba64:	84174604 	addi	r16,r16,23832
1000ba68:	2023883a 	mov	r17,r4
1000ba6c:	380d883a 	mov	r6,r7
1000ba70:	1009883a 	mov	r4,r2
1000ba74:	dfc00215 	stw	ra,8(sp)
1000ba78:	80000015 	stw	zero,0(r16)
1000ba7c:	000fa4c0 	call	1000fa4c <read>
1000ba80:	00ffffc4 	movi	r3,-1
1000ba84:	10c00526 	beq	r2,r3,1000ba9c <_read_r+0x50>
1000ba88:	dfc00217 	ldw	ra,8(sp)
1000ba8c:	dc400117 	ldw	r17,4(sp)
1000ba90:	dc000017 	ldw	r16,0(sp)
1000ba94:	dec00304 	addi	sp,sp,12
1000ba98:	f800283a 	ret
1000ba9c:	80c00017 	ldw	r3,0(r16)
1000baa0:	183ff926 	beq	r3,zero,1000ba88 <__alt_data_end+0xf800ba88>
1000baa4:	88c00015 	stw	r3,0(r17)
1000baa8:	003ff706 	br	1000ba88 <__alt_data_end+0xf800ba88>

1000baac <__swbuf_r>:
1000baac:	defffb04 	addi	sp,sp,-20
1000bab0:	dcc00315 	stw	r19,12(sp)
1000bab4:	dc800215 	stw	r18,8(sp)
1000bab8:	dc000015 	stw	r16,0(sp)
1000babc:	dfc00415 	stw	ra,16(sp)
1000bac0:	dc400115 	stw	r17,4(sp)
1000bac4:	2025883a 	mov	r18,r4
1000bac8:	2827883a 	mov	r19,r5
1000bacc:	3021883a 	mov	r16,r6
1000bad0:	20000226 	beq	r4,zero,1000badc <__swbuf_r+0x30>
1000bad4:	20800e17 	ldw	r2,56(r4)
1000bad8:	10004226 	beq	r2,zero,1000bbe4 <__swbuf_r+0x138>
1000badc:	80800617 	ldw	r2,24(r16)
1000bae0:	8100030b 	ldhu	r4,12(r16)
1000bae4:	80800215 	stw	r2,8(r16)
1000bae8:	2080020c 	andi	r2,r4,8
1000baec:	10003626 	beq	r2,zero,1000bbc8 <__swbuf_r+0x11c>
1000baf0:	80c00417 	ldw	r3,16(r16)
1000baf4:	18003426 	beq	r3,zero,1000bbc8 <__swbuf_r+0x11c>
1000baf8:	2088000c 	andi	r2,r4,8192
1000bafc:	9c403fcc 	andi	r17,r19,255
1000bb00:	10001a26 	beq	r2,zero,1000bb6c <__swbuf_r+0xc0>
1000bb04:	80800017 	ldw	r2,0(r16)
1000bb08:	81000517 	ldw	r4,20(r16)
1000bb0c:	10c7c83a 	sub	r3,r2,r3
1000bb10:	1900200e 	bge	r3,r4,1000bb94 <__swbuf_r+0xe8>
1000bb14:	18c00044 	addi	r3,r3,1
1000bb18:	81000217 	ldw	r4,8(r16)
1000bb1c:	11400044 	addi	r5,r2,1
1000bb20:	81400015 	stw	r5,0(r16)
1000bb24:	213fffc4 	addi	r4,r4,-1
1000bb28:	81000215 	stw	r4,8(r16)
1000bb2c:	14c00005 	stb	r19,0(r2)
1000bb30:	80800517 	ldw	r2,20(r16)
1000bb34:	10c01e26 	beq	r2,r3,1000bbb0 <__swbuf_r+0x104>
1000bb38:	8080030b 	ldhu	r2,12(r16)
1000bb3c:	1080004c 	andi	r2,r2,1
1000bb40:	10000226 	beq	r2,zero,1000bb4c <__swbuf_r+0xa0>
1000bb44:	00800284 	movi	r2,10
1000bb48:	88801926 	beq	r17,r2,1000bbb0 <__swbuf_r+0x104>
1000bb4c:	8805883a 	mov	r2,r17
1000bb50:	dfc00417 	ldw	ra,16(sp)
1000bb54:	dcc00317 	ldw	r19,12(sp)
1000bb58:	dc800217 	ldw	r18,8(sp)
1000bb5c:	dc400117 	ldw	r17,4(sp)
1000bb60:	dc000017 	ldw	r16,0(sp)
1000bb64:	dec00504 	addi	sp,sp,20
1000bb68:	f800283a 	ret
1000bb6c:	81401917 	ldw	r5,100(r16)
1000bb70:	00b7ffc4 	movi	r2,-8193
1000bb74:	21080014 	ori	r4,r4,8192
1000bb78:	2884703a 	and	r2,r5,r2
1000bb7c:	80801915 	stw	r2,100(r16)
1000bb80:	80800017 	ldw	r2,0(r16)
1000bb84:	8100030d 	sth	r4,12(r16)
1000bb88:	81000517 	ldw	r4,20(r16)
1000bb8c:	10c7c83a 	sub	r3,r2,r3
1000bb90:	193fe016 	blt	r3,r4,1000bb14 <__alt_data_end+0xf800bb14>
1000bb94:	800b883a 	mov	r5,r16
1000bb98:	9009883a 	mov	r4,r18
1000bb9c:	00066980 	call	10006698 <_fflush_r>
1000bba0:	1000071e 	bne	r2,zero,1000bbc0 <__swbuf_r+0x114>
1000bba4:	80800017 	ldw	r2,0(r16)
1000bba8:	00c00044 	movi	r3,1
1000bbac:	003fda06 	br	1000bb18 <__alt_data_end+0xf800bb18>
1000bbb0:	800b883a 	mov	r5,r16
1000bbb4:	9009883a 	mov	r4,r18
1000bbb8:	00066980 	call	10006698 <_fflush_r>
1000bbbc:	103fe326 	beq	r2,zero,1000bb4c <__alt_data_end+0xf800bb4c>
1000bbc0:	00bfffc4 	movi	r2,-1
1000bbc4:	003fe206 	br	1000bb50 <__alt_data_end+0xf800bb50>
1000bbc8:	800b883a 	mov	r5,r16
1000bbcc:	9009883a 	mov	r4,r18
1000bbd0:	0004a780 	call	10004a78 <__swsetup_r>
1000bbd4:	103ffa1e 	bne	r2,zero,1000bbc0 <__alt_data_end+0xf800bbc0>
1000bbd8:	8100030b 	ldhu	r4,12(r16)
1000bbdc:	80c00417 	ldw	r3,16(r16)
1000bbe0:	003fc506 	br	1000baf8 <__alt_data_end+0xf800baf8>
1000bbe4:	0006a840 	call	10006a84 <__sinit>
1000bbe8:	003fbc06 	br	1000badc <__alt_data_end+0xf800badc>

1000bbec <__swbuf>:
1000bbec:	00840074 	movhi	r2,4097
1000bbf0:	10906f04 	addi	r2,r2,16828
1000bbf4:	280d883a 	mov	r6,r5
1000bbf8:	200b883a 	mov	r5,r4
1000bbfc:	11000017 	ldw	r4,0(r2)
1000bc00:	000baac1 	jmpi	1000baac <__swbuf_r>

1000bc04 <_wcrtomb_r>:
1000bc04:	defff604 	addi	sp,sp,-40
1000bc08:	00840074 	movhi	r2,4097
1000bc0c:	dc800815 	stw	r18,32(sp)
1000bc10:	dc400715 	stw	r17,28(sp)
1000bc14:	dc000615 	stw	r16,24(sp)
1000bc18:	10907304 	addi	r2,r2,16844
1000bc1c:	dfc00915 	stw	ra,36(sp)
1000bc20:	2021883a 	mov	r16,r4
1000bc24:	3823883a 	mov	r17,r7
1000bc28:	14800017 	ldw	r18,0(r2)
1000bc2c:	28001426 	beq	r5,zero,1000bc80 <_wcrtomb_r+0x7c>
1000bc30:	d9400415 	stw	r5,16(sp)
1000bc34:	d9800515 	stw	r6,20(sp)
1000bc38:	00075d40 	call	100075d4 <__locale_charset>
1000bc3c:	d9800517 	ldw	r6,20(sp)
1000bc40:	d9400417 	ldw	r5,16(sp)
1000bc44:	100f883a 	mov	r7,r2
1000bc48:	dc400015 	stw	r17,0(sp)
1000bc4c:	8009883a 	mov	r4,r16
1000bc50:	903ee83a 	callr	r18
1000bc54:	00ffffc4 	movi	r3,-1
1000bc58:	10c0031e 	bne	r2,r3,1000bc68 <_wcrtomb_r+0x64>
1000bc5c:	88000015 	stw	zero,0(r17)
1000bc60:	00c02284 	movi	r3,138
1000bc64:	80c00015 	stw	r3,0(r16)
1000bc68:	dfc00917 	ldw	ra,36(sp)
1000bc6c:	dc800817 	ldw	r18,32(sp)
1000bc70:	dc400717 	ldw	r17,28(sp)
1000bc74:	dc000617 	ldw	r16,24(sp)
1000bc78:	dec00a04 	addi	sp,sp,40
1000bc7c:	f800283a 	ret
1000bc80:	00075d40 	call	100075d4 <__locale_charset>
1000bc84:	100f883a 	mov	r7,r2
1000bc88:	dc400015 	stw	r17,0(sp)
1000bc8c:	000d883a 	mov	r6,zero
1000bc90:	d9400104 	addi	r5,sp,4
1000bc94:	8009883a 	mov	r4,r16
1000bc98:	903ee83a 	callr	r18
1000bc9c:	003fed06 	br	1000bc54 <__alt_data_end+0xf800bc54>

1000bca0 <wcrtomb>:
1000bca0:	defff604 	addi	sp,sp,-40
1000bca4:	00840074 	movhi	r2,4097
1000bca8:	dc800615 	stw	r18,24(sp)
1000bcac:	dc400515 	stw	r17,20(sp)
1000bcb0:	10906f04 	addi	r2,r2,16828
1000bcb4:	dfc00915 	stw	ra,36(sp)
1000bcb8:	dd000815 	stw	r20,32(sp)
1000bcbc:	dcc00715 	stw	r19,28(sp)
1000bcc0:	dc000415 	stw	r16,16(sp)
1000bcc4:	3025883a 	mov	r18,r6
1000bcc8:	14400017 	ldw	r17,0(r2)
1000bccc:	20001926 	beq	r4,zero,1000bd34 <wcrtomb+0x94>
1000bcd0:	00840074 	movhi	r2,4097
1000bcd4:	10907304 	addi	r2,r2,16844
1000bcd8:	15000017 	ldw	r20,0(r2)
1000bcdc:	2021883a 	mov	r16,r4
1000bce0:	2827883a 	mov	r19,r5
1000bce4:	00075d40 	call	100075d4 <__locale_charset>
1000bce8:	100f883a 	mov	r7,r2
1000bcec:	dc800015 	stw	r18,0(sp)
1000bcf0:	980d883a 	mov	r6,r19
1000bcf4:	800b883a 	mov	r5,r16
1000bcf8:	8809883a 	mov	r4,r17
1000bcfc:	a03ee83a 	callr	r20
1000bd00:	00ffffc4 	movi	r3,-1
1000bd04:	10c0031e 	bne	r2,r3,1000bd14 <wcrtomb+0x74>
1000bd08:	90000015 	stw	zero,0(r18)
1000bd0c:	00c02284 	movi	r3,138
1000bd10:	88c00015 	stw	r3,0(r17)
1000bd14:	dfc00917 	ldw	ra,36(sp)
1000bd18:	dd000817 	ldw	r20,32(sp)
1000bd1c:	dcc00717 	ldw	r19,28(sp)
1000bd20:	dc800617 	ldw	r18,24(sp)
1000bd24:	dc400517 	ldw	r17,20(sp)
1000bd28:	dc000417 	ldw	r16,16(sp)
1000bd2c:	dec00a04 	addi	sp,sp,40
1000bd30:	f800283a 	ret
1000bd34:	00840074 	movhi	r2,4097
1000bd38:	10907304 	addi	r2,r2,16844
1000bd3c:	14000017 	ldw	r16,0(r2)
1000bd40:	00075d40 	call	100075d4 <__locale_charset>
1000bd44:	100f883a 	mov	r7,r2
1000bd48:	dc800015 	stw	r18,0(sp)
1000bd4c:	000d883a 	mov	r6,zero
1000bd50:	d9400104 	addi	r5,sp,4
1000bd54:	8809883a 	mov	r4,r17
1000bd58:	803ee83a 	callr	r16
1000bd5c:	003fe806 	br	1000bd00 <__alt_data_end+0xf800bd00>

1000bd60 <__ascii_wctomb>:
1000bd60:	28000526 	beq	r5,zero,1000bd78 <__ascii_wctomb+0x18>
1000bd64:	00803fc4 	movi	r2,255
1000bd68:	11800536 	bltu	r2,r6,1000bd80 <__ascii_wctomb+0x20>
1000bd6c:	29800005 	stb	r6,0(r5)
1000bd70:	00800044 	movi	r2,1
1000bd74:	f800283a 	ret
1000bd78:	0005883a 	mov	r2,zero
1000bd7c:	f800283a 	ret
1000bd80:	00802284 	movi	r2,138
1000bd84:	20800015 	stw	r2,0(r4)
1000bd88:	00bfffc4 	movi	r2,-1
1000bd8c:	f800283a 	ret

1000bd90 <_wctomb_r>:
1000bd90:	00840074 	movhi	r2,4097
1000bd94:	defff904 	addi	sp,sp,-28
1000bd98:	10907304 	addi	r2,r2,16844
1000bd9c:	dfc00615 	stw	ra,24(sp)
1000bda0:	dc400515 	stw	r17,20(sp)
1000bda4:	dc000415 	stw	r16,16(sp)
1000bda8:	3823883a 	mov	r17,r7
1000bdac:	14000017 	ldw	r16,0(r2)
1000bdb0:	d9000115 	stw	r4,4(sp)
1000bdb4:	d9400215 	stw	r5,8(sp)
1000bdb8:	d9800315 	stw	r6,12(sp)
1000bdbc:	00075d40 	call	100075d4 <__locale_charset>
1000bdc0:	d9800317 	ldw	r6,12(sp)
1000bdc4:	d9400217 	ldw	r5,8(sp)
1000bdc8:	d9000117 	ldw	r4,4(sp)
1000bdcc:	100f883a 	mov	r7,r2
1000bdd0:	dc400015 	stw	r17,0(sp)
1000bdd4:	803ee83a 	callr	r16
1000bdd8:	dfc00617 	ldw	ra,24(sp)
1000bddc:	dc400517 	ldw	r17,20(sp)
1000bde0:	dc000417 	ldw	r16,16(sp)
1000bde4:	dec00704 	addi	sp,sp,28
1000bde8:	f800283a 	ret

1000bdec <__udivdi3>:
1000bdec:	defff404 	addi	sp,sp,-48
1000bdf0:	dcc00515 	stw	r19,20(sp)
1000bdf4:	dc000215 	stw	r16,8(sp)
1000bdf8:	dfc00b15 	stw	ra,44(sp)
1000bdfc:	df000a15 	stw	fp,40(sp)
1000be00:	ddc00915 	stw	r23,36(sp)
1000be04:	dd800815 	stw	r22,32(sp)
1000be08:	dd400715 	stw	r21,28(sp)
1000be0c:	dd000615 	stw	r20,24(sp)
1000be10:	dc800415 	stw	r18,16(sp)
1000be14:	dc400315 	stw	r17,12(sp)
1000be18:	2027883a 	mov	r19,r4
1000be1c:	2821883a 	mov	r16,r5
1000be20:	3800461e 	bne	r7,zero,1000bf3c <__udivdi3+0x150>
1000be24:	3023883a 	mov	r17,r6
1000be28:	2025883a 	mov	r18,r4
1000be2c:	2980572e 	bgeu	r5,r6,1000bf8c <__udivdi3+0x1a0>
1000be30:	00bfffd4 	movui	r2,65535
1000be34:	282d883a 	mov	r22,r5
1000be38:	1180b236 	bltu	r2,r6,1000c104 <__udivdi3+0x318>
1000be3c:	00803fc4 	movi	r2,255
1000be40:	1185803a 	cmpltu	r2,r2,r6
1000be44:	100490fa 	slli	r2,r2,3
1000be48:	3086d83a 	srl	r3,r6,r2
1000be4c:	01040074 	movhi	r4,4097
1000be50:	21097504 	addi	r4,r4,9684
1000be54:	20c7883a 	add	r3,r4,r3
1000be58:	18c00003 	ldbu	r3,0(r3)
1000be5c:	1885883a 	add	r2,r3,r2
1000be60:	00c00804 	movi	r3,32
1000be64:	1887c83a 	sub	r3,r3,r2
1000be68:	18000526 	beq	r3,zero,1000be80 <__udivdi3+0x94>
1000be6c:	80e0983a 	sll	r16,r16,r3
1000be70:	9884d83a 	srl	r2,r19,r2
1000be74:	30e2983a 	sll	r17,r6,r3
1000be78:	98e4983a 	sll	r18,r19,r3
1000be7c:	142cb03a 	or	r22,r2,r16
1000be80:	882ad43a 	srli	r21,r17,16
1000be84:	b009883a 	mov	r4,r22
1000be88:	8d3fffcc 	andi	r20,r17,65535
1000be8c:	a80b883a 	mov	r5,r21
1000be90:	000cb080 	call	1000cb08 <__umodsi3>
1000be94:	b009883a 	mov	r4,r22
1000be98:	a80b883a 	mov	r5,r21
1000be9c:	1027883a 	mov	r19,r2
1000bea0:	000caa40 	call	1000caa4 <__udivsi3>
1000bea4:	100b883a 	mov	r5,r2
1000bea8:	a009883a 	mov	r4,r20
1000beac:	102d883a 	mov	r22,r2
1000beb0:	000cb600 	call	1000cb60 <__mulsi3>
1000beb4:	9826943a 	slli	r19,r19,16
1000beb8:	9006d43a 	srli	r3,r18,16
1000bebc:	1cc6b03a 	or	r3,r3,r19
1000bec0:	1880052e 	bgeu	r3,r2,1000bed8 <__udivdi3+0xec>
1000bec4:	1c47883a 	add	r3,r3,r17
1000bec8:	b13fffc4 	addi	r4,r22,-1
1000becc:	1c400136 	bltu	r3,r17,1000bed4 <__udivdi3+0xe8>
1000bed0:	18814236 	bltu	r3,r2,1000c3dc <__udivdi3+0x5f0>
1000bed4:	202d883a 	mov	r22,r4
1000bed8:	18a1c83a 	sub	r16,r3,r2
1000bedc:	8009883a 	mov	r4,r16
1000bee0:	a80b883a 	mov	r5,r21
1000bee4:	000cb080 	call	1000cb08 <__umodsi3>
1000bee8:	1027883a 	mov	r19,r2
1000beec:	8009883a 	mov	r4,r16
1000bef0:	a80b883a 	mov	r5,r21
1000bef4:	9826943a 	slli	r19,r19,16
1000bef8:	000caa40 	call	1000caa4 <__udivsi3>
1000befc:	100b883a 	mov	r5,r2
1000bf00:	a009883a 	mov	r4,r20
1000bf04:	94bfffcc 	andi	r18,r18,65535
1000bf08:	1021883a 	mov	r16,r2
1000bf0c:	94e4b03a 	or	r18,r18,r19
1000bf10:	000cb600 	call	1000cb60 <__mulsi3>
1000bf14:	9080052e 	bgeu	r18,r2,1000bf2c <__udivdi3+0x140>
1000bf18:	8ca5883a 	add	r18,r17,r18
1000bf1c:	80ffffc4 	addi	r3,r16,-1
1000bf20:	94410c36 	bltu	r18,r17,1000c354 <__udivdi3+0x568>
1000bf24:	90810b2e 	bgeu	r18,r2,1000c354 <__udivdi3+0x568>
1000bf28:	843fff84 	addi	r16,r16,-2
1000bf2c:	b004943a 	slli	r2,r22,16
1000bf30:	0007883a 	mov	r3,zero
1000bf34:	1404b03a 	or	r2,r2,r16
1000bf38:	00005e06 	br	1000c0b4 <__udivdi3+0x2c8>
1000bf3c:	29c05b36 	bltu	r5,r7,1000c0ac <__udivdi3+0x2c0>
1000bf40:	00bfffd4 	movui	r2,65535
1000bf44:	11c0672e 	bgeu	r2,r7,1000c0e4 <__udivdi3+0x2f8>
1000bf48:	00804034 	movhi	r2,256
1000bf4c:	10bfffc4 	addi	r2,r2,-1
1000bf50:	11c10a36 	bltu	r2,r7,1000c37c <__udivdi3+0x590>
1000bf54:	00800404 	movi	r2,16
1000bf58:	3886d83a 	srl	r3,r7,r2
1000bf5c:	01040074 	movhi	r4,4097
1000bf60:	21097504 	addi	r4,r4,9684
1000bf64:	20c7883a 	add	r3,r4,r3
1000bf68:	18c00003 	ldbu	r3,0(r3)
1000bf6c:	05c00804 	movi	r23,32
1000bf70:	1885883a 	add	r2,r3,r2
1000bf74:	b8afc83a 	sub	r23,r23,r2
1000bf78:	b800671e 	bne	r23,zero,1000c118 <__udivdi3+0x32c>
1000bf7c:	3c010536 	bltu	r7,r16,1000c394 <__udivdi3+0x5a8>
1000bf80:	9985403a 	cmpgeu	r2,r19,r6
1000bf84:	0007883a 	mov	r3,zero
1000bf88:	00004a06 	br	1000c0b4 <__udivdi3+0x2c8>
1000bf8c:	3000041e 	bne	r6,zero,1000bfa0 <__udivdi3+0x1b4>
1000bf90:	000b883a 	mov	r5,zero
1000bf94:	01000044 	movi	r4,1
1000bf98:	000caa40 	call	1000caa4 <__udivsi3>
1000bf9c:	1023883a 	mov	r17,r2
1000bfa0:	00bfffd4 	movui	r2,65535
1000bfa4:	1440532e 	bgeu	r2,r17,1000c0f4 <__udivdi3+0x308>
1000bfa8:	00804034 	movhi	r2,256
1000bfac:	10bfffc4 	addi	r2,r2,-1
1000bfb0:	1440f436 	bltu	r2,r17,1000c384 <__udivdi3+0x598>
1000bfb4:	00800404 	movi	r2,16
1000bfb8:	8886d83a 	srl	r3,r17,r2
1000bfbc:	01040074 	movhi	r4,4097
1000bfc0:	21097504 	addi	r4,r4,9684
1000bfc4:	20c7883a 	add	r3,r4,r3
1000bfc8:	18c00003 	ldbu	r3,0(r3)
1000bfcc:	1885883a 	add	r2,r3,r2
1000bfd0:	00c00804 	movi	r3,32
1000bfd4:	1887c83a 	sub	r3,r3,r2
1000bfd8:	1800a51e 	bne	r3,zero,1000c270 <__udivdi3+0x484>
1000bfdc:	882ad43a 	srli	r21,r17,16
1000bfe0:	8461c83a 	sub	r16,r16,r17
1000bfe4:	8d3fffcc 	andi	r20,r17,65535
1000bfe8:	00c00044 	movi	r3,1
1000bfec:	a80b883a 	mov	r5,r21
1000bff0:	8009883a 	mov	r4,r16
1000bff4:	d8c00115 	stw	r3,4(sp)
1000bff8:	000cb080 	call	1000cb08 <__umodsi3>
1000bffc:	a80b883a 	mov	r5,r21
1000c000:	8009883a 	mov	r4,r16
1000c004:	1027883a 	mov	r19,r2
1000c008:	000caa40 	call	1000caa4 <__udivsi3>
1000c00c:	a00b883a 	mov	r5,r20
1000c010:	1009883a 	mov	r4,r2
1000c014:	102d883a 	mov	r22,r2
1000c018:	000cb600 	call	1000cb60 <__mulsi3>
1000c01c:	9826943a 	slli	r19,r19,16
1000c020:	900ed43a 	srli	r7,r18,16
1000c024:	d8c00117 	ldw	r3,4(sp)
1000c028:	3cceb03a 	or	r7,r7,r19
1000c02c:	3880052e 	bgeu	r7,r2,1000c044 <__udivdi3+0x258>
1000c030:	3c4f883a 	add	r7,r7,r17
1000c034:	b13fffc4 	addi	r4,r22,-1
1000c038:	3c400136 	bltu	r7,r17,1000c040 <__udivdi3+0x254>
1000c03c:	3880e436 	bltu	r7,r2,1000c3d0 <__udivdi3+0x5e4>
1000c040:	202d883a 	mov	r22,r4
1000c044:	38a1c83a 	sub	r16,r7,r2
1000c048:	8009883a 	mov	r4,r16
1000c04c:	a80b883a 	mov	r5,r21
1000c050:	d8c00115 	stw	r3,4(sp)
1000c054:	000cb080 	call	1000cb08 <__umodsi3>
1000c058:	1027883a 	mov	r19,r2
1000c05c:	8009883a 	mov	r4,r16
1000c060:	a80b883a 	mov	r5,r21
1000c064:	9826943a 	slli	r19,r19,16
1000c068:	000caa40 	call	1000caa4 <__udivsi3>
1000c06c:	a00b883a 	mov	r5,r20
1000c070:	1009883a 	mov	r4,r2
1000c074:	94bfffcc 	andi	r18,r18,65535
1000c078:	1021883a 	mov	r16,r2
1000c07c:	94e4b03a 	or	r18,r18,r19
1000c080:	000cb600 	call	1000cb60 <__mulsi3>
1000c084:	d8c00117 	ldw	r3,4(sp)
1000c088:	9080052e 	bgeu	r18,r2,1000c0a0 <__udivdi3+0x2b4>
1000c08c:	8ca5883a 	add	r18,r17,r18
1000c090:	813fffc4 	addi	r4,r16,-1
1000c094:	9440ad36 	bltu	r18,r17,1000c34c <__udivdi3+0x560>
1000c098:	9080ac2e 	bgeu	r18,r2,1000c34c <__udivdi3+0x560>
1000c09c:	843fff84 	addi	r16,r16,-2
1000c0a0:	b004943a 	slli	r2,r22,16
1000c0a4:	1404b03a 	or	r2,r2,r16
1000c0a8:	00000206 	br	1000c0b4 <__udivdi3+0x2c8>
1000c0ac:	0007883a 	mov	r3,zero
1000c0b0:	0005883a 	mov	r2,zero
1000c0b4:	dfc00b17 	ldw	ra,44(sp)
1000c0b8:	df000a17 	ldw	fp,40(sp)
1000c0bc:	ddc00917 	ldw	r23,36(sp)
1000c0c0:	dd800817 	ldw	r22,32(sp)
1000c0c4:	dd400717 	ldw	r21,28(sp)
1000c0c8:	dd000617 	ldw	r20,24(sp)
1000c0cc:	dcc00517 	ldw	r19,20(sp)
1000c0d0:	dc800417 	ldw	r18,16(sp)
1000c0d4:	dc400317 	ldw	r17,12(sp)
1000c0d8:	dc000217 	ldw	r16,8(sp)
1000c0dc:	dec00c04 	addi	sp,sp,48
1000c0e0:	f800283a 	ret
1000c0e4:	00803fc4 	movi	r2,255
1000c0e8:	11c5803a 	cmpltu	r2,r2,r7
1000c0ec:	100490fa 	slli	r2,r2,3
1000c0f0:	003f9906 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c0f4:	00803fc4 	movi	r2,255
1000c0f8:	1445803a 	cmpltu	r2,r2,r17
1000c0fc:	100490fa 	slli	r2,r2,3
1000c100:	003fad06 	br	1000bfb8 <__alt_data_end+0xf800bfb8>
1000c104:	00804034 	movhi	r2,256
1000c108:	10bfffc4 	addi	r2,r2,-1
1000c10c:	11809f36 	bltu	r2,r6,1000c38c <__udivdi3+0x5a0>
1000c110:	00800404 	movi	r2,16
1000c114:	003f4c06 	br	1000be48 <__alt_data_end+0xf800be48>
1000c118:	3dce983a 	sll	r7,r7,r23
1000c11c:	30b8d83a 	srl	fp,r6,r2
1000c120:	80a2d83a 	srl	r17,r16,r2
1000c124:	35cc983a 	sll	r6,r6,r23
1000c128:	3f38b03a 	or	fp,r7,fp
1000c12c:	e024d43a 	srli	r18,fp,16
1000c130:	9884d83a 	srl	r2,r19,r2
1000c134:	85e0983a 	sll	r16,r16,r23
1000c138:	8809883a 	mov	r4,r17
1000c13c:	900b883a 	mov	r5,r18
1000c140:	d9800015 	stw	r6,0(sp)
1000c144:	1420b03a 	or	r16,r2,r16
1000c148:	000cb080 	call	1000cb08 <__umodsi3>
1000c14c:	900b883a 	mov	r5,r18
1000c150:	8809883a 	mov	r4,r17
1000c154:	1029883a 	mov	r20,r2
1000c158:	e5bfffcc 	andi	r22,fp,65535
1000c15c:	000caa40 	call	1000caa4 <__udivsi3>
1000c160:	100b883a 	mov	r5,r2
1000c164:	b009883a 	mov	r4,r22
1000c168:	102b883a 	mov	r21,r2
1000c16c:	000cb600 	call	1000cb60 <__mulsi3>
1000c170:	a028943a 	slli	r20,r20,16
1000c174:	8006d43a 	srli	r3,r16,16
1000c178:	1d06b03a 	or	r3,r3,r20
1000c17c:	1880042e 	bgeu	r3,r2,1000c190 <__udivdi3+0x3a4>
1000c180:	1f07883a 	add	r3,r3,fp
1000c184:	a93fffc4 	addi	r4,r21,-1
1000c188:	1f00892e 	bgeu	r3,fp,1000c3b0 <__udivdi3+0x5c4>
1000c18c:	202b883a 	mov	r21,r4
1000c190:	18a3c83a 	sub	r17,r3,r2
1000c194:	8809883a 	mov	r4,r17
1000c198:	900b883a 	mov	r5,r18
1000c19c:	000cb080 	call	1000cb08 <__umodsi3>
1000c1a0:	1029883a 	mov	r20,r2
1000c1a4:	8809883a 	mov	r4,r17
1000c1a8:	900b883a 	mov	r5,r18
1000c1ac:	a028943a 	slli	r20,r20,16
1000c1b0:	000caa40 	call	1000caa4 <__udivsi3>
1000c1b4:	100b883a 	mov	r5,r2
1000c1b8:	b009883a 	mov	r4,r22
1000c1bc:	843fffcc 	andi	r16,r16,65535
1000c1c0:	1023883a 	mov	r17,r2
1000c1c4:	8520b03a 	or	r16,r16,r20
1000c1c8:	000cb600 	call	1000cb60 <__mulsi3>
1000c1cc:	8080042e 	bgeu	r16,r2,1000c1e0 <__udivdi3+0x3f4>
1000c1d0:	8721883a 	add	r16,r16,fp
1000c1d4:	88ffffc4 	addi	r3,r17,-1
1000c1d8:	8700712e 	bgeu	r16,fp,1000c3a0 <__udivdi3+0x5b4>
1000c1dc:	1823883a 	mov	r17,r3
1000c1e0:	a80e943a 	slli	r7,r21,16
1000c1e4:	d8c00017 	ldw	r3,0(sp)
1000c1e8:	80a1c83a 	sub	r16,r16,r2
1000c1ec:	3c64b03a 	or	r18,r7,r17
1000c1f0:	1d3fffcc 	andi	r20,r3,65535
1000c1f4:	9022d43a 	srli	r17,r18,16
1000c1f8:	95bfffcc 	andi	r22,r18,65535
1000c1fc:	a00b883a 	mov	r5,r20
1000c200:	b009883a 	mov	r4,r22
1000c204:	182ad43a 	srli	r21,r3,16
1000c208:	000cb600 	call	1000cb60 <__mulsi3>
1000c20c:	a00b883a 	mov	r5,r20
1000c210:	8809883a 	mov	r4,r17
1000c214:	1039883a 	mov	fp,r2
1000c218:	000cb600 	call	1000cb60 <__mulsi3>
1000c21c:	8809883a 	mov	r4,r17
1000c220:	a80b883a 	mov	r5,r21
1000c224:	1029883a 	mov	r20,r2
1000c228:	000cb600 	call	1000cb60 <__mulsi3>
1000c22c:	a80b883a 	mov	r5,r21
1000c230:	b009883a 	mov	r4,r22
1000c234:	1023883a 	mov	r17,r2
1000c238:	000cb600 	call	1000cb60 <__mulsi3>
1000c23c:	e006d43a 	srli	r3,fp,16
1000c240:	1505883a 	add	r2,r2,r20
1000c244:	1887883a 	add	r3,r3,r2
1000c248:	1d00022e 	bgeu	r3,r20,1000c254 <__udivdi3+0x468>
1000c24c:	00800074 	movhi	r2,1
1000c250:	88a3883a 	add	r17,r17,r2
1000c254:	1804d43a 	srli	r2,r3,16
1000c258:	1463883a 	add	r17,r2,r17
1000c25c:	84404436 	bltu	r16,r17,1000c370 <__udivdi3+0x584>
1000c260:	84403e26 	beq	r16,r17,1000c35c <__udivdi3+0x570>
1000c264:	9005883a 	mov	r2,r18
1000c268:	0007883a 	mov	r3,zero
1000c26c:	003f9106 	br	1000c0b4 <__alt_data_end+0xf800c0b4>
1000c270:	88e2983a 	sll	r17,r17,r3
1000c274:	80aed83a 	srl	r23,r16,r2
1000c278:	80e0983a 	sll	r16,r16,r3
1000c27c:	882ad43a 	srli	r21,r17,16
1000c280:	9884d83a 	srl	r2,r19,r2
1000c284:	b809883a 	mov	r4,r23
1000c288:	a80b883a 	mov	r5,r21
1000c28c:	98e4983a 	sll	r18,r19,r3
1000c290:	142cb03a 	or	r22,r2,r16
1000c294:	000cb080 	call	1000cb08 <__umodsi3>
1000c298:	b809883a 	mov	r4,r23
1000c29c:	a80b883a 	mov	r5,r21
1000c2a0:	1027883a 	mov	r19,r2
1000c2a4:	8d3fffcc 	andi	r20,r17,65535
1000c2a8:	000caa40 	call	1000caa4 <__udivsi3>
1000c2ac:	a009883a 	mov	r4,r20
1000c2b0:	100b883a 	mov	r5,r2
1000c2b4:	102f883a 	mov	r23,r2
1000c2b8:	000cb600 	call	1000cb60 <__mulsi3>
1000c2bc:	9826943a 	slli	r19,r19,16
1000c2c0:	b008d43a 	srli	r4,r22,16
1000c2c4:	24c8b03a 	or	r4,r4,r19
1000c2c8:	2080062e 	bgeu	r4,r2,1000c2e4 <__udivdi3+0x4f8>
1000c2cc:	2449883a 	add	r4,r4,r17
1000c2d0:	b8ffffc4 	addi	r3,r23,-1
1000c2d4:	24403c36 	bltu	r4,r17,1000c3c8 <__udivdi3+0x5dc>
1000c2d8:	20803b2e 	bgeu	r4,r2,1000c3c8 <__udivdi3+0x5dc>
1000c2dc:	bdffff84 	addi	r23,r23,-2
1000c2e0:	2449883a 	add	r4,r4,r17
1000c2e4:	20a1c83a 	sub	r16,r4,r2
1000c2e8:	a80b883a 	mov	r5,r21
1000c2ec:	8009883a 	mov	r4,r16
1000c2f0:	000cb080 	call	1000cb08 <__umodsi3>
1000c2f4:	a80b883a 	mov	r5,r21
1000c2f8:	8009883a 	mov	r4,r16
1000c2fc:	1027883a 	mov	r19,r2
1000c300:	000caa40 	call	1000caa4 <__udivsi3>
1000c304:	a009883a 	mov	r4,r20
1000c308:	100b883a 	mov	r5,r2
1000c30c:	9826943a 	slli	r19,r19,16
1000c310:	1039883a 	mov	fp,r2
1000c314:	000cb600 	call	1000cb60 <__mulsi3>
1000c318:	b13fffcc 	andi	r4,r22,65535
1000c31c:	24c8b03a 	or	r4,r4,r19
1000c320:	2080062e 	bgeu	r4,r2,1000c33c <__udivdi3+0x550>
1000c324:	2449883a 	add	r4,r4,r17
1000c328:	e0ffffc4 	addi	r3,fp,-1
1000c32c:	24402436 	bltu	r4,r17,1000c3c0 <__udivdi3+0x5d4>
1000c330:	2080232e 	bgeu	r4,r2,1000c3c0 <__udivdi3+0x5d4>
1000c334:	e73fff84 	addi	fp,fp,-2
1000c338:	2449883a 	add	r4,r4,r17
1000c33c:	b82e943a 	slli	r23,r23,16
1000c340:	20a1c83a 	sub	r16,r4,r2
1000c344:	bf06b03a 	or	r3,r23,fp
1000c348:	003f2806 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c34c:	2021883a 	mov	r16,r4
1000c350:	003f5306 	br	1000c0a0 <__alt_data_end+0xf800c0a0>
1000c354:	1821883a 	mov	r16,r3
1000c358:	003ef406 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c35c:	1806943a 	slli	r3,r3,16
1000c360:	9de6983a 	sll	r19,r19,r23
1000c364:	e73fffcc 	andi	fp,fp,65535
1000c368:	1f07883a 	add	r3,r3,fp
1000c36c:	98ffbd2e 	bgeu	r19,r3,1000c264 <__alt_data_end+0xf800c264>
1000c370:	90bfffc4 	addi	r2,r18,-1
1000c374:	0007883a 	mov	r3,zero
1000c378:	003f4e06 	br	1000c0b4 <__alt_data_end+0xf800c0b4>
1000c37c:	00800604 	movi	r2,24
1000c380:	003ef506 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c384:	00800604 	movi	r2,24
1000c388:	003f0b06 	br	1000bfb8 <__alt_data_end+0xf800bfb8>
1000c38c:	00800604 	movi	r2,24
1000c390:	003ead06 	br	1000be48 <__alt_data_end+0xf800be48>
1000c394:	0007883a 	mov	r3,zero
1000c398:	00800044 	movi	r2,1
1000c39c:	003f4506 	br	1000c0b4 <__alt_data_end+0xf800c0b4>
1000c3a0:	80bf8e2e 	bgeu	r16,r2,1000c1dc <__alt_data_end+0xf800c1dc>
1000c3a4:	8c7fff84 	addi	r17,r17,-2
1000c3a8:	8721883a 	add	r16,r16,fp
1000c3ac:	003f8c06 	br	1000c1e0 <__alt_data_end+0xf800c1e0>
1000c3b0:	18bf762e 	bgeu	r3,r2,1000c18c <__alt_data_end+0xf800c18c>
1000c3b4:	ad7fff84 	addi	r21,r21,-2
1000c3b8:	1f07883a 	add	r3,r3,fp
1000c3bc:	003f7406 	br	1000c190 <__alt_data_end+0xf800c190>
1000c3c0:	1839883a 	mov	fp,r3
1000c3c4:	003fdd06 	br	1000c33c <__alt_data_end+0xf800c33c>
1000c3c8:	182f883a 	mov	r23,r3
1000c3cc:	003fc506 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c3d0:	b5bfff84 	addi	r22,r22,-2
1000c3d4:	3c4f883a 	add	r7,r7,r17
1000c3d8:	003f1a06 	br	1000c044 <__alt_data_end+0xf800c044>
1000c3dc:	b5bfff84 	addi	r22,r22,-2
1000c3e0:	1c47883a 	add	r3,r3,r17
1000c3e4:	003ebc06 	br	1000bed8 <__alt_data_end+0xf800bed8>

1000c3e8 <__umoddi3>:
1000c3e8:	defff304 	addi	sp,sp,-52
1000c3ec:	df000b15 	stw	fp,44(sp)
1000c3f0:	dc400415 	stw	r17,16(sp)
1000c3f4:	dc000315 	stw	r16,12(sp)
1000c3f8:	dfc00c15 	stw	ra,48(sp)
1000c3fc:	ddc00a15 	stw	r23,40(sp)
1000c400:	dd800915 	stw	r22,36(sp)
1000c404:	dd400815 	stw	r21,32(sp)
1000c408:	dd000715 	stw	r20,28(sp)
1000c40c:	dcc00615 	stw	r19,24(sp)
1000c410:	dc800515 	stw	r18,20(sp)
1000c414:	2021883a 	mov	r16,r4
1000c418:	2823883a 	mov	r17,r5
1000c41c:	2839883a 	mov	fp,r5
1000c420:	3800401e 	bne	r7,zero,1000c524 <__umoddi3+0x13c>
1000c424:	3027883a 	mov	r19,r6
1000c428:	2029883a 	mov	r20,r4
1000c42c:	2980552e 	bgeu	r5,r6,1000c584 <__umoddi3+0x19c>
1000c430:	00bfffd4 	movui	r2,65535
1000c434:	1180a236 	bltu	r2,r6,1000c6c0 <__umoddi3+0x2d8>
1000c438:	01003fc4 	movi	r4,255
1000c43c:	2189803a 	cmpltu	r4,r4,r6
1000c440:	200890fa 	slli	r4,r4,3
1000c444:	3104d83a 	srl	r2,r6,r4
1000c448:	00c40074 	movhi	r3,4097
1000c44c:	18c97504 	addi	r3,r3,9684
1000c450:	1885883a 	add	r2,r3,r2
1000c454:	10c00003 	ldbu	r3,0(r2)
1000c458:	00800804 	movi	r2,32
1000c45c:	1909883a 	add	r4,r3,r4
1000c460:	1125c83a 	sub	r18,r2,r4
1000c464:	90000526 	beq	r18,zero,1000c47c <__umoddi3+0x94>
1000c468:	8ca2983a 	sll	r17,r17,r18
1000c46c:	8108d83a 	srl	r4,r16,r4
1000c470:	34a6983a 	sll	r19,r6,r18
1000c474:	84a8983a 	sll	r20,r16,r18
1000c478:	2478b03a 	or	fp,r4,r17
1000c47c:	982cd43a 	srli	r22,r19,16
1000c480:	e009883a 	mov	r4,fp
1000c484:	9dffffcc 	andi	r23,r19,65535
1000c488:	b00b883a 	mov	r5,r22
1000c48c:	000cb080 	call	1000cb08 <__umodsi3>
1000c490:	b00b883a 	mov	r5,r22
1000c494:	e009883a 	mov	r4,fp
1000c498:	102b883a 	mov	r21,r2
1000c49c:	000caa40 	call	1000caa4 <__udivsi3>
1000c4a0:	100b883a 	mov	r5,r2
1000c4a4:	b809883a 	mov	r4,r23
1000c4a8:	000cb600 	call	1000cb60 <__mulsi3>
1000c4ac:	a82a943a 	slli	r21,r21,16
1000c4b0:	a006d43a 	srli	r3,r20,16
1000c4b4:	1d46b03a 	or	r3,r3,r21
1000c4b8:	1880032e 	bgeu	r3,r2,1000c4c8 <__umoddi3+0xe0>
1000c4bc:	1cc7883a 	add	r3,r3,r19
1000c4c0:	1cc00136 	bltu	r3,r19,1000c4c8 <__umoddi3+0xe0>
1000c4c4:	18813136 	bltu	r3,r2,1000c98c <__umoddi3+0x5a4>
1000c4c8:	18a1c83a 	sub	r16,r3,r2
1000c4cc:	b00b883a 	mov	r5,r22
1000c4d0:	8009883a 	mov	r4,r16
1000c4d4:	000cb080 	call	1000cb08 <__umodsi3>
1000c4d8:	b00b883a 	mov	r5,r22
1000c4dc:	8009883a 	mov	r4,r16
1000c4e0:	1023883a 	mov	r17,r2
1000c4e4:	000caa40 	call	1000caa4 <__udivsi3>
1000c4e8:	100b883a 	mov	r5,r2
1000c4ec:	b809883a 	mov	r4,r23
1000c4f0:	8822943a 	slli	r17,r17,16
1000c4f4:	000cb600 	call	1000cb60 <__mulsi3>
1000c4f8:	a0ffffcc 	andi	r3,r20,65535
1000c4fc:	1c46b03a 	or	r3,r3,r17
1000c500:	1880042e 	bgeu	r3,r2,1000c514 <__umoddi3+0x12c>
1000c504:	1cc7883a 	add	r3,r3,r19
1000c508:	1cc00236 	bltu	r3,r19,1000c514 <__umoddi3+0x12c>
1000c50c:	1880012e 	bgeu	r3,r2,1000c514 <__umoddi3+0x12c>
1000c510:	1cc7883a 	add	r3,r3,r19
1000c514:	1885c83a 	sub	r2,r3,r2
1000c518:	1484d83a 	srl	r2,r2,r18
1000c51c:	0007883a 	mov	r3,zero
1000c520:	00005306 	br	1000c670 <__umoddi3+0x288>
1000c524:	29c05036 	bltu	r5,r7,1000c668 <__umoddi3+0x280>
1000c528:	00bfffd4 	movui	r2,65535
1000c52c:	11c05c2e 	bgeu	r2,r7,1000c6a0 <__umoddi3+0x2b8>
1000c530:	00804034 	movhi	r2,256
1000c534:	10bfffc4 	addi	r2,r2,-1
1000c538:	11c10636 	bltu	r2,r7,1000c954 <__umoddi3+0x56c>
1000c53c:	01000404 	movi	r4,16
1000c540:	3904d83a 	srl	r2,r7,r4
1000c544:	00c40074 	movhi	r3,4097
1000c548:	18c97504 	addi	r3,r3,9684
1000c54c:	1885883a 	add	r2,r3,r2
1000c550:	14c00003 	ldbu	r19,0(r2)
1000c554:	00c00804 	movi	r3,32
1000c558:	9927883a 	add	r19,r19,r4
1000c55c:	1ce9c83a 	sub	r20,r3,r19
1000c560:	a0005c1e 	bne	r20,zero,1000c6d4 <__umoddi3+0x2ec>
1000c564:	3c400136 	bltu	r7,r17,1000c56c <__umoddi3+0x184>
1000c568:	81810a36 	bltu	r16,r6,1000c994 <__umoddi3+0x5ac>
1000c56c:	8185c83a 	sub	r2,r16,r6
1000c570:	89e3c83a 	sub	r17,r17,r7
1000c574:	8089803a 	cmpltu	r4,r16,r2
1000c578:	8939c83a 	sub	fp,r17,r4
1000c57c:	e007883a 	mov	r3,fp
1000c580:	00003b06 	br	1000c670 <__umoddi3+0x288>
1000c584:	3000041e 	bne	r6,zero,1000c598 <__umoddi3+0x1b0>
1000c588:	000b883a 	mov	r5,zero
1000c58c:	01000044 	movi	r4,1
1000c590:	000caa40 	call	1000caa4 <__udivsi3>
1000c594:	1027883a 	mov	r19,r2
1000c598:	00bfffd4 	movui	r2,65535
1000c59c:	14c0442e 	bgeu	r2,r19,1000c6b0 <__umoddi3+0x2c8>
1000c5a0:	00804034 	movhi	r2,256
1000c5a4:	10bfffc4 	addi	r2,r2,-1
1000c5a8:	14c0ec36 	bltu	r2,r19,1000c95c <__umoddi3+0x574>
1000c5ac:	00800404 	movi	r2,16
1000c5b0:	9886d83a 	srl	r3,r19,r2
1000c5b4:	01040074 	movhi	r4,4097
1000c5b8:	21097504 	addi	r4,r4,9684
1000c5bc:	20c7883a 	add	r3,r4,r3
1000c5c0:	18c00003 	ldbu	r3,0(r3)
1000c5c4:	1887883a 	add	r3,r3,r2
1000c5c8:	00800804 	movi	r2,32
1000c5cc:	10e5c83a 	sub	r18,r2,r3
1000c5d0:	9000ab1e 	bne	r18,zero,1000c880 <__umoddi3+0x498>
1000c5d4:	982cd43a 	srli	r22,r19,16
1000c5d8:	8ce3c83a 	sub	r17,r17,r19
1000c5dc:	9dffffcc 	andi	r23,r19,65535
1000c5e0:	b00b883a 	mov	r5,r22
1000c5e4:	8809883a 	mov	r4,r17
1000c5e8:	000cb080 	call	1000cb08 <__umodsi3>
1000c5ec:	b00b883a 	mov	r5,r22
1000c5f0:	8809883a 	mov	r4,r17
1000c5f4:	102b883a 	mov	r21,r2
1000c5f8:	000caa40 	call	1000caa4 <__udivsi3>
1000c5fc:	b80b883a 	mov	r5,r23
1000c600:	1009883a 	mov	r4,r2
1000c604:	000cb600 	call	1000cb60 <__mulsi3>
1000c608:	a82a943a 	slli	r21,r21,16
1000c60c:	a006d43a 	srli	r3,r20,16
1000c610:	1d46b03a 	or	r3,r3,r21
1000c614:	1880042e 	bgeu	r3,r2,1000c628 <__umoddi3+0x240>
1000c618:	1cc7883a 	add	r3,r3,r19
1000c61c:	1cc00236 	bltu	r3,r19,1000c628 <__umoddi3+0x240>
1000c620:	1880012e 	bgeu	r3,r2,1000c628 <__umoddi3+0x240>
1000c624:	1cc7883a 	add	r3,r3,r19
1000c628:	18a1c83a 	sub	r16,r3,r2
1000c62c:	b00b883a 	mov	r5,r22
1000c630:	8009883a 	mov	r4,r16
1000c634:	000cb080 	call	1000cb08 <__umodsi3>
1000c638:	1023883a 	mov	r17,r2
1000c63c:	b00b883a 	mov	r5,r22
1000c640:	8009883a 	mov	r4,r16
1000c644:	000caa40 	call	1000caa4 <__udivsi3>
1000c648:	8822943a 	slli	r17,r17,16
1000c64c:	b80b883a 	mov	r5,r23
1000c650:	1009883a 	mov	r4,r2
1000c654:	000cb600 	call	1000cb60 <__mulsi3>
1000c658:	a53fffcc 	andi	r20,r20,65535
1000c65c:	a446b03a 	or	r3,r20,r17
1000c660:	18bfac2e 	bgeu	r3,r2,1000c514 <__alt_data_end+0xf800c514>
1000c664:	003fa706 	br	1000c504 <__alt_data_end+0xf800c504>
1000c668:	2005883a 	mov	r2,r4
1000c66c:	2807883a 	mov	r3,r5
1000c670:	dfc00c17 	ldw	ra,48(sp)
1000c674:	df000b17 	ldw	fp,44(sp)
1000c678:	ddc00a17 	ldw	r23,40(sp)
1000c67c:	dd800917 	ldw	r22,36(sp)
1000c680:	dd400817 	ldw	r21,32(sp)
1000c684:	dd000717 	ldw	r20,28(sp)
1000c688:	dcc00617 	ldw	r19,24(sp)
1000c68c:	dc800517 	ldw	r18,20(sp)
1000c690:	dc400417 	ldw	r17,16(sp)
1000c694:	dc000317 	ldw	r16,12(sp)
1000c698:	dec00d04 	addi	sp,sp,52
1000c69c:	f800283a 	ret
1000c6a0:	04c03fc4 	movi	r19,255
1000c6a4:	99c9803a 	cmpltu	r4,r19,r7
1000c6a8:	200890fa 	slli	r4,r4,3
1000c6ac:	003fa406 	br	1000c540 <__alt_data_end+0xf800c540>
1000c6b0:	00803fc4 	movi	r2,255
1000c6b4:	14c5803a 	cmpltu	r2,r2,r19
1000c6b8:	100490fa 	slli	r2,r2,3
1000c6bc:	003fbc06 	br	1000c5b0 <__alt_data_end+0xf800c5b0>
1000c6c0:	00804034 	movhi	r2,256
1000c6c4:	10bfffc4 	addi	r2,r2,-1
1000c6c8:	1180a636 	bltu	r2,r6,1000c964 <__umoddi3+0x57c>
1000c6cc:	01000404 	movi	r4,16
1000c6d0:	003f5c06 	br	1000c444 <__alt_data_end+0xf800c444>
1000c6d4:	3d0e983a 	sll	r7,r7,r20
1000c6d8:	34ead83a 	srl	r21,r6,r19
1000c6dc:	8cc6d83a 	srl	r3,r17,r19
1000c6e0:	8d10983a 	sll	r8,r17,r20
1000c6e4:	3d6ab03a 	or	r21,r7,r21
1000c6e8:	a82cd43a 	srli	r22,r21,16
1000c6ec:	84e2d83a 	srl	r17,r16,r19
1000c6f0:	1809883a 	mov	r4,r3
1000c6f4:	b00b883a 	mov	r5,r22
1000c6f8:	8a22b03a 	or	r17,r17,r8
1000c6fc:	3524983a 	sll	r18,r6,r20
1000c700:	dc400015 	stw	r17,0(sp)
1000c704:	d8c00115 	stw	r3,4(sp)
1000c708:	000cb080 	call	1000cb08 <__umodsi3>
1000c70c:	d8c00117 	ldw	r3,4(sp)
1000c710:	b00b883a 	mov	r5,r22
1000c714:	1039883a 	mov	fp,r2
1000c718:	1809883a 	mov	r4,r3
1000c71c:	000caa40 	call	1000caa4 <__udivsi3>
1000c720:	adffffcc 	andi	r23,r21,65535
1000c724:	100b883a 	mov	r5,r2
1000c728:	b809883a 	mov	r4,r23
1000c72c:	1023883a 	mov	r17,r2
1000c730:	000cb600 	call	1000cb60 <__mulsi3>
1000c734:	d9400017 	ldw	r5,0(sp)
1000c738:	e008943a 	slli	r4,fp,16
1000c73c:	8520983a 	sll	r16,r16,r20
1000c740:	2806d43a 	srli	r3,r5,16
1000c744:	1906b03a 	or	r3,r3,r4
1000c748:	1880042e 	bgeu	r3,r2,1000c75c <__umoddi3+0x374>
1000c74c:	1d47883a 	add	r3,r3,r21
1000c750:	893fffc4 	addi	r4,r17,-1
1000c754:	1d40892e 	bgeu	r3,r21,1000c97c <__umoddi3+0x594>
1000c758:	2023883a 	mov	r17,r4
1000c75c:	18b9c83a 	sub	fp,r3,r2
1000c760:	b00b883a 	mov	r5,r22
1000c764:	e009883a 	mov	r4,fp
1000c768:	000cb080 	call	1000cb08 <__umodsi3>
1000c76c:	b00b883a 	mov	r5,r22
1000c770:	e009883a 	mov	r4,fp
1000c774:	d8800215 	stw	r2,8(sp)
1000c778:	000caa40 	call	1000caa4 <__udivsi3>
1000c77c:	100b883a 	mov	r5,r2
1000c780:	b809883a 	mov	r4,r23
1000c784:	102d883a 	mov	r22,r2
1000c788:	000cb600 	call	1000cb60 <__mulsi3>
1000c78c:	d9800217 	ldw	r6,8(sp)
1000c790:	d8c00017 	ldw	r3,0(sp)
1000c794:	300c943a 	slli	r6,r6,16
1000c798:	1a3fffcc 	andi	r8,r3,65535
1000c79c:	4190b03a 	or	r8,r8,r6
1000c7a0:	4080042e 	bgeu	r8,r2,1000c7b4 <__umoddi3+0x3cc>
1000c7a4:	4551883a 	add	r8,r8,r21
1000c7a8:	b0ffffc4 	addi	r3,r22,-1
1000c7ac:	45406f2e 	bgeu	r8,r21,1000c96c <__umoddi3+0x584>
1000c7b0:	182d883a 	mov	r22,r3
1000c7b4:	880e943a 	slli	r7,r17,16
1000c7b8:	9006d43a 	srli	r3,r18,16
1000c7bc:	91bfffcc 	andi	r6,r18,65535
1000c7c0:	3dacb03a 	or	r22,r7,r22
1000c7c4:	b02ed43a 	srli	r23,r22,16
1000c7c8:	b5bfffcc 	andi	r22,r22,65535
1000c7cc:	300b883a 	mov	r5,r6
1000c7d0:	b009883a 	mov	r4,r22
1000c7d4:	40a3c83a 	sub	r17,r8,r2
1000c7d8:	d8c00115 	stw	r3,4(sp)
1000c7dc:	d9800215 	stw	r6,8(sp)
1000c7e0:	000cb600 	call	1000cb60 <__mulsi3>
1000c7e4:	d9800217 	ldw	r6,8(sp)
1000c7e8:	b809883a 	mov	r4,r23
1000c7ec:	1039883a 	mov	fp,r2
1000c7f0:	300b883a 	mov	r5,r6
1000c7f4:	000cb600 	call	1000cb60 <__mulsi3>
1000c7f8:	d8c00117 	ldw	r3,4(sp)
1000c7fc:	b809883a 	mov	r4,r23
1000c800:	d8800215 	stw	r2,8(sp)
1000c804:	180b883a 	mov	r5,r3
1000c808:	000cb600 	call	1000cb60 <__mulsi3>
1000c80c:	d8c00117 	ldw	r3,4(sp)
1000c810:	b009883a 	mov	r4,r22
1000c814:	102f883a 	mov	r23,r2
1000c818:	180b883a 	mov	r5,r3
1000c81c:	000cb600 	call	1000cb60 <__mulsi3>
1000c820:	d9800217 	ldw	r6,8(sp)
1000c824:	e006d43a 	srli	r3,fp,16
1000c828:	1185883a 	add	r2,r2,r6
1000c82c:	1885883a 	add	r2,r3,r2
1000c830:	1180022e 	bgeu	r2,r6,1000c83c <__umoddi3+0x454>
1000c834:	00c00074 	movhi	r3,1
1000c838:	b8ef883a 	add	r23,r23,r3
1000c83c:	1006d43a 	srli	r3,r2,16
1000c840:	1004943a 	slli	r2,r2,16
1000c844:	e73fffcc 	andi	fp,fp,65535
1000c848:	1dc7883a 	add	r3,r3,r23
1000c84c:	1739883a 	add	fp,r2,fp
1000c850:	88c03a36 	bltu	r17,r3,1000c93c <__umoddi3+0x554>
1000c854:	88c05126 	beq	r17,r3,1000c99c <__umoddi3+0x5b4>
1000c858:	88c9c83a 	sub	r4,r17,r3
1000c85c:	e00f883a 	mov	r7,fp
1000c860:	81cfc83a 	sub	r7,r16,r7
1000c864:	81c7803a 	cmpltu	r3,r16,r7
1000c868:	20c7c83a 	sub	r3,r4,r3
1000c86c:	1cc4983a 	sll	r2,r3,r19
1000c870:	3d0ed83a 	srl	r7,r7,r20
1000c874:	1d06d83a 	srl	r3,r3,r20
1000c878:	11c4b03a 	or	r2,r2,r7
1000c87c:	003f7c06 	br	1000c670 <__alt_data_end+0xf800c670>
1000c880:	9ca6983a 	sll	r19,r19,r18
1000c884:	88f8d83a 	srl	fp,r17,r3
1000c888:	80c4d83a 	srl	r2,r16,r3
1000c88c:	982cd43a 	srli	r22,r19,16
1000c890:	8ca2983a 	sll	r17,r17,r18
1000c894:	e009883a 	mov	r4,fp
1000c898:	b00b883a 	mov	r5,r22
1000c89c:	146ab03a 	or	r21,r2,r17
1000c8a0:	000cb080 	call	1000cb08 <__umodsi3>
1000c8a4:	b00b883a 	mov	r5,r22
1000c8a8:	e009883a 	mov	r4,fp
1000c8ac:	1029883a 	mov	r20,r2
1000c8b0:	9dffffcc 	andi	r23,r19,65535
1000c8b4:	000caa40 	call	1000caa4 <__udivsi3>
1000c8b8:	b809883a 	mov	r4,r23
1000c8bc:	100b883a 	mov	r5,r2
1000c8c0:	000cb600 	call	1000cb60 <__mulsi3>
1000c8c4:	a008943a 	slli	r4,r20,16
1000c8c8:	a806d43a 	srli	r3,r21,16
1000c8cc:	84a8983a 	sll	r20,r16,r18
1000c8d0:	1906b03a 	or	r3,r3,r4
1000c8d4:	1880042e 	bgeu	r3,r2,1000c8e8 <__umoddi3+0x500>
1000c8d8:	1cc7883a 	add	r3,r3,r19
1000c8dc:	1cc00236 	bltu	r3,r19,1000c8e8 <__umoddi3+0x500>
1000c8e0:	1880012e 	bgeu	r3,r2,1000c8e8 <__umoddi3+0x500>
1000c8e4:	1cc7883a 	add	r3,r3,r19
1000c8e8:	18a3c83a 	sub	r17,r3,r2
1000c8ec:	b00b883a 	mov	r5,r22
1000c8f0:	8809883a 	mov	r4,r17
1000c8f4:	000cb080 	call	1000cb08 <__umodsi3>
1000c8f8:	b00b883a 	mov	r5,r22
1000c8fc:	8809883a 	mov	r4,r17
1000c900:	1021883a 	mov	r16,r2
1000c904:	000caa40 	call	1000caa4 <__udivsi3>
1000c908:	100b883a 	mov	r5,r2
1000c90c:	b809883a 	mov	r4,r23
1000c910:	8020943a 	slli	r16,r16,16
1000c914:	000cb600 	call	1000cb60 <__mulsi3>
1000c918:	a8ffffcc 	andi	r3,r21,65535
1000c91c:	1c06b03a 	or	r3,r3,r16
1000c920:	1880042e 	bgeu	r3,r2,1000c934 <__umoddi3+0x54c>
1000c924:	1cc7883a 	add	r3,r3,r19
1000c928:	1cc00236 	bltu	r3,r19,1000c934 <__umoddi3+0x54c>
1000c92c:	1880012e 	bgeu	r3,r2,1000c934 <__umoddi3+0x54c>
1000c930:	1cc7883a 	add	r3,r3,r19
1000c934:	18a3c83a 	sub	r17,r3,r2
1000c938:	003f2906 	br	1000c5e0 <__alt_data_end+0xf800c5e0>
1000c93c:	e48fc83a 	sub	r7,fp,r18
1000c940:	1d49c83a 	sub	r4,r3,r21
1000c944:	e1f9803a 	cmpltu	fp,fp,r7
1000c948:	2739c83a 	sub	fp,r4,fp
1000c94c:	8f09c83a 	sub	r4,r17,fp
1000c950:	003fc306 	br	1000c860 <__alt_data_end+0xf800c860>
1000c954:	01000604 	movi	r4,24
1000c958:	003ef906 	br	1000c540 <__alt_data_end+0xf800c540>
1000c95c:	00800604 	movi	r2,24
1000c960:	003f1306 	br	1000c5b0 <__alt_data_end+0xf800c5b0>
1000c964:	01000604 	movi	r4,24
1000c968:	003eb606 	br	1000c444 <__alt_data_end+0xf800c444>
1000c96c:	40bf902e 	bgeu	r8,r2,1000c7b0 <__alt_data_end+0xf800c7b0>
1000c970:	b5bfff84 	addi	r22,r22,-2
1000c974:	4551883a 	add	r8,r8,r21
1000c978:	003f8e06 	br	1000c7b4 <__alt_data_end+0xf800c7b4>
1000c97c:	18bf762e 	bgeu	r3,r2,1000c758 <__alt_data_end+0xf800c758>
1000c980:	8c7fff84 	addi	r17,r17,-2
1000c984:	1d47883a 	add	r3,r3,r21
1000c988:	003f7406 	br	1000c75c <__alt_data_end+0xf800c75c>
1000c98c:	1cc7883a 	add	r3,r3,r19
1000c990:	003ecd06 	br	1000c4c8 <__alt_data_end+0xf800c4c8>
1000c994:	8005883a 	mov	r2,r16
1000c998:	003ef806 	br	1000c57c <__alt_data_end+0xf800c57c>
1000c99c:	873fe736 	bltu	r16,fp,1000c93c <__alt_data_end+0xf800c93c>
1000c9a0:	e00f883a 	mov	r7,fp
1000c9a4:	0009883a 	mov	r4,zero
1000c9a8:	003fad06 	br	1000c860 <__alt_data_end+0xf800c860>

1000c9ac <__divsi3>:
1000c9ac:	20001b16 	blt	r4,zero,1000ca1c <__divsi3+0x70>
1000c9b0:	000f883a 	mov	r7,zero
1000c9b4:	28001616 	blt	r5,zero,1000ca10 <__divsi3+0x64>
1000c9b8:	200d883a 	mov	r6,r4
1000c9bc:	29001a2e 	bgeu	r5,r4,1000ca28 <__divsi3+0x7c>
1000c9c0:	00800804 	movi	r2,32
1000c9c4:	00c00044 	movi	r3,1
1000c9c8:	00000106 	br	1000c9d0 <__divsi3+0x24>
1000c9cc:	10000d26 	beq	r2,zero,1000ca04 <__divsi3+0x58>
1000c9d0:	294b883a 	add	r5,r5,r5
1000c9d4:	10bfffc4 	addi	r2,r2,-1
1000c9d8:	18c7883a 	add	r3,r3,r3
1000c9dc:	293ffb36 	bltu	r5,r4,1000c9cc <__alt_data_end+0xf800c9cc>
1000c9e0:	0005883a 	mov	r2,zero
1000c9e4:	18000726 	beq	r3,zero,1000ca04 <__divsi3+0x58>
1000c9e8:	0005883a 	mov	r2,zero
1000c9ec:	31400236 	bltu	r6,r5,1000c9f8 <__divsi3+0x4c>
1000c9f0:	314dc83a 	sub	r6,r6,r5
1000c9f4:	10c4b03a 	or	r2,r2,r3
1000c9f8:	1806d07a 	srli	r3,r3,1
1000c9fc:	280ad07a 	srli	r5,r5,1
1000ca00:	183ffa1e 	bne	r3,zero,1000c9ec <__alt_data_end+0xf800c9ec>
1000ca04:	38000126 	beq	r7,zero,1000ca0c <__divsi3+0x60>
1000ca08:	0085c83a 	sub	r2,zero,r2
1000ca0c:	f800283a 	ret
1000ca10:	014bc83a 	sub	r5,zero,r5
1000ca14:	39c0005c 	xori	r7,r7,1
1000ca18:	003fe706 	br	1000c9b8 <__alt_data_end+0xf800c9b8>
1000ca1c:	0109c83a 	sub	r4,zero,r4
1000ca20:	01c00044 	movi	r7,1
1000ca24:	003fe306 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000ca28:	00c00044 	movi	r3,1
1000ca2c:	003fee06 	br	1000c9e8 <__alt_data_end+0xf800c9e8>

1000ca30 <__modsi3>:
1000ca30:	20001716 	blt	r4,zero,1000ca90 <__modsi3+0x60>
1000ca34:	000f883a 	mov	r7,zero
1000ca38:	2005883a 	mov	r2,r4
1000ca3c:	28001216 	blt	r5,zero,1000ca88 <__modsi3+0x58>
1000ca40:	2900162e 	bgeu	r5,r4,1000ca9c <__modsi3+0x6c>
1000ca44:	01800804 	movi	r6,32
1000ca48:	00c00044 	movi	r3,1
1000ca4c:	00000106 	br	1000ca54 <__modsi3+0x24>
1000ca50:	30000a26 	beq	r6,zero,1000ca7c <__modsi3+0x4c>
1000ca54:	294b883a 	add	r5,r5,r5
1000ca58:	31bfffc4 	addi	r6,r6,-1
1000ca5c:	18c7883a 	add	r3,r3,r3
1000ca60:	293ffb36 	bltu	r5,r4,1000ca50 <__alt_data_end+0xf800ca50>
1000ca64:	18000526 	beq	r3,zero,1000ca7c <__modsi3+0x4c>
1000ca68:	1806d07a 	srli	r3,r3,1
1000ca6c:	11400136 	bltu	r2,r5,1000ca74 <__modsi3+0x44>
1000ca70:	1145c83a 	sub	r2,r2,r5
1000ca74:	280ad07a 	srli	r5,r5,1
1000ca78:	183ffb1e 	bne	r3,zero,1000ca68 <__alt_data_end+0xf800ca68>
1000ca7c:	38000126 	beq	r7,zero,1000ca84 <__modsi3+0x54>
1000ca80:	0085c83a 	sub	r2,zero,r2
1000ca84:	f800283a 	ret
1000ca88:	014bc83a 	sub	r5,zero,r5
1000ca8c:	003fec06 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000ca90:	0109c83a 	sub	r4,zero,r4
1000ca94:	01c00044 	movi	r7,1
1000ca98:	003fe706 	br	1000ca38 <__alt_data_end+0xf800ca38>
1000ca9c:	00c00044 	movi	r3,1
1000caa0:	003ff106 	br	1000ca68 <__alt_data_end+0xf800ca68>

1000caa4 <__udivsi3>:
1000caa4:	200d883a 	mov	r6,r4
1000caa8:	2900152e 	bgeu	r5,r4,1000cb00 <__udivsi3+0x5c>
1000caac:	28001416 	blt	r5,zero,1000cb00 <__udivsi3+0x5c>
1000cab0:	00800804 	movi	r2,32
1000cab4:	00c00044 	movi	r3,1
1000cab8:	00000206 	br	1000cac4 <__udivsi3+0x20>
1000cabc:	10000e26 	beq	r2,zero,1000caf8 <__udivsi3+0x54>
1000cac0:	28000516 	blt	r5,zero,1000cad8 <__udivsi3+0x34>
1000cac4:	294b883a 	add	r5,r5,r5
1000cac8:	10bfffc4 	addi	r2,r2,-1
1000cacc:	18c7883a 	add	r3,r3,r3
1000cad0:	293ffa36 	bltu	r5,r4,1000cabc <__alt_data_end+0xf800cabc>
1000cad4:	18000826 	beq	r3,zero,1000caf8 <__udivsi3+0x54>
1000cad8:	0005883a 	mov	r2,zero
1000cadc:	31400236 	bltu	r6,r5,1000cae8 <__udivsi3+0x44>
1000cae0:	314dc83a 	sub	r6,r6,r5
1000cae4:	10c4b03a 	or	r2,r2,r3
1000cae8:	1806d07a 	srli	r3,r3,1
1000caec:	280ad07a 	srli	r5,r5,1
1000caf0:	183ffa1e 	bne	r3,zero,1000cadc <__alt_data_end+0xf800cadc>
1000caf4:	f800283a 	ret
1000caf8:	0005883a 	mov	r2,zero
1000cafc:	f800283a 	ret
1000cb00:	00c00044 	movi	r3,1
1000cb04:	003ff406 	br	1000cad8 <__alt_data_end+0xf800cad8>

1000cb08 <__umodsi3>:
1000cb08:	2005883a 	mov	r2,r4
1000cb0c:	2900122e 	bgeu	r5,r4,1000cb58 <__umodsi3+0x50>
1000cb10:	28001116 	blt	r5,zero,1000cb58 <__umodsi3+0x50>
1000cb14:	01800804 	movi	r6,32
1000cb18:	00c00044 	movi	r3,1
1000cb1c:	00000206 	br	1000cb28 <__umodsi3+0x20>
1000cb20:	30000c26 	beq	r6,zero,1000cb54 <__umodsi3+0x4c>
1000cb24:	28000516 	blt	r5,zero,1000cb3c <__umodsi3+0x34>
1000cb28:	294b883a 	add	r5,r5,r5
1000cb2c:	31bfffc4 	addi	r6,r6,-1
1000cb30:	18c7883a 	add	r3,r3,r3
1000cb34:	293ffa36 	bltu	r5,r4,1000cb20 <__alt_data_end+0xf800cb20>
1000cb38:	18000626 	beq	r3,zero,1000cb54 <__umodsi3+0x4c>
1000cb3c:	1806d07a 	srli	r3,r3,1
1000cb40:	11400136 	bltu	r2,r5,1000cb48 <__umodsi3+0x40>
1000cb44:	1145c83a 	sub	r2,r2,r5
1000cb48:	280ad07a 	srli	r5,r5,1
1000cb4c:	183ffb1e 	bne	r3,zero,1000cb3c <__alt_data_end+0xf800cb3c>
1000cb50:	f800283a 	ret
1000cb54:	f800283a 	ret
1000cb58:	00c00044 	movi	r3,1
1000cb5c:	003ff706 	br	1000cb3c <__alt_data_end+0xf800cb3c>

1000cb60 <__mulsi3>:
1000cb60:	0005883a 	mov	r2,zero
1000cb64:	20000726 	beq	r4,zero,1000cb84 <__mulsi3+0x24>
1000cb68:	20c0004c 	andi	r3,r4,1
1000cb6c:	2008d07a 	srli	r4,r4,1
1000cb70:	18000126 	beq	r3,zero,1000cb78 <__mulsi3+0x18>
1000cb74:	1145883a 	add	r2,r2,r5
1000cb78:	294b883a 	add	r5,r5,r5
1000cb7c:	203ffa1e 	bne	r4,zero,1000cb68 <__alt_data_end+0xf800cb68>
1000cb80:	f800283a 	ret
1000cb84:	f800283a 	ret

1000cb88 <__adddf3>:
1000cb88:	02c00434 	movhi	r11,16
1000cb8c:	5affffc4 	addi	r11,r11,-1
1000cb90:	2806d7fa 	srli	r3,r5,31
1000cb94:	2ad4703a 	and	r10,r5,r11
1000cb98:	3ad2703a 	and	r9,r7,r11
1000cb9c:	3804d53a 	srli	r2,r7,20
1000cba0:	3018d77a 	srli	r12,r6,29
1000cba4:	280ad53a 	srli	r5,r5,20
1000cba8:	501490fa 	slli	r10,r10,3
1000cbac:	2010d77a 	srli	r8,r4,29
1000cbb0:	481290fa 	slli	r9,r9,3
1000cbb4:	380ed7fa 	srli	r7,r7,31
1000cbb8:	defffb04 	addi	sp,sp,-20
1000cbbc:	dc800215 	stw	r18,8(sp)
1000cbc0:	dc400115 	stw	r17,4(sp)
1000cbc4:	dc000015 	stw	r16,0(sp)
1000cbc8:	dfc00415 	stw	ra,16(sp)
1000cbcc:	dcc00315 	stw	r19,12(sp)
1000cbd0:	1c803fcc 	andi	r18,r3,255
1000cbd4:	2c01ffcc 	andi	r16,r5,2047
1000cbd8:	5210b03a 	or	r8,r10,r8
1000cbdc:	202290fa 	slli	r17,r4,3
1000cbe0:	1081ffcc 	andi	r2,r2,2047
1000cbe4:	4b12b03a 	or	r9,r9,r12
1000cbe8:	300c90fa 	slli	r6,r6,3
1000cbec:	91c07526 	beq	r18,r7,1000cdc4 <__adddf3+0x23c>
1000cbf0:	8087c83a 	sub	r3,r16,r2
1000cbf4:	00c0ab0e 	bge	zero,r3,1000cea4 <__adddf3+0x31c>
1000cbf8:	10002a1e 	bne	r2,zero,1000cca4 <__adddf3+0x11c>
1000cbfc:	4984b03a 	or	r2,r9,r6
1000cc00:	1000961e 	bne	r2,zero,1000ce5c <__adddf3+0x2d4>
1000cc04:	888001cc 	andi	r2,r17,7
1000cc08:	10000726 	beq	r2,zero,1000cc28 <__adddf3+0xa0>
1000cc0c:	888003cc 	andi	r2,r17,15
1000cc10:	00c00104 	movi	r3,4
1000cc14:	10c00426 	beq	r2,r3,1000cc28 <__adddf3+0xa0>
1000cc18:	88c7883a 	add	r3,r17,r3
1000cc1c:	1c63803a 	cmpltu	r17,r3,r17
1000cc20:	4451883a 	add	r8,r8,r17
1000cc24:	1823883a 	mov	r17,r3
1000cc28:	4080202c 	andhi	r2,r8,128
1000cc2c:	10005926 	beq	r2,zero,1000cd94 <__adddf3+0x20c>
1000cc30:	84000044 	addi	r16,r16,1
1000cc34:	0081ffc4 	movi	r2,2047
1000cc38:	8080ba26 	beq	r16,r2,1000cf24 <__adddf3+0x39c>
1000cc3c:	00bfe034 	movhi	r2,65408
1000cc40:	10bfffc4 	addi	r2,r2,-1
1000cc44:	4090703a 	and	r8,r8,r2
1000cc48:	4004977a 	slli	r2,r8,29
1000cc4c:	4010927a 	slli	r8,r8,9
1000cc50:	8822d0fa 	srli	r17,r17,3
1000cc54:	8401ffcc 	andi	r16,r16,2047
1000cc58:	4010d33a 	srli	r8,r8,12
1000cc5c:	9007883a 	mov	r3,r18
1000cc60:	1444b03a 	or	r2,r2,r17
1000cc64:	8401ffcc 	andi	r16,r16,2047
1000cc68:	8020953a 	slli	r16,r16,20
1000cc6c:	18c03fcc 	andi	r3,r3,255
1000cc70:	01000434 	movhi	r4,16
1000cc74:	213fffc4 	addi	r4,r4,-1
1000cc78:	180697fa 	slli	r3,r3,31
1000cc7c:	4110703a 	and	r8,r8,r4
1000cc80:	4410b03a 	or	r8,r8,r16
1000cc84:	40c6b03a 	or	r3,r8,r3
1000cc88:	dfc00417 	ldw	ra,16(sp)
1000cc8c:	dcc00317 	ldw	r19,12(sp)
1000cc90:	dc800217 	ldw	r18,8(sp)
1000cc94:	dc400117 	ldw	r17,4(sp)
1000cc98:	dc000017 	ldw	r16,0(sp)
1000cc9c:	dec00504 	addi	sp,sp,20
1000cca0:	f800283a 	ret
1000cca4:	0081ffc4 	movi	r2,2047
1000cca8:	80bfd626 	beq	r16,r2,1000cc04 <__alt_data_end+0xf800cc04>
1000ccac:	4a402034 	orhi	r9,r9,128
1000ccb0:	00800e04 	movi	r2,56
1000ccb4:	10c09f16 	blt	r2,r3,1000cf34 <__adddf3+0x3ac>
1000ccb8:	008007c4 	movi	r2,31
1000ccbc:	10c0c216 	blt	r2,r3,1000cfc8 <__adddf3+0x440>
1000ccc0:	00800804 	movi	r2,32
1000ccc4:	10c5c83a 	sub	r2,r2,r3
1000ccc8:	488a983a 	sll	r5,r9,r2
1000cccc:	30c8d83a 	srl	r4,r6,r3
1000ccd0:	3084983a 	sll	r2,r6,r2
1000ccd4:	48c6d83a 	srl	r3,r9,r3
1000ccd8:	290cb03a 	or	r6,r5,r4
1000ccdc:	1004c03a 	cmpne	r2,r2,zero
1000cce0:	308cb03a 	or	r6,r6,r2
1000cce4:	898dc83a 	sub	r6,r17,r6
1000cce8:	89a3803a 	cmpltu	r17,r17,r6
1000ccec:	40d1c83a 	sub	r8,r8,r3
1000ccf0:	4451c83a 	sub	r8,r8,r17
1000ccf4:	3023883a 	mov	r17,r6
1000ccf8:	4080202c 	andhi	r2,r8,128
1000ccfc:	10002326 	beq	r2,zero,1000cd8c <__adddf3+0x204>
1000cd00:	04c02034 	movhi	r19,128
1000cd04:	9cffffc4 	addi	r19,r19,-1
1000cd08:	44e6703a 	and	r19,r8,r19
1000cd0c:	98007626 	beq	r19,zero,1000cee8 <__adddf3+0x360>
1000cd10:	9809883a 	mov	r4,r19
1000cd14:	000f3c80 	call	1000f3c8 <__clzsi2>
1000cd18:	10fffe04 	addi	r3,r2,-8
1000cd1c:	010007c4 	movi	r4,31
1000cd20:	20c07716 	blt	r4,r3,1000cf00 <__adddf3+0x378>
1000cd24:	00800804 	movi	r2,32
1000cd28:	10c5c83a 	sub	r2,r2,r3
1000cd2c:	8884d83a 	srl	r2,r17,r2
1000cd30:	98d0983a 	sll	r8,r19,r3
1000cd34:	88e2983a 	sll	r17,r17,r3
1000cd38:	1204b03a 	or	r2,r2,r8
1000cd3c:	1c007416 	blt	r3,r16,1000cf10 <__adddf3+0x388>
1000cd40:	1c21c83a 	sub	r16,r3,r16
1000cd44:	82000044 	addi	r8,r16,1
1000cd48:	00c007c4 	movi	r3,31
1000cd4c:	1a009116 	blt	r3,r8,1000cf94 <__adddf3+0x40c>
1000cd50:	00c00804 	movi	r3,32
1000cd54:	1a07c83a 	sub	r3,r3,r8
1000cd58:	8a08d83a 	srl	r4,r17,r8
1000cd5c:	88e2983a 	sll	r17,r17,r3
1000cd60:	10c6983a 	sll	r3,r2,r3
1000cd64:	1210d83a 	srl	r8,r2,r8
1000cd68:	8804c03a 	cmpne	r2,r17,zero
1000cd6c:	1906b03a 	or	r3,r3,r4
1000cd70:	18a2b03a 	or	r17,r3,r2
1000cd74:	0021883a 	mov	r16,zero
1000cd78:	003fa206 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000cd7c:	1890b03a 	or	r8,r3,r2
1000cd80:	40017d26 	beq	r8,zero,1000d378 <__adddf3+0x7f0>
1000cd84:	1011883a 	mov	r8,r2
1000cd88:	1823883a 	mov	r17,r3
1000cd8c:	888001cc 	andi	r2,r17,7
1000cd90:	103f9e1e 	bne	r2,zero,1000cc0c <__alt_data_end+0xf800cc0c>
1000cd94:	4004977a 	slli	r2,r8,29
1000cd98:	8822d0fa 	srli	r17,r17,3
1000cd9c:	4010d0fa 	srli	r8,r8,3
1000cda0:	9007883a 	mov	r3,r18
1000cda4:	1444b03a 	or	r2,r2,r17
1000cda8:	0101ffc4 	movi	r4,2047
1000cdac:	81002426 	beq	r16,r4,1000ce40 <__adddf3+0x2b8>
1000cdb0:	8120703a 	and	r16,r16,r4
1000cdb4:	01000434 	movhi	r4,16
1000cdb8:	213fffc4 	addi	r4,r4,-1
1000cdbc:	4110703a 	and	r8,r8,r4
1000cdc0:	003fa806 	br	1000cc64 <__alt_data_end+0xf800cc64>
1000cdc4:	8089c83a 	sub	r4,r16,r2
1000cdc8:	01005e0e 	bge	zero,r4,1000cf44 <__adddf3+0x3bc>
1000cdcc:	10002b26 	beq	r2,zero,1000ce7c <__adddf3+0x2f4>
1000cdd0:	0081ffc4 	movi	r2,2047
1000cdd4:	80bf8b26 	beq	r16,r2,1000cc04 <__alt_data_end+0xf800cc04>
1000cdd8:	4a402034 	orhi	r9,r9,128
1000cddc:	00800e04 	movi	r2,56
1000cde0:	1100a40e 	bge	r2,r4,1000d074 <__adddf3+0x4ec>
1000cde4:	498cb03a 	or	r6,r9,r6
1000cde8:	300ac03a 	cmpne	r5,r6,zero
1000cdec:	0013883a 	mov	r9,zero
1000cdf0:	2c4b883a 	add	r5,r5,r17
1000cdf4:	2c63803a 	cmpltu	r17,r5,r17
1000cdf8:	4a11883a 	add	r8,r9,r8
1000cdfc:	8a11883a 	add	r8,r17,r8
1000ce00:	2823883a 	mov	r17,r5
1000ce04:	4080202c 	andhi	r2,r8,128
1000ce08:	103fe026 	beq	r2,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000ce0c:	84000044 	addi	r16,r16,1
1000ce10:	0081ffc4 	movi	r2,2047
1000ce14:	8080d226 	beq	r16,r2,1000d160 <__adddf3+0x5d8>
1000ce18:	00bfe034 	movhi	r2,65408
1000ce1c:	10bfffc4 	addi	r2,r2,-1
1000ce20:	4090703a 	and	r8,r8,r2
1000ce24:	880ad07a 	srli	r5,r17,1
1000ce28:	400897fa 	slli	r4,r8,31
1000ce2c:	88c0004c 	andi	r3,r17,1
1000ce30:	28e2b03a 	or	r17,r5,r3
1000ce34:	4010d07a 	srli	r8,r8,1
1000ce38:	2462b03a 	or	r17,r4,r17
1000ce3c:	003f7106 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000ce40:	4088b03a 	or	r4,r8,r2
1000ce44:	20014526 	beq	r4,zero,1000d35c <__adddf3+0x7d4>
1000ce48:	01000434 	movhi	r4,16
1000ce4c:	42000234 	orhi	r8,r8,8
1000ce50:	213fffc4 	addi	r4,r4,-1
1000ce54:	4110703a 	and	r8,r8,r4
1000ce58:	003f8206 	br	1000cc64 <__alt_data_end+0xf800cc64>
1000ce5c:	18ffffc4 	addi	r3,r3,-1
1000ce60:	1800491e 	bne	r3,zero,1000cf88 <__adddf3+0x400>
1000ce64:	898bc83a 	sub	r5,r17,r6
1000ce68:	8963803a 	cmpltu	r17,r17,r5
1000ce6c:	4251c83a 	sub	r8,r8,r9
1000ce70:	4451c83a 	sub	r8,r8,r17
1000ce74:	2823883a 	mov	r17,r5
1000ce78:	003f9f06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000ce7c:	4984b03a 	or	r2,r9,r6
1000ce80:	103f6026 	beq	r2,zero,1000cc04 <__alt_data_end+0xf800cc04>
1000ce84:	213fffc4 	addi	r4,r4,-1
1000ce88:	2000931e 	bne	r4,zero,1000d0d8 <__adddf3+0x550>
1000ce8c:	898d883a 	add	r6,r17,r6
1000ce90:	3463803a 	cmpltu	r17,r6,r17
1000ce94:	4251883a 	add	r8,r8,r9
1000ce98:	8a11883a 	add	r8,r17,r8
1000ce9c:	3023883a 	mov	r17,r6
1000cea0:	003fd806 	br	1000ce04 <__alt_data_end+0xf800ce04>
1000cea4:	1800541e 	bne	r3,zero,1000cff8 <__adddf3+0x470>
1000cea8:	80800044 	addi	r2,r16,1
1000ceac:	1081ffcc 	andi	r2,r2,2047
1000ceb0:	00c00044 	movi	r3,1
1000ceb4:	1880a00e 	bge	r3,r2,1000d138 <__adddf3+0x5b0>
1000ceb8:	8989c83a 	sub	r4,r17,r6
1000cebc:	8905803a 	cmpltu	r2,r17,r4
1000cec0:	4267c83a 	sub	r19,r8,r9
1000cec4:	98a7c83a 	sub	r19,r19,r2
1000cec8:	9880202c 	andhi	r2,r19,128
1000cecc:	10006326 	beq	r2,zero,1000d05c <__adddf3+0x4d4>
1000ced0:	3463c83a 	sub	r17,r6,r17
1000ced4:	4a07c83a 	sub	r3,r9,r8
1000ced8:	344d803a 	cmpltu	r6,r6,r17
1000cedc:	19a7c83a 	sub	r19,r3,r6
1000cee0:	3825883a 	mov	r18,r7
1000cee4:	983f8a1e 	bne	r19,zero,1000cd10 <__alt_data_end+0xf800cd10>
1000cee8:	8809883a 	mov	r4,r17
1000ceec:	000f3c80 	call	1000f3c8 <__clzsi2>
1000cef0:	10800804 	addi	r2,r2,32
1000cef4:	10fffe04 	addi	r3,r2,-8
1000cef8:	010007c4 	movi	r4,31
1000cefc:	20ff890e 	bge	r4,r3,1000cd24 <__alt_data_end+0xf800cd24>
1000cf00:	10bff604 	addi	r2,r2,-40
1000cf04:	8884983a 	sll	r2,r17,r2
1000cf08:	0023883a 	mov	r17,zero
1000cf0c:	1c3f8c0e 	bge	r3,r16,1000cd40 <__alt_data_end+0xf800cd40>
1000cf10:	023fe034 	movhi	r8,65408
1000cf14:	423fffc4 	addi	r8,r8,-1
1000cf18:	80e1c83a 	sub	r16,r16,r3
1000cf1c:	1210703a 	and	r8,r2,r8
1000cf20:	003f3806 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000cf24:	9007883a 	mov	r3,r18
1000cf28:	0011883a 	mov	r8,zero
1000cf2c:	0005883a 	mov	r2,zero
1000cf30:	003f4c06 	br	1000cc64 <__alt_data_end+0xf800cc64>
1000cf34:	498cb03a 	or	r6,r9,r6
1000cf38:	300cc03a 	cmpne	r6,r6,zero
1000cf3c:	0007883a 	mov	r3,zero
1000cf40:	003f6806 	br	1000cce4 <__alt_data_end+0xf800cce4>
1000cf44:	20009c1e 	bne	r4,zero,1000d1b8 <__adddf3+0x630>
1000cf48:	80800044 	addi	r2,r16,1
1000cf4c:	1141ffcc 	andi	r5,r2,2047
1000cf50:	01000044 	movi	r4,1
1000cf54:	2140670e 	bge	r4,r5,1000d0f4 <__adddf3+0x56c>
1000cf58:	0101ffc4 	movi	r4,2047
1000cf5c:	11007f26 	beq	r2,r4,1000d15c <__adddf3+0x5d4>
1000cf60:	898d883a 	add	r6,r17,r6
1000cf64:	4247883a 	add	r3,r8,r9
1000cf68:	3451803a 	cmpltu	r8,r6,r17
1000cf6c:	40d1883a 	add	r8,r8,r3
1000cf70:	402297fa 	slli	r17,r8,31
1000cf74:	300cd07a 	srli	r6,r6,1
1000cf78:	4010d07a 	srli	r8,r8,1
1000cf7c:	1021883a 	mov	r16,r2
1000cf80:	89a2b03a 	or	r17,r17,r6
1000cf84:	003f1f06 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000cf88:	0081ffc4 	movi	r2,2047
1000cf8c:	80bf481e 	bne	r16,r2,1000ccb0 <__alt_data_end+0xf800ccb0>
1000cf90:	003f1c06 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000cf94:	843ff844 	addi	r16,r16,-31
1000cf98:	01000804 	movi	r4,32
1000cf9c:	1406d83a 	srl	r3,r2,r16
1000cfa0:	41005026 	beq	r8,r4,1000d0e4 <__adddf3+0x55c>
1000cfa4:	01001004 	movi	r4,64
1000cfa8:	2211c83a 	sub	r8,r4,r8
1000cfac:	1204983a 	sll	r2,r2,r8
1000cfb0:	88a2b03a 	or	r17,r17,r2
1000cfb4:	8822c03a 	cmpne	r17,r17,zero
1000cfb8:	1c62b03a 	or	r17,r3,r17
1000cfbc:	0011883a 	mov	r8,zero
1000cfc0:	0021883a 	mov	r16,zero
1000cfc4:	003f7106 	br	1000cd8c <__alt_data_end+0xf800cd8c>
1000cfc8:	193ff804 	addi	r4,r3,-32
1000cfcc:	00800804 	movi	r2,32
1000cfd0:	4908d83a 	srl	r4,r9,r4
1000cfd4:	18804526 	beq	r3,r2,1000d0ec <__adddf3+0x564>
1000cfd8:	00801004 	movi	r2,64
1000cfdc:	10c5c83a 	sub	r2,r2,r3
1000cfe0:	4886983a 	sll	r3,r9,r2
1000cfe4:	198cb03a 	or	r6,r3,r6
1000cfe8:	300cc03a 	cmpne	r6,r6,zero
1000cfec:	218cb03a 	or	r6,r4,r6
1000cff0:	0007883a 	mov	r3,zero
1000cff4:	003f3b06 	br	1000cce4 <__alt_data_end+0xf800cce4>
1000cff8:	80002a26 	beq	r16,zero,1000d0a4 <__adddf3+0x51c>
1000cffc:	0101ffc4 	movi	r4,2047
1000d000:	11006826 	beq	r2,r4,1000d1a4 <__adddf3+0x61c>
1000d004:	00c7c83a 	sub	r3,zero,r3
1000d008:	42002034 	orhi	r8,r8,128
1000d00c:	01000e04 	movi	r4,56
1000d010:	20c07c16 	blt	r4,r3,1000d204 <__adddf3+0x67c>
1000d014:	010007c4 	movi	r4,31
1000d018:	20c0da16 	blt	r4,r3,1000d384 <__adddf3+0x7fc>
1000d01c:	01000804 	movi	r4,32
1000d020:	20c9c83a 	sub	r4,r4,r3
1000d024:	4114983a 	sll	r10,r8,r4
1000d028:	88cad83a 	srl	r5,r17,r3
1000d02c:	8908983a 	sll	r4,r17,r4
1000d030:	40c6d83a 	srl	r3,r8,r3
1000d034:	5162b03a 	or	r17,r10,r5
1000d038:	2008c03a 	cmpne	r4,r4,zero
1000d03c:	8922b03a 	or	r17,r17,r4
1000d040:	3463c83a 	sub	r17,r6,r17
1000d044:	48c7c83a 	sub	r3,r9,r3
1000d048:	344d803a 	cmpltu	r6,r6,r17
1000d04c:	1991c83a 	sub	r8,r3,r6
1000d050:	1021883a 	mov	r16,r2
1000d054:	3825883a 	mov	r18,r7
1000d058:	003f2706 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d05c:	24d0b03a 	or	r8,r4,r19
1000d060:	40001b1e 	bne	r8,zero,1000d0d0 <__adddf3+0x548>
1000d064:	0005883a 	mov	r2,zero
1000d068:	0007883a 	mov	r3,zero
1000d06c:	0021883a 	mov	r16,zero
1000d070:	003f4d06 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d074:	008007c4 	movi	r2,31
1000d078:	11003c16 	blt	r2,r4,1000d16c <__adddf3+0x5e4>
1000d07c:	00800804 	movi	r2,32
1000d080:	1105c83a 	sub	r2,r2,r4
1000d084:	488e983a 	sll	r7,r9,r2
1000d088:	310ad83a 	srl	r5,r6,r4
1000d08c:	3084983a 	sll	r2,r6,r2
1000d090:	4912d83a 	srl	r9,r9,r4
1000d094:	394ab03a 	or	r5,r7,r5
1000d098:	1004c03a 	cmpne	r2,r2,zero
1000d09c:	288ab03a 	or	r5,r5,r2
1000d0a0:	003f5306 	br	1000cdf0 <__alt_data_end+0xf800cdf0>
1000d0a4:	4448b03a 	or	r4,r8,r17
1000d0a8:	20003e26 	beq	r4,zero,1000d1a4 <__adddf3+0x61c>
1000d0ac:	00c6303a 	nor	r3,zero,r3
1000d0b0:	18003a1e 	bne	r3,zero,1000d19c <__adddf3+0x614>
1000d0b4:	3463c83a 	sub	r17,r6,r17
1000d0b8:	4a07c83a 	sub	r3,r9,r8
1000d0bc:	344d803a 	cmpltu	r6,r6,r17
1000d0c0:	1991c83a 	sub	r8,r3,r6
1000d0c4:	1021883a 	mov	r16,r2
1000d0c8:	3825883a 	mov	r18,r7
1000d0cc:	003f0a06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000d0d0:	2023883a 	mov	r17,r4
1000d0d4:	003f0d06 	br	1000cd0c <__alt_data_end+0xf800cd0c>
1000d0d8:	0081ffc4 	movi	r2,2047
1000d0dc:	80bf3f1e 	bne	r16,r2,1000cddc <__alt_data_end+0xf800cddc>
1000d0e0:	003ec806 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d0e4:	0005883a 	mov	r2,zero
1000d0e8:	003fb106 	br	1000cfb0 <__alt_data_end+0xf800cfb0>
1000d0ec:	0007883a 	mov	r3,zero
1000d0f0:	003fbc06 	br	1000cfe4 <__alt_data_end+0xf800cfe4>
1000d0f4:	4444b03a 	or	r2,r8,r17
1000d0f8:	8000871e 	bne	r16,zero,1000d318 <__adddf3+0x790>
1000d0fc:	1000ba26 	beq	r2,zero,1000d3e8 <__adddf3+0x860>
1000d100:	4984b03a 	or	r2,r9,r6
1000d104:	103ebf26 	beq	r2,zero,1000cc04 <__alt_data_end+0xf800cc04>
1000d108:	8985883a 	add	r2,r17,r6
1000d10c:	4247883a 	add	r3,r8,r9
1000d110:	1451803a 	cmpltu	r8,r2,r17
1000d114:	40d1883a 	add	r8,r8,r3
1000d118:	40c0202c 	andhi	r3,r8,128
1000d11c:	1023883a 	mov	r17,r2
1000d120:	183f1a26 	beq	r3,zero,1000cd8c <__alt_data_end+0xf800cd8c>
1000d124:	00bfe034 	movhi	r2,65408
1000d128:	10bfffc4 	addi	r2,r2,-1
1000d12c:	2021883a 	mov	r16,r4
1000d130:	4090703a 	and	r8,r8,r2
1000d134:	003eb306 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d138:	4444b03a 	or	r2,r8,r17
1000d13c:	8000291e 	bne	r16,zero,1000d1e4 <__adddf3+0x65c>
1000d140:	10004b1e 	bne	r2,zero,1000d270 <__adddf3+0x6e8>
1000d144:	4990b03a 	or	r8,r9,r6
1000d148:	40008b26 	beq	r8,zero,1000d378 <__adddf3+0x7f0>
1000d14c:	4811883a 	mov	r8,r9
1000d150:	3023883a 	mov	r17,r6
1000d154:	3825883a 	mov	r18,r7
1000d158:	003eaa06 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d15c:	1021883a 	mov	r16,r2
1000d160:	0011883a 	mov	r8,zero
1000d164:	0005883a 	mov	r2,zero
1000d168:	003f0f06 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d16c:	217ff804 	addi	r5,r4,-32
1000d170:	00800804 	movi	r2,32
1000d174:	494ad83a 	srl	r5,r9,r5
1000d178:	20807d26 	beq	r4,r2,1000d370 <__adddf3+0x7e8>
1000d17c:	00801004 	movi	r2,64
1000d180:	1109c83a 	sub	r4,r2,r4
1000d184:	4912983a 	sll	r9,r9,r4
1000d188:	498cb03a 	or	r6,r9,r6
1000d18c:	300cc03a 	cmpne	r6,r6,zero
1000d190:	298ab03a 	or	r5,r5,r6
1000d194:	0013883a 	mov	r9,zero
1000d198:	003f1506 	br	1000cdf0 <__alt_data_end+0xf800cdf0>
1000d19c:	0101ffc4 	movi	r4,2047
1000d1a0:	113f9a1e 	bne	r2,r4,1000d00c <__alt_data_end+0xf800d00c>
1000d1a4:	4811883a 	mov	r8,r9
1000d1a8:	3023883a 	mov	r17,r6
1000d1ac:	1021883a 	mov	r16,r2
1000d1b0:	3825883a 	mov	r18,r7
1000d1b4:	003e9306 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d1b8:	8000161e 	bne	r16,zero,1000d214 <__adddf3+0x68c>
1000d1bc:	444ab03a 	or	r5,r8,r17
1000d1c0:	28005126 	beq	r5,zero,1000d308 <__adddf3+0x780>
1000d1c4:	0108303a 	nor	r4,zero,r4
1000d1c8:	20004d1e 	bne	r4,zero,1000d300 <__adddf3+0x778>
1000d1cc:	89a3883a 	add	r17,r17,r6
1000d1d0:	4253883a 	add	r9,r8,r9
1000d1d4:	898d803a 	cmpltu	r6,r17,r6
1000d1d8:	3251883a 	add	r8,r6,r9
1000d1dc:	1021883a 	mov	r16,r2
1000d1e0:	003f0806 	br	1000ce04 <__alt_data_end+0xf800ce04>
1000d1e4:	1000301e 	bne	r2,zero,1000d2a8 <__adddf3+0x720>
1000d1e8:	4984b03a 	or	r2,r9,r6
1000d1ec:	10007126 	beq	r2,zero,1000d3b4 <__adddf3+0x82c>
1000d1f0:	4811883a 	mov	r8,r9
1000d1f4:	3023883a 	mov	r17,r6
1000d1f8:	3825883a 	mov	r18,r7
1000d1fc:	0401ffc4 	movi	r16,2047
1000d200:	003e8006 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d204:	4462b03a 	or	r17,r8,r17
1000d208:	8822c03a 	cmpne	r17,r17,zero
1000d20c:	0007883a 	mov	r3,zero
1000d210:	003f8b06 	br	1000d040 <__alt_data_end+0xf800d040>
1000d214:	0141ffc4 	movi	r5,2047
1000d218:	11403b26 	beq	r2,r5,1000d308 <__adddf3+0x780>
1000d21c:	0109c83a 	sub	r4,zero,r4
1000d220:	42002034 	orhi	r8,r8,128
1000d224:	01400e04 	movi	r5,56
1000d228:	29006716 	blt	r5,r4,1000d3c8 <__adddf3+0x840>
1000d22c:	014007c4 	movi	r5,31
1000d230:	29007016 	blt	r5,r4,1000d3f4 <__adddf3+0x86c>
1000d234:	01400804 	movi	r5,32
1000d238:	290bc83a 	sub	r5,r5,r4
1000d23c:	4154983a 	sll	r10,r8,r5
1000d240:	890ed83a 	srl	r7,r17,r4
1000d244:	894a983a 	sll	r5,r17,r5
1000d248:	4108d83a 	srl	r4,r8,r4
1000d24c:	51e2b03a 	or	r17,r10,r7
1000d250:	280ac03a 	cmpne	r5,r5,zero
1000d254:	8962b03a 	or	r17,r17,r5
1000d258:	89a3883a 	add	r17,r17,r6
1000d25c:	2253883a 	add	r9,r4,r9
1000d260:	898d803a 	cmpltu	r6,r17,r6
1000d264:	3251883a 	add	r8,r6,r9
1000d268:	1021883a 	mov	r16,r2
1000d26c:	003ee506 	br	1000ce04 <__alt_data_end+0xf800ce04>
1000d270:	4984b03a 	or	r2,r9,r6
1000d274:	103e6326 	beq	r2,zero,1000cc04 <__alt_data_end+0xf800cc04>
1000d278:	8987c83a 	sub	r3,r17,r6
1000d27c:	88c9803a 	cmpltu	r4,r17,r3
1000d280:	4245c83a 	sub	r2,r8,r9
1000d284:	1105c83a 	sub	r2,r2,r4
1000d288:	1100202c 	andhi	r4,r2,128
1000d28c:	203ebb26 	beq	r4,zero,1000cd7c <__alt_data_end+0xf800cd7c>
1000d290:	3463c83a 	sub	r17,r6,r17
1000d294:	4a07c83a 	sub	r3,r9,r8
1000d298:	344d803a 	cmpltu	r6,r6,r17
1000d29c:	1991c83a 	sub	r8,r3,r6
1000d2a0:	3825883a 	mov	r18,r7
1000d2a4:	003e5706 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d2a8:	4984b03a 	or	r2,r9,r6
1000d2ac:	10002e26 	beq	r2,zero,1000d368 <__adddf3+0x7e0>
1000d2b0:	4004d0fa 	srli	r2,r8,3
1000d2b4:	8822d0fa 	srli	r17,r17,3
1000d2b8:	4010977a 	slli	r8,r8,29
1000d2bc:	10c0022c 	andhi	r3,r2,8
1000d2c0:	4462b03a 	or	r17,r8,r17
1000d2c4:	18000826 	beq	r3,zero,1000d2e8 <__adddf3+0x760>
1000d2c8:	4808d0fa 	srli	r4,r9,3
1000d2cc:	20c0022c 	andhi	r3,r4,8
1000d2d0:	1800051e 	bne	r3,zero,1000d2e8 <__adddf3+0x760>
1000d2d4:	300cd0fa 	srli	r6,r6,3
1000d2d8:	4806977a 	slli	r3,r9,29
1000d2dc:	2005883a 	mov	r2,r4
1000d2e0:	3825883a 	mov	r18,r7
1000d2e4:	19a2b03a 	or	r17,r3,r6
1000d2e8:	8810d77a 	srli	r8,r17,29
1000d2ec:	100490fa 	slli	r2,r2,3
1000d2f0:	882290fa 	slli	r17,r17,3
1000d2f4:	0401ffc4 	movi	r16,2047
1000d2f8:	4090b03a 	or	r8,r8,r2
1000d2fc:	003e4106 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d300:	0141ffc4 	movi	r5,2047
1000d304:	117fc71e 	bne	r2,r5,1000d224 <__alt_data_end+0xf800d224>
1000d308:	4811883a 	mov	r8,r9
1000d30c:	3023883a 	mov	r17,r6
1000d310:	1021883a 	mov	r16,r2
1000d314:	003e3b06 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d318:	10002f26 	beq	r2,zero,1000d3d8 <__adddf3+0x850>
1000d31c:	4984b03a 	or	r2,r9,r6
1000d320:	10001126 	beq	r2,zero,1000d368 <__adddf3+0x7e0>
1000d324:	4004d0fa 	srli	r2,r8,3
1000d328:	8822d0fa 	srli	r17,r17,3
1000d32c:	4010977a 	slli	r8,r8,29
1000d330:	10c0022c 	andhi	r3,r2,8
1000d334:	4462b03a 	or	r17,r8,r17
1000d338:	183feb26 	beq	r3,zero,1000d2e8 <__alt_data_end+0xf800d2e8>
1000d33c:	4808d0fa 	srli	r4,r9,3
1000d340:	20c0022c 	andhi	r3,r4,8
1000d344:	183fe81e 	bne	r3,zero,1000d2e8 <__alt_data_end+0xf800d2e8>
1000d348:	300cd0fa 	srli	r6,r6,3
1000d34c:	4806977a 	slli	r3,r9,29
1000d350:	2005883a 	mov	r2,r4
1000d354:	19a2b03a 	or	r17,r3,r6
1000d358:	003fe306 	br	1000d2e8 <__alt_data_end+0xf800d2e8>
1000d35c:	0011883a 	mov	r8,zero
1000d360:	0005883a 	mov	r2,zero
1000d364:	003e3f06 	br	1000cc64 <__alt_data_end+0xf800cc64>
1000d368:	0401ffc4 	movi	r16,2047
1000d36c:	003e2506 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d370:	0013883a 	mov	r9,zero
1000d374:	003f8406 	br	1000d188 <__alt_data_end+0xf800d188>
1000d378:	0005883a 	mov	r2,zero
1000d37c:	0007883a 	mov	r3,zero
1000d380:	003e8906 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d384:	197ff804 	addi	r5,r3,-32
1000d388:	01000804 	movi	r4,32
1000d38c:	414ad83a 	srl	r5,r8,r5
1000d390:	19002426 	beq	r3,r4,1000d424 <__adddf3+0x89c>
1000d394:	01001004 	movi	r4,64
1000d398:	20c7c83a 	sub	r3,r4,r3
1000d39c:	40c6983a 	sll	r3,r8,r3
1000d3a0:	1c46b03a 	or	r3,r3,r17
1000d3a4:	1806c03a 	cmpne	r3,r3,zero
1000d3a8:	28e2b03a 	or	r17,r5,r3
1000d3ac:	0007883a 	mov	r3,zero
1000d3b0:	003f2306 	br	1000d040 <__alt_data_end+0xf800d040>
1000d3b4:	0007883a 	mov	r3,zero
1000d3b8:	5811883a 	mov	r8,r11
1000d3bc:	00bfffc4 	movi	r2,-1
1000d3c0:	0401ffc4 	movi	r16,2047
1000d3c4:	003e7806 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d3c8:	4462b03a 	or	r17,r8,r17
1000d3cc:	8822c03a 	cmpne	r17,r17,zero
1000d3d0:	0009883a 	mov	r4,zero
1000d3d4:	003fa006 	br	1000d258 <__alt_data_end+0xf800d258>
1000d3d8:	4811883a 	mov	r8,r9
1000d3dc:	3023883a 	mov	r17,r6
1000d3e0:	0401ffc4 	movi	r16,2047
1000d3e4:	003e0706 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d3e8:	4811883a 	mov	r8,r9
1000d3ec:	3023883a 	mov	r17,r6
1000d3f0:	003e0406 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d3f4:	21fff804 	addi	r7,r4,-32
1000d3f8:	01400804 	movi	r5,32
1000d3fc:	41ced83a 	srl	r7,r8,r7
1000d400:	21400a26 	beq	r4,r5,1000d42c <__adddf3+0x8a4>
1000d404:	01401004 	movi	r5,64
1000d408:	2909c83a 	sub	r4,r5,r4
1000d40c:	4108983a 	sll	r4,r8,r4
1000d410:	2448b03a 	or	r4,r4,r17
1000d414:	2008c03a 	cmpne	r4,r4,zero
1000d418:	3922b03a 	or	r17,r7,r4
1000d41c:	0009883a 	mov	r4,zero
1000d420:	003f8d06 	br	1000d258 <__alt_data_end+0xf800d258>
1000d424:	0007883a 	mov	r3,zero
1000d428:	003fdd06 	br	1000d3a0 <__alt_data_end+0xf800d3a0>
1000d42c:	0009883a 	mov	r4,zero
1000d430:	003ff706 	br	1000d410 <__alt_data_end+0xf800d410>

1000d434 <__divdf3>:
1000d434:	defff004 	addi	sp,sp,-64
1000d438:	dc800815 	stw	r18,32(sp)
1000d43c:	2824d53a 	srli	r18,r5,20
1000d440:	dd800c15 	stw	r22,48(sp)
1000d444:	282cd7fa 	srli	r22,r5,31
1000d448:	dc000615 	stw	r16,24(sp)
1000d44c:	04000434 	movhi	r16,16
1000d450:	843fffc4 	addi	r16,r16,-1
1000d454:	dfc00f15 	stw	ra,60(sp)
1000d458:	df000e15 	stw	fp,56(sp)
1000d45c:	ddc00d15 	stw	r23,52(sp)
1000d460:	dd400b15 	stw	r21,44(sp)
1000d464:	dd000a15 	stw	r20,40(sp)
1000d468:	dcc00915 	stw	r19,36(sp)
1000d46c:	dc400715 	stw	r17,28(sp)
1000d470:	9481ffcc 	andi	r18,r18,2047
1000d474:	2c20703a 	and	r16,r5,r16
1000d478:	b2003fcc 	andi	r8,r22,255
1000d47c:	90006126 	beq	r18,zero,1000d604 <__divdf3+0x1d0>
1000d480:	0081ffc4 	movi	r2,2047
1000d484:	202b883a 	mov	r21,r4
1000d488:	90803726 	beq	r18,r2,1000d568 <__divdf3+0x134>
1000d48c:	80800434 	orhi	r2,r16,16
1000d490:	100490fa 	slli	r2,r2,3
1000d494:	2020d77a 	srli	r16,r4,29
1000d498:	202a90fa 	slli	r21,r4,3
1000d49c:	94bf0044 	addi	r18,r18,-1023
1000d4a0:	80a0b03a 	or	r16,r16,r2
1000d4a4:	0013883a 	mov	r9,zero
1000d4a8:	000b883a 	mov	r5,zero
1000d4ac:	3806d53a 	srli	r3,r7,20
1000d4b0:	382ed7fa 	srli	r23,r7,31
1000d4b4:	04400434 	movhi	r17,16
1000d4b8:	8c7fffc4 	addi	r17,r17,-1
1000d4bc:	18c1ffcc 	andi	r3,r3,2047
1000d4c0:	3029883a 	mov	r20,r6
1000d4c4:	3c62703a 	and	r17,r7,r17
1000d4c8:	bf003fcc 	andi	fp,r23,255
1000d4cc:	18006e26 	beq	r3,zero,1000d688 <__divdf3+0x254>
1000d4d0:	0081ffc4 	movi	r2,2047
1000d4d4:	18806626 	beq	r3,r2,1000d670 <__divdf3+0x23c>
1000d4d8:	88800434 	orhi	r2,r17,16
1000d4dc:	100490fa 	slli	r2,r2,3
1000d4e0:	3022d77a 	srli	r17,r6,29
1000d4e4:	302890fa 	slli	r20,r6,3
1000d4e8:	18ff0044 	addi	r3,r3,-1023
1000d4ec:	88a2b03a 	or	r17,r17,r2
1000d4f0:	000f883a 	mov	r7,zero
1000d4f4:	b5e6f03a 	xor	r19,r22,r23
1000d4f8:	3a4cb03a 	or	r6,r7,r9
1000d4fc:	008003c4 	movi	r2,15
1000d500:	9809883a 	mov	r4,r19
1000d504:	90c7c83a 	sub	r3,r18,r3
1000d508:	9cc03fcc 	andi	r19,r19,255
1000d50c:	11809636 	bltu	r2,r6,1000d768 <__divdf3+0x334>
1000d510:	300c90ba 	slli	r6,r6,2
1000d514:	00840074 	movhi	r2,4097
1000d518:	10b54a04 	addi	r2,r2,-10968
1000d51c:	308d883a 	add	r6,r6,r2
1000d520:	30800017 	ldw	r2,0(r6)
1000d524:	1000683a 	jmp	r2
1000d528:	1000d768 	cmpgeui	zero,r2,861
1000d52c:	1000d5a0 	cmpeqi	zero,r2,854
1000d530:	1000d758 	cmpnei	zero,r2,861
1000d534:	1000d594 	ori	zero,r2,854
1000d538:	1000d758 	cmpnei	zero,r2,861
1000d53c:	1000d72c 	andhi	zero,r2,860
1000d540:	1000d758 	cmpnei	zero,r2,861
1000d544:	1000d594 	ori	zero,r2,854
1000d548:	1000d5a0 	cmpeqi	zero,r2,854
1000d54c:	1000d5a0 	cmpeqi	zero,r2,854
1000d550:	1000d72c 	andhi	zero,r2,860
1000d554:	1000d594 	ori	zero,r2,854
1000d558:	1000d584 	addi	zero,r2,854
1000d55c:	1000d584 	addi	zero,r2,854
1000d560:	1000d584 	addi	zero,r2,854
1000d564:	1000daf0 	cmpltui	zero,r2,875
1000d568:	2404b03a 	or	r2,r4,r16
1000d56c:	10006c1e 	bne	r2,zero,1000d720 <__divdf3+0x2ec>
1000d570:	02400204 	movi	r9,8
1000d574:	0021883a 	mov	r16,zero
1000d578:	002b883a 	mov	r21,zero
1000d57c:	01400084 	movi	r5,2
1000d580:	003fca06 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d584:	8023883a 	mov	r17,r16
1000d588:	a829883a 	mov	r20,r21
1000d58c:	4039883a 	mov	fp,r8
1000d590:	280f883a 	mov	r7,r5
1000d594:	00800084 	movi	r2,2
1000d598:	3881601e 	bne	r7,r2,1000db1c <__divdf3+0x6e8>
1000d59c:	e027883a 	mov	r19,fp
1000d5a0:	9900004c 	andi	r4,r19,1
1000d5a4:	0081ffc4 	movi	r2,2047
1000d5a8:	0021883a 	mov	r16,zero
1000d5ac:	002b883a 	mov	r21,zero
1000d5b0:	1004953a 	slli	r2,r2,20
1000d5b4:	20c03fcc 	andi	r3,r4,255
1000d5b8:	01400434 	movhi	r5,16
1000d5bc:	297fffc4 	addi	r5,r5,-1
1000d5c0:	180697fa 	slli	r3,r3,31
1000d5c4:	8160703a 	and	r16,r16,r5
1000d5c8:	80a0b03a 	or	r16,r16,r2
1000d5cc:	80c6b03a 	or	r3,r16,r3
1000d5d0:	a805883a 	mov	r2,r21
1000d5d4:	dfc00f17 	ldw	ra,60(sp)
1000d5d8:	df000e17 	ldw	fp,56(sp)
1000d5dc:	ddc00d17 	ldw	r23,52(sp)
1000d5e0:	dd800c17 	ldw	r22,48(sp)
1000d5e4:	dd400b17 	ldw	r21,44(sp)
1000d5e8:	dd000a17 	ldw	r20,40(sp)
1000d5ec:	dcc00917 	ldw	r19,36(sp)
1000d5f0:	dc800817 	ldw	r18,32(sp)
1000d5f4:	dc400717 	ldw	r17,28(sp)
1000d5f8:	dc000617 	ldw	r16,24(sp)
1000d5fc:	dec01004 	addi	sp,sp,64
1000d600:	f800283a 	ret
1000d604:	2404b03a 	or	r2,r4,r16
1000d608:	2023883a 	mov	r17,r4
1000d60c:	10003f26 	beq	r2,zero,1000d70c <__divdf3+0x2d8>
1000d610:	80015e26 	beq	r16,zero,1000db8c <__divdf3+0x758>
1000d614:	8009883a 	mov	r4,r16
1000d618:	d9800215 	stw	r6,8(sp)
1000d61c:	d9c00515 	stw	r7,20(sp)
1000d620:	da000415 	stw	r8,16(sp)
1000d624:	000f3c80 	call	1000f3c8 <__clzsi2>
1000d628:	d9800217 	ldw	r6,8(sp)
1000d62c:	d9c00517 	ldw	r7,20(sp)
1000d630:	da000417 	ldw	r8,16(sp)
1000d634:	113ffd44 	addi	r4,r2,-11
1000d638:	00c00704 	movi	r3,28
1000d63c:	19014f16 	blt	r3,r4,1000db7c <__divdf3+0x748>
1000d640:	00c00744 	movi	r3,29
1000d644:	157ffe04 	addi	r21,r2,-8
1000d648:	1907c83a 	sub	r3,r3,r4
1000d64c:	8560983a 	sll	r16,r16,r21
1000d650:	88c6d83a 	srl	r3,r17,r3
1000d654:	8d6a983a 	sll	r21,r17,r21
1000d658:	1c20b03a 	or	r16,r3,r16
1000d65c:	1080fcc4 	addi	r2,r2,1011
1000d660:	00a5c83a 	sub	r18,zero,r2
1000d664:	0013883a 	mov	r9,zero
1000d668:	000b883a 	mov	r5,zero
1000d66c:	003f8f06 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d670:	3444b03a 	or	r2,r6,r17
1000d674:	1000231e 	bne	r2,zero,1000d704 <__divdf3+0x2d0>
1000d678:	0023883a 	mov	r17,zero
1000d67c:	0029883a 	mov	r20,zero
1000d680:	01c00084 	movi	r7,2
1000d684:	003f9b06 	br	1000d4f4 <__alt_data_end+0xf800d4f4>
1000d688:	3444b03a 	or	r2,r6,r17
1000d68c:	10001926 	beq	r2,zero,1000d6f4 <__divdf3+0x2c0>
1000d690:	88014b26 	beq	r17,zero,1000dbc0 <__divdf3+0x78c>
1000d694:	8809883a 	mov	r4,r17
1000d698:	d9400115 	stw	r5,4(sp)
1000d69c:	d9800215 	stw	r6,8(sp)
1000d6a0:	da000415 	stw	r8,16(sp)
1000d6a4:	da400315 	stw	r9,12(sp)
1000d6a8:	000f3c80 	call	1000f3c8 <__clzsi2>
1000d6ac:	d9400117 	ldw	r5,4(sp)
1000d6b0:	d9800217 	ldw	r6,8(sp)
1000d6b4:	da000417 	ldw	r8,16(sp)
1000d6b8:	da400317 	ldw	r9,12(sp)
1000d6bc:	113ffd44 	addi	r4,r2,-11
1000d6c0:	00c00704 	movi	r3,28
1000d6c4:	19013a16 	blt	r3,r4,1000dbb0 <__divdf3+0x77c>
1000d6c8:	00c00744 	movi	r3,29
1000d6cc:	153ffe04 	addi	r20,r2,-8
1000d6d0:	1907c83a 	sub	r3,r3,r4
1000d6d4:	8d22983a 	sll	r17,r17,r20
1000d6d8:	30c6d83a 	srl	r3,r6,r3
1000d6dc:	3528983a 	sll	r20,r6,r20
1000d6e0:	1c62b03a 	or	r17,r3,r17
1000d6e4:	1080fcc4 	addi	r2,r2,1011
1000d6e8:	0087c83a 	sub	r3,zero,r2
1000d6ec:	000f883a 	mov	r7,zero
1000d6f0:	003f8006 	br	1000d4f4 <__alt_data_end+0xf800d4f4>
1000d6f4:	0023883a 	mov	r17,zero
1000d6f8:	0029883a 	mov	r20,zero
1000d6fc:	01c00044 	movi	r7,1
1000d700:	003f7c06 	br	1000d4f4 <__alt_data_end+0xf800d4f4>
1000d704:	01c000c4 	movi	r7,3
1000d708:	003f7a06 	br	1000d4f4 <__alt_data_end+0xf800d4f4>
1000d70c:	02400104 	movi	r9,4
1000d710:	0021883a 	mov	r16,zero
1000d714:	002b883a 	mov	r21,zero
1000d718:	01400044 	movi	r5,1
1000d71c:	003f6306 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d720:	02400304 	movi	r9,12
1000d724:	014000c4 	movi	r5,3
1000d728:	003f6006 	br	1000d4ac <__alt_data_end+0xf800d4ac>
1000d72c:	04000434 	movhi	r16,16
1000d730:	0009883a 	mov	r4,zero
1000d734:	843fffc4 	addi	r16,r16,-1
1000d738:	057fffc4 	movi	r21,-1
1000d73c:	0081ffc4 	movi	r2,2047
1000d740:	003f9b06 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000d744:	00c00044 	movi	r3,1
1000d748:	1887c83a 	sub	r3,r3,r2
1000d74c:	01000e04 	movi	r4,56
1000d750:	20c1530e 	bge	r4,r3,1000dca0 <__divdf3+0x86c>
1000d754:	9900004c 	andi	r4,r19,1
1000d758:	0005883a 	mov	r2,zero
1000d75c:	0021883a 	mov	r16,zero
1000d760:	002b883a 	mov	r21,zero
1000d764:	003f9206 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000d768:	8c012e36 	bltu	r17,r16,1000dc24 <__divdf3+0x7f0>
1000d76c:	84412c26 	beq	r16,r17,1000dc20 <__divdf3+0x7ec>
1000d770:	a82f883a 	mov	r23,r21
1000d774:	18ffffc4 	addi	r3,r3,-1
1000d778:	002b883a 	mov	r21,zero
1000d77c:	a004d63a 	srli	r2,r20,24
1000d780:	8822923a 	slli	r17,r17,8
1000d784:	a028923a 	slli	r20,r20,8
1000d788:	8009883a 	mov	r4,r16
1000d78c:	88acb03a 	or	r22,r17,r2
1000d790:	dd000015 	stw	r20,0(sp)
1000d794:	b028d43a 	srli	r20,r22,16
1000d798:	d8c00215 	stw	r3,8(sp)
1000d79c:	b4bfffcc 	andi	r18,r22,65535
1000d7a0:	a00b883a 	mov	r5,r20
1000d7a4:	000caa40 	call	1000caa4 <__udivsi3>
1000d7a8:	100b883a 	mov	r5,r2
1000d7ac:	9009883a 	mov	r4,r18
1000d7b0:	1023883a 	mov	r17,r2
1000d7b4:	000cb600 	call	1000cb60 <__mulsi3>
1000d7b8:	8009883a 	mov	r4,r16
1000d7bc:	a00b883a 	mov	r5,r20
1000d7c0:	1039883a 	mov	fp,r2
1000d7c4:	000cb080 	call	1000cb08 <__umodsi3>
1000d7c8:	1004943a 	slli	r2,r2,16
1000d7cc:	b808d43a 	srli	r4,r23,16
1000d7d0:	d8c00217 	ldw	r3,8(sp)
1000d7d4:	2084b03a 	or	r2,r4,r2
1000d7d8:	1700062e 	bgeu	r2,fp,1000d7f4 <__divdf3+0x3c0>
1000d7dc:	1585883a 	add	r2,r2,r22
1000d7e0:	893fffc4 	addi	r4,r17,-1
1000d7e4:	15811d36 	bltu	r2,r22,1000dc5c <__divdf3+0x828>
1000d7e8:	17011c2e 	bgeu	r2,fp,1000dc5c <__divdf3+0x828>
1000d7ec:	8c7fff84 	addi	r17,r17,-2
1000d7f0:	1585883a 	add	r2,r2,r22
1000d7f4:	1739c83a 	sub	fp,r2,fp
1000d7f8:	a00b883a 	mov	r5,r20
1000d7fc:	e009883a 	mov	r4,fp
1000d800:	d8c00215 	stw	r3,8(sp)
1000d804:	000caa40 	call	1000caa4 <__udivsi3>
1000d808:	100b883a 	mov	r5,r2
1000d80c:	9009883a 	mov	r4,r18
1000d810:	1021883a 	mov	r16,r2
1000d814:	000cb600 	call	1000cb60 <__mulsi3>
1000d818:	a00b883a 	mov	r5,r20
1000d81c:	e009883a 	mov	r4,fp
1000d820:	d8800415 	stw	r2,16(sp)
1000d824:	000cb080 	call	1000cb08 <__umodsi3>
1000d828:	1004943a 	slli	r2,r2,16
1000d82c:	da000417 	ldw	r8,16(sp)
1000d830:	bdffffcc 	andi	r23,r23,65535
1000d834:	b884b03a 	or	r2,r23,r2
1000d838:	d8c00217 	ldw	r3,8(sp)
1000d83c:	1200062e 	bgeu	r2,r8,1000d858 <__divdf3+0x424>
1000d840:	1585883a 	add	r2,r2,r22
1000d844:	813fffc4 	addi	r4,r16,-1
1000d848:	15810236 	bltu	r2,r22,1000dc54 <__divdf3+0x820>
1000d84c:	1201012e 	bgeu	r2,r8,1000dc54 <__divdf3+0x820>
1000d850:	843fff84 	addi	r16,r16,-2
1000d854:	1585883a 	add	r2,r2,r22
1000d858:	8822943a 	slli	r17,r17,16
1000d85c:	d9800017 	ldw	r6,0(sp)
1000d860:	1211c83a 	sub	r8,r2,r8
1000d864:	8c22b03a 	or	r17,r17,r16
1000d868:	373fffcc 	andi	fp,r6,65535
1000d86c:	8abfffcc 	andi	r10,r17,65535
1000d870:	8820d43a 	srli	r16,r17,16
1000d874:	5009883a 	mov	r4,r10
1000d878:	e00b883a 	mov	r5,fp
1000d87c:	302ed43a 	srli	r23,r6,16
1000d880:	d8c00215 	stw	r3,8(sp)
1000d884:	da000415 	stw	r8,16(sp)
1000d888:	da800115 	stw	r10,4(sp)
1000d88c:	000cb600 	call	1000cb60 <__mulsi3>
1000d890:	800b883a 	mov	r5,r16
1000d894:	e009883a 	mov	r4,fp
1000d898:	d8800515 	stw	r2,20(sp)
1000d89c:	000cb600 	call	1000cb60 <__mulsi3>
1000d8a0:	8009883a 	mov	r4,r16
1000d8a4:	b80b883a 	mov	r5,r23
1000d8a8:	d8800315 	stw	r2,12(sp)
1000d8ac:	000cb600 	call	1000cb60 <__mulsi3>
1000d8b0:	da800117 	ldw	r10,4(sp)
1000d8b4:	b80b883a 	mov	r5,r23
1000d8b8:	1021883a 	mov	r16,r2
1000d8bc:	5009883a 	mov	r4,r10
1000d8c0:	000cb600 	call	1000cb60 <__mulsi3>
1000d8c4:	d9c00517 	ldw	r7,20(sp)
1000d8c8:	da400317 	ldw	r9,12(sp)
1000d8cc:	d8c00217 	ldw	r3,8(sp)
1000d8d0:	3808d43a 	srli	r4,r7,16
1000d8d4:	1245883a 	add	r2,r2,r9
1000d8d8:	da000417 	ldw	r8,16(sp)
1000d8dc:	2085883a 	add	r2,r4,r2
1000d8e0:	1240022e 	bgeu	r2,r9,1000d8ec <__divdf3+0x4b8>
1000d8e4:	01000074 	movhi	r4,1
1000d8e8:	8121883a 	add	r16,r16,r4
1000d8ec:	1008d43a 	srli	r4,r2,16
1000d8f0:	1004943a 	slli	r2,r2,16
1000d8f4:	39ffffcc 	andi	r7,r7,65535
1000d8f8:	2409883a 	add	r4,r4,r16
1000d8fc:	11c5883a 	add	r2,r2,r7
1000d900:	4100bb36 	bltu	r8,r4,1000dbf0 <__divdf3+0x7bc>
1000d904:	4100d726 	beq	r8,r4,1000dc64 <__divdf3+0x830>
1000d908:	4109c83a 	sub	r4,r8,r4
1000d90c:	a8a1c83a 	sub	r16,r21,r2
1000d910:	ac2b803a 	cmpltu	r21,r21,r16
1000d914:	256bc83a 	sub	r21,r4,r21
1000d918:	b540d926 	beq	r22,r21,1000dc80 <__divdf3+0x84c>
1000d91c:	a00b883a 	mov	r5,r20
1000d920:	a809883a 	mov	r4,r21
1000d924:	d8c00215 	stw	r3,8(sp)
1000d928:	000caa40 	call	1000caa4 <__udivsi3>
1000d92c:	100b883a 	mov	r5,r2
1000d930:	9009883a 	mov	r4,r18
1000d934:	d8800515 	stw	r2,20(sp)
1000d938:	000cb600 	call	1000cb60 <__mulsi3>
1000d93c:	a809883a 	mov	r4,r21
1000d940:	a00b883a 	mov	r5,r20
1000d944:	d8800415 	stw	r2,16(sp)
1000d948:	000cb080 	call	1000cb08 <__umodsi3>
1000d94c:	1004943a 	slli	r2,r2,16
1000d950:	8008d43a 	srli	r4,r16,16
1000d954:	da000417 	ldw	r8,16(sp)
1000d958:	d8c00217 	ldw	r3,8(sp)
1000d95c:	2084b03a 	or	r2,r4,r2
1000d960:	d9c00517 	ldw	r7,20(sp)
1000d964:	1200062e 	bgeu	r2,r8,1000d980 <__divdf3+0x54c>
1000d968:	1585883a 	add	r2,r2,r22
1000d96c:	393fffc4 	addi	r4,r7,-1
1000d970:	1580c536 	bltu	r2,r22,1000dc88 <__divdf3+0x854>
1000d974:	1200c42e 	bgeu	r2,r8,1000dc88 <__divdf3+0x854>
1000d978:	39ffff84 	addi	r7,r7,-2
1000d97c:	1585883a 	add	r2,r2,r22
1000d980:	122bc83a 	sub	r21,r2,r8
1000d984:	a00b883a 	mov	r5,r20
1000d988:	a809883a 	mov	r4,r21
1000d98c:	d8c00215 	stw	r3,8(sp)
1000d990:	d9c00515 	stw	r7,20(sp)
1000d994:	000caa40 	call	1000caa4 <__udivsi3>
1000d998:	9009883a 	mov	r4,r18
1000d99c:	100b883a 	mov	r5,r2
1000d9a0:	d8800415 	stw	r2,16(sp)
1000d9a4:	000cb600 	call	1000cb60 <__mulsi3>
1000d9a8:	a809883a 	mov	r4,r21
1000d9ac:	a00b883a 	mov	r5,r20
1000d9b0:	1025883a 	mov	r18,r2
1000d9b4:	000cb080 	call	1000cb08 <__umodsi3>
1000d9b8:	1004943a 	slli	r2,r2,16
1000d9bc:	813fffcc 	andi	r4,r16,65535
1000d9c0:	d8c00217 	ldw	r3,8(sp)
1000d9c4:	20a0b03a 	or	r16,r4,r2
1000d9c8:	d9c00517 	ldw	r7,20(sp)
1000d9cc:	da000417 	ldw	r8,16(sp)
1000d9d0:	8480062e 	bgeu	r16,r18,1000d9ec <__divdf3+0x5b8>
1000d9d4:	85a1883a 	add	r16,r16,r22
1000d9d8:	40bfffc4 	addi	r2,r8,-1
1000d9dc:	8580ac36 	bltu	r16,r22,1000dc90 <__divdf3+0x85c>
1000d9e0:	8480ab2e 	bgeu	r16,r18,1000dc90 <__divdf3+0x85c>
1000d9e4:	423fff84 	addi	r8,r8,-2
1000d9e8:	85a1883a 	add	r16,r16,r22
1000d9ec:	3804943a 	slli	r2,r7,16
1000d9f0:	84a1c83a 	sub	r16,r16,r18
1000d9f4:	e009883a 	mov	r4,fp
1000d9f8:	1228b03a 	or	r20,r2,r8
1000d9fc:	a1ffffcc 	andi	r7,r20,65535
1000da00:	a024d43a 	srli	r18,r20,16
1000da04:	380b883a 	mov	r5,r7
1000da08:	d8c00215 	stw	r3,8(sp)
1000da0c:	d9c00515 	stw	r7,20(sp)
1000da10:	000cb600 	call	1000cb60 <__mulsi3>
1000da14:	900b883a 	mov	r5,r18
1000da18:	e009883a 	mov	r4,fp
1000da1c:	102b883a 	mov	r21,r2
1000da20:	000cb600 	call	1000cb60 <__mulsi3>
1000da24:	900b883a 	mov	r5,r18
1000da28:	b809883a 	mov	r4,r23
1000da2c:	1039883a 	mov	fp,r2
1000da30:	000cb600 	call	1000cb60 <__mulsi3>
1000da34:	d9c00517 	ldw	r7,20(sp)
1000da38:	b80b883a 	mov	r5,r23
1000da3c:	1025883a 	mov	r18,r2
1000da40:	3809883a 	mov	r4,r7
1000da44:	000cb600 	call	1000cb60 <__mulsi3>
1000da48:	a808d43a 	srli	r4,r21,16
1000da4c:	1705883a 	add	r2,r2,fp
1000da50:	d8c00217 	ldw	r3,8(sp)
1000da54:	2085883a 	add	r2,r4,r2
1000da58:	1700022e 	bgeu	r2,fp,1000da64 <__divdf3+0x630>
1000da5c:	01000074 	movhi	r4,1
1000da60:	9125883a 	add	r18,r18,r4
1000da64:	1008d43a 	srli	r4,r2,16
1000da68:	1004943a 	slli	r2,r2,16
1000da6c:	ad7fffcc 	andi	r21,r21,65535
1000da70:	2489883a 	add	r4,r4,r18
1000da74:	1545883a 	add	r2,r2,r21
1000da78:	81003836 	bltu	r16,r4,1000db5c <__divdf3+0x728>
1000da7c:	81003626 	beq	r16,r4,1000db58 <__divdf3+0x724>
1000da80:	a5000054 	ori	r20,r20,1
1000da84:	1880ffc4 	addi	r2,r3,1023
1000da88:	00bf2e0e 	bge	zero,r2,1000d744 <__alt_data_end+0xf800d744>
1000da8c:	a10001cc 	andi	r4,r20,7
1000da90:	20000726 	beq	r4,zero,1000dab0 <__divdf3+0x67c>
1000da94:	a10003cc 	andi	r4,r20,15
1000da98:	01400104 	movi	r5,4
1000da9c:	21400426 	beq	r4,r5,1000dab0 <__divdf3+0x67c>
1000daa0:	a149883a 	add	r4,r20,r5
1000daa4:	2529803a 	cmpltu	r20,r4,r20
1000daa8:	8d23883a 	add	r17,r17,r20
1000daac:	2029883a 	mov	r20,r4
1000dab0:	8900402c 	andhi	r4,r17,256
1000dab4:	20000426 	beq	r4,zero,1000dac8 <__divdf3+0x694>
1000dab8:	18810004 	addi	r2,r3,1024
1000dabc:	00ffc034 	movhi	r3,65280
1000dac0:	18ffffc4 	addi	r3,r3,-1
1000dac4:	88e2703a 	and	r17,r17,r3
1000dac8:	00c1ff84 	movi	r3,2046
1000dacc:	18beb416 	blt	r3,r2,1000d5a0 <__alt_data_end+0xf800d5a0>
1000dad0:	a028d0fa 	srli	r20,r20,3
1000dad4:	882a977a 	slli	r21,r17,29
1000dad8:	8820927a 	slli	r16,r17,9
1000dadc:	1081ffcc 	andi	r2,r2,2047
1000dae0:	ad2ab03a 	or	r21,r21,r20
1000dae4:	8020d33a 	srli	r16,r16,12
1000dae8:	9900004c 	andi	r4,r19,1
1000daec:	003eb006 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000daf0:	8080022c 	andhi	r2,r16,8
1000daf4:	10001226 	beq	r2,zero,1000db40 <__divdf3+0x70c>
1000daf8:	8880022c 	andhi	r2,r17,8
1000dafc:	1000101e 	bne	r2,zero,1000db40 <__divdf3+0x70c>
1000db00:	00800434 	movhi	r2,16
1000db04:	8c000234 	orhi	r16,r17,8
1000db08:	10bfffc4 	addi	r2,r2,-1
1000db0c:	b809883a 	mov	r4,r23
1000db10:	80a0703a 	and	r16,r16,r2
1000db14:	a02b883a 	mov	r21,r20
1000db18:	003f0806 	br	1000d73c <__alt_data_end+0xf800d73c>
1000db1c:	008000c4 	movi	r2,3
1000db20:	3880b126 	beq	r7,r2,1000dde8 <__divdf3+0x9b4>
1000db24:	00800044 	movi	r2,1
1000db28:	38805b1e 	bne	r7,r2,1000dc98 <__divdf3+0x864>
1000db2c:	e009883a 	mov	r4,fp
1000db30:	0005883a 	mov	r2,zero
1000db34:	0021883a 	mov	r16,zero
1000db38:	002b883a 	mov	r21,zero
1000db3c:	003e9c06 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000db40:	00800434 	movhi	r2,16
1000db44:	84000234 	orhi	r16,r16,8
1000db48:	10bfffc4 	addi	r2,r2,-1
1000db4c:	b009883a 	mov	r4,r22
1000db50:	80a0703a 	and	r16,r16,r2
1000db54:	003ef906 	br	1000d73c <__alt_data_end+0xf800d73c>
1000db58:	103fca26 	beq	r2,zero,1000da84 <__alt_data_end+0xf800da84>
1000db5c:	b421883a 	add	r16,r22,r16
1000db60:	a17fffc4 	addi	r5,r20,-1
1000db64:	8580422e 	bgeu	r16,r22,1000dc70 <__divdf3+0x83c>
1000db68:	2829883a 	mov	r20,r5
1000db6c:	813fc41e 	bne	r16,r4,1000da80 <__alt_data_end+0xf800da80>
1000db70:	d9800017 	ldw	r6,0(sp)
1000db74:	30bfc21e 	bne	r6,r2,1000da80 <__alt_data_end+0xf800da80>
1000db78:	003fc206 	br	1000da84 <__alt_data_end+0xf800da84>
1000db7c:	143ff604 	addi	r16,r2,-40
1000db80:	8c20983a 	sll	r16,r17,r16
1000db84:	002b883a 	mov	r21,zero
1000db88:	003eb406 	br	1000d65c <__alt_data_end+0xf800d65c>
1000db8c:	d9800215 	stw	r6,8(sp)
1000db90:	d9c00515 	stw	r7,20(sp)
1000db94:	da000415 	stw	r8,16(sp)
1000db98:	000f3c80 	call	1000f3c8 <__clzsi2>
1000db9c:	10800804 	addi	r2,r2,32
1000dba0:	da000417 	ldw	r8,16(sp)
1000dba4:	d9c00517 	ldw	r7,20(sp)
1000dba8:	d9800217 	ldw	r6,8(sp)
1000dbac:	003ea106 	br	1000d634 <__alt_data_end+0xf800d634>
1000dbb0:	147ff604 	addi	r17,r2,-40
1000dbb4:	3462983a 	sll	r17,r6,r17
1000dbb8:	0029883a 	mov	r20,zero
1000dbbc:	003ec906 	br	1000d6e4 <__alt_data_end+0xf800d6e4>
1000dbc0:	3009883a 	mov	r4,r6
1000dbc4:	d9400115 	stw	r5,4(sp)
1000dbc8:	d9800215 	stw	r6,8(sp)
1000dbcc:	da000415 	stw	r8,16(sp)
1000dbd0:	da400315 	stw	r9,12(sp)
1000dbd4:	000f3c80 	call	1000f3c8 <__clzsi2>
1000dbd8:	10800804 	addi	r2,r2,32
1000dbdc:	da400317 	ldw	r9,12(sp)
1000dbe0:	da000417 	ldw	r8,16(sp)
1000dbe4:	d9800217 	ldw	r6,8(sp)
1000dbe8:	d9400117 	ldw	r5,4(sp)
1000dbec:	003eb306 	br	1000d6bc <__alt_data_end+0xf800d6bc>
1000dbf0:	d9800017 	ldw	r6,0(sp)
1000dbf4:	a9ab883a 	add	r21,r21,r6
1000dbf8:	a98b803a 	cmpltu	r5,r21,r6
1000dbfc:	2d8b883a 	add	r5,r5,r22
1000dc00:	2a11883a 	add	r8,r5,r8
1000dc04:	897fffc4 	addi	r5,r17,-1
1000dc08:	b2000c2e 	bgeu	r22,r8,1000dc3c <__divdf3+0x808>
1000dc0c:	41003f36 	bltu	r8,r4,1000dd0c <__divdf3+0x8d8>
1000dc10:	22006c26 	beq	r4,r8,1000ddc4 <__divdf3+0x990>
1000dc14:	4109c83a 	sub	r4,r8,r4
1000dc18:	2823883a 	mov	r17,r5
1000dc1c:	003f3b06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dc20:	ad3ed336 	bltu	r21,r20,1000d770 <__alt_data_end+0xf800d770>
1000dc24:	a804d07a 	srli	r2,r21,1
1000dc28:	802e97fa 	slli	r23,r16,31
1000dc2c:	a82a97fa 	slli	r21,r21,31
1000dc30:	8020d07a 	srli	r16,r16,1
1000dc34:	b8aeb03a 	or	r23,r23,r2
1000dc38:	003ed006 	br	1000d77c <__alt_data_end+0xf800d77c>
1000dc3c:	b23ff51e 	bne	r22,r8,1000dc14 <__alt_data_end+0xf800dc14>
1000dc40:	d9800017 	ldw	r6,0(sp)
1000dc44:	a9bff12e 	bgeu	r21,r6,1000dc0c <__alt_data_end+0xf800dc0c>
1000dc48:	b109c83a 	sub	r4,r22,r4
1000dc4c:	2823883a 	mov	r17,r5
1000dc50:	003f2e06 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dc54:	2021883a 	mov	r16,r4
1000dc58:	003eff06 	br	1000d858 <__alt_data_end+0xf800d858>
1000dc5c:	2023883a 	mov	r17,r4
1000dc60:	003ee406 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000dc64:	a8bfe236 	bltu	r21,r2,1000dbf0 <__alt_data_end+0xf800dbf0>
1000dc68:	0009883a 	mov	r4,zero
1000dc6c:	003f2706 	br	1000d90c <__alt_data_end+0xf800d90c>
1000dc70:	81002d36 	bltu	r16,r4,1000dd28 <__divdf3+0x8f4>
1000dc74:	24005626 	beq	r4,r16,1000ddd0 <__divdf3+0x99c>
1000dc78:	2829883a 	mov	r20,r5
1000dc7c:	003f8006 	br	1000da80 <__alt_data_end+0xf800da80>
1000dc80:	053fffc4 	movi	r20,-1
1000dc84:	003f7f06 	br	1000da84 <__alt_data_end+0xf800da84>
1000dc88:	200f883a 	mov	r7,r4
1000dc8c:	003f3c06 	br	1000d980 <__alt_data_end+0xf800d980>
1000dc90:	1011883a 	mov	r8,r2
1000dc94:	003f5506 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000dc98:	e027883a 	mov	r19,fp
1000dc9c:	003f7906 	br	1000da84 <__alt_data_end+0xf800da84>
1000dca0:	010007c4 	movi	r4,31
1000dca4:	20c02816 	blt	r4,r3,1000dd48 <__divdf3+0x914>
1000dca8:	00800804 	movi	r2,32
1000dcac:	10c5c83a 	sub	r2,r2,r3
1000dcb0:	888a983a 	sll	r5,r17,r2
1000dcb4:	a0c8d83a 	srl	r4,r20,r3
1000dcb8:	a084983a 	sll	r2,r20,r2
1000dcbc:	88e2d83a 	srl	r17,r17,r3
1000dcc0:	2906b03a 	or	r3,r5,r4
1000dcc4:	1004c03a 	cmpne	r2,r2,zero
1000dcc8:	1886b03a 	or	r3,r3,r2
1000dccc:	188001cc 	andi	r2,r3,7
1000dcd0:	10000726 	beq	r2,zero,1000dcf0 <__divdf3+0x8bc>
1000dcd4:	188003cc 	andi	r2,r3,15
1000dcd8:	01000104 	movi	r4,4
1000dcdc:	11000426 	beq	r2,r4,1000dcf0 <__divdf3+0x8bc>
1000dce0:	1805883a 	mov	r2,r3
1000dce4:	10c00104 	addi	r3,r2,4
1000dce8:	1885803a 	cmpltu	r2,r3,r2
1000dcec:	88a3883a 	add	r17,r17,r2
1000dcf0:	8880202c 	andhi	r2,r17,128
1000dcf4:	10002926 	beq	r2,zero,1000dd9c <__divdf3+0x968>
1000dcf8:	9900004c 	andi	r4,r19,1
1000dcfc:	00800044 	movi	r2,1
1000dd00:	0021883a 	mov	r16,zero
1000dd04:	002b883a 	mov	r21,zero
1000dd08:	003e2906 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000dd0c:	d9800017 	ldw	r6,0(sp)
1000dd10:	8c7fff84 	addi	r17,r17,-2
1000dd14:	a9ab883a 	add	r21,r21,r6
1000dd18:	a98b803a 	cmpltu	r5,r21,r6
1000dd1c:	2d8b883a 	add	r5,r5,r22
1000dd20:	2a11883a 	add	r8,r5,r8
1000dd24:	003ef806 	br	1000d908 <__alt_data_end+0xf800d908>
1000dd28:	d9800017 	ldw	r6,0(sp)
1000dd2c:	318f883a 	add	r7,r6,r6
1000dd30:	398b803a 	cmpltu	r5,r7,r6
1000dd34:	2d8d883a 	add	r6,r5,r22
1000dd38:	81a1883a 	add	r16,r16,r6
1000dd3c:	a17fff84 	addi	r5,r20,-2
1000dd40:	d9c00015 	stw	r7,0(sp)
1000dd44:	003f8806 	br	1000db68 <__alt_data_end+0xf800db68>
1000dd48:	013ff844 	movi	r4,-31
1000dd4c:	2085c83a 	sub	r2,r4,r2
1000dd50:	8888d83a 	srl	r4,r17,r2
1000dd54:	00800804 	movi	r2,32
1000dd58:	18802126 	beq	r3,r2,1000dde0 <__divdf3+0x9ac>
1000dd5c:	04001004 	movi	r16,64
1000dd60:	80c7c83a 	sub	r3,r16,r3
1000dd64:	88e0983a 	sll	r16,r17,r3
1000dd68:	8504b03a 	or	r2,r16,r20
1000dd6c:	1004c03a 	cmpne	r2,r2,zero
1000dd70:	2084b03a 	or	r2,r4,r2
1000dd74:	144001cc 	andi	r17,r2,7
1000dd78:	88000d1e 	bne	r17,zero,1000ddb0 <__divdf3+0x97c>
1000dd7c:	0021883a 	mov	r16,zero
1000dd80:	102ad0fa 	srli	r21,r2,3
1000dd84:	9900004c 	andi	r4,r19,1
1000dd88:	0005883a 	mov	r2,zero
1000dd8c:	ac6ab03a 	or	r21,r21,r17
1000dd90:	003e0706 	br	1000d5b0 <__alt_data_end+0xf800d5b0>
1000dd94:	1007883a 	mov	r3,r2
1000dd98:	0023883a 	mov	r17,zero
1000dd9c:	8820927a 	slli	r16,r17,9
1000dda0:	1805883a 	mov	r2,r3
1000dda4:	8822977a 	slli	r17,r17,29
1000dda8:	8020d33a 	srli	r16,r16,12
1000ddac:	003ff406 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000ddb0:	10c003cc 	andi	r3,r2,15
1000ddb4:	01000104 	movi	r4,4
1000ddb8:	193ff626 	beq	r3,r4,1000dd94 <__alt_data_end+0xf800dd94>
1000ddbc:	0023883a 	mov	r17,zero
1000ddc0:	003fc806 	br	1000dce4 <__alt_data_end+0xf800dce4>
1000ddc4:	a8bfd136 	bltu	r21,r2,1000dd0c <__alt_data_end+0xf800dd0c>
1000ddc8:	2823883a 	mov	r17,r5
1000ddcc:	003fa606 	br	1000dc68 <__alt_data_end+0xf800dc68>
1000ddd0:	d9800017 	ldw	r6,0(sp)
1000ddd4:	30bfd436 	bltu	r6,r2,1000dd28 <__alt_data_end+0xf800dd28>
1000ddd8:	2829883a 	mov	r20,r5
1000dddc:	003f6406 	br	1000db70 <__alt_data_end+0xf800db70>
1000dde0:	0021883a 	mov	r16,zero
1000dde4:	003fe006 	br	1000dd68 <__alt_data_end+0xf800dd68>
1000dde8:	00800434 	movhi	r2,16
1000ddec:	8c000234 	orhi	r16,r17,8
1000ddf0:	10bfffc4 	addi	r2,r2,-1
1000ddf4:	e009883a 	mov	r4,fp
1000ddf8:	80a0703a 	and	r16,r16,r2
1000ddfc:	a02b883a 	mov	r21,r20
1000de00:	003e4e06 	br	1000d73c <__alt_data_end+0xf800d73c>

1000de04 <__eqdf2>:
1000de04:	2804d53a 	srli	r2,r5,20
1000de08:	3806d53a 	srli	r3,r7,20
1000de0c:	02000434 	movhi	r8,16
1000de10:	423fffc4 	addi	r8,r8,-1
1000de14:	1081ffcc 	andi	r2,r2,2047
1000de18:	0281ffc4 	movi	r10,2047
1000de1c:	2a12703a 	and	r9,r5,r8
1000de20:	18c1ffcc 	andi	r3,r3,2047
1000de24:	3a10703a 	and	r8,r7,r8
1000de28:	280ad7fa 	srli	r5,r5,31
1000de2c:	380ed7fa 	srli	r7,r7,31
1000de30:	12801026 	beq	r2,r10,1000de74 <__eqdf2+0x70>
1000de34:	0281ffc4 	movi	r10,2047
1000de38:	1a800a26 	beq	r3,r10,1000de64 <__eqdf2+0x60>
1000de3c:	10c00226 	beq	r2,r3,1000de48 <__eqdf2+0x44>
1000de40:	00800044 	movi	r2,1
1000de44:	f800283a 	ret
1000de48:	4a3ffd1e 	bne	r9,r8,1000de40 <__alt_data_end+0xf800de40>
1000de4c:	21bffc1e 	bne	r4,r6,1000de40 <__alt_data_end+0xf800de40>
1000de50:	29c00c26 	beq	r5,r7,1000de84 <__eqdf2+0x80>
1000de54:	103ffa1e 	bne	r2,zero,1000de40 <__alt_data_end+0xf800de40>
1000de58:	2244b03a 	or	r2,r4,r9
1000de5c:	1004c03a 	cmpne	r2,r2,zero
1000de60:	f800283a 	ret
1000de64:	3214b03a 	or	r10,r6,r8
1000de68:	503ff426 	beq	r10,zero,1000de3c <__alt_data_end+0xf800de3c>
1000de6c:	00800044 	movi	r2,1
1000de70:	f800283a 	ret
1000de74:	2254b03a 	or	r10,r4,r9
1000de78:	503fee26 	beq	r10,zero,1000de34 <__alt_data_end+0xf800de34>
1000de7c:	00800044 	movi	r2,1
1000de80:	f800283a 	ret
1000de84:	0005883a 	mov	r2,zero
1000de88:	f800283a 	ret

1000de8c <__gedf2>:
1000de8c:	2804d53a 	srli	r2,r5,20
1000de90:	3806d53a 	srli	r3,r7,20
1000de94:	02000434 	movhi	r8,16
1000de98:	423fffc4 	addi	r8,r8,-1
1000de9c:	1081ffcc 	andi	r2,r2,2047
1000dea0:	0241ffc4 	movi	r9,2047
1000dea4:	2a14703a 	and	r10,r5,r8
1000dea8:	18c1ffcc 	andi	r3,r3,2047
1000deac:	3a10703a 	and	r8,r7,r8
1000deb0:	280ad7fa 	srli	r5,r5,31
1000deb4:	380ed7fa 	srli	r7,r7,31
1000deb8:	12401d26 	beq	r2,r9,1000df30 <__gedf2+0xa4>
1000debc:	0241ffc4 	movi	r9,2047
1000dec0:	1a401226 	beq	r3,r9,1000df0c <__gedf2+0x80>
1000dec4:	1000081e 	bne	r2,zero,1000dee8 <__gedf2+0x5c>
1000dec8:	2296b03a 	or	r11,r4,r10
1000decc:	5813003a 	cmpeq	r9,r11,zero
1000ded0:	1800091e 	bne	r3,zero,1000def8 <__gedf2+0x6c>
1000ded4:	3218b03a 	or	r12,r6,r8
1000ded8:	6000071e 	bne	r12,zero,1000def8 <__gedf2+0x6c>
1000dedc:	0005883a 	mov	r2,zero
1000dee0:	5800101e 	bne	r11,zero,1000df24 <__gedf2+0x98>
1000dee4:	f800283a 	ret
1000dee8:	18000c1e 	bne	r3,zero,1000df1c <__gedf2+0x90>
1000deec:	3212b03a 	or	r9,r6,r8
1000def0:	48000c26 	beq	r9,zero,1000df24 <__gedf2+0x98>
1000def4:	0013883a 	mov	r9,zero
1000def8:	39c03fcc 	andi	r7,r7,255
1000defc:	48000826 	beq	r9,zero,1000df20 <__gedf2+0x94>
1000df00:	38000926 	beq	r7,zero,1000df28 <__gedf2+0x9c>
1000df04:	00800044 	movi	r2,1
1000df08:	f800283a 	ret
1000df0c:	3212b03a 	or	r9,r6,r8
1000df10:	483fec26 	beq	r9,zero,1000dec4 <__alt_data_end+0xf800dec4>
1000df14:	00bfff84 	movi	r2,-2
1000df18:	f800283a 	ret
1000df1c:	39c03fcc 	andi	r7,r7,255
1000df20:	29c00626 	beq	r5,r7,1000df3c <__gedf2+0xb0>
1000df24:	283ff726 	beq	r5,zero,1000df04 <__alt_data_end+0xf800df04>
1000df28:	00bfffc4 	movi	r2,-1
1000df2c:	f800283a 	ret
1000df30:	2292b03a 	or	r9,r4,r10
1000df34:	483fe126 	beq	r9,zero,1000debc <__alt_data_end+0xf800debc>
1000df38:	003ff606 	br	1000df14 <__alt_data_end+0xf800df14>
1000df3c:	18bff916 	blt	r3,r2,1000df24 <__alt_data_end+0xf800df24>
1000df40:	10c00316 	blt	r2,r3,1000df50 <__gedf2+0xc4>
1000df44:	42bff736 	bltu	r8,r10,1000df24 <__alt_data_end+0xf800df24>
1000df48:	52000326 	beq	r10,r8,1000df58 <__gedf2+0xcc>
1000df4c:	5200042e 	bgeu	r10,r8,1000df60 <__gedf2+0xd4>
1000df50:	283fec1e 	bne	r5,zero,1000df04 <__alt_data_end+0xf800df04>
1000df54:	003ff406 	br	1000df28 <__alt_data_end+0xf800df28>
1000df58:	313ff236 	bltu	r6,r4,1000df24 <__alt_data_end+0xf800df24>
1000df5c:	21bffc36 	bltu	r4,r6,1000df50 <__alt_data_end+0xf800df50>
1000df60:	0005883a 	mov	r2,zero
1000df64:	f800283a 	ret

1000df68 <__ledf2>:
1000df68:	2804d53a 	srli	r2,r5,20
1000df6c:	3810d53a 	srli	r8,r7,20
1000df70:	00c00434 	movhi	r3,16
1000df74:	18ffffc4 	addi	r3,r3,-1
1000df78:	1081ffcc 	andi	r2,r2,2047
1000df7c:	0241ffc4 	movi	r9,2047
1000df80:	28d4703a 	and	r10,r5,r3
1000df84:	4201ffcc 	andi	r8,r8,2047
1000df88:	38c6703a 	and	r3,r7,r3
1000df8c:	280ad7fa 	srli	r5,r5,31
1000df90:	380ed7fa 	srli	r7,r7,31
1000df94:	12401f26 	beq	r2,r9,1000e014 <__ledf2+0xac>
1000df98:	0241ffc4 	movi	r9,2047
1000df9c:	42401426 	beq	r8,r9,1000dff0 <__ledf2+0x88>
1000dfa0:	1000091e 	bne	r2,zero,1000dfc8 <__ledf2+0x60>
1000dfa4:	2296b03a 	or	r11,r4,r10
1000dfa8:	5813003a 	cmpeq	r9,r11,zero
1000dfac:	29403fcc 	andi	r5,r5,255
1000dfb0:	40000a1e 	bne	r8,zero,1000dfdc <__ledf2+0x74>
1000dfb4:	30d8b03a 	or	r12,r6,r3
1000dfb8:	6000081e 	bne	r12,zero,1000dfdc <__ledf2+0x74>
1000dfbc:	0005883a 	mov	r2,zero
1000dfc0:	5800111e 	bne	r11,zero,1000e008 <__ledf2+0xa0>
1000dfc4:	f800283a 	ret
1000dfc8:	29403fcc 	andi	r5,r5,255
1000dfcc:	40000c1e 	bne	r8,zero,1000e000 <__ledf2+0x98>
1000dfd0:	30d2b03a 	or	r9,r6,r3
1000dfd4:	48000c26 	beq	r9,zero,1000e008 <__ledf2+0xa0>
1000dfd8:	0013883a 	mov	r9,zero
1000dfdc:	39c03fcc 	andi	r7,r7,255
1000dfe0:	48000826 	beq	r9,zero,1000e004 <__ledf2+0x9c>
1000dfe4:	38001126 	beq	r7,zero,1000e02c <__ledf2+0xc4>
1000dfe8:	00800044 	movi	r2,1
1000dfec:	f800283a 	ret
1000dff0:	30d2b03a 	or	r9,r6,r3
1000dff4:	483fea26 	beq	r9,zero,1000dfa0 <__alt_data_end+0xf800dfa0>
1000dff8:	00800084 	movi	r2,2
1000dffc:	f800283a 	ret
1000e000:	39c03fcc 	andi	r7,r7,255
1000e004:	39400726 	beq	r7,r5,1000e024 <__ledf2+0xbc>
1000e008:	2800081e 	bne	r5,zero,1000e02c <__ledf2+0xc4>
1000e00c:	00800044 	movi	r2,1
1000e010:	f800283a 	ret
1000e014:	2292b03a 	or	r9,r4,r10
1000e018:	483fdf26 	beq	r9,zero,1000df98 <__alt_data_end+0xf800df98>
1000e01c:	00800084 	movi	r2,2
1000e020:	f800283a 	ret
1000e024:	4080030e 	bge	r8,r2,1000e034 <__ledf2+0xcc>
1000e028:	383fef26 	beq	r7,zero,1000dfe8 <__alt_data_end+0xf800dfe8>
1000e02c:	00bfffc4 	movi	r2,-1
1000e030:	f800283a 	ret
1000e034:	123feb16 	blt	r2,r8,1000dfe4 <__alt_data_end+0xf800dfe4>
1000e038:	1abff336 	bltu	r3,r10,1000e008 <__alt_data_end+0xf800e008>
1000e03c:	50c00326 	beq	r10,r3,1000e04c <__ledf2+0xe4>
1000e040:	50c0042e 	bgeu	r10,r3,1000e054 <__ledf2+0xec>
1000e044:	283fe81e 	bne	r5,zero,1000dfe8 <__alt_data_end+0xf800dfe8>
1000e048:	003ff806 	br	1000e02c <__alt_data_end+0xf800e02c>
1000e04c:	313fee36 	bltu	r6,r4,1000e008 <__alt_data_end+0xf800e008>
1000e050:	21bffc36 	bltu	r4,r6,1000e044 <__alt_data_end+0xf800e044>
1000e054:	0005883a 	mov	r2,zero
1000e058:	f800283a 	ret

1000e05c <__muldf3>:
1000e05c:	deffee04 	addi	sp,sp,-72
1000e060:	dd000c15 	stw	r20,48(sp)
1000e064:	2828d53a 	srli	r20,r5,20
1000e068:	ddc00f15 	stw	r23,60(sp)
1000e06c:	282ed7fa 	srli	r23,r5,31
1000e070:	dc000815 	stw	r16,32(sp)
1000e074:	04000434 	movhi	r16,16
1000e078:	dcc00b15 	stw	r19,44(sp)
1000e07c:	843fffc4 	addi	r16,r16,-1
1000e080:	dfc01115 	stw	ra,68(sp)
1000e084:	df001015 	stw	fp,64(sp)
1000e088:	dd800e15 	stw	r22,56(sp)
1000e08c:	dd400d15 	stw	r21,52(sp)
1000e090:	dc800a15 	stw	r18,40(sp)
1000e094:	dc400915 	stw	r17,36(sp)
1000e098:	a501ffcc 	andi	r20,r20,2047
1000e09c:	2c20703a 	and	r16,r5,r16
1000e0a0:	b827883a 	mov	r19,r23
1000e0a4:	ba403fcc 	andi	r9,r23,255
1000e0a8:	a0006026 	beq	r20,zero,1000e22c <__muldf3+0x1d0>
1000e0ac:	0081ffc4 	movi	r2,2047
1000e0b0:	202d883a 	mov	r22,r4
1000e0b4:	a0803626 	beq	r20,r2,1000e190 <__muldf3+0x134>
1000e0b8:	84000434 	orhi	r16,r16,16
1000e0bc:	200ad77a 	srli	r5,r4,29
1000e0c0:	800490fa 	slli	r2,r16,3
1000e0c4:	202c90fa 	slli	r22,r4,3
1000e0c8:	a53f0044 	addi	r20,r20,-1023
1000e0cc:	28a0b03a 	or	r16,r5,r2
1000e0d0:	002b883a 	mov	r21,zero
1000e0d4:	000b883a 	mov	r5,zero
1000e0d8:	3804d53a 	srli	r2,r7,20
1000e0dc:	3838d7fa 	srli	fp,r7,31
1000e0e0:	04400434 	movhi	r17,16
1000e0e4:	8c7fffc4 	addi	r17,r17,-1
1000e0e8:	1081ffcc 	andi	r2,r2,2047
1000e0ec:	3025883a 	mov	r18,r6
1000e0f0:	3c62703a 	and	r17,r7,r17
1000e0f4:	e2803fcc 	andi	r10,fp,255
1000e0f8:	10006d26 	beq	r2,zero,1000e2b0 <__muldf3+0x254>
1000e0fc:	00c1ffc4 	movi	r3,2047
1000e100:	10c06526 	beq	r2,r3,1000e298 <__muldf3+0x23c>
1000e104:	8c400434 	orhi	r17,r17,16
1000e108:	300ed77a 	srli	r7,r6,29
1000e10c:	880690fa 	slli	r3,r17,3
1000e110:	302490fa 	slli	r18,r6,3
1000e114:	10bf0044 	addi	r2,r2,-1023
1000e118:	38e2b03a 	or	r17,r7,r3
1000e11c:	000f883a 	mov	r7,zero
1000e120:	a087883a 	add	r3,r20,r2
1000e124:	010003c4 	movi	r4,15
1000e128:	3d44b03a 	or	r2,r7,r21
1000e12c:	e5ccf03a 	xor	r6,fp,r23
1000e130:	1a000044 	addi	r8,r3,1
1000e134:	20809b36 	bltu	r4,r2,1000e3a4 <__muldf3+0x348>
1000e138:	100490ba 	slli	r2,r2,2
1000e13c:	01040074 	movhi	r4,4097
1000e140:	21385404 	addi	r4,r4,-7856
1000e144:	1105883a 	add	r2,r2,r4
1000e148:	10800017 	ldw	r2,0(r2)
1000e14c:	1000683a 	jmp	r2
1000e150:	1000e3a4 	muli	zero,r2,910
1000e154:	1000e1b0 	cmpltui	zero,r2,902
1000e158:	1000e1b0 	cmpltui	zero,r2,902
1000e15c:	1000e1ac 	andhi	zero,r2,902
1000e160:	1000e380 	call	11000e38 <_gp+0xfe4c84>
1000e164:	1000e380 	call	11000e38 <_gp+0xfe4c84>
1000e168:	1000e368 	cmpgeui	zero,r2,909
1000e16c:	1000e1ac 	andhi	zero,r2,902
1000e170:	1000e380 	call	11000e38 <_gp+0xfe4c84>
1000e174:	1000e368 	cmpgeui	zero,r2,909
1000e178:	1000e380 	call	11000e38 <_gp+0xfe4c84>
1000e17c:	1000e1ac 	andhi	zero,r2,902
1000e180:	1000e390 	cmplti	zero,r2,910
1000e184:	1000e390 	cmplti	zero,r2,910
1000e188:	1000e390 	cmplti	zero,r2,910
1000e18c:	1000e6f0 	cmpltui	zero,r2,923
1000e190:	2404b03a 	or	r2,r4,r16
1000e194:	1000711e 	bne	r2,zero,1000e35c <__muldf3+0x300>
1000e198:	05400204 	movi	r21,8
1000e19c:	0021883a 	mov	r16,zero
1000e1a0:	002d883a 	mov	r22,zero
1000e1a4:	01400084 	movi	r5,2
1000e1a8:	003fcb06 	br	1000e0d8 <__alt_data_end+0xf800e0d8>
1000e1ac:	500d883a 	mov	r6,r10
1000e1b0:	00800084 	movi	r2,2
1000e1b4:	38805926 	beq	r7,r2,1000e31c <__muldf3+0x2c0>
1000e1b8:	008000c4 	movi	r2,3
1000e1bc:	3881bb26 	beq	r7,r2,1000e8ac <__muldf3+0x850>
1000e1c0:	00800044 	movi	r2,1
1000e1c4:	3881961e 	bne	r7,r2,1000e820 <__muldf3+0x7c4>
1000e1c8:	3027883a 	mov	r19,r6
1000e1cc:	0005883a 	mov	r2,zero
1000e1d0:	0021883a 	mov	r16,zero
1000e1d4:	002d883a 	mov	r22,zero
1000e1d8:	1004953a 	slli	r2,r2,20
1000e1dc:	98c03fcc 	andi	r3,r19,255
1000e1e0:	04400434 	movhi	r17,16
1000e1e4:	8c7fffc4 	addi	r17,r17,-1
1000e1e8:	180697fa 	slli	r3,r3,31
1000e1ec:	8460703a 	and	r16,r16,r17
1000e1f0:	80a0b03a 	or	r16,r16,r2
1000e1f4:	80c6b03a 	or	r3,r16,r3
1000e1f8:	b005883a 	mov	r2,r22
1000e1fc:	dfc01117 	ldw	ra,68(sp)
1000e200:	df001017 	ldw	fp,64(sp)
1000e204:	ddc00f17 	ldw	r23,60(sp)
1000e208:	dd800e17 	ldw	r22,56(sp)
1000e20c:	dd400d17 	ldw	r21,52(sp)
1000e210:	dd000c17 	ldw	r20,48(sp)
1000e214:	dcc00b17 	ldw	r19,44(sp)
1000e218:	dc800a17 	ldw	r18,40(sp)
1000e21c:	dc400917 	ldw	r17,36(sp)
1000e220:	dc000817 	ldw	r16,32(sp)
1000e224:	dec01204 	addi	sp,sp,72
1000e228:	f800283a 	ret
1000e22c:	2404b03a 	or	r2,r4,r16
1000e230:	202b883a 	mov	r21,r4
1000e234:	10004426 	beq	r2,zero,1000e348 <__muldf3+0x2ec>
1000e238:	80015126 	beq	r16,zero,1000e780 <__muldf3+0x724>
1000e23c:	8009883a 	mov	r4,r16
1000e240:	d9800715 	stw	r6,28(sp)
1000e244:	d9c00215 	stw	r7,8(sp)
1000e248:	da400415 	stw	r9,16(sp)
1000e24c:	000f3c80 	call	1000f3c8 <__clzsi2>
1000e250:	d9800717 	ldw	r6,28(sp)
1000e254:	d9c00217 	ldw	r7,8(sp)
1000e258:	da400417 	ldw	r9,16(sp)
1000e25c:	113ffd44 	addi	r4,r2,-11
1000e260:	00c00704 	movi	r3,28
1000e264:	19014216 	blt	r3,r4,1000e770 <__muldf3+0x714>
1000e268:	00c00744 	movi	r3,29
1000e26c:	15bffe04 	addi	r22,r2,-8
1000e270:	1907c83a 	sub	r3,r3,r4
1000e274:	85a0983a 	sll	r16,r16,r22
1000e278:	a8c6d83a 	srl	r3,r21,r3
1000e27c:	adac983a 	sll	r22,r21,r22
1000e280:	1c20b03a 	or	r16,r3,r16
1000e284:	1080fcc4 	addi	r2,r2,1011
1000e288:	00a9c83a 	sub	r20,zero,r2
1000e28c:	002b883a 	mov	r21,zero
1000e290:	000b883a 	mov	r5,zero
1000e294:	003f9006 	br	1000e0d8 <__alt_data_end+0xf800e0d8>
1000e298:	3446b03a 	or	r3,r6,r17
1000e29c:	1800281e 	bne	r3,zero,1000e340 <__muldf3+0x2e4>
1000e2a0:	0023883a 	mov	r17,zero
1000e2a4:	0025883a 	mov	r18,zero
1000e2a8:	01c00084 	movi	r7,2
1000e2ac:	003f9c06 	br	1000e120 <__alt_data_end+0xf800e120>
1000e2b0:	3446b03a 	or	r3,r6,r17
1000e2b4:	18001e26 	beq	r3,zero,1000e330 <__muldf3+0x2d4>
1000e2b8:	88012126 	beq	r17,zero,1000e740 <__muldf3+0x6e4>
1000e2bc:	8809883a 	mov	r4,r17
1000e2c0:	d9400215 	stw	r5,8(sp)
1000e2c4:	d9800715 	stw	r6,28(sp)
1000e2c8:	da400415 	stw	r9,16(sp)
1000e2cc:	da800315 	stw	r10,12(sp)
1000e2d0:	000f3c80 	call	1000f3c8 <__clzsi2>
1000e2d4:	d9400217 	ldw	r5,8(sp)
1000e2d8:	d9800717 	ldw	r6,28(sp)
1000e2dc:	da400417 	ldw	r9,16(sp)
1000e2e0:	da800317 	ldw	r10,12(sp)
1000e2e4:	113ffd44 	addi	r4,r2,-11
1000e2e8:	00c00704 	movi	r3,28
1000e2ec:	19011016 	blt	r3,r4,1000e730 <__muldf3+0x6d4>
1000e2f0:	00c00744 	movi	r3,29
1000e2f4:	14bffe04 	addi	r18,r2,-8
1000e2f8:	1907c83a 	sub	r3,r3,r4
1000e2fc:	8ca2983a 	sll	r17,r17,r18
1000e300:	30c6d83a 	srl	r3,r6,r3
1000e304:	34a4983a 	sll	r18,r6,r18
1000e308:	1c62b03a 	or	r17,r3,r17
1000e30c:	1080fcc4 	addi	r2,r2,1011
1000e310:	0085c83a 	sub	r2,zero,r2
1000e314:	000f883a 	mov	r7,zero
1000e318:	003f8106 	br	1000e120 <__alt_data_end+0xf800e120>
1000e31c:	3027883a 	mov	r19,r6
1000e320:	0081ffc4 	movi	r2,2047
1000e324:	0021883a 	mov	r16,zero
1000e328:	002d883a 	mov	r22,zero
1000e32c:	003faa06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e330:	0023883a 	mov	r17,zero
1000e334:	0025883a 	mov	r18,zero
1000e338:	01c00044 	movi	r7,1
1000e33c:	003f7806 	br	1000e120 <__alt_data_end+0xf800e120>
1000e340:	01c000c4 	movi	r7,3
1000e344:	003f7606 	br	1000e120 <__alt_data_end+0xf800e120>
1000e348:	05400104 	movi	r21,4
1000e34c:	0021883a 	mov	r16,zero
1000e350:	002d883a 	mov	r22,zero
1000e354:	01400044 	movi	r5,1
1000e358:	003f5f06 	br	1000e0d8 <__alt_data_end+0xf800e0d8>
1000e35c:	05400304 	movi	r21,12
1000e360:	014000c4 	movi	r5,3
1000e364:	003f5c06 	br	1000e0d8 <__alt_data_end+0xf800e0d8>
1000e368:	04000434 	movhi	r16,16
1000e36c:	0027883a 	mov	r19,zero
1000e370:	843fffc4 	addi	r16,r16,-1
1000e374:	05bfffc4 	movi	r22,-1
1000e378:	0081ffc4 	movi	r2,2047
1000e37c:	003f9606 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e380:	8023883a 	mov	r17,r16
1000e384:	b025883a 	mov	r18,r22
1000e388:	280f883a 	mov	r7,r5
1000e38c:	003f8806 	br	1000e1b0 <__alt_data_end+0xf800e1b0>
1000e390:	8023883a 	mov	r17,r16
1000e394:	b025883a 	mov	r18,r22
1000e398:	480d883a 	mov	r6,r9
1000e39c:	280f883a 	mov	r7,r5
1000e3a0:	003f8306 	br	1000e1b0 <__alt_data_end+0xf800e1b0>
1000e3a4:	b026d43a 	srli	r19,r22,16
1000e3a8:	902ed43a 	srli	r23,r18,16
1000e3ac:	b5bfffcc 	andi	r22,r22,65535
1000e3b0:	94bfffcc 	andi	r18,r18,65535
1000e3b4:	b00b883a 	mov	r5,r22
1000e3b8:	9009883a 	mov	r4,r18
1000e3bc:	d8c00515 	stw	r3,20(sp)
1000e3c0:	d9800715 	stw	r6,28(sp)
1000e3c4:	da000615 	stw	r8,24(sp)
1000e3c8:	000cb600 	call	1000cb60 <__mulsi3>
1000e3cc:	980b883a 	mov	r5,r19
1000e3d0:	9009883a 	mov	r4,r18
1000e3d4:	1029883a 	mov	r20,r2
1000e3d8:	000cb600 	call	1000cb60 <__mulsi3>
1000e3dc:	b80b883a 	mov	r5,r23
1000e3e0:	9809883a 	mov	r4,r19
1000e3e4:	102b883a 	mov	r21,r2
1000e3e8:	000cb600 	call	1000cb60 <__mulsi3>
1000e3ec:	b809883a 	mov	r4,r23
1000e3f0:	b00b883a 	mov	r5,r22
1000e3f4:	1039883a 	mov	fp,r2
1000e3f8:	000cb600 	call	1000cb60 <__mulsi3>
1000e3fc:	a008d43a 	srli	r4,r20,16
1000e400:	1545883a 	add	r2,r2,r21
1000e404:	d8c00517 	ldw	r3,20(sp)
1000e408:	2085883a 	add	r2,r4,r2
1000e40c:	d9800717 	ldw	r6,28(sp)
1000e410:	da000617 	ldw	r8,24(sp)
1000e414:	1540022e 	bgeu	r2,r21,1000e420 <__muldf3+0x3c4>
1000e418:	01000074 	movhi	r4,1
1000e41c:	e139883a 	add	fp,fp,r4
1000e420:	100e943a 	slli	r7,r2,16
1000e424:	1004d43a 	srli	r2,r2,16
1000e428:	882ad43a 	srli	r21,r17,16
1000e42c:	a53fffcc 	andi	r20,r20,65535
1000e430:	8c7fffcc 	andi	r17,r17,65535
1000e434:	3d29883a 	add	r20,r7,r20
1000e438:	b00b883a 	mov	r5,r22
1000e43c:	8809883a 	mov	r4,r17
1000e440:	d8c00515 	stw	r3,20(sp)
1000e444:	d9800715 	stw	r6,28(sp)
1000e448:	da000615 	stw	r8,24(sp)
1000e44c:	dd000115 	stw	r20,4(sp)
1000e450:	d8800015 	stw	r2,0(sp)
1000e454:	000cb600 	call	1000cb60 <__mulsi3>
1000e458:	980b883a 	mov	r5,r19
1000e45c:	8809883a 	mov	r4,r17
1000e460:	d8800215 	stw	r2,8(sp)
1000e464:	000cb600 	call	1000cb60 <__mulsi3>
1000e468:	9809883a 	mov	r4,r19
1000e46c:	a80b883a 	mov	r5,r21
1000e470:	1029883a 	mov	r20,r2
1000e474:	000cb600 	call	1000cb60 <__mulsi3>
1000e478:	b00b883a 	mov	r5,r22
1000e47c:	a809883a 	mov	r4,r21
1000e480:	d8800415 	stw	r2,16(sp)
1000e484:	000cb600 	call	1000cb60 <__mulsi3>
1000e488:	d9c00217 	ldw	r7,8(sp)
1000e48c:	1505883a 	add	r2,r2,r20
1000e490:	d8c00517 	ldw	r3,20(sp)
1000e494:	3826d43a 	srli	r19,r7,16
1000e498:	d9800717 	ldw	r6,28(sp)
1000e49c:	da000617 	ldw	r8,24(sp)
1000e4a0:	9885883a 	add	r2,r19,r2
1000e4a4:	da400417 	ldw	r9,16(sp)
1000e4a8:	1500022e 	bgeu	r2,r20,1000e4b4 <__muldf3+0x458>
1000e4ac:	01000074 	movhi	r4,1
1000e4b0:	4913883a 	add	r9,r9,r4
1000e4b4:	1028d43a 	srli	r20,r2,16
1000e4b8:	1004943a 	slli	r2,r2,16
1000e4bc:	802cd43a 	srli	r22,r16,16
1000e4c0:	843fffcc 	andi	r16,r16,65535
1000e4c4:	3cffffcc 	andi	r19,r7,65535
1000e4c8:	9009883a 	mov	r4,r18
1000e4cc:	800b883a 	mov	r5,r16
1000e4d0:	a269883a 	add	r20,r20,r9
1000e4d4:	d8c00515 	stw	r3,20(sp)
1000e4d8:	d9800715 	stw	r6,28(sp)
1000e4dc:	da000615 	stw	r8,24(sp)
1000e4e0:	14e7883a 	add	r19,r2,r19
1000e4e4:	000cb600 	call	1000cb60 <__mulsi3>
1000e4e8:	9009883a 	mov	r4,r18
1000e4ec:	b00b883a 	mov	r5,r22
1000e4f0:	d8800315 	stw	r2,12(sp)
1000e4f4:	000cb600 	call	1000cb60 <__mulsi3>
1000e4f8:	b809883a 	mov	r4,r23
1000e4fc:	b00b883a 	mov	r5,r22
1000e500:	d8800215 	stw	r2,8(sp)
1000e504:	000cb600 	call	1000cb60 <__mulsi3>
1000e508:	b80b883a 	mov	r5,r23
1000e50c:	8009883a 	mov	r4,r16
1000e510:	d8800415 	stw	r2,16(sp)
1000e514:	000cb600 	call	1000cb60 <__mulsi3>
1000e518:	da800317 	ldw	r10,12(sp)
1000e51c:	d9c00217 	ldw	r7,8(sp)
1000e520:	d9000017 	ldw	r4,0(sp)
1000e524:	502ed43a 	srli	r23,r10,16
1000e528:	11c5883a 	add	r2,r2,r7
1000e52c:	24e5883a 	add	r18,r4,r19
1000e530:	b885883a 	add	r2,r23,r2
1000e534:	d8c00517 	ldw	r3,20(sp)
1000e538:	d9800717 	ldw	r6,28(sp)
1000e53c:	da000617 	ldw	r8,24(sp)
1000e540:	da400417 	ldw	r9,16(sp)
1000e544:	11c0022e 	bgeu	r2,r7,1000e550 <__muldf3+0x4f4>
1000e548:	01000074 	movhi	r4,1
1000e54c:	4913883a 	add	r9,r9,r4
1000e550:	100ed43a 	srli	r7,r2,16
1000e554:	1004943a 	slli	r2,r2,16
1000e558:	55ffffcc 	andi	r23,r10,65535
1000e55c:	3a53883a 	add	r9,r7,r9
1000e560:	8809883a 	mov	r4,r17
1000e564:	800b883a 	mov	r5,r16
1000e568:	d8c00515 	stw	r3,20(sp)
1000e56c:	d9800715 	stw	r6,28(sp)
1000e570:	da000615 	stw	r8,24(sp)
1000e574:	da400415 	stw	r9,16(sp)
1000e578:	15ef883a 	add	r23,r2,r23
1000e57c:	000cb600 	call	1000cb60 <__mulsi3>
1000e580:	8809883a 	mov	r4,r17
1000e584:	b00b883a 	mov	r5,r22
1000e588:	d8800215 	stw	r2,8(sp)
1000e58c:	000cb600 	call	1000cb60 <__mulsi3>
1000e590:	b00b883a 	mov	r5,r22
1000e594:	a809883a 	mov	r4,r21
1000e598:	d8800315 	stw	r2,12(sp)
1000e59c:	000cb600 	call	1000cb60 <__mulsi3>
1000e5a0:	8009883a 	mov	r4,r16
1000e5a4:	a80b883a 	mov	r5,r21
1000e5a8:	1023883a 	mov	r17,r2
1000e5ac:	000cb600 	call	1000cb60 <__mulsi3>
1000e5b0:	d9c00217 	ldw	r7,8(sp)
1000e5b4:	da800317 	ldw	r10,12(sp)
1000e5b8:	d8c00517 	ldw	r3,20(sp)
1000e5bc:	3808d43a 	srli	r4,r7,16
1000e5c0:	1285883a 	add	r2,r2,r10
1000e5c4:	d9800717 	ldw	r6,28(sp)
1000e5c8:	2085883a 	add	r2,r4,r2
1000e5cc:	da000617 	ldw	r8,24(sp)
1000e5d0:	da400417 	ldw	r9,16(sp)
1000e5d4:	1280022e 	bgeu	r2,r10,1000e5e0 <__muldf3+0x584>
1000e5d8:	01000074 	movhi	r4,1
1000e5dc:	8923883a 	add	r17,r17,r4
1000e5e0:	1008943a 	slli	r4,r2,16
1000e5e4:	39ffffcc 	andi	r7,r7,65535
1000e5e8:	e4b9883a 	add	fp,fp,r18
1000e5ec:	21cf883a 	add	r7,r4,r7
1000e5f0:	e4e7803a 	cmpltu	r19,fp,r19
1000e5f4:	3d0f883a 	add	r7,r7,r20
1000e5f8:	bf39883a 	add	fp,r23,fp
1000e5fc:	99c9883a 	add	r4,r19,r7
1000e600:	e5ef803a 	cmpltu	r23,fp,r23
1000e604:	490b883a 	add	r5,r9,r4
1000e608:	1004d43a 	srli	r2,r2,16
1000e60c:	b965883a 	add	r18,r23,r5
1000e610:	24c9803a 	cmpltu	r4,r4,r19
1000e614:	3d29803a 	cmpltu	r20,r7,r20
1000e618:	a128b03a 	or	r20,r20,r4
1000e61c:	95ef803a 	cmpltu	r23,r18,r23
1000e620:	2a53803a 	cmpltu	r9,r5,r9
1000e624:	a0a9883a 	add	r20,r20,r2
1000e628:	4deeb03a 	or	r23,r9,r23
1000e62c:	a5ef883a 	add	r23,r20,r23
1000e630:	bc63883a 	add	r17,r23,r17
1000e634:	e004927a 	slli	r2,fp,9
1000e638:	d9000117 	ldw	r4,4(sp)
1000e63c:	882e927a 	slli	r23,r17,9
1000e640:	9022d5fa 	srli	r17,r18,23
1000e644:	e038d5fa 	srli	fp,fp,23
1000e648:	1104b03a 	or	r2,r2,r4
1000e64c:	9024927a 	slli	r18,r18,9
1000e650:	1004c03a 	cmpne	r2,r2,zero
1000e654:	bc62b03a 	or	r17,r23,r17
1000e658:	1738b03a 	or	fp,r2,fp
1000e65c:	8880402c 	andhi	r2,r17,256
1000e660:	e4a4b03a 	or	r18,fp,r18
1000e664:	10000726 	beq	r2,zero,1000e684 <__muldf3+0x628>
1000e668:	9006d07a 	srli	r3,r18,1
1000e66c:	880497fa 	slli	r2,r17,31
1000e670:	9480004c 	andi	r18,r18,1
1000e674:	8822d07a 	srli	r17,r17,1
1000e678:	1ca4b03a 	or	r18,r3,r18
1000e67c:	14a4b03a 	or	r18,r2,r18
1000e680:	4007883a 	mov	r3,r8
1000e684:	1880ffc4 	addi	r2,r3,1023
1000e688:	0080460e 	bge	zero,r2,1000e7a4 <__muldf3+0x748>
1000e68c:	910001cc 	andi	r4,r18,7
1000e690:	20000726 	beq	r4,zero,1000e6b0 <__muldf3+0x654>
1000e694:	910003cc 	andi	r4,r18,15
1000e698:	01400104 	movi	r5,4
1000e69c:	21400426 	beq	r4,r5,1000e6b0 <__muldf3+0x654>
1000e6a0:	9149883a 	add	r4,r18,r5
1000e6a4:	24a5803a 	cmpltu	r18,r4,r18
1000e6a8:	8ca3883a 	add	r17,r17,r18
1000e6ac:	2025883a 	mov	r18,r4
1000e6b0:	8900402c 	andhi	r4,r17,256
1000e6b4:	20000426 	beq	r4,zero,1000e6c8 <__muldf3+0x66c>
1000e6b8:	18810004 	addi	r2,r3,1024
1000e6bc:	00ffc034 	movhi	r3,65280
1000e6c0:	18ffffc4 	addi	r3,r3,-1
1000e6c4:	88e2703a 	and	r17,r17,r3
1000e6c8:	00c1ff84 	movi	r3,2046
1000e6cc:	18bf1316 	blt	r3,r2,1000e31c <__alt_data_end+0xf800e31c>
1000e6d0:	882c977a 	slli	r22,r17,29
1000e6d4:	9024d0fa 	srli	r18,r18,3
1000e6d8:	8822927a 	slli	r17,r17,9
1000e6dc:	1081ffcc 	andi	r2,r2,2047
1000e6e0:	b4acb03a 	or	r22,r22,r18
1000e6e4:	8820d33a 	srli	r16,r17,12
1000e6e8:	3027883a 	mov	r19,r6
1000e6ec:	003eba06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e6f0:	8080022c 	andhi	r2,r16,8
1000e6f4:	10000926 	beq	r2,zero,1000e71c <__muldf3+0x6c0>
1000e6f8:	8880022c 	andhi	r2,r17,8
1000e6fc:	1000071e 	bne	r2,zero,1000e71c <__muldf3+0x6c0>
1000e700:	00800434 	movhi	r2,16
1000e704:	8c000234 	orhi	r16,r17,8
1000e708:	10bfffc4 	addi	r2,r2,-1
1000e70c:	e027883a 	mov	r19,fp
1000e710:	80a0703a 	and	r16,r16,r2
1000e714:	902d883a 	mov	r22,r18
1000e718:	003f1706 	br	1000e378 <__alt_data_end+0xf800e378>
1000e71c:	00800434 	movhi	r2,16
1000e720:	84000234 	orhi	r16,r16,8
1000e724:	10bfffc4 	addi	r2,r2,-1
1000e728:	80a0703a 	and	r16,r16,r2
1000e72c:	003f1206 	br	1000e378 <__alt_data_end+0xf800e378>
1000e730:	147ff604 	addi	r17,r2,-40
1000e734:	3462983a 	sll	r17,r6,r17
1000e738:	0025883a 	mov	r18,zero
1000e73c:	003ef306 	br	1000e30c <__alt_data_end+0xf800e30c>
1000e740:	3009883a 	mov	r4,r6
1000e744:	d9400215 	stw	r5,8(sp)
1000e748:	d9800715 	stw	r6,28(sp)
1000e74c:	da400415 	stw	r9,16(sp)
1000e750:	da800315 	stw	r10,12(sp)
1000e754:	000f3c80 	call	1000f3c8 <__clzsi2>
1000e758:	10800804 	addi	r2,r2,32
1000e75c:	da800317 	ldw	r10,12(sp)
1000e760:	da400417 	ldw	r9,16(sp)
1000e764:	d9800717 	ldw	r6,28(sp)
1000e768:	d9400217 	ldw	r5,8(sp)
1000e76c:	003edd06 	br	1000e2e4 <__alt_data_end+0xf800e2e4>
1000e770:	143ff604 	addi	r16,r2,-40
1000e774:	ac20983a 	sll	r16,r21,r16
1000e778:	002d883a 	mov	r22,zero
1000e77c:	003ec106 	br	1000e284 <__alt_data_end+0xf800e284>
1000e780:	d9800715 	stw	r6,28(sp)
1000e784:	d9c00215 	stw	r7,8(sp)
1000e788:	da400415 	stw	r9,16(sp)
1000e78c:	000f3c80 	call	1000f3c8 <__clzsi2>
1000e790:	10800804 	addi	r2,r2,32
1000e794:	da400417 	ldw	r9,16(sp)
1000e798:	d9c00217 	ldw	r7,8(sp)
1000e79c:	d9800717 	ldw	r6,28(sp)
1000e7a0:	003eae06 	br	1000e25c <__alt_data_end+0xf800e25c>
1000e7a4:	00c00044 	movi	r3,1
1000e7a8:	1887c83a 	sub	r3,r3,r2
1000e7ac:	01000e04 	movi	r4,56
1000e7b0:	20fe8516 	blt	r4,r3,1000e1c8 <__alt_data_end+0xf800e1c8>
1000e7b4:	010007c4 	movi	r4,31
1000e7b8:	20c01b16 	blt	r4,r3,1000e828 <__muldf3+0x7cc>
1000e7bc:	00800804 	movi	r2,32
1000e7c0:	10c5c83a 	sub	r2,r2,r3
1000e7c4:	888a983a 	sll	r5,r17,r2
1000e7c8:	90c8d83a 	srl	r4,r18,r3
1000e7cc:	9084983a 	sll	r2,r18,r2
1000e7d0:	88e2d83a 	srl	r17,r17,r3
1000e7d4:	2906b03a 	or	r3,r5,r4
1000e7d8:	1004c03a 	cmpne	r2,r2,zero
1000e7dc:	1886b03a 	or	r3,r3,r2
1000e7e0:	188001cc 	andi	r2,r3,7
1000e7e4:	10000726 	beq	r2,zero,1000e804 <__muldf3+0x7a8>
1000e7e8:	188003cc 	andi	r2,r3,15
1000e7ec:	01000104 	movi	r4,4
1000e7f0:	11000426 	beq	r2,r4,1000e804 <__muldf3+0x7a8>
1000e7f4:	1805883a 	mov	r2,r3
1000e7f8:	10c00104 	addi	r3,r2,4
1000e7fc:	1885803a 	cmpltu	r2,r3,r2
1000e800:	88a3883a 	add	r17,r17,r2
1000e804:	8880202c 	andhi	r2,r17,128
1000e808:	10001c26 	beq	r2,zero,1000e87c <__muldf3+0x820>
1000e80c:	3027883a 	mov	r19,r6
1000e810:	00800044 	movi	r2,1
1000e814:	0021883a 	mov	r16,zero
1000e818:	002d883a 	mov	r22,zero
1000e81c:	003e6e06 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e820:	4007883a 	mov	r3,r8
1000e824:	003f9706 	br	1000e684 <__alt_data_end+0xf800e684>
1000e828:	017ff844 	movi	r5,-31
1000e82c:	2885c83a 	sub	r2,r5,r2
1000e830:	888ad83a 	srl	r5,r17,r2
1000e834:	00800804 	movi	r2,32
1000e838:	18801a26 	beq	r3,r2,1000e8a4 <__muldf3+0x848>
1000e83c:	01001004 	movi	r4,64
1000e840:	20c7c83a 	sub	r3,r4,r3
1000e844:	88e2983a 	sll	r17,r17,r3
1000e848:	8ca4b03a 	or	r18,r17,r18
1000e84c:	9004c03a 	cmpne	r2,r18,zero
1000e850:	2884b03a 	or	r2,r5,r2
1000e854:	144001cc 	andi	r17,r2,7
1000e858:	88000d1e 	bne	r17,zero,1000e890 <__muldf3+0x834>
1000e85c:	0021883a 	mov	r16,zero
1000e860:	102cd0fa 	srli	r22,r2,3
1000e864:	3027883a 	mov	r19,r6
1000e868:	0005883a 	mov	r2,zero
1000e86c:	b46cb03a 	or	r22,r22,r17
1000e870:	003e5906 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e874:	1007883a 	mov	r3,r2
1000e878:	0023883a 	mov	r17,zero
1000e87c:	8820927a 	slli	r16,r17,9
1000e880:	1805883a 	mov	r2,r3
1000e884:	8822977a 	slli	r17,r17,29
1000e888:	8020d33a 	srli	r16,r16,12
1000e88c:	003ff406 	br	1000e860 <__alt_data_end+0xf800e860>
1000e890:	10c003cc 	andi	r3,r2,15
1000e894:	01000104 	movi	r4,4
1000e898:	193ff626 	beq	r3,r4,1000e874 <__alt_data_end+0xf800e874>
1000e89c:	0023883a 	mov	r17,zero
1000e8a0:	003fd506 	br	1000e7f8 <__alt_data_end+0xf800e7f8>
1000e8a4:	0023883a 	mov	r17,zero
1000e8a8:	003fe706 	br	1000e848 <__alt_data_end+0xf800e848>
1000e8ac:	00800434 	movhi	r2,16
1000e8b0:	8c000234 	orhi	r16,r17,8
1000e8b4:	10bfffc4 	addi	r2,r2,-1
1000e8b8:	3027883a 	mov	r19,r6
1000e8bc:	80a0703a 	and	r16,r16,r2
1000e8c0:	902d883a 	mov	r22,r18
1000e8c4:	003eac06 	br	1000e378 <__alt_data_end+0xf800e378>

1000e8c8 <__subdf3>:
1000e8c8:	02000434 	movhi	r8,16
1000e8cc:	423fffc4 	addi	r8,r8,-1
1000e8d0:	defffb04 	addi	sp,sp,-20
1000e8d4:	2a14703a 	and	r10,r5,r8
1000e8d8:	3812d53a 	srli	r9,r7,20
1000e8dc:	3a10703a 	and	r8,r7,r8
1000e8e0:	2006d77a 	srli	r3,r4,29
1000e8e4:	3004d77a 	srli	r2,r6,29
1000e8e8:	dc000015 	stw	r16,0(sp)
1000e8ec:	501490fa 	slli	r10,r10,3
1000e8f0:	2820d53a 	srli	r16,r5,20
1000e8f4:	401090fa 	slli	r8,r8,3
1000e8f8:	dc800215 	stw	r18,8(sp)
1000e8fc:	dc400115 	stw	r17,4(sp)
1000e900:	dfc00415 	stw	ra,16(sp)
1000e904:	202290fa 	slli	r17,r4,3
1000e908:	dcc00315 	stw	r19,12(sp)
1000e90c:	4a41ffcc 	andi	r9,r9,2047
1000e910:	0101ffc4 	movi	r4,2047
1000e914:	2824d7fa 	srli	r18,r5,31
1000e918:	8401ffcc 	andi	r16,r16,2047
1000e91c:	50c6b03a 	or	r3,r10,r3
1000e920:	380ed7fa 	srli	r7,r7,31
1000e924:	408ab03a 	or	r5,r8,r2
1000e928:	300c90fa 	slli	r6,r6,3
1000e92c:	49009626 	beq	r9,r4,1000eb88 <__subdf3+0x2c0>
1000e930:	39c0005c 	xori	r7,r7,1
1000e934:	8245c83a 	sub	r2,r16,r9
1000e938:	3c807426 	beq	r7,r18,1000eb0c <__subdf3+0x244>
1000e93c:	0080af0e 	bge	zero,r2,1000ebfc <__subdf3+0x334>
1000e940:	48002a1e 	bne	r9,zero,1000e9ec <__subdf3+0x124>
1000e944:	2988b03a 	or	r4,r5,r6
1000e948:	20009a1e 	bne	r4,zero,1000ebb4 <__subdf3+0x2ec>
1000e94c:	888001cc 	andi	r2,r17,7
1000e950:	10000726 	beq	r2,zero,1000e970 <__subdf3+0xa8>
1000e954:	888003cc 	andi	r2,r17,15
1000e958:	01000104 	movi	r4,4
1000e95c:	11000426 	beq	r2,r4,1000e970 <__subdf3+0xa8>
1000e960:	890b883a 	add	r5,r17,r4
1000e964:	2c63803a 	cmpltu	r17,r5,r17
1000e968:	1c47883a 	add	r3,r3,r17
1000e96c:	2823883a 	mov	r17,r5
1000e970:	1880202c 	andhi	r2,r3,128
1000e974:	10005926 	beq	r2,zero,1000eadc <__subdf3+0x214>
1000e978:	84000044 	addi	r16,r16,1
1000e97c:	0081ffc4 	movi	r2,2047
1000e980:	8080be26 	beq	r16,r2,1000ec7c <__subdf3+0x3b4>
1000e984:	017fe034 	movhi	r5,65408
1000e988:	297fffc4 	addi	r5,r5,-1
1000e98c:	1946703a 	and	r3,r3,r5
1000e990:	1804977a 	slli	r2,r3,29
1000e994:	1806927a 	slli	r3,r3,9
1000e998:	8822d0fa 	srli	r17,r17,3
1000e99c:	8401ffcc 	andi	r16,r16,2047
1000e9a0:	180ad33a 	srli	r5,r3,12
1000e9a4:	9100004c 	andi	r4,r18,1
1000e9a8:	1444b03a 	or	r2,r2,r17
1000e9ac:	80c1ffcc 	andi	r3,r16,2047
1000e9b0:	1820953a 	slli	r16,r3,20
1000e9b4:	20c03fcc 	andi	r3,r4,255
1000e9b8:	180897fa 	slli	r4,r3,31
1000e9bc:	00c00434 	movhi	r3,16
1000e9c0:	18ffffc4 	addi	r3,r3,-1
1000e9c4:	28c6703a 	and	r3,r5,r3
1000e9c8:	1c06b03a 	or	r3,r3,r16
1000e9cc:	1906b03a 	or	r3,r3,r4
1000e9d0:	dfc00417 	ldw	ra,16(sp)
1000e9d4:	dcc00317 	ldw	r19,12(sp)
1000e9d8:	dc800217 	ldw	r18,8(sp)
1000e9dc:	dc400117 	ldw	r17,4(sp)
1000e9e0:	dc000017 	ldw	r16,0(sp)
1000e9e4:	dec00504 	addi	sp,sp,20
1000e9e8:	f800283a 	ret
1000e9ec:	0101ffc4 	movi	r4,2047
1000e9f0:	813fd626 	beq	r16,r4,1000e94c <__alt_data_end+0xf800e94c>
1000e9f4:	29402034 	orhi	r5,r5,128
1000e9f8:	01000e04 	movi	r4,56
1000e9fc:	2080a316 	blt	r4,r2,1000ec8c <__subdf3+0x3c4>
1000ea00:	010007c4 	movi	r4,31
1000ea04:	2080c616 	blt	r4,r2,1000ed20 <__subdf3+0x458>
1000ea08:	01000804 	movi	r4,32
1000ea0c:	2089c83a 	sub	r4,r4,r2
1000ea10:	2910983a 	sll	r8,r5,r4
1000ea14:	308ed83a 	srl	r7,r6,r2
1000ea18:	3108983a 	sll	r4,r6,r4
1000ea1c:	2884d83a 	srl	r2,r5,r2
1000ea20:	41ccb03a 	or	r6,r8,r7
1000ea24:	2008c03a 	cmpne	r4,r4,zero
1000ea28:	310cb03a 	or	r6,r6,r4
1000ea2c:	898dc83a 	sub	r6,r17,r6
1000ea30:	89a3803a 	cmpltu	r17,r17,r6
1000ea34:	1887c83a 	sub	r3,r3,r2
1000ea38:	1c47c83a 	sub	r3,r3,r17
1000ea3c:	3023883a 	mov	r17,r6
1000ea40:	1880202c 	andhi	r2,r3,128
1000ea44:	10002326 	beq	r2,zero,1000ead4 <__subdf3+0x20c>
1000ea48:	04c02034 	movhi	r19,128
1000ea4c:	9cffffc4 	addi	r19,r19,-1
1000ea50:	1ce6703a 	and	r19,r3,r19
1000ea54:	98007a26 	beq	r19,zero,1000ec40 <__subdf3+0x378>
1000ea58:	9809883a 	mov	r4,r19
1000ea5c:	000f3c80 	call	1000f3c8 <__clzsi2>
1000ea60:	113ffe04 	addi	r4,r2,-8
1000ea64:	00c007c4 	movi	r3,31
1000ea68:	19007b16 	blt	r3,r4,1000ec58 <__subdf3+0x390>
1000ea6c:	00800804 	movi	r2,32
1000ea70:	1105c83a 	sub	r2,r2,r4
1000ea74:	8884d83a 	srl	r2,r17,r2
1000ea78:	9906983a 	sll	r3,r19,r4
1000ea7c:	8922983a 	sll	r17,r17,r4
1000ea80:	10c4b03a 	or	r2,r2,r3
1000ea84:	24007816 	blt	r4,r16,1000ec68 <__subdf3+0x3a0>
1000ea88:	2421c83a 	sub	r16,r4,r16
1000ea8c:	80c00044 	addi	r3,r16,1
1000ea90:	010007c4 	movi	r4,31
1000ea94:	20c09516 	blt	r4,r3,1000ecec <__subdf3+0x424>
1000ea98:	01400804 	movi	r5,32
1000ea9c:	28cbc83a 	sub	r5,r5,r3
1000eaa0:	88c8d83a 	srl	r4,r17,r3
1000eaa4:	8962983a 	sll	r17,r17,r5
1000eaa8:	114a983a 	sll	r5,r2,r5
1000eaac:	10c6d83a 	srl	r3,r2,r3
1000eab0:	8804c03a 	cmpne	r2,r17,zero
1000eab4:	290ab03a 	or	r5,r5,r4
1000eab8:	28a2b03a 	or	r17,r5,r2
1000eabc:	0021883a 	mov	r16,zero
1000eac0:	003fa206 	br	1000e94c <__alt_data_end+0xf800e94c>
1000eac4:	2090b03a 	or	r8,r4,r2
1000eac8:	40018e26 	beq	r8,zero,1000f104 <__subdf3+0x83c>
1000eacc:	1007883a 	mov	r3,r2
1000ead0:	2023883a 	mov	r17,r4
1000ead4:	888001cc 	andi	r2,r17,7
1000ead8:	103f9e1e 	bne	r2,zero,1000e954 <__alt_data_end+0xf800e954>
1000eadc:	1804977a 	slli	r2,r3,29
1000eae0:	8822d0fa 	srli	r17,r17,3
1000eae4:	1810d0fa 	srli	r8,r3,3
1000eae8:	9100004c 	andi	r4,r18,1
1000eaec:	1444b03a 	or	r2,r2,r17
1000eaf0:	00c1ffc4 	movi	r3,2047
1000eaf4:	80c02826 	beq	r16,r3,1000eb98 <__subdf3+0x2d0>
1000eaf8:	01400434 	movhi	r5,16
1000eafc:	297fffc4 	addi	r5,r5,-1
1000eb00:	80e0703a 	and	r16,r16,r3
1000eb04:	414a703a 	and	r5,r8,r5
1000eb08:	003fa806 	br	1000e9ac <__alt_data_end+0xf800e9ac>
1000eb0c:	0080630e 	bge	zero,r2,1000ec9c <__subdf3+0x3d4>
1000eb10:	48003026 	beq	r9,zero,1000ebd4 <__subdf3+0x30c>
1000eb14:	0101ffc4 	movi	r4,2047
1000eb18:	813f8c26 	beq	r16,r4,1000e94c <__alt_data_end+0xf800e94c>
1000eb1c:	29402034 	orhi	r5,r5,128
1000eb20:	01000e04 	movi	r4,56
1000eb24:	2080a90e 	bge	r4,r2,1000edcc <__subdf3+0x504>
1000eb28:	298cb03a 	or	r6,r5,r6
1000eb2c:	3012c03a 	cmpne	r9,r6,zero
1000eb30:	0005883a 	mov	r2,zero
1000eb34:	4c53883a 	add	r9,r9,r17
1000eb38:	4c63803a 	cmpltu	r17,r9,r17
1000eb3c:	10c7883a 	add	r3,r2,r3
1000eb40:	88c7883a 	add	r3,r17,r3
1000eb44:	4823883a 	mov	r17,r9
1000eb48:	1880202c 	andhi	r2,r3,128
1000eb4c:	1000d026 	beq	r2,zero,1000ee90 <__subdf3+0x5c8>
1000eb50:	84000044 	addi	r16,r16,1
1000eb54:	0081ffc4 	movi	r2,2047
1000eb58:	8080fe26 	beq	r16,r2,1000ef54 <__subdf3+0x68c>
1000eb5c:	00bfe034 	movhi	r2,65408
1000eb60:	10bfffc4 	addi	r2,r2,-1
1000eb64:	1886703a 	and	r3,r3,r2
1000eb68:	880ad07a 	srli	r5,r17,1
1000eb6c:	180497fa 	slli	r2,r3,31
1000eb70:	8900004c 	andi	r4,r17,1
1000eb74:	2922b03a 	or	r17,r5,r4
1000eb78:	1806d07a 	srli	r3,r3,1
1000eb7c:	1462b03a 	or	r17,r2,r17
1000eb80:	3825883a 	mov	r18,r7
1000eb84:	003f7106 	br	1000e94c <__alt_data_end+0xf800e94c>
1000eb88:	2984b03a 	or	r2,r5,r6
1000eb8c:	103f6826 	beq	r2,zero,1000e930 <__alt_data_end+0xf800e930>
1000eb90:	39c03fcc 	andi	r7,r7,255
1000eb94:	003f6706 	br	1000e934 <__alt_data_end+0xf800e934>
1000eb98:	4086b03a 	or	r3,r8,r2
1000eb9c:	18015226 	beq	r3,zero,1000f0e8 <__subdf3+0x820>
1000eba0:	00c00434 	movhi	r3,16
1000eba4:	41400234 	orhi	r5,r8,8
1000eba8:	18ffffc4 	addi	r3,r3,-1
1000ebac:	28ca703a 	and	r5,r5,r3
1000ebb0:	003f7e06 	br	1000e9ac <__alt_data_end+0xf800e9ac>
1000ebb4:	10bfffc4 	addi	r2,r2,-1
1000ebb8:	1000491e 	bne	r2,zero,1000ece0 <__subdf3+0x418>
1000ebbc:	898fc83a 	sub	r7,r17,r6
1000ebc0:	89e3803a 	cmpltu	r17,r17,r7
1000ebc4:	1947c83a 	sub	r3,r3,r5
1000ebc8:	1c47c83a 	sub	r3,r3,r17
1000ebcc:	3823883a 	mov	r17,r7
1000ebd0:	003f9b06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ebd4:	2988b03a 	or	r4,r5,r6
1000ebd8:	203f5c26 	beq	r4,zero,1000e94c <__alt_data_end+0xf800e94c>
1000ebdc:	10bfffc4 	addi	r2,r2,-1
1000ebe0:	1000931e 	bne	r2,zero,1000ee30 <__subdf3+0x568>
1000ebe4:	898d883a 	add	r6,r17,r6
1000ebe8:	3463803a 	cmpltu	r17,r6,r17
1000ebec:	1947883a 	add	r3,r3,r5
1000ebf0:	88c7883a 	add	r3,r17,r3
1000ebf4:	3023883a 	mov	r17,r6
1000ebf8:	003fd306 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000ebfc:	1000541e 	bne	r2,zero,1000ed50 <__subdf3+0x488>
1000ec00:	80800044 	addi	r2,r16,1
1000ec04:	1081ffcc 	andi	r2,r2,2047
1000ec08:	01000044 	movi	r4,1
1000ec0c:	2080a20e 	bge	r4,r2,1000ee98 <__subdf3+0x5d0>
1000ec10:	8989c83a 	sub	r4,r17,r6
1000ec14:	8905803a 	cmpltu	r2,r17,r4
1000ec18:	1967c83a 	sub	r19,r3,r5
1000ec1c:	98a7c83a 	sub	r19,r19,r2
1000ec20:	9880202c 	andhi	r2,r19,128
1000ec24:	10006326 	beq	r2,zero,1000edb4 <__subdf3+0x4ec>
1000ec28:	3463c83a 	sub	r17,r6,r17
1000ec2c:	28c7c83a 	sub	r3,r5,r3
1000ec30:	344d803a 	cmpltu	r6,r6,r17
1000ec34:	19a7c83a 	sub	r19,r3,r6
1000ec38:	3825883a 	mov	r18,r7
1000ec3c:	983f861e 	bne	r19,zero,1000ea58 <__alt_data_end+0xf800ea58>
1000ec40:	8809883a 	mov	r4,r17
1000ec44:	000f3c80 	call	1000f3c8 <__clzsi2>
1000ec48:	10800804 	addi	r2,r2,32
1000ec4c:	113ffe04 	addi	r4,r2,-8
1000ec50:	00c007c4 	movi	r3,31
1000ec54:	193f850e 	bge	r3,r4,1000ea6c <__alt_data_end+0xf800ea6c>
1000ec58:	10bff604 	addi	r2,r2,-40
1000ec5c:	8884983a 	sll	r2,r17,r2
1000ec60:	0023883a 	mov	r17,zero
1000ec64:	243f880e 	bge	r4,r16,1000ea88 <__alt_data_end+0xf800ea88>
1000ec68:	00ffe034 	movhi	r3,65408
1000ec6c:	18ffffc4 	addi	r3,r3,-1
1000ec70:	8121c83a 	sub	r16,r16,r4
1000ec74:	10c6703a 	and	r3,r2,r3
1000ec78:	003f3406 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ec7c:	9100004c 	andi	r4,r18,1
1000ec80:	000b883a 	mov	r5,zero
1000ec84:	0005883a 	mov	r2,zero
1000ec88:	003f4806 	br	1000e9ac <__alt_data_end+0xf800e9ac>
1000ec8c:	298cb03a 	or	r6,r5,r6
1000ec90:	300cc03a 	cmpne	r6,r6,zero
1000ec94:	0005883a 	mov	r2,zero
1000ec98:	003f6406 	br	1000ea2c <__alt_data_end+0xf800ea2c>
1000ec9c:	10009a1e 	bne	r2,zero,1000ef08 <__subdf3+0x640>
1000eca0:	82400044 	addi	r9,r16,1
1000eca4:	4881ffcc 	andi	r2,r9,2047
1000eca8:	02800044 	movi	r10,1
1000ecac:	5080670e 	bge	r10,r2,1000ee4c <__subdf3+0x584>
1000ecb0:	0081ffc4 	movi	r2,2047
1000ecb4:	4880af26 	beq	r9,r2,1000ef74 <__subdf3+0x6ac>
1000ecb8:	898d883a 	add	r6,r17,r6
1000ecbc:	1945883a 	add	r2,r3,r5
1000ecc0:	3447803a 	cmpltu	r3,r6,r17
1000ecc4:	1887883a 	add	r3,r3,r2
1000ecc8:	182297fa 	slli	r17,r3,31
1000eccc:	300cd07a 	srli	r6,r6,1
1000ecd0:	1806d07a 	srli	r3,r3,1
1000ecd4:	4821883a 	mov	r16,r9
1000ecd8:	89a2b03a 	or	r17,r17,r6
1000ecdc:	003f1b06 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ece0:	0101ffc4 	movi	r4,2047
1000ece4:	813f441e 	bne	r16,r4,1000e9f8 <__alt_data_end+0xf800e9f8>
1000ece8:	003f1806 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ecec:	843ff844 	addi	r16,r16,-31
1000ecf0:	01400804 	movi	r5,32
1000ecf4:	1408d83a 	srl	r4,r2,r16
1000ecf8:	19405026 	beq	r3,r5,1000ee3c <__subdf3+0x574>
1000ecfc:	01401004 	movi	r5,64
1000ed00:	28c7c83a 	sub	r3,r5,r3
1000ed04:	10c4983a 	sll	r2,r2,r3
1000ed08:	88a2b03a 	or	r17,r17,r2
1000ed0c:	8822c03a 	cmpne	r17,r17,zero
1000ed10:	2462b03a 	or	r17,r4,r17
1000ed14:	0007883a 	mov	r3,zero
1000ed18:	0021883a 	mov	r16,zero
1000ed1c:	003f6d06 	br	1000ead4 <__alt_data_end+0xf800ead4>
1000ed20:	11fff804 	addi	r7,r2,-32
1000ed24:	01000804 	movi	r4,32
1000ed28:	29ced83a 	srl	r7,r5,r7
1000ed2c:	11004526 	beq	r2,r4,1000ee44 <__subdf3+0x57c>
1000ed30:	01001004 	movi	r4,64
1000ed34:	2089c83a 	sub	r4,r4,r2
1000ed38:	2904983a 	sll	r2,r5,r4
1000ed3c:	118cb03a 	or	r6,r2,r6
1000ed40:	300cc03a 	cmpne	r6,r6,zero
1000ed44:	398cb03a 	or	r6,r7,r6
1000ed48:	0005883a 	mov	r2,zero
1000ed4c:	003f3706 	br	1000ea2c <__alt_data_end+0xf800ea2c>
1000ed50:	80002a26 	beq	r16,zero,1000edfc <__subdf3+0x534>
1000ed54:	0101ffc4 	movi	r4,2047
1000ed58:	49006626 	beq	r9,r4,1000eef4 <__subdf3+0x62c>
1000ed5c:	0085c83a 	sub	r2,zero,r2
1000ed60:	18c02034 	orhi	r3,r3,128
1000ed64:	01000e04 	movi	r4,56
1000ed68:	20807e16 	blt	r4,r2,1000ef64 <__subdf3+0x69c>
1000ed6c:	010007c4 	movi	r4,31
1000ed70:	2080e716 	blt	r4,r2,1000f110 <__subdf3+0x848>
1000ed74:	01000804 	movi	r4,32
1000ed78:	2089c83a 	sub	r4,r4,r2
1000ed7c:	1914983a 	sll	r10,r3,r4
1000ed80:	8890d83a 	srl	r8,r17,r2
1000ed84:	8908983a 	sll	r4,r17,r4
1000ed88:	1884d83a 	srl	r2,r3,r2
1000ed8c:	5222b03a 	or	r17,r10,r8
1000ed90:	2006c03a 	cmpne	r3,r4,zero
1000ed94:	88e2b03a 	or	r17,r17,r3
1000ed98:	3463c83a 	sub	r17,r6,r17
1000ed9c:	2885c83a 	sub	r2,r5,r2
1000eda0:	344d803a 	cmpltu	r6,r6,r17
1000eda4:	1187c83a 	sub	r3,r2,r6
1000eda8:	4821883a 	mov	r16,r9
1000edac:	3825883a 	mov	r18,r7
1000edb0:	003f2306 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000edb4:	24d0b03a 	or	r8,r4,r19
1000edb8:	40001b1e 	bne	r8,zero,1000ee28 <__subdf3+0x560>
1000edbc:	0005883a 	mov	r2,zero
1000edc0:	0009883a 	mov	r4,zero
1000edc4:	0021883a 	mov	r16,zero
1000edc8:	003f4906 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000edcc:	010007c4 	movi	r4,31
1000edd0:	20803a16 	blt	r4,r2,1000eebc <__subdf3+0x5f4>
1000edd4:	01000804 	movi	r4,32
1000edd8:	2089c83a 	sub	r4,r4,r2
1000eddc:	2912983a 	sll	r9,r5,r4
1000ede0:	3090d83a 	srl	r8,r6,r2
1000ede4:	3108983a 	sll	r4,r6,r4
1000ede8:	2884d83a 	srl	r2,r5,r2
1000edec:	4a12b03a 	or	r9,r9,r8
1000edf0:	2008c03a 	cmpne	r4,r4,zero
1000edf4:	4912b03a 	or	r9,r9,r4
1000edf8:	003f4e06 	br	1000eb34 <__alt_data_end+0xf800eb34>
1000edfc:	1c48b03a 	or	r4,r3,r17
1000ee00:	20003c26 	beq	r4,zero,1000eef4 <__subdf3+0x62c>
1000ee04:	0084303a 	nor	r2,zero,r2
1000ee08:	1000381e 	bne	r2,zero,1000eeec <__subdf3+0x624>
1000ee0c:	3463c83a 	sub	r17,r6,r17
1000ee10:	28c5c83a 	sub	r2,r5,r3
1000ee14:	344d803a 	cmpltu	r6,r6,r17
1000ee18:	1187c83a 	sub	r3,r2,r6
1000ee1c:	4821883a 	mov	r16,r9
1000ee20:	3825883a 	mov	r18,r7
1000ee24:	003f0606 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000ee28:	2023883a 	mov	r17,r4
1000ee2c:	003f0906 	br	1000ea54 <__alt_data_end+0xf800ea54>
1000ee30:	0101ffc4 	movi	r4,2047
1000ee34:	813f3a1e 	bne	r16,r4,1000eb20 <__alt_data_end+0xf800eb20>
1000ee38:	003ec406 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ee3c:	0005883a 	mov	r2,zero
1000ee40:	003fb106 	br	1000ed08 <__alt_data_end+0xf800ed08>
1000ee44:	0005883a 	mov	r2,zero
1000ee48:	003fbc06 	br	1000ed3c <__alt_data_end+0xf800ed3c>
1000ee4c:	1c44b03a 	or	r2,r3,r17
1000ee50:	80008e1e 	bne	r16,zero,1000f08c <__subdf3+0x7c4>
1000ee54:	1000c826 	beq	r2,zero,1000f178 <__subdf3+0x8b0>
1000ee58:	2984b03a 	or	r2,r5,r6
1000ee5c:	103ebb26 	beq	r2,zero,1000e94c <__alt_data_end+0xf800e94c>
1000ee60:	8989883a 	add	r4,r17,r6
1000ee64:	1945883a 	add	r2,r3,r5
1000ee68:	2447803a 	cmpltu	r3,r4,r17
1000ee6c:	1887883a 	add	r3,r3,r2
1000ee70:	1880202c 	andhi	r2,r3,128
1000ee74:	2023883a 	mov	r17,r4
1000ee78:	103f1626 	beq	r2,zero,1000ead4 <__alt_data_end+0xf800ead4>
1000ee7c:	00bfe034 	movhi	r2,65408
1000ee80:	10bfffc4 	addi	r2,r2,-1
1000ee84:	5021883a 	mov	r16,r10
1000ee88:	1886703a 	and	r3,r3,r2
1000ee8c:	003eaf06 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ee90:	3825883a 	mov	r18,r7
1000ee94:	003f0f06 	br	1000ead4 <__alt_data_end+0xf800ead4>
1000ee98:	1c44b03a 	or	r2,r3,r17
1000ee9c:	8000251e 	bne	r16,zero,1000ef34 <__subdf3+0x66c>
1000eea0:	1000661e 	bne	r2,zero,1000f03c <__subdf3+0x774>
1000eea4:	2990b03a 	or	r8,r5,r6
1000eea8:	40009626 	beq	r8,zero,1000f104 <__subdf3+0x83c>
1000eeac:	2807883a 	mov	r3,r5
1000eeb0:	3023883a 	mov	r17,r6
1000eeb4:	3825883a 	mov	r18,r7
1000eeb8:	003ea406 	br	1000e94c <__alt_data_end+0xf800e94c>
1000eebc:	127ff804 	addi	r9,r2,-32
1000eec0:	01000804 	movi	r4,32
1000eec4:	2a52d83a 	srl	r9,r5,r9
1000eec8:	11008c26 	beq	r2,r4,1000f0fc <__subdf3+0x834>
1000eecc:	01001004 	movi	r4,64
1000eed0:	2085c83a 	sub	r2,r4,r2
1000eed4:	2884983a 	sll	r2,r5,r2
1000eed8:	118cb03a 	or	r6,r2,r6
1000eedc:	300cc03a 	cmpne	r6,r6,zero
1000eee0:	4992b03a 	or	r9,r9,r6
1000eee4:	0005883a 	mov	r2,zero
1000eee8:	003f1206 	br	1000eb34 <__alt_data_end+0xf800eb34>
1000eeec:	0101ffc4 	movi	r4,2047
1000eef0:	493f9c1e 	bne	r9,r4,1000ed64 <__alt_data_end+0xf800ed64>
1000eef4:	2807883a 	mov	r3,r5
1000eef8:	3023883a 	mov	r17,r6
1000eefc:	4821883a 	mov	r16,r9
1000ef00:	3825883a 	mov	r18,r7
1000ef04:	003e9106 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ef08:	80001f1e 	bne	r16,zero,1000ef88 <__subdf3+0x6c0>
1000ef0c:	1c48b03a 	or	r4,r3,r17
1000ef10:	20005a26 	beq	r4,zero,1000f07c <__subdf3+0x7b4>
1000ef14:	0084303a 	nor	r2,zero,r2
1000ef18:	1000561e 	bne	r2,zero,1000f074 <__subdf3+0x7ac>
1000ef1c:	89a3883a 	add	r17,r17,r6
1000ef20:	1945883a 	add	r2,r3,r5
1000ef24:	898d803a 	cmpltu	r6,r17,r6
1000ef28:	3087883a 	add	r3,r6,r2
1000ef2c:	4821883a 	mov	r16,r9
1000ef30:	003f0506 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000ef34:	10002b1e 	bne	r2,zero,1000efe4 <__subdf3+0x71c>
1000ef38:	2984b03a 	or	r2,r5,r6
1000ef3c:	10008026 	beq	r2,zero,1000f140 <__subdf3+0x878>
1000ef40:	2807883a 	mov	r3,r5
1000ef44:	3023883a 	mov	r17,r6
1000ef48:	3825883a 	mov	r18,r7
1000ef4c:	0401ffc4 	movi	r16,2047
1000ef50:	003e7e06 	br	1000e94c <__alt_data_end+0xf800e94c>
1000ef54:	3809883a 	mov	r4,r7
1000ef58:	0011883a 	mov	r8,zero
1000ef5c:	0005883a 	mov	r2,zero
1000ef60:	003ee306 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000ef64:	1c62b03a 	or	r17,r3,r17
1000ef68:	8822c03a 	cmpne	r17,r17,zero
1000ef6c:	0005883a 	mov	r2,zero
1000ef70:	003f8906 	br	1000ed98 <__alt_data_end+0xf800ed98>
1000ef74:	3809883a 	mov	r4,r7
1000ef78:	4821883a 	mov	r16,r9
1000ef7c:	0011883a 	mov	r8,zero
1000ef80:	0005883a 	mov	r2,zero
1000ef84:	003eda06 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000ef88:	0101ffc4 	movi	r4,2047
1000ef8c:	49003b26 	beq	r9,r4,1000f07c <__subdf3+0x7b4>
1000ef90:	0085c83a 	sub	r2,zero,r2
1000ef94:	18c02034 	orhi	r3,r3,128
1000ef98:	01000e04 	movi	r4,56
1000ef9c:	20806e16 	blt	r4,r2,1000f158 <__subdf3+0x890>
1000efa0:	010007c4 	movi	r4,31
1000efa4:	20807716 	blt	r4,r2,1000f184 <__subdf3+0x8bc>
1000efa8:	01000804 	movi	r4,32
1000efac:	2089c83a 	sub	r4,r4,r2
1000efb0:	1914983a 	sll	r10,r3,r4
1000efb4:	8890d83a 	srl	r8,r17,r2
1000efb8:	8908983a 	sll	r4,r17,r4
1000efbc:	1884d83a 	srl	r2,r3,r2
1000efc0:	5222b03a 	or	r17,r10,r8
1000efc4:	2006c03a 	cmpne	r3,r4,zero
1000efc8:	88e2b03a 	or	r17,r17,r3
1000efcc:	89a3883a 	add	r17,r17,r6
1000efd0:	1145883a 	add	r2,r2,r5
1000efd4:	898d803a 	cmpltu	r6,r17,r6
1000efd8:	3087883a 	add	r3,r6,r2
1000efdc:	4821883a 	mov	r16,r9
1000efe0:	003ed906 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000efe4:	2984b03a 	or	r2,r5,r6
1000efe8:	10004226 	beq	r2,zero,1000f0f4 <__subdf3+0x82c>
1000efec:	1808d0fa 	srli	r4,r3,3
1000eff0:	8822d0fa 	srli	r17,r17,3
1000eff4:	1806977a 	slli	r3,r3,29
1000eff8:	2080022c 	andhi	r2,r4,8
1000effc:	1c62b03a 	or	r17,r3,r17
1000f000:	10000826 	beq	r2,zero,1000f024 <__subdf3+0x75c>
1000f004:	2812d0fa 	srli	r9,r5,3
1000f008:	4880022c 	andhi	r2,r9,8
1000f00c:	1000051e 	bne	r2,zero,1000f024 <__subdf3+0x75c>
1000f010:	300cd0fa 	srli	r6,r6,3
1000f014:	2804977a 	slli	r2,r5,29
1000f018:	4809883a 	mov	r4,r9
1000f01c:	3825883a 	mov	r18,r7
1000f020:	11a2b03a 	or	r17,r2,r6
1000f024:	8806d77a 	srli	r3,r17,29
1000f028:	200890fa 	slli	r4,r4,3
1000f02c:	882290fa 	slli	r17,r17,3
1000f030:	0401ffc4 	movi	r16,2047
1000f034:	1906b03a 	or	r3,r3,r4
1000f038:	003e4406 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f03c:	2984b03a 	or	r2,r5,r6
1000f040:	103e4226 	beq	r2,zero,1000e94c <__alt_data_end+0xf800e94c>
1000f044:	8989c83a 	sub	r4,r17,r6
1000f048:	8911803a 	cmpltu	r8,r17,r4
1000f04c:	1945c83a 	sub	r2,r3,r5
1000f050:	1205c83a 	sub	r2,r2,r8
1000f054:	1200202c 	andhi	r8,r2,128
1000f058:	403e9a26 	beq	r8,zero,1000eac4 <__alt_data_end+0xf800eac4>
1000f05c:	3463c83a 	sub	r17,r6,r17
1000f060:	28c5c83a 	sub	r2,r5,r3
1000f064:	344d803a 	cmpltu	r6,r6,r17
1000f068:	1187c83a 	sub	r3,r2,r6
1000f06c:	3825883a 	mov	r18,r7
1000f070:	003e3606 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f074:	0101ffc4 	movi	r4,2047
1000f078:	493fc71e 	bne	r9,r4,1000ef98 <__alt_data_end+0xf800ef98>
1000f07c:	2807883a 	mov	r3,r5
1000f080:	3023883a 	mov	r17,r6
1000f084:	4821883a 	mov	r16,r9
1000f088:	003e3006 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f08c:	10003626 	beq	r2,zero,1000f168 <__subdf3+0x8a0>
1000f090:	2984b03a 	or	r2,r5,r6
1000f094:	10001726 	beq	r2,zero,1000f0f4 <__subdf3+0x82c>
1000f098:	1808d0fa 	srli	r4,r3,3
1000f09c:	8822d0fa 	srli	r17,r17,3
1000f0a0:	1806977a 	slli	r3,r3,29
1000f0a4:	2080022c 	andhi	r2,r4,8
1000f0a8:	1c62b03a 	or	r17,r3,r17
1000f0ac:	10000726 	beq	r2,zero,1000f0cc <__subdf3+0x804>
1000f0b0:	2812d0fa 	srli	r9,r5,3
1000f0b4:	4880022c 	andhi	r2,r9,8
1000f0b8:	1000041e 	bne	r2,zero,1000f0cc <__subdf3+0x804>
1000f0bc:	300cd0fa 	srli	r6,r6,3
1000f0c0:	2804977a 	slli	r2,r5,29
1000f0c4:	4809883a 	mov	r4,r9
1000f0c8:	11a2b03a 	or	r17,r2,r6
1000f0cc:	8806d77a 	srli	r3,r17,29
1000f0d0:	200890fa 	slli	r4,r4,3
1000f0d4:	882290fa 	slli	r17,r17,3
1000f0d8:	3825883a 	mov	r18,r7
1000f0dc:	1906b03a 	or	r3,r3,r4
1000f0e0:	0401ffc4 	movi	r16,2047
1000f0e4:	003e1906 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f0e8:	000b883a 	mov	r5,zero
1000f0ec:	0005883a 	mov	r2,zero
1000f0f0:	003e2e06 	br	1000e9ac <__alt_data_end+0xf800e9ac>
1000f0f4:	0401ffc4 	movi	r16,2047
1000f0f8:	003e1406 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f0fc:	0005883a 	mov	r2,zero
1000f100:	003f7506 	br	1000eed8 <__alt_data_end+0xf800eed8>
1000f104:	0005883a 	mov	r2,zero
1000f108:	0009883a 	mov	r4,zero
1000f10c:	003e7806 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000f110:	123ff804 	addi	r8,r2,-32
1000f114:	01000804 	movi	r4,32
1000f118:	1a10d83a 	srl	r8,r3,r8
1000f11c:	11002526 	beq	r2,r4,1000f1b4 <__subdf3+0x8ec>
1000f120:	01001004 	movi	r4,64
1000f124:	2085c83a 	sub	r2,r4,r2
1000f128:	1884983a 	sll	r2,r3,r2
1000f12c:	1444b03a 	or	r2,r2,r17
1000f130:	1004c03a 	cmpne	r2,r2,zero
1000f134:	40a2b03a 	or	r17,r8,r2
1000f138:	0005883a 	mov	r2,zero
1000f13c:	003f1606 	br	1000ed98 <__alt_data_end+0xf800ed98>
1000f140:	02000434 	movhi	r8,16
1000f144:	0009883a 	mov	r4,zero
1000f148:	423fffc4 	addi	r8,r8,-1
1000f14c:	00bfffc4 	movi	r2,-1
1000f150:	0401ffc4 	movi	r16,2047
1000f154:	003e6606 	br	1000eaf0 <__alt_data_end+0xf800eaf0>
1000f158:	1c62b03a 	or	r17,r3,r17
1000f15c:	8822c03a 	cmpne	r17,r17,zero
1000f160:	0005883a 	mov	r2,zero
1000f164:	003f9906 	br	1000efcc <__alt_data_end+0xf800efcc>
1000f168:	2807883a 	mov	r3,r5
1000f16c:	3023883a 	mov	r17,r6
1000f170:	0401ffc4 	movi	r16,2047
1000f174:	003df506 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f178:	2807883a 	mov	r3,r5
1000f17c:	3023883a 	mov	r17,r6
1000f180:	003df206 	br	1000e94c <__alt_data_end+0xf800e94c>
1000f184:	123ff804 	addi	r8,r2,-32
1000f188:	01000804 	movi	r4,32
1000f18c:	1a10d83a 	srl	r8,r3,r8
1000f190:	11000a26 	beq	r2,r4,1000f1bc <__subdf3+0x8f4>
1000f194:	01001004 	movi	r4,64
1000f198:	2085c83a 	sub	r2,r4,r2
1000f19c:	1884983a 	sll	r2,r3,r2
1000f1a0:	1444b03a 	or	r2,r2,r17
1000f1a4:	1004c03a 	cmpne	r2,r2,zero
1000f1a8:	40a2b03a 	or	r17,r8,r2
1000f1ac:	0005883a 	mov	r2,zero
1000f1b0:	003f8606 	br	1000efcc <__alt_data_end+0xf800efcc>
1000f1b4:	0005883a 	mov	r2,zero
1000f1b8:	003fdc06 	br	1000f12c <__alt_data_end+0xf800f12c>
1000f1bc:	0005883a 	mov	r2,zero
1000f1c0:	003ff706 	br	1000f1a0 <__alt_data_end+0xf800f1a0>

1000f1c4 <__fixdfsi>:
1000f1c4:	280cd53a 	srli	r6,r5,20
1000f1c8:	00c00434 	movhi	r3,16
1000f1cc:	18ffffc4 	addi	r3,r3,-1
1000f1d0:	3181ffcc 	andi	r6,r6,2047
1000f1d4:	01c0ff84 	movi	r7,1022
1000f1d8:	28c6703a 	and	r3,r5,r3
1000f1dc:	280ad7fa 	srli	r5,r5,31
1000f1e0:	3980120e 	bge	r7,r6,1000f22c <__fixdfsi+0x68>
1000f1e4:	00810744 	movi	r2,1053
1000f1e8:	11800c16 	blt	r2,r6,1000f21c <__fixdfsi+0x58>
1000f1ec:	00810cc4 	movi	r2,1075
1000f1f0:	1185c83a 	sub	r2,r2,r6
1000f1f4:	01c007c4 	movi	r7,31
1000f1f8:	18c00434 	orhi	r3,r3,16
1000f1fc:	38800d16 	blt	r7,r2,1000f234 <__fixdfsi+0x70>
1000f200:	31befb44 	addi	r6,r6,-1043
1000f204:	2084d83a 	srl	r2,r4,r2
1000f208:	1986983a 	sll	r3,r3,r6
1000f20c:	1884b03a 	or	r2,r3,r2
1000f210:	28000726 	beq	r5,zero,1000f230 <__fixdfsi+0x6c>
1000f214:	0085c83a 	sub	r2,zero,r2
1000f218:	f800283a 	ret
1000f21c:	00a00034 	movhi	r2,32768
1000f220:	10bfffc4 	addi	r2,r2,-1
1000f224:	2885883a 	add	r2,r5,r2
1000f228:	f800283a 	ret
1000f22c:	0005883a 	mov	r2,zero
1000f230:	f800283a 	ret
1000f234:	008104c4 	movi	r2,1043
1000f238:	1185c83a 	sub	r2,r2,r6
1000f23c:	1884d83a 	srl	r2,r3,r2
1000f240:	003ff306 	br	1000f210 <__alt_data_end+0xf800f210>

1000f244 <__floatsidf>:
1000f244:	defffd04 	addi	sp,sp,-12
1000f248:	dfc00215 	stw	ra,8(sp)
1000f24c:	dc400115 	stw	r17,4(sp)
1000f250:	dc000015 	stw	r16,0(sp)
1000f254:	20002b26 	beq	r4,zero,1000f304 <__floatsidf+0xc0>
1000f258:	2023883a 	mov	r17,r4
1000f25c:	2020d7fa 	srli	r16,r4,31
1000f260:	20002d16 	blt	r4,zero,1000f318 <__floatsidf+0xd4>
1000f264:	8809883a 	mov	r4,r17
1000f268:	000f3c80 	call	1000f3c8 <__clzsi2>
1000f26c:	01410784 	movi	r5,1054
1000f270:	288bc83a 	sub	r5,r5,r2
1000f274:	01010cc4 	movi	r4,1075
1000f278:	2149c83a 	sub	r4,r4,r5
1000f27c:	00c007c4 	movi	r3,31
1000f280:	1900160e 	bge	r3,r4,1000f2dc <__floatsidf+0x98>
1000f284:	00c104c4 	movi	r3,1043
1000f288:	1947c83a 	sub	r3,r3,r5
1000f28c:	88c6983a 	sll	r3,r17,r3
1000f290:	00800434 	movhi	r2,16
1000f294:	10bfffc4 	addi	r2,r2,-1
1000f298:	1886703a 	and	r3,r3,r2
1000f29c:	2941ffcc 	andi	r5,r5,2047
1000f2a0:	800d883a 	mov	r6,r16
1000f2a4:	0005883a 	mov	r2,zero
1000f2a8:	280a953a 	slli	r5,r5,20
1000f2ac:	31803fcc 	andi	r6,r6,255
1000f2b0:	01000434 	movhi	r4,16
1000f2b4:	300c97fa 	slli	r6,r6,31
1000f2b8:	213fffc4 	addi	r4,r4,-1
1000f2bc:	1906703a 	and	r3,r3,r4
1000f2c0:	1946b03a 	or	r3,r3,r5
1000f2c4:	1986b03a 	or	r3,r3,r6
1000f2c8:	dfc00217 	ldw	ra,8(sp)
1000f2cc:	dc400117 	ldw	r17,4(sp)
1000f2d0:	dc000017 	ldw	r16,0(sp)
1000f2d4:	dec00304 	addi	sp,sp,12
1000f2d8:	f800283a 	ret
1000f2dc:	00c002c4 	movi	r3,11
1000f2e0:	1887c83a 	sub	r3,r3,r2
1000f2e4:	88c6d83a 	srl	r3,r17,r3
1000f2e8:	8904983a 	sll	r2,r17,r4
1000f2ec:	01000434 	movhi	r4,16
1000f2f0:	213fffc4 	addi	r4,r4,-1
1000f2f4:	2941ffcc 	andi	r5,r5,2047
1000f2f8:	1906703a 	and	r3,r3,r4
1000f2fc:	800d883a 	mov	r6,r16
1000f300:	003fe906 	br	1000f2a8 <__alt_data_end+0xf800f2a8>
1000f304:	000d883a 	mov	r6,zero
1000f308:	000b883a 	mov	r5,zero
1000f30c:	0007883a 	mov	r3,zero
1000f310:	0005883a 	mov	r2,zero
1000f314:	003fe406 	br	1000f2a8 <__alt_data_end+0xf800f2a8>
1000f318:	0123c83a 	sub	r17,zero,r4
1000f31c:	003fd106 	br	1000f264 <__alt_data_end+0xf800f264>

1000f320 <__floatunsidf>:
1000f320:	defffe04 	addi	sp,sp,-8
1000f324:	dc000015 	stw	r16,0(sp)
1000f328:	dfc00115 	stw	ra,4(sp)
1000f32c:	2021883a 	mov	r16,r4
1000f330:	20002226 	beq	r4,zero,1000f3bc <__floatunsidf+0x9c>
1000f334:	000f3c80 	call	1000f3c8 <__clzsi2>
1000f338:	01010784 	movi	r4,1054
1000f33c:	2089c83a 	sub	r4,r4,r2
1000f340:	01810cc4 	movi	r6,1075
1000f344:	310dc83a 	sub	r6,r6,r4
1000f348:	00c007c4 	movi	r3,31
1000f34c:	1980120e 	bge	r3,r6,1000f398 <__floatunsidf+0x78>
1000f350:	00c104c4 	movi	r3,1043
1000f354:	1907c83a 	sub	r3,r3,r4
1000f358:	80ca983a 	sll	r5,r16,r3
1000f35c:	00800434 	movhi	r2,16
1000f360:	10bfffc4 	addi	r2,r2,-1
1000f364:	2101ffcc 	andi	r4,r4,2047
1000f368:	0021883a 	mov	r16,zero
1000f36c:	288a703a 	and	r5,r5,r2
1000f370:	2008953a 	slli	r4,r4,20
1000f374:	00c00434 	movhi	r3,16
1000f378:	18ffffc4 	addi	r3,r3,-1
1000f37c:	28c6703a 	and	r3,r5,r3
1000f380:	8005883a 	mov	r2,r16
1000f384:	1906b03a 	or	r3,r3,r4
1000f388:	dfc00117 	ldw	ra,4(sp)
1000f38c:	dc000017 	ldw	r16,0(sp)
1000f390:	dec00204 	addi	sp,sp,8
1000f394:	f800283a 	ret
1000f398:	00c002c4 	movi	r3,11
1000f39c:	188bc83a 	sub	r5,r3,r2
1000f3a0:	814ad83a 	srl	r5,r16,r5
1000f3a4:	00c00434 	movhi	r3,16
1000f3a8:	18ffffc4 	addi	r3,r3,-1
1000f3ac:	81a0983a 	sll	r16,r16,r6
1000f3b0:	2101ffcc 	andi	r4,r4,2047
1000f3b4:	28ca703a 	and	r5,r5,r3
1000f3b8:	003fed06 	br	1000f370 <__alt_data_end+0xf800f370>
1000f3bc:	0009883a 	mov	r4,zero
1000f3c0:	000b883a 	mov	r5,zero
1000f3c4:	003fea06 	br	1000f370 <__alt_data_end+0xf800f370>

1000f3c8 <__clzsi2>:
1000f3c8:	00bfffd4 	movui	r2,65535
1000f3cc:	11000536 	bltu	r2,r4,1000f3e4 <__clzsi2+0x1c>
1000f3d0:	00803fc4 	movi	r2,255
1000f3d4:	11000f36 	bltu	r2,r4,1000f414 <__clzsi2+0x4c>
1000f3d8:	00800804 	movi	r2,32
1000f3dc:	0007883a 	mov	r3,zero
1000f3e0:	00000506 	br	1000f3f8 <__clzsi2+0x30>
1000f3e4:	00804034 	movhi	r2,256
1000f3e8:	10bfffc4 	addi	r2,r2,-1
1000f3ec:	11000c2e 	bgeu	r2,r4,1000f420 <__clzsi2+0x58>
1000f3f0:	00800204 	movi	r2,8
1000f3f4:	00c00604 	movi	r3,24
1000f3f8:	20c8d83a 	srl	r4,r4,r3
1000f3fc:	00c40074 	movhi	r3,4097
1000f400:	18c97504 	addi	r3,r3,9684
1000f404:	1909883a 	add	r4,r3,r4
1000f408:	20c00003 	ldbu	r3,0(r4)
1000f40c:	10c5c83a 	sub	r2,r2,r3
1000f410:	f800283a 	ret
1000f414:	00800604 	movi	r2,24
1000f418:	00c00204 	movi	r3,8
1000f41c:	003ff606 	br	1000f3f8 <__alt_data_end+0xf800f3f8>
1000f420:	00800404 	movi	r2,16
1000f424:	1007883a 	mov	r3,r2
1000f428:	003ff306 	br	1000f3f8 <__alt_data_end+0xf800f3f8>

1000f42c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f42c:	defffe04 	addi	sp,sp,-8
1000f430:	dfc00115 	stw	ra,4(sp)
1000f434:	df000015 	stw	fp,0(sp)
1000f438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f43c:	d0a00c17 	ldw	r2,-32720(gp)
1000f440:	10000326 	beq	r2,zero,1000f450 <alt_get_errno+0x24>
1000f444:	d0a00c17 	ldw	r2,-32720(gp)
1000f448:	103ee83a 	callr	r2
1000f44c:	00000106 	br	1000f454 <alt_get_errno+0x28>
1000f450:	d0a6d904 	addi	r2,gp,-25756
}
1000f454:	e037883a 	mov	sp,fp
1000f458:	dfc00117 	ldw	ra,4(sp)
1000f45c:	df000017 	ldw	fp,0(sp)
1000f460:	dec00204 	addi	sp,sp,8
1000f464:	f800283a 	ret

1000f468 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f468:	defffb04 	addi	sp,sp,-20
1000f46c:	dfc00415 	stw	ra,16(sp)
1000f470:	df000315 	stw	fp,12(sp)
1000f474:	df000304 	addi	fp,sp,12
1000f478:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f47c:	e0bfff17 	ldw	r2,-4(fp)
1000f480:	10000816 	blt	r2,zero,1000f4a4 <close+0x3c>
1000f484:	01400304 	movi	r5,12
1000f488:	e13fff17 	ldw	r4,-4(fp)
1000f48c:	000cb600 	call	1000cb60 <__mulsi3>
1000f490:	1007883a 	mov	r3,r2
1000f494:	00840074 	movhi	r2,4097
1000f498:	108bf504 	addi	r2,r2,12244
1000f49c:	1885883a 	add	r2,r3,r2
1000f4a0:	00000106 	br	1000f4a8 <close+0x40>
1000f4a4:	0005883a 	mov	r2,zero
1000f4a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f4ac:	e0bffd17 	ldw	r2,-12(fp)
1000f4b0:	10001926 	beq	r2,zero,1000f518 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f4b4:	e0bffd17 	ldw	r2,-12(fp)
1000f4b8:	10800017 	ldw	r2,0(r2)
1000f4bc:	10800417 	ldw	r2,16(r2)
1000f4c0:	10000626 	beq	r2,zero,1000f4dc <close+0x74>
1000f4c4:	e0bffd17 	ldw	r2,-12(fp)
1000f4c8:	10800017 	ldw	r2,0(r2)
1000f4cc:	10800417 	ldw	r2,16(r2)
1000f4d0:	e13ffd17 	ldw	r4,-12(fp)
1000f4d4:	103ee83a 	callr	r2
1000f4d8:	00000106 	br	1000f4e0 <close+0x78>
1000f4dc:	0005883a 	mov	r2,zero
1000f4e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f4e4:	e13fff17 	ldw	r4,-4(fp)
1000f4e8:	000fb500 	call	1000fb50 <alt_release_fd>
    if (rval < 0)
1000f4ec:	e0bffe17 	ldw	r2,-8(fp)
1000f4f0:	1000070e 	bge	r2,zero,1000f510 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f4f4:	000f42c0 	call	1000f42c <alt_get_errno>
1000f4f8:	1007883a 	mov	r3,r2
1000f4fc:	e0bffe17 	ldw	r2,-8(fp)
1000f500:	0085c83a 	sub	r2,zero,r2
1000f504:	18800015 	stw	r2,0(r3)
      return -1;
1000f508:	00bfffc4 	movi	r2,-1
1000f50c:	00000706 	br	1000f52c <close+0xc4>
    }
    return 0;
1000f510:	0005883a 	mov	r2,zero
1000f514:	00000506 	br	1000f52c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f518:	000f42c0 	call	1000f42c <alt_get_errno>
1000f51c:	1007883a 	mov	r3,r2
1000f520:	00801444 	movi	r2,81
1000f524:	18800015 	stw	r2,0(r3)
    return -1;
1000f528:	00bfffc4 	movi	r2,-1
  }
}
1000f52c:	e037883a 	mov	sp,fp
1000f530:	dfc00117 	ldw	ra,4(sp)
1000f534:	df000017 	ldw	fp,0(sp)
1000f538:	dec00204 	addi	sp,sp,8
1000f53c:	f800283a 	ret

1000f540 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f540:	defffc04 	addi	sp,sp,-16
1000f544:	df000315 	stw	fp,12(sp)
1000f548:	df000304 	addi	fp,sp,12
1000f54c:	e13ffd15 	stw	r4,-12(fp)
1000f550:	e17ffe15 	stw	r5,-8(fp)
1000f554:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f558:	e0bfff17 	ldw	r2,-4(fp)
}
1000f55c:	e037883a 	mov	sp,fp
1000f560:	df000017 	ldw	fp,0(sp)
1000f564:	dec00104 	addi	sp,sp,4
1000f568:	f800283a 	ret

1000f56c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f56c:	defffe04 	addi	sp,sp,-8
1000f570:	dfc00115 	stw	ra,4(sp)
1000f574:	df000015 	stw	fp,0(sp)
1000f578:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f57c:	d0a00c17 	ldw	r2,-32720(gp)
1000f580:	10000326 	beq	r2,zero,1000f590 <alt_get_errno+0x24>
1000f584:	d0a00c17 	ldw	r2,-32720(gp)
1000f588:	103ee83a 	callr	r2
1000f58c:	00000106 	br	1000f594 <alt_get_errno+0x28>
1000f590:	d0a6d904 	addi	r2,gp,-25756
}
1000f594:	e037883a 	mov	sp,fp
1000f598:	dfc00117 	ldw	ra,4(sp)
1000f59c:	df000017 	ldw	fp,0(sp)
1000f5a0:	dec00204 	addi	sp,sp,8
1000f5a4:	f800283a 	ret

1000f5a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f5a8:	defffb04 	addi	sp,sp,-20
1000f5ac:	dfc00415 	stw	ra,16(sp)
1000f5b0:	df000315 	stw	fp,12(sp)
1000f5b4:	df000304 	addi	fp,sp,12
1000f5b8:	e13ffe15 	stw	r4,-8(fp)
1000f5bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f5c0:	e0bffe17 	ldw	r2,-8(fp)
1000f5c4:	10000816 	blt	r2,zero,1000f5e8 <fstat+0x40>
1000f5c8:	01400304 	movi	r5,12
1000f5cc:	e13ffe17 	ldw	r4,-8(fp)
1000f5d0:	000cb600 	call	1000cb60 <__mulsi3>
1000f5d4:	1007883a 	mov	r3,r2
1000f5d8:	00840074 	movhi	r2,4097
1000f5dc:	108bf504 	addi	r2,r2,12244
1000f5e0:	1885883a 	add	r2,r3,r2
1000f5e4:	00000106 	br	1000f5ec <fstat+0x44>
1000f5e8:	0005883a 	mov	r2,zero
1000f5ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f5f0:	e0bffd17 	ldw	r2,-12(fp)
1000f5f4:	10001026 	beq	r2,zero,1000f638 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f5f8:	e0bffd17 	ldw	r2,-12(fp)
1000f5fc:	10800017 	ldw	r2,0(r2)
1000f600:	10800817 	ldw	r2,32(r2)
1000f604:	10000726 	beq	r2,zero,1000f624 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f608:	e0bffd17 	ldw	r2,-12(fp)
1000f60c:	10800017 	ldw	r2,0(r2)
1000f610:	10800817 	ldw	r2,32(r2)
1000f614:	e17fff17 	ldw	r5,-4(fp)
1000f618:	e13ffd17 	ldw	r4,-12(fp)
1000f61c:	103ee83a 	callr	r2
1000f620:	00000a06 	br	1000f64c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f624:	e0bfff17 	ldw	r2,-4(fp)
1000f628:	00c80004 	movi	r3,8192
1000f62c:	10c00115 	stw	r3,4(r2)
      return 0;
1000f630:	0005883a 	mov	r2,zero
1000f634:	00000506 	br	1000f64c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f638:	000f56c0 	call	1000f56c <alt_get_errno>
1000f63c:	1007883a 	mov	r3,r2
1000f640:	00801444 	movi	r2,81
1000f644:	18800015 	stw	r2,0(r3)
    return -1;
1000f648:	00bfffc4 	movi	r2,-1
  }
}
1000f64c:	e037883a 	mov	sp,fp
1000f650:	dfc00117 	ldw	ra,4(sp)
1000f654:	df000017 	ldw	fp,0(sp)
1000f658:	dec00204 	addi	sp,sp,8
1000f65c:	f800283a 	ret

1000f660 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f660:	defffe04 	addi	sp,sp,-8
1000f664:	dfc00115 	stw	ra,4(sp)
1000f668:	df000015 	stw	fp,0(sp)
1000f66c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f670:	d0a00c17 	ldw	r2,-32720(gp)
1000f674:	10000326 	beq	r2,zero,1000f684 <alt_get_errno+0x24>
1000f678:	d0a00c17 	ldw	r2,-32720(gp)
1000f67c:	103ee83a 	callr	r2
1000f680:	00000106 	br	1000f688 <alt_get_errno+0x28>
1000f684:	d0a6d904 	addi	r2,gp,-25756
}
1000f688:	e037883a 	mov	sp,fp
1000f68c:	dfc00117 	ldw	ra,4(sp)
1000f690:	df000017 	ldw	fp,0(sp)
1000f694:	dec00204 	addi	sp,sp,8
1000f698:	f800283a 	ret

1000f69c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f69c:	deffed04 	addi	sp,sp,-76
1000f6a0:	dfc01215 	stw	ra,72(sp)
1000f6a4:	df001115 	stw	fp,68(sp)
1000f6a8:	df001104 	addi	fp,sp,68
1000f6ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f6b0:	e0bfff17 	ldw	r2,-4(fp)
1000f6b4:	10000816 	blt	r2,zero,1000f6d8 <isatty+0x3c>
1000f6b8:	01400304 	movi	r5,12
1000f6bc:	e13fff17 	ldw	r4,-4(fp)
1000f6c0:	000cb600 	call	1000cb60 <__mulsi3>
1000f6c4:	1007883a 	mov	r3,r2
1000f6c8:	00840074 	movhi	r2,4097
1000f6cc:	108bf504 	addi	r2,r2,12244
1000f6d0:	1885883a 	add	r2,r3,r2
1000f6d4:	00000106 	br	1000f6dc <isatty+0x40>
1000f6d8:	0005883a 	mov	r2,zero
1000f6dc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f6e0:	e0bfef17 	ldw	r2,-68(fp)
1000f6e4:	10000e26 	beq	r2,zero,1000f720 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f6e8:	e0bfef17 	ldw	r2,-68(fp)
1000f6ec:	10800017 	ldw	r2,0(r2)
1000f6f0:	10800817 	ldw	r2,32(r2)
1000f6f4:	1000021e 	bne	r2,zero,1000f700 <isatty+0x64>
    {
      return 1;
1000f6f8:	00800044 	movi	r2,1
1000f6fc:	00000d06 	br	1000f734 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f700:	e0bff004 	addi	r2,fp,-64
1000f704:	100b883a 	mov	r5,r2
1000f708:	e13fff17 	ldw	r4,-4(fp)
1000f70c:	000f5a80 	call	1000f5a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f710:	e0bff117 	ldw	r2,-60(fp)
1000f714:	10880020 	cmpeqi	r2,r2,8192
1000f718:	10803fcc 	andi	r2,r2,255
1000f71c:	00000506 	br	1000f734 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f720:	000f6600 	call	1000f660 <alt_get_errno>
1000f724:	1007883a 	mov	r3,r2
1000f728:	00801444 	movi	r2,81
1000f72c:	18800015 	stw	r2,0(r3)
    return 0;
1000f730:	0005883a 	mov	r2,zero
  }
}
1000f734:	e037883a 	mov	sp,fp
1000f738:	dfc00117 	ldw	ra,4(sp)
1000f73c:	df000017 	ldw	fp,0(sp)
1000f740:	dec00204 	addi	sp,sp,8
1000f744:	f800283a 	ret

1000f748 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f748:	defffc04 	addi	sp,sp,-16
1000f74c:	df000315 	stw	fp,12(sp)
1000f750:	df000304 	addi	fp,sp,12
1000f754:	e13ffd15 	stw	r4,-12(fp)
1000f758:	e17ffe15 	stw	r5,-8(fp)
1000f75c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f760:	e0fffe17 	ldw	r3,-8(fp)
1000f764:	e0bffd17 	ldw	r2,-12(fp)
1000f768:	18800c26 	beq	r3,r2,1000f79c <alt_load_section+0x54>
  {
    while( to != end )
1000f76c:	00000806 	br	1000f790 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f770:	e0bffe17 	ldw	r2,-8(fp)
1000f774:	10c00104 	addi	r3,r2,4
1000f778:	e0fffe15 	stw	r3,-8(fp)
1000f77c:	e0fffd17 	ldw	r3,-12(fp)
1000f780:	19000104 	addi	r4,r3,4
1000f784:	e13ffd15 	stw	r4,-12(fp)
1000f788:	18c00017 	ldw	r3,0(r3)
1000f78c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f790:	e0fffe17 	ldw	r3,-8(fp)
1000f794:	e0bfff17 	ldw	r2,-4(fp)
1000f798:	18bff51e 	bne	r3,r2,1000f770 <__alt_data_end+0xf800f770>
    {
      *to++ = *from++;
    }
  }
}
1000f79c:	0001883a 	nop
1000f7a0:	e037883a 	mov	sp,fp
1000f7a4:	df000017 	ldw	fp,0(sp)
1000f7a8:	dec00104 	addi	sp,sp,4
1000f7ac:	f800283a 	ret

1000f7b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f7b0:	defffe04 	addi	sp,sp,-8
1000f7b4:	dfc00115 	stw	ra,4(sp)
1000f7b8:	df000015 	stw	fp,0(sp)
1000f7bc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f7c0:	01840074 	movhi	r6,4097
1000f7c4:	31907e04 	addi	r6,r6,16888
1000f7c8:	01440074 	movhi	r5,4097
1000f7cc:	2949c204 	addi	r5,r5,9992
1000f7d0:	01040074 	movhi	r4,4097
1000f7d4:	21107e04 	addi	r4,r4,16888
1000f7d8:	000f7480 	call	1000f748 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f7dc:	01840034 	movhi	r6,4096
1000f7e0:	31808c04 	addi	r6,r6,560
1000f7e4:	01440034 	movhi	r5,4096
1000f7e8:	29400804 	addi	r5,r5,32
1000f7ec:	01040034 	movhi	r4,4096
1000f7f0:	21000804 	addi	r4,r4,32
1000f7f4:	000f7480 	call	1000f748 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f7f8:	01840074 	movhi	r6,4097
1000f7fc:	3189c204 	addi	r6,r6,9992
1000f800:	01440074 	movhi	r5,4097
1000f804:	29471304 	addi	r5,r5,7244
1000f808:	01040074 	movhi	r4,4097
1000f80c:	21071304 	addi	r4,r4,7244
1000f810:	000f7480 	call	1000f748 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f814:	0010b940 	call	10010b94 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f818:	0010d540 	call	10010d54 <alt_icache_flush_all>
}
1000f81c:	0001883a 	nop
1000f820:	e037883a 	mov	sp,fp
1000f824:	dfc00117 	ldw	ra,4(sp)
1000f828:	df000017 	ldw	fp,0(sp)
1000f82c:	dec00204 	addi	sp,sp,8
1000f830:	f800283a 	ret

1000f834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f834:	defffe04 	addi	sp,sp,-8
1000f838:	dfc00115 	stw	ra,4(sp)
1000f83c:	df000015 	stw	fp,0(sp)
1000f840:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f844:	d0a00c17 	ldw	r2,-32720(gp)
1000f848:	10000326 	beq	r2,zero,1000f858 <alt_get_errno+0x24>
1000f84c:	d0a00c17 	ldw	r2,-32720(gp)
1000f850:	103ee83a 	callr	r2
1000f854:	00000106 	br	1000f85c <alt_get_errno+0x28>
1000f858:	d0a6d904 	addi	r2,gp,-25756
}
1000f85c:	e037883a 	mov	sp,fp
1000f860:	dfc00117 	ldw	ra,4(sp)
1000f864:	df000017 	ldw	fp,0(sp)
1000f868:	dec00204 	addi	sp,sp,8
1000f86c:	f800283a 	ret

1000f870 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f870:	defff904 	addi	sp,sp,-28
1000f874:	dfc00615 	stw	ra,24(sp)
1000f878:	df000515 	stw	fp,20(sp)
1000f87c:	df000504 	addi	fp,sp,20
1000f880:	e13ffd15 	stw	r4,-12(fp)
1000f884:	e17ffe15 	stw	r5,-8(fp)
1000f888:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f88c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f890:	e0bffd17 	ldw	r2,-12(fp)
1000f894:	10000816 	blt	r2,zero,1000f8b8 <lseek+0x48>
1000f898:	01400304 	movi	r5,12
1000f89c:	e13ffd17 	ldw	r4,-12(fp)
1000f8a0:	000cb600 	call	1000cb60 <__mulsi3>
1000f8a4:	1007883a 	mov	r3,r2
1000f8a8:	00840074 	movhi	r2,4097
1000f8ac:	108bf504 	addi	r2,r2,12244
1000f8b0:	1885883a 	add	r2,r3,r2
1000f8b4:	00000106 	br	1000f8bc <lseek+0x4c>
1000f8b8:	0005883a 	mov	r2,zero
1000f8bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f8c0:	e0bffc17 	ldw	r2,-16(fp)
1000f8c4:	10001026 	beq	r2,zero,1000f908 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f8c8:	e0bffc17 	ldw	r2,-16(fp)
1000f8cc:	10800017 	ldw	r2,0(r2)
1000f8d0:	10800717 	ldw	r2,28(r2)
1000f8d4:	10000926 	beq	r2,zero,1000f8fc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f8d8:	e0bffc17 	ldw	r2,-16(fp)
1000f8dc:	10800017 	ldw	r2,0(r2)
1000f8e0:	10800717 	ldw	r2,28(r2)
1000f8e4:	e1bfff17 	ldw	r6,-4(fp)
1000f8e8:	e17ffe17 	ldw	r5,-8(fp)
1000f8ec:	e13ffc17 	ldw	r4,-16(fp)
1000f8f0:	103ee83a 	callr	r2
1000f8f4:	e0bffb15 	stw	r2,-20(fp)
1000f8f8:	00000506 	br	1000f910 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f8fc:	00bfde84 	movi	r2,-134
1000f900:	e0bffb15 	stw	r2,-20(fp)
1000f904:	00000206 	br	1000f910 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f908:	00bfebc4 	movi	r2,-81
1000f90c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f910:	e0bffb17 	ldw	r2,-20(fp)
1000f914:	1000070e 	bge	r2,zero,1000f934 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f918:	000f8340 	call	1000f834 <alt_get_errno>
1000f91c:	1007883a 	mov	r3,r2
1000f920:	e0bffb17 	ldw	r2,-20(fp)
1000f924:	0085c83a 	sub	r2,zero,r2
1000f928:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f92c:	00bfffc4 	movi	r2,-1
1000f930:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f934:	e0bffb17 	ldw	r2,-20(fp)
}
1000f938:	e037883a 	mov	sp,fp
1000f93c:	dfc00117 	ldw	ra,4(sp)
1000f940:	df000017 	ldw	fp,0(sp)
1000f944:	dec00204 	addi	sp,sp,8
1000f948:	f800283a 	ret

1000f94c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f94c:	defffd04 	addi	sp,sp,-12
1000f950:	dfc00215 	stw	ra,8(sp)
1000f954:	df000115 	stw	fp,4(sp)
1000f958:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f95c:	0009883a 	mov	r4,zero
1000f960:	000fe240 	call	1000fe24 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f964:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f968:	000fe5c0 	call	1000fe5c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f96c:	01840074 	movhi	r6,4097
1000f970:	3189b804 	addi	r6,r6,9952
1000f974:	01440074 	movhi	r5,4097
1000f978:	2949b804 	addi	r5,r5,9952
1000f97c:	01040074 	movhi	r4,4097
1000f980:	2109b804 	addi	r4,r4,9952
1000f984:	00110f80 	call	100110f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f988:	0010c940 	call	10010c94 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f98c:	01040074 	movhi	r4,4097
1000f990:	21033d04 	addi	r4,r4,3316
1000f994:	00118b80 	call	100118b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f998:	d0a6da17 	ldw	r2,-25752(gp)
1000f99c:	d0e6db17 	ldw	r3,-25748(gp)
1000f9a0:	d126dc17 	ldw	r4,-25744(gp)
1000f9a4:	200d883a 	mov	r6,r4
1000f9a8:	180b883a 	mov	r5,r3
1000f9ac:	1009883a 	mov	r4,r2
1000f9b0:	00024a40 	call	100024a4 <main>
1000f9b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f9b8:	01000044 	movi	r4,1
1000f9bc:	000f4680 	call	1000f468 <close>
  exit (result);
1000f9c0:	e13fff17 	ldw	r4,-4(fp)
1000f9c4:	00118cc0 	call	100118cc <exit>

1000f9c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f9c8:	defffe04 	addi	sp,sp,-8
1000f9cc:	df000115 	stw	fp,4(sp)
1000f9d0:	df000104 	addi	fp,sp,4
1000f9d4:	e13fff15 	stw	r4,-4(fp)
}
1000f9d8:	0001883a 	nop
1000f9dc:	e037883a 	mov	sp,fp
1000f9e0:	df000017 	ldw	fp,0(sp)
1000f9e4:	dec00104 	addi	sp,sp,4
1000f9e8:	f800283a 	ret

1000f9ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f9ec:	defffe04 	addi	sp,sp,-8
1000f9f0:	df000115 	stw	fp,4(sp)
1000f9f4:	df000104 	addi	fp,sp,4
1000f9f8:	e13fff15 	stw	r4,-4(fp)
}
1000f9fc:	0001883a 	nop
1000fa00:	e037883a 	mov	sp,fp
1000fa04:	df000017 	ldw	fp,0(sp)
1000fa08:	dec00104 	addi	sp,sp,4
1000fa0c:	f800283a 	ret

1000fa10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fa10:	defffe04 	addi	sp,sp,-8
1000fa14:	dfc00115 	stw	ra,4(sp)
1000fa18:	df000015 	stw	fp,0(sp)
1000fa1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa20:	d0a00c17 	ldw	r2,-32720(gp)
1000fa24:	10000326 	beq	r2,zero,1000fa34 <alt_get_errno+0x24>
1000fa28:	d0a00c17 	ldw	r2,-32720(gp)
1000fa2c:	103ee83a 	callr	r2
1000fa30:	00000106 	br	1000fa38 <alt_get_errno+0x28>
1000fa34:	d0a6d904 	addi	r2,gp,-25756
}
1000fa38:	e037883a 	mov	sp,fp
1000fa3c:	dfc00117 	ldw	ra,4(sp)
1000fa40:	df000017 	ldw	fp,0(sp)
1000fa44:	dec00204 	addi	sp,sp,8
1000fa48:	f800283a 	ret

1000fa4c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fa4c:	defff904 	addi	sp,sp,-28
1000fa50:	dfc00615 	stw	ra,24(sp)
1000fa54:	df000515 	stw	fp,20(sp)
1000fa58:	df000504 	addi	fp,sp,20
1000fa5c:	e13ffd15 	stw	r4,-12(fp)
1000fa60:	e17ffe15 	stw	r5,-8(fp)
1000fa64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fa68:	e0bffd17 	ldw	r2,-12(fp)
1000fa6c:	10000816 	blt	r2,zero,1000fa90 <read+0x44>
1000fa70:	01400304 	movi	r5,12
1000fa74:	e13ffd17 	ldw	r4,-12(fp)
1000fa78:	000cb600 	call	1000cb60 <__mulsi3>
1000fa7c:	1007883a 	mov	r3,r2
1000fa80:	00840074 	movhi	r2,4097
1000fa84:	108bf504 	addi	r2,r2,12244
1000fa88:	1885883a 	add	r2,r3,r2
1000fa8c:	00000106 	br	1000fa94 <read+0x48>
1000fa90:	0005883a 	mov	r2,zero
1000fa94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fa98:	e0bffb17 	ldw	r2,-20(fp)
1000fa9c:	10002226 	beq	r2,zero,1000fb28 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000faa0:	e0bffb17 	ldw	r2,-20(fp)
1000faa4:	10800217 	ldw	r2,8(r2)
1000faa8:	108000cc 	andi	r2,r2,3
1000faac:	10800060 	cmpeqi	r2,r2,1
1000fab0:	1000181e 	bne	r2,zero,1000fb14 <read+0xc8>
        (fd->dev->read))
1000fab4:	e0bffb17 	ldw	r2,-20(fp)
1000fab8:	10800017 	ldw	r2,0(r2)
1000fabc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fac0:	10001426 	beq	r2,zero,1000fb14 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fac4:	e0bffb17 	ldw	r2,-20(fp)
1000fac8:	10800017 	ldw	r2,0(r2)
1000facc:	10800517 	ldw	r2,20(r2)
1000fad0:	e0ffff17 	ldw	r3,-4(fp)
1000fad4:	180d883a 	mov	r6,r3
1000fad8:	e17ffe17 	ldw	r5,-8(fp)
1000fadc:	e13ffb17 	ldw	r4,-20(fp)
1000fae0:	103ee83a 	callr	r2
1000fae4:	e0bffc15 	stw	r2,-16(fp)
1000fae8:	e0bffc17 	ldw	r2,-16(fp)
1000faec:	1000070e 	bge	r2,zero,1000fb0c <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000faf0:	000fa100 	call	1000fa10 <alt_get_errno>
1000faf4:	1007883a 	mov	r3,r2
1000faf8:	e0bffc17 	ldw	r2,-16(fp)
1000fafc:	0085c83a 	sub	r2,zero,r2
1000fb00:	18800015 	stw	r2,0(r3)
          return -1;
1000fb04:	00bfffc4 	movi	r2,-1
1000fb08:	00000c06 	br	1000fb3c <read+0xf0>
        }
        return rval;
1000fb0c:	e0bffc17 	ldw	r2,-16(fp)
1000fb10:	00000a06 	br	1000fb3c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fb14:	000fa100 	call	1000fa10 <alt_get_errno>
1000fb18:	1007883a 	mov	r3,r2
1000fb1c:	00800344 	movi	r2,13
1000fb20:	18800015 	stw	r2,0(r3)
1000fb24:	00000406 	br	1000fb38 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fb28:	000fa100 	call	1000fa10 <alt_get_errno>
1000fb2c:	1007883a 	mov	r3,r2
1000fb30:	00801444 	movi	r2,81
1000fb34:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fb38:	00bfffc4 	movi	r2,-1
}
1000fb3c:	e037883a 	mov	sp,fp
1000fb40:	dfc00117 	ldw	ra,4(sp)
1000fb44:	df000017 	ldw	fp,0(sp)
1000fb48:	dec00204 	addi	sp,sp,8
1000fb4c:	f800283a 	ret

1000fb50 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fb50:	defffc04 	addi	sp,sp,-16
1000fb54:	dfc00315 	stw	ra,12(sp)
1000fb58:	df000215 	stw	fp,8(sp)
1000fb5c:	dc000115 	stw	r16,4(sp)
1000fb60:	df000204 	addi	fp,sp,8
1000fb64:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000fb68:	e0bffe17 	ldw	r2,-8(fp)
1000fb6c:	108000d0 	cmplti	r2,r2,3
1000fb70:	1000111e 	bne	r2,zero,1000fbb8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fb74:	04040074 	movhi	r16,4097
1000fb78:	840bf504 	addi	r16,r16,12244
1000fb7c:	e0bffe17 	ldw	r2,-8(fp)
1000fb80:	01400304 	movi	r5,12
1000fb84:	1009883a 	mov	r4,r2
1000fb88:	000cb600 	call	1000cb60 <__mulsi3>
1000fb8c:	8085883a 	add	r2,r16,r2
1000fb90:	10800204 	addi	r2,r2,8
1000fb94:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000fb98:	04040074 	movhi	r16,4097
1000fb9c:	840bf504 	addi	r16,r16,12244
1000fba0:	e0bffe17 	ldw	r2,-8(fp)
1000fba4:	01400304 	movi	r5,12
1000fba8:	1009883a 	mov	r4,r2
1000fbac:	000cb600 	call	1000cb60 <__mulsi3>
1000fbb0:	8085883a 	add	r2,r16,r2
1000fbb4:	10000015 	stw	zero,0(r2)
  }
}
1000fbb8:	0001883a 	nop
1000fbbc:	e6ffff04 	addi	sp,fp,-4
1000fbc0:	dfc00217 	ldw	ra,8(sp)
1000fbc4:	df000117 	ldw	fp,4(sp)
1000fbc8:	dc000017 	ldw	r16,0(sp)
1000fbcc:	dec00304 	addi	sp,sp,12
1000fbd0:	f800283a 	ret

1000fbd4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fbd4:	defff904 	addi	sp,sp,-28
1000fbd8:	df000615 	stw	fp,24(sp)
1000fbdc:	df000604 	addi	fp,sp,24
1000fbe0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fbe4:	0005303a 	rdctl	r2,status
1000fbe8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fbec:	e0fffe17 	ldw	r3,-8(fp)
1000fbf0:	00bfff84 	movi	r2,-2
1000fbf4:	1884703a 	and	r2,r3,r2
1000fbf8:	1001703a 	wrctl	status,r2
  
  return context;
1000fbfc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000fc00:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000fc04:	d0a00d17 	ldw	r2,-32716(gp)
1000fc08:	10c000c4 	addi	r3,r2,3
1000fc0c:	00bfff04 	movi	r2,-4
1000fc10:	1884703a 	and	r2,r3,r2
1000fc14:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fc18:	d0e00d17 	ldw	r3,-32716(gp)
1000fc1c:	e0bfff17 	ldw	r2,-4(fp)
1000fc20:	1887883a 	add	r3,r3,r2
1000fc24:	00860034 	movhi	r2,6144
1000fc28:	10800004 	addi	r2,r2,0
1000fc2c:	10c0062e 	bgeu	r2,r3,1000fc48 <sbrk+0x74>
1000fc30:	e0bffb17 	ldw	r2,-20(fp)
1000fc34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fc38:	e0bffa17 	ldw	r2,-24(fp)
1000fc3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fc40:	00bfffc4 	movi	r2,-1
1000fc44:	00000b06 	br	1000fc74 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000fc48:	d0a00d17 	ldw	r2,-32716(gp)
1000fc4c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000fc50:	d0e00d17 	ldw	r3,-32716(gp)
1000fc54:	e0bfff17 	ldw	r2,-4(fp)
1000fc58:	1885883a 	add	r2,r3,r2
1000fc5c:	d0a00d15 	stw	r2,-32716(gp)
1000fc60:	e0bffb17 	ldw	r2,-20(fp)
1000fc64:	e0bffc15 	stw	r2,-16(fp)
1000fc68:	e0bffc17 	ldw	r2,-16(fp)
1000fc6c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fc70:	e0bffd17 	ldw	r2,-12(fp)
} 
1000fc74:	e037883a 	mov	sp,fp
1000fc78:	df000017 	ldw	fp,0(sp)
1000fc7c:	dec00104 	addi	sp,sp,4
1000fc80:	f800283a 	ret

1000fc84 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000fc84:	defffd04 	addi	sp,sp,-12
1000fc88:	dfc00215 	stw	ra,8(sp)
1000fc8c:	df000115 	stw	fp,4(sp)
1000fc90:	df000104 	addi	fp,sp,4
1000fc94:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000fc98:	e13fff17 	ldw	r4,-4(fp)
1000fc9c:	0010a3c0 	call	10010a3c <alt_busy_sleep>
}
1000fca0:	e037883a 	mov	sp,fp
1000fca4:	dfc00117 	ldw	ra,4(sp)
1000fca8:	df000017 	ldw	fp,0(sp)
1000fcac:	dec00204 	addi	sp,sp,8
1000fcb0:	f800283a 	ret

1000fcb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000fcb4:	defffe04 	addi	sp,sp,-8
1000fcb8:	dfc00115 	stw	ra,4(sp)
1000fcbc:	df000015 	stw	fp,0(sp)
1000fcc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fcc4:	d0a00c17 	ldw	r2,-32720(gp)
1000fcc8:	10000326 	beq	r2,zero,1000fcd8 <alt_get_errno+0x24>
1000fccc:	d0a00c17 	ldw	r2,-32720(gp)
1000fcd0:	103ee83a 	callr	r2
1000fcd4:	00000106 	br	1000fcdc <alt_get_errno+0x28>
1000fcd8:	d0a6d904 	addi	r2,gp,-25756
}
1000fcdc:	e037883a 	mov	sp,fp
1000fce0:	dfc00117 	ldw	ra,4(sp)
1000fce4:	df000017 	ldw	fp,0(sp)
1000fce8:	dec00204 	addi	sp,sp,8
1000fcec:	f800283a 	ret

1000fcf0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000fcf0:	defff904 	addi	sp,sp,-28
1000fcf4:	dfc00615 	stw	ra,24(sp)
1000fcf8:	df000515 	stw	fp,20(sp)
1000fcfc:	df000504 	addi	fp,sp,20
1000fd00:	e13ffd15 	stw	r4,-12(fp)
1000fd04:	e17ffe15 	stw	r5,-8(fp)
1000fd08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fd0c:	e0bffd17 	ldw	r2,-12(fp)
1000fd10:	10000816 	blt	r2,zero,1000fd34 <write+0x44>
1000fd14:	01400304 	movi	r5,12
1000fd18:	e13ffd17 	ldw	r4,-12(fp)
1000fd1c:	000cb600 	call	1000cb60 <__mulsi3>
1000fd20:	1007883a 	mov	r3,r2
1000fd24:	00840074 	movhi	r2,4097
1000fd28:	108bf504 	addi	r2,r2,12244
1000fd2c:	1885883a 	add	r2,r3,r2
1000fd30:	00000106 	br	1000fd38 <write+0x48>
1000fd34:	0005883a 	mov	r2,zero
1000fd38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000fd3c:	e0bffb17 	ldw	r2,-20(fp)
1000fd40:	10002126 	beq	r2,zero,1000fdc8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000fd44:	e0bffb17 	ldw	r2,-20(fp)
1000fd48:	10800217 	ldw	r2,8(r2)
1000fd4c:	108000cc 	andi	r2,r2,3
1000fd50:	10001826 	beq	r2,zero,1000fdb4 <write+0xc4>
1000fd54:	e0bffb17 	ldw	r2,-20(fp)
1000fd58:	10800017 	ldw	r2,0(r2)
1000fd5c:	10800617 	ldw	r2,24(r2)
1000fd60:	10001426 	beq	r2,zero,1000fdb4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fd64:	e0bffb17 	ldw	r2,-20(fp)
1000fd68:	10800017 	ldw	r2,0(r2)
1000fd6c:	10800617 	ldw	r2,24(r2)
1000fd70:	e0ffff17 	ldw	r3,-4(fp)
1000fd74:	180d883a 	mov	r6,r3
1000fd78:	e17ffe17 	ldw	r5,-8(fp)
1000fd7c:	e13ffb17 	ldw	r4,-20(fp)
1000fd80:	103ee83a 	callr	r2
1000fd84:	e0bffc15 	stw	r2,-16(fp)
1000fd88:	e0bffc17 	ldw	r2,-16(fp)
1000fd8c:	1000070e 	bge	r2,zero,1000fdac <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fd90:	000fcb40 	call	1000fcb4 <alt_get_errno>
1000fd94:	1007883a 	mov	r3,r2
1000fd98:	e0bffc17 	ldw	r2,-16(fp)
1000fd9c:	0085c83a 	sub	r2,zero,r2
1000fda0:	18800015 	stw	r2,0(r3)
        return -1;
1000fda4:	00bfffc4 	movi	r2,-1
1000fda8:	00000c06 	br	1000fddc <write+0xec>
      }
      return rval;
1000fdac:	e0bffc17 	ldw	r2,-16(fp)
1000fdb0:	00000a06 	br	1000fddc <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fdb4:	000fcb40 	call	1000fcb4 <alt_get_errno>
1000fdb8:	1007883a 	mov	r3,r2
1000fdbc:	00800344 	movi	r2,13
1000fdc0:	18800015 	stw	r2,0(r3)
1000fdc4:	00000406 	br	1000fdd8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fdc8:	000fcb40 	call	1000fcb4 <alt_get_errno>
1000fdcc:	1007883a 	mov	r3,r2
1000fdd0:	00801444 	movi	r2,81
1000fdd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fdd8:	00bfffc4 	movi	r2,-1
}
1000fddc:	e037883a 	mov	sp,fp
1000fde0:	dfc00117 	ldw	ra,4(sp)
1000fde4:	df000017 	ldw	fp,0(sp)
1000fde8:	dec00204 	addi	sp,sp,8
1000fdec:	f800283a 	ret

1000fdf0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fdf0:	defffd04 	addi	sp,sp,-12
1000fdf4:	dfc00215 	stw	ra,8(sp)
1000fdf8:	df000115 	stw	fp,4(sp)
1000fdfc:	df000104 	addi	fp,sp,4
1000fe00:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fe04:	d1600904 	addi	r5,gp,-32732
1000fe08:	e13fff17 	ldw	r4,-4(fp)
1000fe0c:	0010bf00 	call	10010bf0 <alt_dev_llist_insert>
}
1000fe10:	e037883a 	mov	sp,fp
1000fe14:	dfc00117 	ldw	ra,4(sp)
1000fe18:	df000017 	ldw	fp,0(sp)
1000fe1c:	dec00204 	addi	sp,sp,8
1000fe20:	f800283a 	ret

1000fe24 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fe24:	defffd04 	addi	sp,sp,-12
1000fe28:	dfc00215 	stw	ra,8(sp)
1000fe2c:	df000115 	stw	fp,4(sp)
1000fe30:	df000104 	addi	fp,sp,4
1000fe34:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000fe38:	001159c0 	call	1001159c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fe3c:	00800044 	movi	r2,1
1000fe40:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fe44:	0001883a 	nop
1000fe48:	e037883a 	mov	sp,fp
1000fe4c:	dfc00117 	ldw	ra,4(sp)
1000fe50:	df000017 	ldw	fp,0(sp)
1000fe54:	dec00204 	addi	sp,sp,8
1000fe58:	f800283a 	ret

1000fe5c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fe5c:	defffe04 	addi	sp,sp,-8
1000fe60:	dfc00115 	stw	ra,4(sp)
1000fe64:	df000015 	stw	fp,0(sp)
1000fe68:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fe6c:	01800144 	movi	r6,5
1000fe70:	000b883a 	mov	r5,zero
1000fe74:	01040074 	movhi	r4,4097
1000fe78:	210c5f04 	addi	r4,r4,12668
1000fe7c:	001000c0 	call	1001000c <altera_avalon_jtag_uart_init>
1000fe80:	01040074 	movhi	r4,4097
1000fe84:	210c5504 	addi	r4,r4,12628
1000fe88:	000fdf00 	call	1000fdf0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fe8c:	0001883a 	nop
}
1000fe90:	0001883a 	nop
1000fe94:	e037883a 	mov	sp,fp
1000fe98:	dfc00117 	ldw	ra,4(sp)
1000fe9c:	df000017 	ldw	fp,0(sp)
1000fea0:	dec00204 	addi	sp,sp,8
1000fea4:	f800283a 	ret

1000fea8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fea8:	defffa04 	addi	sp,sp,-24
1000feac:	dfc00515 	stw	ra,20(sp)
1000feb0:	df000415 	stw	fp,16(sp)
1000feb4:	df000404 	addi	fp,sp,16
1000feb8:	e13ffd15 	stw	r4,-12(fp)
1000febc:	e17ffe15 	stw	r5,-8(fp)
1000fec0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fec4:	e0bffd17 	ldw	r2,-12(fp)
1000fec8:	10800017 	ldw	r2,0(r2)
1000fecc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fed0:	e0bffc17 	ldw	r2,-16(fp)
1000fed4:	10c00a04 	addi	r3,r2,40
1000fed8:	e0bffd17 	ldw	r2,-12(fp)
1000fedc:	10800217 	ldw	r2,8(r2)
1000fee0:	100f883a 	mov	r7,r2
1000fee4:	e1bfff17 	ldw	r6,-4(fp)
1000fee8:	e17ffe17 	ldw	r5,-8(fp)
1000feec:	1809883a 	mov	r4,r3
1000fef0:	00104d00 	call	100104d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fef4:	e037883a 	mov	sp,fp
1000fef8:	dfc00117 	ldw	ra,4(sp)
1000fefc:	df000017 	ldw	fp,0(sp)
1000ff00:	dec00204 	addi	sp,sp,8
1000ff04:	f800283a 	ret

1000ff08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000ff08:	defffa04 	addi	sp,sp,-24
1000ff0c:	dfc00515 	stw	ra,20(sp)
1000ff10:	df000415 	stw	fp,16(sp)
1000ff14:	df000404 	addi	fp,sp,16
1000ff18:	e13ffd15 	stw	r4,-12(fp)
1000ff1c:	e17ffe15 	stw	r5,-8(fp)
1000ff20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ff24:	e0bffd17 	ldw	r2,-12(fp)
1000ff28:	10800017 	ldw	r2,0(r2)
1000ff2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000ff30:	e0bffc17 	ldw	r2,-16(fp)
1000ff34:	10c00a04 	addi	r3,r2,40
1000ff38:	e0bffd17 	ldw	r2,-12(fp)
1000ff3c:	10800217 	ldw	r2,8(r2)
1000ff40:	100f883a 	mov	r7,r2
1000ff44:	e1bfff17 	ldw	r6,-4(fp)
1000ff48:	e17ffe17 	ldw	r5,-8(fp)
1000ff4c:	1809883a 	mov	r4,r3
1000ff50:	00106ec0 	call	100106ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000ff54:	e037883a 	mov	sp,fp
1000ff58:	dfc00117 	ldw	ra,4(sp)
1000ff5c:	df000017 	ldw	fp,0(sp)
1000ff60:	dec00204 	addi	sp,sp,8
1000ff64:	f800283a 	ret

1000ff68 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000ff68:	defffc04 	addi	sp,sp,-16
1000ff6c:	dfc00315 	stw	ra,12(sp)
1000ff70:	df000215 	stw	fp,8(sp)
1000ff74:	df000204 	addi	fp,sp,8
1000ff78:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000ff7c:	e0bfff17 	ldw	r2,-4(fp)
1000ff80:	10800017 	ldw	r2,0(r2)
1000ff84:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000ff88:	e0bffe17 	ldw	r2,-8(fp)
1000ff8c:	10c00a04 	addi	r3,r2,40
1000ff90:	e0bfff17 	ldw	r2,-4(fp)
1000ff94:	10800217 	ldw	r2,8(r2)
1000ff98:	100b883a 	mov	r5,r2
1000ff9c:	1809883a 	mov	r4,r3
1000ffa0:	00103780 	call	10010378 <altera_avalon_jtag_uart_close>
}
1000ffa4:	e037883a 	mov	sp,fp
1000ffa8:	dfc00117 	ldw	ra,4(sp)
1000ffac:	df000017 	ldw	fp,0(sp)
1000ffb0:	dec00204 	addi	sp,sp,8
1000ffb4:	f800283a 	ret

1000ffb8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000ffb8:	defffa04 	addi	sp,sp,-24
1000ffbc:	dfc00515 	stw	ra,20(sp)
1000ffc0:	df000415 	stw	fp,16(sp)
1000ffc4:	df000404 	addi	fp,sp,16
1000ffc8:	e13ffd15 	stw	r4,-12(fp)
1000ffcc:	e17ffe15 	stw	r5,-8(fp)
1000ffd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000ffd4:	e0bffd17 	ldw	r2,-12(fp)
1000ffd8:	10800017 	ldw	r2,0(r2)
1000ffdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000ffe0:	e0bffc17 	ldw	r2,-16(fp)
1000ffe4:	10800a04 	addi	r2,r2,40
1000ffe8:	e1bfff17 	ldw	r6,-4(fp)
1000ffec:	e17ffe17 	ldw	r5,-8(fp)
1000fff0:	1009883a 	mov	r4,r2
1000fff4:	00103e00 	call	100103e0 <altera_avalon_jtag_uart_ioctl>
}
1000fff8:	e037883a 	mov	sp,fp
1000fffc:	dfc00117 	ldw	ra,4(sp)
10010000:	df000017 	ldw	fp,0(sp)
10010004:	dec00204 	addi	sp,sp,8
10010008:	f800283a 	ret

1001000c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1001000c:	defffa04 	addi	sp,sp,-24
10010010:	dfc00515 	stw	ra,20(sp)
10010014:	df000415 	stw	fp,16(sp)
10010018:	df000404 	addi	fp,sp,16
1001001c:	e13ffd15 	stw	r4,-12(fp)
10010020:	e17ffe15 	stw	r5,-8(fp)
10010024:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010028:	e0bffd17 	ldw	r2,-12(fp)
1001002c:	00c00044 	movi	r3,1
10010030:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010034:	e0bffd17 	ldw	r2,-12(fp)
10010038:	10800017 	ldw	r2,0(r2)
1001003c:	10800104 	addi	r2,r2,4
10010040:	1007883a 	mov	r3,r2
10010044:	e0bffd17 	ldw	r2,-12(fp)
10010048:	10800817 	ldw	r2,32(r2)
1001004c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010050:	e0bffe17 	ldw	r2,-8(fp)
10010054:	e0ffff17 	ldw	r3,-4(fp)
10010058:	d8000015 	stw	zero,0(sp)
1001005c:	e1fffd17 	ldw	r7,-12(fp)
10010060:	01840074 	movhi	r6,4097
10010064:	31803304 	addi	r6,r6,204
10010068:	180b883a 	mov	r5,r3
1001006c:	1009883a 	mov	r4,r2
10010070:	0010d740 	call	10010d74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010074:	e0bffd17 	ldw	r2,-12(fp)
10010078:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1001007c:	e0bffd17 	ldw	r2,-12(fp)
10010080:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010084:	d0e6de17 	ldw	r3,-25736(gp)
10010088:	e1fffd17 	ldw	r7,-12(fp)
1001008c:	01840074 	movhi	r6,4097
10010090:	3180b604 	addi	r6,r6,728
10010094:	180b883a 	mov	r5,r3
10010098:	1009883a 	mov	r4,r2
1001009c:	00109100 	call	10010910 <alt_alarm_start>
100100a0:	1000040e 	bge	r2,zero,100100b4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100100a4:	e0fffd17 	ldw	r3,-12(fp)
100100a8:	00a00034 	movhi	r2,32768
100100ac:	10bfffc4 	addi	r2,r2,-1
100100b0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100100b4:	0001883a 	nop
100100b8:	e037883a 	mov	sp,fp
100100bc:	dfc00117 	ldw	ra,4(sp)
100100c0:	df000017 	ldw	fp,0(sp)
100100c4:	dec00204 	addi	sp,sp,8
100100c8:	f800283a 	ret

100100cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100100cc:	defff804 	addi	sp,sp,-32
100100d0:	df000715 	stw	fp,28(sp)
100100d4:	df000704 	addi	fp,sp,28
100100d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100100dc:	e0bfff17 	ldw	r2,-4(fp)
100100e0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100100e4:	e0bffb17 	ldw	r2,-20(fp)
100100e8:	10800017 	ldw	r2,0(r2)
100100ec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100100f0:	e0bffc17 	ldw	r2,-16(fp)
100100f4:	10800104 	addi	r2,r2,4
100100f8:	10800037 	ldwio	r2,0(r2)
100100fc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010100:	e0bffd17 	ldw	r2,-12(fp)
10010104:	1080c00c 	andi	r2,r2,768
10010108:	10006d26 	beq	r2,zero,100102c0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1001010c:	e0bffd17 	ldw	r2,-12(fp)
10010110:	1080400c 	andi	r2,r2,256
10010114:	10003526 	beq	r2,zero,100101ec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010118:	00800074 	movhi	r2,1
1001011c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010120:	e0bffb17 	ldw	r2,-20(fp)
10010124:	10800a17 	ldw	r2,40(r2)
10010128:	10800044 	addi	r2,r2,1
1001012c:	1081ffcc 	andi	r2,r2,2047
10010130:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10010134:	e0bffb17 	ldw	r2,-20(fp)
10010138:	10c00b17 	ldw	r3,44(r2)
1001013c:	e0bffe17 	ldw	r2,-8(fp)
10010140:	18801526 	beq	r3,r2,10010198 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010144:	e0bffc17 	ldw	r2,-16(fp)
10010148:	10800037 	ldwio	r2,0(r2)
1001014c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10010150:	e0bff917 	ldw	r2,-28(fp)
10010154:	10a0000c 	andi	r2,r2,32768
10010158:	10001126 	beq	r2,zero,100101a0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1001015c:	e0bffb17 	ldw	r2,-20(fp)
10010160:	10800a17 	ldw	r2,40(r2)
10010164:	e0fff917 	ldw	r3,-28(fp)
10010168:	1809883a 	mov	r4,r3
1001016c:	e0fffb17 	ldw	r3,-20(fp)
10010170:	1885883a 	add	r2,r3,r2
10010174:	10800e04 	addi	r2,r2,56
10010178:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001017c:	e0bffb17 	ldw	r2,-20(fp)
10010180:	10800a17 	ldw	r2,40(r2)
10010184:	10800044 	addi	r2,r2,1
10010188:	10c1ffcc 	andi	r3,r2,2047
1001018c:	e0bffb17 	ldw	r2,-20(fp)
10010190:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10010194:	003fe206 	br	10010120 <__alt_data_end+0xf8010120>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10010198:	0001883a 	nop
1001019c:	00000106 	br	100101a4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100101a0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100101a4:	e0bff917 	ldw	r2,-28(fp)
100101a8:	10bfffec 	andhi	r2,r2,65535
100101ac:	10000f26 	beq	r2,zero,100101ec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100101b0:	e0bffb17 	ldw	r2,-20(fp)
100101b4:	10c00817 	ldw	r3,32(r2)
100101b8:	00bfff84 	movi	r2,-2
100101bc:	1886703a 	and	r3,r3,r2
100101c0:	e0bffb17 	ldw	r2,-20(fp)
100101c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100101c8:	e0bffc17 	ldw	r2,-16(fp)
100101cc:	10800104 	addi	r2,r2,4
100101d0:	1007883a 	mov	r3,r2
100101d4:	e0bffb17 	ldw	r2,-20(fp)
100101d8:	10800817 	ldw	r2,32(r2)
100101dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100101e0:	e0bffc17 	ldw	r2,-16(fp)
100101e4:	10800104 	addi	r2,r2,4
100101e8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100101ec:	e0bffd17 	ldw	r2,-12(fp)
100101f0:	1080800c 	andi	r2,r2,512
100101f4:	103fbe26 	beq	r2,zero,100100f0 <__alt_data_end+0xf80100f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100101f8:	e0bffd17 	ldw	r2,-12(fp)
100101fc:	1004d43a 	srli	r2,r2,16
10010200:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010204:	00001406 	br	10010258 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010208:	e0bffc17 	ldw	r2,-16(fp)
1001020c:	e0fffb17 	ldw	r3,-20(fp)
10010210:	18c00d17 	ldw	r3,52(r3)
10010214:	e13ffb17 	ldw	r4,-20(fp)
10010218:	20c7883a 	add	r3,r4,r3
1001021c:	18c20e04 	addi	r3,r3,2104
10010220:	18c00003 	ldbu	r3,0(r3)
10010224:	18c03fcc 	andi	r3,r3,255
10010228:	18c0201c 	xori	r3,r3,128
1001022c:	18ffe004 	addi	r3,r3,-128
10010230:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010234:	e0bffb17 	ldw	r2,-20(fp)
10010238:	10800d17 	ldw	r2,52(r2)
1001023c:	10800044 	addi	r2,r2,1
10010240:	10c1ffcc 	andi	r3,r2,2047
10010244:	e0bffb17 	ldw	r2,-20(fp)
10010248:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1001024c:	e0bffa17 	ldw	r2,-24(fp)
10010250:	10bfffc4 	addi	r2,r2,-1
10010254:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10010258:	e0bffa17 	ldw	r2,-24(fp)
1001025c:	10000526 	beq	r2,zero,10010274 <altera_avalon_jtag_uart_irq+0x1a8>
10010260:	e0bffb17 	ldw	r2,-20(fp)
10010264:	10c00d17 	ldw	r3,52(r2)
10010268:	e0bffb17 	ldw	r2,-20(fp)
1001026c:	10800c17 	ldw	r2,48(r2)
10010270:	18bfe51e 	bne	r3,r2,10010208 <__alt_data_end+0xf8010208>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10010274:	e0bffa17 	ldw	r2,-24(fp)
10010278:	103f9d26 	beq	r2,zero,100100f0 <__alt_data_end+0xf80100f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001027c:	e0bffb17 	ldw	r2,-20(fp)
10010280:	10c00817 	ldw	r3,32(r2)
10010284:	00bfff44 	movi	r2,-3
10010288:	1886703a 	and	r3,r3,r2
1001028c:	e0bffb17 	ldw	r2,-20(fp)
10010290:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010294:	e0bffb17 	ldw	r2,-20(fp)
10010298:	10800017 	ldw	r2,0(r2)
1001029c:	10800104 	addi	r2,r2,4
100102a0:	1007883a 	mov	r3,r2
100102a4:	e0bffb17 	ldw	r2,-20(fp)
100102a8:	10800817 	ldw	r2,32(r2)
100102ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100102b0:	e0bffc17 	ldw	r2,-16(fp)
100102b4:	10800104 	addi	r2,r2,4
100102b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100102bc:	003f8c06 	br	100100f0 <__alt_data_end+0xf80100f0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100102c0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100102c4:	0001883a 	nop
100102c8:	e037883a 	mov	sp,fp
100102cc:	df000017 	ldw	fp,0(sp)
100102d0:	dec00104 	addi	sp,sp,4
100102d4:	f800283a 	ret

100102d8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100102d8:	defff804 	addi	sp,sp,-32
100102dc:	df000715 	stw	fp,28(sp)
100102e0:	df000704 	addi	fp,sp,28
100102e4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100102e8:	e0bffb17 	ldw	r2,-20(fp)
100102ec:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100102f0:	e0bff917 	ldw	r2,-28(fp)
100102f4:	10800017 	ldw	r2,0(r2)
100102f8:	10800104 	addi	r2,r2,4
100102fc:	10800037 	ldwio	r2,0(r2)
10010300:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010304:	e0bffa17 	ldw	r2,-24(fp)
10010308:	1081000c 	andi	r2,r2,1024
1001030c:	10000b26 	beq	r2,zero,1001033c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10010310:	e0bff917 	ldw	r2,-28(fp)
10010314:	10800017 	ldw	r2,0(r2)
10010318:	10800104 	addi	r2,r2,4
1001031c:	1007883a 	mov	r3,r2
10010320:	e0bff917 	ldw	r2,-28(fp)
10010324:	10800817 	ldw	r2,32(r2)
10010328:	10810014 	ori	r2,r2,1024
1001032c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10010330:	e0bff917 	ldw	r2,-28(fp)
10010334:	10000915 	stw	zero,36(r2)
10010338:	00000a06 	br	10010364 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1001033c:	e0bff917 	ldw	r2,-28(fp)
10010340:	10c00917 	ldw	r3,36(r2)
10010344:	00a00034 	movhi	r2,32768
10010348:	10bfff04 	addi	r2,r2,-4
1001034c:	10c00536 	bltu	r2,r3,10010364 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10010350:	e0bff917 	ldw	r2,-28(fp)
10010354:	10800917 	ldw	r2,36(r2)
10010358:	10c00044 	addi	r3,r2,1
1001035c:	e0bff917 	ldw	r2,-28(fp)
10010360:	10c00915 	stw	r3,36(r2)
10010364:	d0a6de17 	ldw	r2,-25736(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010368:	e037883a 	mov	sp,fp
1001036c:	df000017 	ldw	fp,0(sp)
10010370:	dec00104 	addi	sp,sp,4
10010374:	f800283a 	ret

10010378 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010378:	defffd04 	addi	sp,sp,-12
1001037c:	df000215 	stw	fp,8(sp)
10010380:	df000204 	addi	fp,sp,8
10010384:	e13ffe15 	stw	r4,-8(fp)
10010388:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001038c:	00000506 	br	100103a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010390:	e0bfff17 	ldw	r2,-4(fp)
10010394:	1090000c 	andi	r2,r2,16384
10010398:	10000226 	beq	r2,zero,100103a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001039c:	00bffd44 	movi	r2,-11
100103a0:	00000b06 	br	100103d0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100103a4:	e0bffe17 	ldw	r2,-8(fp)
100103a8:	10c00d17 	ldw	r3,52(r2)
100103ac:	e0bffe17 	ldw	r2,-8(fp)
100103b0:	10800c17 	ldw	r2,48(r2)
100103b4:	18800526 	beq	r3,r2,100103cc <altera_avalon_jtag_uart_close+0x54>
100103b8:	e0bffe17 	ldw	r2,-8(fp)
100103bc:	10c00917 	ldw	r3,36(r2)
100103c0:	e0bffe17 	ldw	r2,-8(fp)
100103c4:	10800117 	ldw	r2,4(r2)
100103c8:	18bff136 	bltu	r3,r2,10010390 <__alt_data_end+0xf8010390>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100103cc:	0005883a 	mov	r2,zero
}
100103d0:	e037883a 	mov	sp,fp
100103d4:	df000017 	ldw	fp,0(sp)
100103d8:	dec00104 	addi	sp,sp,4
100103dc:	f800283a 	ret

100103e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100103e0:	defffa04 	addi	sp,sp,-24
100103e4:	df000515 	stw	fp,20(sp)
100103e8:	df000504 	addi	fp,sp,20
100103ec:	e13ffd15 	stw	r4,-12(fp)
100103f0:	e17ffe15 	stw	r5,-8(fp)
100103f4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100103f8:	00bff9c4 	movi	r2,-25
100103fc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010400:	e0bffe17 	ldw	r2,-8(fp)
10010404:	10da8060 	cmpeqi	r3,r2,27137
10010408:	1800031e 	bne	r3,zero,10010418 <altera_avalon_jtag_uart_ioctl+0x38>
1001040c:	109a80a0 	cmpeqi	r2,r2,27138
10010410:	1000181e 	bne	r2,zero,10010474 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10010414:	00002906 	br	100104bc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10010418:	e0bffd17 	ldw	r2,-12(fp)
1001041c:	10c00117 	ldw	r3,4(r2)
10010420:	00a00034 	movhi	r2,32768
10010424:	10bfffc4 	addi	r2,r2,-1
10010428:	18802126 	beq	r3,r2,100104b0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1001042c:	e0bfff17 	ldw	r2,-4(fp)
10010430:	10800017 	ldw	r2,0(r2)
10010434:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010438:	e0bffc17 	ldw	r2,-16(fp)
1001043c:	10800090 	cmplti	r2,r2,2
10010440:	1000061e 	bne	r2,zero,1001045c <altera_avalon_jtag_uart_ioctl+0x7c>
10010444:	e0fffc17 	ldw	r3,-16(fp)
10010448:	00a00034 	movhi	r2,32768
1001044c:	10bfffc4 	addi	r2,r2,-1
10010450:	18800226 	beq	r3,r2,1001045c <altera_avalon_jtag_uart_ioctl+0x7c>
10010454:	e0bffc17 	ldw	r2,-16(fp)
10010458:	00000206 	br	10010464 <altera_avalon_jtag_uart_ioctl+0x84>
1001045c:	00a00034 	movhi	r2,32768
10010460:	10bfff84 	addi	r2,r2,-2
10010464:	e0fffd17 	ldw	r3,-12(fp)
10010468:	18800115 	stw	r2,4(r3)
      rc = 0;
1001046c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010470:	00000f06 	br	100104b0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010474:	e0bffd17 	ldw	r2,-12(fp)
10010478:	10c00117 	ldw	r3,4(r2)
1001047c:	00a00034 	movhi	r2,32768
10010480:	10bfffc4 	addi	r2,r2,-1
10010484:	18800c26 	beq	r3,r2,100104b8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010488:	e0bffd17 	ldw	r2,-12(fp)
1001048c:	10c00917 	ldw	r3,36(r2)
10010490:	e0bffd17 	ldw	r2,-12(fp)
10010494:	10800117 	ldw	r2,4(r2)
10010498:	1885803a 	cmpltu	r2,r3,r2
1001049c:	10c03fcc 	andi	r3,r2,255
100104a0:	e0bfff17 	ldw	r2,-4(fp)
100104a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
100104a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100104ac:	00000206 	br	100104b8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100104b0:	0001883a 	nop
100104b4:	00000106 	br	100104bc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100104b8:	0001883a 	nop

  default:
    break;
  }

  return rc;
100104bc:	e0bffb17 	ldw	r2,-20(fp)
}
100104c0:	e037883a 	mov	sp,fp
100104c4:	df000017 	ldw	fp,0(sp)
100104c8:	dec00104 	addi	sp,sp,4
100104cc:	f800283a 	ret

100104d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100104d0:	defff304 	addi	sp,sp,-52
100104d4:	dfc00c15 	stw	ra,48(sp)
100104d8:	df000b15 	stw	fp,44(sp)
100104dc:	df000b04 	addi	fp,sp,44
100104e0:	e13ffc15 	stw	r4,-16(fp)
100104e4:	e17ffd15 	stw	r5,-12(fp)
100104e8:	e1bffe15 	stw	r6,-8(fp)
100104ec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100104f0:	e0bffd17 	ldw	r2,-12(fp)
100104f4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100104f8:	00004706 	br	10010618 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100104fc:	e0bffc17 	ldw	r2,-16(fp)
10010500:	10800a17 	ldw	r2,40(r2)
10010504:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10010508:	e0bffc17 	ldw	r2,-16(fp)
1001050c:	10800b17 	ldw	r2,44(r2)
10010510:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010514:	e0fff717 	ldw	r3,-36(fp)
10010518:	e0bff817 	ldw	r2,-32(fp)
1001051c:	18800536 	bltu	r3,r2,10010534 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010520:	e0fff717 	ldw	r3,-36(fp)
10010524:	e0bff817 	ldw	r2,-32(fp)
10010528:	1885c83a 	sub	r2,r3,r2
1001052c:	e0bff615 	stw	r2,-40(fp)
10010530:	00000406 	br	10010544 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010534:	00c20004 	movi	r3,2048
10010538:	e0bff817 	ldw	r2,-32(fp)
1001053c:	1885c83a 	sub	r2,r3,r2
10010540:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010544:	e0bff617 	ldw	r2,-40(fp)
10010548:	10001e26 	beq	r2,zero,100105c4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1001054c:	e0fffe17 	ldw	r3,-8(fp)
10010550:	e0bff617 	ldw	r2,-40(fp)
10010554:	1880022e 	bgeu	r3,r2,10010560 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010558:	e0bffe17 	ldw	r2,-8(fp)
1001055c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010560:	e0bffc17 	ldw	r2,-16(fp)
10010564:	10c00e04 	addi	r3,r2,56
10010568:	e0bff817 	ldw	r2,-32(fp)
1001056c:	1885883a 	add	r2,r3,r2
10010570:	e1bff617 	ldw	r6,-40(fp)
10010574:	100b883a 	mov	r5,r2
10010578:	e13ff517 	ldw	r4,-44(fp)
1001057c:	00080e00 	call	100080e0 <memcpy>
      ptr   += n;
10010580:	e0fff517 	ldw	r3,-44(fp)
10010584:	e0bff617 	ldw	r2,-40(fp)
10010588:	1885883a 	add	r2,r3,r2
1001058c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010590:	e0fffe17 	ldw	r3,-8(fp)
10010594:	e0bff617 	ldw	r2,-40(fp)
10010598:	1885c83a 	sub	r2,r3,r2
1001059c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100105a0:	e0fff817 	ldw	r3,-32(fp)
100105a4:	e0bff617 	ldw	r2,-40(fp)
100105a8:	1885883a 	add	r2,r3,r2
100105ac:	10c1ffcc 	andi	r3,r2,2047
100105b0:	e0bffc17 	ldw	r2,-16(fp)
100105b4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100105b8:	e0bffe17 	ldw	r2,-8(fp)
100105bc:	00bfcf16 	blt	zero,r2,100104fc <__alt_data_end+0xf80104fc>
100105c0:	00000106 	br	100105c8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
100105c4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
100105c8:	e0fff517 	ldw	r3,-44(fp)
100105cc:	e0bffd17 	ldw	r2,-12(fp)
100105d0:	1880141e 	bne	r3,r2,10010624 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100105d4:	e0bfff17 	ldw	r2,-4(fp)
100105d8:	1090000c 	andi	r2,r2,16384
100105dc:	1000131e 	bne	r2,zero,1001062c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100105e0:	0001883a 	nop
100105e4:	e0bffc17 	ldw	r2,-16(fp)
100105e8:	10c00a17 	ldw	r3,40(r2)
100105ec:	e0bff717 	ldw	r2,-36(fp)
100105f0:	1880051e 	bne	r3,r2,10010608 <altera_avalon_jtag_uart_read+0x138>
100105f4:	e0bffc17 	ldw	r2,-16(fp)
100105f8:	10c00917 	ldw	r3,36(r2)
100105fc:	e0bffc17 	ldw	r2,-16(fp)
10010600:	10800117 	ldw	r2,4(r2)
10010604:	18bff736 	bltu	r3,r2,100105e4 <__alt_data_end+0xf80105e4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010608:	e0bffc17 	ldw	r2,-16(fp)
1001060c:	10c00a17 	ldw	r3,40(r2)
10010610:	e0bff717 	ldw	r2,-36(fp)
10010614:	18800726 	beq	r3,r2,10010634 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010618:	e0bffe17 	ldw	r2,-8(fp)
1001061c:	00bfb716 	blt	zero,r2,100104fc <__alt_data_end+0xf80104fc>
10010620:	00000506 	br	10010638 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10010624:	0001883a 	nop
10010628:	00000306 	br	10010638 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1001062c:	0001883a 	nop
10010630:	00000106 	br	10010638 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10010634:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010638:	e0fff517 	ldw	r3,-44(fp)
1001063c:	e0bffd17 	ldw	r2,-12(fp)
10010640:	18801826 	beq	r3,r2,100106a4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010644:	0005303a 	rdctl	r2,status
10010648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001064c:	e0fffb17 	ldw	r3,-20(fp)
10010650:	00bfff84 	movi	r2,-2
10010654:	1884703a 	and	r2,r3,r2
10010658:	1001703a 	wrctl	status,r2
  
  return context;
1001065c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10010660:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010664:	e0bffc17 	ldw	r2,-16(fp)
10010668:	10800817 	ldw	r2,32(r2)
1001066c:	10c00054 	ori	r3,r2,1
10010670:	e0bffc17 	ldw	r2,-16(fp)
10010674:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010678:	e0bffc17 	ldw	r2,-16(fp)
1001067c:	10800017 	ldw	r2,0(r2)
10010680:	10800104 	addi	r2,r2,4
10010684:	1007883a 	mov	r3,r2
10010688:	e0bffc17 	ldw	r2,-16(fp)
1001068c:	10800817 	ldw	r2,32(r2)
10010690:	18800035 	stwio	r2,0(r3)
10010694:	e0bffa17 	ldw	r2,-24(fp)
10010698:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001069c:	e0bff917 	ldw	r2,-28(fp)
100106a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100106a4:	e0fff517 	ldw	r3,-44(fp)
100106a8:	e0bffd17 	ldw	r2,-12(fp)
100106ac:	18800426 	beq	r3,r2,100106c0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
100106b0:	e0fff517 	ldw	r3,-44(fp)
100106b4:	e0bffd17 	ldw	r2,-12(fp)
100106b8:	1885c83a 	sub	r2,r3,r2
100106bc:	00000606 	br	100106d8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
100106c0:	e0bfff17 	ldw	r2,-4(fp)
100106c4:	1090000c 	andi	r2,r2,16384
100106c8:	10000226 	beq	r2,zero,100106d4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
100106cc:	00bffd44 	movi	r2,-11
100106d0:	00000106 	br	100106d8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
100106d4:	00bffec4 	movi	r2,-5
}
100106d8:	e037883a 	mov	sp,fp
100106dc:	dfc00117 	ldw	ra,4(sp)
100106e0:	df000017 	ldw	fp,0(sp)
100106e4:	dec00204 	addi	sp,sp,8
100106e8:	f800283a 	ret

100106ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100106ec:	defff304 	addi	sp,sp,-52
100106f0:	dfc00c15 	stw	ra,48(sp)
100106f4:	df000b15 	stw	fp,44(sp)
100106f8:	df000b04 	addi	fp,sp,44
100106fc:	e13ffc15 	stw	r4,-16(fp)
10010700:	e17ffd15 	stw	r5,-12(fp)
10010704:	e1bffe15 	stw	r6,-8(fp)
10010708:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1001070c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010710:	e0bffd17 	ldw	r2,-12(fp)
10010714:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010718:	00003706 	br	100107f8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1001071c:	e0bffc17 	ldw	r2,-16(fp)
10010720:	10800c17 	ldw	r2,48(r2)
10010724:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10010728:	e0bffc17 	ldw	r2,-16(fp)
1001072c:	10800d17 	ldw	r2,52(r2)
10010730:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10010734:	e0fff917 	ldw	r3,-28(fp)
10010738:	e0bff517 	ldw	r2,-44(fp)
1001073c:	1880062e 	bgeu	r3,r2,10010758 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010740:	e0fff517 	ldw	r3,-44(fp)
10010744:	e0bff917 	ldw	r2,-28(fp)
10010748:	1885c83a 	sub	r2,r3,r2
1001074c:	10bfffc4 	addi	r2,r2,-1
10010750:	e0bff615 	stw	r2,-40(fp)
10010754:	00000b06 	br	10010784 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10010758:	e0bff517 	ldw	r2,-44(fp)
1001075c:	10000526 	beq	r2,zero,10010774 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10010760:	00c20004 	movi	r3,2048
10010764:	e0bff917 	ldw	r2,-28(fp)
10010768:	1885c83a 	sub	r2,r3,r2
1001076c:	e0bff615 	stw	r2,-40(fp)
10010770:	00000406 	br	10010784 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010774:	00c1ffc4 	movi	r3,2047
10010778:	e0bff917 	ldw	r2,-28(fp)
1001077c:	1885c83a 	sub	r2,r3,r2
10010780:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010784:	e0bff617 	ldw	r2,-40(fp)
10010788:	10001e26 	beq	r2,zero,10010804 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1001078c:	e0fffe17 	ldw	r3,-8(fp)
10010790:	e0bff617 	ldw	r2,-40(fp)
10010794:	1880022e 	bgeu	r3,r2,100107a0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10010798:	e0bffe17 	ldw	r2,-8(fp)
1001079c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100107a0:	e0bffc17 	ldw	r2,-16(fp)
100107a4:	10c20e04 	addi	r3,r2,2104
100107a8:	e0bff917 	ldw	r2,-28(fp)
100107ac:	1885883a 	add	r2,r3,r2
100107b0:	e1bff617 	ldw	r6,-40(fp)
100107b4:	e17ffd17 	ldw	r5,-12(fp)
100107b8:	1009883a 	mov	r4,r2
100107bc:	00080e00 	call	100080e0 <memcpy>
      ptr   += n;
100107c0:	e0fffd17 	ldw	r3,-12(fp)
100107c4:	e0bff617 	ldw	r2,-40(fp)
100107c8:	1885883a 	add	r2,r3,r2
100107cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100107d0:	e0fffe17 	ldw	r3,-8(fp)
100107d4:	e0bff617 	ldw	r2,-40(fp)
100107d8:	1885c83a 	sub	r2,r3,r2
100107dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100107e0:	e0fff917 	ldw	r3,-28(fp)
100107e4:	e0bff617 	ldw	r2,-40(fp)
100107e8:	1885883a 	add	r2,r3,r2
100107ec:	10c1ffcc 	andi	r3,r2,2047
100107f0:	e0bffc17 	ldw	r2,-16(fp)
100107f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100107f8:	e0bffe17 	ldw	r2,-8(fp)
100107fc:	00bfc716 	blt	zero,r2,1001071c <__alt_data_end+0xf801071c>
10010800:	00000106 	br	10010808 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10010804:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010808:	0005303a 	rdctl	r2,status
1001080c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010810:	e0fffb17 	ldw	r3,-20(fp)
10010814:	00bfff84 	movi	r2,-2
10010818:	1884703a 	and	r2,r3,r2
1001081c:	1001703a 	wrctl	status,r2
  
  return context;
10010820:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010824:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010828:	e0bffc17 	ldw	r2,-16(fp)
1001082c:	10800817 	ldw	r2,32(r2)
10010830:	10c00094 	ori	r3,r2,2
10010834:	e0bffc17 	ldw	r2,-16(fp)
10010838:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001083c:	e0bffc17 	ldw	r2,-16(fp)
10010840:	10800017 	ldw	r2,0(r2)
10010844:	10800104 	addi	r2,r2,4
10010848:	1007883a 	mov	r3,r2
1001084c:	e0bffc17 	ldw	r2,-16(fp)
10010850:	10800817 	ldw	r2,32(r2)
10010854:	18800035 	stwio	r2,0(r3)
10010858:	e0bffa17 	ldw	r2,-24(fp)
1001085c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010860:	e0bff817 	ldw	r2,-32(fp)
10010864:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010868:	e0bffe17 	ldw	r2,-8(fp)
1001086c:	0080100e 	bge	zero,r2,100108b0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10010870:	e0bfff17 	ldw	r2,-4(fp)
10010874:	1090000c 	andi	r2,r2,16384
10010878:	1000101e 	bne	r2,zero,100108bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1001087c:	0001883a 	nop
10010880:	e0bffc17 	ldw	r2,-16(fp)
10010884:	10c00d17 	ldw	r3,52(r2)
10010888:	e0bff517 	ldw	r2,-44(fp)
1001088c:	1880051e 	bne	r3,r2,100108a4 <altera_avalon_jtag_uart_write+0x1b8>
10010890:	e0bffc17 	ldw	r2,-16(fp)
10010894:	10c00917 	ldw	r3,36(r2)
10010898:	e0bffc17 	ldw	r2,-16(fp)
1001089c:	10800117 	ldw	r2,4(r2)
100108a0:	18bff736 	bltu	r3,r2,10010880 <__alt_data_end+0xf8010880>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100108a4:	e0bffc17 	ldw	r2,-16(fp)
100108a8:	10800917 	ldw	r2,36(r2)
100108ac:	1000051e 	bne	r2,zero,100108c4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
100108b0:	e0bffe17 	ldw	r2,-8(fp)
100108b4:	00bfd016 	blt	zero,r2,100107f8 <__alt_data_end+0xf80107f8>
100108b8:	00000306 	br	100108c8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
100108bc:	0001883a 	nop
100108c0:	00000106 	br	100108c8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
100108c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100108c8:	e0fffd17 	ldw	r3,-12(fp)
100108cc:	e0bff717 	ldw	r2,-36(fp)
100108d0:	18800426 	beq	r3,r2,100108e4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
100108d4:	e0fffd17 	ldw	r3,-12(fp)
100108d8:	e0bff717 	ldw	r2,-36(fp)
100108dc:	1885c83a 	sub	r2,r3,r2
100108e0:	00000606 	br	100108fc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
100108e4:	e0bfff17 	ldw	r2,-4(fp)
100108e8:	1090000c 	andi	r2,r2,16384
100108ec:	10000226 	beq	r2,zero,100108f8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
100108f0:	00bffd44 	movi	r2,-11
100108f4:	00000106 	br	100108fc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100108f8:	00bffec4 	movi	r2,-5
}
100108fc:	e037883a 	mov	sp,fp
10010900:	dfc00117 	ldw	ra,4(sp)
10010904:	df000017 	ldw	fp,0(sp)
10010908:	dec00204 	addi	sp,sp,8
1001090c:	f800283a 	ret

10010910 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010910:	defff504 	addi	sp,sp,-44
10010914:	df000a15 	stw	fp,40(sp)
10010918:	df000a04 	addi	fp,sp,40
1001091c:	e13ffc15 	stw	r4,-16(fp)
10010920:	e17ffd15 	stw	r5,-12(fp)
10010924:	e1bffe15 	stw	r6,-8(fp)
10010928:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001092c:	e03ff615 	stw	zero,-40(fp)
10010930:	d0a6de17 	ldw	r2,-25736(gp)
  
  if (alt_ticks_per_second ())
10010934:	10003c26 	beq	r2,zero,10010a28 <alt_alarm_start+0x118>
  {
    if (alarm)
10010938:	e0bffc17 	ldw	r2,-16(fp)
1001093c:	10003826 	beq	r2,zero,10010a20 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10010940:	e0bffc17 	ldw	r2,-16(fp)
10010944:	e0fffe17 	ldw	r3,-8(fp)
10010948:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001094c:	e0bffc17 	ldw	r2,-16(fp)
10010950:	e0ffff17 	ldw	r3,-4(fp)
10010954:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010958:	0005303a 	rdctl	r2,status
1001095c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010960:	e0fff917 	ldw	r3,-28(fp)
10010964:	00bfff84 	movi	r2,-2
10010968:	1884703a 	and	r2,r3,r2
1001096c:	1001703a 	wrctl	status,r2
  
  return context;
10010970:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10010974:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010978:	d0a6df17 	ldw	r2,-25732(gp)
      
      current_nticks = alt_nticks();
1001097c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010980:	e0fffd17 	ldw	r3,-12(fp)
10010984:	e0bff617 	ldw	r2,-40(fp)
10010988:	1885883a 	add	r2,r3,r2
1001098c:	10c00044 	addi	r3,r2,1
10010990:	e0bffc17 	ldw	r2,-16(fp)
10010994:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010998:	e0bffc17 	ldw	r2,-16(fp)
1001099c:	10c00217 	ldw	r3,8(r2)
100109a0:	e0bff617 	ldw	r2,-40(fp)
100109a4:	1880042e 	bgeu	r3,r2,100109b8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
100109a8:	e0bffc17 	ldw	r2,-16(fp)
100109ac:	00c00044 	movi	r3,1
100109b0:	10c00405 	stb	r3,16(r2)
100109b4:	00000206 	br	100109c0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
100109b8:	e0bffc17 	ldw	r2,-16(fp)
100109bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100109c0:	e0bffc17 	ldw	r2,-16(fp)
100109c4:	d0e00f04 	addi	r3,gp,-32708
100109c8:	e0fffa15 	stw	r3,-24(fp)
100109cc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100109d0:	e0bffb17 	ldw	r2,-20(fp)
100109d4:	e0fffa17 	ldw	r3,-24(fp)
100109d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100109dc:	e0bffa17 	ldw	r2,-24(fp)
100109e0:	10c00017 	ldw	r3,0(r2)
100109e4:	e0bffb17 	ldw	r2,-20(fp)
100109e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100109ec:	e0bffa17 	ldw	r2,-24(fp)
100109f0:	10800017 	ldw	r2,0(r2)
100109f4:	e0fffb17 	ldw	r3,-20(fp)
100109f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100109fc:	e0bffa17 	ldw	r2,-24(fp)
10010a00:	e0fffb17 	ldw	r3,-20(fp)
10010a04:	10c00015 	stw	r3,0(r2)
10010a08:	e0bff817 	ldw	r2,-32(fp)
10010a0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010a10:	e0bff717 	ldw	r2,-36(fp)
10010a14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010a18:	0005883a 	mov	r2,zero
10010a1c:	00000306 	br	10010a2c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10010a20:	00bffa84 	movi	r2,-22
10010a24:	00000106 	br	10010a2c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10010a28:	00bfde84 	movi	r2,-134
  }
}
10010a2c:	e037883a 	mov	sp,fp
10010a30:	df000017 	ldw	fp,0(sp)
10010a34:	dec00104 	addi	sp,sp,4
10010a38:	f800283a 	ret

10010a3c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010a3c:	defffa04 	addi	sp,sp,-24
10010a40:	dfc00515 	stw	ra,20(sp)
10010a44:	df000415 	stw	fp,16(sp)
10010a48:	df000404 	addi	fp,sp,16
10010a4c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010a50:	00800244 	movi	r2,9
10010a54:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010a58:	014003f4 	movhi	r5,15
10010a5c:	29509004 	addi	r5,r5,16960
10010a60:	e13ffd17 	ldw	r4,-12(fp)
10010a64:	000cb600 	call	1000cb60 <__mulsi3>
10010a68:	100b883a 	mov	r5,r2
10010a6c:	0100bef4 	movhi	r4,763
10010a70:	213c2004 	addi	r4,r4,-3968
10010a74:	000caa40 	call	1000caa4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10010a78:	100b883a 	mov	r5,r2
10010a7c:	01200034 	movhi	r4,32768
10010a80:	213fffc4 	addi	r4,r4,-1
10010a84:	000caa40 	call	1000caa4 <__udivsi3>
10010a88:	100b883a 	mov	r5,r2
10010a8c:	e13fff17 	ldw	r4,-4(fp)
10010a90:	000caa40 	call	1000caa4 <__udivsi3>
10010a94:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10010a98:	e0bffe17 	ldw	r2,-8(fp)
10010a9c:	10002a26 	beq	r2,zero,10010b48 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010aa0:	e03ffc15 	stw	zero,-16(fp)
10010aa4:	00001706 	br	10010b04 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010aa8:	00a00034 	movhi	r2,32768
10010aac:	10bfffc4 	addi	r2,r2,-1
10010ab0:	10bfffc4 	addi	r2,r2,-1
10010ab4:	103ffe1e 	bne	r2,zero,10010ab0 <__alt_data_end+0xf8010ab0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010ab8:	014003f4 	movhi	r5,15
10010abc:	29509004 	addi	r5,r5,16960
10010ac0:	e13ffd17 	ldw	r4,-12(fp)
10010ac4:	000cb600 	call	1000cb60 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010ac8:	100b883a 	mov	r5,r2
10010acc:	0100bef4 	movhi	r4,763
10010ad0:	213c2004 	addi	r4,r4,-3968
10010ad4:	000caa40 	call	1000caa4 <__udivsi3>
10010ad8:	100b883a 	mov	r5,r2
10010adc:	01200034 	movhi	r4,32768
10010ae0:	213fffc4 	addi	r4,r4,-1
10010ae4:	000caa40 	call	1000caa4 <__udivsi3>
10010ae8:	1007883a 	mov	r3,r2
10010aec:	e0bfff17 	ldw	r2,-4(fp)
10010af0:	10c5c83a 	sub	r2,r2,r3
10010af4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010af8:	e0bffc17 	ldw	r2,-16(fp)
10010afc:	10800044 	addi	r2,r2,1
10010b00:	e0bffc15 	stw	r2,-16(fp)
10010b04:	e0fffc17 	ldw	r3,-16(fp)
10010b08:	e0bffe17 	ldw	r2,-8(fp)
10010b0c:	18bfe616 	blt	r3,r2,10010aa8 <__alt_data_end+0xf8010aa8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010b10:	014003f4 	movhi	r5,15
10010b14:	29509004 	addi	r5,r5,16960
10010b18:	e13ffd17 	ldw	r4,-12(fp)
10010b1c:	000cb600 	call	1000cb60 <__mulsi3>
10010b20:	100b883a 	mov	r5,r2
10010b24:	0100bef4 	movhi	r4,763
10010b28:	213c2004 	addi	r4,r4,-3968
10010b2c:	000caa40 	call	1000caa4 <__udivsi3>
10010b30:	e17fff17 	ldw	r5,-4(fp)
10010b34:	1009883a 	mov	r4,r2
10010b38:	000cb600 	call	1000cb60 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010b3c:	10bfffc4 	addi	r2,r2,-1
10010b40:	103ffe1e 	bne	r2,zero,10010b3c <__alt_data_end+0xf8010b3c>
10010b44:	00000d06 	br	10010b7c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010b48:	014003f4 	movhi	r5,15
10010b4c:	29509004 	addi	r5,r5,16960
10010b50:	e13ffd17 	ldw	r4,-12(fp)
10010b54:	000cb600 	call	1000cb60 <__mulsi3>
10010b58:	100b883a 	mov	r5,r2
10010b5c:	0100bef4 	movhi	r4,763
10010b60:	213c2004 	addi	r4,r4,-3968
10010b64:	000caa40 	call	1000caa4 <__udivsi3>
10010b68:	e17fff17 	ldw	r5,-4(fp)
10010b6c:	1009883a 	mov	r4,r2
10010b70:	000cb600 	call	1000cb60 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010b74:	10bfffc4 	addi	r2,r2,-1
10010b78:	00bffe16 	blt	zero,r2,10010b74 <__alt_data_end+0xf8010b74>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010b7c:	0005883a 	mov	r2,zero
}
10010b80:	e037883a 	mov	sp,fp
10010b84:	dfc00117 	ldw	ra,4(sp)
10010b88:	df000017 	ldw	fp,0(sp)
10010b8c:	dec00204 	addi	sp,sp,8
10010b90:	f800283a 	ret

10010b94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010b94:	deffff04 	addi	sp,sp,-4
10010b98:	df000015 	stw	fp,0(sp)
10010b9c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010ba0:	0001883a 	nop
10010ba4:	e037883a 	mov	sp,fp
10010ba8:	df000017 	ldw	fp,0(sp)
10010bac:	dec00104 	addi	sp,sp,4
10010bb0:	f800283a 	ret

10010bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010bb4:	defffe04 	addi	sp,sp,-8
10010bb8:	dfc00115 	stw	ra,4(sp)
10010bbc:	df000015 	stw	fp,0(sp)
10010bc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010bc4:	d0a00c17 	ldw	r2,-32720(gp)
10010bc8:	10000326 	beq	r2,zero,10010bd8 <alt_get_errno+0x24>
10010bcc:	d0a00c17 	ldw	r2,-32720(gp)
10010bd0:	103ee83a 	callr	r2
10010bd4:	00000106 	br	10010bdc <alt_get_errno+0x28>
10010bd8:	d0a6d904 	addi	r2,gp,-25756
}
10010bdc:	e037883a 	mov	sp,fp
10010be0:	dfc00117 	ldw	ra,4(sp)
10010be4:	df000017 	ldw	fp,0(sp)
10010be8:	dec00204 	addi	sp,sp,8
10010bec:	f800283a 	ret

10010bf0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010bf0:	defffa04 	addi	sp,sp,-24
10010bf4:	dfc00515 	stw	ra,20(sp)
10010bf8:	df000415 	stw	fp,16(sp)
10010bfc:	df000404 	addi	fp,sp,16
10010c00:	e13ffe15 	stw	r4,-8(fp)
10010c04:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010c08:	e0bffe17 	ldw	r2,-8(fp)
10010c0c:	10000326 	beq	r2,zero,10010c1c <alt_dev_llist_insert+0x2c>
10010c10:	e0bffe17 	ldw	r2,-8(fp)
10010c14:	10800217 	ldw	r2,8(r2)
10010c18:	1000061e 	bne	r2,zero,10010c34 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010c1c:	0010bb40 	call	10010bb4 <alt_get_errno>
10010c20:	1007883a 	mov	r3,r2
10010c24:	00800584 	movi	r2,22
10010c28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010c2c:	00bffa84 	movi	r2,-22
10010c30:	00001306 	br	10010c80 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010c34:	e0bffe17 	ldw	r2,-8(fp)
10010c38:	e0ffff17 	ldw	r3,-4(fp)
10010c3c:	e0fffc15 	stw	r3,-16(fp)
10010c40:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010c44:	e0bffd17 	ldw	r2,-12(fp)
10010c48:	e0fffc17 	ldw	r3,-16(fp)
10010c4c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010c50:	e0bffc17 	ldw	r2,-16(fp)
10010c54:	10c00017 	ldw	r3,0(r2)
10010c58:	e0bffd17 	ldw	r2,-12(fp)
10010c5c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010c60:	e0bffc17 	ldw	r2,-16(fp)
10010c64:	10800017 	ldw	r2,0(r2)
10010c68:	e0fffd17 	ldw	r3,-12(fp)
10010c6c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010c70:	e0bffc17 	ldw	r2,-16(fp)
10010c74:	e0fffd17 	ldw	r3,-12(fp)
10010c78:	10c00015 	stw	r3,0(r2)

  return 0;  
10010c7c:	0005883a 	mov	r2,zero
}
10010c80:	e037883a 	mov	sp,fp
10010c84:	dfc00117 	ldw	ra,4(sp)
10010c88:	df000017 	ldw	fp,0(sp)
10010c8c:	dec00204 	addi	sp,sp,8
10010c90:	f800283a 	ret

10010c94 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010c94:	defffd04 	addi	sp,sp,-12
10010c98:	dfc00215 	stw	ra,8(sp)
10010c9c:	df000115 	stw	fp,4(sp)
10010ca0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010ca4:	00840074 	movhi	r2,4097
10010ca8:	10871204 	addi	r2,r2,7240
10010cac:	e0bfff15 	stw	r2,-4(fp)
10010cb0:	00000606 	br	10010ccc <_do_ctors+0x38>
        (*ctor) (); 
10010cb4:	e0bfff17 	ldw	r2,-4(fp)
10010cb8:	10800017 	ldw	r2,0(r2)
10010cbc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010cc0:	e0bfff17 	ldw	r2,-4(fp)
10010cc4:	10bfff04 	addi	r2,r2,-4
10010cc8:	e0bfff15 	stw	r2,-4(fp)
10010ccc:	e0ffff17 	ldw	r3,-4(fp)
10010cd0:	00840074 	movhi	r2,4097
10010cd4:	10871304 	addi	r2,r2,7244
10010cd8:	18bff62e 	bgeu	r3,r2,10010cb4 <__alt_data_end+0xf8010cb4>
        (*ctor) (); 
}
10010cdc:	0001883a 	nop
10010ce0:	e037883a 	mov	sp,fp
10010ce4:	dfc00117 	ldw	ra,4(sp)
10010ce8:	df000017 	ldw	fp,0(sp)
10010cec:	dec00204 	addi	sp,sp,8
10010cf0:	f800283a 	ret

10010cf4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010cf4:	defffd04 	addi	sp,sp,-12
10010cf8:	dfc00215 	stw	ra,8(sp)
10010cfc:	df000115 	stw	fp,4(sp)
10010d00:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010d04:	00840074 	movhi	r2,4097
10010d08:	10871204 	addi	r2,r2,7240
10010d0c:	e0bfff15 	stw	r2,-4(fp)
10010d10:	00000606 	br	10010d2c <_do_dtors+0x38>
        (*dtor) (); 
10010d14:	e0bfff17 	ldw	r2,-4(fp)
10010d18:	10800017 	ldw	r2,0(r2)
10010d1c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010d20:	e0bfff17 	ldw	r2,-4(fp)
10010d24:	10bfff04 	addi	r2,r2,-4
10010d28:	e0bfff15 	stw	r2,-4(fp)
10010d2c:	e0ffff17 	ldw	r3,-4(fp)
10010d30:	00840074 	movhi	r2,4097
10010d34:	10871304 	addi	r2,r2,7244
10010d38:	18bff62e 	bgeu	r3,r2,10010d14 <__alt_data_end+0xf8010d14>
        (*dtor) (); 
}
10010d3c:	0001883a 	nop
10010d40:	e037883a 	mov	sp,fp
10010d44:	dfc00117 	ldw	ra,4(sp)
10010d48:	df000017 	ldw	fp,0(sp)
10010d4c:	dec00204 	addi	sp,sp,8
10010d50:	f800283a 	ret

10010d54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010d54:	deffff04 	addi	sp,sp,-4
10010d58:	df000015 	stw	fp,0(sp)
10010d5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010d60:	0001883a 	nop
10010d64:	e037883a 	mov	sp,fp
10010d68:	df000017 	ldw	fp,0(sp)
10010d6c:	dec00104 	addi	sp,sp,4
10010d70:	f800283a 	ret

10010d74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010d74:	defff904 	addi	sp,sp,-28
10010d78:	dfc00615 	stw	ra,24(sp)
10010d7c:	df000515 	stw	fp,20(sp)
10010d80:	df000504 	addi	fp,sp,20
10010d84:	e13ffc15 	stw	r4,-16(fp)
10010d88:	e17ffd15 	stw	r5,-12(fp)
10010d8c:	e1bffe15 	stw	r6,-8(fp)
10010d90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010d94:	e0800217 	ldw	r2,8(fp)
10010d98:	d8800015 	stw	r2,0(sp)
10010d9c:	e1ffff17 	ldw	r7,-4(fp)
10010da0:	e1bffe17 	ldw	r6,-8(fp)
10010da4:	e17ffd17 	ldw	r5,-12(fp)
10010da8:	e13ffc17 	ldw	r4,-16(fp)
10010dac:	0010f240 	call	10010f24 <alt_iic_isr_register>
}  
10010db0:	e037883a 	mov	sp,fp
10010db4:	dfc00117 	ldw	ra,4(sp)
10010db8:	df000017 	ldw	fp,0(sp)
10010dbc:	dec00204 	addi	sp,sp,8
10010dc0:	f800283a 	ret

10010dc4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010dc4:	defff904 	addi	sp,sp,-28
10010dc8:	df000615 	stw	fp,24(sp)
10010dcc:	df000604 	addi	fp,sp,24
10010dd0:	e13ffe15 	stw	r4,-8(fp)
10010dd4:	e17fff15 	stw	r5,-4(fp)
10010dd8:	e0bfff17 	ldw	r2,-4(fp)
10010ddc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010de0:	0005303a 	rdctl	r2,status
10010de4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010de8:	e0fffb17 	ldw	r3,-20(fp)
10010dec:	00bfff84 	movi	r2,-2
10010df0:	1884703a 	and	r2,r3,r2
10010df4:	1001703a 	wrctl	status,r2
  
  return context;
10010df8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010dfc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010e00:	00c00044 	movi	r3,1
10010e04:	e0bffa17 	ldw	r2,-24(fp)
10010e08:	1884983a 	sll	r2,r3,r2
10010e0c:	1007883a 	mov	r3,r2
10010e10:	d0a6dd17 	ldw	r2,-25740(gp)
10010e14:	1884b03a 	or	r2,r3,r2
10010e18:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010e1c:	d0a6dd17 	ldw	r2,-25740(gp)
10010e20:	100170fa 	wrctl	ienable,r2
10010e24:	e0bffc17 	ldw	r2,-16(fp)
10010e28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010e2c:	e0bffd17 	ldw	r2,-12(fp)
10010e30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010e34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010e38:	0001883a 	nop
}
10010e3c:	e037883a 	mov	sp,fp
10010e40:	df000017 	ldw	fp,0(sp)
10010e44:	dec00104 	addi	sp,sp,4
10010e48:	f800283a 	ret

10010e4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010e4c:	defff904 	addi	sp,sp,-28
10010e50:	df000615 	stw	fp,24(sp)
10010e54:	df000604 	addi	fp,sp,24
10010e58:	e13ffe15 	stw	r4,-8(fp)
10010e5c:	e17fff15 	stw	r5,-4(fp)
10010e60:	e0bfff17 	ldw	r2,-4(fp)
10010e64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e68:	0005303a 	rdctl	r2,status
10010e6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e70:	e0fffb17 	ldw	r3,-20(fp)
10010e74:	00bfff84 	movi	r2,-2
10010e78:	1884703a 	and	r2,r3,r2
10010e7c:	1001703a 	wrctl	status,r2
  
  return context;
10010e80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010e84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010e88:	00c00044 	movi	r3,1
10010e8c:	e0bffa17 	ldw	r2,-24(fp)
10010e90:	1884983a 	sll	r2,r3,r2
10010e94:	0084303a 	nor	r2,zero,r2
10010e98:	1007883a 	mov	r3,r2
10010e9c:	d0a6dd17 	ldw	r2,-25740(gp)
10010ea0:	1884703a 	and	r2,r3,r2
10010ea4:	d0a6dd15 	stw	r2,-25740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010ea8:	d0a6dd17 	ldw	r2,-25740(gp)
10010eac:	100170fa 	wrctl	ienable,r2
10010eb0:	e0bffc17 	ldw	r2,-16(fp)
10010eb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010eb8:	e0bffd17 	ldw	r2,-12(fp)
10010ebc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010ec0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010ec4:	0001883a 	nop
}
10010ec8:	e037883a 	mov	sp,fp
10010ecc:	df000017 	ldw	fp,0(sp)
10010ed0:	dec00104 	addi	sp,sp,4
10010ed4:	f800283a 	ret

10010ed8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010ed8:	defffc04 	addi	sp,sp,-16
10010edc:	df000315 	stw	fp,12(sp)
10010ee0:	df000304 	addi	fp,sp,12
10010ee4:	e13ffe15 	stw	r4,-8(fp)
10010ee8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010eec:	000530fa 	rdctl	r2,ienable
10010ef0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010ef4:	00c00044 	movi	r3,1
10010ef8:	e0bfff17 	ldw	r2,-4(fp)
10010efc:	1884983a 	sll	r2,r3,r2
10010f00:	1007883a 	mov	r3,r2
10010f04:	e0bffd17 	ldw	r2,-12(fp)
10010f08:	1884703a 	and	r2,r3,r2
10010f0c:	1004c03a 	cmpne	r2,r2,zero
10010f10:	10803fcc 	andi	r2,r2,255
}
10010f14:	e037883a 	mov	sp,fp
10010f18:	df000017 	ldw	fp,0(sp)
10010f1c:	dec00104 	addi	sp,sp,4
10010f20:	f800283a 	ret

10010f24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010f24:	defff504 	addi	sp,sp,-44
10010f28:	dfc00a15 	stw	ra,40(sp)
10010f2c:	df000915 	stw	fp,36(sp)
10010f30:	df000904 	addi	fp,sp,36
10010f34:	e13ffc15 	stw	r4,-16(fp)
10010f38:	e17ffd15 	stw	r5,-12(fp)
10010f3c:	e1bffe15 	stw	r6,-8(fp)
10010f40:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010f44:	00bffa84 	movi	r2,-22
10010f48:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010f4c:	e0bffd17 	ldw	r2,-12(fp)
10010f50:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010f54:	e0bff817 	ldw	r2,-32(fp)
10010f58:	10800808 	cmpgei	r2,r2,32
10010f5c:	1000271e 	bne	r2,zero,10010ffc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010f60:	0005303a 	rdctl	r2,status
10010f64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010f68:	e0fffb17 	ldw	r3,-20(fp)
10010f6c:	00bfff84 	movi	r2,-2
10010f70:	1884703a 	and	r2,r3,r2
10010f74:	1001703a 	wrctl	status,r2
  
  return context;
10010f78:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010f7c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10010f80:	00840074 	movhi	r2,4097
10010f84:	10975804 	addi	r2,r2,23904
10010f88:	e0fff817 	ldw	r3,-32(fp)
10010f8c:	180690fa 	slli	r3,r3,3
10010f90:	10c5883a 	add	r2,r2,r3
10010f94:	e0fffe17 	ldw	r3,-8(fp)
10010f98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010f9c:	00840074 	movhi	r2,4097
10010fa0:	10975804 	addi	r2,r2,23904
10010fa4:	e0fff817 	ldw	r3,-32(fp)
10010fa8:	180690fa 	slli	r3,r3,3
10010fac:	10c5883a 	add	r2,r2,r3
10010fb0:	10800104 	addi	r2,r2,4
10010fb4:	e0ffff17 	ldw	r3,-4(fp)
10010fb8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010fbc:	e0bffe17 	ldw	r2,-8(fp)
10010fc0:	10000526 	beq	r2,zero,10010fd8 <alt_iic_isr_register+0xb4>
10010fc4:	e0bff817 	ldw	r2,-32(fp)
10010fc8:	100b883a 	mov	r5,r2
10010fcc:	e13ffc17 	ldw	r4,-16(fp)
10010fd0:	0010dc40 	call	10010dc4 <alt_ic_irq_enable>
10010fd4:	00000406 	br	10010fe8 <alt_iic_isr_register+0xc4>
10010fd8:	e0bff817 	ldw	r2,-32(fp)
10010fdc:	100b883a 	mov	r5,r2
10010fe0:	e13ffc17 	ldw	r4,-16(fp)
10010fe4:	0010e4c0 	call	10010e4c <alt_ic_irq_disable>
10010fe8:	e0bff715 	stw	r2,-36(fp)
10010fec:	e0bffa17 	ldw	r2,-24(fp)
10010ff0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010ff4:	e0bff917 	ldw	r2,-28(fp)
10010ff8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010ffc:	e0bff717 	ldw	r2,-36(fp)
}
10011000:	e037883a 	mov	sp,fp
10011004:	dfc00117 	ldw	ra,4(sp)
10011008:	df000017 	ldw	fp,0(sp)
1001100c:	dec00204 	addi	sp,sp,8
10011010:	f800283a 	ret

10011014 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011014:	defff804 	addi	sp,sp,-32
10011018:	dfc00715 	stw	ra,28(sp)
1001101c:	df000615 	stw	fp,24(sp)
10011020:	dc000515 	stw	r16,20(sp)
10011024:	df000604 	addi	fp,sp,24
10011028:	e13ffb15 	stw	r4,-20(fp)
1001102c:	e17ffc15 	stw	r5,-16(fp)
10011030:	e1bffd15 	stw	r6,-12(fp)
10011034:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011038:	e1bffe17 	ldw	r6,-8(fp)
1001103c:	e17ffd17 	ldw	r5,-12(fp)
10011040:	e13ffc17 	ldw	r4,-16(fp)
10011044:	001129c0 	call	1001129c <open>
10011048:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1001104c:	e0bffa17 	ldw	r2,-24(fp)
10011050:	10002216 	blt	r2,zero,100110dc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011054:	04040074 	movhi	r16,4097
10011058:	840bf504 	addi	r16,r16,12244
1001105c:	e0bffa17 	ldw	r2,-24(fp)
10011060:	01400304 	movi	r5,12
10011064:	1009883a 	mov	r4,r2
10011068:	000cb600 	call	1000cb60 <__mulsi3>
1001106c:	8085883a 	add	r2,r16,r2
10011070:	10c00017 	ldw	r3,0(r2)
10011074:	e0bffb17 	ldw	r2,-20(fp)
10011078:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1001107c:	04040074 	movhi	r16,4097
10011080:	840bf504 	addi	r16,r16,12244
10011084:	e0bffa17 	ldw	r2,-24(fp)
10011088:	01400304 	movi	r5,12
1001108c:	1009883a 	mov	r4,r2
10011090:	000cb600 	call	1000cb60 <__mulsi3>
10011094:	8085883a 	add	r2,r16,r2
10011098:	10800104 	addi	r2,r2,4
1001109c:	10c00017 	ldw	r3,0(r2)
100110a0:	e0bffb17 	ldw	r2,-20(fp)
100110a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100110a8:	04040074 	movhi	r16,4097
100110ac:	840bf504 	addi	r16,r16,12244
100110b0:	e0bffa17 	ldw	r2,-24(fp)
100110b4:	01400304 	movi	r5,12
100110b8:	1009883a 	mov	r4,r2
100110bc:	000cb600 	call	1000cb60 <__mulsi3>
100110c0:	8085883a 	add	r2,r16,r2
100110c4:	10800204 	addi	r2,r2,8
100110c8:	10c00017 	ldw	r3,0(r2)
100110cc:	e0bffb17 	ldw	r2,-20(fp)
100110d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100110d4:	e13ffa17 	ldw	r4,-24(fp)
100110d8:	000fb500 	call	1000fb50 <alt_release_fd>
  }
} 
100110dc:	0001883a 	nop
100110e0:	e6ffff04 	addi	sp,fp,-4
100110e4:	dfc00217 	ldw	ra,8(sp)
100110e8:	df000117 	ldw	fp,4(sp)
100110ec:	dc000017 	ldw	r16,0(sp)
100110f0:	dec00304 	addi	sp,sp,12
100110f4:	f800283a 	ret

100110f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100110f8:	defffb04 	addi	sp,sp,-20
100110fc:	dfc00415 	stw	ra,16(sp)
10011100:	df000315 	stw	fp,12(sp)
10011104:	df000304 	addi	fp,sp,12
10011108:	e13ffd15 	stw	r4,-12(fp)
1001110c:	e17ffe15 	stw	r5,-8(fp)
10011110:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011114:	01c07fc4 	movi	r7,511
10011118:	01800044 	movi	r6,1
1001111c:	e17ffd17 	ldw	r5,-12(fp)
10011120:	01040074 	movhi	r4,4097
10011124:	210bf804 	addi	r4,r4,12256
10011128:	00110140 	call	10011014 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1001112c:	01c07fc4 	movi	r7,511
10011130:	000d883a 	mov	r6,zero
10011134:	e17ffe17 	ldw	r5,-8(fp)
10011138:	01040074 	movhi	r4,4097
1001113c:	210bf504 	addi	r4,r4,12244
10011140:	00110140 	call	10011014 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011144:	01c07fc4 	movi	r7,511
10011148:	01800044 	movi	r6,1
1001114c:	e17fff17 	ldw	r5,-4(fp)
10011150:	01040074 	movhi	r4,4097
10011154:	210bfb04 	addi	r4,r4,12268
10011158:	00110140 	call	10011014 <alt_open_fd>
}  
1001115c:	0001883a 	nop
10011160:	e037883a 	mov	sp,fp
10011164:	dfc00117 	ldw	ra,4(sp)
10011168:	df000017 	ldw	fp,0(sp)
1001116c:	dec00204 	addi	sp,sp,8
10011170:	f800283a 	ret

10011174 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011174:	defffe04 	addi	sp,sp,-8
10011178:	dfc00115 	stw	ra,4(sp)
1001117c:	df000015 	stw	fp,0(sp)
10011180:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011184:	d0a00c17 	ldw	r2,-32720(gp)
10011188:	10000326 	beq	r2,zero,10011198 <alt_get_errno+0x24>
1001118c:	d0a00c17 	ldw	r2,-32720(gp)
10011190:	103ee83a 	callr	r2
10011194:	00000106 	br	1001119c <alt_get_errno+0x28>
10011198:	d0a6d904 	addi	r2,gp,-25756
}
1001119c:	e037883a 	mov	sp,fp
100111a0:	dfc00117 	ldw	ra,4(sp)
100111a4:	df000017 	ldw	fp,0(sp)
100111a8:	dec00204 	addi	sp,sp,8
100111ac:	f800283a 	ret

100111b0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100111b0:	defffb04 	addi	sp,sp,-20
100111b4:	dfc00415 	stw	ra,16(sp)
100111b8:	df000315 	stw	fp,12(sp)
100111bc:	dc000215 	stw	r16,8(sp)
100111c0:	df000304 	addi	fp,sp,12
100111c4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100111c8:	e0bffe17 	ldw	r2,-8(fp)
100111cc:	10800217 	ldw	r2,8(r2)
100111d0:	10d00034 	orhi	r3,r2,16384
100111d4:	e0bffe17 	ldw	r2,-8(fp)
100111d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100111dc:	e03ffd15 	stw	zero,-12(fp)
100111e0:	00002306 	br	10011270 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100111e4:	04040074 	movhi	r16,4097
100111e8:	840bf504 	addi	r16,r16,12244
100111ec:	e0bffd17 	ldw	r2,-12(fp)
100111f0:	01400304 	movi	r5,12
100111f4:	1009883a 	mov	r4,r2
100111f8:	000cb600 	call	1000cb60 <__mulsi3>
100111fc:	8085883a 	add	r2,r16,r2
10011200:	10c00017 	ldw	r3,0(r2)
10011204:	e0bffe17 	ldw	r2,-8(fp)
10011208:	10800017 	ldw	r2,0(r2)
1001120c:	1880151e 	bne	r3,r2,10011264 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011210:	04040074 	movhi	r16,4097
10011214:	840bf504 	addi	r16,r16,12244
10011218:	e0bffd17 	ldw	r2,-12(fp)
1001121c:	01400304 	movi	r5,12
10011220:	1009883a 	mov	r4,r2
10011224:	000cb600 	call	1000cb60 <__mulsi3>
10011228:	8085883a 	add	r2,r16,r2
1001122c:	10800204 	addi	r2,r2,8
10011230:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011234:	10000b0e 	bge	r2,zero,10011264 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10011238:	01400304 	movi	r5,12
1001123c:	e13ffd17 	ldw	r4,-12(fp)
10011240:	000cb600 	call	1000cb60 <__mulsi3>
10011244:	1007883a 	mov	r3,r2
10011248:	00840074 	movhi	r2,4097
1001124c:	108bf504 	addi	r2,r2,12244
10011250:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011254:	e0bffe17 	ldw	r2,-8(fp)
10011258:	18800226 	beq	r3,r2,10011264 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1001125c:	00bffcc4 	movi	r2,-13
10011260:	00000806 	br	10011284 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011264:	e0bffd17 	ldw	r2,-12(fp)
10011268:	10800044 	addi	r2,r2,1
1001126c:	e0bffd15 	stw	r2,-12(fp)
10011270:	d0a00b17 	ldw	r2,-32724(gp)
10011274:	1007883a 	mov	r3,r2
10011278:	e0bffd17 	ldw	r2,-12(fp)
1001127c:	18bfd92e 	bgeu	r3,r2,100111e4 <__alt_data_end+0xf80111e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10011280:	0005883a 	mov	r2,zero
}
10011284:	e6ffff04 	addi	sp,fp,-4
10011288:	dfc00217 	ldw	ra,8(sp)
1001128c:	df000117 	ldw	fp,4(sp)
10011290:	dc000017 	ldw	r16,0(sp)
10011294:	dec00304 	addi	sp,sp,12
10011298:	f800283a 	ret

1001129c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1001129c:	defff604 	addi	sp,sp,-40
100112a0:	dfc00915 	stw	ra,36(sp)
100112a4:	df000815 	stw	fp,32(sp)
100112a8:	df000804 	addi	fp,sp,32
100112ac:	e13ffd15 	stw	r4,-12(fp)
100112b0:	e17ffe15 	stw	r5,-8(fp)
100112b4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100112b8:	00bfffc4 	movi	r2,-1
100112bc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100112c0:	00bffb44 	movi	r2,-19
100112c4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100112c8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100112cc:	d1600904 	addi	r5,gp,-32732
100112d0:	e13ffd17 	ldw	r4,-12(fp)
100112d4:	00115c00 	call	100115c0 <alt_find_dev>
100112d8:	e0bff815 	stw	r2,-32(fp)
100112dc:	e0bff817 	ldw	r2,-32(fp)
100112e0:	1000051e 	bne	r2,zero,100112f8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100112e4:	e13ffd17 	ldw	r4,-12(fp)
100112e8:	00116500 	call	10011650 <alt_find_file>
100112ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100112f0:	00800044 	movi	r2,1
100112f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100112f8:	e0bff817 	ldw	r2,-32(fp)
100112fc:	10002b26 	beq	r2,zero,100113ac <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011300:	e13ff817 	ldw	r4,-32(fp)
10011304:	00117580 	call	10011758 <alt_get_fd>
10011308:	e0bff915 	stw	r2,-28(fp)
1001130c:	e0bff917 	ldw	r2,-28(fp)
10011310:	1000030e 	bge	r2,zero,10011320 <open+0x84>
    {
      status = index;
10011314:	e0bff917 	ldw	r2,-28(fp)
10011318:	e0bffa15 	stw	r2,-24(fp)
1001131c:	00002506 	br	100113b4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10011320:	01400304 	movi	r5,12
10011324:	e13ff917 	ldw	r4,-28(fp)
10011328:	000cb600 	call	1000cb60 <__mulsi3>
1001132c:	1007883a 	mov	r3,r2
10011330:	00840074 	movhi	r2,4097
10011334:	108bf504 	addi	r2,r2,12244
10011338:	1885883a 	add	r2,r3,r2
1001133c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011340:	e0fffe17 	ldw	r3,-8(fp)
10011344:	00900034 	movhi	r2,16384
10011348:	10bfffc4 	addi	r2,r2,-1
1001134c:	1886703a 	and	r3,r3,r2
10011350:	e0bffc17 	ldw	r2,-16(fp)
10011354:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011358:	e0bffb17 	ldw	r2,-20(fp)
1001135c:	1000051e 	bne	r2,zero,10011374 <open+0xd8>
10011360:	e13ffc17 	ldw	r4,-16(fp)
10011364:	00111b00 	call	100111b0 <alt_file_locked>
10011368:	e0bffa15 	stw	r2,-24(fp)
1001136c:	e0bffa17 	ldw	r2,-24(fp)
10011370:	10001016 	blt	r2,zero,100113b4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011374:	e0bff817 	ldw	r2,-32(fp)
10011378:	10800317 	ldw	r2,12(r2)
1001137c:	10000826 	beq	r2,zero,100113a0 <open+0x104>
10011380:	e0bff817 	ldw	r2,-32(fp)
10011384:	10800317 	ldw	r2,12(r2)
10011388:	e1ffff17 	ldw	r7,-4(fp)
1001138c:	e1bffe17 	ldw	r6,-8(fp)
10011390:	e17ffd17 	ldw	r5,-12(fp)
10011394:	e13ffc17 	ldw	r4,-16(fp)
10011398:	103ee83a 	callr	r2
1001139c:	00000106 	br	100113a4 <open+0x108>
100113a0:	0005883a 	mov	r2,zero
100113a4:	e0bffa15 	stw	r2,-24(fp)
100113a8:	00000206 	br	100113b4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100113ac:	00bffb44 	movi	r2,-19
100113b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100113b4:	e0bffa17 	ldw	r2,-24(fp)
100113b8:	1000090e 	bge	r2,zero,100113e0 <open+0x144>
  {
    alt_release_fd (index);  
100113bc:	e13ff917 	ldw	r4,-28(fp)
100113c0:	000fb500 	call	1000fb50 <alt_release_fd>
    ALT_ERRNO = -status;
100113c4:	00111740 	call	10011174 <alt_get_errno>
100113c8:	1007883a 	mov	r3,r2
100113cc:	e0bffa17 	ldw	r2,-24(fp)
100113d0:	0085c83a 	sub	r2,zero,r2
100113d4:	18800015 	stw	r2,0(r3)
    return -1;
100113d8:	00bfffc4 	movi	r2,-1
100113dc:	00000106 	br	100113e4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100113e0:	e0bff917 	ldw	r2,-28(fp)
}
100113e4:	e037883a 	mov	sp,fp
100113e8:	dfc00117 	ldw	ra,4(sp)
100113ec:	df000017 	ldw	fp,0(sp)
100113f0:	dec00204 	addi	sp,sp,8
100113f4:	f800283a 	ret

100113f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100113f8:	defffa04 	addi	sp,sp,-24
100113fc:	df000515 	stw	fp,20(sp)
10011400:	df000504 	addi	fp,sp,20
10011404:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011408:	0005303a 	rdctl	r2,status
1001140c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011410:	e0fffc17 	ldw	r3,-16(fp)
10011414:	00bfff84 	movi	r2,-2
10011418:	1884703a 	and	r2,r3,r2
1001141c:	1001703a 	wrctl	status,r2
  
  return context;
10011420:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011424:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011428:	e0bfff17 	ldw	r2,-4(fp)
1001142c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011430:	e0bffd17 	ldw	r2,-12(fp)
10011434:	10800017 	ldw	r2,0(r2)
10011438:	e0fffd17 	ldw	r3,-12(fp)
1001143c:	18c00117 	ldw	r3,4(r3)
10011440:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011444:	e0bffd17 	ldw	r2,-12(fp)
10011448:	10800117 	ldw	r2,4(r2)
1001144c:	e0fffd17 	ldw	r3,-12(fp)
10011450:	18c00017 	ldw	r3,0(r3)
10011454:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011458:	e0bffd17 	ldw	r2,-12(fp)
1001145c:	e0fffd17 	ldw	r3,-12(fp)
10011460:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011464:	e0bffd17 	ldw	r2,-12(fp)
10011468:	e0fffd17 	ldw	r3,-12(fp)
1001146c:	10c00015 	stw	r3,0(r2)
10011470:	e0bffb17 	ldw	r2,-20(fp)
10011474:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011478:	e0bffe17 	ldw	r2,-8(fp)
1001147c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011480:	0001883a 	nop
10011484:	e037883a 	mov	sp,fp
10011488:	df000017 	ldw	fp,0(sp)
1001148c:	dec00104 	addi	sp,sp,4
10011490:	f800283a 	ret

10011494 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011494:	defffb04 	addi	sp,sp,-20
10011498:	dfc00415 	stw	ra,16(sp)
1001149c:	df000315 	stw	fp,12(sp)
100114a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100114a4:	d0a00f17 	ldw	r2,-32708(gp)
100114a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100114ac:	d0a6df17 	ldw	r2,-25732(gp)
100114b0:	10800044 	addi	r2,r2,1
100114b4:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100114b8:	00002e06 	br	10011574 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100114bc:	e0bffd17 	ldw	r2,-12(fp)
100114c0:	10800017 	ldw	r2,0(r2)
100114c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100114c8:	e0bffd17 	ldw	r2,-12(fp)
100114cc:	10800403 	ldbu	r2,16(r2)
100114d0:	10803fcc 	andi	r2,r2,255
100114d4:	10000426 	beq	r2,zero,100114e8 <alt_tick+0x54>
100114d8:	d0a6df17 	ldw	r2,-25732(gp)
100114dc:	1000021e 	bne	r2,zero,100114e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100114e0:	e0bffd17 	ldw	r2,-12(fp)
100114e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100114e8:	e0bffd17 	ldw	r2,-12(fp)
100114ec:	10800217 	ldw	r2,8(r2)
100114f0:	d0e6df17 	ldw	r3,-25732(gp)
100114f4:	18801d36 	bltu	r3,r2,1001156c <alt_tick+0xd8>
100114f8:	e0bffd17 	ldw	r2,-12(fp)
100114fc:	10800403 	ldbu	r2,16(r2)
10011500:	10803fcc 	andi	r2,r2,255
10011504:	1000191e 	bne	r2,zero,1001156c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011508:	e0bffd17 	ldw	r2,-12(fp)
1001150c:	10800317 	ldw	r2,12(r2)
10011510:	e0fffd17 	ldw	r3,-12(fp)
10011514:	18c00517 	ldw	r3,20(r3)
10011518:	1809883a 	mov	r4,r3
1001151c:	103ee83a 	callr	r2
10011520:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011524:	e0bfff17 	ldw	r2,-4(fp)
10011528:	1000031e 	bne	r2,zero,10011538 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1001152c:	e13ffd17 	ldw	r4,-12(fp)
10011530:	00113f80 	call	100113f8 <alt_alarm_stop>
10011534:	00000d06 	br	1001156c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011538:	e0bffd17 	ldw	r2,-12(fp)
1001153c:	10c00217 	ldw	r3,8(r2)
10011540:	e0bfff17 	ldw	r2,-4(fp)
10011544:	1887883a 	add	r3,r3,r2
10011548:	e0bffd17 	ldw	r2,-12(fp)
1001154c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011550:	e0bffd17 	ldw	r2,-12(fp)
10011554:	10c00217 	ldw	r3,8(r2)
10011558:	d0a6df17 	ldw	r2,-25732(gp)
1001155c:	1880032e 	bgeu	r3,r2,1001156c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011560:	e0bffd17 	ldw	r2,-12(fp)
10011564:	00c00044 	movi	r3,1
10011568:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1001156c:	e0bffe17 	ldw	r2,-8(fp)
10011570:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011574:	e0fffd17 	ldw	r3,-12(fp)
10011578:	d0a00f04 	addi	r2,gp,-32708
1001157c:	18bfcf1e 	bne	r3,r2,100114bc <__alt_data_end+0xf80114bc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011580:	0001883a 	nop
}
10011584:	0001883a 	nop
10011588:	e037883a 	mov	sp,fp
1001158c:	dfc00117 	ldw	ra,4(sp)
10011590:	df000017 	ldw	fp,0(sp)
10011594:	dec00204 	addi	sp,sp,8
10011598:	f800283a 	ret

1001159c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1001159c:	deffff04 	addi	sp,sp,-4
100115a0:	df000015 	stw	fp,0(sp)
100115a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100115a8:	000170fa 	wrctl	ienable,zero
}
100115ac:	0001883a 	nop
100115b0:	e037883a 	mov	sp,fp
100115b4:	df000017 	ldw	fp,0(sp)
100115b8:	dec00104 	addi	sp,sp,4
100115bc:	f800283a 	ret

100115c0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100115c0:	defffa04 	addi	sp,sp,-24
100115c4:	dfc00515 	stw	ra,20(sp)
100115c8:	df000415 	stw	fp,16(sp)
100115cc:	df000404 	addi	fp,sp,16
100115d0:	e13ffe15 	stw	r4,-8(fp)
100115d4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100115d8:	e0bfff17 	ldw	r2,-4(fp)
100115dc:	10800017 	ldw	r2,0(r2)
100115e0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100115e4:	e13ffe17 	ldw	r4,-8(fp)
100115e8:	000262c0 	call	1000262c <strlen>
100115ec:	10800044 	addi	r2,r2,1
100115f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100115f4:	00000d06 	br	1001162c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100115f8:	e0bffc17 	ldw	r2,-16(fp)
100115fc:	10800217 	ldw	r2,8(r2)
10011600:	e0fffd17 	ldw	r3,-12(fp)
10011604:	180d883a 	mov	r6,r3
10011608:	e17ffe17 	ldw	r5,-8(fp)
1001160c:	1009883a 	mov	r4,r2
10011610:	00119040 	call	10011904 <memcmp>
10011614:	1000021e 	bne	r2,zero,10011620 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011618:	e0bffc17 	ldw	r2,-16(fp)
1001161c:	00000706 	br	1001163c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011620:	e0bffc17 	ldw	r2,-16(fp)
10011624:	10800017 	ldw	r2,0(r2)
10011628:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1001162c:	e0fffc17 	ldw	r3,-16(fp)
10011630:	e0bfff17 	ldw	r2,-4(fp)
10011634:	18bff01e 	bne	r3,r2,100115f8 <__alt_data_end+0xf80115f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10011638:	0005883a 	mov	r2,zero
}
1001163c:	e037883a 	mov	sp,fp
10011640:	dfc00117 	ldw	ra,4(sp)
10011644:	df000017 	ldw	fp,0(sp)
10011648:	dec00204 	addi	sp,sp,8
1001164c:	f800283a 	ret

10011650 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011650:	defffb04 	addi	sp,sp,-20
10011654:	dfc00415 	stw	ra,16(sp)
10011658:	df000315 	stw	fp,12(sp)
1001165c:	df000304 	addi	fp,sp,12
10011660:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011664:	d0a00717 	ldw	r2,-32740(gp)
10011668:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001166c:	00003106 	br	10011734 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10011670:	e0bffd17 	ldw	r2,-12(fp)
10011674:	10800217 	ldw	r2,8(r2)
10011678:	1009883a 	mov	r4,r2
1001167c:	000262c0 	call	1000262c <strlen>
10011680:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011684:	e0bffd17 	ldw	r2,-12(fp)
10011688:	10c00217 	ldw	r3,8(r2)
1001168c:	e0bffe17 	ldw	r2,-8(fp)
10011690:	10bfffc4 	addi	r2,r2,-1
10011694:	1885883a 	add	r2,r3,r2
10011698:	10800003 	ldbu	r2,0(r2)
1001169c:	10803fcc 	andi	r2,r2,255
100116a0:	1080201c 	xori	r2,r2,128
100116a4:	10bfe004 	addi	r2,r2,-128
100116a8:	10800bd8 	cmpnei	r2,r2,47
100116ac:	1000031e 	bne	r2,zero,100116bc <alt_find_file+0x6c>
    {
      len -= 1;
100116b0:	e0bffe17 	ldw	r2,-8(fp)
100116b4:	10bfffc4 	addi	r2,r2,-1
100116b8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100116bc:	e0bffe17 	ldw	r2,-8(fp)
100116c0:	e0ffff17 	ldw	r3,-4(fp)
100116c4:	1885883a 	add	r2,r3,r2
100116c8:	10800003 	ldbu	r2,0(r2)
100116cc:	10803fcc 	andi	r2,r2,255
100116d0:	1080201c 	xori	r2,r2,128
100116d4:	10bfe004 	addi	r2,r2,-128
100116d8:	10800be0 	cmpeqi	r2,r2,47
100116dc:	1000081e 	bne	r2,zero,10011700 <alt_find_file+0xb0>
100116e0:	e0bffe17 	ldw	r2,-8(fp)
100116e4:	e0ffff17 	ldw	r3,-4(fp)
100116e8:	1885883a 	add	r2,r3,r2
100116ec:	10800003 	ldbu	r2,0(r2)
100116f0:	10803fcc 	andi	r2,r2,255
100116f4:	1080201c 	xori	r2,r2,128
100116f8:	10bfe004 	addi	r2,r2,-128
100116fc:	10000a1e 	bne	r2,zero,10011728 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011700:	e0bffd17 	ldw	r2,-12(fp)
10011704:	10800217 	ldw	r2,8(r2)
10011708:	e0fffe17 	ldw	r3,-8(fp)
1001170c:	180d883a 	mov	r6,r3
10011710:	e17fff17 	ldw	r5,-4(fp)
10011714:	1009883a 	mov	r4,r2
10011718:	00119040 	call	10011904 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001171c:	1000021e 	bne	r2,zero,10011728 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10011720:	e0bffd17 	ldw	r2,-12(fp)
10011724:	00000706 	br	10011744 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011728:	e0bffd17 	ldw	r2,-12(fp)
1001172c:	10800017 	ldw	r2,0(r2)
10011730:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011734:	e0fffd17 	ldw	r3,-12(fp)
10011738:	d0a00704 	addi	r2,gp,-32740
1001173c:	18bfcc1e 	bne	r3,r2,10011670 <__alt_data_end+0xf8011670>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011740:	0005883a 	mov	r2,zero
}
10011744:	e037883a 	mov	sp,fp
10011748:	dfc00117 	ldw	ra,4(sp)
1001174c:	df000017 	ldw	fp,0(sp)
10011750:	dec00204 	addi	sp,sp,8
10011754:	f800283a 	ret

10011758 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011758:	defffa04 	addi	sp,sp,-24
1001175c:	dfc00515 	stw	ra,20(sp)
10011760:	df000415 	stw	fp,16(sp)
10011764:	dc000315 	stw	r16,12(sp)
10011768:	df000404 	addi	fp,sp,16
1001176c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011770:	00bffa04 	movi	r2,-24
10011774:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011778:	e03ffc15 	stw	zero,-16(fp)
1001177c:	00001d06 	br	100117f4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10011780:	04040074 	movhi	r16,4097
10011784:	840bf504 	addi	r16,r16,12244
10011788:	e0bffc17 	ldw	r2,-16(fp)
1001178c:	01400304 	movi	r5,12
10011790:	1009883a 	mov	r4,r2
10011794:	000cb600 	call	1000cb60 <__mulsi3>
10011798:	8085883a 	add	r2,r16,r2
1001179c:	10800017 	ldw	r2,0(r2)
100117a0:	1000111e 	bne	r2,zero,100117e8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
100117a4:	04040074 	movhi	r16,4097
100117a8:	840bf504 	addi	r16,r16,12244
100117ac:	e0bffc17 	ldw	r2,-16(fp)
100117b0:	01400304 	movi	r5,12
100117b4:	1009883a 	mov	r4,r2
100117b8:	000cb600 	call	1000cb60 <__mulsi3>
100117bc:	8085883a 	add	r2,r16,r2
100117c0:	e0fffe17 	ldw	r3,-8(fp)
100117c4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100117c8:	d0e00b17 	ldw	r3,-32724(gp)
100117cc:	e0bffc17 	ldw	r2,-16(fp)
100117d0:	1880020e 	bge	r3,r2,100117dc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
100117d4:	e0bffc17 	ldw	r2,-16(fp)
100117d8:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
100117dc:	e0bffc17 	ldw	r2,-16(fp)
100117e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100117e4:	00000606 	br	10011800 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100117e8:	e0bffc17 	ldw	r2,-16(fp)
100117ec:	10800044 	addi	r2,r2,1
100117f0:	e0bffc15 	stw	r2,-16(fp)
100117f4:	e0bffc17 	ldw	r2,-16(fp)
100117f8:	10800810 	cmplti	r2,r2,32
100117fc:	103fe01e 	bne	r2,zero,10011780 <__alt_data_end+0xf8011780>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011800:	e0bffd17 	ldw	r2,-12(fp)
}
10011804:	e6ffff04 	addi	sp,fp,-4
10011808:	dfc00217 	ldw	ra,8(sp)
1001180c:	df000117 	ldw	fp,4(sp)
10011810:	dc000017 	ldw	r16,0(sp)
10011814:	dec00304 	addi	sp,sp,12
10011818:	f800283a 	ret

1001181c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1001181c:	defffe04 	addi	sp,sp,-8
10011820:	df000115 	stw	fp,4(sp)
10011824:	df000104 	addi	fp,sp,4
10011828:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1001182c:	e0bfff17 	ldw	r2,-4(fp)
10011830:	10bffe84 	addi	r2,r2,-6
10011834:	10c00428 	cmpgeui	r3,r2,16
10011838:	18001a1e 	bne	r3,zero,100118a4 <alt_exception_cause_generated_bad_addr+0x88>
1001183c:	100690ba 	slli	r3,r2,2
10011840:	00840074 	movhi	r2,4097
10011844:	10861504 	addi	r2,r2,6228
10011848:	1885883a 	add	r2,r3,r2
1001184c:	10800017 	ldw	r2,0(r2)
10011850:	1000683a 	jmp	r2
10011854:	10011894 	ori	zero,r2,1122
10011858:	10011894 	ori	zero,r2,1122
1001185c:	100118a4 	muli	zero,r2,1122
10011860:	100118a4 	muli	zero,r2,1122
10011864:	100118a4 	muli	zero,r2,1122
10011868:	10011894 	ori	zero,r2,1122
1001186c:	1001189c 	xori	zero,r2,1122
10011870:	100118a4 	muli	zero,r2,1122
10011874:	10011894 	ori	zero,r2,1122
10011878:	10011894 	ori	zero,r2,1122
1001187c:	100118a4 	muli	zero,r2,1122
10011880:	10011894 	ori	zero,r2,1122
10011884:	1001189c 	xori	zero,r2,1122
10011888:	100118a4 	muli	zero,r2,1122
1001188c:	100118a4 	muli	zero,r2,1122
10011890:	10011894 	ori	zero,r2,1122
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011894:	00800044 	movi	r2,1
10011898:	00000306 	br	100118a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1001189c:	0005883a 	mov	r2,zero
100118a0:	00000106 	br	100118a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100118a4:	0005883a 	mov	r2,zero
  }
}
100118a8:	e037883a 	mov	sp,fp
100118ac:	df000017 	ldw	fp,0(sp)
100118b0:	dec00104 	addi	sp,sp,4
100118b4:	f800283a 	ret

100118b8 <atexit>:
100118b8:	200b883a 	mov	r5,r4
100118bc:	000f883a 	mov	r7,zero
100118c0:	000d883a 	mov	r6,zero
100118c4:	0009883a 	mov	r4,zero
100118c8:	00119801 	jmpi	10011980 <__register_exitproc>

100118cc <exit>:
100118cc:	defffe04 	addi	sp,sp,-8
100118d0:	000b883a 	mov	r5,zero
100118d4:	dc000015 	stw	r16,0(sp)
100118d8:	dfc00115 	stw	ra,4(sp)
100118dc:	2021883a 	mov	r16,r4
100118e0:	0011a980 	call	10011a98 <__call_exitprocs>
100118e4:	00840074 	movhi	r2,4097
100118e8:	10906e04 	addi	r2,r2,16824
100118ec:	11000017 	ldw	r4,0(r2)
100118f0:	20800f17 	ldw	r2,60(r4)
100118f4:	10000126 	beq	r2,zero,100118fc <exit+0x30>
100118f8:	103ee83a 	callr	r2
100118fc:	8009883a 	mov	r4,r16
10011900:	0011c180 	call	10011c18 <_exit>

10011904 <memcmp>:
10011904:	01c000c4 	movi	r7,3
10011908:	3980192e 	bgeu	r7,r6,10011970 <memcmp+0x6c>
1001190c:	2144b03a 	or	r2,r4,r5
10011910:	11c4703a 	and	r2,r2,r7
10011914:	10000f26 	beq	r2,zero,10011954 <memcmp+0x50>
10011918:	20800003 	ldbu	r2,0(r4)
1001191c:	28c00003 	ldbu	r3,0(r5)
10011920:	10c0151e 	bne	r2,r3,10011978 <memcmp+0x74>
10011924:	31bfff84 	addi	r6,r6,-2
10011928:	01ffffc4 	movi	r7,-1
1001192c:	00000406 	br	10011940 <memcmp+0x3c>
10011930:	20800003 	ldbu	r2,0(r4)
10011934:	28c00003 	ldbu	r3,0(r5)
10011938:	31bfffc4 	addi	r6,r6,-1
1001193c:	10c00e1e 	bne	r2,r3,10011978 <memcmp+0x74>
10011940:	21000044 	addi	r4,r4,1
10011944:	29400044 	addi	r5,r5,1
10011948:	31fff91e 	bne	r6,r7,10011930 <__alt_data_end+0xf8011930>
1001194c:	0005883a 	mov	r2,zero
10011950:	f800283a 	ret
10011954:	20c00017 	ldw	r3,0(r4)
10011958:	28800017 	ldw	r2,0(r5)
1001195c:	18bfee1e 	bne	r3,r2,10011918 <__alt_data_end+0xf8011918>
10011960:	31bfff04 	addi	r6,r6,-4
10011964:	21000104 	addi	r4,r4,4
10011968:	29400104 	addi	r5,r5,4
1001196c:	39bff936 	bltu	r7,r6,10011954 <__alt_data_end+0xf8011954>
10011970:	303fe91e 	bne	r6,zero,10011918 <__alt_data_end+0xf8011918>
10011974:	003ff506 	br	1001194c <__alt_data_end+0xf801194c>
10011978:	10c5c83a 	sub	r2,r2,r3
1001197c:	f800283a 	ret

10011980 <__register_exitproc>:
10011980:	defffa04 	addi	sp,sp,-24
10011984:	dc000315 	stw	r16,12(sp)
10011988:	04040074 	movhi	r16,4097
1001198c:	84106e04 	addi	r16,r16,16824
10011990:	80c00017 	ldw	r3,0(r16)
10011994:	dc400415 	stw	r17,16(sp)
10011998:	dfc00515 	stw	ra,20(sp)
1001199c:	18805217 	ldw	r2,328(r3)
100119a0:	2023883a 	mov	r17,r4
100119a4:	10003726 	beq	r2,zero,10011a84 <__register_exitproc+0x104>
100119a8:	10c00117 	ldw	r3,4(r2)
100119ac:	010007c4 	movi	r4,31
100119b0:	20c00e16 	blt	r4,r3,100119ec <__register_exitproc+0x6c>
100119b4:	1a000044 	addi	r8,r3,1
100119b8:	8800221e 	bne	r17,zero,10011a44 <__register_exitproc+0xc4>
100119bc:	18c00084 	addi	r3,r3,2
100119c0:	18c7883a 	add	r3,r3,r3
100119c4:	18c7883a 	add	r3,r3,r3
100119c8:	12000115 	stw	r8,4(r2)
100119cc:	10c7883a 	add	r3,r2,r3
100119d0:	19400015 	stw	r5,0(r3)
100119d4:	0005883a 	mov	r2,zero
100119d8:	dfc00517 	ldw	ra,20(sp)
100119dc:	dc400417 	ldw	r17,16(sp)
100119e0:	dc000317 	ldw	r16,12(sp)
100119e4:	dec00604 	addi	sp,sp,24
100119e8:	f800283a 	ret
100119ec:	00800034 	movhi	r2,0
100119f0:	10800004 	addi	r2,r2,0
100119f4:	10002626 	beq	r2,zero,10011a90 <__register_exitproc+0x110>
100119f8:	01006404 	movi	r4,400
100119fc:	d9400015 	stw	r5,0(sp)
10011a00:	d9800115 	stw	r6,4(sp)
10011a04:	d9c00215 	stw	r7,8(sp)
10011a08:	00000000 	call	10000000 <__alt_mem_sdram>
10011a0c:	d9400017 	ldw	r5,0(sp)
10011a10:	d9800117 	ldw	r6,4(sp)
10011a14:	d9c00217 	ldw	r7,8(sp)
10011a18:	10001d26 	beq	r2,zero,10011a90 <__register_exitproc+0x110>
10011a1c:	81000017 	ldw	r4,0(r16)
10011a20:	10000115 	stw	zero,4(r2)
10011a24:	02000044 	movi	r8,1
10011a28:	22405217 	ldw	r9,328(r4)
10011a2c:	0007883a 	mov	r3,zero
10011a30:	12400015 	stw	r9,0(r2)
10011a34:	20805215 	stw	r2,328(r4)
10011a38:	10006215 	stw	zero,392(r2)
10011a3c:	10006315 	stw	zero,396(r2)
10011a40:	883fde26 	beq	r17,zero,100119bc <__alt_data_end+0xf80119bc>
10011a44:	18c9883a 	add	r4,r3,r3
10011a48:	2109883a 	add	r4,r4,r4
10011a4c:	1109883a 	add	r4,r2,r4
10011a50:	21802215 	stw	r6,136(r4)
10011a54:	01800044 	movi	r6,1
10011a58:	12406217 	ldw	r9,392(r2)
10011a5c:	30cc983a 	sll	r6,r6,r3
10011a60:	4992b03a 	or	r9,r9,r6
10011a64:	12406215 	stw	r9,392(r2)
10011a68:	21c04215 	stw	r7,264(r4)
10011a6c:	01000084 	movi	r4,2
10011a70:	893fd21e 	bne	r17,r4,100119bc <__alt_data_end+0xf80119bc>
10011a74:	11006317 	ldw	r4,396(r2)
10011a78:	218cb03a 	or	r6,r4,r6
10011a7c:	11806315 	stw	r6,396(r2)
10011a80:	003fce06 	br	100119bc <__alt_data_end+0xf80119bc>
10011a84:	18805304 	addi	r2,r3,332
10011a88:	18805215 	stw	r2,328(r3)
10011a8c:	003fc606 	br	100119a8 <__alt_data_end+0xf80119a8>
10011a90:	00bfffc4 	movi	r2,-1
10011a94:	003fd006 	br	100119d8 <__alt_data_end+0xf80119d8>

10011a98 <__call_exitprocs>:
10011a98:	defff504 	addi	sp,sp,-44
10011a9c:	df000915 	stw	fp,36(sp)
10011aa0:	dd400615 	stw	r21,24(sp)
10011aa4:	dc800315 	stw	r18,12(sp)
10011aa8:	dfc00a15 	stw	ra,40(sp)
10011aac:	ddc00815 	stw	r23,32(sp)
10011ab0:	dd800715 	stw	r22,28(sp)
10011ab4:	dd000515 	stw	r20,20(sp)
10011ab8:	dcc00415 	stw	r19,16(sp)
10011abc:	dc400215 	stw	r17,8(sp)
10011ac0:	dc000115 	stw	r16,4(sp)
10011ac4:	d9000015 	stw	r4,0(sp)
10011ac8:	2839883a 	mov	fp,r5
10011acc:	04800044 	movi	r18,1
10011ad0:	057fffc4 	movi	r21,-1
10011ad4:	00840074 	movhi	r2,4097
10011ad8:	10906e04 	addi	r2,r2,16824
10011adc:	12000017 	ldw	r8,0(r2)
10011ae0:	45005217 	ldw	r20,328(r8)
10011ae4:	44c05204 	addi	r19,r8,328
10011ae8:	a0001c26 	beq	r20,zero,10011b5c <__call_exitprocs+0xc4>
10011aec:	a0800117 	ldw	r2,4(r20)
10011af0:	15ffffc4 	addi	r23,r2,-1
10011af4:	b8000d16 	blt	r23,zero,10011b2c <__call_exitprocs+0x94>
10011af8:	14000044 	addi	r16,r2,1
10011afc:	8421883a 	add	r16,r16,r16
10011b00:	8421883a 	add	r16,r16,r16
10011b04:	84402004 	addi	r17,r16,128
10011b08:	a463883a 	add	r17,r20,r17
10011b0c:	a421883a 	add	r16,r20,r16
10011b10:	e0001e26 	beq	fp,zero,10011b8c <__call_exitprocs+0xf4>
10011b14:	80804017 	ldw	r2,256(r16)
10011b18:	e0801c26 	beq	fp,r2,10011b8c <__call_exitprocs+0xf4>
10011b1c:	bdffffc4 	addi	r23,r23,-1
10011b20:	843fff04 	addi	r16,r16,-4
10011b24:	8c7fff04 	addi	r17,r17,-4
10011b28:	bd7ff91e 	bne	r23,r21,10011b10 <__alt_data_end+0xf8011b10>
10011b2c:	00800034 	movhi	r2,0
10011b30:	10800004 	addi	r2,r2,0
10011b34:	10000926 	beq	r2,zero,10011b5c <__call_exitprocs+0xc4>
10011b38:	a0800117 	ldw	r2,4(r20)
10011b3c:	1000301e 	bne	r2,zero,10011c00 <__call_exitprocs+0x168>
10011b40:	a0800017 	ldw	r2,0(r20)
10011b44:	10003226 	beq	r2,zero,10011c10 <__call_exitprocs+0x178>
10011b48:	a009883a 	mov	r4,r20
10011b4c:	98800015 	stw	r2,0(r19)
10011b50:	00000000 	call	10000000 <__alt_mem_sdram>
10011b54:	9d000017 	ldw	r20,0(r19)
10011b58:	a03fe41e 	bne	r20,zero,10011aec <__alt_data_end+0xf8011aec>
10011b5c:	dfc00a17 	ldw	ra,40(sp)
10011b60:	df000917 	ldw	fp,36(sp)
10011b64:	ddc00817 	ldw	r23,32(sp)
10011b68:	dd800717 	ldw	r22,28(sp)
10011b6c:	dd400617 	ldw	r21,24(sp)
10011b70:	dd000517 	ldw	r20,20(sp)
10011b74:	dcc00417 	ldw	r19,16(sp)
10011b78:	dc800317 	ldw	r18,12(sp)
10011b7c:	dc400217 	ldw	r17,8(sp)
10011b80:	dc000117 	ldw	r16,4(sp)
10011b84:	dec00b04 	addi	sp,sp,44
10011b88:	f800283a 	ret
10011b8c:	a0800117 	ldw	r2,4(r20)
10011b90:	80c00017 	ldw	r3,0(r16)
10011b94:	10bfffc4 	addi	r2,r2,-1
10011b98:	15c01426 	beq	r2,r23,10011bec <__call_exitprocs+0x154>
10011b9c:	80000015 	stw	zero,0(r16)
10011ba0:	183fde26 	beq	r3,zero,10011b1c <__alt_data_end+0xf8011b1c>
10011ba4:	95c8983a 	sll	r4,r18,r23
10011ba8:	a0806217 	ldw	r2,392(r20)
10011bac:	a5800117 	ldw	r22,4(r20)
10011bb0:	2084703a 	and	r2,r4,r2
10011bb4:	10000b26 	beq	r2,zero,10011be4 <__call_exitprocs+0x14c>
10011bb8:	a0806317 	ldw	r2,396(r20)
10011bbc:	2088703a 	and	r4,r4,r2
10011bc0:	20000c1e 	bne	r4,zero,10011bf4 <__call_exitprocs+0x15c>
10011bc4:	89400017 	ldw	r5,0(r17)
10011bc8:	d9000017 	ldw	r4,0(sp)
10011bcc:	183ee83a 	callr	r3
10011bd0:	a0800117 	ldw	r2,4(r20)
10011bd4:	15bfbf1e 	bne	r2,r22,10011ad4 <__alt_data_end+0xf8011ad4>
10011bd8:	98800017 	ldw	r2,0(r19)
10011bdc:	153fcf26 	beq	r2,r20,10011b1c <__alt_data_end+0xf8011b1c>
10011be0:	003fbc06 	br	10011ad4 <__alt_data_end+0xf8011ad4>
10011be4:	183ee83a 	callr	r3
10011be8:	003ff906 	br	10011bd0 <__alt_data_end+0xf8011bd0>
10011bec:	a5c00115 	stw	r23,4(r20)
10011bf0:	003feb06 	br	10011ba0 <__alt_data_end+0xf8011ba0>
10011bf4:	89000017 	ldw	r4,0(r17)
10011bf8:	183ee83a 	callr	r3
10011bfc:	003ff406 	br	10011bd0 <__alt_data_end+0xf8011bd0>
10011c00:	a0800017 	ldw	r2,0(r20)
10011c04:	a027883a 	mov	r19,r20
10011c08:	1029883a 	mov	r20,r2
10011c0c:	003fb606 	br	10011ae8 <__alt_data_end+0xf8011ae8>
10011c10:	0005883a 	mov	r2,zero
10011c14:	003ffb06 	br	10011c04 <__alt_data_end+0xf8011c04>

10011c18 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011c18:	defffd04 	addi	sp,sp,-12
10011c1c:	df000215 	stw	fp,8(sp)
10011c20:	df000204 	addi	fp,sp,8
10011c24:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011c28:	0001883a 	nop
10011c2c:	e0bfff17 	ldw	r2,-4(fp)
10011c30:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011c34:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011c38:	10000226 	beq	r2,zero,10011c44 <_exit+0x2c>
    ALT_SIM_FAIL();
10011c3c:	002af070 	cmpltui	zero,zero,43969
10011c40:	00000106 	br	10011c48 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011c44:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011c48:	003fff06 	br	10011c48 <__alt_data_end+0xf8011c48>
