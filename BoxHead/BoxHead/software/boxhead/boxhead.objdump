
boxhead.elf:     file format elf32-littlenios2
boxhead.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014f6c memsz 0x00014f6c flags r-x
    LOAD off    0x00015f8c vaddr 0x10014f8c paddr 0x10017944 align 2**12
         filesz 0x000029b8 memsz 0x000029b8 flags rw-
    LOAD off    0x000192fc vaddr 0x1001a2fc paddr 0x1001a2fc align 2**12
         filesz 0x00000000 memsz 0x000007f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000140f8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c64  10014328  10014328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000029b8  10014f8c  10017944  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007f4  1001a2fc  1001a2fc  000192fc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00018944  2**0
                  CONTENTS
  7 .sdram        00000000  1001aaf0  1001aaf0  00018944  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018944  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f78  00000000  00000000  00018968  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000245c3  00000000  00000000  000198e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009486  00000000  00000000  0003dea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be8d  00000000  00000000  00047329  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026f4  00000000  00000000  000531b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000401a  00000000  00000000  000558ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  000598c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00071134  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  00071178  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000766fe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00076701  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007670d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007670e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007670f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00076713  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076717  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007671b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00076726  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00076731  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007673c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000012  00000000  00000000  00076747  2**0
                  CONTENTS, READONLY
 30 .jdi          0000554d  00000000  00000000  00076759  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083402  00000000  00000000  0007bca6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10014328 l    d  .rodata	00000000 .rodata
10014f8c l    d  .rwdata	00000000 .rwdata
1001a2fc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001aaf0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../boxhead_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 game_logic.c
10014f8c l     O .rwdata	00000020 ZOMBIE_WALK_WIDTH
10014fac l     O .rwdata	00000020 ZOMBIE_WALK_HEIGHT
10014fcc l     O .rwdata	00000020 ZOMBIE_WALK_FLIP_X
10014fec l     O .rwdata	00000200 ZOMBIE_WALK_OFFSET
100151ec l     O .rwdata	00000020 PLAYER_WALK_WIDTH
1001520c l     O .rwdata	00000020 PLAYER_WALK_HEIGHT
1001a358 l     O .bss	00000020 PLAYER_WALK_FLIP_X
1001522c l     O .rwdata	00000200 PLAYER_WALK_OFFSET
1001542c l     O .rwdata	00000020 ZOMBIE_HIT_FRONT_WIDTH
1001544c l     O .rwdata	00000020 ZOMBIE_HIT_FRONT_HEIGHT
1001546c l     O .rwdata	00000020 ZOMBIE_HIT_FRONT_FLIP_X
1001548c l     O .rwdata	00000160 ZOMBIE_HIT_FRONT_OFFSET
100155ec l     O .rwdata	00000020 ZOMBIE_ATTACK_WIDTH
1001560c l     O .rwdata	00000020 ZOMBIE_ATTACK_HEIGHT
1001562c l     O .rwdata	00000020 ZOMBIE_ATTACK_FLIP_X
1001564c l     O .rwdata	00000180 ZOMBIE_ATTACK_OFFSET
100157cc l     O .rwdata	00000020 ZOMBIE_DIE_WIDTH
100157ec l     O .rwdata	00000020 ZOMBIE_DIE_HEIGHT
1001580c l     O .rwdata	00000020 ZOMBIE_DIE_FLIP_X
1001582c l     O .rwdata	00000200 ZOMBIE_DIE_OFFSET
10015a2c l     O .rwdata	00000020 PLAYER_HIT_FRONT_WIDTH
10015a4c l     O .rwdata	00000020 PLAYER_HIT_FRONT_HEIGHT
10015a6c l     O .rwdata	00000020 PLAYER_HIT_FRONT_FLIP_X
10015a8c l     O .rwdata	00000160 PLAYER_HIT_FRONT_OFFSET
10015bec l     O .rwdata	00000020 PLAYER_DIE_WIDTH
10015c0c l     O .rwdata	00000020 PLAYER_DIE_HEIGHT
10015c2c l     O .rwdata	00000020 PLAYER_DIE_FLIP_X
10015c4c l     O .rwdata	00000200 PLAYER_DIE_OFFSET
1001a378 l     O .bss	000004b0 grid
1001a828 l     O .bss	00000140 zombie
1001a968 l     O .bss	00000030 player_1
1001a998 l     O .bss	00000030 player_2
1001a2fc l     O .bss	00000004 zombie_appear_counter
1001a300 l     O .bss	00000004 cur_zombie_counter
10014328 l     O .rodata	00000020 DX
10014348 l     O .rodata	00000020 DY
10014368 l     O .rodata	0000002c ZOMBIE_HIT_FRAME_MOVEMENT
10014394 l     O .rodata	0000002c PLAYER_HIT_FRAME_MOVEMENT
1001a304 l     O .bss	00000004 add_zombie_counter.3202
00000000 l    df *ABS*	00000000 graphic_engine.c
1001a308 l     O .bss	00000004 current_frame.1610
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 main.c
100178fc l     O .rwdata	00000004 DKEY_KEYCODE_1
10017900 l     O .rwdata	00000004 DKEY_KEYCODE_2
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014cd2 l     O .rodata	00000010 zeroes.4404
100070c0 l     F .text	000000bc __sbprintf
10014ce2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100072d0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008e28 l     F .text	00000008 __fp_unlock
10008e3c l     F .text	0000019c __sinit.part.1
10008fd8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10015e4c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10016290 l     O .rwdata	00000020 lc_ctype_charset
10016270 l     O .rwdata	00000020 lc_message_charset
100162b0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014d14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000c4ac l     F .text	000000fc __sprint_r.part.0
10014e38 l     O .rodata	00000010 zeroes.4349
1000dae8 l     F .text	000000bc __sbprintf
10014e48 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10011b08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011c1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011d3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10011e24 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10011f10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100120ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10017934 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10012390 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
100124cc l     F .text	00000034 alt_dev_reg
10016898 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100127a8 l     F .text	0000020c altera_avalon_jtag_uart_irq
100129b4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10013290 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100136f0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10013850 l     F .text	0000003c alt_get_errno
1001388c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1001a354 g     O .bss	00000004 alt_instruction_exception_handler
1000baf0 g     F .text	00000074 _mprec_log10
1000bbdc g     F .text	0000008c __any_on
1000e09c g     F .text	00000054 _isatty_r
10014d20 g     O .rodata	00000028 __mprec_tinytens
10012028 g     F .text	0000007c alt_main
10004c5c g     F .text	000000c0 _puts_r
1001a9f0 g     O .bss	00000100 alt_irq
1000e0f0 g     F .text	00000060 _lseek_r
10017944 g       *ABS*	00000000 __flash_rwdata_start
100104e0 g     F .text	00000088 .hidden __eqdf2
1001aaf0 g       *ABS*	00000000 __alt_heap_start
10004c20 g     F .text	0000003c printf
1000e308 g     F .text	0000009c _wcrtomb_r
1001a314 g     O .bss	00000002 usb_ctl_val
1000c36c g     F .text	0000005c __sseek
10009188 g     F .text	00000010 __sinit
1000e1b0 g     F .text	00000140 __swbuf_r
10009c5c g     F .text	0000007c _setlocale_r
10008fe0 g     F .text	00000078 __sfmoreglue
100120c8 g     F .text	00000024 __malloc_unlock
1000a92c g     F .text	0000015c memmove
10009170 g     F .text	00000018 _cleanup
1000abb0 g     F .text	000000a8 _Balloc
10010568 g     F .text	000000dc .hidden __gtdf2
10013c78 g     F .text	00000024 altera_nios2_gen2_irq_init
10004788 g     F .text	00000080 usb_print_mem
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000e040 g     F .text	0000005c _fstat_r
10004808 g     F .text	00000148 keys_to_direction
1001a338 g     O .bss	00000004 errno
1000c2e8 g     F .text	00000008 __seofread
1001a340 g     O .bss	00000004 alt_argv
1001f8f8 g       *ABS*	00000000 _gp
10012360 g     F .text	00000030 usleep
100027d8 g     F .text	00000088 io_init
10016718 g     O .rwdata	00000180 alt_fd_list
10013c9c g     F .text	00000090 alt_find_dev
1000a7e4 g     F .text	00000148 memcpy
10003a2c g     F .text	000001d8 usb_get_device_desc2
10008e30 g     F .text	0000000c _cleanup_r
10011920 g     F .text	000000dc .hidden __floatsidf
100137d4 g     F .text	0000007c alt_io_redirect
1001a316 g     O .bss	00000001 data_size
10010644 g     F .text	000000f4 .hidden __ltdf2
10014328 g       *ABS*	00000000 __DTOR_END__
10004d1c g     F .text	00000014 puts
10013ef8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000c1cc g     F .text	00000074 __fpclassifyd
1000ba4c g     F .text	000000a4 __ratio
1000dacc g     F .text	0000001c __vfiprintf_internal
10012bac g     F .text	0000021c altera_avalon_jtag_uart_read
10004bf0 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000f1a8 g     F .text	00000064 .hidden __udivsi3
10002938 g     F .text	00000b00 keyboard_init
10011d78 g     F .text	000000ac isatty
10014d70 g     O .rodata	000000c8 __mprec_tens
10009cd8 g     F .text	0000000c __locale_charset
1001a334 g     O .bss	00000004 __malloc_top_pad
1001790c g     O .rwdata	00000004 __mb_cur_max
10009d08 g     F .text	0000000c _localeconv_r
10000698 g     F .text	0000023c try_move_zombie
1000afe4 g     F .text	0000003c __i2b
1000960c g     F .text	000004c8 __sfvwrite_r
1001a318 g     O .bss	00000002 intStat
1000c240 g     F .text	00000054 _sbrk_r
10003730 g     F .text	000000b4 usb_soft_reset
1000e150 g     F .text	00000060 _read_r
1001792c g     O .rwdata	00000004 alt_max_fd
1000dd34 g     F .text	000000f0 _fclose_r
10008df8 g     F .text	00000030 fflush
1001a330 g     O .bss	00000004 __malloc_max_sbrked_mem
10004708 g     F .text	00000080 usb_get_retry_cnt
1000f264 g     F .text	000008ac .hidden __adddf3
1000b7f4 g     F .text	0000010c __b2d
1000eaec g     F .text	000005c4 .hidden __umoddi3
10011f4c g     F .text	000000dc lseek
10000ea4 g     F .text	00000208 try_move_player
10017904 g     O .rwdata	00000004 _global_impure_ptr
1000bc68 g     F .text	00000564 _realloc_r
1001aaf0 g       *ABS*	00000000 __bss_end
10013600 g     F .text	000000f0 alt_iic_isr_register
10013b70 g     F .text	00000108 alt_tick
1000e4f0 g     F .text	000005fc .hidden __udivdi3
1000df9c g     F .text	00000024 _fputwc_r
10014d48 g     O .rodata	00000028 __mprec_bigtens
1000adc8 g     F .text	00000104 __s2b
100119fc g     F .text	000000a8 .hidden __floatunsidf
1000b534 g     F .text	00000060 __mcmp
10000484 g     F .text	00000214 check_no_interference
100091a8 g     F .text	00000018 __fp_lock_all
100135b4 g     F .text	0000004c alt_ic_irq_enabled
10013ad4 g     F .text	0000009c alt_alarm_stop
1001a348 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
100166f0 g     O .rwdata	00000028 alt_dev_null
10001970 g     F .text	0000054c draw_zombie
10013270 g     F .text	00000020 alt_dcache_flush_all
1000aecc g     F .text	00000068 __hi0bits
100118a0 g     F .text	00000080 .hidden __fixdfsi
10017944 g       *ABS*	00000000 __ram_rwdata_end
10017924 g     O .rwdata	00000008 alt_dev_list
100123cc g     F .text	00000100 write
100178f8 g     O .rwdata	00000004 ENGINE_REGS
10014f8c g       *ABS*	00000000 __ram_rodata_end
10011c84 g     F .text	000000b8 fstat
10002860 g     F .text	00000070 io_write
10010644 g     F .text	000000f4 .hidden __ledf2
1000b2ac g     F .text	00000140 __pow5mult
1000c5c0 g     F .text	0000150c ___vfiprintf_internal_r
1001a328 g     O .bss	00000004 __nlocale_changed
1000f20c g     F .text	00000058 .hidden __umodsi3
1001aaf0 g       *ABS*	00000000 end
1001a30c g     O .bss	00000002 ctl_reg
100126e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
10001868 g     F .text	00000108 try_add_zombie
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10014328 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10011aa4 g     F .text	00000064 .hidden __clzsi2
10012dc8 g     F .text	00000224 altera_avalon_jtag_uart_write
1000276c g     F .text	0000006c wait_for_next_frame
10009198 g     F .text	00000004 __sfp_lock_acquire
1000a700 g     F .text	000000e4 memchr
10004dc8 g     F .text	000022dc ___vfprintf_internal_r
100092fc g     F .text	00000310 _free_r
10009ce4 g     F .text	00000010 __locale_mb_cur_max
10014174 g     F .text	00000180 __call_exitprocs
1001a324 g     O .bss	00000004 __mlocale_changed
10017910 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100035fc g     F .text	00000098 keyboard_hot_plugged
1001a34c g     O .bss	00000004 _alt_tick_rate
1000b3ec g     F .text	00000148 __lshift
1001a350 g     O .bss	00000004 _alt_nticks
10012128 g     F .text	00000104 read
10012538 g     F .text	0000004c alt_sys_init
1001405c g     F .text	00000118 __register_exitproc
1000b020 g     F .text	0000028c __multiply
10012a54 g     F .text	00000068 altera_avalon_jtag_uart_close
10004bc8 g     F .text	00000028 .hidden __mulsi3
10014f8c g       *ABS*	00000000 __ram_rwdata_start
10014328 g       *ABS*	00000000 __ram_rodata_start
1001a9c8 g     O .bss	00000028 __malloc_current_mallinfo
1000b900 g     F .text	0000014c __d2b
10012584 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10013e34 g     F .text	000000c4 alt_get_fd
10013118 g     F .text	00000158 alt_busy_sleep
1000dc04 g     F .text	00000054 _close_r
10013fe0 g     F .text	0000007c memcmp
10012644 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001aaf0 g       *ABS*	00000000 __alt_stack_base
10012694 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100041fc g     F .text	00000148 usb_get_hid_desc
1000717c g     F .text	00000154 __swsetup_r
1000fb10 g     F .text	000009d0 .hidden __divdf3
10009058 g     F .text	00000118 __sfp
1000bb64 g     F .text	00000078 __copybits
100162e8 g     O .rwdata	00000408 __malloc_av_
100091a4 g     F .text	00000004 __sinit_lock_release
10010738 g     F .text	0000086c .hidden __muldf3
1000c294 g     F .text	00000054 __sread
10013d2c g     F .text	00000108 alt_find_file
100132cc g     F .text	000000a4 alt_dev_llist_insert
100120a4 g     F .text	00000024 __malloc_lock
100122b0 g     F .text	000000b0 sbrk
10008d9c g     F .text	0000005c _fflush_r
1000dc58 g     F .text	000000dc _calloc_r
1001a31a g     O .bss	00000001 hot_plug_count
1001a2fc g       *ABS*	00000000 __bss_start
100008d4 g     F .text	000005d0 update_zombie
1000aa88 g     F .text	00000128 memset
10004950 g     F .text	00000278 main
1001a344 g     O .bss	00000004 alt_envp
1001a32c g     O .bss	00000004 __malloc_max_total_mem
100125e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000e2f0 g     F .text	00000018 __swbuf
1000c3c8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000de24 g     F .text	00000014 fclose
100074f8 g     F .text	00001688 _dtoa_r
10009ef4 g     F .text	0000080c _malloc_r
1000e464 g     F .text	00000030 __ascii_wctomb
10017930 g     O .rwdata	00000004 alt_errno
10003c04 g     F .text	00000190 usb_get_config_desc1
10009ad4 g     F .text	000000c4 _fwalk
1000f0b0 g     F .text	00000084 .hidden __divsi3
100091d8 g     F .text	00000124 _malloc_trim_r
10014328 g       *ABS*	00000000 __CTOR_END__
10003438 g     F .text	000001c4 keyboard_fetch
1000c3d0 g     F .text	000000dc strcmp
10004344 g     F .text	00000340 usb_get_report_desc
10014328 g       *ABS*	00000000 __flash_rodata_start
10014328 g       *ABS*	00000000 __DTOR_LIST__
100023a4 g     F .text	0000027c refresh
100104e0 g     F .text	00000088 .hidden __nedf2
10012500 g     F .text	00000038 alt_irq_init
1001222c g     F .text	00000084 alt_release_fd
10014e58 g     O .rodata	00000100 .hidden __clz_tab
1001a320 g     O .bss	00000004 _PathLocale
10013f94 g     F .text	00000014 atexit
1000dba4 g     F .text	00000060 _write_r
10002620 g     F .text	00000044 graphic_engine_reset
10009d14 g     F .text	00000018 setlocale
10017908 g     O .rwdata	00000004 _impure_ptr
10004684 g     F .text	00000084 usb_wait_td_list_done
1001a33c g     O .bss	00000004 alt_argc
10008b80 g     F .text	0000021c __sflush_r
100133d0 g     F .text	00000060 _do_dtors
10009d00 g     F .text	00000008 __locale_cjk_lang
10003d94 g     F .text	00000268 usb_get_config_desc2
100028d0 g     F .text	00000068 io_read
10001ebc g     F .text	000004e8 draw_player
10000020 g       .exceptions	00000000 alt_irq_entry
1000b790 g     F .text	00000064 __ulp
100091c0 g     F .text	00000018 __fp_unlock_all
1001791c g     O .rwdata	00000008 alt_fs_list
100040fc g     F .text	00000100 usb_class_request
10000020 g       *ABS*	00000000 __ram_exceptions_start
10009d2c g     F .text	0000000c localeconv
10013450 g     F .text	00000050 alt_ic_isr_register
100010ac g     F .text	0000050c update_player
10017944 g       *ABS*	00000000 _edata
1001aaf0 g       *ABS*	00000000 _end
100015b8 g     F .text	000002b0 init_game
1000de38 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10012abc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1001a31c g     O .bss	00000002 code
1001a312 g     O .bss	00000001 fetch_toggle
10013528 g     F .text	0000008c alt_ic_irq_disable
1000c2f0 g     F .text	0000007c __swrite
10017914 g     O .rwdata	00000004 __malloc_trim_threshold
100038e4 g     F .text	00000148 usb_get_device_desc1
10009cf4 g     F .text	0000000c __locale_msgcharset
1001a310 g     O .bss	00000002 fs_device
10013fa8 g     F .text	00000038 exit
10009b98 g     F .text	000000c4 _fwalk_reent
1000b594 g     F .text	000001fc __mdiff
1000f134 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000919c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10003694 g     F .text	00000058 usb_write
100037e4 g     F .text	00000100 usb_set_address
10002664 g     F .text	00000108 draw
100142f4 g     F .text	00000034 _exit
10012fec g     F .text	0000012c alt_alarm_start
1000026c g     F .text	00000218 calc_zombie_direction
10009d38 g     F .text	000001bc __smakebuf_r
10004d30 g     F .text	00000098 strlen
10013978 g     F .text	0000015c open
10010568 g     F .text	000000dc .hidden __gedf2
10003ffc g     F .text	00000100 usb_set_config
10017918 g     O .rwdata	00000004 __wctomb
1000c5a8 g     F .text	00000018 __sprint_r
10013430 g     F .text	00000020 alt_icache_flush_all
10017938 g     O .rwdata	00000004 alt_priority_mask
100134a0 g     F .text	00000088 alt_ic_irq_enable
100070a4 g     F .text	0000001c __vfprintf_internal
1000e494 g     F .text	0000005c _wctomb_r
100036ec g     F .text	00000044 usb_read
10010fa4 g     F .text	000008fc .hidden __subdf3
1000af34 g     F .text	000000b0 __lo0bits
1001793c g     O .rwdata	00000008 alt_alarm_list
10013370 g     F .text	00000060 _do_ctors
1001a30e g     O .bss	00000002 no_device
1000e3a4 g     F .text	000000c0 wcrtomb
10011b44 g     F .text	000000d8 close
10011e8c g     F .text	00000084 alt_load
1000dfc0 g     F .text	00000080 fputwc
100091a0 g     F .text	00000004 __sinit_lock_acquire
1000ac80 g     F .text	00000148 __multadd
1000ac58 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10aa7c04 	addi	r2,r2,-22032
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10aa7c04 	addi	r2,r2,-22032
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0aa9717 	ldw	r2,-21924(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0aa9717 	ldw	r2,-21924(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6be3e14 	ori	gp,gp,63736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10a8bf14 	ori	r2,r2,41724

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18eabc14 	ori	r3,r3,43760

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0011e8c0 	call	10011e8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00120280 	call	10012028 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <calc_zombie_direction>:
};
static const int PLAYER_HIT_FRAME_MOVEMENT[PLAYER_HIT_FRONT_FRAME_COUNT] = {
        8, 6, 4, 4, 3, 3, 2, 2, 1, 1, 1
};

int calc_zombie_direction(zombie_t *z) {
1000026c:	defff404 	addi	sp,sp,-48
10000270:	dfc00b15 	stw	ra,44(sp)
10000274:	df000a15 	stw	fp,40(sp)
10000278:	dc400915 	stw	r17,36(sp)
1000027c:	dc000815 	stw	r16,32(sp)
10000280:	df000a04 	addi	fp,sp,40
10000284:	e13ffd15 	stw	r4,-12(fp)
    int delta_x, delta_y;
    int delta_x1, delta_y1, delta_x2, delta_y2;
    int closer;

    delta_x1 = TO_GRID(player_1.x) - TO_GRID(z->x);
10000288:	008400b4 	movhi	r2,4098
1000028c:	10aa5a04 	addi	r2,r2,-22168
10000290:	10800017 	ldw	r2,0(r2)
10000294:	1007d17a 	srai	r3,r2,5
10000298:	e0bffd17 	ldw	r2,-12(fp)
1000029c:	10800117 	ldw	r2,4(r2)
100002a0:	1005d17a 	srai	r2,r2,5
100002a4:	1885c83a 	sub	r2,r3,r2
100002a8:	e0bff915 	stw	r2,-28(fp)
    delta_y1 = TO_GRID(player_1.y) - TO_GRID(z->y);
100002ac:	008400b4 	movhi	r2,4098
100002b0:	10aa5a04 	addi	r2,r2,-22168
100002b4:	10800117 	ldw	r2,4(r2)
100002b8:	1007d17a 	srai	r3,r2,5
100002bc:	e0bffd17 	ldw	r2,-12(fp)
100002c0:	10800217 	ldw	r2,8(r2)
100002c4:	1005d17a 	srai	r2,r2,5
100002c8:	1885c83a 	sub	r2,r3,r2
100002cc:	e0bffa15 	stw	r2,-24(fp)
    delta_x2 = TO_GRID(player_2.x) - TO_GRID(z->x);
100002d0:	008400b4 	movhi	r2,4098
100002d4:	10aa6604 	addi	r2,r2,-22120
100002d8:	10800017 	ldw	r2,0(r2)
100002dc:	1007d17a 	srai	r3,r2,5
100002e0:	e0bffd17 	ldw	r2,-12(fp)
100002e4:	10800117 	ldw	r2,4(r2)
100002e8:	1005d17a 	srai	r2,r2,5
100002ec:	1885c83a 	sub	r2,r3,r2
100002f0:	e0bffb15 	stw	r2,-20(fp)
    delta_y2 = TO_GRID(player_2.y) - TO_GRID(z->y);
100002f4:	008400b4 	movhi	r2,4098
100002f8:	10aa6604 	addi	r2,r2,-22120
100002fc:	10800117 	ldw	r2,4(r2)
10000300:	1007d17a 	srai	r3,r2,5
10000304:	e0bffd17 	ldw	r2,-12(fp)
10000308:	10800217 	ldw	r2,8(r2)
1000030c:	1005d17a 	srai	r2,r2,5
10000310:	1885c83a 	sub	r2,r3,r2
10000314:	e0bffc15 	stw	r2,-16(fp)

    if (player_1.enable == 0) {
10000318:	008400b4 	movhi	r2,4098
1000031c:	10aa5a04 	addi	r2,r2,-22168
10000320:	10800417 	ldw	r2,16(r2)
10000324:	1000031e 	bne	r2,zero,10000334 <calc_zombie_direction+0xc8>
        closer = 2;
10000328:	00800084 	movi	r2,2
1000032c:	e0bff815 	stw	r2,-32(fp)
10000330:	00001d06 	br	100003a8 <calc_zombie_direction+0x13c>
    } else if (player_2.enable == 0) {
10000334:	008400b4 	movhi	r2,4098
10000338:	10aa6604 	addi	r2,r2,-22120
1000033c:	10800417 	ldw	r2,16(r2)
10000340:	1000031e 	bne	r2,zero,10000350 <calc_zombie_direction+0xe4>
        closer = 1;
10000344:	00800044 	movi	r2,1
10000348:	e0bff815 	stw	r2,-32(fp)
1000034c:	00001606 	br	100003a8 <calc_zombie_direction+0x13c>
    } else {
        if (delta_x1 * delta_x1 + delta_y1 * delta_y1 < delta_x2 * delta_x2 + delta_y2 * delta_y2) {
10000350:	e17ff917 	ldw	r5,-28(fp)
10000354:	e13ff917 	ldw	r4,-28(fp)
10000358:	0004bc80 	call	10004bc8 <__mulsi3>
1000035c:	1021883a 	mov	r16,r2
10000360:	e17ffa17 	ldw	r5,-24(fp)
10000364:	e13ffa17 	ldw	r4,-24(fp)
10000368:	0004bc80 	call	10004bc8 <__mulsi3>
1000036c:	80a1883a 	add	r16,r16,r2
10000370:	e17ffb17 	ldw	r5,-20(fp)
10000374:	e13ffb17 	ldw	r4,-20(fp)
10000378:	0004bc80 	call	10004bc8 <__mulsi3>
1000037c:	1023883a 	mov	r17,r2
10000380:	e17ffc17 	ldw	r5,-16(fp)
10000384:	e13ffc17 	ldw	r4,-16(fp)
10000388:	0004bc80 	call	10004bc8 <__mulsi3>
1000038c:	8885883a 	add	r2,r17,r2
10000390:	8080030e 	bge	r16,r2,100003a0 <calc_zombie_direction+0x134>
            closer = 1;
10000394:	00800044 	movi	r2,1
10000398:	e0bff815 	stw	r2,-32(fp)
1000039c:	00000206 	br	100003a8 <calc_zombie_direction+0x13c>
        } else {
            closer = 2;
100003a0:	00800084 	movi	r2,2
100003a4:	e0bff815 	stw	r2,-32(fp)
        }
    }

    if (closer == 1) {
100003a8:	e0bff817 	ldw	r2,-32(fp)
100003ac:	10800058 	cmpnei	r2,r2,1
100003b0:	1000051e 	bne	r2,zero,100003c8 <calc_zombie_direction+0x15c>
        delta_x = delta_x1;
100003b4:	e0bff917 	ldw	r2,-28(fp)
100003b8:	e0bff615 	stw	r2,-40(fp)
        delta_y = delta_y1;
100003bc:	e0bffa17 	ldw	r2,-24(fp)
100003c0:	e0bff715 	stw	r2,-36(fp)
100003c4:	00000406 	br	100003d8 <calc_zombie_direction+0x16c>
    } else {
        delta_x = delta_x2;
100003c8:	e0bffb17 	ldw	r2,-20(fp)
100003cc:	e0bff615 	stw	r2,-40(fp)
        delta_y = delta_y2;
100003d0:	e0bffc17 	ldw	r2,-16(fp)
100003d4:	e0bff715 	stw	r2,-36(fp)
    }

    if (delta_x > 0) {
100003d8:	e0bff617 	ldw	r2,-40(fp)
100003dc:	00800a0e 	bge	zero,r2,10000408 <calc_zombie_direction+0x19c>
        if (delta_y > 0) return 3;
100003e0:	e0bff717 	ldw	r2,-36(fp)
100003e4:	0080020e 	bge	zero,r2,100003f0 <calc_zombie_direction+0x184>
100003e8:	008000c4 	movi	r2,3
100003ec:	00001e06 	br	10000468 <calc_zombie_direction+0x1fc>
        else if (delta_y < 0) return 1;
100003f0:	e0bff717 	ldw	r2,-36(fp)
100003f4:	1000020e 	bge	r2,zero,10000400 <calc_zombie_direction+0x194>
100003f8:	00800044 	movi	r2,1
100003fc:	00001a06 	br	10000468 <calc_zombie_direction+0x1fc>
        else return 2;
10000400:	00800084 	movi	r2,2
10000404:	00001806 	br	10000468 <calc_zombie_direction+0x1fc>
    } else if (delta_x < 0) {
10000408:	e0bff617 	ldw	r2,-40(fp)
1000040c:	10000a0e 	bge	r2,zero,10000438 <calc_zombie_direction+0x1cc>
        if (delta_y > 0) return 5;
10000410:	e0bff717 	ldw	r2,-36(fp)
10000414:	0080020e 	bge	zero,r2,10000420 <calc_zombie_direction+0x1b4>
10000418:	00800144 	movi	r2,5
1000041c:	00001206 	br	10000468 <calc_zombie_direction+0x1fc>
        else if (delta_y < 0) return 7;
10000420:	e0bff717 	ldw	r2,-36(fp)
10000424:	1000020e 	bge	r2,zero,10000430 <calc_zombie_direction+0x1c4>
10000428:	008001c4 	movi	r2,7
1000042c:	00000e06 	br	10000468 <calc_zombie_direction+0x1fc>
        else return 6;
10000430:	00800184 	movi	r2,6
10000434:	00000c06 	br	10000468 <calc_zombie_direction+0x1fc>
    } else {
        if (delta_y > 0) return 4;
10000438:	e0bff717 	ldw	r2,-36(fp)
1000043c:	0080020e 	bge	zero,r2,10000448 <calc_zombie_direction+0x1dc>
10000440:	00800104 	movi	r2,4
10000444:	00000806 	br	10000468 <calc_zombie_direction+0x1fc>
        else if (delta_y < 0) return 0;
10000448:	e0bff717 	ldw	r2,-36(fp)
1000044c:	1000020e 	bge	r2,zero,10000458 <calc_zombie_direction+0x1ec>
10000450:	0005883a 	mov	r2,zero
10000454:	00000406 	br	10000468 <calc_zombie_direction+0x1fc>
        else {
            printf("CENTERED DIRECTION!\n");
10000458:	01040074 	movhi	r4,4097
1000045c:	2110f004 	addi	r4,r4,17344
10000460:	0004d1c0 	call	10004d1c <puts>
            return 0;
10000464:	0005883a 	mov	r2,zero
        }
    }
}
10000468:	e6fffe04 	addi	sp,fp,-8
1000046c:	dfc00317 	ldw	ra,12(sp)
10000470:	df000217 	ldw	fp,8(sp)
10000474:	dc400117 	ldw	r17,4(sp)
10000478:	dc000017 	ldw	r16,0(sp)
1000047c:	dec00404 	addi	sp,sp,16
10000480:	f800283a 	ret

10000484 <check_no_interference>:

int check_no_interference(int new_x, int new_y, int grid_x, int grid_y) {
10000484:	defff304 	addi	sp,sp,-52
10000488:	dfc00c15 	stw	ra,48(sp)
1000048c:	df000b15 	stw	fp,44(sp)
10000490:	dc000a15 	stw	r16,40(sp)
10000494:	df000b04 	addi	fp,sp,44
10000498:	e13ffb15 	stw	r4,-20(fp)
1000049c:	e17ffc15 	stw	r5,-16(fp)
100004a0:	e1bffd15 	stw	r6,-12(fp)
100004a4:	e1fffe15 	stw	r7,-8(fp)
    int gx, gy;
    int target_x, target_y;
    int id;

    for (int d = 0; d < 8; d++) {
100004a8:	e03ff715 	stw	zero,-36(fp)
100004ac:	00007006 	br	10000670 <check_no_interference+0x1ec>
        gx = grid_x + DX[d];
100004b0:	00840074 	movhi	r2,4097
100004b4:	1090ca04 	addi	r2,r2,17192
100004b8:	e0fff717 	ldw	r3,-36(fp)
100004bc:	18c7883a 	add	r3,r3,r3
100004c0:	18c7883a 	add	r3,r3,r3
100004c4:	10c5883a 	add	r2,r2,r3
100004c8:	10c00017 	ldw	r3,0(r2)
100004cc:	e0bffd17 	ldw	r2,-12(fp)
100004d0:	1885883a 	add	r2,r3,r2
100004d4:	e0bff815 	stw	r2,-32(fp)
        gy = grid_y + DY[d];
100004d8:	00840074 	movhi	r2,4097
100004dc:	1090d204 	addi	r2,r2,17224
100004e0:	e0fff717 	ldw	r3,-36(fp)
100004e4:	18c7883a 	add	r3,r3,r3
100004e8:	18c7883a 	add	r3,r3,r3
100004ec:	10c5883a 	add	r2,r2,r3
100004f0:	10c00017 	ldw	r3,0(r2)
100004f4:	e0bffe17 	ldw	r2,-8(fp)
100004f8:	1885883a 	add	r2,r3,r2
100004fc:	e0bff915 	stw	r2,-28(fp)
        if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
10000500:	e0bff817 	ldw	r2,-32(fp)
10000504:	10005716 	blt	r2,zero,10000664 <check_no_interference+0x1e0>
10000508:	e0bff817 	ldw	r2,-32(fp)
1000050c:	10800508 	cmpgei	r2,r2,20
10000510:	1000541e 	bne	r2,zero,10000664 <check_no_interference+0x1e0>
10000514:	e0bff917 	ldw	r2,-28(fp)
10000518:	10005216 	blt	r2,zero,10000664 <check_no_interference+0x1e0>
1000051c:	e0bff917 	ldw	r2,-28(fp)
10000520:	108003c8 	cmpgei	r2,r2,15
10000524:	10004f1e 	bne	r2,zero,10000664 <check_no_interference+0x1e0>
            id = grid[gx][gy];
10000528:	040400b4 	movhi	r16,4098
1000052c:	8428de04 	addi	r16,r16,-23688
10000530:	e0bff817 	ldw	r2,-32(fp)
10000534:	014003c4 	movi	r5,15
10000538:	1009883a 	mov	r4,r2
1000053c:	0004bc80 	call	10004bc8 <__mulsi3>
10000540:	1007883a 	mov	r3,r2
10000544:	e0bff917 	ldw	r2,-28(fp)
10000548:	1885883a 	add	r2,r3,r2
1000054c:	1085883a 	add	r2,r2,r2
10000550:	1085883a 	add	r2,r2,r2
10000554:	8085883a 	add	r2,r16,r2
10000558:	10800017 	ldw	r2,0(r2)
1000055c:	e0bffa15 	stw	r2,-24(fp)
            if (id < 0) continue;
10000560:	e0bffa17 	ldw	r2,-24(fp)
10000564:	10003e16 	blt	r2,zero,10000660 <check_no_interference+0x1dc>
            else if (id == INDEX_PLAYER_1) {
10000568:	e0bffa17 	ldw	r2,-24(fp)
1000056c:	10803f98 	cmpnei	r2,r2,254
10000570:	1000091e 	bne	r2,zero,10000598 <check_no_interference+0x114>
                target_x = player_1.x;
10000574:	008400b4 	movhi	r2,4098
10000578:	10aa5a04 	addi	r2,r2,-22168
1000057c:	10800017 	ldw	r2,0(r2)
10000580:	e0bff515 	stw	r2,-44(fp)
                target_y = player_1.y;
10000584:	008400b4 	movhi	r2,4098
10000588:	10aa5a04 	addi	r2,r2,-22168
1000058c:	10800117 	ldw	r2,4(r2)
10000590:	e0bff615 	stw	r2,-40(fp)
10000594:	00001c06 	br	10000608 <check_no_interference+0x184>
            } else if (id == INDEX_PLAYER_2) {
10000598:	e0bffa17 	ldw	r2,-24(fp)
1000059c:	10803fd8 	cmpnei	r2,r2,255
100005a0:	1000091e 	bne	r2,zero,100005c8 <check_no_interference+0x144>
                target_x = player_2.x;
100005a4:	008400b4 	movhi	r2,4098
100005a8:	10aa6604 	addi	r2,r2,-22120
100005ac:	10800017 	ldw	r2,0(r2)
100005b0:	e0bff515 	stw	r2,-44(fp)
                target_y = player_2.y;
100005b4:	008400b4 	movhi	r2,4098
100005b8:	10aa6604 	addi	r2,r2,-22120
100005bc:	10800117 	ldw	r2,4(r2)
100005c0:	e0bff615 	stw	r2,-40(fp)
100005c4:	00001006 	br	10000608 <check_no_interference+0x184>
            } else {
                target_x = zombie[id].x;
100005c8:	008400b4 	movhi	r2,4098
100005cc:	10aa0a04 	addi	r2,r2,-22488
100005d0:	e0fffa17 	ldw	r3,-24(fp)
100005d4:	1806917a 	slli	r3,r3,5
100005d8:	10c5883a 	add	r2,r2,r3
100005dc:	10800104 	addi	r2,r2,4
100005e0:	10800017 	ldw	r2,0(r2)
100005e4:	e0bff515 	stw	r2,-44(fp)
                target_y = zombie[id].y;
100005e8:	008400b4 	movhi	r2,4098
100005ec:	10aa0a04 	addi	r2,r2,-22488
100005f0:	e0fffa17 	ldw	r3,-24(fp)
100005f4:	1806917a 	slli	r3,r3,5
100005f8:	10c5883a 	add	r2,r2,r3
100005fc:	10800204 	addi	r2,r2,8
10000600:	10800017 	ldw	r2,0(r2)
10000604:	e0bff615 	stw	r2,-40(fp)
            }
            if (abs(target_x - new_x) < 20 || abs(target_y - new_y) < 20) return 1;
10000608:	e0fff517 	ldw	r3,-44(fp)
1000060c:	e0bffb17 	ldw	r2,-20(fp)
10000610:	1885c83a 	sub	r2,r3,r2
10000614:	10bffb50 	cmplti	r2,r2,-19
10000618:	1000051e 	bne	r2,zero,10000630 <check_no_interference+0x1ac>
1000061c:	e0fff517 	ldw	r3,-44(fp)
10000620:	e0bffb17 	ldw	r2,-20(fp)
10000624:	1885c83a 	sub	r2,r3,r2
10000628:	10800510 	cmplti	r2,r2,20
1000062c:	10000a1e 	bne	r2,zero,10000658 <check_no_interference+0x1d4>
10000630:	e0fff617 	ldw	r3,-40(fp)
10000634:	e0bffc17 	ldw	r2,-16(fp)
10000638:	1885c83a 	sub	r2,r3,r2
1000063c:	10bffb50 	cmplti	r2,r2,-19
10000640:	1000081e 	bne	r2,zero,10000664 <check_no_interference+0x1e0>
10000644:	e0fff617 	ldw	r3,-40(fp)
10000648:	e0bffc17 	ldw	r2,-16(fp)
1000064c:	1885c83a 	sub	r2,r3,r2
10000650:	10800508 	cmpgei	r2,r2,20
10000654:	1000031e 	bne	r2,zero,10000664 <check_no_interference+0x1e0>
10000658:	00800044 	movi	r2,1
1000065c:	00000806 	br	10000680 <check_no_interference+0x1fc>
    for (int d = 0; d < 8; d++) {
        gx = grid_x + DX[d];
        gy = grid_y + DY[d];
        if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
            id = grid[gx][gy];
            if (id < 0) continue;
10000660:	0001883a 	nop
int check_no_interference(int new_x, int new_y, int grid_x, int grid_y) {
    int gx, gy;
    int target_x, target_y;
    int id;

    for (int d = 0; d < 8; d++) {
10000664:	e0bff717 	ldw	r2,-36(fp)
10000668:	10800044 	addi	r2,r2,1
1000066c:	e0bff715 	stw	r2,-36(fp)
10000670:	e0bff717 	ldw	r2,-36(fp)
10000674:	10800210 	cmplti	r2,r2,8
10000678:	103f8d1e 	bne	r2,zero,100004b0 <__alt_data_end+0xf80004b0>
            }
            if (abs(target_x - new_x) < 20 || abs(target_y - new_y) < 20) return 1;
        } 
    }

    return 0;
1000067c:	0005883a 	mov	r2,zero
}
10000680:	e6ffff04 	addi	sp,fp,-4
10000684:	dfc00217 	ldw	ra,8(sp)
10000688:	df000117 	ldw	fp,4(sp)
1000068c:	dc000017 	ldw	r16,0(sp)
10000690:	dec00304 	addi	sp,sp,12
10000694:	f800283a 	ret

10000698 <try_move_zombie>:

void try_move_zombie(zombie_t *z, int new_x, int new_y) {
10000698:	defff304 	addi	sp,sp,-52
1000069c:	dfc00c15 	stw	ra,48(sp)
100006a0:	df000b15 	stw	fp,44(sp)
100006a4:	dc400a15 	stw	r17,40(sp)
100006a8:	dc000915 	stw	r16,36(sp)
100006ac:	df000b04 	addi	fp,sp,44
100006b0:	e13ffb15 	stw	r4,-20(fp)
100006b4:	e17ffc15 	stw	r5,-16(fp)
100006b8:	e1bffd15 	stw	r6,-12(fp)
    int dx = DX[z->direction], dy = DY[z->direction];
100006bc:	e0bffb17 	ldw	r2,-20(fp)
100006c0:	10c00617 	ldw	r3,24(r2)
100006c4:	00840074 	movhi	r2,4097
100006c8:	1090ca04 	addi	r2,r2,17192
100006cc:	18c7883a 	add	r3,r3,r3
100006d0:	18c7883a 	add	r3,r3,r3
100006d4:	10c5883a 	add	r2,r2,r3
100006d8:	10800017 	ldw	r2,0(r2)
100006dc:	e0bff515 	stw	r2,-44(fp)
100006e0:	e0bffb17 	ldw	r2,-20(fp)
100006e4:	10c00617 	ldw	r3,24(r2)
100006e8:	00840074 	movhi	r2,4097
100006ec:	1090d204 	addi	r2,r2,17224
100006f0:	18c7883a 	add	r3,r3,r3
100006f4:	18c7883a 	add	r3,r3,r3
100006f8:	10c5883a 	add	r2,r2,r3
100006fc:	10800017 	ldw	r2,0(r2)
10000700:	e0bff615 	stw	r2,-40(fp)
    int grid_x = TO_GRID(z->x), grid_y = TO_GRID(z->y);
10000704:	e0bffb17 	ldw	r2,-20(fp)
10000708:	10800117 	ldw	r2,4(r2)
1000070c:	1005d17a 	srai	r2,r2,5
10000710:	e0bff715 	stw	r2,-36(fp)
10000714:	e0bffb17 	ldw	r2,-20(fp)
10000718:	10800217 	ldw	r2,8(r2)
1000071c:	1005d17a 	srai	r2,r2,5
10000720:	e0bff815 	stw	r2,-32(fp)

    if (new_x >= MAX_X) {
10000724:	e0bffc17 	ldw	r2,-16(fp)
10000728:	10809010 	cmplti	r2,r2,576
1000072c:	1000031e 	bne	r2,zero,1000073c <try_move_zombie+0xa4>
        new_x = MAX_X - 1;
10000730:	00808fc4 	movi	r2,575
10000734:	e0bffc15 	stw	r2,-16(fp)
10000738:	00000506 	br	10000750 <try_move_zombie+0xb8>
    } else if (new_x < MIN_X) {
1000073c:	e0bffc17 	ldw	r2,-16(fp)
10000740:	10801008 	cmpgei	r2,r2,64
10000744:	1000021e 	bne	r2,zero,10000750 <try_move_zombie+0xb8>
        new_x = MIN_X;
10000748:	00801004 	movi	r2,64
1000074c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (new_y >= MAX_Y) {
10000750:	e0bffd17 	ldw	r2,-12(fp)
10000754:	10806810 	cmplti	r2,r2,416
10000758:	1000031e 	bne	r2,zero,10000768 <try_move_zombie+0xd0>
        new_y = MAX_Y - 1;
1000075c:	008067c4 	movi	r2,415
10000760:	e0bffd15 	stw	r2,-12(fp)
10000764:	00000506 	br	1000077c <try_move_zombie+0xe4>
    } else if (new_y < MIN_Y) {
10000768:	e0bffd17 	ldw	r2,-12(fp)
1000076c:	10801008 	cmpgei	r2,r2,64
10000770:	1000021e 	bne	r2,zero,1000077c <try_move_zombie+0xe4>
        new_y = MIN_Y;
10000774:	00801004 	movi	r2,64
10000778:	e0bffd15 	stw	r2,-12(fp)
    }

    int new_grid_x = TO_GRID(new_x), new_grid_y = TO_GRID(new_y);
1000077c:	e0bffc17 	ldw	r2,-16(fp)
10000780:	1005d17a 	srai	r2,r2,5
10000784:	e0bff915 	stw	r2,-28(fp)
10000788:	e0bffd17 	ldw	r2,-12(fp)
1000078c:	1005d17a 	srai	r2,r2,5
10000790:	e0bffa15 	stw	r2,-24(fp)

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
10000794:	e0fff717 	ldw	r3,-36(fp)
10000798:	e0bff917 	ldw	r2,-28(fp)
1000079c:	1880031e 	bne	r3,r2,100007ac <try_move_zombie+0x114>
100007a0:	e0fff817 	ldw	r3,-32(fp)
100007a4:	e0bffa17 	ldw	r2,-24(fp)
100007a8:	18800f26 	beq	r3,r2,100007e8 <try_move_zombie+0x150>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
100007ac:	040400b4 	movhi	r16,4098
100007b0:	8428de04 	addi	r16,r16,-23688
100007b4:	e0bff917 	ldw	r2,-28(fp)
100007b8:	014003c4 	movi	r5,15
100007bc:	1009883a 	mov	r4,r2
100007c0:	0004bc80 	call	10004bc8 <__mulsi3>
100007c4:	1007883a 	mov	r3,r2
100007c8:	e0bffa17 	ldw	r2,-24(fp)
100007cc:	1885883a 	add	r2,r3,r2
100007d0:	1085883a 	add	r2,r2,r2
100007d4:	1085883a 	add	r2,r2,r2
100007d8:	8085883a 	add	r2,r16,r2
100007dc:	10800017 	ldw	r2,0(r2)
100007e0:	10bfffe0 	cmpeqi	r2,r2,-1
100007e4:	10003326 	beq	r2,zero,100008b4 <try_move_zombie+0x21c>
    // if (check_no_interference(new_x, new_y, grid_x, grid_y) != 0) {
        // Do not move
        // return;
    // }

    z->x = new_x;
100007e8:	e0bffb17 	ldw	r2,-20(fp)
100007ec:	e0fffc17 	ldw	r3,-16(fp)
100007f0:	10c00115 	stw	r3,4(r2)
    z->y = new_y;
100007f4:	e0bffb17 	ldw	r2,-20(fp)
100007f8:	e0fffd17 	ldw	r3,-12(fp)
100007fc:	10c00215 	stw	r3,8(r2)

    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000800:	040400b4 	movhi	r16,4098
10000804:	8428de04 	addi	r16,r16,-23688
10000808:	e0bff917 	ldw	r2,-28(fp)
1000080c:	014003c4 	movi	r5,15
10000810:	1009883a 	mov	r4,r2
10000814:	0004bc80 	call	10004bc8 <__mulsi3>
10000818:	1007883a 	mov	r3,r2
1000081c:	e0bffa17 	ldw	r2,-24(fp)
10000820:	1885883a 	add	r2,r3,r2
10000824:	1085883a 	add	r2,r2,r2
10000828:	1085883a 	add	r2,r2,r2
1000082c:	8085883a 	add	r2,r16,r2
10000830:	10800017 	ldw	r2,0(r2)
10000834:	10bfffd8 	cmpnei	r2,r2,-1
10000838:	10001f1e 	bne	r2,zero,100008b8 <try_move_zombie+0x220>
        // Move to new grid, no collision
        grid[grid_x][grid_y] = INDEX_NOTHING;
1000083c:	040400b4 	movhi	r16,4098
10000840:	8428de04 	addi	r16,r16,-23688
10000844:	e0bff717 	ldw	r2,-36(fp)
10000848:	014003c4 	movi	r5,15
1000084c:	1009883a 	mov	r4,r2
10000850:	0004bc80 	call	10004bc8 <__mulsi3>
10000854:	1007883a 	mov	r3,r2
10000858:	e0bff817 	ldw	r2,-32(fp)
1000085c:	1885883a 	add	r2,r3,r2
10000860:	1085883a 	add	r2,r2,r2
10000864:	1085883a 	add	r2,r2,r2
10000868:	8085883a 	add	r2,r16,r2
1000086c:	00ffffc4 	movi	r3,-1
10000870:	10c00015 	stw	r3,0(r2)
        grid[new_grid_x][new_grid_y] = z->index;
10000874:	e0bffb17 	ldw	r2,-20(fp)
10000878:	14400017 	ldw	r17,0(r2)
1000087c:	040400b4 	movhi	r16,4098
10000880:	8428de04 	addi	r16,r16,-23688
10000884:	e0bff917 	ldw	r2,-28(fp)
10000888:	014003c4 	movi	r5,15
1000088c:	1009883a 	mov	r4,r2
10000890:	0004bc80 	call	10004bc8 <__mulsi3>
10000894:	1007883a 	mov	r3,r2
10000898:	e0bffa17 	ldw	r2,-24(fp)
1000089c:	1885883a 	add	r2,r3,r2
100008a0:	1085883a 	add	r2,r2,r2
100008a4:	1085883a 	add	r2,r2,r2
100008a8:	8085883a 	add	r2,r16,r2
100008ac:	14400015 	stw	r17,0(r2)
100008b0:	00000106 	br	100008b8 <try_move_zombie+0x220>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
    } else {
        // Collision
        return;
100008b4:	0001883a 	nop
    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
        grid[grid_x][grid_y] = INDEX_NOTHING;
        grid[new_grid_x][new_grid_y] = z->index;
    }
}
100008b8:	e6fffe04 	addi	sp,fp,-8
100008bc:	dfc00317 	ldw	ra,12(sp)
100008c0:	df000217 	ldw	fp,8(sp)
100008c4:	dc400117 	ldw	r17,4(sp)
100008c8:	dc000017 	ldw	r16,0(sp)
100008cc:	dec00404 	addi	sp,sp,16
100008d0:	f800283a 	ret

100008d4 <update_zombie>:

void update_zombie(zombie_t *z) {
100008d4:	defff104 	addi	sp,sp,-60
100008d8:	dfc00e15 	stw	ra,56(sp)
100008dc:	df000d15 	stw	fp,52(sp)
100008e0:	dc400c15 	stw	r17,48(sp)
100008e4:	dc000b15 	stw	r16,44(sp)
100008e8:	df000d04 	addi	fp,sp,52
100008ec:	e13ffd15 	stw	r4,-12(fp)
    int dx = DX[z->direction], dy = DY[z->direction];
100008f0:	e0bffd17 	ldw	r2,-12(fp)
100008f4:	10c00617 	ldw	r3,24(r2)
100008f8:	00840074 	movhi	r2,4097
100008fc:	1090ca04 	addi	r2,r2,17192
10000900:	18c7883a 	add	r3,r3,r3
10000904:	18c7883a 	add	r3,r3,r3
10000908:	10c5883a 	add	r2,r2,r3
1000090c:	10800017 	ldw	r2,0(r2)
10000910:	e0bff415 	stw	r2,-48(fp)
10000914:	e0bffd17 	ldw	r2,-12(fp)
10000918:	10c00617 	ldw	r3,24(r2)
1000091c:	00840074 	movhi	r2,4097
10000920:	1090d204 	addi	r2,r2,17224
10000924:	18c7883a 	add	r3,r3,r3
10000928:	18c7883a 	add	r3,r3,r3
1000092c:	10c5883a 	add	r2,r2,r3
10000930:	10800017 	ldw	r2,0(r2)
10000934:	e0bff515 	stw	r2,-44(fp)
    int grid_x = TO_GRID(z->x), grid_y = TO_GRID(z->y);
10000938:	e0bffd17 	ldw	r2,-12(fp)
1000093c:	10800117 	ldw	r2,4(r2)
10000940:	1005d17a 	srai	r2,r2,5
10000944:	e0bff615 	stw	r2,-40(fp)
10000948:	e0bffd17 	ldw	r2,-12(fp)
1000094c:	10800217 	ldw	r2,8(r2)
10000950:	1005d17a 	srai	r2,r2,5
10000954:	e0bff715 	stw	r2,-36(fp)
    int face_grid_x = grid_x + dx, face_grid_y = grid_y + dy;
10000958:	e0fff617 	ldw	r3,-40(fp)
1000095c:	e0bff417 	ldw	r2,-48(fp)
10000960:	1885883a 	add	r2,r3,r2
10000964:	e0bff815 	stw	r2,-32(fp)
10000968:	e0fff717 	ldw	r3,-36(fp)
1000096c:	e0bff517 	ldw	r2,-44(fp)
10000970:	1885883a 	add	r2,r3,r2
10000974:	e0bff915 	stw	r2,-28(fp)

    switch (z->action) {
10000978:	e0bffd17 	ldw	r2,-12(fp)
1000097c:	10800517 	ldw	r2,20(r2)
10000980:	10c00168 	cmpgeui	r3,r2,5
10000984:	1801401e 	bne	r3,zero,10000e88 <update_zombie+0x5b4>
10000988:	100690ba 	slli	r3,r2,2
1000098c:	00840034 	movhi	r2,4096
10000990:	10826804 	addi	r2,r2,2464
10000994:	1885883a 	add	r2,r3,r2
10000998:	10800017 	ldw	r2,0(r2)
1000099c:	1000683a 	jmp	r2
100009a0:	100009b4 	orhi	zero,r2,38
100009a4:	10000b0c 	andi	zero,r2,44
100009a8:	10000b58 	cmpnei	zero,r2,45
100009ac:	10000d14 	ori	zero,r2,52
100009b0:	10000df0 	cmpltui	zero,r2,55
        case WALK:

            // Initiate attack if player is at the front
            if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
100009b4:	e0bff817 	ldw	r2,-32(fp)
100009b8:	10002c16 	blt	r2,zero,10000a6c <update_zombie+0x198>
100009bc:	e0bff817 	ldw	r2,-32(fp)
100009c0:	10800508 	cmpgei	r2,r2,20
100009c4:	1000291e 	bne	r2,zero,10000a6c <update_zombie+0x198>
100009c8:	e0bff917 	ldw	r2,-28(fp)
100009cc:	10002716 	blt	r2,zero,10000a6c <update_zombie+0x198>
                face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
100009d0:	e0bff917 	ldw	r2,-28(fp)
100009d4:	108003c8 	cmpgei	r2,r2,15
100009d8:	1000241e 	bne	r2,zero,10000a6c <update_zombie+0x198>
                (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1 || grid[face_grid_x][face_grid_y] == INDEX_PLAYER_2)) {
100009dc:	040400b4 	movhi	r16,4098
100009e0:	8428de04 	addi	r16,r16,-23688
100009e4:	e0bff817 	ldw	r2,-32(fp)
100009e8:	014003c4 	movi	r5,15
100009ec:	1009883a 	mov	r4,r2
100009f0:	0004bc80 	call	10004bc8 <__mulsi3>
100009f4:	1007883a 	mov	r3,r2
100009f8:	e0bff917 	ldw	r2,-28(fp)
100009fc:	1885883a 	add	r2,r3,r2
10000a00:	1085883a 	add	r2,r2,r2
10000a04:	1085883a 	add	r2,r2,r2
10000a08:	8085883a 	add	r2,r16,r2
10000a0c:	10800017 	ldw	r2,0(r2)
    switch (z->action) {
        case WALK:

            // Initiate attack if player is at the front
            if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
                face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000a10:	10803fa0 	cmpeqi	r2,r2,254
10000a14:	10000f1e 	bne	r2,zero,10000a54 <update_zombie+0x180>
                (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1 || grid[face_grid_x][face_grid_y] == INDEX_PLAYER_2)) {
10000a18:	040400b4 	movhi	r16,4098
10000a1c:	8428de04 	addi	r16,r16,-23688
10000a20:	e0bff817 	ldw	r2,-32(fp)
10000a24:	014003c4 	movi	r5,15
10000a28:	1009883a 	mov	r4,r2
10000a2c:	0004bc80 	call	10004bc8 <__mulsi3>
10000a30:	1007883a 	mov	r3,r2
10000a34:	e0bff917 	ldw	r2,-28(fp)
10000a38:	1885883a 	add	r2,r3,r2
10000a3c:	1085883a 	add	r2,r2,r2
10000a40:	1085883a 	add	r2,r2,r2
10000a44:	8085883a 	add	r2,r16,r2
10000a48:	10800017 	ldw	r2,0(r2)
10000a4c:	10803fd8 	cmpnei	r2,r2,255
10000a50:	1000061e 	bne	r2,zero,10000a6c <update_zombie+0x198>

                z->action = ATTACK;
10000a54:	e0bffd17 	ldw	r2,-12(fp)
10000a58:	00c00084 	movi	r3,2
10000a5c:	10c00515 	stw	r3,20(r2)
                z->frame = 0;
10000a60:	e0bffd17 	ldw	r2,-12(fp)
10000a64:	10000715 	stw	zero,28(r2)
                return;
10000a68:	00010706 	br	10000e88 <update_zombie+0x5b4>
            }

            int new_direction = calc_zombie_direction(z);
10000a6c:	e13ffd17 	ldw	r4,-12(fp)
10000a70:	000026c0 	call	1000026c <calc_zombie_direction>
10000a74:	e0bffa15 	stw	r2,-24(fp)
            if (new_direction == z->direction) {
10000a78:	e0bffd17 	ldw	r2,-12(fp)
10000a7c:	10c00617 	ldw	r3,24(r2)
10000a80:	e0bffa17 	ldw	r2,-24(fp)
10000a84:	1880181e 	bne	r3,r2,10000ae8 <update_zombie+0x214>
                // Do not need to rotate, move
                int new_x = z->x + dx * ZOMBIE_MOVE;
10000a88:	e0bffd17 	ldw	r2,-12(fp)
10000a8c:	10c00117 	ldw	r3,4(r2)
10000a90:	e0bff417 	ldw	r2,-48(fp)
10000a94:	1885883a 	add	r2,r3,r2
10000a98:	e0bffb15 	stw	r2,-20(fp)
                int new_y = z->y + dy * ZOMBIE_MOVE;
10000a9c:	e0bffd17 	ldw	r2,-12(fp)
10000aa0:	10c00217 	ldw	r3,8(r2)
10000aa4:	e0bff517 	ldw	r2,-44(fp)
10000aa8:	1885883a 	add	r2,r3,r2
10000aac:	e0bffc15 	stw	r2,-16(fp)
                try_move_zombie(z, new_x, new_y);
10000ab0:	e1bffc17 	ldw	r6,-16(fp)
10000ab4:	e17ffb17 	ldw	r5,-20(fp)
10000ab8:	e13ffd17 	ldw	r4,-12(fp)
10000abc:	00006980 	call	10000698 <try_move_zombie>
                z->action = ROTATE;
                z->frame = 0;
                return;
            }

            z->frame++;
10000ac0:	e0bffd17 	ldw	r2,-12(fp)
10000ac4:	10800717 	ldw	r2,28(r2)
10000ac8:	10c00044 	addi	r3,r2,1
10000acc:	e0bffd17 	ldw	r2,-12(fp)
10000ad0:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;
10000ad4:	e0bffd17 	ldw	r2,-12(fp)
10000ad8:	10800717 	ldw	r2,28(r2)
10000adc:	10800410 	cmplti	r2,r2,16
10000ae0:	1000e01e 	bne	r2,zero,10000e64 <update_zombie+0x590>
10000ae4:	00000606 	br	10000b00 <update_zombie+0x22c>
                int new_x = z->x + dx * ZOMBIE_MOVE;
                int new_y = z->y + dy * ZOMBIE_MOVE;
                try_move_zombie(z, new_x, new_y);
            } else {
                // Need to rotate
                z->action = ROTATE;
10000ae8:	e0bffd17 	ldw	r2,-12(fp)
10000aec:	00c00044 	movi	r3,1
10000af0:	10c00515 	stw	r3,20(r2)
                z->frame = 0;
10000af4:	e0bffd17 	ldw	r2,-12(fp)
10000af8:	10000715 	stw	zero,28(r2)
                return;
10000afc:	0000e206 	br	10000e88 <update_zombie+0x5b4>
            }

            z->frame++;
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;
10000b00:	e0bffd17 	ldw	r2,-12(fp)
10000b04:	10000715 	stw	zero,28(r2)

            break;
10000b08:	0000d606 	br	10000e64 <update_zombie+0x590>
        case ROTATE:
            z->frame++;
10000b0c:	e0bffd17 	ldw	r2,-12(fp)
10000b10:	10800717 	ldw	r2,28(r2)
10000b14:	10c00044 	addi	r3,r2,1
10000b18:	e0bffd17 	ldw	r2,-12(fp)
10000b1c:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_ROTATE_FRAME_COUNT) {
10000b20:	e0bffd17 	ldw	r2,-12(fp)
10000b24:	10800717 	ldw	r2,28(r2)
10000b28:	10800210 	cmplti	r2,r2,8
10000b2c:	1000cf1e 	bne	r2,zero,10000e6c <update_zombie+0x598>
                // Change the direction
                z->direction = calc_zombie_direction(z);
10000b30:	e13ffd17 	ldw	r4,-12(fp)
10000b34:	000026c0 	call	1000026c <calc_zombie_direction>
10000b38:	1007883a 	mov	r3,r2
10000b3c:	e0bffd17 	ldw	r2,-12(fp)
10000b40:	10c00615 	stw	r3,24(r2)
                z->action = WALK;
10000b44:	e0bffd17 	ldw	r2,-12(fp)
10000b48:	10000515 	stw	zero,20(r2)
                z->frame = 0;
10000b4c:	e0bffd17 	ldw	r2,-12(fp)
10000b50:	10000715 	stw	zero,28(r2)
                return;
10000b54:	0000cc06 	br	10000e88 <update_zombie+0x5b4>
            }
            break;
        case ATTACK:
            z->frame++;
10000b58:	e0bffd17 	ldw	r2,-12(fp)
10000b5c:	10800717 	ldw	r2,28(r2)
10000b60:	10c00044 	addi	r3,r2,1
10000b64:	e0bffd17 	ldw	r2,-12(fp)
10000b68:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
10000b6c:	e0bffd17 	ldw	r2,-12(fp)
10000b70:	10800717 	ldw	r2,28(r2)
10000b74:	10800310 	cmplti	r2,r2,12
10000b78:	1000be1e 	bne	r2,zero,10000e74 <update_zombie+0x5a0>
                // Check whether there is still a player at the facing grid
                if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
10000b7c:	e0bff817 	ldw	r2,-32(fp)
10000b80:	10005f16 	blt	r2,zero,10000d00 <update_zombie+0x42c>
10000b84:	e0bff817 	ldw	r2,-32(fp)
10000b88:	10800508 	cmpgei	r2,r2,20
10000b8c:	10005c1e 	bne	r2,zero,10000d00 <update_zombie+0x42c>
10000b90:	e0bff917 	ldw	r2,-28(fp)
10000b94:	10005a16 	blt	r2,zero,10000d00 <update_zombie+0x42c>
                    face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000b98:	e0bff917 	ldw	r2,-28(fp)
10000b9c:	108003c8 	cmpgei	r2,r2,15
10000ba0:	1000571e 	bne	r2,zero,10000d00 <update_zombie+0x42c>
                    (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1 || grid[face_grid_x][face_grid_y] == INDEX_PLAYER_2)) {
10000ba4:	040400b4 	movhi	r16,4098
10000ba8:	8428de04 	addi	r16,r16,-23688
10000bac:	e0bff817 	ldw	r2,-32(fp)
10000bb0:	014003c4 	movi	r5,15
10000bb4:	1009883a 	mov	r4,r2
10000bb8:	0004bc80 	call	10004bc8 <__mulsi3>
10000bbc:	1007883a 	mov	r3,r2
10000bc0:	e0bff917 	ldw	r2,-28(fp)
10000bc4:	1885883a 	add	r2,r3,r2
10000bc8:	1085883a 	add	r2,r2,r2
10000bcc:	1085883a 	add	r2,r2,r2
10000bd0:	8085883a 	add	r2,r16,r2
10000bd4:	10800017 	ldw	r2,0(r2)
        case ATTACK:
            z->frame++;
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
                // Check whether there is still a player at the facing grid
                if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
                    face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000bd8:	10803fa0 	cmpeqi	r2,r2,254
10000bdc:	10000f1e 	bne	r2,zero,10000c1c <update_zombie+0x348>
                    (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1 || grid[face_grid_x][face_grid_y] == INDEX_PLAYER_2)) {
10000be0:	040400b4 	movhi	r16,4098
10000be4:	8428de04 	addi	r16,r16,-23688
10000be8:	e0bff817 	ldw	r2,-32(fp)
10000bec:	014003c4 	movi	r5,15
10000bf0:	1009883a 	mov	r4,r2
10000bf4:	0004bc80 	call	10004bc8 <__mulsi3>
10000bf8:	1007883a 	mov	r3,r2
10000bfc:	e0bff917 	ldw	r2,-28(fp)
10000c00:	1885883a 	add	r2,r3,r2
10000c04:	1085883a 	add	r2,r2,r2
10000c08:	1085883a 	add	r2,r2,r2
10000c0c:	8085883a 	add	r2,r16,r2
10000c10:	10800017 	ldw	r2,0(r2)
10000c14:	10803fd8 	cmpnei	r2,r2,255
10000c18:	1000391e 	bne	r2,zero,10000d00 <update_zombie+0x42c>

                    player_t *target;

                    if (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1) {
10000c1c:	040400b4 	movhi	r16,4098
10000c20:	8428de04 	addi	r16,r16,-23688
10000c24:	e0bff817 	ldw	r2,-32(fp)
10000c28:	014003c4 	movi	r5,15
10000c2c:	1009883a 	mov	r4,r2
10000c30:	0004bc80 	call	10004bc8 <__mulsi3>
10000c34:	1007883a 	mov	r3,r2
10000c38:	e0bff917 	ldw	r2,-28(fp)
10000c3c:	1885883a 	add	r2,r3,r2
10000c40:	1085883a 	add	r2,r2,r2
10000c44:	1085883a 	add	r2,r2,r2
10000c48:	8085883a 	add	r2,r16,r2
10000c4c:	10800017 	ldw	r2,0(r2)
10000c50:	10803f98 	cmpnei	r2,r2,254
10000c54:	1000041e 	bne	r2,zero,10000c68 <update_zombie+0x394>
                        target = &player_1;
10000c58:	008400b4 	movhi	r2,4098
10000c5c:	10aa5a04 	addi	r2,r2,-22168
10000c60:	e0bff315 	stw	r2,-52(fp)
10000c64:	00000306 	br	10000c74 <update_zombie+0x3a0>
                    } else {
                        target = &player_2;
10000c68:	008400b4 	movhi	r2,4098
10000c6c:	10aa6604 	addi	r2,r2,-22120
10000c70:	e0bff315 	stw	r2,-52(fp)
                    }

                    if (target->action != DIE) {
10000c74:	e0bff317 	ldw	r2,-52(fp)
10000c78:	10800617 	ldw	r2,24(r2)
10000c7c:	10800120 	cmpeqi	r2,r2,4
10000c80:	10001f1e 	bne	r2,zero,10000d00 <update_zombie+0x42c>
                        target->blood -= ZOMBIE_ATTACK;
10000c84:	e0bff317 	ldw	r2,-52(fp)
10000c88:	10800217 	ldw	r2,8(r2)
10000c8c:	10fffd84 	addi	r3,r2,-10
10000c90:	e0bff317 	ldw	r2,-52(fp)
10000c94:	10c00215 	stw	r3,8(r2)
                        if (target->blood > 0) {
10000c98:	e0bff317 	ldw	r2,-52(fp)
10000c9c:	10800217 	ldw	r2,8(r2)
10000ca0:	0080120e 	bge	zero,r2,10000cec <update_zombie+0x418>
                            target->action = HIT;
10000ca4:	e0bff317 	ldw	r2,-52(fp)
10000ca8:	00c000c4 	movi	r3,3
10000cac:	10c00615 	stw	r3,24(r2)
                            target->direction = (z->direction + 4) % 8;  // opposite
10000cb0:	e0bffd17 	ldw	r2,-12(fp)
10000cb4:	10800617 	ldw	r2,24(r2)
10000cb8:	10c00104 	addi	r3,r2,4
10000cbc:	00a00034 	movhi	r2,32768
10000cc0:	108001c4 	addi	r2,r2,7
10000cc4:	1884703a 	and	r2,r3,r2
10000cc8:	1000040e 	bge	r2,zero,10000cdc <update_zombie+0x408>
10000ccc:	10bfffc4 	addi	r2,r2,-1
10000cd0:	00fffe04 	movi	r3,-8
10000cd4:	10c4b03a 	or	r2,r2,r3
10000cd8:	10800044 	addi	r2,r2,1
10000cdc:	1007883a 	mov	r3,r2
10000ce0:	e0bff317 	ldw	r2,-52(fp)
10000ce4:	10c00315 	stw	r3,12(r2)
10000ce8:	00000306 	br	10000cf8 <update_zombie+0x424>
                        } else {
                            target->action = DIE;
10000cec:	e0bff317 	ldw	r2,-52(fp)
10000cf0:	00c00104 	movi	r3,4
10000cf4:	10c00615 	stw	r3,24(r2)
                        }
                        target->frame = 0;
10000cf8:	e0bff317 	ldw	r2,-52(fp)
10000cfc:	10000715 	stw	zero,28(r2)
                    }
                }
                z->action = WALK;
10000d00:	e0bffd17 	ldw	r2,-12(fp)
10000d04:	10000515 	stw	zero,20(r2)
                z->frame = 0;
10000d08:	e0bffd17 	ldw	r2,-12(fp)
10000d0c:	10000715 	stw	zero,28(r2)
                return;
10000d10:	00005d06 	br	10000e88 <update_zombie+0x5b4>
            }
            break;
        case HIT:
            try_move_zombie(z,
                            z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
10000d14:	e0bffd17 	ldw	r2,-12(fp)
10000d18:	14000117 	ldw	r16,4(r2)
10000d1c:	e0bffd17 	ldw	r2,-12(fp)
10000d20:	10c00717 	ldw	r3,28(r2)
10000d24:	00840074 	movhi	r2,4097
10000d28:	1090da04 	addi	r2,r2,17256
10000d2c:	18c7883a 	add	r3,r3,r3
10000d30:	18c7883a 	add	r3,r3,r3
10000d34:	10c5883a 	add	r2,r2,r3
10000d38:	10800017 	ldw	r2,0(r2)
10000d3c:	e17ff417 	ldw	r5,-48(fp)
10000d40:	1009883a 	mov	r4,r2
10000d44:	0004bc80 	call	10004bc8 <__mulsi3>
                z->frame = 0;
                return;
            }
            break;
        case HIT:
            try_move_zombie(z,
10000d48:	80a3c83a 	sub	r17,r16,r2
                            z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
                            z->y - dy * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame]);
10000d4c:	e0bffd17 	ldw	r2,-12(fp)
10000d50:	14000217 	ldw	r16,8(r2)
10000d54:	e0bffd17 	ldw	r2,-12(fp)
10000d58:	10c00717 	ldw	r3,28(r2)
10000d5c:	00840074 	movhi	r2,4097
10000d60:	1090da04 	addi	r2,r2,17256
10000d64:	18c7883a 	add	r3,r3,r3
10000d68:	18c7883a 	add	r3,r3,r3
10000d6c:	10c5883a 	add	r2,r2,r3
10000d70:	10800017 	ldw	r2,0(r2)
10000d74:	e17ff517 	ldw	r5,-44(fp)
10000d78:	1009883a 	mov	r4,r2
10000d7c:	0004bc80 	call	10004bc8 <__mulsi3>
                z->frame = 0;
                return;
            }
            break;
        case HIT:
            try_move_zombie(z,
10000d80:	8085c83a 	sub	r2,r16,r2
10000d84:	100d883a 	mov	r6,r2
10000d88:	880b883a 	mov	r5,r17
10000d8c:	e13ffd17 	ldw	r4,-12(fp)
10000d90:	00006980 	call	10000698 <try_move_zombie>
                            z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
                            z->y - dy * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame]);
            z->frame++;
10000d94:	e0bffd17 	ldw	r2,-12(fp)
10000d98:	10800717 	ldw	r2,28(r2)
10000d9c:	10c00044 	addi	r3,r2,1
10000da0:	e0bffd17 	ldw	r2,-12(fp)
10000da4:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
10000da8:	e0bffd17 	ldw	r2,-12(fp)
10000dac:	10800717 	ldw	r2,28(r2)
10000db0:	108002d0 	cmplti	r2,r2,11
10000db4:	1000311e 	bne	r2,zero,10000e7c <update_zombie+0x5a8>
                if (z->blood > 0) {
10000db8:	e0bffd17 	ldw	r2,-12(fp)
10000dbc:	10800317 	ldw	r2,12(r2)
10000dc0:	0080050e 	bge	zero,r2,10000dd8 <update_zombie+0x504>
                    z->action = WALK;
10000dc4:	e0bffd17 	ldw	r2,-12(fp)
10000dc8:	10000515 	stw	zero,20(r2)
                    z->frame = 0;
10000dcc:	e0bffd17 	ldw	r2,-12(fp)
10000dd0:	10000715 	stw	zero,28(r2)
                    return;
10000dd4:	00002c06 	br	10000e88 <update_zombie+0x5b4>
                } else {
                    z->action = DIE;
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	00c00104 	movi	r3,4
10000de0:	10c00515 	stw	r3,20(r2)
                    z->frame = 0;
10000de4:	e0bffd17 	ldw	r2,-12(fp)
10000de8:	10000715 	stw	zero,28(r2)
                    return;
10000dec:	00002606 	br	10000e88 <update_zombie+0x5b4>
                }
            }
            break;
        case DIE:

            z->frame++;
10000df0:	e0bffd17 	ldw	r2,-12(fp)
10000df4:	10800717 	ldw	r2,28(r2)
10000df8:	10c00044 	addi	r3,r2,1
10000dfc:	e0bffd17 	ldw	r2,-12(fp)
10000e00:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
10000e04:	e0bffd17 	ldw	r2,-12(fp)
10000e08:	10800717 	ldw	r2,28(r2)
10000e0c:	10800410 	cmplti	r2,r2,16
10000e10:	10001c1e 	bne	r2,zero,10000e84 <update_zombie+0x5b0>
                z->enable = 0;
10000e14:	e0bffd17 	ldw	r2,-12(fp)
10000e18:	10000415 	stw	zero,16(r2)
                grid[grid_x][grid_y] = INDEX_NOTHING;
10000e1c:	040400b4 	movhi	r16,4098
10000e20:	8428de04 	addi	r16,r16,-23688
10000e24:	e0bff617 	ldw	r2,-40(fp)
10000e28:	014003c4 	movi	r5,15
10000e2c:	1009883a 	mov	r4,r2
10000e30:	0004bc80 	call	10004bc8 <__mulsi3>
10000e34:	1007883a 	mov	r3,r2
10000e38:	e0bff717 	ldw	r2,-36(fp)
10000e3c:	1885883a 	add	r2,r3,r2
10000e40:	1085883a 	add	r2,r2,r2
10000e44:	1085883a 	add	r2,r2,r2
10000e48:	8085883a 	add	r2,r16,r2
10000e4c:	00ffffc4 	movi	r3,-1
10000e50:	10c00015 	stw	r3,0(r2)
                cur_zombie_counter--;
10000e54:	d0aa8217 	ldw	r2,-22008(gp)
10000e58:	10bfffc4 	addi	r2,r2,-1
10000e5c:	d0aa8215 	stw	r2,-22008(gp)
                return;
10000e60:	00000906 	br	10000e88 <update_zombie+0x5b4>
            }

            z->frame++;
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;

            break;
10000e64:	0001883a 	nop
10000e68:	00000706 	br	10000e88 <update_zombie+0x5b4>
                z->direction = calc_zombie_direction(z);
                z->action = WALK;
                z->frame = 0;
                return;
            }
            break;
10000e6c:	0001883a 	nop
10000e70:	00000506 	br	10000e88 <update_zombie+0x5b4>
                }
                z->action = WALK;
                z->frame = 0;
                return;
            }
            break;
10000e74:	0001883a 	nop
10000e78:	00000306 	br	10000e88 <update_zombie+0x5b4>
                    z->action = DIE;
                    z->frame = 0;
                    return;
                }
            }
            break;
10000e7c:	0001883a 	nop
10000e80:	00000106 	br	10000e88 <update_zombie+0x5b4>
                z->enable = 0;
                grid[grid_x][grid_y] = INDEX_NOTHING;
                cur_zombie_counter--;
                return;
            }
            break;
10000e84:	0001883a 	nop
    }
}
10000e88:	e6fffe04 	addi	sp,fp,-8
10000e8c:	dfc00317 	ldw	ra,12(sp)
10000e90:	df000217 	ldw	fp,8(sp)
10000e94:	dc400117 	ldw	r17,4(sp)
10000e98:	dc000017 	ldw	r16,0(sp)
10000e9c:	dec00404 	addi	sp,sp,16
10000ea0:	f800283a 	ret

10000ea4 <try_move_player>:

void try_move_player(player_t *p, int new_x, int new_y) {
10000ea4:	defff504 	addi	sp,sp,-44
10000ea8:	dfc00a15 	stw	ra,40(sp)
10000eac:	df000915 	stw	fp,36(sp)
10000eb0:	dc400815 	stw	r17,32(sp)
10000eb4:	dc000715 	stw	r16,28(sp)
10000eb8:	df000904 	addi	fp,sp,36
10000ebc:	e13ffb15 	stw	r4,-20(fp)
10000ec0:	e17ffc15 	stw	r5,-16(fp)
10000ec4:	e1bffd15 	stw	r6,-12(fp)
    int grid_x = TO_GRID(p->x), grid_y = TO_GRID(p->y);
10000ec8:	e0bffb17 	ldw	r2,-20(fp)
10000ecc:	10800017 	ldw	r2,0(r2)
10000ed0:	1005d17a 	srai	r2,r2,5
10000ed4:	e0bff715 	stw	r2,-36(fp)
10000ed8:	e0bffb17 	ldw	r2,-20(fp)
10000edc:	10800117 	ldw	r2,4(r2)
10000ee0:	1005d17a 	srai	r2,r2,5
10000ee4:	e0bff815 	stw	r2,-32(fp)

    if (new_x >= MAX_X) {
10000ee8:	e0bffc17 	ldw	r2,-16(fp)
10000eec:	10809010 	cmplti	r2,r2,576
10000ef0:	1000031e 	bne	r2,zero,10000f00 <try_move_player+0x5c>
        new_x = MAX_X - 1;
10000ef4:	00808fc4 	movi	r2,575
10000ef8:	e0bffc15 	stw	r2,-16(fp)
10000efc:	00000506 	br	10000f14 <try_move_player+0x70>
    } else if (new_x < MIN_X) {
10000f00:	e0bffc17 	ldw	r2,-16(fp)
10000f04:	10801008 	cmpgei	r2,r2,64
10000f08:	1000021e 	bne	r2,zero,10000f14 <try_move_player+0x70>
        new_x = MIN_X;
10000f0c:	00801004 	movi	r2,64
10000f10:	e0bffc15 	stw	r2,-16(fp)
    }

    if (new_y >= MAX_Y) {
10000f14:	e0bffd17 	ldw	r2,-12(fp)
10000f18:	10806810 	cmplti	r2,r2,416
10000f1c:	1000031e 	bne	r2,zero,10000f2c <try_move_player+0x88>
        new_y = MAX_Y - 1;
10000f20:	008067c4 	movi	r2,415
10000f24:	e0bffd15 	stw	r2,-12(fp)
10000f28:	00000506 	br	10000f40 <try_move_player+0x9c>
    } else if (new_y < MIN_Y) {
10000f2c:	e0bffd17 	ldw	r2,-12(fp)
10000f30:	10801008 	cmpgei	r2,r2,64
10000f34:	1000021e 	bne	r2,zero,10000f40 <try_move_player+0x9c>
        new_y = MIN_Y;
10000f38:	00801004 	movi	r2,64
10000f3c:	e0bffd15 	stw	r2,-12(fp)
    }

    int new_grid_x = TO_GRID(new_x), new_grid_y = TO_GRID(new_y);
10000f40:	e0bffc17 	ldw	r2,-16(fp)
10000f44:	1005d17a 	srai	r2,r2,5
10000f48:	e0bff915 	stw	r2,-28(fp)
10000f4c:	e0bffd17 	ldw	r2,-12(fp)
10000f50:	1005d17a 	srai	r2,r2,5
10000f54:	e0bffa15 	stw	r2,-24(fp)

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
10000f58:	e0fff717 	ldw	r3,-36(fp)
10000f5c:	e0bff917 	ldw	r2,-28(fp)
10000f60:	1880031e 	bne	r3,r2,10000f70 <try_move_player+0xcc>
10000f64:	e0fff817 	ldw	r3,-32(fp)
10000f68:	e0bffa17 	ldw	r2,-24(fp)
10000f6c:	18800f26 	beq	r3,r2,10000fac <try_move_player+0x108>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000f70:	040400b4 	movhi	r16,4098
10000f74:	8428de04 	addi	r16,r16,-23688
10000f78:	e0bff917 	ldw	r2,-28(fp)
10000f7c:	014003c4 	movi	r5,15
10000f80:	1009883a 	mov	r4,r2
10000f84:	0004bc80 	call	10004bc8 <__mulsi3>
10000f88:	1007883a 	mov	r3,r2
10000f8c:	e0bffa17 	ldw	r2,-24(fp)
10000f90:	1885883a 	add	r2,r3,r2
10000f94:	1085883a 	add	r2,r2,r2
10000f98:	1085883a 	add	r2,r2,r2
10000f9c:	8085883a 	add	r2,r16,r2
10000fa0:	10800017 	ldw	r2,0(r2)
10000fa4:	10bfffe0 	cmpeqi	r2,r2,-1
10000fa8:	10003826 	beq	r2,zero,1000108c <try_move_player+0x1e8>
    // if (check_no_interference(new_x, new_y, grid_x, grid_y) != 0) {
        // Do not move
        // return;
    // }

    p->x = new_x;
10000fac:	e0bffb17 	ldw	r2,-20(fp)
10000fb0:	e0fffc17 	ldw	r3,-16(fp)
10000fb4:	10c00015 	stw	r3,0(r2)
    p->y = new_y;
10000fb8:	e0bffb17 	ldw	r2,-20(fp)
10000fbc:	e0fffd17 	ldw	r3,-12(fp)
10000fc0:	10c00115 	stw	r3,4(r2)

    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000fc4:	040400b4 	movhi	r16,4098
10000fc8:	8428de04 	addi	r16,r16,-23688
10000fcc:	e0bff917 	ldw	r2,-28(fp)
10000fd0:	014003c4 	movi	r5,15
10000fd4:	1009883a 	mov	r4,r2
10000fd8:	0004bc80 	call	10004bc8 <__mulsi3>
10000fdc:	1007883a 	mov	r3,r2
10000fe0:	e0bffa17 	ldw	r2,-24(fp)
10000fe4:	1885883a 	add	r2,r3,r2
10000fe8:	1085883a 	add	r2,r2,r2
10000fec:	1085883a 	add	r2,r2,r2
10000ff0:	8085883a 	add	r2,r16,r2
10000ff4:	10800017 	ldw	r2,0(r2)
10000ff8:	10bfffd8 	cmpnei	r2,r2,-1
10000ffc:	1000241e 	bne	r2,zero,10001090 <try_move_player+0x1ec>
        grid[grid_x][grid_y] = INDEX_NOTHING;
10001000:	040400b4 	movhi	r16,4098
10001004:	8428de04 	addi	r16,r16,-23688
10001008:	e0bff717 	ldw	r2,-36(fp)
1000100c:	014003c4 	movi	r5,15
10001010:	1009883a 	mov	r4,r2
10001014:	0004bc80 	call	10004bc8 <__mulsi3>
10001018:	1007883a 	mov	r3,r2
1000101c:	e0bff817 	ldw	r2,-32(fp)
10001020:	1885883a 	add	r2,r3,r2
10001024:	1085883a 	add	r2,r2,r2
10001028:	1085883a 	add	r2,r2,r2
1000102c:	8085883a 	add	r2,r16,r2
10001030:	00ffffc4 	movi	r3,-1
10001034:	10c00015 	stw	r3,0(r2)
        grid[new_grid_x][new_grid_y] = (p == &player_1 ? INDEX_PLAYER_1 : INDEX_PLAYER_2);
10001038:	e0fffb17 	ldw	r3,-20(fp)
1000103c:	008400b4 	movhi	r2,4098
10001040:	10aa5a04 	addi	r2,r2,-22168
10001044:	1880021e 	bne	r3,r2,10001050 <try_move_player+0x1ac>
10001048:	04403f84 	movi	r17,254
1000104c:	00000106 	br	10001054 <try_move_player+0x1b0>
10001050:	04403fc4 	movi	r17,255
10001054:	040400b4 	movhi	r16,4098
10001058:	8428de04 	addi	r16,r16,-23688
1000105c:	e0bff917 	ldw	r2,-28(fp)
10001060:	014003c4 	movi	r5,15
10001064:	1009883a 	mov	r4,r2
10001068:	0004bc80 	call	10004bc8 <__mulsi3>
1000106c:	1007883a 	mov	r3,r2
10001070:	e0bffa17 	ldw	r2,-24(fp)
10001074:	1885883a 	add	r2,r3,r2
10001078:	1085883a 	add	r2,r2,r2
1000107c:	1085883a 	add	r2,r2,r2
10001080:	8085883a 	add	r2,r16,r2
10001084:	14400015 	stw	r17,0(r2)
10001088:	00000106 	br	10001090 <try_move_player+0x1ec>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
    }  else {
        // Collision, do not move
        return;
1000108c:	0001883a 	nop
    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        grid[grid_x][grid_y] = INDEX_NOTHING;
        grid[new_grid_x][new_grid_y] = (p == &player_1 ? INDEX_PLAYER_1 : INDEX_PLAYER_2);
        
    }
}
10001090:	e6fffe04 	addi	sp,fp,-8
10001094:	dfc00317 	ldw	ra,12(sp)
10001098:	df000217 	ldw	fp,8(sp)
1000109c:	dc400117 	ldw	r17,4(sp)
100010a0:	dc000017 	ldw	r16,0(sp)
100010a4:	dec00404 	addi	sp,sp,16
100010a8:	f800283a 	ret

100010ac <update_player>:

void update_player(player_t *p, int direction, int attack) {
100010ac:	deffee04 	addi	sp,sp,-72
100010b0:	dfc01115 	stw	ra,68(sp)
100010b4:	df001015 	stw	fp,64(sp)
100010b8:	dc400f15 	stw	r17,60(sp)
100010bc:	dc000e15 	stw	r16,56(sp)
100010c0:	df001004 	addi	fp,sp,64
100010c4:	e13ffb15 	stw	r4,-20(fp)
100010c8:	e17ffc15 	stw	r5,-16(fp)
100010cc:	e1bffd15 	stw	r6,-12(fp)

    int dx = DX[p->direction], dy = DY[p->direction];
100010d0:	e0bffb17 	ldw	r2,-20(fp)
100010d4:	10c00317 	ldw	r3,12(r2)
100010d8:	00840074 	movhi	r2,4097
100010dc:	1090ca04 	addi	r2,r2,17192
100010e0:	18c7883a 	add	r3,r3,r3
100010e4:	18c7883a 	add	r3,r3,r3
100010e8:	10c5883a 	add	r2,r2,r3
100010ec:	10800017 	ldw	r2,0(r2)
100010f0:	e0bff115 	stw	r2,-60(fp)
100010f4:	e0bffb17 	ldw	r2,-20(fp)
100010f8:	10c00317 	ldw	r3,12(r2)
100010fc:	00840074 	movhi	r2,4097
10001100:	1090d204 	addi	r2,r2,17224
10001104:	18c7883a 	add	r3,r3,r3
10001108:	18c7883a 	add	r3,r3,r3
1000110c:	10c5883a 	add	r2,r2,r3
10001110:	10800017 	ldw	r2,0(r2)
10001114:	e0bff215 	stw	r2,-56(fp)
    int grid_x = TO_GRID(p->x), grid_y = TO_GRID(p->y);
10001118:	e0bffb17 	ldw	r2,-20(fp)
1000111c:	10800017 	ldw	r2,0(r2)
10001120:	1005d17a 	srai	r2,r2,5
10001124:	e0bff315 	stw	r2,-52(fp)
10001128:	e0bffb17 	ldw	r2,-20(fp)
1000112c:	10800117 	ldw	r2,4(r2)
10001130:	1005d17a 	srai	r2,r2,5
10001134:	e0bff415 	stw	r2,-48(fp)

    if (p->fire_interval > 0) --p->fire_interval;
10001138:	e0bffb17 	ldw	r2,-20(fp)
1000113c:	10800817 	ldw	r2,32(r2)
10001140:	0080050e 	bge	zero,r2,10001158 <update_player+0xac>
10001144:	e0bffb17 	ldw	r2,-20(fp)
10001148:	10800817 	ldw	r2,32(r2)
1000114c:	10ffffc4 	addi	r3,r2,-1
10001150:	e0bffb17 	ldw	r2,-20(fp)
10001154:	10c00815 	stw	r3,32(r2)

    switch (p->action) {
10001158:	e0bffb17 	ldw	r2,-20(fp)
1000115c:	10800617 	ldw	r2,24(r2)
10001160:	10c000e0 	cmpeqi	r3,r2,3
10001164:	1800b21e 	bne	r3,zero,10001430 <update_player+0x384>
10001168:	10c00120 	cmpeqi	r3,r2,4
1000116c:	1800e71e 	bne	r3,zero,1000150c <update_player+0x460>
10001170:	1001001e 	bne	r2,zero,10001574 <update_player+0x4c8>
        case WALK:

            if (direction != -1) {
10001174:	e0bffc17 	ldw	r2,-16(fp)
10001178:	10bfffe0 	cmpeqi	r2,r2,-1
1000117c:	10002b1e 	bne	r2,zero,1000122c <update_player+0x180>
                if (direction == p->direction) {
10001180:	e0bffb17 	ldw	r2,-20(fp)
10001184:	10c00317 	ldw	r3,12(r2)
10001188:	e0bffc17 	ldw	r2,-16(fp)
1000118c:	18801c1e 	bne	r3,r2,10001200 <update_player+0x154>
                    // Do not need to rotate, move
                    int new_x = p->x + dx * PLAYER_MOVE, new_y = p->y + dy * PLAYER_MOVE;
10001190:	e0bffb17 	ldw	r2,-20(fp)
10001194:	14000017 	ldw	r16,0(r2)
10001198:	01400184 	movi	r5,6
1000119c:	e13ff117 	ldw	r4,-60(fp)
100011a0:	0004bc80 	call	10004bc8 <__mulsi3>
100011a4:	8085883a 	add	r2,r16,r2
100011a8:	e0bff515 	stw	r2,-44(fp)
100011ac:	e0bffb17 	ldw	r2,-20(fp)
100011b0:	14000117 	ldw	r16,4(r2)
100011b4:	01400184 	movi	r5,6
100011b8:	e13ff217 	ldw	r4,-56(fp)
100011bc:	0004bc80 	call	10004bc8 <__mulsi3>
100011c0:	8085883a 	add	r2,r16,r2
100011c4:	e0bff615 	stw	r2,-40(fp)
                    try_move_player(p, new_x, new_y);
100011c8:	e1bff617 	ldw	r6,-40(fp)
100011cc:	e17ff517 	ldw	r5,-44(fp)
100011d0:	e13ffb17 	ldw	r4,-20(fp)
100011d4:	0000ea40 	call	10000ea4 <try_move_player>
                    p->direction = direction;
                    p->action = WALK;
                    p->frame = 0;
                    return;
                }
                p->frame++;
100011d8:	e0bffb17 	ldw	r2,-20(fp)
100011dc:	10800717 	ldw	r2,28(r2)
100011e0:	10c00044 	addi	r3,r2,1
100011e4:	e0bffb17 	ldw	r2,-20(fp)
100011e8:	10c00715 	stw	r3,28(r2)
                if (p->frame >= PLAYER_WALK_FRAME_COUNT) p->frame = 0;
100011ec:	e0bffb17 	ldw	r2,-20(fp)
100011f0:	10800717 	ldw	r2,28(r2)
100011f4:	10800410 	cmplti	r2,r2,16
100011f8:	10000f1e 	bne	r2,zero,10001238 <update_player+0x18c>
100011fc:	00000806 	br	10001220 <update_player+0x174>
                    // Do not need to rotate, move
                    int new_x = p->x + dx * PLAYER_MOVE, new_y = p->y + dy * PLAYER_MOVE;
                    try_move_player(p, new_x, new_y);
                } else {
                    // Need to rotate, rotate immediately
                    p->direction = direction;
10001200:	e0bffb17 	ldw	r2,-20(fp)
10001204:	e0fffc17 	ldw	r3,-16(fp)
10001208:	10c00315 	stw	r3,12(r2)
                    p->action = WALK;
1000120c:	e0bffb17 	ldw	r2,-20(fp)
10001210:	10000615 	stw	zero,24(r2)
                    p->frame = 0;
10001214:	e0bffb17 	ldw	r2,-20(fp)
10001218:	10000715 	stw	zero,28(r2)
                    return;
1000121c:	0000df06 	br	1000159c <update_player+0x4f0>
                }
                p->frame++;
                if (p->frame >= PLAYER_WALK_FRAME_COUNT) p->frame = 0;
10001220:	e0bffb17 	ldw	r2,-20(fp)
10001224:	10000715 	stw	zero,28(r2)
10001228:	00000306 	br	10001238 <update_player+0x18c>
            } else {
                p->frame = PLAYER_WALK_FRAME_COUNT - 1;
1000122c:	e0bffb17 	ldw	r2,-20(fp)
10001230:	00c003c4 	movi	r3,15
10001234:	10c00715 	stw	r3,28(r2)
            }

            if (attack == 1 && p->fire_interval == 0) {
10001238:	e0bffd17 	ldw	r2,-12(fp)
1000123c:	10800058 	cmpnei	r2,r2,1
10001240:	1000d11e 	bne	r2,zero,10001588 <update_player+0x4dc>
10001244:	e0bffb17 	ldw	r2,-20(fp)
10001248:	10800817 	ldw	r2,32(r2)
1000124c:	1000ce1e 	bne	r2,zero,10001588 <update_player+0x4dc>
                p->fire_dist_dx = dx;
10001250:	e0bffb17 	ldw	r2,-20(fp)
10001254:	e0fff117 	ldw	r3,-60(fp)
10001258:	10c00a15 	stw	r3,40(r2)
                p->fire_dist_dy = dy;
1000125c:	e0bffb17 	ldw	r2,-20(fp)
10001260:	e0fff217 	ldw	r3,-56(fp)
10001264:	10c00b15 	stw	r3,44(r2)
                p->fire_dist = PLAYER_FIRE_RANGE_IN_GRID * GRID_SIZE;  // default case
10001268:	e0bffb17 	ldw	r2,-20(fp)
1000126c:	00c07804 	movi	r3,480
10001270:	10c00915 	stw	r3,36(r2)

                for (int i = 1; i <= PLAYER_FIRE_RANGE_IN_GRID; ++i) {
10001274:	00800044 	movi	r2,1
10001278:	e0bff015 	stw	r2,-64(fp)
1000127c:	00006506 	br	10001414 <update_player+0x368>
                    int gx = grid_x + dx * i;
10001280:	e17ff017 	ldw	r5,-64(fp)
10001284:	e13ff117 	ldw	r4,-60(fp)
10001288:	0004bc80 	call	10004bc8 <__mulsi3>
1000128c:	1007883a 	mov	r3,r2
10001290:	e0bff317 	ldw	r2,-52(fp)
10001294:	1885883a 	add	r2,r3,r2
10001298:	e0bff715 	stw	r2,-36(fp)
                    int gy = grid_y + dy * i;
1000129c:	e17ff017 	ldw	r5,-64(fp)
100012a0:	e13ff217 	ldw	r4,-56(fp)
100012a4:	0004bc80 	call	10004bc8 <__mulsi3>
100012a8:	1007883a 	mov	r3,r2
100012ac:	e0bff417 	ldw	r2,-48(fp)
100012b0:	1885883a 	add	r2,r3,r2
100012b4:	e0bff815 	stw	r2,-32(fp)
                    if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
100012b8:	e0bff717 	ldw	r2,-36(fp)
100012bc:	10005216 	blt	r2,zero,10001408 <update_player+0x35c>
100012c0:	e0bff717 	ldw	r2,-36(fp)
100012c4:	10800508 	cmpgei	r2,r2,20
100012c8:	10004f1e 	bne	r2,zero,10001408 <update_player+0x35c>
100012cc:	e0bff817 	ldw	r2,-32(fp)
100012d0:	10004d16 	blt	r2,zero,10001408 <update_player+0x35c>
100012d4:	e0bff817 	ldw	r2,-32(fp)
100012d8:	108003c8 	cmpgei	r2,r2,15
100012dc:	10004a1e 	bne	r2,zero,10001408 <update_player+0x35c>
                        int id = grid[gx][gy];
100012e0:	040400b4 	movhi	r16,4098
100012e4:	8428de04 	addi	r16,r16,-23688
100012e8:	e0bff717 	ldw	r2,-36(fp)
100012ec:	014003c4 	movi	r5,15
100012f0:	1009883a 	mov	r4,r2
100012f4:	0004bc80 	call	10004bc8 <__mulsi3>
100012f8:	1007883a 	mov	r3,r2
100012fc:	e0bff817 	ldw	r2,-32(fp)
10001300:	1885883a 	add	r2,r3,r2
10001304:	1085883a 	add	r2,r2,r2
10001308:	1085883a 	add	r2,r2,r2
1000130c:	8085883a 	add	r2,r16,r2
10001310:	10800017 	ldw	r2,0(r2)
10001314:	e0bff915 	stw	r2,-28(fp)
                        if (id != INDEX_NOTHING) {
10001318:	e0bff917 	ldw	r2,-28(fp)
1000131c:	10bfffe0 	cmpeqi	r2,r2,-1
10001320:	1000391e 	bne	r2,zero,10001408 <update_player+0x35c>
                            if (id == INDEX_PLAYER_1 || id == INDEX_PLAYER_2) {  
10001324:	e0bff917 	ldw	r2,-28(fp)
10001328:	10803fa0 	cmpeqi	r2,r2,254
1000132c:	10003c1e 	bne	r2,zero,10001420 <update_player+0x374>
10001330:	e0bff917 	ldw	r2,-28(fp)
10001334:	10803fe0 	cmpeqi	r2,r2,255
10001338:	1000391e 	bne	r2,zero,10001420 <update_player+0x374>
                                // Fiend fire
                                break;  // if not break, it's raygun
                            } else {
                                // Attack zombie
                                if (zombie[id].action != DIE) {
1000133c:	008400b4 	movhi	r2,4098
10001340:	10aa0a04 	addi	r2,r2,-22488
10001344:	e0fff917 	ldw	r3,-28(fp)
10001348:	1806917a 	slli	r3,r3,5
1000134c:	10c5883a 	add	r2,r2,r3
10001350:	10800504 	addi	r2,r2,20
10001354:	10800017 	ldw	r2,0(r2)
10001358:	10800120 	cmpeqi	r2,r2,4
1000135c:	10002a1e 	bne	r2,zero,10001408 <update_player+0x35c>
                                    zombie_t *z = &zombie[id];
10001360:	e0bff917 	ldw	r2,-28(fp)
10001364:	1006917a 	slli	r3,r2,5
10001368:	008400b4 	movhi	r2,4098
1000136c:	10aa0a04 	addi	r2,r2,-22488
10001370:	1885883a 	add	r2,r3,r2
10001374:	e0bffa15 	stw	r2,-24(fp)
                                    z->blood -= PLAYER_ATTACK;
10001378:	e0bffa17 	ldw	r2,-24(fp)
1000137c:	10800317 	ldw	r2,12(r2)
10001380:	10fff9c4 	addi	r3,r2,-25
10001384:	e0bffa17 	ldw	r2,-24(fp)
10001388:	10c00315 	stw	r3,12(r2)
                                    if (z->blood > 0) {
1000138c:	e0bffa17 	ldw	r2,-24(fp)
10001390:	10800317 	ldw	r2,12(r2)
10001394:	0080120e 	bge	zero,r2,100013e0 <update_player+0x334>
                                        z->action = HIT;
10001398:	e0bffa17 	ldw	r2,-24(fp)
1000139c:	00c000c4 	movi	r3,3
100013a0:	10c00515 	stw	r3,20(r2)
                                        z->direction = (p->direction + 4) % 8;  // opposite
100013a4:	e0bffb17 	ldw	r2,-20(fp)
100013a8:	10800317 	ldw	r2,12(r2)
100013ac:	10c00104 	addi	r3,r2,4
100013b0:	00a00034 	movhi	r2,32768
100013b4:	108001c4 	addi	r2,r2,7
100013b8:	1884703a 	and	r2,r3,r2
100013bc:	1000040e 	bge	r2,zero,100013d0 <update_player+0x324>
100013c0:	10bfffc4 	addi	r2,r2,-1
100013c4:	00fffe04 	movi	r3,-8
100013c8:	10c4b03a 	or	r2,r2,r3
100013cc:	10800044 	addi	r2,r2,1
100013d0:	1007883a 	mov	r3,r2
100013d4:	e0bffa17 	ldw	r2,-24(fp)
100013d8:	10c00615 	stw	r3,24(r2)
100013dc:	00000306 	br	100013ec <update_player+0x340>
                                    } else {
                                        z->action = DIE;
100013e0:	e0bffa17 	ldw	r2,-24(fp)
100013e4:	00c00104 	movi	r3,4
100013e8:	10c00515 	stw	r3,20(r2)
                                    }
                                    z->frame = 0;
100013ec:	e0bffa17 	ldw	r2,-24(fp)
100013f0:	10000715 	stw	zero,28(r2)
                                    p->fire_dist = i * GRID_SIZE;
100013f4:	e0bff017 	ldw	r2,-64(fp)
100013f8:	1006917a 	slli	r3,r2,5
100013fc:	e0bffb17 	ldw	r2,-20(fp)
10001400:	10c00915 	stw	r3,36(r2)
                                    break;  // if not break, it's raygun
10001404:	00000606 	br	10001420 <update_player+0x374>
            if (attack == 1 && p->fire_interval == 0) {
                p->fire_dist_dx = dx;
                p->fire_dist_dy = dy;
                p->fire_dist = PLAYER_FIRE_RANGE_IN_GRID * GRID_SIZE;  // default case

                for (int i = 1; i <= PLAYER_FIRE_RANGE_IN_GRID; ++i) {
10001408:	e0bff017 	ldw	r2,-64(fp)
1000140c:	10800044 	addi	r2,r2,1
10001410:	e0bff015 	stw	r2,-64(fp)
10001414:	e0bff017 	ldw	r2,-64(fp)
10001418:	10800410 	cmplti	r2,r2,16
1000141c:	103f981e 	bne	r2,zero,10001280 <__alt_data_end+0xf8001280>
                                }
                            }
                        }
                    }
                }
                p->fire_interval = PLAYER_FIRE_INTERVAL;
10001420:	e0bffb17 	ldw	r2,-20(fp)
10001424:	00c00284 	movi	r3,10
10001428:	10c00815 	stw	r3,32(r2)
            }

            break;
1000142c:	00005606 	br	10001588 <update_player+0x4dc>
        case HIT:
            try_move_player(p,
                            p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
10001430:	e0bffb17 	ldw	r2,-20(fp)
10001434:	14000017 	ldw	r16,0(r2)
10001438:	e0bffb17 	ldw	r2,-20(fp)
1000143c:	10c00717 	ldw	r3,28(r2)
10001440:	00840074 	movhi	r2,4097
10001444:	1090e504 	addi	r2,r2,17300
10001448:	18c7883a 	add	r3,r3,r3
1000144c:	18c7883a 	add	r3,r3,r3
10001450:	10c5883a 	add	r2,r2,r3
10001454:	10800017 	ldw	r2,0(r2)
10001458:	e17ff117 	ldw	r5,-60(fp)
1000145c:	1009883a 	mov	r4,r2
10001460:	0004bc80 	call	10004bc8 <__mulsi3>
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
        case HIT:
            try_move_player(p,
10001464:	80a3c83a 	sub	r17,r16,r2
                            p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
                            p->y - dy * PLAYER_HIT_FRAME_MOVEMENT[p->frame]);
10001468:	e0bffb17 	ldw	r2,-20(fp)
1000146c:	14000117 	ldw	r16,4(r2)
10001470:	e0bffb17 	ldw	r2,-20(fp)
10001474:	10c00717 	ldw	r3,28(r2)
10001478:	00840074 	movhi	r2,4097
1000147c:	1090e504 	addi	r2,r2,17300
10001480:	18c7883a 	add	r3,r3,r3
10001484:	18c7883a 	add	r3,r3,r3
10001488:	10c5883a 	add	r2,r2,r3
1000148c:	10800017 	ldw	r2,0(r2)
10001490:	e17ff217 	ldw	r5,-56(fp)
10001494:	1009883a 	mov	r4,r2
10001498:	0004bc80 	call	10004bc8 <__mulsi3>
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
        case HIT:
            try_move_player(p,
1000149c:	8085c83a 	sub	r2,r16,r2
100014a0:	100d883a 	mov	r6,r2
100014a4:	880b883a 	mov	r5,r17
100014a8:	e13ffb17 	ldw	r4,-20(fp)
100014ac:	0000ea40 	call	10000ea4 <try_move_player>
                            p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
                            p->y - dy * PLAYER_HIT_FRAME_MOVEMENT[p->frame]);
            p->frame++;
100014b0:	e0bffb17 	ldw	r2,-20(fp)
100014b4:	10800717 	ldw	r2,28(r2)
100014b8:	10c00044 	addi	r3,r2,1
100014bc:	e0bffb17 	ldw	r2,-20(fp)
100014c0:	10c00715 	stw	r3,28(r2)
            if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
100014c4:	e0bffb17 	ldw	r2,-20(fp)
100014c8:	10800717 	ldw	r2,28(r2)
100014cc:	108002d0 	cmplti	r2,r2,11
100014d0:	10002f1e 	bne	r2,zero,10001590 <update_player+0x4e4>
                if (p->blood > 0) {
100014d4:	e0bffb17 	ldw	r2,-20(fp)
100014d8:	10800217 	ldw	r2,8(r2)
100014dc:	0080050e 	bge	zero,r2,100014f4 <update_player+0x448>
                    p->action = WALK;
100014e0:	e0bffb17 	ldw	r2,-20(fp)
100014e4:	10000615 	stw	zero,24(r2)
                    p->frame = 0;
100014e8:	e0bffb17 	ldw	r2,-20(fp)
100014ec:	10000715 	stw	zero,28(r2)
                    return;
100014f0:	00002a06 	br	1000159c <update_player+0x4f0>
                } else {
                    p->action = DIE;
100014f4:	e0bffb17 	ldw	r2,-20(fp)
100014f8:	00c00104 	movi	r3,4
100014fc:	10c00615 	stw	r3,24(r2)
                    p->frame = 0;
10001500:	e0bffb17 	ldw	r2,-20(fp)
10001504:	10000715 	stw	zero,28(r2)
                    return;
10001508:	00002406 	br	1000159c <update_player+0x4f0>
                }
            }
            break;
        case DIE:
            p->frame++;
1000150c:	e0bffb17 	ldw	r2,-20(fp)
10001510:	10800717 	ldw	r2,28(r2)
10001514:	10c00044 	addi	r3,r2,1
10001518:	e0bffb17 	ldw	r2,-20(fp)
1000151c:	10c00715 	stw	r3,28(r2)
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
10001520:	e0bffb17 	ldw	r2,-20(fp)
10001524:	10800717 	ldw	r2,28(r2)
10001528:	10800410 	cmplti	r2,r2,16
1000152c:	10001a1e 	bne	r2,zero,10001598 <update_player+0x4ec>
                p->enable = 0;
10001530:	e0bffb17 	ldw	r2,-20(fp)
10001534:	10000415 	stw	zero,16(r2)
                grid[grid_x][grid_y] = INDEX_NOTHING;
10001538:	040400b4 	movhi	r16,4098
1000153c:	8428de04 	addi	r16,r16,-23688
10001540:	e0bff317 	ldw	r2,-52(fp)
10001544:	014003c4 	movi	r5,15
10001548:	1009883a 	mov	r4,r2
1000154c:	0004bc80 	call	10004bc8 <__mulsi3>
10001550:	1007883a 	mov	r3,r2
10001554:	e0bff417 	ldw	r2,-48(fp)
10001558:	1885883a 	add	r2,r3,r2
1000155c:	1085883a 	add	r2,r2,r2
10001560:	1085883a 	add	r2,r2,r2
10001564:	8085883a 	add	r2,r16,r2
10001568:	00ffffc4 	movi	r3,-1
1000156c:	10c00015 	stw	r3,0(r2)
                return;
10001570:	00000a06 	br	1000159c <update_player+0x4f0>
            }
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
10001574:	01040074 	movhi	r4,4097
10001578:	2110f504 	addi	r4,r4,17364
1000157c:	0004d1c0 	call	10004d1c <puts>
            break;
10001580:	0001883a 	nop
10001584:	00000506 	br	1000159c <update_player+0x4f0>
                    }
                }
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
10001588:	0001883a 	nop
1000158c:	00000306 	br	1000159c <update_player+0x4f0>
                    p->action = DIE;
                    p->frame = 0;
                    return;
                }
            }
            break;
10001590:	0001883a 	nop
10001594:	00000106 	br	1000159c <update_player+0x4f0>
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
                p->enable = 0;
                grid[grid_x][grid_y] = INDEX_NOTHING;
                return;
            }
            break;
10001598:	0001883a 	nop
        default:
            printf("INVALID PLAYER STATE!\n");
            break;
    }
}
1000159c:	e6fffe04 	addi	sp,fp,-8
100015a0:	dfc00317 	ldw	ra,12(sp)
100015a4:	df000217 	ldw	fp,8(sp)
100015a8:	dc400117 	ldw	r17,4(sp)
100015ac:	dc000017 	ldw	r16,0(sp)
100015b0:	dec00404 	addi	sp,sp,16
100015b4:	f800283a 	ret

100015b8 <init_game>:

void init_game() {
100015b8:	defffa04 	addi	sp,sp,-24
100015bc:	dfc00515 	stw	ra,20(sp)
100015c0:	df000415 	stw	fp,16(sp)
100015c4:	dc400315 	stw	r17,12(sp)
100015c8:	dc000215 	stw	r16,8(sp)
100015cc:	df000404 	addi	fp,sp,16
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
100015d0:	e03ffc15 	stw	zero,-16(fp)
100015d4:	00001906 	br	1000163c <init_game+0x84>
        for (j = 0; j < GRID_Y_COUNT; j++) {
100015d8:	e03ffd15 	stw	zero,-12(fp)
100015dc:	00001106 	br	10001624 <init_game+0x6c>
            grid[i][j] = INDEX_NOTHING;
100015e0:	040400b4 	movhi	r16,4098
100015e4:	8428de04 	addi	r16,r16,-23688
100015e8:	e0bffc17 	ldw	r2,-16(fp)
100015ec:	014003c4 	movi	r5,15
100015f0:	1009883a 	mov	r4,r2
100015f4:	0004bc80 	call	10004bc8 <__mulsi3>
100015f8:	1007883a 	mov	r3,r2
100015fc:	e0bffd17 	ldw	r2,-12(fp)
10001600:	1885883a 	add	r2,r3,r2
10001604:	1085883a 	add	r2,r2,r2
10001608:	1085883a 	add	r2,r2,r2
1000160c:	8085883a 	add	r2,r16,r2
10001610:	00ffffc4 	movi	r3,-1
10001614:	10c00015 	stw	r3,0(r2)
}

void init_game() {
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
        for (j = 0; j < GRID_Y_COUNT; j++) {
10001618:	e0bffd17 	ldw	r2,-12(fp)
1000161c:	10800044 	addi	r2,r2,1
10001620:	e0bffd15 	stw	r2,-12(fp)
10001624:	e0bffd17 	ldw	r2,-12(fp)
10001628:	108003d0 	cmplti	r2,r2,15
1000162c:	103fec1e 	bne	r2,zero,100015e0 <__alt_data_end+0xf80015e0>
    }
}

void init_game() {
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
10001630:	e0bffc17 	ldw	r2,-16(fp)
10001634:	10800044 	addi	r2,r2,1
10001638:	e0bffc15 	stw	r2,-16(fp)
1000163c:	e0bffc17 	ldw	r2,-16(fp)
10001640:	10800510 	cmplti	r2,r2,20
10001644:	103fe41e 	bne	r2,zero,100015d8 <__alt_data_end+0xf80015d8>
        for (j = 0; j < GRID_Y_COUNT; j++) {
            grid[i][j] = INDEX_NOTHING;
        }
    }

    player_1.x = PLAYER_1_BORN_X;
10001648:	008400b4 	movhi	r2,4098
1000164c:	10aa5a04 	addi	r2,r2,-22168
10001650:	00c03544 	movi	r3,213
10001654:	10c00015 	stw	r3,0(r2)
    player_1.y = PLAYER_1_BORN_Y;
10001658:	008400b4 	movhi	r2,4098
1000165c:	10aa5a04 	addi	r2,r2,-22168
10001660:	00c03c04 	movi	r3,240
10001664:	10c00115 	stw	r3,4(r2)
    player_1.blood = 100;
10001668:	008400b4 	movhi	r2,4098
1000166c:	10aa5a04 	addi	r2,r2,-22168
10001670:	00c01904 	movi	r3,100
10001674:	10c00215 	stw	r3,8(r2)
    grid[TO_GRID(player_1.x)][TO_GRID(player_1.y)] = INDEX_PLAYER_1;
10001678:	008400b4 	movhi	r2,4098
1000167c:	10aa5a04 	addi	r2,r2,-22168
10001680:	10800017 	ldw	r2,0(r2)
10001684:	1007d17a 	srai	r3,r2,5
10001688:	008400b4 	movhi	r2,4098
1000168c:	10aa5a04 	addi	r2,r2,-22168
10001690:	10800117 	ldw	r2,4(r2)
10001694:	1023d17a 	srai	r17,r2,5
10001698:	040400b4 	movhi	r16,4098
1000169c:	8428de04 	addi	r16,r16,-23688
100016a0:	014003c4 	movi	r5,15
100016a4:	1809883a 	mov	r4,r3
100016a8:	0004bc80 	call	10004bc8 <__mulsi3>
100016ac:	1445883a 	add	r2,r2,r17
100016b0:	1085883a 	add	r2,r2,r2
100016b4:	1085883a 	add	r2,r2,r2
100016b8:	8085883a 	add	r2,r16,r2
100016bc:	00c03f84 	movi	r3,254
100016c0:	10c00015 	stw	r3,0(r2)
    player_1.enable = 1;
100016c4:	008400b4 	movhi	r2,4098
100016c8:	10aa5a04 	addi	r2,r2,-22168
100016cc:	00c00044 	movi	r3,1
100016d0:	10c00415 	stw	r3,16(r2)
    player_1.credit = 0;
100016d4:	008400b4 	movhi	r2,4098
100016d8:	10aa5a04 	addi	r2,r2,-22168
100016dc:	10000515 	stw	zero,20(r2)
    player_1.action = WALK;
100016e0:	008400b4 	movhi	r2,4098
100016e4:	10aa5a04 	addi	r2,r2,-22168
100016e8:	10000615 	stw	zero,24(r2)
    player_1.direction = 0;
100016ec:	008400b4 	movhi	r2,4098
100016f0:	10aa5a04 	addi	r2,r2,-22168
100016f4:	10000315 	stw	zero,12(r2)
    player_1.frame = 0;
100016f8:	008400b4 	movhi	r2,4098
100016fc:	10aa5a04 	addi	r2,r2,-22168
10001700:	10000715 	stw	zero,28(r2)
    player_1.fire_interval = 0;
10001704:	008400b4 	movhi	r2,4098
10001708:	10aa5a04 	addi	r2,r2,-22168
1000170c:	10000815 	stw	zero,32(r2)
    player_1.fire_dist = 0;
10001710:	008400b4 	movhi	r2,4098
10001714:	10aa5a04 	addi	r2,r2,-22168
10001718:	10000915 	stw	zero,36(r2)

    player_2.x = PLAYER_2_BORN_X;
1000171c:	008400b4 	movhi	r2,4098
10001720:	10aa6604 	addi	r2,r2,-22120
10001724:	00c06a84 	movi	r3,426
10001728:	10c00015 	stw	r3,0(r2)
    player_2.y = PLAYER_2_BORN_Y;
1000172c:	008400b4 	movhi	r2,4098
10001730:	10aa6604 	addi	r2,r2,-22120
10001734:	00c03c04 	movi	r3,240
10001738:	10c00115 	stw	r3,4(r2)
    player_2.blood = 100;
1000173c:	008400b4 	movhi	r2,4098
10001740:	10aa6604 	addi	r2,r2,-22120
10001744:	00c01904 	movi	r3,100
10001748:	10c00215 	stw	r3,8(r2)
    grid[TO_GRID(player_2.x)][TO_GRID(player_2.y)] = INDEX_PLAYER_2;
1000174c:	008400b4 	movhi	r2,4098
10001750:	10aa6604 	addi	r2,r2,-22120
10001754:	10800017 	ldw	r2,0(r2)
10001758:	1007d17a 	srai	r3,r2,5
1000175c:	008400b4 	movhi	r2,4098
10001760:	10aa6604 	addi	r2,r2,-22120
10001764:	10800117 	ldw	r2,4(r2)
10001768:	1023d17a 	srai	r17,r2,5
1000176c:	040400b4 	movhi	r16,4098
10001770:	8428de04 	addi	r16,r16,-23688
10001774:	014003c4 	movi	r5,15
10001778:	1809883a 	mov	r4,r3
1000177c:	0004bc80 	call	10004bc8 <__mulsi3>
10001780:	1445883a 	add	r2,r2,r17
10001784:	1085883a 	add	r2,r2,r2
10001788:	1085883a 	add	r2,r2,r2
1000178c:	8085883a 	add	r2,r16,r2
10001790:	00c03fc4 	movi	r3,255
10001794:	10c00015 	stw	r3,0(r2)
    player_2.enable = 1;
10001798:	008400b4 	movhi	r2,4098
1000179c:	10aa6604 	addi	r2,r2,-22120
100017a0:	00c00044 	movi	r3,1
100017a4:	10c00415 	stw	r3,16(r2)
    player_2.credit = 0;
100017a8:	008400b4 	movhi	r2,4098
100017ac:	10aa6604 	addi	r2,r2,-22120
100017b0:	10000515 	stw	zero,20(r2)
    player_2.action = WALK;
100017b4:	008400b4 	movhi	r2,4098
100017b8:	10aa6604 	addi	r2,r2,-22120
100017bc:	10000615 	stw	zero,24(r2)
    player_2.direction = 0;
100017c0:	008400b4 	movhi	r2,4098
100017c4:	10aa6604 	addi	r2,r2,-22120
100017c8:	10000315 	stw	zero,12(r2)
    player_2.frame = 0;
100017cc:	008400b4 	movhi	r2,4098
100017d0:	10aa6604 	addi	r2,r2,-22120
100017d4:	10000715 	stw	zero,28(r2)
    player_2.fire_interval = 0;
100017d8:	008400b4 	movhi	r2,4098
100017dc:	10aa6604 	addi	r2,r2,-22120
100017e0:	10000815 	stw	zero,32(r2)
    player_2.fire_dist = 0;
100017e4:	008400b4 	movhi	r2,4098
100017e8:	10aa6604 	addi	r2,r2,-22120
100017ec:	10000915 	stw	zero,36(r2)

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
100017f0:	e03ffc15 	stw	zero,-16(fp)
100017f4:	00001106 	br	1000183c <init_game+0x284>
        zombie[i].index = i;
100017f8:	008400b4 	movhi	r2,4098
100017fc:	10aa0a04 	addi	r2,r2,-22488
10001800:	e0fffc17 	ldw	r3,-16(fp)
10001804:	1806917a 	slli	r3,r3,5
10001808:	10c5883a 	add	r2,r2,r3
1000180c:	e0fffc17 	ldw	r3,-16(fp)
10001810:	10c00015 	stw	r3,0(r2)
        zombie[i].enable = 0;
10001814:	008400b4 	movhi	r2,4098
10001818:	10aa0a04 	addi	r2,r2,-22488
1000181c:	e0fffc17 	ldw	r3,-16(fp)
10001820:	1806917a 	slli	r3,r3,5
10001824:	10c5883a 	add	r2,r2,r3
10001828:	10800404 	addi	r2,r2,16
1000182c:	10000015 	stw	zero,0(r2)
    player_2.direction = 0;
    player_2.frame = 0;
    player_2.fire_interval = 0;
    player_2.fire_dist = 0;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
10001830:	e0bffc17 	ldw	r2,-16(fp)
10001834:	10800044 	addi	r2,r2,1
10001838:	e0bffc15 	stw	r2,-16(fp)
1000183c:	e0bffc17 	ldw	r2,-16(fp)
10001840:	10800290 	cmplti	r2,r2,10
10001844:	103fec1e 	bne	r2,zero,100017f8 <__alt_data_end+0xf80017f8>
        zombie[i].index = i;
        zombie[i].enable = 0;
    }
}
10001848:	0001883a 	nop
1000184c:	e6fffe04 	addi	sp,fp,-8
10001850:	dfc00317 	ldw	ra,12(sp)
10001854:	df000217 	ldw	fp,8(sp)
10001858:	dc400117 	ldw	r17,4(sp)
1000185c:	dc000017 	ldw	r16,0(sp)
10001860:	dec00404 	addi	sp,sp,16
10001864:	f800283a 	ret

10001868 <try_add_zombie>:

int try_add_zombie(zombie_t *z) {
10001868:	defffa04 	addi	sp,sp,-24
1000186c:	dfc00515 	stw	ra,20(sp)
10001870:	df000415 	stw	fp,16(sp)
10001874:	dc800315 	stw	r18,12(sp)
10001878:	dc400215 	stw	r17,8(sp)
1000187c:	dc000115 	stw	r16,4(sp)
10001880:	df000404 	addi	fp,sp,16
10001884:	e13ffc15 	stw	r4,-16(fp)
    if (z->enable != 0) return 1;
10001888:	e0bffc17 	ldw	r2,-16(fp)
1000188c:	10800417 	ldw	r2,16(r2)
10001890:	10000226 	beq	r2,zero,1000189c <try_add_zombie+0x34>
10001894:	00800044 	movi	r2,1
10001898:	00002d06 	br	10001950 <try_add_zombie+0xe8>

    // Check whether there is zombie at the born place
    if (grid[TO_GRID(ZOMBIE_BORN_X)][TO_GRID(ZOMBIE_BORN_Y)] != INDEX_NOTHING) {
1000189c:	008400b4 	movhi	r2,4098
100018a0:	10a8de04 	addi	r2,r2,-23688
100018a4:	10809817 	ldw	r2,608(r2)
100018a8:	10bfffe0 	cmpeqi	r2,r2,-1
100018ac:	1000021e 	bne	r2,zero,100018b8 <try_add_zombie+0x50>
        return 1;
100018b0:	00800044 	movi	r2,1
100018b4:	00002606 	br	10001950 <try_add_zombie+0xe8>
    } else {
        z->x = ZOMBIE_BORN_X;
100018b8:	e0bffc17 	ldw	r2,-16(fp)
100018bc:	00c05004 	movi	r3,320
100018c0:	10c00115 	stw	r3,4(r2)
        z->y = ZOMBIE_BORN_Y;
100018c4:	e0bffc17 	ldw	r2,-16(fp)
100018c8:	00c01004 	movi	r3,64
100018cc:	10c00215 	stw	r3,8(r2)
        z->enable = 1;
100018d0:	e0bffc17 	ldw	r2,-16(fp)
100018d4:	00c00044 	movi	r3,1
100018d8:	10c00415 	stw	r3,16(r2)
        z->blood = 100;
100018dc:	e0bffc17 	ldw	r2,-16(fp)
100018e0:	00c01904 	movi	r3,100
100018e4:	10c00315 	stw	r3,12(r2)
        z->direction = 4;
100018e8:	e0bffc17 	ldw	r2,-16(fp)
100018ec:	00c00104 	movi	r3,4
100018f0:	10c00615 	stw	r3,24(r2)
        z->action = WALK;
100018f4:	e0bffc17 	ldw	r2,-16(fp)
100018f8:	10000515 	stw	zero,20(r2)
        z->frame = 0;
100018fc:	e0bffc17 	ldw	r2,-16(fp)
10001900:	10000715 	stw	zero,28(r2)
        grid[TO_GRID(z->x)][TO_GRID(z->y)] = z->index;
10001904:	e0bffc17 	ldw	r2,-16(fp)
10001908:	10800117 	ldw	r2,4(r2)
1000190c:	1007d17a 	srai	r3,r2,5
10001910:	e0bffc17 	ldw	r2,-16(fp)
10001914:	10800217 	ldw	r2,8(r2)
10001918:	1025d17a 	srai	r18,r2,5
1000191c:	e0bffc17 	ldw	r2,-16(fp)
10001920:	14400017 	ldw	r17,0(r2)
10001924:	040400b4 	movhi	r16,4098
10001928:	8428de04 	addi	r16,r16,-23688
1000192c:	014003c4 	movi	r5,15
10001930:	1809883a 	mov	r4,r3
10001934:	0004bc80 	call	10004bc8 <__mulsi3>
10001938:	1485883a 	add	r2,r2,r18
1000193c:	1085883a 	add	r2,r2,r2
10001940:	1085883a 	add	r2,r2,r2
10001944:	8085883a 	add	r2,r16,r2
10001948:	14400015 	stw	r17,0(r2)
        return 0;
1000194c:	0005883a 	mov	r2,zero
    }
}
10001950:	e6fffd04 	addi	sp,fp,-12
10001954:	dfc00417 	ldw	ra,16(sp)
10001958:	df000317 	ldw	fp,12(sp)
1000195c:	dc800217 	ldw	r18,8(sp)
10001960:	dc400117 	ldw	r17,4(sp)
10001964:	dc000017 	ldw	r16,0(sp)
10001968:	dec00504 	addi	sp,sp,20
1000196c:	f800283a 	ret

10001970 <draw_zombie>:

void draw_zombie(const zombie_t *z) {
10001970:	deffef04 	addi	sp,sp,-68
10001974:	dfc01015 	stw	ra,64(sp)
10001978:	df000f15 	stw	fp,60(sp)
1000197c:	dc400e15 	stw	r17,56(sp)
10001980:	dc000d15 	stw	r16,52(sp)
10001984:	df000f04 	addi	fp,sp,60
10001988:	e13ffd15 	stw	r4,-12(fp)
    int width, height, flip_x, half_width, half_height;
    switch (z->action) {
1000198c:	e0bffd17 	ldw	r2,-12(fp)
10001990:	10800517 	ldw	r2,20(r2)
10001994:	10c00168 	cmpgeui	r3,r2,5
10001998:	1800931e 	bne	r3,zero,10001be8 <draw_zombie+0x278>
1000199c:	100690ba 	slli	r3,r2,2
100019a0:	00840034 	movhi	r2,4096
100019a4:	10866d04 	addi	r2,r2,6580
100019a8:	1885883a 	add	r2,r3,r2
100019ac:	10800017 	ldw	r2,0(r2)
100019b0:	1000683a 	jmp	r2
100019b4:	100019c8 	cmpgei	zero,r2,103
100019b8:	100019c8 	cmpgei	zero,r2,103
100019bc:	10001a44 	addi	zero,r2,105
100019c0:	10001ad0 	cmplti	zero,r2,107
100019c4:	10001b5c 	xori	zero,r2,109
        case WALK:
        case ROTATE:
            width = ZOMBIE_WALK_WIDTH[z->direction];
100019c8:	e0bffd17 	ldw	r2,-12(fp)
100019cc:	10c00617 	ldw	r3,24(r2)
100019d0:	00840074 	movhi	r2,4097
100019d4:	1093e304 	addi	r2,r2,20364
100019d8:	18c7883a 	add	r3,r3,r3
100019dc:	18c7883a 	add	r3,r3,r3
100019e0:	10c5883a 	add	r2,r2,r3
100019e4:	10800017 	ldw	r2,0(r2)
100019e8:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_WALK_HEIGHT[z->direction];
100019ec:	e0bffd17 	ldw	r2,-12(fp)
100019f0:	10c00617 	ldw	r3,24(r2)
100019f4:	00840074 	movhi	r2,4097
100019f8:	1093eb04 	addi	r2,r2,20396
100019fc:	18c7883a 	add	r3,r3,r3
10001a00:	18c7883a 	add	r3,r3,r3
10001a04:	10c5883a 	add	r2,r2,r3
10001a08:	10800017 	ldw	r2,0(r2)
10001a0c:	e0bff515 	stw	r2,-44(fp)
            flip_x = (z->direction >= 5);
10001a10:	e0bffd17 	ldw	r2,-12(fp)
10001a14:	10800617 	ldw	r2,24(r2)
10001a18:	10800148 	cmpgei	r2,r2,5
10001a1c:	10803fcc 	andi	r2,r2,255
10001a20:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) {
10001a24:	e0bffd17 	ldw	r2,-12(fp)
10001a28:	10800717 	ldw	r2,28(r2)
10001a2c:	10800410 	cmplti	r2,r2,16
10001a30:	1000711e 	bne	r2,zero,10001bf8 <draw_zombie+0x288>
                printf("EXCEED ZOMBIE_WALK_FRAME_COUNT!\n");
10001a34:	01040074 	movhi	r4,4097
10001a38:	2110fb04 	addi	r4,r4,17388
10001a3c:	0004d1c0 	call	10004d1c <puts>
                return;
10001a40:	00011706 	br	10001ea0 <draw_zombie+0x530>
            }
            break;
        case ATTACK:
            width = ZOMBIE_ATTACK_WIDTH[z->direction];
10001a44:	e0bffd17 	ldw	r2,-12(fp)
10001a48:	10c00617 	ldw	r3,24(r2)
10001a4c:	00840074 	movhi	r2,4097
10001a50:	10957b04 	addi	r2,r2,21996
10001a54:	18c7883a 	add	r3,r3,r3
10001a58:	18c7883a 	add	r3,r3,r3
10001a5c:	10c5883a 	add	r2,r2,r3
10001a60:	10800017 	ldw	r2,0(r2)
10001a64:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_ATTACK_HEIGHT[z->direction];
10001a68:	e0bffd17 	ldw	r2,-12(fp)
10001a6c:	10c00617 	ldw	r3,24(r2)
10001a70:	00840074 	movhi	r2,4097
10001a74:	10958304 	addi	r2,r2,22028
10001a78:	18c7883a 	add	r3,r3,r3
10001a7c:	18c7883a 	add	r3,r3,r3
10001a80:	10c5883a 	add	r2,r2,r3
10001a84:	10800017 	ldw	r2,0(r2)
10001a88:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_ATTACK_FLIP_X[z->direction];
10001a8c:	e0bffd17 	ldw	r2,-12(fp)
10001a90:	10c00617 	ldw	r3,24(r2)
10001a94:	00840074 	movhi	r2,4097
10001a98:	10958b04 	addi	r2,r2,22060
10001a9c:	18c7883a 	add	r3,r3,r3
10001aa0:	18c7883a 	add	r3,r3,r3
10001aa4:	10c5883a 	add	r2,r2,r3
10001aa8:	10800017 	ldw	r2,0(r2)
10001aac:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
10001ab0:	e0bffd17 	ldw	r2,-12(fp)
10001ab4:	10800717 	ldw	r2,28(r2)
10001ab8:	10800310 	cmplti	r2,r2,12
10001abc:	1000501e 	bne	r2,zero,10001c00 <draw_zombie+0x290>
                printf("EXCEED ZOMBIE_ATTACK_FRAME_COUNT!\n");
10001ac0:	01040074 	movhi	r4,4097
10001ac4:	21110304 	addi	r4,r4,17420
10001ac8:	0004d1c0 	call	10004d1c <puts>
                return;
10001acc:	0000f406 	br	10001ea0 <draw_zombie+0x530>
            }
            break;
        case HIT:
            width = ZOMBIE_HIT_FRONT_WIDTH[z->direction];
10001ad0:	e0bffd17 	ldw	r2,-12(fp)
10001ad4:	10c00617 	ldw	r3,24(r2)
10001ad8:	00840074 	movhi	r2,4097
10001adc:	10950b04 	addi	r2,r2,21548
10001ae0:	18c7883a 	add	r3,r3,r3
10001ae4:	18c7883a 	add	r3,r3,r3
10001ae8:	10c5883a 	add	r2,r2,r3
10001aec:	10800017 	ldw	r2,0(r2)
10001af0:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_HIT_FRONT_HEIGHT[z->direction];
10001af4:	e0bffd17 	ldw	r2,-12(fp)
10001af8:	10c00617 	ldw	r3,24(r2)
10001afc:	00840074 	movhi	r2,4097
10001b00:	10951304 	addi	r2,r2,21580
10001b04:	18c7883a 	add	r3,r3,r3
10001b08:	18c7883a 	add	r3,r3,r3
10001b0c:	10c5883a 	add	r2,r2,r3
10001b10:	10800017 	ldw	r2,0(r2)
10001b14:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_HIT_FRONT_FLIP_X[z->direction];
10001b18:	e0bffd17 	ldw	r2,-12(fp)
10001b1c:	10c00617 	ldw	r3,24(r2)
10001b20:	00840074 	movhi	r2,4097
10001b24:	10951b04 	addi	r2,r2,21612
10001b28:	18c7883a 	add	r3,r3,r3
10001b2c:	18c7883a 	add	r3,r3,r3
10001b30:	10c5883a 	add	r2,r2,r3
10001b34:	10800017 	ldw	r2,0(r2)
10001b38:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
10001b3c:	e0bffd17 	ldw	r2,-12(fp)
10001b40:	10800717 	ldw	r2,28(r2)
10001b44:	108002d0 	cmplti	r2,r2,11
10001b48:	10002f1e 	bne	r2,zero,10001c08 <draw_zombie+0x298>
                printf("EXCEED ZOMBIE_HIT_FRONT_FRAME_COUNT!\n");
10001b4c:	01040074 	movhi	r4,4097
10001b50:	21110c04 	addi	r4,r4,17456
10001b54:	0004d1c0 	call	10004d1c <puts>
                return;
10001b58:	0000d106 	br	10001ea0 <draw_zombie+0x530>
            }
            break;
        case DIE:
            width = ZOMBIE_DIE_WIDTH[z->direction];
10001b5c:	e0bffd17 	ldw	r2,-12(fp)
10001b60:	10c00617 	ldw	r3,24(r2)
10001b64:	00840074 	movhi	r2,4097
10001b68:	1095f304 	addi	r2,r2,22476
10001b6c:	18c7883a 	add	r3,r3,r3
10001b70:	18c7883a 	add	r3,r3,r3
10001b74:	10c5883a 	add	r2,r2,r3
10001b78:	10800017 	ldw	r2,0(r2)
10001b7c:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_DIE_HEIGHT[z->direction];
10001b80:	e0bffd17 	ldw	r2,-12(fp)
10001b84:	10c00617 	ldw	r3,24(r2)
10001b88:	00840074 	movhi	r2,4097
10001b8c:	1095fb04 	addi	r2,r2,22508
10001b90:	18c7883a 	add	r3,r3,r3
10001b94:	18c7883a 	add	r3,r3,r3
10001b98:	10c5883a 	add	r2,r2,r3
10001b9c:	10800017 	ldw	r2,0(r2)
10001ba0:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_DIE_FLIP_X[z->direction];
10001ba4:	e0bffd17 	ldw	r2,-12(fp)
10001ba8:	10c00617 	ldw	r3,24(r2)
10001bac:	00840074 	movhi	r2,4097
10001bb0:	10960304 	addi	r2,r2,22540
10001bb4:	18c7883a 	add	r3,r3,r3
10001bb8:	18c7883a 	add	r3,r3,r3
10001bbc:	10c5883a 	add	r2,r2,r3
10001bc0:	10800017 	ldw	r2,0(r2)
10001bc4:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
10001bc8:	e0bffd17 	ldw	r2,-12(fp)
10001bcc:	10800717 	ldw	r2,28(r2)
10001bd0:	10800410 	cmplti	r2,r2,16
10001bd4:	10000e1e 	bne	r2,zero,10001c10 <draw_zombie+0x2a0>
                printf("EXCEED ZOMBIE_DIE_FRAME_COUNT!\n");
10001bd8:	01040074 	movhi	r4,4097
10001bdc:	21111604 	addi	r4,r4,17496
10001be0:	0004d1c0 	call	10004d1c <puts>
                return;
10001be4:	0000ae06 	br	10001ea0 <draw_zombie+0x530>
            }
            break;
        default:
            printf("INVALID ZOMBIE STATE!\n");
10001be8:	01040074 	movhi	r4,4097
10001bec:	21111e04 	addi	r4,r4,17528
10001bf0:	0004d1c0 	call	10004d1c <puts>
            return;
10001bf4:	0000aa06 	br	10001ea0 <draw_zombie+0x530>
            flip_x = (z->direction >= 5);
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_WALK_FRAME_COUNT!\n");
                return;
            }
            break;
10001bf8:	0001883a 	nop
10001bfc:	00000506 	br	10001c14 <draw_zombie+0x2a4>
            flip_x = ZOMBIE_ATTACK_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_ATTACK_FRAME_COUNT!\n");
                return;
            }
            break;
10001c00:	0001883a 	nop
10001c04:	00000306 	br	10001c14 <draw_zombie+0x2a4>
            flip_x = ZOMBIE_HIT_FRONT_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_HIT_FRONT_FRAME_COUNT!\n");
                return;
            }
            break;
10001c08:	0001883a 	nop
10001c0c:	00000106 	br	10001c14 <draw_zombie+0x2a4>
            flip_x = ZOMBIE_DIE_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_DIE_FRAME_COUNT!\n");
                return;
            }
            break;
10001c10:	0001883a 	nop
        default:
            printf("INVALID ZOMBIE STATE!\n");
            return;
    }

    half_width = width / 2;
10001c14:	e0bff417 	ldw	r2,-48(fp)
10001c18:	1006d7fa 	srli	r3,r2,31
10001c1c:	1885883a 	add	r2,r3,r2
10001c20:	1005d07a 	srai	r2,r2,1
10001c24:	e0bff715 	stw	r2,-36(fp)
    half_height = height / 2;
10001c28:	e0bff517 	ldw	r2,-44(fp)
10001c2c:	1006d7fa 	srli	r3,r2,31
10001c30:	1885883a 	add	r2,r3,r2
10001c34:	1005d07a 	srai	r2,r2,1
10001c38:	e0bff815 	stw	r2,-32(fp)

    int start_x = z->x - half_width;
10001c3c:	e0bffd17 	ldw	r2,-12(fp)
10001c40:	10c00117 	ldw	r3,4(r2)
10001c44:	e0bff717 	ldw	r2,-36(fp)
10001c48:	1885c83a 	sub	r2,r3,r2
10001c4c:	e0bff915 	stw	r2,-28(fp)
    int end_x = z->x + (width - half_width);
10001c50:	e0bffd17 	ldw	r2,-12(fp)
10001c54:	10c00117 	ldw	r3,4(r2)
10001c58:	e13ff417 	ldw	r4,-48(fp)
10001c5c:	e0bff717 	ldw	r2,-36(fp)
10001c60:	2085c83a 	sub	r2,r4,r2
10001c64:	1885883a 	add	r2,r3,r2
10001c68:	e0bffa15 	stw	r2,-24(fp)
    int start_y = z->y - half_height;
10001c6c:	e0bffd17 	ldw	r2,-12(fp)
10001c70:	10c00217 	ldw	r3,8(r2)
10001c74:	e0bff817 	ldw	r2,-32(fp)
10001c78:	1885c83a 	sub	r2,r3,r2
10001c7c:	e0bffb15 	stw	r2,-20(fp)
    int end_y = z->y + (height - half_height);
10001c80:	e0bffd17 	ldw	r2,-12(fp)
10001c84:	10c00217 	ldw	r3,8(r2)
10001c88:	e13ff517 	ldw	r4,-44(fp)
10001c8c:	e0bff817 	ldw	r2,-32(fp)
10001c90:	2085c83a 	sub	r2,r4,r2
10001c94:	1885883a 	add	r2,r3,r2
10001c98:	e0bffc15 	stw	r2,-16(fp)

    switch (z->action) {
10001c9c:	e0bffd17 	ldw	r2,-12(fp)
10001ca0:	10800517 	ldw	r2,20(r2)
10001ca4:	10c00168 	cmpgeui	r3,r2,5
10001ca8:	1800791e 	bne	r3,zero,10001e90 <draw_zombie+0x520>
10001cac:	100690ba 	slli	r3,r2,2
10001cb0:	00840034 	movhi	r2,4096
10001cb4:	10873104 	addi	r2,r2,7364
10001cb8:	1885883a 	add	r2,r3,r2
10001cbc:	10800017 	ldw	r2,0(r2)
10001cc0:	1000683a 	jmp	r2
10001cc4:	10001cd8 	cmpnei	zero,r2,115
10001cc8:	10001d30 	cmpltui	zero,r2,116
10001ccc:	10001d78 	rdprs	zero,r2,117
10001cd0:	10001dd8 	cmpnei	zero,r2,119
10001cd4:	10001e38 	rdprs	zero,r2,120
        case WALK:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_WALK_OFFSET[z->direction][z->frame], 0, flip_x);
10001cd8:	e0bffd17 	ldw	r2,-12(fp)
10001cdc:	11000617 	ldw	r4,24(r2)
10001ce0:	e0bffd17 	ldw	r2,-12(fp)
10001ce4:	10c00717 	ldw	r3,28(r2)
10001ce8:	00840074 	movhi	r2,4097
10001cec:	1093fb04 	addi	r2,r2,20460
10001cf0:	2008913a 	slli	r4,r4,4
10001cf4:	20c7883a 	add	r3,r4,r3
10001cf8:	18c7883a 	add	r3,r3,r3
10001cfc:	18c7883a 	add	r3,r3,r3
10001d00:	10c5883a 	add	r2,r2,r3
10001d04:	10800017 	ldw	r2,0(r2)
10001d08:	e0fff617 	ldw	r3,-40(fp)
10001d0c:	d8c00215 	stw	r3,8(sp)
10001d10:	d8000115 	stw	zero,4(sp)
10001d14:	d8800015 	stw	r2,0(sp)
10001d18:	e1fffc17 	ldw	r7,-16(fp)
10001d1c:	e1bffb17 	ldw	r6,-20(fp)
10001d20:	e17ffa17 	ldw	r5,-24(fp)
10001d24:	e13ff917 	ldw	r4,-28(fp)
10001d28:	00026640 	call	10002664 <draw>
            break;
10001d2c:	00005c06 	br	10001ea0 <draw_zombie+0x530>
        case ROTATE:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_WALK_OFFSET[z->direction][8], 0, flip_x);
10001d30:	e0bffd17 	ldw	r2,-12(fp)
10001d34:	10c00617 	ldw	r3,24(r2)
10001d38:	00840074 	movhi	r2,4097
10001d3c:	1093fb04 	addi	r2,r2,20460
10001d40:	180691ba 	slli	r3,r3,6
10001d44:	10c5883a 	add	r2,r2,r3
10001d48:	10800804 	addi	r2,r2,32
10001d4c:	10800017 	ldw	r2,0(r2)
10001d50:	e0fff617 	ldw	r3,-40(fp)
10001d54:	d8c00215 	stw	r3,8(sp)
10001d58:	d8000115 	stw	zero,4(sp)
10001d5c:	d8800015 	stw	r2,0(sp)
10001d60:	e1fffc17 	ldw	r7,-16(fp)
10001d64:	e1bffb17 	ldw	r6,-20(fp)
10001d68:	e17ffa17 	ldw	r5,-24(fp)
10001d6c:	e13ff917 	ldw	r4,-28(fp)
10001d70:	00026640 	call	10002664 <draw>
            break;
10001d74:	00004a06 	br	10001ea0 <draw_zombie+0x530>
        case ATTACK:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_ATTACK_OFFSET[z->direction][z->frame], 0, flip_x);
10001d78:	e0bffd17 	ldw	r2,-12(fp)
10001d7c:	10c00617 	ldw	r3,24(r2)
10001d80:	e0bffd17 	ldw	r2,-12(fp)
10001d84:	14400717 	ldw	r17,28(r2)
10001d88:	04040074 	movhi	r16,4097
10001d8c:	84159304 	addi	r16,r16,22092
10001d90:	01400304 	movi	r5,12
10001d94:	1809883a 	mov	r4,r3
10001d98:	0004bc80 	call	10004bc8 <__mulsi3>
10001d9c:	1445883a 	add	r2,r2,r17
10001da0:	1085883a 	add	r2,r2,r2
10001da4:	1085883a 	add	r2,r2,r2
10001da8:	8085883a 	add	r2,r16,r2
10001dac:	10800017 	ldw	r2,0(r2)
10001db0:	e0fff617 	ldw	r3,-40(fp)
10001db4:	d8c00215 	stw	r3,8(sp)
10001db8:	d8000115 	stw	zero,4(sp)
10001dbc:	d8800015 	stw	r2,0(sp)
10001dc0:	e1fffc17 	ldw	r7,-16(fp)
10001dc4:	e1bffb17 	ldw	r6,-20(fp)
10001dc8:	e17ffa17 	ldw	r5,-24(fp)
10001dcc:	e13ff917 	ldw	r4,-28(fp)
10001dd0:	00026640 	call	10002664 <draw>
            break;
10001dd4:	00003206 	br	10001ea0 <draw_zombie+0x530>
        case HIT:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_HIT_FRONT_OFFSET[z->direction][z->frame], 0, flip_x);
10001dd8:	e0bffd17 	ldw	r2,-12(fp)
10001ddc:	10c00617 	ldw	r3,24(r2)
10001de0:	e0bffd17 	ldw	r2,-12(fp)
10001de4:	14400717 	ldw	r17,28(r2)
10001de8:	04040074 	movhi	r16,4097
10001dec:	84152304 	addi	r16,r16,21644
10001df0:	014002c4 	movi	r5,11
10001df4:	1809883a 	mov	r4,r3
10001df8:	0004bc80 	call	10004bc8 <__mulsi3>
10001dfc:	1445883a 	add	r2,r2,r17
10001e00:	1085883a 	add	r2,r2,r2
10001e04:	1085883a 	add	r2,r2,r2
10001e08:	8085883a 	add	r2,r16,r2
10001e0c:	10800017 	ldw	r2,0(r2)
10001e10:	e0fff617 	ldw	r3,-40(fp)
10001e14:	d8c00215 	stw	r3,8(sp)
10001e18:	d8000115 	stw	zero,4(sp)
10001e1c:	d8800015 	stw	r2,0(sp)
10001e20:	e1fffc17 	ldw	r7,-16(fp)
10001e24:	e1bffb17 	ldw	r6,-20(fp)
10001e28:	e17ffa17 	ldw	r5,-24(fp)
10001e2c:	e13ff917 	ldw	r4,-28(fp)
10001e30:	00026640 	call	10002664 <draw>
            break;
10001e34:	00001a06 	br	10001ea0 <draw_zombie+0x530>
        case DIE:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_DIE_OFFSET[z->direction][z->frame], 0, flip_x);
10001e38:	e0bffd17 	ldw	r2,-12(fp)
10001e3c:	11000617 	ldw	r4,24(r2)
10001e40:	e0bffd17 	ldw	r2,-12(fp)
10001e44:	10c00717 	ldw	r3,28(r2)
10001e48:	00840074 	movhi	r2,4097
10001e4c:	10960b04 	addi	r2,r2,22572
10001e50:	2008913a 	slli	r4,r4,4
10001e54:	20c7883a 	add	r3,r4,r3
10001e58:	18c7883a 	add	r3,r3,r3
10001e5c:	18c7883a 	add	r3,r3,r3
10001e60:	10c5883a 	add	r2,r2,r3
10001e64:	10800017 	ldw	r2,0(r2)
10001e68:	e0fff617 	ldw	r3,-40(fp)
10001e6c:	d8c00215 	stw	r3,8(sp)
10001e70:	d8000115 	stw	zero,4(sp)
10001e74:	d8800015 	stw	r2,0(sp)
10001e78:	e1fffc17 	ldw	r7,-16(fp)
10001e7c:	e1bffb17 	ldw	r6,-20(fp)
10001e80:	e17ffa17 	ldw	r5,-24(fp)
10001e84:	e13ff917 	ldw	r4,-28(fp)
10001e88:	00026640 	call	10002664 <draw>
            break;
10001e8c:	00000406 	br	10001ea0 <draw_zombie+0x530>
        default:
            printf("INVALID ZOMBIE STATE!\n");
10001e90:	01040074 	movhi	r4,4097
10001e94:	21111e04 	addi	r4,r4,17528
10001e98:	0004d1c0 	call	10004d1c <puts>
            return;
10001e9c:	0001883a 	nop
    }
}
10001ea0:	e6fffe04 	addi	sp,fp,-8
10001ea4:	dfc00317 	ldw	ra,12(sp)
10001ea8:	df000217 	ldw	fp,8(sp)
10001eac:	dc400117 	ldw	r17,4(sp)
10001eb0:	dc000017 	ldw	r16,0(sp)
10001eb4:	dec00404 	addi	sp,sp,16
10001eb8:	f800283a 	ret

10001ebc <draw_player>:

void draw_player(const player_t *p) {
10001ebc:	deffef04 	addi	sp,sp,-68
10001ec0:	dfc01015 	stw	ra,64(sp)
10001ec4:	df000f15 	stw	fp,60(sp)
10001ec8:	dc400e15 	stw	r17,56(sp)
10001ecc:	dc000d15 	stw	r16,52(sp)
10001ed0:	df000f04 	addi	fp,sp,60
10001ed4:	e13ffd15 	stw	r4,-12(fp)
    int width, height, flip_x, half_width, half_height;
    switch (p->action) {
10001ed8:	e0bffd17 	ldw	r2,-12(fp)
10001edc:	10800617 	ldw	r2,24(r2)
10001ee0:	10c000e0 	cmpeqi	r3,r2,3
10001ee4:	1800261e 	bne	r3,zero,10001f80 <draw_player+0xc4>
10001ee8:	10c00120 	cmpeqi	r3,r2,4
10001eec:	1800471e 	bne	r3,zero,1000200c <draw_player+0x150>
10001ef0:	1000691e 	bne	r2,zero,10002098 <draw_player+0x1dc>
        case WALK:
            width = PLAYER_WALK_WIDTH[p->direction];
10001ef4:	e0bffd17 	ldw	r2,-12(fp)
10001ef8:	10c00317 	ldw	r3,12(r2)
10001efc:	00840074 	movhi	r2,4097
10001f00:	10947b04 	addi	r2,r2,20972
10001f04:	18c7883a 	add	r3,r3,r3
10001f08:	18c7883a 	add	r3,r3,r3
10001f0c:	10c5883a 	add	r2,r2,r3
10001f10:	10800017 	ldw	r2,0(r2)
10001f14:	e0bff415 	stw	r2,-48(fp)
            height = PLAYER_WALK_HEIGHT[p->direction];
10001f18:	e0bffd17 	ldw	r2,-12(fp)
10001f1c:	10c00317 	ldw	r3,12(r2)
10001f20:	00840074 	movhi	r2,4097
10001f24:	10948304 	addi	r2,r2,21004
10001f28:	18c7883a 	add	r3,r3,r3
10001f2c:	18c7883a 	add	r3,r3,r3
10001f30:	10c5883a 	add	r2,r2,r3
10001f34:	10800017 	ldw	r2,0(r2)
10001f38:	e0bff515 	stw	r2,-44(fp)
            flip_x = PLAYER_WALK_FLIP_X[p->direction];
10001f3c:	e0bffd17 	ldw	r2,-12(fp)
10001f40:	10c00317 	ldw	r3,12(r2)
10001f44:	008400b4 	movhi	r2,4098
10001f48:	10a8d604 	addi	r2,r2,-23720
10001f4c:	18c7883a 	add	r3,r3,r3
10001f50:	18c7883a 	add	r3,r3,r3
10001f54:	10c5883a 	add	r2,r2,r3
10001f58:	10800017 	ldw	r2,0(r2)
10001f5c:	e0bff615 	stw	r2,-40(fp)
            if (p->frame >= PLAYER_WALK_FRAME_COUNT) {
10001f60:	e0bffd17 	ldw	r2,-12(fp)
10001f64:	10800717 	ldw	r2,28(r2)
10001f68:	10800410 	cmplti	r2,r2,16
10001f6c:	10004e1e 	bne	r2,zero,100020a8 <draw_player+0x1ec>
                printf("EXCEED PLAYER_WALK_FRAME_COUNT!\n");
10001f70:	01040074 	movhi	r4,4097
10001f74:	21112404 	addi	r4,r4,17552
10001f78:	0004d1c0 	call	10004d1c <puts>
                return;
10001f7c:	00010206 	br	10002388 <draw_player+0x4cc>
            }
            break;
        case HIT:
            width = PLAYER_HIT_FRONT_WIDTH[p->direction];
10001f80:	e0bffd17 	ldw	r2,-12(fp)
10001f84:	10c00317 	ldw	r3,12(r2)
10001f88:	00840074 	movhi	r2,4097
10001f8c:	10968b04 	addi	r2,r2,23084
10001f90:	18c7883a 	add	r3,r3,r3
10001f94:	18c7883a 	add	r3,r3,r3
10001f98:	10c5883a 	add	r2,r2,r3
10001f9c:	10800017 	ldw	r2,0(r2)
10001fa0:	e0bff415 	stw	r2,-48(fp)
            height = PLAYER_HIT_FRONT_HEIGHT[p->direction];
10001fa4:	e0bffd17 	ldw	r2,-12(fp)
10001fa8:	10c00317 	ldw	r3,12(r2)
10001fac:	00840074 	movhi	r2,4097
10001fb0:	10969304 	addi	r2,r2,23116
10001fb4:	18c7883a 	add	r3,r3,r3
10001fb8:	18c7883a 	add	r3,r3,r3
10001fbc:	10c5883a 	add	r2,r2,r3
10001fc0:	10800017 	ldw	r2,0(r2)
10001fc4:	e0bff515 	stw	r2,-44(fp)
            flip_x = PLAYER_HIT_FRONT_FLIP_X[p->direction];
10001fc8:	e0bffd17 	ldw	r2,-12(fp)
10001fcc:	10c00317 	ldw	r3,12(r2)
10001fd0:	00840074 	movhi	r2,4097
10001fd4:	10969b04 	addi	r2,r2,23148
10001fd8:	18c7883a 	add	r3,r3,r3
10001fdc:	18c7883a 	add	r3,r3,r3
10001fe0:	10c5883a 	add	r2,r2,r3
10001fe4:	10800017 	ldw	r2,0(r2)
10001fe8:	e0bff615 	stw	r2,-40(fp)
            if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
10001fec:	e0bffd17 	ldw	r2,-12(fp)
10001ff0:	10800717 	ldw	r2,28(r2)
10001ff4:	108002d0 	cmplti	r2,r2,11
10001ff8:	10002d1e 	bne	r2,zero,100020b0 <draw_player+0x1f4>
                printf("EXCEED PLAYER_HIT_FRONT_FRAME_COUNT!\n");
10001ffc:	01040074 	movhi	r4,4097
10002000:	21112c04 	addi	r4,r4,17584
10002004:	0004d1c0 	call	10004d1c <puts>
                return;
10002008:	0000df06 	br	10002388 <draw_player+0x4cc>
            }
            break;
        case DIE:
            width = PLAYER_DIE_WIDTH[p->direction];
1000200c:	e0bffd17 	ldw	r2,-12(fp)
10002010:	10c00317 	ldw	r3,12(r2)
10002014:	00840074 	movhi	r2,4097
10002018:	1096fb04 	addi	r2,r2,23532
1000201c:	18c7883a 	add	r3,r3,r3
10002020:	18c7883a 	add	r3,r3,r3
10002024:	10c5883a 	add	r2,r2,r3
10002028:	10800017 	ldw	r2,0(r2)
1000202c:	e0bff415 	stw	r2,-48(fp)
            height = PLAYER_DIE_HEIGHT[p->direction];
10002030:	e0bffd17 	ldw	r2,-12(fp)
10002034:	10c00317 	ldw	r3,12(r2)
10002038:	00840074 	movhi	r2,4097
1000203c:	10970304 	addi	r2,r2,23564
10002040:	18c7883a 	add	r3,r3,r3
10002044:	18c7883a 	add	r3,r3,r3
10002048:	10c5883a 	add	r2,r2,r3
1000204c:	10800017 	ldw	r2,0(r2)
10002050:	e0bff515 	stw	r2,-44(fp)
            flip_x = PLAYER_DIE_FLIP_X[p->direction];
10002054:	e0bffd17 	ldw	r2,-12(fp)
10002058:	10c00317 	ldw	r3,12(r2)
1000205c:	00840074 	movhi	r2,4097
10002060:	10970b04 	addi	r2,r2,23596
10002064:	18c7883a 	add	r3,r3,r3
10002068:	18c7883a 	add	r3,r3,r3
1000206c:	10c5883a 	add	r2,r2,r3
10002070:	10800017 	ldw	r2,0(r2)
10002074:	e0bff615 	stw	r2,-40(fp)
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
10002078:	e0bffd17 	ldw	r2,-12(fp)
1000207c:	10800717 	ldw	r2,28(r2)
10002080:	10800410 	cmplti	r2,r2,16
10002084:	10000c1e 	bne	r2,zero,100020b8 <draw_player+0x1fc>
                printf("EXCEED PLAYER_DIE_FRAME_COUNT!\n");
10002088:	01040074 	movhi	r4,4097
1000208c:	21113604 	addi	r4,r4,17624
10002090:	0004d1c0 	call	10004d1c <puts>
                return;
10002094:	0000bc06 	br	10002388 <draw_player+0x4cc>
            }
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
10002098:	01040074 	movhi	r4,4097
1000209c:	2110f504 	addi	r4,r4,17364
100020a0:	0004d1c0 	call	10004d1c <puts>
            return;
100020a4:	0000b806 	br	10002388 <draw_player+0x4cc>
            flip_x = PLAYER_WALK_FLIP_X[p->direction];
            if (p->frame >= PLAYER_WALK_FRAME_COUNT) {
                printf("EXCEED PLAYER_WALK_FRAME_COUNT!\n");
                return;
            }
            break;
100020a8:	0001883a 	nop
100020ac:	00000306 	br	100020bc <draw_player+0x200>
            flip_x = PLAYER_HIT_FRONT_FLIP_X[p->direction];
            if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
                printf("EXCEED PLAYER_HIT_FRONT_FRAME_COUNT!\n");
                return;
            }
            break;
100020b0:	0001883a 	nop
100020b4:	00000106 	br	100020bc <draw_player+0x200>
            flip_x = PLAYER_DIE_FLIP_X[p->direction];
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
                printf("EXCEED PLAYER_DIE_FRAME_COUNT!\n");
                return;
            }
            break;
100020b8:	0001883a 	nop
        default:
            printf("INVALID PLAYER STATE!\n");
            return;
    }

    half_width = width / 2;
100020bc:	e0bff417 	ldw	r2,-48(fp)
100020c0:	1006d7fa 	srli	r3,r2,31
100020c4:	1885883a 	add	r2,r3,r2
100020c8:	1005d07a 	srai	r2,r2,1
100020cc:	e0bffb15 	stw	r2,-20(fp)
    half_height = height / 2;
100020d0:	e0bff517 	ldw	r2,-44(fp)
100020d4:	1006d7fa 	srli	r3,r2,31
100020d8:	1885883a 	add	r2,r3,r2
100020dc:	1005d07a 	srai	r2,r2,1
100020e0:	e0bffc15 	stw	r2,-16(fp)

    int start_x = p->x - half_width;
100020e4:	e0bffd17 	ldw	r2,-12(fp)
100020e8:	10c00017 	ldw	r3,0(r2)
100020ec:	e0bffb17 	ldw	r2,-20(fp)
100020f0:	1885c83a 	sub	r2,r3,r2
100020f4:	e0bff715 	stw	r2,-36(fp)
    int end_x = p->x + (width - half_width);
100020f8:	e0bffd17 	ldw	r2,-12(fp)
100020fc:	10c00017 	ldw	r3,0(r2)
10002100:	e13ff417 	ldw	r4,-48(fp)
10002104:	e0bffb17 	ldw	r2,-20(fp)
10002108:	2085c83a 	sub	r2,r4,r2
1000210c:	1885883a 	add	r2,r3,r2
10002110:	e0bff815 	stw	r2,-32(fp)
    int start_y = p->y - half_height;
10002114:	e0bffd17 	ldw	r2,-12(fp)
10002118:	10c00117 	ldw	r3,4(r2)
1000211c:	e0bffc17 	ldw	r2,-16(fp)
10002120:	1885c83a 	sub	r2,r3,r2
10002124:	e0bff915 	stw	r2,-28(fp)
    int end_y = p->y + (height - half_height);
10002128:	e0bffd17 	ldw	r2,-12(fp)
1000212c:	10c00117 	ldw	r3,4(r2)
10002130:	e13ff517 	ldw	r4,-44(fp)
10002134:	e0bffc17 	ldw	r2,-16(fp)
10002138:	2085c83a 	sub	r2,r4,r2
1000213c:	1885883a 	add	r2,r3,r2
10002140:	e0bffa15 	stw	r2,-24(fp)

    switch (p->action) {
10002144:	e0bffd17 	ldw	r2,-12(fp)
10002148:	10800617 	ldw	r2,24(r2)
1000214c:	10c000e0 	cmpeqi	r3,r2,3
10002150:	1800191e 	bne	r3,zero,100021b8 <draw_player+0x2fc>
10002154:	10c00120 	cmpeqi	r3,r2,4
10002158:	18002f1e 	bne	r3,zero,10002218 <draw_player+0x35c>
1000215c:	1000441e 	bne	r2,zero,10002270 <draw_player+0x3b4>
        case WALK:
            draw(start_x, end_x, start_y, end_y, PLAYER_WALK_OFFSET[p->direction][p->frame], 0, flip_x);
10002160:	e0bffd17 	ldw	r2,-12(fp)
10002164:	11000317 	ldw	r4,12(r2)
10002168:	e0bffd17 	ldw	r2,-12(fp)
1000216c:	10c00717 	ldw	r3,28(r2)
10002170:	00840074 	movhi	r2,4097
10002174:	10948b04 	addi	r2,r2,21036
10002178:	2008913a 	slli	r4,r4,4
1000217c:	20c7883a 	add	r3,r4,r3
10002180:	18c7883a 	add	r3,r3,r3
10002184:	18c7883a 	add	r3,r3,r3
10002188:	10c5883a 	add	r2,r2,r3
1000218c:	10800017 	ldw	r2,0(r2)
10002190:	e0fff617 	ldw	r3,-40(fp)
10002194:	d8c00215 	stw	r3,8(sp)
10002198:	d8000115 	stw	zero,4(sp)
1000219c:	d8800015 	stw	r2,0(sp)
100021a0:	e1fffa17 	ldw	r7,-24(fp)
100021a4:	e1bff917 	ldw	r6,-28(fp)
100021a8:	e17ff817 	ldw	r5,-32(fp)
100021ac:	e13ff717 	ldw	r4,-36(fp)
100021b0:	00026640 	call	10002664 <draw>
            break;
100021b4:	00003206 	br	10002280 <draw_player+0x3c4>
        case HIT:
            draw(start_x, end_x, start_y, end_y, PLAYER_HIT_FRONT_OFFSET[p->direction][p->frame], 0, flip_x);
100021b8:	e0bffd17 	ldw	r2,-12(fp)
100021bc:	10c00317 	ldw	r3,12(r2)
100021c0:	e0bffd17 	ldw	r2,-12(fp)
100021c4:	14400717 	ldw	r17,28(r2)
100021c8:	04040074 	movhi	r16,4097
100021cc:	8416a304 	addi	r16,r16,23180
100021d0:	014002c4 	movi	r5,11
100021d4:	1809883a 	mov	r4,r3
100021d8:	0004bc80 	call	10004bc8 <__mulsi3>
100021dc:	1445883a 	add	r2,r2,r17
100021e0:	1085883a 	add	r2,r2,r2
100021e4:	1085883a 	add	r2,r2,r2
100021e8:	8085883a 	add	r2,r16,r2
100021ec:	10800017 	ldw	r2,0(r2)
100021f0:	e0fff617 	ldw	r3,-40(fp)
100021f4:	d8c00215 	stw	r3,8(sp)
100021f8:	d8000115 	stw	zero,4(sp)
100021fc:	d8800015 	stw	r2,0(sp)
10002200:	e1fffa17 	ldw	r7,-24(fp)
10002204:	e1bff917 	ldw	r6,-28(fp)
10002208:	e17ff817 	ldw	r5,-32(fp)
1000220c:	e13ff717 	ldw	r4,-36(fp)
10002210:	00026640 	call	10002664 <draw>
            break;
10002214:	00001a06 	br	10002280 <draw_player+0x3c4>
        case DIE:
            draw(start_x, end_x, start_y, end_y, PLAYER_DIE_OFFSET[p->direction][p->frame], 0, flip_x);
10002218:	e0bffd17 	ldw	r2,-12(fp)
1000221c:	11000317 	ldw	r4,12(r2)
10002220:	e0bffd17 	ldw	r2,-12(fp)
10002224:	10c00717 	ldw	r3,28(r2)
10002228:	00840074 	movhi	r2,4097
1000222c:	10971304 	addi	r2,r2,23628
10002230:	2008913a 	slli	r4,r4,4
10002234:	20c7883a 	add	r3,r4,r3
10002238:	18c7883a 	add	r3,r3,r3
1000223c:	18c7883a 	add	r3,r3,r3
10002240:	10c5883a 	add	r2,r2,r3
10002244:	10800017 	ldw	r2,0(r2)
10002248:	e0fff617 	ldw	r3,-40(fp)
1000224c:	d8c00215 	stw	r3,8(sp)
10002250:	d8000115 	stw	zero,4(sp)
10002254:	d8800015 	stw	r2,0(sp)
10002258:	e1fffa17 	ldw	r7,-24(fp)
1000225c:	e1bff917 	ldw	r6,-28(fp)
10002260:	e17ff817 	ldw	r5,-32(fp)
10002264:	e13ff717 	ldw	r4,-36(fp)
10002268:	00026640 	call	10002664 <draw>
            break;
1000226c:	00000406 	br	10002280 <draw_player+0x3c4>
        default:
            printf("INVALID PLAYER STATE!\n");
10002270:	01040074 	movhi	r4,4097
10002274:	2110f504 	addi	r4,r4,17364
10002278:	0004d1c0 	call	10004d1c <puts>
            return;
1000227c:	00004206 	br	10002388 <draw_player+0x4cc>
    }

    if (p->fire_interval > PLAYER_FIRE_INTERVAL / 2) {
10002280:	e0bffd17 	ldw	r2,-12(fp)
10002284:	10800817 	ldw	r2,32(r2)
10002288:	10800190 	cmplti	r2,r2,6
1000228c:	10003e1e 	bne	r2,zero,10002388 <draw_player+0x4cc>
        if (p->fire_dist_dx != 0 && p->fire_dist_dy != 0) {
10002290:	e0bffd17 	ldw	r2,-12(fp)
10002294:	10800a17 	ldw	r2,40(r2)
10002298:	10000326 	beq	r2,zero,100022a8 <draw_player+0x3ec>
1000229c:	e0bffd17 	ldw	r2,-12(fp)
100022a0:	10800b17 	ldw	r2,44(r2)
100022a4:	1000381e 	bne	r2,zero,10002388 <draw_player+0x4cc>
            // Not horizontal or vertical, we can not draw...
        } else {
            if (p->fire_dist_dx != 0) {
100022a8:	e0bffd17 	ldw	r2,-12(fp)
100022ac:	10800a17 	ldw	r2,40(r2)
100022b0:	10001626 	beq	r2,zero,1000230c <draw_player+0x450>
                start_x = p->x + half_width * p->fire_dist_dx;
100022b4:	e0bffd17 	ldw	r2,-12(fp)
100022b8:	14000017 	ldw	r16,0(r2)
100022bc:	e0bffd17 	ldw	r2,-12(fp)
100022c0:	10800a17 	ldw	r2,40(r2)
100022c4:	e17ffb17 	ldw	r5,-20(fp)
100022c8:	1009883a 	mov	r4,r2
100022cc:	0004bc80 	call	10004bc8 <__mulsi3>
100022d0:	8085883a 	add	r2,r16,r2
100022d4:	e0bff715 	stw	r2,-36(fp)
                end_x = p->x + p->fire_dist;
100022d8:	e0bffd17 	ldw	r2,-12(fp)
100022dc:	10c00017 	ldw	r3,0(r2)
100022e0:	e0bffd17 	ldw	r2,-12(fp)
100022e4:	10800917 	ldw	r2,36(r2)
100022e8:	1885883a 	add	r2,r3,r2
100022ec:	e0bff815 	stw	r2,-32(fp)
                start_y = p->y;
100022f0:	e0bffd17 	ldw	r2,-12(fp)
100022f4:	10800117 	ldw	r2,4(r2)
100022f8:	e0bff915 	stw	r2,-28(fp)
                end_y = start_y + 1;
100022fc:	e0bff917 	ldw	r2,-28(fp)
10002300:	10800044 	addi	r2,r2,1
10002304:	e0bffa15 	stw	r2,-24(fp)
10002308:	00001506 	br	10002360 <draw_player+0x4a4>
            } else {
                start_x = p->x;
1000230c:	e0bffd17 	ldw	r2,-12(fp)
10002310:	10800017 	ldw	r2,0(r2)
10002314:	e0bff715 	stw	r2,-36(fp)
                end_x = start_x + 1;
10002318:	e0bff717 	ldw	r2,-36(fp)
1000231c:	10800044 	addi	r2,r2,1
10002320:	e0bff815 	stw	r2,-32(fp)
                start_y = p->y + half_height * p->fire_dist_dy;
10002324:	e0bffd17 	ldw	r2,-12(fp)
10002328:	14000117 	ldw	r16,4(r2)
1000232c:	e0bffd17 	ldw	r2,-12(fp)
10002330:	10800b17 	ldw	r2,44(r2)
10002334:	e17ffc17 	ldw	r5,-16(fp)
10002338:	1009883a 	mov	r4,r2
1000233c:	0004bc80 	call	10004bc8 <__mulsi3>
10002340:	8085883a 	add	r2,r16,r2
10002344:	e0bff915 	stw	r2,-28(fp)
                end_y = p->y + p->fire_dist;
10002348:	e0bffd17 	ldw	r2,-12(fp)
1000234c:	10c00117 	ldw	r3,4(r2)
10002350:	e0bffd17 	ldw	r2,-12(fp)
10002354:	10800917 	ldw	r2,36(r2)
10002358:	1885883a 	add	r2,r3,r2
1000235c:	e0bffa15 	stw	r2,-24(fp)
            }
            draw(start_x, end_x, start_y, end_y, GUN_LINE_OFFSET, 0, 0);
10002360:	d8000215 	stw	zero,8(sp)
10002364:	d8000115 	stw	zero,4(sp)
10002368:	008000f4 	movhi	r2,3
1000236c:	10a1dd44 	addi	r2,r2,-30859
10002370:	d8800015 	stw	r2,0(sp)
10002374:	e1fffa17 	ldw	r7,-24(fp)
10002378:	e1bff917 	ldw	r6,-28(fp)
1000237c:	e17ff817 	ldw	r5,-32(fp)
10002380:	e13ff717 	ldw	r4,-36(fp)
10002384:	00026640 	call	10002664 <draw>
        }
    }
}
10002388:	e6fffe04 	addi	sp,fp,-8
1000238c:	dfc00317 	ldw	ra,12(sp)
10002390:	df000217 	ldw	fp,8(sp)
10002394:	dc400117 	ldw	r17,4(sp)
10002398:	dc000017 	ldw	r16,0(sp)
1000239c:	dec00404 	addi	sp,sp,16
100023a0:	f800283a 	ret

100023a4 <refresh>:

void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {
100023a4:	defff904 	addi	sp,sp,-28
100023a8:	dfc00615 	stw	ra,24(sp)
100023ac:	df000515 	stw	fp,20(sp)
100023b0:	df000504 	addi	fp,sp,20
100023b4:	e13ffc15 	stw	r4,-16(fp)
100023b8:	e17ffd15 	stw	r5,-12(fp)
100023bc:	e1bffe15 	stw	r6,-8(fp)
100023c0:	e1ffff15 	stw	r7,-4(fp)

    static int add_zombie_counter = 0;
    int i, gx, gy, id;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; ++i) {
100023c4:	e03ffb15 	stw	zero,-20(fp)
100023c8:	00001b06 	br	10002438 <refresh+0x94>
        if (zombie[i].enable) {
100023cc:	008400b4 	movhi	r2,4098
100023d0:	10aa0a04 	addi	r2,r2,-22488
100023d4:	e0fffb17 	ldw	r3,-20(fp)
100023d8:	1806917a 	slli	r3,r3,5
100023dc:	10c5883a 	add	r2,r2,r3
100023e0:	10800404 	addi	r2,r2,16
100023e4:	10800017 	ldw	r2,0(r2)
100023e8:	10001026 	beq	r2,zero,1000242c <refresh+0x88>
            if (should_update) update_zombie(&zombie[i]);
100023ec:	e0bffc17 	ldw	r2,-16(fp)
100023f0:	10000726 	beq	r2,zero,10002410 <refresh+0x6c>
100023f4:	e0bffb17 	ldw	r2,-20(fp)
100023f8:	1006917a 	slli	r3,r2,5
100023fc:	008400b4 	movhi	r2,4098
10002400:	10aa0a04 	addi	r2,r2,-22488
10002404:	1885883a 	add	r2,r3,r2
10002408:	1009883a 	mov	r4,r2
1000240c:	00008d40 	call	100008d4 <update_zombie>
            draw_zombie(&zombie[i]);
10002410:	e0bffb17 	ldw	r2,-20(fp)
10002414:	1006917a 	slli	r3,r2,5
10002418:	008400b4 	movhi	r2,4098
1000241c:	10aa0a04 	addi	r2,r2,-22488
10002420:	1885883a 	add	r2,r3,r2
10002424:	1009883a 	mov	r4,r2
10002428:	00019700 	call	10001970 <draw_zombie>
void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {

    static int add_zombie_counter = 0;
    int i, gx, gy, id;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; ++i) {
1000242c:	e0bffb17 	ldw	r2,-20(fp)
10002430:	10800044 	addi	r2,r2,1
10002434:	e0bffb15 	stw	r2,-20(fp)
10002438:	e0bffb17 	ldw	r2,-20(fp)
1000243c:	10800290 	cmplti	r2,r2,10
10002440:	103fe21e 	bne	r2,zero,100023cc <__alt_data_end+0xf80023cc>
        if (zombie[i].enable) {
            if (should_update) update_zombie(&zombie[i]);
            draw_zombie(&zombie[i]);
        }
    }
    if (player_1.enable) {
10002444:	008400b4 	movhi	r2,4098
10002448:	10aa5a04 	addi	r2,r2,-22168
1000244c:	10800417 	ldw	r2,16(r2)
10002450:	10000726 	beq	r2,zero,10002470 <refresh+0xcc>
        if (should_update) update_player(&player_1, direction_1, attack_1);
10002454:	e0bffc17 	ldw	r2,-16(fp)
10002458:	10000526 	beq	r2,zero,10002470 <refresh+0xcc>
1000245c:	e1bfff17 	ldw	r6,-4(fp)
10002460:	e17ffd17 	ldw	r5,-12(fp)
10002464:	010400b4 	movhi	r4,4098
10002468:	212a5a04 	addi	r4,r4,-22168
1000246c:	00010ac0 	call	100010ac <update_player>
    }
    if (player_1.enable) {
10002470:	008400b4 	movhi	r2,4098
10002474:	10aa5a04 	addi	r2,r2,-22168
10002478:	10800417 	ldw	r2,16(r2)
1000247c:	10000326 	beq	r2,zero,1000248c <refresh+0xe8>
        draw_player(&player_1);
10002480:	010400b4 	movhi	r4,4098
10002484:	212a5a04 	addi	r4,r4,-22168
10002488:	0001ebc0 	call	10001ebc <draw_player>
    }
    if (player_2.enable) {
1000248c:	008400b4 	movhi	r2,4098
10002490:	10aa6604 	addi	r2,r2,-22120
10002494:	10800417 	ldw	r2,16(r2)
10002498:	10000726 	beq	r2,zero,100024b8 <refresh+0x114>
        if (should_update) update_player(&player_2, direction_2, attack_2);
1000249c:	e0bffc17 	ldw	r2,-16(fp)
100024a0:	10000526 	beq	r2,zero,100024b8 <refresh+0x114>
100024a4:	e1800217 	ldw	r6,8(fp)
100024a8:	e17ffe17 	ldw	r5,-8(fp)
100024ac:	010400b4 	movhi	r4,4098
100024b0:	212a6604 	addi	r4,r4,-22120
100024b4:	00010ac0 	call	100010ac <update_player>
    }
    if (player_2.enable) {
100024b8:	008400b4 	movhi	r2,4098
100024bc:	10aa6604 	addi	r2,r2,-22120
100024c0:	10800417 	ldw	r2,16(r2)
100024c4:	10000326 	beq	r2,zero,100024d4 <refresh+0x130>
        draw_player(&player_2);
100024c8:	010400b4 	movhi	r4,4098
100024cc:	212a6604 	addi	r4,r4,-22120
100024d0:	0001ebc0 	call	10001ebc <draw_player>
    //             }
    //         }
    //     }
    // }

    if (should_update) {
100024d4:	e0bffc17 	ldw	r2,-16(fp)
100024d8:	10004b26 	beq	r2,zero,10002608 <refresh+0x264>
        add_zombie_counter++;
100024dc:	d0aa8317 	ldw	r2,-22004(gp)
100024e0:	10800044 	addi	r2,r2,1
100024e4:	d0aa8315 	stw	r2,-22004(gp)
        if (add_zombie_counter >= ADD_ZOMBIE_INTERVAL) {
100024e8:	d0aa8317 	ldw	r2,-22004(gp)
100024ec:	10800c90 	cmplti	r2,r2,50
100024f0:	1000301e 	bne	r2,zero,100025b4 <refresh+0x210>
            if ((zombie_appear_counter < MAX_TOTAL_ZOMBIES) && (cur_zombie_counter < MAX_ZOMBIES_ON_SCREEN)) {
100024f4:	d0aa8117 	ldw	r2,-22012(gp)
100024f8:	10801908 	cmpgei	r2,r2,100
100024fc:	10002c1e 	bne	r2,zero,100025b0 <refresh+0x20c>
10002500:	d0aa8217 	ldw	r2,-22008(gp)
10002504:	10800288 	cmpgei	r2,r2,10
10002508:	1000291e 	bne	r2,zero,100025b0 <refresh+0x20c>
                for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
1000250c:	e03ffb15 	stw	zero,-20(fp)
10002510:	00002206 	br	1000259c <refresh+0x1f8>
                    if (zombie[i].enable == 0) {
10002514:	008400b4 	movhi	r2,4098
10002518:	10aa0a04 	addi	r2,r2,-22488
1000251c:	e0fffb17 	ldw	r3,-20(fp)
10002520:	1806917a 	slli	r3,r3,5
10002524:	10c5883a 	add	r2,r2,r3
10002528:	10800404 	addi	r2,r2,16
1000252c:	10800017 	ldw	r2,0(r2)
10002530:	1000171e 	bne	r2,zero,10002590 <refresh+0x1ec>
                        zombie[i].blood = 100;
10002534:	008400b4 	movhi	r2,4098
10002538:	10aa0a04 	addi	r2,r2,-22488
1000253c:	e0fffb17 	ldw	r3,-20(fp)
10002540:	1806917a 	slli	r3,r3,5
10002544:	10c5883a 	add	r2,r2,r3
10002548:	10800304 	addi	r2,r2,12
1000254c:	00c01904 	movi	r3,100
10002550:	10c00015 	stw	r3,0(r2)
                        if (try_add_zombie(&zombie[i]) == 0) {
10002554:	e0bffb17 	ldw	r2,-20(fp)
10002558:	1006917a 	slli	r3,r2,5
1000255c:	008400b4 	movhi	r2,4098
10002560:	10aa0a04 	addi	r2,r2,-22488
10002564:	1885883a 	add	r2,r3,r2
10002568:	1009883a 	mov	r4,r2
1000256c:	00018680 	call	10001868 <try_add_zombie>
10002570:	10000e1e 	bne	r2,zero,100025ac <refresh+0x208>
                            cur_zombie_counter++;
10002574:	d0aa8217 	ldw	r2,-22008(gp)
10002578:	10800044 	addi	r2,r2,1
1000257c:	d0aa8215 	stw	r2,-22008(gp)
                            zombie_appear_counter++;
10002580:	d0aa8117 	ldw	r2,-22012(gp)
10002584:	10800044 	addi	r2,r2,1
10002588:	d0aa8115 	stw	r2,-22012(gp)
                        }
                        break;
1000258c:	00000706 	br	100025ac <refresh+0x208>

    if (should_update) {
        add_zombie_counter++;
        if (add_zombie_counter >= ADD_ZOMBIE_INTERVAL) {
            if ((zombie_appear_counter < MAX_TOTAL_ZOMBIES) && (cur_zombie_counter < MAX_ZOMBIES_ON_SCREEN)) {
                for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
10002590:	e0bffb17 	ldw	r2,-20(fp)
10002594:	10800044 	addi	r2,r2,1
10002598:	e0bffb15 	stw	r2,-20(fp)
1000259c:	e0bffb17 	ldw	r2,-20(fp)
100025a0:	10800290 	cmplti	r2,r2,10
100025a4:	103fdb1e 	bne	r2,zero,10002514 <__alt_data_end+0xf8002514>
100025a8:	00000106 	br	100025b0 <refresh+0x20c>
                        zombie[i].blood = 100;
                        if (try_add_zombie(&zombie[i]) == 0) {
                            cur_zombie_counter++;
                            zombie_appear_counter++;
                        }
                        break;
100025ac:	0001883a 	nop
                    }
                }
            }
            add_zombie_counter = 0;
100025b0:	d02a8315 	stw	zero,-22004(gp)
        }

        if ((player_1.enable == 0) && (player_2.enable == 0)) {
100025b4:	008400b4 	movhi	r2,4098
100025b8:	10aa5a04 	addi	r2,r2,-22168
100025bc:	10800417 	ldw	r2,16(r2)
100025c0:	1000081e 	bne	r2,zero,100025e4 <refresh+0x240>
100025c4:	008400b4 	movhi	r2,4098
100025c8:	10aa6604 	addi	r2,r2,-22120
100025cc:	10800417 	ldw	r2,16(r2)
100025d0:	1000041e 	bne	r2,zero,100025e4 <refresh+0x240>
            printf("You are all dead, please restart the game!");
100025d4:	01040074 	movhi	r4,4097
100025d8:	21113e04 	addi	r4,r4,17656
100025dc:	0004c200 	call	10004c20 <printf>
            while (1) {}
100025e0:	003fff06 	br	100025e0 <__alt_data_end+0xf80025e0>
        }
        if ((cur_zombie_counter == 0) && (zombie_appear_counter == MAX_TOTAL_ZOMBIES)) {
100025e4:	d0aa8217 	ldw	r2,-22008(gp)
100025e8:	1000071e 	bne	r2,zero,10002608 <refresh+0x264>
100025ec:	d0aa8117 	ldw	r2,-22012(gp)
100025f0:	10801918 	cmpnei	r2,r2,100
100025f4:	1000041e 	bne	r2,zero,10002608 <refresh+0x264>
            printf("Congratulations, you have killed all the zombies!");
100025f8:	01040074 	movhi	r4,4097
100025fc:	21114904 	addi	r4,r4,17700
10002600:	0004c200 	call	10004c20 <printf>
            while (1) {}
10002604:	003fff06 	br	10002604 <__alt_data_end+0xf8002604>
        }
    }
}
10002608:	0001883a 	nop
1000260c:	e037883a 	mov	sp,fp
10002610:	dfc00117 	ldw	ra,4(sp)
10002614:	df000017 	ldw	fp,0(sp)
10002618:	dec00204 	addi	sp,sp,8
1000261c:	f800283a 	ret

10002620 <graphic_engine_reset>:

#include "system.h"

volatile unsigned int *ENGINE_REGS = (unsigned int *) COPY_ENGINE_CORE_BASE;

void graphic_engine_reset() {
10002620:	deffff04 	addi	sp,sp,-4
10002624:	df000015 	stw	fp,0(sp)
10002628:	d839883a 	mov	fp,sp
	ENGINE_REGS[7] = 0;
1000262c:	d0a00017 	ldw	r2,-32768(gp)
10002630:	10800704 	addi	r2,r2,28
10002634:	10000015 	stw	zero,0(r2)
	while ((ENGINE_REGS[15] & 0x1) != 0) {}  // wait for reset
10002638:	0001883a 	nop
1000263c:	d0a00017 	ldw	r2,-32768(gp)
10002640:	10800f04 	addi	r2,r2,60
10002644:	10800017 	ldw	r2,0(r2)
10002648:	1080004c 	andi	r2,r2,1
1000264c:	103ffb1e 	bne	r2,zero,1000263c <__alt_data_end+0xf800263c>
}
10002650:	0001883a 	nop
10002654:	e037883a 	mov	sp,fp
10002658:	df000017 	ldw	fp,0(sp)
1000265c:	dec00104 	addi	sp,sp,4
10002660:	f800283a 	ret

10002664 <draw>:

void draw(int start_x, int end_x, int start_y, int end_y, int src_offset, int palette, int flip_x) {
10002664:	defffb04 	addi	sp,sp,-20
10002668:	df000415 	stw	fp,16(sp)
1000266c:	df000404 	addi	fp,sp,16
10002670:	e13ffc15 	stw	r4,-16(fp)
10002674:	e17ffd15 	stw	r5,-12(fp)
10002678:	e1bffe15 	stw	r6,-8(fp)
1000267c:	e1ffff15 	stw	r7,-4(fp)

    // Wait for the copy engine to finish last task
//	printf("Start waiting for graphic engine...\n");
	if (ENGINE_REGS[7] == 1) {
10002680:	d0a00017 	ldw	r2,-32768(gp)
10002684:	10800704 	addi	r2,r2,28
10002688:	10800017 	ldw	r2,0(r2)
1000268c:	10800058 	cmpnei	r2,r2,1
10002690:	1000121e 	bne	r2,zero,100026dc <draw+0x78>
		while ((ENGINE_REGS[15] & 0x1) == 0) {}
10002694:	0001883a 	nop
10002698:	d0a00017 	ldw	r2,-32768(gp)
1000269c:	10800f04 	addi	r2,r2,60
100026a0:	10800017 	ldw	r2,0(r2)
100026a4:	1080004c 	andi	r2,r2,1
100026a8:	103ffb26 	beq	r2,zero,10002698 <__alt_data_end+0xf8002698>

		// Clear Execute
		ENGINE_REGS[7] = 0;
100026ac:	d0a00017 	ldw	r2,-32768(gp)
100026b0:	10800704 	addi	r2,r2,28
100026b4:	10000015 	stw	zero,0(r2)
        ENGINE_REGS[7] = 0;
100026b8:	d0a00017 	ldw	r2,-32768(gp)
100026bc:	10800704 	addi	r2,r2,28
100026c0:	10000015 	stw	zero,0(r2)
		while ((ENGINE_REGS[15] & 0x1) != 0) {}  // wait for reset
100026c4:	0001883a 	nop
100026c8:	d0a00017 	ldw	r2,-32768(gp)
100026cc:	10800f04 	addi	r2,r2,60
100026d0:	10800017 	ldw	r2,0(r2)
100026d4:	1080004c 	andi	r2,r2,1
100026d8:	103ffb1e 	bne	r2,zero,100026c8 <__alt_data_end+0xf80026c8>
	}
//    printf("Graphic engine done!\n");

    ENGINE_REGS[0] = start_x;
100026dc:	d0a00017 	ldw	r2,-32768(gp)
100026e0:	e0fffc17 	ldw	r3,-16(fp)
100026e4:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[1] = end_x;
100026e8:	d0a00017 	ldw	r2,-32768(gp)
100026ec:	10800104 	addi	r2,r2,4
100026f0:	e0fffd17 	ldw	r3,-12(fp)
100026f4:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[2] = start_y;
100026f8:	d0a00017 	ldw	r2,-32768(gp)
100026fc:	10800204 	addi	r2,r2,8
10002700:	e0fffe17 	ldw	r3,-8(fp)
10002704:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[3] = end_y;
10002708:	d0a00017 	ldw	r2,-32768(gp)
1000270c:	10800304 	addi	r2,r2,12
10002710:	e0ffff17 	ldw	r3,-4(fp)
10002714:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[4] = src_offset;
10002718:	d0a00017 	ldw	r2,-32768(gp)
1000271c:	10800404 	addi	r2,r2,16
10002720:	e0c00117 	ldw	r3,4(fp)
10002724:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[5] = palette;
10002728:	d0a00017 	ldw	r2,-32768(gp)
1000272c:	10800504 	addi	r2,r2,20
10002730:	e0c00217 	ldw	r3,8(fp)
10002734:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[6] = flip_x;
10002738:	d0a00017 	ldw	r2,-32768(gp)
1000273c:	10800604 	addi	r2,r2,24
10002740:	e0c00317 	ldw	r3,12(fp)
10002744:	10c00015 	stw	r3,0(r2)

    // Execute
    ENGINE_REGS[7] = 1;
10002748:	d0a00017 	ldw	r2,-32768(gp)
1000274c:	10800704 	addi	r2,r2,28
10002750:	00c00044 	movi	r3,1
10002754:	10c00015 	stw	r3,0(r2)

    // Let the engine run and C program can do other things
}
10002758:	0001883a 	nop
1000275c:	e037883a 	mov	sp,fp
10002760:	df000017 	ldw	fp,0(sp)
10002764:	dec00104 	addi	sp,sp,4
10002768:	f800283a 	ret

1000276c <wait_for_next_frame>:

void wait_for_next_frame() {
1000276c:	defffe04 	addi	sp,sp,-8
10002770:	dfc00115 	stw	ra,4(sp)
10002774:	df000015 	stw	fp,0(sp)
10002778:	d839883a 	mov	fp,sp

    static unsigned int current_frame = 0;

    if (current_frame != ENGINE_REGS[14]) {
1000277c:	d0a00017 	ldw	r2,-32768(gp)
10002780:	10800e04 	addi	r2,r2,56
10002784:	10c00017 	ldw	r3,0(r2)
10002788:	d0aa8417 	ldw	r2,-22000(gp)
1000278c:	18800426 	beq	r3,r2,100027a0 <wait_for_next_frame+0x34>
        printf("SKIPPED FRAME!\n");
10002790:	01040074 	movhi	r4,4097
10002794:	21115604 	addi	r4,r4,17752
10002798:	0004d1c0 	call	10004d1c <puts>
        return;
1000279c:	00000906 	br	100027c4 <wait_for_next_frame+0x58>
    }
    // Wait for switch to next frame
    while (current_frame == ENGINE_REGS[14]) {}
100027a0:	0001883a 	nop
100027a4:	d0a00017 	ldw	r2,-32768(gp)
100027a8:	10800e04 	addi	r2,r2,56
100027ac:	10c00017 	ldw	r3,0(r2)
100027b0:	d0aa8417 	ldw	r2,-22000(gp)
100027b4:	18bffb26 	beq	r3,r2,100027a4 <__alt_data_end+0xf80027a4>
    current_frame = ENGINE_REGS[14];
100027b8:	d0a00017 	ldw	r2,-32768(gp)
100027bc:	10800e17 	ldw	r2,56(r2)
100027c0:	d0aa8415 	stw	r2,-22000(gp)
}
100027c4:	e037883a 	mov	sp,fp
100027c8:	dfc00117 	ldw	ra,4(sp)
100027cc:	df000017 	ldw	fp,0(sp)
100027d0:	dec00204 	addi	sp,sp,8
100027d4:	f800283a 	ret

100027d8 <io_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void io_init(void)
{
100027d8:	deffff04 	addi	sp,sp,-4
100027dc:	df000015 	stw	fp,0(sp)
100027e0:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
100027e4:	00802004 	movi	r2,128
100027e8:	00c00044 	movi	r3,1
100027ec:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100027f0:	00802404 	movi	r2,144
100027f4:	00c00044 	movi	r3,1
100027f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
100027fc:	00802c04 	movi	r2,176
10002800:	00c00044 	movi	r3,1
10002804:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10002808:	00802804 	movi	r2,160
1000280c:	00c00044 	movi	r3,1
10002810:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10002814:	00803404 	movi	r2,208
10002818:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000281c:	00803004 	movi	r2,192
10002820:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
10002824:	00802404 	movi	r2,144
10002828:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
1000282c:	00802004 	movi	r2,128
10002830:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
10002834:	00802004 	movi	r2,128
10002838:	00c00044 	movi	r3,1
1000283c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10002840:	00802404 	movi	r2,144
10002844:	00c00044 	movi	r3,1
10002848:	10c00005 	stb	r3,0(r2)
}
1000284c:	0001883a 	nop
10002850:	e037883a 	mov	sp,fp
10002854:	df000017 	ldw	fp,0(sp)
10002858:	dec00104 	addi	sp,sp,4
1000285c:	f800283a 	ret

10002860 <io_write>:
 *
 * @note     None
 *
 ******************************************************************************/
void io_write(alt_u8 Address, alt_u16 Data)
{
10002860:	defffd04 	addi	sp,sp,-12
10002864:	df000215 	stw	fp,8(sp)
10002868:	df000204 	addi	fp,sp,8
1000286c:	2007883a 	mov	r3,r4
10002870:	2805883a 	mov	r2,r5
10002874:	e0fffe05 	stb	r3,-8(fp)
10002878:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
1000287c:	00803404 	movi	r2,208
10002880:	e0fffe03 	ldbu	r3,-8(fp)
10002884:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
10002888:	00802404 	movi	r2,144
1000288c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10002890:	00802804 	movi	r2,160
10002894:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10002898:	00803004 	movi	r2,192
1000289c:	e0ffff0b 	ldhu	r3,-4(fp)
100028a0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
100028a4:	00802804 	movi	r2,160
100028a8:	00c00044 	movi	r3,1
100028ac:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100028b0:	00802404 	movi	r2,144
100028b4:	00c00044 	movi	r3,1
100028b8:	10c00005 	stb	r3,0(r2)
}
100028bc:	0001883a 	nop
100028c0:	e037883a 	mov	sp,fp
100028c4:	df000017 	ldw	fp,0(sp)
100028c8:	dec00104 	addi	sp,sp,4
100028cc:	f800283a 	ret

100028d0 <io_read>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 io_read(alt_u8 Address)
{
100028d0:	defffd04 	addi	sp,sp,-12
100028d4:	df000215 	stw	fp,8(sp)
100028d8:	df000204 	addi	fp,sp,8
100028dc:	2005883a 	mov	r2,r4
100028e0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
100028e4:	00803404 	movi	r2,208
100028e8:	e0ffff03 	ldbu	r3,-4(fp)
100028ec:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
100028f0:	00802404 	movi	r2,144
100028f4:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100028f8:	00802c04 	movi	r2,176
100028fc:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10002900:	00803004 	movi	r2,192
10002904:	10800017 	ldw	r2,0(r2)
10002908:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1; // Set the read signal back to 1 after reading
1000290c:	00802c04 	movi	r2,176
10002910:	00c00044 	movi	r3,1
10002914:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	*otg_hpi_cs = 1;
10002918:	00802404 	movi	r2,144
1000291c:	00c00044 	movi	r3,1
10002920:	10c00005 	stb	r3,0(r2)
	return temp;
10002924:	e0bffe0b 	ldhu	r2,-8(fp)
}
10002928:	e037883a 	mov	sp,fp
1000292c:	df000017 	ldw	fp,0(sp)
10002930:	dec00104 	addi	sp,sp,4
10002934:	f800283a 	ret

10002938 <keyboard_init>:
alt_u8 data_size;
alt_u8 hot_plug_count;
alt_u16 code;
alt_u8 fetch_toggle = 0;

void keyboard_init() {
10002938:	defffe04 	addi	sp,sp,-8
1000293c:	dfc00115 	stw	ra,4(sp)
10002940:	df000015 	stw	fp,0(sp)
10002944:	d839883a 	mov	fp,sp
    io_init();
10002948:	00027d80 	call	100027d8 <io_init>
        // usb_write(0xc008,0x000f);
        // usb_read(0xc008);
        usleep(10*10000);
    } */

    printf("USB keyboard setup...\n\n");
1000294c:	01040074 	movhi	r4,4097
10002950:	21115a04 	addi	r4,r4,17768
10002954:	0004d1c0 	call	10004d1c <puts>

    // ---------------------------------------- SIE1 initial ---------------------------------------------------//
    USB_HOT_PLUG:
    usb_soft_reset();
10002958:	00037300 	call	10003730 <usb_soft_reset>

    // STEP 1a:
    usb_write(HPI_SIE1_MSG_ADR, 0);
1000295c:	000b883a 	mov	r5,zero
10002960:	01005104 	movi	r4,324
10002964:	00036940 	call	10003694 <usb_write>
    usb_write(HOST1_STAT_REG, 0xFFFF);
10002968:	017fffd4 	movui	r5,65535
1000296c:	01302414 	movui	r4,49296
10002970:	00036940 	call	10003694 <usb_write>

    /* Set HUSB_pEOT time */
    usb_write(HUSB_pEOT, 600);  // adjust the according to your USB device speed
10002974:	01409604 	movi	r5,600
10002978:	01006d04 	movi	r4,436
1000297c:	00036940 	call	10003694 <usb_write>

    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;  // | SOFEOP1_TO_HPI_EN;
10002980:	00811004 	movi	r2,1088
10002984:	d0aa870d 	sth	r2,-21988(gp)
    usb_write(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10002988:	d0aa870b 	ldhu	r2,-21988(gp)
1000298c:	10bfffcc 	andi	r2,r2,65535
10002990:	100b883a 	mov	r5,r2
10002994:	01005084 	movi	r4,322
10002998:	00036940 	call	10003694 <usb_write>

    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN;
1000299c:	00808404 	movi	r2,528
100029a0:	d0aa880d 	sth	r2,-21984(gp)
    usb_write(HOST1_IRQ_EN_REG, intStat);
100029a4:	d0aa880b 	ldhu	r2,-21984(gp)
100029a8:	10bfffcc 	andi	r2,r2,65535
100029ac:	100b883a 	mov	r5,r2
100029b0:	01302314 	movui	r4,49292
100029b4:	00036940 	call	10003694 <usb_write>
    // STEP 1a end

    // STEP 1b begin
    usb_write(COMM_R0, 0x0000);  // reset time
100029b8:	000b883a 	mov	r5,zero
100029bc:	01007104 	movi	r4,452
100029c0:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
100029c4:	000b883a 	mov	r5,zero
100029c8:	01007184 	movi	r4,454
100029cc:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
100029d0:	000b883a 	mov	r5,zero
100029d4:	01007204 	movi	r4,456
100029d8:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
100029dc:	000b883a 	mov	r5,zero
100029e0:	01007284 	movi	r4,458
100029e4:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
100029e8:	000b883a 	mov	r5,zero
100029ec:	01007304 	movi	r4,460
100029f0:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
100029f4:	000b883a 	mov	r5,zero
100029f8:	01007384 	movi	r4,462
100029fc:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
10002a00:	000b883a 	mov	r5,zero
10002a04:	01007404 	movi	r4,464
10002a08:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
10002a0c:	000b883a 	mov	r5,zero
10002a10:	01007484 	movi	r4,466
10002a14:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
10002a18:	000b883a 	mov	r5,zero
10002a1c:	01007504 	movi	r4,468
10002a20:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
10002a24:	000b883a 	mov	r5,zero
10002a28:	01007584 	movi	r4,470
10002a2c:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
10002a30:	000b883a 	mov	r5,zero
10002a34:	01007604 	movi	r4,472
10002a38:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
10002a3c:	000b883a 	mov	r5,zero
10002a40:	01007684 	movi	r4,474
10002a44:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
10002a48:	000b883a 	mov	r5,zero
10002a4c:	01007704 	movi	r4,476
10002a50:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
10002a54:	000b883a 	mov	r5,zero
10002a58:	01007784 	movi	r4,478
10002a5c:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT);  // HUSB_SIE1_INIT_INT
10002a60:	01401c84 	movi	r5,114
10002a64:	01007084 	movi	r4,450
10002a68:	00036940 	call	10003694 <usb_write>
    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10002a6c:	01738054 	movui	r5,52737
10002a70:	01000044 	movi	r4,1
10002a74:	00028600 	call	10002860 <io_write>

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
10002a78:	0001883a 	nop
10002a7c:	010000c4 	movi	r4,3
10002a80:	00028d00 	call	100028d0 <io_read>
10002a84:	10bfffcc 	andi	r2,r2,65535
10002a88:	103ffc26 	beq	r2,zero,10002a7c <__alt_data_end+0xf8002a7c>
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002a8c:	00000806 	br	10002ab0 <keyboard_init+0x178>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
10002a90:	01000044 	movi	r4,1
10002a94:	00028d00 	call	100028d0 <io_read>
10002a98:	10bfffcc 	andi	r2,r2,65535
10002a9c:	100b883a 	mov	r5,r2
10002aa0:	01040074 	movhi	r4,4097
10002aa4:	21116004 	addi	r4,r4,17792
10002aa8:	0004c200 	call	10004c20 <printf>
        goto USB_HOT_PLUG;
10002aac:	003faa06 	br	10002958 <__alt_data_end+0xf8002958>
    usb_write(COMM_R13, 0x0000);  // r1
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT);  // HUSB_SIE1_INIT_INT
    io_write(HPI_MAILBOX, COMM_EXEC_INT);

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002ab0:	01000044 	movi	r4,1
10002ab4:	00028d00 	call	100028d0 <io_read>
10002ab8:	10bfffcc 	andi	r2,r2,65535
10002abc:	1083fb58 	cmpnei	r2,r2,4077
10002ac0:	103ff31e 	bne	r2,zero,10002a90 <__alt_data_end+0xf8002a90>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
        goto USB_HOT_PLUG;
    }
    // STEP 1b end

    printf("STEP 1 Complete");
10002ac4:	01040074 	movhi	r4,4097
10002ac8:	21116904 	addi	r4,r4,17828
10002acc:	0004c200 	call	10004c20 <printf>
    // STEP 2 begin
    usb_write(COMM_INT_NUM, HUSB_RESET_INT);  // husb reset
10002ad0:	01401d04 	movi	r5,116
10002ad4:	01007084 	movi	r4,450
10002ad8:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R0, 0x003c);  // reset time
10002adc:	01400f04 	movi	r5,60
10002ae0:	01007104 	movi	r4,452
10002ae4:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
10002ae8:	000b883a 	mov	r5,zero
10002aec:	01007184 	movi	r4,454
10002af0:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
10002af4:	000b883a 	mov	r5,zero
10002af8:	01007204 	movi	r4,456
10002afc:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
10002b00:	000b883a 	mov	r5,zero
10002b04:	01007284 	movi	r4,458
10002b08:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
10002b0c:	000b883a 	mov	r5,zero
10002b10:	01007304 	movi	r4,460
10002b14:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
10002b18:	000b883a 	mov	r5,zero
10002b1c:	01007384 	movi	r4,462
10002b20:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
10002b24:	000b883a 	mov	r5,zero
10002b28:	01007404 	movi	r4,464
10002b2c:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
10002b30:	000b883a 	mov	r5,zero
10002b34:	01007484 	movi	r4,466
10002b38:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
10002b3c:	000b883a 	mov	r5,zero
10002b40:	01007504 	movi	r4,468
10002b44:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
10002b48:	000b883a 	mov	r5,zero
10002b4c:	01007584 	movi	r4,470
10002b50:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
10002b54:	000b883a 	mov	r5,zero
10002b58:	01007604 	movi	r4,472
10002b5c:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
10002b60:	000b883a 	mov	r5,zero
10002b64:	01007684 	movi	r4,474
10002b68:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
10002b6c:	000b883a 	mov	r5,zero
10002b70:	01007704 	movi	r4,476
10002b74:	00036940 	call	10003694 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
10002b78:	000b883a 	mov	r5,zero
10002b7c:	01007784 	movi	r4,478
10002b80:	00036940 	call	10003694 <usb_write>

    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10002b84:	01738054 	movui	r5,52737
10002b88:	01000044 	movi	r4,1
10002b8c:	00028600 	call	10002860 <io_write>

    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002b90:	0001883a 	nop
10002b94:	01000044 	movi	r4,1
10002b98:	00028d00 	call	100028d0 <io_read>
10002b9c:	10bfffcc 	andi	r2,r2,65535
10002ba0:	1083fb58 	cmpnei	r2,r2,4077
10002ba4:	10000826 	beq	r2,zero,10002bc8 <keyboard_init+0x290>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
10002ba8:	01000044 	movi	r4,1
10002bac:	00028d00 	call	100028d0 <io_read>
10002bb0:	10bfffcc 	andi	r2,r2,65535
10002bb4:	100b883a 	mov	r5,r2
10002bb8:	01040074 	movhi	r4,4097
10002bbc:	21116004 	addi	r4,r4,17792
10002bc0:	0004c200 	call	10004c20 <printf>
        goto USB_HOT_PLUG;
10002bc4:	003f6406 	br	10002958 <__alt_data_end+0xf8002958>
    }
    // STEP 2 end

    ctl_reg = USB1_CTL_REG;
10002bc8:	00b02284 	movi	r2,-16246
10002bcc:	d0aa850d 	sth	r2,-21996(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
10002bd0:	008c0004 	movi	r2,12288
10002bd4:	d0aa858d 	sth	r2,-21994(gp)
    fs_device = A_DP_STAT;
10002bd8:	00880004 	movi	r2,8192
10002bdc:	d0aa860d 	sth	r2,-21992(gp)
    usb_ctl_val = usb_read(ctl_reg);
10002be0:	d0aa850b 	ldhu	r2,-21996(gp)
10002be4:	10bfffcc 	andi	r2,r2,65535
10002be8:	1009883a 	mov	r4,r2
10002bec:	00036ec0 	call	100036ec <usb_read>
10002bf0:	d0aa870d 	sth	r2,-21988(gp)

    if (!(usb_ctl_val & no_device)) {
10002bf4:	d0ea870b 	ldhu	r3,-21988(gp)
10002bf8:	d0aa858b 	ldhu	r2,-21994(gp)
10002bfc:	1884703a 	and	r2,r3,r2
10002c00:	10bfffcc 	andi	r2,r2,65535
10002c04:	1000361e 	bne	r2,zero,10002ce0 <keyboard_init+0x3a8>
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
10002c08:	d02a8885 	stb	zero,-21982(gp)
10002c0c:	00000f06 	br	10002c4c <keyboard_init+0x314>
            usleep(5 * 1000);
10002c10:	0104e204 	movi	r4,5000
10002c14:	00123600 	call	10012360 <usleep>
            usb_ctl_val = usb_read(ctl_reg);
10002c18:	d0aa850b 	ldhu	r2,-21996(gp)
10002c1c:	10bfffcc 	andi	r2,r2,65535
10002c20:	1009883a 	mov	r4,r2
10002c24:	00036ec0 	call	100036ec <usb_read>
10002c28:	d0aa870d 	sth	r2,-21988(gp)
            if (usb_ctl_val & no_device) break;
10002c2c:	d0ea870b 	ldhu	r3,-21988(gp)
10002c30:	d0aa858b 	ldhu	r2,-21994(gp)
10002c34:	1884703a 	and	r2,r3,r2
10002c38:	10bfffcc 	andi	r2,r2,65535
10002c3c:	1000081e 	bne	r2,zero,10002c60 <keyboard_init+0x328>
    no_device = (A_DP_STAT | A_DM_STAT);
    fs_device = A_DP_STAT;
    usb_ctl_val = usb_read(ctl_reg);

    if (!(usb_ctl_val & no_device)) {
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
10002c40:	d0aa8883 	ldbu	r2,-21982(gp)
10002c44:	10800044 	addi	r2,r2,1
10002c48:	d0aa8885 	stb	r2,-21982(gp)
10002c4c:	d0aa8883 	ldbu	r2,-21982(gp)
10002c50:	10803fcc 	andi	r2,r2,255
10002c54:	10800170 	cmpltui	r2,r2,5
10002c58:	103fed1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10002c5c:	00000106 	br	10002c64 <keyboard_init+0x32c>
            usleep(5 * 1000);
            usb_ctl_val = usb_read(ctl_reg);
            if (usb_ctl_val & no_device) break;
10002c60:	0001883a 	nop
        }
        if (!(usb_ctl_val & no_device)) {
10002c64:	d0ea870b 	ldhu	r3,-21988(gp)
10002c68:	d0aa858b 	ldhu	r2,-21994(gp)
10002c6c:	1884703a 	and	r2,r3,r2
10002c70:	10bfffcc 	andi	r2,r2,65535
10002c74:	1000261e 	bne	r2,zero,10002d10 <keyboard_init+0x3d8>
            printf("\n[INFO]: no device is present in SIE1!\n");
10002c78:	01040074 	movhi	r4,4097
10002c7c:	21116d04 	addi	r4,r4,17844
10002c80:	0004d1c0 	call	10004d1c <puts>
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10002c84:	01040074 	movhi	r4,4097
10002c88:	21117704 	addi	r4,r4,17884
10002c8c:	0004d1c0 	call	10004d1c <puts>
            while (!(usb_ctl_val & no_device)) {
10002c90:	00000d06 	br	10002cc8 <keyboard_init+0x390>
                usb_ctl_val = usb_read(ctl_reg);
10002c94:	d0aa850b 	ldhu	r2,-21996(gp)
10002c98:	10bfffcc 	andi	r2,r2,65535
10002c9c:	1009883a 	mov	r4,r2
10002ca0:	00036ec0 	call	100036ec <usb_read>
10002ca4:	d0aa870d 	sth	r2,-21988(gp)
                if (usb_ctl_val & no_device)
10002ca8:	d0ea870b 	ldhu	r3,-21988(gp)
10002cac:	d0aa858b 	ldhu	r2,-21994(gp)
10002cb0:	1884703a 	and	r2,r3,r2
10002cb4:	10bfffcc 	andi	r2,r2,65535
10002cb8:	10000126 	beq	r2,zero,10002cc0 <keyboard_init+0x388>
                    goto USB_HOT_PLUG;
10002cbc:	003f2606 	br	10002958 <__alt_data_end+0xf8002958>

                usleep(2000);
10002cc0:	0101f404 	movi	r4,2000
10002cc4:	00123600 	call	10012360 <usleep>
            if (usb_ctl_val & no_device) break;
        }
        if (!(usb_ctl_val & no_device)) {
            printf("\n[INFO]: no device is present in SIE1!\n");
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
            while (!(usb_ctl_val & no_device)) {
10002cc8:	d0ea870b 	ldhu	r3,-21988(gp)
10002ccc:	d0aa858b 	ldhu	r2,-21994(gp)
10002cd0:	1884703a 	and	r2,r3,r2
10002cd4:	10bfffcc 	andi	r2,r2,65535
10002cd8:	103fee26 	beq	r2,zero,10002c94 <__alt_data_end+0xf8002c94>
10002cdc:	00000c06 	br	10002d10 <keyboard_init+0x3d8>
                usleep(2000);
            }
        }
    } else {
        /* check for low speed or full speed by reading D+ and D- lines */
        if (usb_ctl_val & fs_device) {
10002ce0:	d0ea870b 	ldhu	r3,-21988(gp)
10002ce4:	d0aa860b 	ldhu	r2,-21992(gp)
10002ce8:	1884703a 	and	r2,r3,r2
10002cec:	10bfffcc 	andi	r2,r2,65535
10002cf0:	10000426 	beq	r2,zero,10002d04 <keyboard_init+0x3cc>
            printf("[INFO]: full speed device\n");
10002cf4:	01040074 	movhi	r4,4097
10002cf8:	21118304 	addi	r4,r4,17932
10002cfc:	0004d1c0 	call	10004d1c <puts>
10002d00:	00000306 	br	10002d10 <keyboard_init+0x3d8>
        } else {
            printf("[INFO]: low speed device\n");
10002d04:	01040074 	movhi	r4,4097
10002d08:	21118a04 	addi	r4,r4,17960
10002d0c:	0004d1c0 	call	10004d1c <puts>
        }
    }

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();
10002d10:	00037e40 	call	100037e4 <usb_set_address>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002d14:	00000306 	br	10002d24 <keyboard_init+0x3ec>
    {
        usb_set_address();
10002d18:	00037e40 	call	100037e4 <usb_set_address>
        usleep(10 * 1000);
10002d1c:	0109c404 	movi	r4,10000
10002d20:	00123600 	call	10012360 <usleep>

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002d24:	010000c4 	movi	r4,3
10002d28:	00028d00 	call	100028d0 <io_read>
10002d2c:	10bfffcc 	andi	r2,r2,65535
10002d30:	1080040c 	andi	r2,r2,16
10002d34:	103ff826 	beq	r2,zero,10002d18 <__alt_data_end+0xf8002d18>
    {
        usb_set_address();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002d38:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);  // i
10002d3c:	01414184 	movi	r5,1286
10002d40:	01000084 	movi	r4,2
10002d44:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n", io_read(HPI_DATA));
10002d48:	0009883a 	mov	r4,zero
10002d4c:	00028d00 	call	100028d0 <io_read>
10002d50:	10bfffcc 	andi	r2,r2,65535
10002d54:	100b883a 	mov	r5,r2
10002d58:	01040074 	movhi	r4,4097
10002d5c:	21119104 	addi	r4,r4,17988
10002d60:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);  // n
10002d64:	01414204 	movi	r5,1288
10002d68:	01000084 	movi	r4,2
10002d6c:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002d70:	0009883a 	mov	r4,zero
10002d74:	00028d00 	call	100028d0 <io_read>
10002d78:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n", usb_ctl_val);
10002d7c:	d0aa870b 	ldhu	r2,-21988(gp)
10002d80:	10bfffcc 	andi	r2,r2,65535
10002d84:	100b883a 	mov	r5,r2
10002d88:	01040074 	movhi	r4,4097
10002d8c:	21119c04 	addi	r4,r4,18032
10002d90:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) // retries occurred
10002d94:	0001883a 	nop
10002d98:	d0aa870b 	ldhu	r2,-21988(gp)
10002d9c:	10bfffcc 	andi	r2,r2,65535
10002da0:	108000d8 	cmpnei	r2,r2,3
10002da4:	10000326 	beq	r2,zero,10002db4 <keyboard_init+0x47c>
    {
        usb_ctl_val = usb_get_retry_cnt();
10002da8:	00047080 	call	10004708 <usb_get_retry_cnt>
10002dac:	d0aa870d 	sth	r2,-21988(gp)

        goto USB_HOT_PLUG;
10002db0:	003ee906 	br	10002958 <__alt_data_end+0xf8002958>
    }

    printf("------------[ENUM PROCESS]:set address done!---------------\n");
10002db4:	01040074 	movhi	r4,4097
10002db8:	2111a804 	addi	r4,r4,18080
10002dbc:	0004d1c0 	call	10004d1c <puts>

    // STEP 4 begin
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1
10002dc0:	00038e40 	call	100038e4 <usb_get_device_desc1>

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002dc4:	00000306 	br	10002dd4 <keyboard_init+0x49c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
10002dc8:	00038e40 	call	100038e4 <usb_get_device_desc1>
        usleep(10 * 1000);
10002dcc:	0109c404 	movi	r4,10000
10002dd0:	00123600 	call	10012360 <usleep>
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002dd4:	010000c4 	movi	r4,3
10002dd8:	00028d00 	call	100028d0 <io_read>
10002ddc:	10bfffcc 	andi	r2,r2,65535
10002de0:	1080040c 	andi	r2,r2,16
10002de4:	103ff826 	beq	r2,zero,10002dc8 <__alt_data_end+0xf8002dc8>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002de8:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002dec:	01414184 	movi	r5,1286
10002df0:	01000084 	movi	r4,2
10002df4:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
10002df8:	0009883a 	mov	r4,zero
10002dfc:	00028d00 	call	100028d0 <io_read>
10002e00:	10bfffcc 	andi	r2,r2,65535
10002e04:	100b883a 	mov	r5,r2
10002e08:	01040074 	movhi	r4,4097
10002e0c:	2111b704 	addi	r4,r4,18140
10002e10:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
10002e14:	01414204 	movi	r5,1288
10002e18:	01000084 	movi	r4,2
10002e1c:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002e20:	0009883a 	mov	r4,zero
10002e24:	00028d00 	call	100028d0 <io_read>
10002e28:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10002e2c:	d0aa870b 	ldhu	r2,-21988(gp)
10002e30:	10bfffcc 	andi	r2,r2,65535
10002e34:	100b883a 	mov	r5,r2
10002e38:	01040074 	movhi	r4,4097
10002e3c:	2111c204 	addi	r4,r4,18184
10002e40:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
10002e44:	00000206 	br	10002e50 <keyboard_init+0x518>
        usb_ctl_val = usb_get_retry_cnt();
10002e48:	00047080 	call	10004708 <usb_get_retry_cnt>
10002e4c:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002e50:	d0aa870b 	ldhu	r2,-21988(gp)
10002e54:	10bfffcc 	andi	r2,r2,65535
10002e58:	108000d8 	cmpnei	r2,r2,3
10002e5c:	103ffa1e 	bne	r2,zero,10002e48 <__alt_data_end+0xf8002e48>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10002e60:	01040074 	movhi	r4,4097
10002e64:	2111ce04 	addi	r4,r4,18232
10002e68:	0004d1c0 	call	10004d1c <puts>


    //--------------------------------get device descriptor-2---------------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2
10002e6c:	0003a2c0 	call	10003a2c <usb_get_device_desc2>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002e70:	00000306 	br	10002e80 <keyboard_init+0x548>
    {
        // resend the get device descriptor
        // get device descriptor
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
10002e74:	0003a2c0 	call	10003a2c <usb_get_device_desc2>
        usleep(10 * 1000);
10002e78:	0109c404 	movi	r4,10000
10002e7c:	00123600 	call	10012360 <usleep>
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002e80:	010000c4 	movi	r4,3
10002e84:	00028d00 	call	100028d0 <io_read>
10002e88:	10bfffcc 	andi	r2,r2,65535
10002e8c:	1080040c 	andi	r2,r2,16
10002e90:	103ff826 	beq	r2,zero,10002e74 <__alt_data_end+0xf8002e74>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002e94:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002e98:	01414184 	movi	r5,1286
10002e9c:	01000084 	movi	r4,2
10002ea0:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
10002ea4:	0009883a 	mov	r4,zero
10002ea8:	00028d00 	call	100028d0 <io_read>
10002eac:	10bfffcc 	andi	r2,r2,65535
10002eb0:	100b883a 	mov	r5,r2
10002eb4:	01040074 	movhi	r4,4097
10002eb8:	2111b704 	addi	r4,r4,18140
10002ebc:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
10002ec0:	01414204 	movi	r5,1288
10002ec4:	01000084 	movi	r4,2
10002ec8:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002ecc:	0009883a 	mov	r4,zero
10002ed0:	00028d00 	call	100028d0 <io_read>
10002ed4:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10002ed8:	d0aa870b 	ldhu	r2,-21988(gp)
10002edc:	10bfffcc 	andi	r2,r2,65535
10002ee0:	100b883a 	mov	r5,r2
10002ee4:	01040074 	movhi	r4,4097
10002ee8:	2111c204 	addi	r4,r4,18184
10002eec:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
10002ef0:	00000206 	br	10002efc <keyboard_init+0x5c4>
        usb_ctl_val = usb_get_retry_cnt();
10002ef4:	00047080 	call	10004708 <usb_get_retry_cnt>
10002ef8:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002efc:	d0aa870b 	ldhu	r2,-21988(gp)
10002f00:	10bfffcc 	andi	r2,r2,65535
10002f04:	108000d8 	cmpnei	r2,r2,3
10002f08:	103ffa1e 	bne	r2,zero,10002ef4 <__alt_data_end+0xf8002ef4>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10002f0c:	01040074 	movhi	r4,4097
10002f10:	2111e204 	addi	r4,r4,18312
10002f14:	0004d1c0 	call	10004d1c <puts>


    // STEP 5 begin
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1
10002f18:	0003c040 	call	10003c04 <usb_get_config_desc1>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002f1c:	00000306 	br	10002f2c <keyboard_init+0x5f4>
    {
        // resend the get device descriptor
        // get device descriptor

        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
10002f20:	0003c040 	call	10003c04 <usb_get_config_desc1>
        usleep(10 * 1000);
10002f24:	0109c404 	movi	r4,10000
10002f28:	00123600 	call	10012360 <usleep>
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002f2c:	010000c4 	movi	r4,3
10002f30:	00028d00 	call	100028d0 <io_read>
10002f34:	10bfffcc 	andi	r2,r2,65535
10002f38:	1080040c 	andi	r2,r2,16
10002f3c:	103ff826 	beq	r2,zero,10002f20 <__alt_data_end+0xf8002f20>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002f40:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002f44:	01414184 	movi	r5,1286
10002f48:	01000084 	movi	r4,2
10002f4c:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));
10002f50:	0009883a 	mov	r4,zero
10002f54:	00028d00 	call	100028d0 <io_read>
10002f58:	10bfffcc 	andi	r2,r2,65535
10002f5c:	100b883a 	mov	r5,r2
10002f60:	01040074 	movhi	r4,4097
10002f64:	2111f404 	addi	r4,r4,18384
10002f68:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
10002f6c:	01414204 	movi	r5,1288
10002f70:	01000084 	movi	r4,2
10002f74:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002f78:	0009883a 	mov	r4,zero
10002f7c:	00028d00 	call	100028d0 <io_read>
10002f80:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
10002f84:	d0aa870b 	ldhu	r2,-21988(gp)
10002f88:	10bfffcc 	andi	r2,r2,65535
10002f8c:	100b883a 	mov	r5,r2
10002f90:	01040074 	movhi	r4,4097
10002f94:	2111ff04 	addi	r4,r4,18428
10002f98:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
10002f9c:	00000206 	br	10002fa8 <keyboard_init+0x670>
        usb_ctl_val = usb_get_retry_cnt();
10002fa0:	00047080 	call	10004708 <usb_get_retry_cnt>
10002fa4:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002fa8:	d0aa870b 	ldhu	r2,-21988(gp)
10002fac:	10bfffcc 	andi	r2,r2,65535
10002fb0:	108000d8 	cmpnei	r2,r2,3
10002fb4:	103ffa1e 	bne	r2,zero,10002fa0 <__alt_data_end+0xf8002fa0>
        usb_ctl_val = usb_get_retry_cnt();
    }
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10002fb8:	01040074 	movhi	r4,4097
10002fbc:	21120b04 	addi	r4,r4,18476
10002fc0:	0004d1c0 	call	10004d1c <puts>

    // STEP 6 begin
    //-----------------------------------get configuration descriptor-2------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2
10002fc4:	0003d940 	call	10003d94 <usb_get_config_desc2>

    usleep(100 * 1000);
10002fc8:	010000b4 	movhi	r4,2
10002fcc:	2121a804 	addi	r4,r4,-31072
10002fd0:	00123600 	call	10012360 <usleep>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002fd4:	00000306 	br	10002fe4 <keyboard_init+0x6ac>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
10002fd8:	0003d940 	call	10003d94 <usb_get_config_desc2>
        usleep(10 * 1000);
10002fdc:	0109c404 	movi	r4,10000
10002fe0:	00123600 	call	10012360 <usleep>
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2

    usleep(100 * 1000);
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002fe4:	010000c4 	movi	r4,3
10002fe8:	00028d00 	call	100028d0 <io_read>
10002fec:	10bfffcc 	andi	r2,r2,65535
10002ff0:	1080040c 	andi	r2,r2,16
10002ff4:	103ff826 	beq	r2,zero,10002fd8 <__alt_data_end+0xf8002fd8>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002ff8:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002ffc:	01414184 	movi	r5,1286
10003000:	01000084 	movi	r4,2
10003004:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));
10003008:	0009883a 	mov	r4,zero
1000300c:	00028d00 	call	100028d0 <io_read>
10003010:	10bfffcc 	andi	r2,r2,65535
10003014:	100b883a 	mov	r5,r2
10003018:	01040074 	movhi	r4,4097
1000301c:	21121e04 	addi	r4,r4,18552
10003020:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
10003024:	01414204 	movi	r5,1288
10003028:	01000084 	movi	r4,2
1000302c:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10003030:	0009883a 	mov	r4,zero
10003034:	00028d00 	call	100028d0 <io_read>
10003038:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
1000303c:	d0aa870b 	ldhu	r2,-21988(gp)
10003040:	10bfffcc 	andi	r2,r2,65535
10003044:	100b883a 	mov	r5,r2
10003048:	01040074 	movhi	r4,4097
1000304c:	21122904 	addi	r4,r4,18596
10003050:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
10003054:	00000206 	br	10003060 <keyboard_init+0x728>
        usb_ctl_val = usb_get_retry_cnt();
10003058:	00047080 	call	10004708 <usb_get_retry_cnt>
1000305c:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10003060:	d0aa870b 	ldhu	r2,-21988(gp)
10003064:	10bfffcc 	andi	r2,r2,65535
10003068:	108000d8 	cmpnei	r2,r2,3
1000306c:	103ffa1e 	bne	r2,zero,10003058 <__alt_data_end+0xf8003058>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10003070:	01040074 	movhi	r4,4097
10003074:	21123504 	addi	r4,r4,18644
10003078:	0004d1c0 	call	10004d1c <puts>


    // --------------------------------- get device info --------------------------------------------- //

    // TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
    io_write(HPI_ADDR, 0x056c);
1000307c:	01415b04 	movi	r5,1388
10003080:	01000084 	movi	r4,2
10003084:	00028600 	call	10002860 <io_write>
    code = io_read(HPI_DATA);
10003088:	0009883a 	mov	r4,zero
1000308c:	00028d00 	call	100028d0 <io_read>
10003090:	d0aa890d 	sth	r2,-21980(gp)
    code = code & 0x003;
10003094:	d0aa890b 	ldhu	r2,-21980(gp)
10003098:	108000cc 	andi	r2,r2,3
1000309c:	d0aa890d 	sth	r2,-21980(gp)
    printf("\ncode = %x\n", code);
100030a0:	d0aa890b 	ldhu	r2,-21980(gp)
100030a4:	10bfffcc 	andi	r2,r2,65535
100030a8:	100b883a 	mov	r5,r2
100030ac:	01040074 	movhi	r4,4097
100030b0:	21124804 	addi	r4,r4,18720
100030b4:	0004c200 	call	10004c20 <printf>

    if (code == 0x01) {
100030b8:	d0aa890b 	ldhu	r2,-21980(gp)
100030bc:	10bfffcc 	andi	r2,r2,65535
100030c0:	10800058 	cmpnei	r2,r2,1
100030c4:	1000041e 	bne	r2,zero,100030d8 <keyboard_init+0x7a0>
        printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
100030c8:	01040074 	movhi	r4,4097
100030cc:	21124b04 	addi	r4,r4,18732
100030d0:	0004d1c0 	call	10004d1c <puts>
100030d4:	00000306 	br	100030e4 <keyboard_init+0x7ac>
    } else {
        printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
100030d8:	01040074 	movhi	r4,4097
100030dc:	21125a04 	addi	r4,r4,18792
100030e0:	0004d1c0 	call	10004d1c <puts>
    }

    // TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

    io_write(HPI_ADDR, 0x0576);
100030e4:	01415d84 	movi	r5,1398
100030e8:	01000084 	movi	r4,2
100030ec:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x073F);
100030f0:	0141cfc4 	movi	r5,1855
100030f4:	0009883a 	mov	r4,zero
100030f8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x8105);
100030fc:	01604154 	movui	r5,33029
10003100:	0009883a 	mov	r4,zero
10003104:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0003);
10003108:	014000c4 	movi	r5,3
1000310c:	0009883a 	mov	r4,zero
10003110:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);
10003114:	01400204 	movi	r5,8
10003118:	0009883a 	mov	r4,zero
1000311c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0xAC0A);
10003120:	016b0294 	movui	r5,44042
10003124:	0009883a 	mov	r4,zero
10003128:	00028600 	call	10002860 <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0576);  // HUSB_SIE1_pCurrentTDPtr
1000312c:	01415d84 	movi	r5,1398
10003130:	01006c04 	movi	r4,432
10003134:	00036940 	call	10003694 <usb_write>

    // data_size = (io_read(HPI_DATA)>>8)&0x0ff;
    // data_size = 0x08;  //(io_read(HPI_DATA))&0x0ff;
    // usb_print_mem();
    io_write(HPI_ADDR, 0x057c);
10003138:	01415f04 	movi	r5,1404
1000313c:	01000084 	movi	r4,2
10003140:	00028600 	call	10002860 <io_write>
    data_size = (io_read(HPI_DATA)) & 0x0ff;
10003144:	0009883a 	mov	r4,zero
10003148:	00028d00 	call	100028d0 <io_read>
1000314c:	d0aa8785 	stb	r2,-21986(gp)
    printf("[ENUM PROCESS]:data packet size is %d\n", data_size);
10003150:	d0aa8783 	ldbu	r2,-21986(gp)
10003154:	10803fcc 	andi	r2,r2,255
10003158:	100b883a 	mov	r5,r2
1000315c:	01040074 	movhi	r4,4097
10003160:	21126304 	addi	r4,r4,18828
10003164:	0004c200 	call	10004c20 <printf>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration
10003168:	0003ffc0 	call	10003ffc <usb_set_config>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
1000316c:	00000306 	br	1000317c <keyboard_init+0x844>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
10003170:	0003ffc0 	call	10003ffc <usb_set_config>
        usleep(10 * 1000);
10003174:	0109c404 	movi	r4,10000
10003178:	00123600 	call	10012360 <usleep>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
1000317c:	010000c4 	movi	r4,3
10003180:	00028d00 	call	100028d0 <io_read>
10003184:	10bfffcc 	andi	r2,r2,65535
10003188:	1080040c 	andi	r2,r2,16
1000318c:	103ff826 	beq	r2,zero,10003170 <__alt_data_end+0xf8003170>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10003190:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10003194:	01414184 	movi	r5,1286
10003198:	01000084 	movi	r4,2
1000319c:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));
100031a0:	0009883a 	mov	r4,zero
100031a4:	00028d00 	call	100028d0 <io_read>
100031a8:	10bfffcc 	andi	r2,r2,65535
100031ac:	100b883a 	mov	r5,r2
100031b0:	01040074 	movhi	r4,4097
100031b4:	21126d04 	addi	r4,r4,18868
100031b8:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
100031bc:	01414204 	movi	r5,1288
100031c0:	01000084 	movi	r4,2
100031c4:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
100031c8:	0009883a 	mov	r4,zero
100031cc:	00028d00 	call	100028d0 <io_read>
100031d0:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
100031d4:	d0aa870b 	ldhu	r2,-21988(gp)
100031d8:	10bfffcc 	andi	r2,r2,65535
100031dc:	100b883a 	mov	r5,r2
100031e0:	01040074 	movhi	r4,4097
100031e4:	21127804 	addi	r4,r4,18912
100031e8:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
100031ec:	00000206 	br	100031f8 <keyboard_init+0x8c0>
        usb_ctl_val = usb_get_retry_cnt();
100031f0:	00047080 	call	10004708 <usb_get_retry_cnt>
100031f4:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
100031f8:	d0aa870b 	ldhu	r2,-21988(gp)
100031fc:	10bfffcc 	andi	r2,r2,65535
10003200:	108000d8 	cmpnei	r2,r2,3
10003204:	103ffa1e 	bne	r2,zero,100031f0 <__alt_data_end+0xf80031f0>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10003208:	01040074 	movhi	r4,4097
1000320c:	21128404 	addi	r4,r4,18960
10003210:	0004d1c0 	call	10004d1c <puts>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();
10003214:	00040fc0 	call	100040fc <usb_class_request>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003218:	00000306 	br	10003228 <keyboard_init+0x8f0>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
1000321c:	00040fc0 	call	100040fc <usb_class_request>
        usleep(10 * 1000);
10003220:	0109c404 	movi	r4,10000
10003224:	00123600 	call	10012360 <usleep>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003228:	010000c4 	movi	r4,3
1000322c:	00028d00 	call	100028d0 <io_read>
10003230:	10bfffcc 	andi	r2,r2,65535
10003234:	1080040c 	andi	r2,r2,16
10003238:	103ff826 	beq	r2,zero,1000321c <__alt_data_end+0xf800321c>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
1000323c:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10003240:	01414184 	movi	r5,1286
10003244:	01000084 	movi	r4,2
10003248:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
1000324c:	0009883a 	mov	r4,zero
10003250:	00028d00 	call	100028d0 <io_read>
10003254:	10bfffcc 	andi	r2,r2,65535
10003258:	100b883a 	mov	r5,r2
1000325c:	01040074 	movhi	r4,4097
10003260:	21129604 	addi	r4,r4,19032
10003264:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
10003268:	01414204 	movi	r5,1288
1000326c:	01000084 	movi	r4,2
10003270:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10003274:	0009883a 	mov	r4,zero
10003278:	00028d00 	call	100028d0 <io_read>
1000327c:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10003280:	d0aa870b 	ldhu	r2,-21988(gp)
10003284:	10bfffcc 	andi	r2,r2,65535
10003288:	100b883a 	mov	r5,r2
1000328c:	01040074 	movhi	r4,4097
10003290:	2112a104 	addi	r4,r4,19076
10003294:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
10003298:	00000206 	br	100032a4 <keyboard_init+0x96c>
        usb_ctl_val = usb_get_retry_cnt();
1000329c:	00047080 	call	10004708 <usb_get_retry_cnt>
100032a0:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
100032a4:	d0aa870b 	ldhu	r2,-21988(gp)
100032a8:	10bfffcc 	andi	r2,r2,65535
100032ac:	108000d8 	cmpnei	r2,r2,3
100032b0:	103ffa1e 	bne	r2,zero,1000329c <__alt_data_end+0xf800329c>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
100032b4:	01040074 	movhi	r4,4097
100032b8:	2112ad04 	addi	r4,r4,19124
100032bc:	0004d1c0 	call	10004d1c <puts>

    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();
100032c0:	00041fc0 	call	100041fc <usb_get_hid_desc>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100032c4:	00000306 	br	100032d4 <keyboard_init+0x99c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
100032c8:	00041fc0 	call	100041fc <usb_get_hid_desc>
        usleep(10 * 1000);
100032cc:	0109c404 	movi	r4,10000
100032d0:	00123600 	call	10012360 <usleep>
    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100032d4:	010000c4 	movi	r4,3
100032d8:	00028d00 	call	100028d0 <io_read>
100032dc:	10bfffcc 	andi	r2,r2,65535
100032e0:	1080040c 	andi	r2,r2,16
100032e4:	103ff826 	beq	r2,zero,100032c8 <__alt_data_end+0xf80032c8>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
100032e8:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
100032ec:	01414184 	movi	r5,1286
100032f0:	01000084 	movi	r4,2
100032f4:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
100032f8:	0009883a 	mov	r4,zero
100032fc:	00028d00 	call	100028d0 <io_read>
10003300:	10bfffcc 	andi	r2,r2,65535
10003304:	100b883a 	mov	r5,r2
10003308:	01040074 	movhi	r4,4097
1000330c:	21129604 	addi	r4,r4,19032
10003310:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
10003314:	01414204 	movi	r5,1288
10003318:	01000084 	movi	r4,2
1000331c:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10003320:	0009883a 	mov	r4,zero
10003324:	00028d00 	call	100028d0 <io_read>
10003328:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
1000332c:	d0aa870b 	ldhu	r2,-21988(gp)
10003330:	10bfffcc 	andi	r2,r2,65535
10003334:	100b883a 	mov	r5,r2
10003338:	01040074 	movhi	r4,4097
1000333c:	2112a104 	addi	r4,r4,19076
10003340:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
10003344:	00000206 	br	10003350 <keyboard_init+0xa18>
        usb_ctl_val = usb_get_retry_cnt();
10003348:	00047080 	call	10004708 <usb_get_retry_cnt>
1000334c:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10003350:	d0aa870b 	ldhu	r2,-21988(gp)
10003354:	10bfffcc 	andi	r2,r2,65535
10003358:	108000d8 	cmpnei	r2,r2,3
1000335c:	103ffa1e 	bne	r2,zero,10003348 <__alt_data_end+0xf8003348>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10003360:	01040074 	movhi	r4,4097
10003364:	2112bf04 	addi	r4,r4,19196
10003368:	0004d1c0 	call	10004d1c <puts>

    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
1000336c:	00043440 	call	10004344 <usb_get_report_desc>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003370:	00000306 	br	10003380 <keyboard_init+0xa48>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
10003374:	00043440 	call	10004344 <usb_get_report_desc>
        usleep(10 * 1000);
10003378:	0109c404 	movi	r4,10000
1000337c:	00123600 	call	10012360 <usleep>
    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003380:	010000c4 	movi	r4,3
10003384:	00028d00 	call	100028d0 <io_read>
10003388:	10bfffcc 	andi	r2,r2,65535
1000338c:	1080040c 	andi	r2,r2,16
10003390:	103ff826 	beq	r2,zero,10003374 <__alt_data_end+0xf8003374>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10003394:	00046840 	call	10004684 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10003398:	01414184 	movi	r5,1286
1000339c:	01000084 	movi	r4,2
100033a0:	00028600 	call	10002860 <io_write>
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));
100033a4:	0009883a 	mov	r4,zero
100033a8:	00028d00 	call	100028d0 <io_read>
100033ac:	10bfffcc 	andi	r2,r2,65535
100033b0:	100b883a 	mov	r5,r2
100033b4:	01040074 	movhi	r4,4097
100033b8:	2112d304 	addi	r4,r4,19276
100033bc:	0004c200 	call	10004c20 <printf>

    io_write(HPI_ADDR, 0x0508);
100033c0:	01414204 	movi	r5,1288
100033c4:	01000084 	movi	r4,2
100033c8:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
100033cc:	0009883a 	mov	r4,zero
100033d0:	00028d00 	call	100028d0 <io_read>
100033d4:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
100033d8:	d0aa870b 	ldhu	r2,-21988(gp)
100033dc:	10bfffcc 	andi	r2,r2,65535
100033e0:	100b883a 	mov	r5,r2
100033e4:	01040074 	movhi	r4,4097
100033e8:	2112df04 	addi	r4,r4,19324
100033ec:	0004c200 	call	10004c20 <printf>
    while (usb_ctl_val != 0x03) {
100033f0:	00000206 	br	100033fc <keyboard_init+0xac4>
        usb_ctl_val = usb_get_retry_cnt();
100033f4:	00047080 	call	10004708 <usb_get_retry_cnt>
100033f8:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
100033fc:	d0aa870b 	ldhu	r2,-21988(gp)
10003400:	10bfffcc 	andi	r2,r2,65535
10003404:	108000d8 	cmpnei	r2,r2,3
10003408:	103ffa1e 	bne	r2,zero,100033f4 <__alt_data_end+0xf80033f4>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
1000340c:	01040074 	movhi	r4,4097
10003410:	2112eb04 	addi	r4,r4,19372
10003414:	0004d1c0 	call	10004d1c <puts>

    usleep(10000);
10003418:	0109c404 	movi	r4,10000
1000341c:	00123600 	call	10012360 <usleep>
}
10003420:	0001883a 	nop
10003424:	e037883a 	mov	sp,fp
10003428:	dfc00117 	ldw	ra,4(sp)
1000342c:	df000017 	ldw	fp,0(sp)
10003430:	dec00204 	addi	sp,sp,8
10003434:	f800283a 	ret

10003438 <keyboard_fetch>:

int keyboard_fetch(alt_u16 *keycode_ptr) {
10003438:	defffc04 	addi	sp,sp,-16
1000343c:	dfc00315 	stw	ra,12(sp)
10003440:	df000215 	stw	fp,8(sp)
10003444:	dc000115 	stw	r16,4(sp)
10003448:	df000204 	addi	fp,sp,8
1000344c:	e13ffe15 	stw	r4,-8(fp)

    fetch_toggle = 1 - fetch_toggle;
10003450:	d0aa8683 	ldbu	r2,-21990(gp)
10003454:	00c00044 	movi	r3,1
10003458:	1885c83a 	sub	r2,r3,r2
1000345c:	d0aa8685 	stb	r2,-21990(gp)

    io_write(HPI_ADDR, 0x0500);  // the start address
10003460:	01414004 	movi	r5,1280
10003464:	01000084 	movi	r4,2
10003468:	00028600 	call	10002860 <io_write>
    // data phase IN-1
    io_write(HPI_DATA, 0x051c);  // 500
1000346c:	01414704 	movi	r5,1308
10003470:	0009883a 	mov	r4,zero
10003474:	00028600 	call	10002860 <io_write>

    io_write(HPI_DATA, 0x000f & data_size);  // 2 data length
10003478:	d0aa8783 	ldbu	r2,-21986(gp)
1000347c:	10803fcc 	andi	r2,r2,255
10003480:	108003cc 	andi	r2,r2,15
10003484:	100b883a 	mov	r5,r2
10003488:	0009883a 	mov	r4,zero
1000348c:	00028600 	call	10002860 <io_write>

    io_write(HPI_DATA, 0x0291);  // 4 // endpoint 1
10003490:	0140a444 	movi	r5,657
10003494:	0009883a 	mov	r4,zero
10003498:	00028600 	call	10002860 <io_write>
    if (fetch_toggle) {
1000349c:	d0aa8683 	ldbu	r2,-21990(gp)
100034a0:	10803fcc 	andi	r2,r2,255
100034a4:	10000426 	beq	r2,zero,100034b8 <keyboard_fetch+0x80>
        io_write(HPI_DATA, 0x0001);  // 6 // data 1
100034a8:	01400044 	movi	r5,1
100034ac:	0009883a 	mov	r4,zero
100034b0:	00028600 	call	10002860 <io_write>
100034b4:	00000306 	br	100034c4 <keyboard_fetch+0x8c>
    } else {
        io_write(HPI_DATA, 0x0041);  // 6 // data 1
100034b8:	01401044 	movi	r5,65
100034bc:	0009883a 	mov	r4,zero
100034c0:	00028600 	call	10002860 <io_write>
    }
    io_write(HPI_DATA, 0x0013);  // 8
100034c4:	014004c4 	movi	r5,19
100034c8:	0009883a 	mov	r4,zero
100034cc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);  // a
100034d0:	000b883a 	mov	r5,zero
100034d4:	0009883a 	mov	r4,zero
100034d8:	00028600 	call	10002860 <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr
100034dc:	01414004 	movi	r5,1280
100034e0:	01006c04 	movi	r4,432
100034e4:	00036940 	call	10003694 <usb_write>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100034e8:	00002206 	br	10003574 <keyboard_fetch+0x13c>
    {
        io_write(HPI_ADDR, 0x0500);  // the start address
100034ec:	01414004 	movi	r5,1280
100034f0:	01000084 	movi	r4,2
100034f4:	00028600 	call	10002860 <io_write>
        // data phase IN-1
        io_write(HPI_DATA, 0x051c);  // 500
100034f8:	01414704 	movi	r5,1308
100034fc:	0009883a 	mov	r4,zero
10003500:	00028600 	call	10002860 <io_write>

        io_write(HPI_DATA, 0x000f & data_size);  // 2 data length
10003504:	d0aa8783 	ldbu	r2,-21986(gp)
10003508:	10803fcc 	andi	r2,r2,255
1000350c:	108003cc 	andi	r2,r2,15
10003510:	100b883a 	mov	r5,r2
10003514:	0009883a 	mov	r4,zero
10003518:	00028600 	call	10002860 <io_write>

        io_write(HPI_DATA, 0x0291);  // 4 // endpoint 1
1000351c:	0140a444 	movi	r5,657
10003520:	0009883a 	mov	r4,zero
10003524:	00028600 	call	10002860 <io_write>

        if (fetch_toggle) {
10003528:	d0aa8683 	ldbu	r2,-21990(gp)
1000352c:	10803fcc 	andi	r2,r2,255
10003530:	10000426 	beq	r2,zero,10003544 <keyboard_fetch+0x10c>
            io_write(HPI_DATA, 0x0001);  // 6 // data 1
10003534:	01400044 	movi	r5,1
10003538:	0009883a 	mov	r4,zero
1000353c:	00028600 	call	10002860 <io_write>
10003540:	00000306 	br	10003550 <keyboard_fetch+0x118>
        } else {
            io_write(HPI_DATA, 0x0041);  // 6 // data 1
10003544:	01401044 	movi	r5,65
10003548:	0009883a 	mov	r4,zero
1000354c:	00028600 	call	10002860 <io_write>
        }

        io_write(HPI_DATA, 0x0013);  // 8
10003550:	014004c4 	movi	r5,19
10003554:	0009883a 	mov	r4,zero
10003558:	00028600 	call	10002860 <io_write>
        io_write(HPI_DATA, 0x0000);  //
1000355c:	000b883a 	mov	r5,zero
10003560:	0009883a 	mov	r4,zero
10003564:	00028600 	call	10002860 <io_write>
        usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr
10003568:	01414004 	movi	r5,1280
1000356c:	01006c04 	movi	r4,432
10003570:	00036940 	call	10003694 <usb_write>
    }
    io_write(HPI_DATA, 0x0013);  // 8
    io_write(HPI_DATA, 0x0000);  // a
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003574:	010000c4 	movi	r4,3
10003578:	00028d00 	call	100028d0 <io_read>
1000357c:	10bfffcc 	andi	r2,r2,65535
10003580:	1080040c 	andi	r2,r2,16
10003584:	103fd926 	beq	r2,zero,100034ec <__alt_data_end+0xf80034ec>

        // NOTE: [liuzikai] disable this sleep so that this procesure won't take too long
        // usleep(10 * 1000);
    }

    usb_ctl_val = usb_wait_td_list_done();
10003588:	00046840 	call	10004684 <usb_wait_td_list_done>
1000358c:	d0aa870d 	sth	r2,-21988(gp)

    // The first two keycodes are stored in 0x051E. Other keycodes are in subsequent addresses.
    *keycode_ptr = usb_read(0x051e);
10003590:	01014784 	movi	r4,1310
10003594:	00036ec0 	call	100036ec <usb_read>
10003598:	1007883a 	mov	r3,r2
1000359c:	e0bffe17 	ldw	r2,-8(fp)
100035a0:	10c0000d 	sth	r3,0(r2)
    *(keycode_ptr + 1) = usb_read(0x051f);
100035a4:	e0bffe17 	ldw	r2,-8(fp)
100035a8:	14000084 	addi	r16,r2,2
100035ac:	010147c4 	movi	r4,1311
100035b0:	00036ec0 	call	100036ec <usb_read>
100035b4:	8080000d 	sth	r2,0(r16)
    *(keycode_ptr + 2) = usb_read(0x0520);
100035b8:	e0bffe17 	ldw	r2,-8(fp)
100035bc:	14000104 	addi	r16,r2,4
100035c0:	01014804 	movi	r4,1312
100035c4:	00036ec0 	call	100036ec <usb_read>
100035c8:	8080000d 	sth	r2,0(r16)
    *(keycode_ptr + 3) = usb_read(0x0521);
100035cc:	e0bffe17 	ldw	r2,-8(fp)
100035d0:	14000184 	addi	r16,r2,6
100035d4:	01014844 	movi	r4,1313
100035d8:	00036ec0 	call	100036ec <usb_read>
100035dc:	8080000d 	sth	r2,0(r16)
            printf("[INFO]: please insert again!!! \n");
            return 1;
        }
    } */

    return 0;
100035e0:	0005883a 	mov	r2,zero
}
100035e4:	e6ffff04 	addi	sp,fp,-4
100035e8:	dfc00217 	ldw	ra,8(sp)
100035ec:	df000117 	ldw	fp,4(sp)
100035f0:	dc000017 	ldw	r16,0(sp)
100035f4:	dec00304 	addi	sp,sp,12
100035f8:	f800283a 	ret

100035fc <keyboard_hot_plugged>:

int keyboard_hot_plugged() {
100035fc:	defffe04 	addi	sp,sp,-8
10003600:	dfc00115 	stw	ra,4(sp)
10003604:	df000015 	stw	fp,0(sp)
10003608:	d839883a 	mov	fp,sp
    usb_ctl_val = usb_read(ctl_reg);
1000360c:	d0aa850b 	ldhu	r2,-21996(gp)
10003610:	10bfffcc 	andi	r2,r2,65535
10003614:	1009883a 	mov	r4,r2
10003618:	00036ec0 	call	100036ec <usb_read>
1000361c:	d0aa870d 	sth	r2,-21988(gp)
    usleep(5 * 1000);
10003620:	0104e204 	movi	r4,5000
10003624:	00123600 	call	10012360 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
10003628:	d0aa850b 	ldhu	r2,-21996(gp)
1000362c:	10bfffcc 	andi	r2,r2,65535
10003630:	1009883a 	mov	r4,r2
10003634:	00036ec0 	call	100036ec <usb_read>
10003638:	d0aa870d 	sth	r2,-21988(gp)
    usleep(5 * 1000);
1000363c:	0104e204 	movi	r4,5000
10003640:	00123600 	call	10012360 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
10003644:	d0aa850b 	ldhu	r2,-21996(gp)
10003648:	10bfffcc 	andi	r2,r2,65535
1000364c:	1009883a 	mov	r4,r2
10003650:	00036ec0 	call	100036ec <usb_read>
10003654:	d0aa870d 	sth	r2,-21988(gp)
    usleep(5 * 1000);
10003658:	0104e204 	movi	r4,5000
1000365c:	00123600 	call	10012360 <usleep>

    if (usb_ctl_val & no_device) return 1;
10003660:	d0ea870b 	ldhu	r3,-21988(gp)
10003664:	d0aa858b 	ldhu	r2,-21994(gp)
10003668:	1884703a 	and	r2,r3,r2
1000366c:	10bfffcc 	andi	r2,r2,65535
10003670:	10000226 	beq	r2,zero,1000367c <keyboard_hot_plugged+0x80>
10003674:	00800044 	movi	r2,1
10003678:	00000106 	br	10003680 <keyboard_hot_plugged+0x84>

    return 0;
1000367c:	0005883a 	mov	r2,zero
}
10003680:	e037883a 	mov	sp,fp
10003684:	dfc00117 	ldw	ra,4(sp)
10003688:	df000017 	ldw	fp,0(sp)
1000368c:	dec00204 	addi	sp,sp,8
10003690:	f800283a 	ret

10003694 <usb_write>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_write(alt_u16 Address, alt_u16 Data) {
10003694:	defffc04 	addi	sp,sp,-16
10003698:	dfc00315 	stw	ra,12(sp)
1000369c:	df000215 	stw	fp,8(sp)
100036a0:	df000204 	addi	fp,sp,8
100036a4:	2007883a 	mov	r3,r4
100036a8:	2805883a 	mov	r2,r5
100036ac:	e0fffe0d 	sth	r3,-8(fp)
100036b0:	e0bfff0d 	sth	r2,-4(fp)
    io_write(HPI_ADDR, Address);
100036b4:	e0bffe0b 	ldhu	r2,-8(fp)
100036b8:	100b883a 	mov	r5,r2
100036bc:	01000084 	movi	r4,2
100036c0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, Data);
100036c4:	e0bfff0b 	ldhu	r2,-4(fp)
100036c8:	100b883a 	mov	r5,r2
100036cc:	0009883a 	mov	r4,zero
100036d0:	00028600 	call	10002860 <io_write>
}
100036d4:	0001883a 	nop
100036d8:	e037883a 	mov	sp,fp
100036dc:	dfc00117 	ldw	ra,4(sp)
100036e0:	df000017 	ldw	fp,0(sp)
100036e4:	dec00204 	addi	sp,sp,8
100036e8:	f800283a 	ret

100036ec <usb_read>:
 * @return   The data read from the specified address
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 usb_read(alt_u16 Address) {
100036ec:	defffd04 	addi	sp,sp,-12
100036f0:	dfc00215 	stw	ra,8(sp)
100036f4:	df000115 	stw	fp,4(sp)
100036f8:	df000104 	addi	fp,sp,4
100036fc:	2005883a 	mov	r2,r4
10003700:	e0bfff0d 	sth	r2,-4(fp)
    // Write the address into HPI address port register
    io_write(HPI_ADDR, Address);
10003704:	e0bfff0b 	ldhu	r2,-4(fp)
10003708:	100b883a 	mov	r5,r2
1000370c:	01000084 	movi	r4,2
10003710:	00028600 	call	10002860 <io_write>
    return io_read(HPI_DATA);
10003714:	0009883a 	mov	r4,zero
10003718:	00028d00 	call	100028d0 <io_read>
}
1000371c:	e037883a 	mov	sp,fp
10003720:	dfc00117 	ldw	ra,4(sp)
10003724:	df000017 	ldw	fp,0(sp)
10003728:	dec00204 	addi	sp,sp,8
1000372c:	f800283a 	ret

10003730 <usb_soft_reset>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_soft_reset() {
10003730:	defffe04 	addi	sp,sp,-8
10003734:	dfc00115 	stw	ra,4(sp)
10003738:	df000015 	stw	fp,0(sp)
1000373c:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    io_write(HPI_MAILBOX, COMM_RESET); //COMM_JUMP2CODE
10003740:	017e9414 	movui	r5,64080
10003744:	01000044 	movi	r4,1
10003748:	00028600 	call	10002860 <io_write>
    usleep(100000);
1000374c:	010000b4 	movhi	r4,2
10003750:	2121a804 	addi	r4,r4,-31072
10003754:	00123600 	call	10012360 <usleep>
    printf("[USB INIT]:reset finished!\n");
10003758:	01040074 	movhi	r4,4097
1000375c:	2112ff04 	addi	r4,r4,19452
10003760:	0004d1c0 	call	10004d1c <puts>

    usleep(500000);
10003764:	01000234 	movhi	r4,8
10003768:	21284804 	addi	r4,r4,-24288
1000376c:	00123600 	call	10012360 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
10003770:	01040074 	movhi	r4,4097
10003774:	21130604 	addi	r4,r4,19480
10003778:	0004d1c0 	call	10004d1c <puts>
    io_read(HPI_MAILBOX);
1000377c:	01000044 	movi	r4,1
10003780:	00028d00 	call	100028d0 <io_read>
    io_read(HPI_STATUS);
10003784:	010000c4 	movi	r4,3
10003788:	00028d00 	call	100028d0 <io_read>

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    usb_read(HPI_SIE1_MSG_ADR);
1000378c:	01005104 	movi	r4,324
10003790:	00036ec0 	call	100036ec <usb_read>
    usb_write(HPI_SIE1_MSG_ADR, 0);
10003794:	000b883a 	mov	r5,zero
10003798:	01005104 	movi	r4,324
1000379c:	00036940 	call	10003694 <usb_write>
    usb_read(HPI_SIE2_MSG_ADR);
100037a0:	01005204 	movi	r4,328
100037a4:	00036ec0 	call	100036ec <usb_read>
    usb_write(HPI_SIE2_MSG_ADR, 0);
100037a8:	000b883a 	mov	r5,zero
100037ac:	01005204 	movi	r4,328
100037b0:	00036940 	call	10003694 <usb_write>


    usb_write(HOST1_STAT_REG, 0xFFFF);
100037b4:	017fffd4 	movui	r5,65535
100037b8:	01302414 	movui	r4,49296
100037bc:	00036940 	call	10003694 <usb_write>
    usb_write(HOST2_STAT_REG, 0xFFFF);
100037c0:	017fffd4 	movui	r5,65535
100037c4:	01302c14 	movui	r4,49328
100037c8:	00036940 	call	10003694 <usb_write>
}
100037cc:	0001883a 	nop
100037d0:	e037883a 	mov	sp,fp
100037d4:	dfc00117 	ldw	ra,4(sp)
100037d8:	df000017 	ldw	fp,0(sp)
100037dc:	dec00204 	addi	sp,sp,8
100037e0:	f800283a 	ret

100037e4 <usb_set_address>:


void usb_set_address() {
100037e4:	defffe04 	addi	sp,sp,-8
100037e8:	dfc00115 	stw	ra,4(sp)
100037ec:	df000015 	stw	fp,0(sp)
100037f0:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100037f4:	01414004 	movi	r5,1280
100037f8:	01000084 	movi	r4,2
100037fc:	00028600 	call	10002860 <io_write>
    // TD #1: 6 writes
    io_write(HPI_DATA, 0x050C);
10003800:	01414304 	movi	r5,1292
10003804:	0009883a 	mov	r4,zero
10003808:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
1000380c:	01400204 	movi	r5,8
10003810:	0009883a 	mov	r4,zero
10003814:	00028600 	call	10002860 <io_write>
    // TASK: Complete with 4 more IOWR functions
    io_write(HPI_DATA, 0x00D0);
10003818:	01403404 	movi	r5,208
1000381c:	0009883a 	mov	r4,zero
10003820:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
10003824:	01400044 	movi	r5,1
10003828:	0009883a 	mov	r4,zero
1000382c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10003830:	014004c4 	movi	r5,19
10003834:	0009883a 	mov	r4,zero
10003838:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
1000383c:	01414504 	movi	r5,1300
10003840:	0009883a 	mov	r4,zero
10003844:	00028600 	call	10002860 <io_write>
    // TD #2: 4 writes
    // TASK: Complete with 4 IOWR functions
    io_write(HPI_DATA, 0x0500);
10003848:	01414004 	movi	r5,1280
1000384c:	0009883a 	mov	r4,zero
10003850:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0002);
10003854:	01400084 	movi	r5,2
10003858:	0009883a 	mov	r4,zero
1000385c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
10003860:	000b883a 	mov	r5,zero
10003864:	0009883a 	mov	r4,zero
10003868:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
1000386c:	000b883a 	mov	r5,zero
10003870:	0009883a 	mov	r4,zero
10003874:	00028600 	call	10002860 <io_write>
    // TD #3: 6 writes
    // TASK: Complete with 6 IOWR functions
    io_write(HPI_DATA, 0x0000); //
10003878:	000b883a 	mov	r5,zero
1000387c:	0009883a 	mov	r4,zero
10003880:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//
10003884:	000b883a 	mov	r5,zero
10003888:	0009883a 	mov	r4,zero
1000388c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0090);//
10003890:	01402404 	movi	r5,144
10003894:	0009883a 	mov	r4,zero
10003898:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);
1000389c:	01401044 	movi	r5,65
100038a0:	0009883a 	mov	r4,zero
100038a4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
100038a8:	014004c4 	movi	r5,19
100038ac:	0009883a 	mov	r4,zero
100038b0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
100038b4:	000b883a 	mov	r5,zero
100038b8:	0009883a 	mov	r4,zero
100038bc:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100038c0:	01414004 	movi	r5,1280
100038c4:	01006c04 	movi	r4,432
100038c8:	00036940 	call	10003694 <usb_write>
}
100038cc:	0001883a 	nop
100038d0:	e037883a 	mov	sp,fp
100038d4:	dfc00117 	ldw	ra,4(sp)
100038d8:	df000017 	ldw	fp,0(sp)
100038dc:	dec00204 	addi	sp,sp,8
100038e0:	f800283a 	ret

100038e4 <usb_get_device_desc1>:


void usb_get_device_desc1() {
100038e4:	defffe04 	addi	sp,sp,-8
100038e8:	dfc00115 	stw	ra,4(sp)
100038ec:	df000015 	stw	fp,0(sp)
100038f0:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100038f4:	01414004 	movi	r5,1280
100038f8:	01000084 	movi	r4,2
100038fc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10003900:	01414304 	movi	r5,1292
10003904:	0009883a 	mov	r4,zero
10003908:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
1000390c:	01400204 	movi	r5,8
10003910:	0009883a 	mov	r4,zero
10003914:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003918:	0140b404 	movi	r5,720
1000391c:	0009883a 	mov	r4,zero
10003920:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
10003924:	01400044 	movi	r5,1
10003928:	0009883a 	mov	r4,zero
1000392c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10003930:	014004c4 	movi	r5,19
10003934:	0009883a 	mov	r4,zero
10003938:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
1000393c:	01414504 	movi	r5,1300
10003940:	0009883a 	mov	r4,zero
10003944:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003948:	0141a004 	movi	r5,1664
1000394c:	0009883a 	mov	r4,zero
10003950:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0100); //device 0x01
10003954:	01404004 	movi	r5,256
10003958:	0009883a 	mov	r4,zero
1000395c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
10003960:	000b883a 	mov	r5,zero
10003964:	0009883a 	mov	r4,zero
10003968:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);
1000396c:	01400204 	movi	r5,8
10003970:	0009883a 	mov	r4,zero
10003974:	00028600 	call	10002860 <io_write>

    //data phase IN
    io_write(HPI_DATA, 0x052C); //
10003978:	01414b04 	movi	r5,1324
1000397c:	0009883a 	mov	r4,zero
10003980:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//
10003984:	01400204 	movi	r5,8
10003988:	0009883a 	mov	r4,zero
1000398c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//
10003990:	0140a404 	movi	r5,656
10003994:	0009883a 	mov	r4,zero
10003998:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);
1000399c:	01401044 	movi	r5,65
100039a0:	0009883a 	mov	r4,zero
100039a4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
100039a8:	014004c4 	movi	r5,19
100039ac:	0009883a 	mov	r4,zero
100039b0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0520);
100039b4:	01414804 	movi	r5,1312
100039b8:	0009883a 	mov	r4,zero
100039bc:	00028600 	call	10002860 <io_write>

    //    //status phase
    io_write(HPI_DATA, 0x0000); //don't care
100039c0:	000b883a 	mov	r5,zero
100039c4:	0009883a 	mov	r4,zero
100039c8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//port number
100039cc:	000b883a 	mov	r5,zero
100039d0:	0009883a 	mov	r4,zero
100039d4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0210);//device address
100039d8:	01408404 	movi	r5,528
100039dc:	0009883a 	mov	r4,zero
100039e0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);
100039e4:	01401044 	movi	r5,65
100039e8:	0009883a 	mov	r4,zero
100039ec:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
100039f0:	014004c4 	movi	r5,19
100039f4:	0009883a 	mov	r4,zero
100039f8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
100039fc:	000b883a 	mov	r5,zero
10003a00:	0009883a 	mov	r4,zero
10003a04:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003a08:	01414004 	movi	r5,1280
10003a0c:	01006c04 	movi	r4,432
10003a10:	00036940 	call	10003694 <usb_write>
}
10003a14:	0001883a 	nop
10003a18:	e037883a 	mov	sp,fp
10003a1c:	dfc00117 	ldw	ra,4(sp)
10003a20:	df000017 	ldw	fp,0(sp)
10003a24:	dec00204 	addi	sp,sp,8
10003a28:	f800283a 	ret

10003a2c <usb_get_device_desc2>:

void usb_get_device_desc2() {
10003a2c:	defffe04 	addi	sp,sp,-8
10003a30:	dfc00115 	stw	ra,4(sp)
10003a34:	df000015 	stw	fp,0(sp)
10003a38:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003a3c:	01414004 	movi	r5,1280
10003a40:	01000084 	movi	r4,2
10003a44:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10003a48:	01414304 	movi	r5,1292
10003a4c:	0009883a 	mov	r4,zero
10003a50:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003a54:	01400204 	movi	r5,8
10003a58:	0009883a 	mov	r4,zero
10003a5c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003a60:	0140b404 	movi	r5,720
10003a64:	0009883a 	mov	r4,zero
10003a68:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
10003a6c:	01400044 	movi	r5,1
10003a70:	0009883a 	mov	r4,zero
10003a74:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10003a78:	014004c4 	movi	r5,19
10003a7c:	0009883a 	mov	r4,zero
10003a80:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
10003a84:	01414504 	movi	r5,1300
10003a88:	0009883a 	mov	r4,zero
10003a8c:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003a90:	0141a004 	movi	r5,1664
10003a94:	0009883a 	mov	r4,zero
10003a98:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0100);//e //device 0x01
10003a9c:	01404004 	movi	r5,256
10003aa0:	0009883a 	mov	r4,zero
10003aa4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003aa8:	000b883a 	mov	r5,zero
10003aac:	0009883a 	mov	r4,zero
10003ab0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0012);//2
10003ab4:	01400484 	movi	r5,18
10003ab8:	0009883a 	mov	r4,zero
10003abc:	00028600 	call	10002860 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10003ac0:	01415104 	movi	r5,1348
10003ac4:	0009883a 	mov	r4,zero
10003ac8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003acc:	01400204 	movi	r5,8
10003ad0:	0009883a 	mov	r4,zero
10003ad4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003ad8:	0140a404 	movi	r5,656
10003adc:	0009883a 	mov	r4,zero
10003ae0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003ae4:	01401044 	movi	r5,65
10003ae8:	0009883a 	mov	r4,zero
10003aec:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003af0:	014004c4 	movi	r5,19
10003af4:	0009883a 	mov	r4,zero
10003af8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003afc:	01414804 	movi	r5,1312
10003b00:	0009883a 	mov	r4,zero
10003b04:	00028600 	call	10002860 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
10003b08:	01415304 	movi	r5,1356
10003b0c:	0009883a 	mov	r4,zero
10003b10:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003b14:	01400204 	movi	r5,8
10003b18:	0009883a 	mov	r4,zero
10003b1c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003b20:	0140a404 	movi	r5,656
10003b24:	0009883a 	mov	r4,zero
10003b28:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//6
10003b2c:	01400044 	movi	r5,1
10003b30:	0009883a 	mov	r4,zero
10003b34:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003b38:	014004c4 	movi	r5,19
10003b3c:	0009883a 	mov	r4,zero
10003b40:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003b44:	01414b04 	movi	r5,1324
10003b48:	0009883a 	mov	r4,zero
10003b4c:	00028600 	call	10002860 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0554); //c
10003b50:	01415504 	movi	r5,1364
10003b54:	0009883a 	mov	r4,zero
10003b58:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0002);//e
10003b5c:	01400084 	movi	r5,2
10003b60:	0009883a 	mov	r4,zero
10003b64:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10003b68:	0140a404 	movi	r5,656
10003b6c:	0009883a 	mov	r4,zero
10003b70:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003b74:	01401044 	movi	r5,65
10003b78:	0009883a 	mov	r4,zero
10003b7c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003b80:	014004c4 	movi	r5,19
10003b84:	0009883a 	mov	r4,zero
10003b88:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10003b8c:	01414e04 	movi	r5,1336
10003b90:	0009883a 	mov	r4,zero
10003b94:	00028600 	call	10002860 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //538
10003b98:	000b883a 	mov	r5,zero
10003b9c:	0009883a 	mov	r4,zero
10003ba0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//a
10003ba4:	000b883a 	mov	r5,zero
10003ba8:	0009883a 	mov	r4,zero
10003bac:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0210);//c
10003bb0:	01408404 	movi	r5,528
10003bb4:	0009883a 	mov	r4,zero
10003bb8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//e
10003bbc:	01401044 	movi	r5,65
10003bc0:	0009883a 	mov	r4,zero
10003bc4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//540
10003bc8:	014004c4 	movi	r5,19
10003bcc:	0009883a 	mov	r4,zero
10003bd0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//2
10003bd4:	000b883a 	mov	r5,zero
10003bd8:	0009883a 	mov	r4,zero
10003bdc:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003be0:	01414004 	movi	r5,1280
10003be4:	01006c04 	movi	r4,432
10003be8:	00036940 	call	10003694 <usb_write>
}
10003bec:	0001883a 	nop
10003bf0:	e037883a 	mov	sp,fp
10003bf4:	dfc00117 	ldw	ra,4(sp)
10003bf8:	df000017 	ldw	fp,0(sp)
10003bfc:	dec00204 	addi	sp,sp,8
10003c00:	f800283a 	ret

10003c04 <usb_get_config_desc1>:


void usb_get_config_desc1() {
10003c04:	defffe04 	addi	sp,sp,-8
10003c08:	dfc00115 	stw	ra,4(sp)
10003c0c:	df000015 	stw	fp,0(sp)
10003c10:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003c14:	01414004 	movi	r5,1280
10003c18:	01000084 	movi	r4,2
10003c1c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10003c20:	01414304 	movi	r5,1292
10003c24:	0009883a 	mov	r4,zero
10003c28:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003c2c:	01400204 	movi	r5,8
10003c30:	0009883a 	mov	r4,zero
10003c34:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003c38:	0140b404 	movi	r5,720
10003c3c:	0009883a 	mov	r4,zero
10003c40:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
10003c44:	01400044 	movi	r5,1
10003c48:	0009883a 	mov	r4,zero
10003c4c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10003c50:	014004c4 	movi	r5,19
10003c54:	0009883a 	mov	r4,zero
10003c58:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
10003c5c:	01414504 	movi	r5,1300
10003c60:	0009883a 	mov	r4,zero
10003c64:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003c68:	0141a004 	movi	r5,1664
10003c6c:	0009883a 	mov	r4,zero
10003c70:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10003c74:	01408004 	movi	r5,512
10003c78:	0009883a 	mov	r4,zero
10003c7c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003c80:	000b883a 	mov	r5,zero
10003c84:	0009883a 	mov	r4,zero
10003c88:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0009);//2
10003c8c:	01400244 	movi	r5,9
10003c90:	0009883a 	mov	r4,zero
10003c94:	00028600 	call	10002860 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10003c98:	01415104 	movi	r5,1348
10003c9c:	0009883a 	mov	r4,zero
10003ca0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003ca4:	01400204 	movi	r5,8
10003ca8:	0009883a 	mov	r4,zero
10003cac:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003cb0:	0140a404 	movi	r5,656
10003cb4:	0009883a 	mov	r4,zero
10003cb8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003cbc:	01401044 	movi	r5,65
10003cc0:	0009883a 	mov	r4,zero
10003cc4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003cc8:	014004c4 	movi	r5,19
10003ccc:	0009883a 	mov	r4,zero
10003cd0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003cd4:	01414804 	movi	r5,1312
10003cd8:	0009883a 	mov	r4,zero
10003cdc:	00028600 	call	10002860 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
10003ce0:	01415304 	movi	r5,1356
10003ce4:	0009883a 	mov	r4,zero
10003ce8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//2
10003cec:	01400044 	movi	r5,1
10003cf0:	0009883a 	mov	r4,zero
10003cf4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003cf8:	0140a404 	movi	r5,656
10003cfc:	0009883a 	mov	r4,zero
10003d00:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003d04:	01400044 	movi	r5,1
10003d08:	0009883a 	mov	r4,zero
10003d0c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003d10:	014004c4 	movi	r5,19
10003d14:	0009883a 	mov	r4,zero
10003d18:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003d1c:	01414b04 	movi	r5,1324
10003d20:	0009883a 	mov	r4,zero
10003d24:	00028600 	call	10002860 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
10003d28:	000b883a 	mov	r5,zero
10003d2c:	0009883a 	mov	r4,zero
10003d30:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//e
10003d34:	000b883a 	mov	r5,zero
10003d38:	0009883a 	mov	r4,zero
10003d3c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0210);//530
10003d40:	01408404 	movi	r5,528
10003d44:	0009883a 	mov	r4,zero
10003d48:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003d4c:	01401044 	movi	r5,65
10003d50:	0009883a 	mov	r4,zero
10003d54:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003d58:	014004c4 	movi	r5,19
10003d5c:	0009883a 	mov	r4,zero
10003d60:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10003d64:	000b883a 	mov	r5,zero
10003d68:	0009883a 	mov	r4,zero
10003d6c:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003d70:	01414004 	movi	r5,1280
10003d74:	01006c04 	movi	r4,432
10003d78:	00036940 	call	10003694 <usb_write>
}
10003d7c:	0001883a 	nop
10003d80:	e037883a 	mov	sp,fp
10003d84:	dfc00117 	ldw	ra,4(sp)
10003d88:	df000017 	ldw	fp,0(sp)
10003d8c:	dec00204 	addi	sp,sp,8
10003d90:	f800283a 	ret

10003d94 <usb_get_config_desc2>:


void usb_get_config_desc2() {
10003d94:	defffe04 	addi	sp,sp,-8
10003d98:	dfc00115 	stw	ra,4(sp)
10003d9c:	df000015 	stw	fp,0(sp)
10003da0:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003da4:	01414004 	movi	r5,1280
10003da8:	01000084 	movi	r4,2
10003dac:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10003db0:	01414304 	movi	r5,1292
10003db4:	0009883a 	mov	r4,zero
10003db8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003dbc:	01400204 	movi	r5,8
10003dc0:	0009883a 	mov	r4,zero
10003dc4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003dc8:	0140b404 	movi	r5,720
10003dcc:	0009883a 	mov	r4,zero
10003dd0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
10003dd4:	01400044 	movi	r5,1
10003dd8:	0009883a 	mov	r4,zero
10003ddc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10003de0:	014004c4 	movi	r5,19
10003de4:	0009883a 	mov	r4,zero
10003de8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
10003dec:	01414504 	movi	r5,1300
10003df0:	0009883a 	mov	r4,zero
10003df4:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003df8:	0141a004 	movi	r5,1664
10003dfc:	0009883a 	mov	r4,zero
10003e00:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10003e04:	01408004 	movi	r5,512
10003e08:	0009883a 	mov	r4,zero
10003e0c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003e10:	000b883a 	mov	r5,zero
10003e14:	0009883a 	mov	r4,zero
10003e18:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x00FF);//2
10003e1c:	01403fc4 	movi	r5,255
10003e20:	0009883a 	mov	r4,zero
10003e24:	00028600 	call	10002860 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x055c); //514
10003e28:	01415704 	movi	r5,1372
10003e2c:	0009883a 	mov	r4,zero
10003e30:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003e34:	01400204 	movi	r5,8
10003e38:	0009883a 	mov	r4,zero
10003e3c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003e40:	0140a404 	movi	r5,656
10003e44:	0009883a 	mov	r4,zero
10003e48:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003e4c:	01401044 	movi	r5,65
10003e50:	0009883a 	mov	r4,zero
10003e54:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003e58:	014004c4 	movi	r5,19
10003e5c:	0009883a 	mov	r4,zero
10003e60:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003e64:	01414804 	movi	r5,1312
10003e68:	0009883a 	mov	r4,zero
10003e6c:	00028600 	call	10002860 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0564); //520
10003e70:	01415904 	movi	r5,1380
10003e74:	0009883a 	mov	r4,zero
10003e78:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003e7c:	01400204 	movi	r5,8
10003e80:	0009883a 	mov	r4,zero
10003e84:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003e88:	0140a404 	movi	r5,656
10003e8c:	0009883a 	mov	r4,zero
10003e90:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003e94:	01400044 	movi	r5,1
10003e98:	0009883a 	mov	r4,zero
10003e9c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003ea0:	014004c4 	movi	r5,19
10003ea4:	0009883a 	mov	r4,zero
10003ea8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003eac:	01414b04 	movi	r5,1324
10003eb0:	0009883a 	mov	r4,zero
10003eb4:	00028600 	call	10002860 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x056c); //52c
10003eb8:	01415b04 	movi	r5,1388
10003ebc:	0009883a 	mov	r4,zero
10003ec0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10003ec4:	01400204 	movi	r5,8
10003ec8:	0009883a 	mov	r4,zero
10003ecc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10003ed0:	0140a404 	movi	r5,656
10003ed4:	0009883a 	mov	r4,zero
10003ed8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003edc:	01401044 	movi	r5,65
10003ee0:	0009883a 	mov	r4,zero
10003ee4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003ee8:	014004c4 	movi	r5,19
10003eec:	0009883a 	mov	r4,zero
10003ef0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10003ef4:	01414e04 	movi	r5,1336
10003ef8:	0009883a 	mov	r4,zero
10003efc:	00028600 	call	10002860 <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0574); //538
10003f00:	01415d04 	movi	r5,1396
10003f04:	0009883a 	mov	r4,zero
10003f08:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//a
10003f0c:	01400204 	movi	r5,8
10003f10:	0009883a 	mov	r4,zero
10003f14:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10003f18:	0140a404 	movi	r5,656
10003f1c:	0009883a 	mov	r4,zero
10003f20:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10003f24:	01400044 	movi	r5,1
10003f28:	0009883a 	mov	r4,zero
10003f2c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//540
10003f30:	014004c4 	movi	r5,19
10003f34:	0009883a 	mov	r4,zero
10003f38:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0544);//2
10003f3c:	01415104 	movi	r5,1348
10003f40:	0009883a 	mov	r4,zero
10003f44:	00028600 	call	10002860 <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x057c); //544
10003f48:	01415f04 	movi	r5,1404
10003f4c:	0009883a 	mov	r4,zero
10003f50:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0002);//6
10003f54:	01400084 	movi	r5,2
10003f58:	0009883a 	mov	r4,zero
10003f5c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003f60:	0140a404 	movi	r5,656
10003f64:	0009883a 	mov	r4,zero
10003f68:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
10003f6c:	01401044 	movi	r5,65
10003f70:	0009883a 	mov	r4,zero
10003f74:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003f78:	014004c4 	movi	r5,19
10003f7c:	0009883a 	mov	r4,zero
10003f80:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0550);//e
10003f84:	01415404 	movi	r5,1360
10003f88:	0009883a 	mov	r4,zero
10003f8c:	00028600 	call	10002860 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //550
10003f90:	000b883a 	mov	r5,zero
10003f94:	0009883a 	mov	r4,zero
10003f98:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//2
10003f9c:	000b883a 	mov	r5,zero
10003fa0:	0009883a 	mov	r4,zero
10003fa4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0210);//4
10003fa8:	01408404 	movi	r5,528
10003fac:	0009883a 	mov	r4,zero
10003fb0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//6
10003fb4:	01401044 	movi	r5,65
10003fb8:	0009883a 	mov	r4,zero
10003fbc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003fc0:	014004c4 	movi	r5,19
10003fc4:	0009883a 	mov	r4,zero
10003fc8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//a
10003fcc:	000b883a 	mov	r5,zero
10003fd0:	0009883a 	mov	r4,zero
10003fd4:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003fd8:	01414004 	movi	r5,1280
10003fdc:	01006c04 	movi	r4,432
10003fe0:	00036940 	call	10003694 <usb_write>
}
10003fe4:	0001883a 	nop
10003fe8:	e037883a 	mov	sp,fp
10003fec:	dfc00117 	ldw	ra,4(sp)
10003ff0:	df000017 	ldw	fp,0(sp)
10003ff4:	dec00204 	addi	sp,sp,8
10003ff8:	f800283a 	ret

10003ffc <usb_set_config>:

void usb_set_config() {
10003ffc:	defffe04 	addi	sp,sp,-8
10004000:	dfc00115 	stw	ra,4(sp)
10004004:	df000015 	stw	fp,0(sp)
10004008:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
1000400c:	01414004 	movi	r5,1280
10004010:	01000084 	movi	r4,2
10004014:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10004018:	01414304 	movi	r5,1292
1000401c:	0009883a 	mov	r4,zero
10004020:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10004024:	01400204 	movi	r5,8
10004028:	0009883a 	mov	r4,zero
1000402c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10004030:	0140b404 	movi	r5,720
10004034:	0009883a 	mov	r4,zero
10004038:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
1000403c:	01400044 	movi	r5,1
10004040:	0009883a 	mov	r4,zero
10004044:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10004048:	014004c4 	movi	r5,19
1000404c:	0009883a 	mov	r4,zero
10004050:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
10004054:	01414504 	movi	r5,1300
10004058:	0009883a 	mov	r4,zero
1000405c:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0900);
10004060:	01424004 	movi	r5,2304
10004064:	0009883a 	mov	r4,zero
10004068:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//device address
1000406c:	01400044 	movi	r5,1
10004070:	0009883a 	mov	r4,zero
10004074:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
10004078:	000b883a 	mov	r5,zero
1000407c:	0009883a 	mov	r4,zero
10004080:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
10004084:	000b883a 	mov	r5,zero
10004088:	0009883a 	mov	r4,zero
1000408c:	00028600 	call	10002860 <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10004090:	000b883a 	mov	r5,zero
10004094:	0009883a 	mov	r4,zero
10004098:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//port number
1000409c:	000b883a 	mov	r5,zero
100040a0:	0009883a 	mov	r4,zero
100040a4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//device address
100040a8:	0140a404 	movi	r5,656
100040ac:	0009883a 	mov	r4,zero
100040b0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
100040b4:	01401044 	movi	r5,65
100040b8:	0009883a 	mov	r4,zero
100040bc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
100040c0:	014004c4 	movi	r5,19
100040c4:	0009883a 	mov	r4,zero
100040c8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
100040cc:	000b883a 	mov	r5,zero
100040d0:	0009883a 	mov	r4,zero
100040d4:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100040d8:	01414004 	movi	r5,1280
100040dc:	01006c04 	movi	r4,432
100040e0:	00036940 	call	10003694 <usb_write>

}
100040e4:	0001883a 	nop
100040e8:	e037883a 	mov	sp,fp
100040ec:	dfc00117 	ldw	ra,4(sp)
100040f0:	df000017 	ldw	fp,0(sp)
100040f4:	dec00204 	addi	sp,sp,8
100040f8:	f800283a 	ret

100040fc <usb_class_request>:

void usb_class_request() {
100040fc:	defffe04 	addi	sp,sp,-8
10004100:	dfc00115 	stw	ra,4(sp)
10004104:	df000015 	stw	fp,0(sp)
10004108:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
1000410c:	01414004 	movi	r5,1280
10004110:	01000084 	movi	r4,2
10004114:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10004118:	01414304 	movi	r5,1292
1000411c:	0009883a 	mov	r4,zero
10004120:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10004124:	01400204 	movi	r5,8
10004128:	0009883a 	mov	r4,zero
1000412c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10004130:	0140b404 	movi	r5,720
10004134:	0009883a 	mov	r4,zero
10004138:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
1000413c:	01400044 	movi	r5,1
10004140:	0009883a 	mov	r4,zero
10004144:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10004148:	014004c4 	movi	r5,19
1000414c:	0009883a 	mov	r4,zero
10004150:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
10004154:	01414504 	movi	r5,1300
10004158:	0009883a 	mov	r4,zero
1000415c:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0A21);
10004160:	01428844 	movi	r5,2593
10004164:	0009883a 	mov	r4,zero
10004168:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//device address
1000416c:	000b883a 	mov	r5,zero
10004170:	0009883a 	mov	r4,zero
10004174:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
10004178:	000b883a 	mov	r5,zero
1000417c:	0009883a 	mov	r4,zero
10004180:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
10004184:	000b883a 	mov	r5,zero
10004188:	0009883a 	mov	r4,zero
1000418c:	00028600 	call	10002860 <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10004190:	000b883a 	mov	r5,zero
10004194:	0009883a 	mov	r4,zero
10004198:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//port number /data length
1000419c:	000b883a 	mov	r5,zero
100041a0:	0009883a 	mov	r4,zero
100041a4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//device address
100041a8:	0140a404 	movi	r5,656
100041ac:	0009883a 	mov	r4,zero
100041b0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
100041b4:	01401044 	movi	r5,65
100041b8:	0009883a 	mov	r4,zero
100041bc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
100041c0:	014004c4 	movi	r5,19
100041c4:	0009883a 	mov	r4,zero
100041c8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);
100041cc:	000b883a 	mov	r5,zero
100041d0:	0009883a 	mov	r4,zero
100041d4:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100041d8:	01414004 	movi	r5,1280
100041dc:	01006c04 	movi	r4,432
100041e0:	00036940 	call	10003694 <usb_write>
}
100041e4:	0001883a 	nop
100041e8:	e037883a 	mov	sp,fp
100041ec:	dfc00117 	ldw	ra,4(sp)
100041f0:	df000017 	ldw	fp,0(sp)
100041f4:	dec00204 	addi	sp,sp,8
100041f8:	f800283a 	ret

100041fc <usb_get_hid_desc>:


void usb_get_hid_desc() {
100041fc:	defffe04 	addi	sp,sp,-8
10004200:	dfc00115 	stw	ra,4(sp)
10004204:	df000015 	stw	fp,0(sp)
10004208:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
1000420c:	01414004 	movi	r5,1280
10004210:	01000084 	movi	r4,2
10004214:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10004218:	01414304 	movi	r5,1292
1000421c:	0009883a 	mov	r4,zero
10004220:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10004224:	01400204 	movi	r5,8
10004228:	0009883a 	mov	r4,zero
1000422c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10004230:	0140b404 	movi	r5,720
10004234:	0009883a 	mov	r4,zero
10004238:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
1000423c:	01400044 	movi	r5,1
10004240:	0009883a 	mov	r4,zero
10004244:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10004248:	014004c4 	movi	r5,19
1000424c:	0009883a 	mov	r4,zero
10004250:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
10004254:	01414504 	movi	r5,1300
10004258:	0009883a 	mov	r4,zero
1000425c:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
10004260:	0141a044 	movi	r5,1665
10004264:	0009883a 	mov	r4,zero
10004268:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x2100);//e //HID 0x21
1000426c:	01484004 	movi	r5,8448
10004270:	0009883a 	mov	r4,zero
10004274:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10004278:	000b883a 	mov	r5,zero
1000427c:	0009883a 	mov	r4,zero
10004280:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x007B);//2
10004284:	01401ec4 	movi	r5,123
10004288:	0009883a 	mov	r4,zero
1000428c:	00028600 	call	10002860 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10004290:	01415104 	movi	r5,1348
10004294:	0009883a 	mov	r4,zero
10004298:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//6
1000429c:	01400204 	movi	r5,8
100042a0:	0009883a 	mov	r4,zero
100042a4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
100042a8:	0140a404 	movi	r5,656
100042ac:	0009883a 	mov	r4,zero
100042b0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a
100042b4:	01401044 	movi	r5,65
100042b8:	0009883a 	mov	r4,zero
100042bc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
100042c0:	014004c4 	movi	r5,19
100042c4:	0009883a 	mov	r4,zero
100042c8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0520);//e
100042cc:	01414804 	movi	r5,1312
100042d0:	0009883a 	mov	r4,zero
100042d4:	00028600 	call	10002860 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
100042d8:	000b883a 	mov	r5,zero
100042dc:	0009883a 	mov	r4,zero
100042e0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//e
100042e4:	000b883a 	mov	r5,zero
100042e8:	0009883a 	mov	r4,zero
100042ec:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0210);//530
100042f0:	01408404 	movi	r5,528
100042f4:	0009883a 	mov	r4,zero
100042f8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//2
100042fc:	01401044 	movi	r5,65
10004300:	0009883a 	mov	r4,zero
10004304:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10004308:	014004c4 	movi	r5,19
1000430c:	0009883a 	mov	r4,zero
10004310:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10004314:	000b883a 	mov	r5,zero
10004318:	0009883a 	mov	r4,zero
1000431c:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10004320:	01414004 	movi	r5,1280
10004324:	01006c04 	movi	r4,432
10004328:	00036940 	call	10003694 <usb_write>

}
1000432c:	0001883a 	nop
10004330:	e037883a 	mov	sp,fp
10004334:	dfc00117 	ldw	ra,4(sp)
10004338:	df000017 	ldw	fp,0(sp)
1000433c:	dec00204 	addi	sp,sp,8
10004340:	f800283a 	ret

10004344 <usb_get_report_desc>:


void usb_get_report_desc() {
10004344:	defffe04 	addi	sp,sp,-8
10004348:	dfc00115 	stw	ra,4(sp)
1000434c:	df000015 	stw	fp,0(sp)
10004350:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10004354:	01414004 	movi	r5,1280
10004358:	01000084 	movi	r4,2
1000435c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x050C);
10004360:	01414304 	movi	r5,1292
10004364:	0009883a 	mov	r4,zero
10004368:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
1000436c:	01400204 	movi	r5,8
10004370:	0009883a 	mov	r4,zero
10004374:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10004378:	0140b404 	movi	r5,720
1000437c:	0009883a 	mov	r4,zero
10004380:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);
10004384:	01400044 	movi	r5,1
10004388:	0009883a 	mov	r4,zero
1000438c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);
10004390:	014004c4 	movi	r5,19
10004394:	0009883a 	mov	r4,zero
10004398:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0514);
1000439c:	01414504 	movi	r5,1300
100043a0:	0009883a 	mov	r4,zero
100043a4:	00028600 	call	10002860 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
100043a8:	0141a044 	movi	r5,1665
100043ac:	0009883a 	mov	r4,zero
100043b0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x2200);//e //report 0x22
100043b4:	01488004 	movi	r5,8704
100043b8:	0009883a 	mov	r4,zero
100043bc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//0
100043c0:	000b883a 	mov	r5,zero
100043c4:	0009883a 	mov	r4,zero
100043c8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x007B);//2
100043cc:	01401ec4 	movi	r5,123
100043d0:	0009883a 	mov	r4,zero
100043d4:	00028600 	call	10002860 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0580); //514
100043d8:	01416004 	movi	r5,1408
100043dc:	0009883a 	mov	r4,zero
100043e0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//6
100043e4:	01400204 	movi	r5,8
100043e8:	0009883a 	mov	r4,zero
100043ec:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
100043f0:	0140a404 	movi	r5,656
100043f4:	0009883a 	mov	r4,zero
100043f8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a
100043fc:	01401044 	movi	r5,65
10004400:	0009883a 	mov	r4,zero
10004404:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004408:	014004c4 	movi	r5,19
1000440c:	0009883a 	mov	r4,zero
10004410:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10004414:	01414804 	movi	r5,1312
10004418:	0009883a 	mov	r4,zero
1000441c:	00028600 	call	10002860 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0588); //520
10004420:	01416204 	movi	r5,1416
10004424:	0009883a 	mov	r4,zero
10004428:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//2
1000442c:	01400204 	movi	r5,8
10004430:	0009883a 	mov	r4,zero
10004434:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10004438:	0140a404 	movi	r5,656
1000443c:	0009883a 	mov	r4,zero
10004440:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10004444:	01400044 	movi	r5,1
10004448:	0009883a 	mov	r4,zero
1000444c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10004450:	014004c4 	movi	r5,19
10004454:	0009883a 	mov	r4,zero
10004458:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x052c);//a
1000445c:	01414b04 	movi	r5,1324
10004460:	0009883a 	mov	r4,zero
10004464:	00028600 	call	10002860 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0590); //52c
10004468:	01416404 	movi	r5,1424
1000446c:	0009883a 	mov	r4,zero
10004470:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10004474:	01400204 	movi	r5,8
10004478:	0009883a 	mov	r4,zero
1000447c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10004480:	0140a404 	movi	r5,656
10004484:	0009883a 	mov	r4,zero
10004488:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//2
1000448c:	01401044 	movi	r5,65
10004490:	0009883a 	mov	r4,zero
10004494:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10004498:	014004c4 	movi	r5,19
1000449c:	0009883a 	mov	r4,zero
100044a0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0538);//6
100044a4:	01414e04 	movi	r5,1336
100044a8:	0009883a 	mov	r4,zero
100044ac:	00028600 	call	10002860 <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0598); //538
100044b0:	01416604 	movi	r5,1432
100044b4:	0009883a 	mov	r4,zero
100044b8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//a
100044bc:	01400204 	movi	r5,8
100044c0:	0009883a 	mov	r4,zero
100044c4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//c
100044c8:	0140a404 	movi	r5,656
100044cc:	0009883a 	mov	r4,zero
100044d0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
100044d4:	01400044 	movi	r5,1
100044d8:	0009883a 	mov	r4,zero
100044dc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//540
100044e0:	014004c4 	movi	r5,19
100044e4:	0009883a 	mov	r4,zero
100044e8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0544);//2
100044ec:	01415104 	movi	r5,1348
100044f0:	0009883a 	mov	r4,zero
100044f4:	00028600 	call	10002860 <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x05a0); //544
100044f8:	01416804 	movi	r5,1440
100044fc:	0009883a 	mov	r4,zero
10004500:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10004504:	01400204 	movi	r5,8
10004508:	0009883a 	mov	r4,zero
1000450c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10004510:	0140a404 	movi	r5,656
10004514:	0009883a 	mov	r4,zero
10004518:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
1000451c:	01401044 	movi	r5,65
10004520:	0009883a 	mov	r4,zero
10004524:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004528:	014004c4 	movi	r5,19
1000452c:	0009883a 	mov	r4,zero
10004530:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0550);//e
10004534:	01415404 	movi	r5,1360
10004538:	0009883a 	mov	r4,zero
1000453c:	00028600 	call	10002860 <io_write>

    //data phase IN-6
    io_write(HPI_DATA, 0x05a8); //550
10004540:	01416a04 	movi	r5,1448
10004544:	0009883a 	mov	r4,zero
10004548:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//2
1000454c:	01400204 	movi	r5,8
10004550:	0009883a 	mov	r4,zero
10004554:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10004558:	0140a404 	movi	r5,656
1000455c:	0009883a 	mov	r4,zero
10004560:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10004564:	01400044 	movi	r5,1
10004568:	0009883a 	mov	r4,zero
1000456c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10004570:	014004c4 	movi	r5,19
10004574:	0009883a 	mov	r4,zero
10004578:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x055c);//a
1000457c:	01415704 	movi	r5,1372
10004580:	0009883a 	mov	r4,zero
10004584:	00028600 	call	10002860 <io_write>

    //data phase IN-7
    io_write(HPI_DATA, 0x05b0); //c
10004588:	01416c04 	movi	r5,1456
1000458c:	0009883a 	mov	r4,zero
10004590:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10004594:	01400204 	movi	r5,8
10004598:	0009883a 	mov	r4,zero
1000459c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//560
100045a0:	0140a404 	movi	r5,656
100045a4:	0009883a 	mov	r4,zero
100045a8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//2 //data1
100045ac:	01401044 	movi	r5,65
100045b0:	0009883a 	mov	r4,zero
100045b4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//4
100045b8:	014004c4 	movi	r5,19
100045bc:	0009883a 	mov	r4,zero
100045c0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0568);//6
100045c4:	01415a04 	movi	r5,1384
100045c8:	0009883a 	mov	r4,zero
100045cc:	00028600 	call	10002860 <io_write>

    //data phase IN-8
    io_write(HPI_DATA, 0x05b8); //8
100045d0:	01416e04 	movi	r5,1464
100045d4:	0009883a 	mov	r4,zero
100045d8:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0003);//a
100045dc:	014000c4 	movi	r5,3
100045e0:	0009883a 	mov	r4,zero
100045e4:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0290);//c
100045e8:	0140a404 	movi	r5,656
100045ec:	0009883a 	mov	r4,zero
100045f0:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
100045f4:	01400044 	movi	r5,1
100045f8:	0009883a 	mov	r4,zero
100045fc:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//570
10004600:	014004c4 	movi	r5,19
10004604:	0009883a 	mov	r4,zero
10004608:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0574);//2
1000460c:	01415d04 	movi	r5,1396
10004610:	0009883a 	mov	r4,zero
10004614:	00028600 	call	10002860 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //574
10004618:	000b883a 	mov	r5,zero
1000461c:	0009883a 	mov	r4,zero
10004620:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10004624:	000b883a 	mov	r5,zero
10004628:	0009883a 	mov	r4,zero
1000462c:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0210);//8
10004630:	01408404 	movi	r5,528
10004634:	0009883a 	mov	r4,zero
10004638:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0041);//a
1000463c:	01401044 	movi	r5,65
10004640:	0009883a 	mov	r4,zero
10004644:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004648:	014004c4 	movi	r5,19
1000464c:	0009883a 	mov	r4,zero
10004650:	00028600 	call	10002860 <io_write>
    io_write(HPI_DATA, 0x0000);//e
10004654:	000b883a 	mov	r5,zero
10004658:	0009883a 	mov	r4,zero
1000465c:	00028600 	call	10002860 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10004660:	01414004 	movi	r5,1280
10004664:	01006c04 	movi	r4,432
10004668:	00036940 	call	10003694 <usb_write>

}
1000466c:	0001883a 	nop
10004670:	e037883a 	mov	sp,fp
10004674:	dfc00117 	ldw	ra,4(sp)
10004678:	df000017 	ldw	fp,0(sp)
1000467c:	dec00204 	addi	sp,sp,8
10004680:	f800283a 	ret

10004684 <usb_wait_td_list_done>:


alt_u16 usb_wait_td_list_done() {
10004684:	defffd04 	addi	sp,sp,-12
10004688:	dfc00215 	stw	ra,8(sp)
1000468c:	df000115 	stw	fp,4(sp)
10004690:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
10004694:	01005104 	movi	r4,324
10004698:	00036ec0 	call	100036ec <usb_read>
1000469c:	e0bfff0d 	sth	r2,-4(fp)
    usb_write(HPI_SIE1_MSG_ADR, 0);
100046a0:	000b883a 	mov	r5,zero
100046a4:	01005104 	movi	r4,324
100046a8:	00036940 	call	10003694 <usb_write>
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100046ac:	00000d06 	br	100046e4 <usb_wait_td_list_done+0x60>
    {
        if (usb_ctl_val == 0x0000) {
100046b0:	e0bfff0b 	ldhu	r2,-4(fp)
100046b4:	10000526 	beq	r2,zero,100046cc <usb_wait_td_list_done+0x48>
        } else {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
100046b8:	e0bfff0b 	ldhu	r2,-4(fp)
100046bc:	100b883a 	mov	r5,r2
100046c0:	01040074 	movhi	r4,4097
100046c4:	21130f04 	addi	r4,r4,19516
100046c8:	0004c200 	call	10004c20 <printf>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
100046cc:	01005104 	movi	r4,324
100046d0:	00036ec0 	call	100036ec <usb_read>
100046d4:	e0bfff0d 	sth	r2,-4(fp)
        usb_write(HPI_SIE1_MSG_ADR, 0);
100046d8:	000b883a 	mov	r5,zero
100046dc:	01005104 	movi	r4,324
100046e0:	00036940 	call	10003694 <usb_write>
alt_u16 usb_wait_td_list_done() {
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
    usb_write(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100046e4:	e0bfff0b 	ldhu	r2,-4(fp)
100046e8:	10840018 	cmpnei	r2,r2,4096
100046ec:	103ff01e 	bne	r2,zero,100046b0 <__alt_data_end+0xf80046b0>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
        usb_write(HPI_SIE1_MSG_ADR, 0);
    }

    return usb_ctl_val;
100046f0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100046f4:	e037883a 	mov	sp,fp
100046f8:	dfc00117 	ldw	ra,4(sp)
100046fc:	df000017 	ldw	fp,0(sp)
10004700:	dec00204 	addi	sp,sp,8
10004704:	f800283a 	ret

10004708 <usb_get_retry_cnt>:


alt_u16 usb_get_retry_cnt() {
10004708:	defffd04 	addi	sp,sp,-12
1000470c:	dfc00215 	stw	ra,8(sp)
10004710:	df000115 	stw	fp,4(sp)
10004714:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    io_read(HPI_STATUS);
10004718:	010000c4 	movi	r4,3
1000471c:	00028d00 	call	100028d0 <io_read>
    if (usb_read(HPI_SIE1_MSG_ADR) == HUSB_TDListDone) {
10004720:	01005104 	movi	r4,324
10004724:	00036ec0 	call	100036ec <usb_read>
10004728:	10bfffcc 	andi	r2,r2,65535
1000472c:	10840018 	cmpnei	r2,r2,4096
10004730:	1000091e 	bne	r2,zero,10004758 <usb_get_retry_cnt+0x50>
        usb_write(HPI_SIE1_MSG_ADR, 0);
10004734:	000b883a 	mov	r5,zero
10004738:	01005104 	movi	r4,324
1000473c:	00036940 	call	10003694 <usb_write>

        while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  //read sie1 msg register
10004740:	0001883a 	nop
10004744:	010000c4 	movi	r4,3
10004748:	00028d00 	call	100028d0 <io_read>
1000474c:	10bfffcc 	andi	r2,r2,65535
10004750:	1080040c 	andi	r2,r2,16
10004754:	103ffb26 	beq	r2,zero,10004744 <__alt_data_end+0xf8004744>
        {
        }
    }
    //usleep(1000);
    io_write(HPI_ADDR, 0x0508);
10004758:	01414204 	movi	r5,1288
1000475c:	01000084 	movi	r4,2
10004760:	00028600 	call	10002860 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10004764:	0009883a 	mov	r4,zero
10004768:	00028d00 	call	100028d0 <io_read>
1000476c:	e0bfff0d 	sth	r2,-4(fp)

    return usb_ctl_val;
10004770:	e0bfff0b 	ldhu	r2,-4(fp)
}
10004774:	e037883a 	mov	sp,fp
10004778:	dfc00117 	ldw	ra,4(sp)
1000477c:	df000017 	ldw	fp,0(sp)
10004780:	dec00204 	addi	sp,sp,8
10004784:	f800283a 	ret

10004788 <usb_print_mem>:


void usb_print_mem() {
10004788:	defffc04 	addi	sp,sp,-16
1000478c:	dfc00315 	stw	ra,12(sp)
10004790:	df000215 	stw	fp,8(sp)
10004794:	df000204 	addi	fp,sp,8
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
10004798:	01414004 	movi	r5,1280
1000479c:	01000084 	movi	r4,2
100047a0:	00028600 	call	10002860 <io_write>
    for (i = 0; i <= 200; i += 2) {
100047a4:	e03ffe15 	stw	zero,-8(fp)
100047a8:	00000e06 	br	100047e4 <usb_print_mem+0x5c>
        code = io_read(HPI_DATA);
100047ac:	0009883a 	mov	r4,zero
100047b0:	00028d00 	call	100028d0 <io_read>
100047b4:	10bfffcc 	andi	r2,r2,65535
100047b8:	e0bfff15 	stw	r2,-4(fp)
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
100047bc:	e0bffe17 	ldw	r2,-8(fp)
100047c0:	10814004 	addi	r2,r2,1280
100047c4:	e1bfff17 	ldw	r6,-4(fp)
100047c8:	100b883a 	mov	r5,r2
100047cc:	01040074 	movhi	r4,4097
100047d0:	21131704 	addi	r4,r4,19548
100047d4:	0004c200 	call	10004c20 <printf>


void usb_print_mem() {
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
    for (i = 0; i <= 200; i += 2) {
100047d8:	e0bffe17 	ldw	r2,-8(fp)
100047dc:	10800084 	addi	r2,r2,2
100047e0:	e0bffe15 	stw	r2,-8(fp)
100047e4:	e0bffe17 	ldw	r2,-8(fp)
100047e8:	10803250 	cmplti	r2,r2,201
100047ec:	103fef1e 	bne	r2,zero,100047ac <__alt_data_end+0xf80047ac>
        code = io_read(HPI_DATA);
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
    }
}
100047f0:	0001883a 	nop
100047f4:	e037883a 	mov	sp,fp
100047f8:	dfc00117 	ldw	ra,4(sp)
100047fc:	df000017 	ldw	fp,0(sp)
10004800:	dec00204 	addi	sp,sp,8
10004804:	f800283a 	ret

10004808 <keys_to_direction>:
        79,  // Right
        81,  // Down
        80   // Left
};

int keys_to_direction(const unsigned char dkey_pressed[]) {
10004808:	defffe04 	addi	sp,sp,-8
1000480c:	df000115 	stw	fp,4(sp)
10004810:	df000104 	addi	fp,sp,4
10004814:	e13fff15 	stw	r4,-4(fp)
    if (dkey_pressed[0] && dkey_pressed[1]) return 1;
10004818:	e0bfff17 	ldw	r2,-4(fp)
1000481c:	10800003 	ldbu	r2,0(r2)
10004820:	10803fcc 	andi	r2,r2,255
10004824:	10000726 	beq	r2,zero,10004844 <keys_to_direction+0x3c>
10004828:	e0bfff17 	ldw	r2,-4(fp)
1000482c:	10800044 	addi	r2,r2,1
10004830:	10800003 	ldbu	r2,0(r2)
10004834:	10803fcc 	andi	r2,r2,255
10004838:	10000226 	beq	r2,zero,10004844 <keys_to_direction+0x3c>
1000483c:	00800044 	movi	r2,1
10004840:	00003f06 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[1] && dkey_pressed[2]) return 3;
10004844:	e0bfff17 	ldw	r2,-4(fp)
10004848:	10800044 	addi	r2,r2,1
1000484c:	10800003 	ldbu	r2,0(r2)
10004850:	10803fcc 	andi	r2,r2,255
10004854:	10000726 	beq	r2,zero,10004874 <keys_to_direction+0x6c>
10004858:	e0bfff17 	ldw	r2,-4(fp)
1000485c:	10800084 	addi	r2,r2,2
10004860:	10800003 	ldbu	r2,0(r2)
10004864:	10803fcc 	andi	r2,r2,255
10004868:	10000226 	beq	r2,zero,10004874 <keys_to_direction+0x6c>
1000486c:	008000c4 	movi	r2,3
10004870:	00003306 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[2] && dkey_pressed[3]) return 5;
10004874:	e0bfff17 	ldw	r2,-4(fp)
10004878:	10800084 	addi	r2,r2,2
1000487c:	10800003 	ldbu	r2,0(r2)
10004880:	10803fcc 	andi	r2,r2,255
10004884:	10000726 	beq	r2,zero,100048a4 <keys_to_direction+0x9c>
10004888:	e0bfff17 	ldw	r2,-4(fp)
1000488c:	108000c4 	addi	r2,r2,3
10004890:	10800003 	ldbu	r2,0(r2)
10004894:	10803fcc 	andi	r2,r2,255
10004898:	10000226 	beq	r2,zero,100048a4 <keys_to_direction+0x9c>
1000489c:	00800144 	movi	r2,5
100048a0:	00002706 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[3] && dkey_pressed[0]) return 7;
100048a4:	e0bfff17 	ldw	r2,-4(fp)
100048a8:	108000c4 	addi	r2,r2,3
100048ac:	10800003 	ldbu	r2,0(r2)
100048b0:	10803fcc 	andi	r2,r2,255
100048b4:	10000626 	beq	r2,zero,100048d0 <keys_to_direction+0xc8>
100048b8:	e0bfff17 	ldw	r2,-4(fp)
100048bc:	10800003 	ldbu	r2,0(r2)
100048c0:	10803fcc 	andi	r2,r2,255
100048c4:	10000226 	beq	r2,zero,100048d0 <keys_to_direction+0xc8>
100048c8:	008001c4 	movi	r2,7
100048cc:	00001c06 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[0]) return 0;
100048d0:	e0bfff17 	ldw	r2,-4(fp)
100048d4:	10800003 	ldbu	r2,0(r2)
100048d8:	10803fcc 	andi	r2,r2,255
100048dc:	10000226 	beq	r2,zero,100048e8 <keys_to_direction+0xe0>
100048e0:	0005883a 	mov	r2,zero
100048e4:	00001606 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[1]) return 2;
100048e8:	e0bfff17 	ldw	r2,-4(fp)
100048ec:	10800044 	addi	r2,r2,1
100048f0:	10800003 	ldbu	r2,0(r2)
100048f4:	10803fcc 	andi	r2,r2,255
100048f8:	10000226 	beq	r2,zero,10004904 <keys_to_direction+0xfc>
100048fc:	00800084 	movi	r2,2
10004900:	00000f06 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[2]) return 4;
10004904:	e0bfff17 	ldw	r2,-4(fp)
10004908:	10800084 	addi	r2,r2,2
1000490c:	10800003 	ldbu	r2,0(r2)
10004910:	10803fcc 	andi	r2,r2,255
10004914:	10000226 	beq	r2,zero,10004920 <keys_to_direction+0x118>
10004918:	00800104 	movi	r2,4
1000491c:	00000806 	br	10004940 <keys_to_direction+0x138>
    if (dkey_pressed[3]) return 6;
10004920:	e0bfff17 	ldw	r2,-4(fp)
10004924:	108000c4 	addi	r2,r2,3
10004928:	10800003 	ldbu	r2,0(r2)
1000492c:	10803fcc 	andi	r2,r2,255
10004930:	10000226 	beq	r2,zero,1000493c <keys_to_direction+0x134>
10004934:	00800184 	movi	r2,6
10004938:	00000106 	br	10004940 <keys_to_direction+0x138>
    return -1;
1000493c:	00bfffc4 	movi	r2,-1
}
10004940:	e037883a 	mov	sp,fp
10004944:	df000017 	ldw	fp,0(sp)
10004948:	dec00104 	addi	sp,sp,4
1000494c:	f800283a 	ret

10004950 <main>:

int main() {
10004950:	defff004 	addi	sp,sp,-64
10004954:	dfc00f15 	stw	ra,60(sp)
10004958:	df000e15 	stw	fp,56(sp)
1000495c:	df000e04 	addi	fp,sp,56

    keyboard_init();
10004960:	00029380 	call	10002938 <keyboard_init>
    graphic_engine_reset();
10004964:	00026200 	call	10002620 <graphic_engine_reset>
    init_game();
10004968:	00015b80 	call	100015b8 <init_game>

    unsigned char keycode[8];

    unsigned int frame_count = 0;
1000496c:	e03ff315 	stw	zero,-52(fp)

    unsigned char dkey_pressed_1[4];  // {W, D, S, A}
    unsigned char dkey_pressed_2[4];  // {up, right, down, left}

    int direction_1 = -1, direction_2 = -1;
10004970:	00bfffc4 	movi	r2,-1
10004974:	e0bff415 	stw	r2,-48(fp)
10004978:	00bfffc4 	movi	r2,-1
1000497c:	e0bff515 	stw	r2,-44(fp)
    int attack_1 = 0, attack_2 = 0;
10004980:	e03ff615 	stw	zero,-40(fp)
10004984:	e03ff715 	stw	zero,-36(fp)

    while (1) {

       if (frame_count == 0) {
10004988:	e0bff317 	ldw	r2,-52(fp)
1000498c:	1000741e 	bne	r2,zero,10004b60 <main+0x210>
            // Fetch keycodes at frame 0
            if (keyboard_fetch((alt_u16 *) (&keycode)) != 0) {
10004990:	e0bffc04 	addi	r2,fp,-16
10004994:	1009883a 	mov	r4,r2
10004998:	00034380 	call	10003438 <keyboard_fetch>
1000499c:	10000f26 	beq	r2,zero,100049dc <main+0x8c>
                // Failed to fetch keycode
                for (int i = 0; i < 8; i++) {
100049a0:	e03ff815 	stw	zero,-32(fp)
100049a4:	00000706 	br	100049c4 <main+0x74>
                    keycode[i] = 0;
100049a8:	e0fffc04 	addi	r3,fp,-16
100049ac:	e0bff817 	ldw	r2,-32(fp)
100049b0:	1885883a 	add	r2,r3,r2
100049b4:	10000005 	stb	zero,0(r2)

       if (frame_count == 0) {
            // Fetch keycodes at frame 0
            if (keyboard_fetch((alt_u16 *) (&keycode)) != 0) {
                // Failed to fetch keycode
                for (int i = 0; i < 8; i++) {
100049b8:	e0bff817 	ldw	r2,-32(fp)
100049bc:	10800044 	addi	r2,r2,1
100049c0:	e0bff815 	stw	r2,-32(fp)
100049c4:	e0bff817 	ldw	r2,-32(fp)
100049c8:	10800210 	cmplti	r2,r2,8
100049cc:	103ff61e 	bne	r2,zero,100049a8 <__alt_data_end+0xf80049a8>
                    keycode[i] = 0;
                }
                printf("FAILED TO FETCH KEYCODE!\n");
100049d0:	01040074 	movhi	r4,4097
100049d4:	21131c04 	addi	r4,r4,19568
100049d8:	0004d1c0 	call	10004d1c <puts>
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
100049dc:	e03ff915 	stw	zero,-28(fp)
100049e0:	00003706 	br	10004ac0 <main+0x170>
                dkey_pressed_1[key] = dkey_pressed_2[key] = 0;
100049e4:	e0ffff04 	addi	r3,fp,-4
100049e8:	e0bff917 	ldw	r2,-28(fp)
100049ec:	1885883a 	add	r2,r3,r2
100049f0:	10000005 	stb	zero,0(r2)
100049f4:	e0ffff04 	addi	r3,fp,-4
100049f8:	e0bff917 	ldw	r2,-28(fp)
100049fc:	1885883a 	add	r2,r3,r2
10004a00:	10c00003 	ldbu	r3,0(r2)
10004a04:	e13ffe04 	addi	r4,fp,-8
10004a08:	e0bff917 	ldw	r2,-28(fp)
10004a0c:	2085883a 	add	r2,r4,r2
10004a10:	10c00005 	stb	r3,0(r2)
                for (int i = 0; i < 8; i++) {
10004a14:	e03ffa15 	stw	zero,-24(fp)
10004a18:	00002306 	br	10004aa8 <main+0x158>
                    if (keycode[i] == DKEY_KEYCODE_1[key]) {
10004a1c:	e0fffc04 	addi	r3,fp,-16
10004a20:	e0bffa17 	ldw	r2,-24(fp)
10004a24:	1885883a 	add	r2,r3,r2
10004a28:	11000003 	ldbu	r4,0(r2)
10004a2c:	e0fff917 	ldw	r3,-28(fp)
10004a30:	d0a00104 	addi	r2,gp,-32764
10004a34:	1885883a 	add	r2,r3,r2
10004a38:	10800003 	ldbu	r2,0(r2)
10004a3c:	20c03fcc 	andi	r3,r4,255
10004a40:	10803fcc 	andi	r2,r2,255
10004a44:	1880051e 	bne	r3,r2,10004a5c <main+0x10c>
                        dkey_pressed_1[key] = 1;
10004a48:	e0fffe04 	addi	r3,fp,-8
10004a4c:	e0bff917 	ldw	r2,-28(fp)
10004a50:	1885883a 	add	r2,r3,r2
10004a54:	00c00044 	movi	r3,1
10004a58:	10c00005 	stb	r3,0(r2)
                    }
                    if (keycode[i] == DKEY_KEYCODE_2[key]) {
10004a5c:	e0fffc04 	addi	r3,fp,-16
10004a60:	e0bffa17 	ldw	r2,-24(fp)
10004a64:	1885883a 	add	r2,r3,r2
10004a68:	11000003 	ldbu	r4,0(r2)
10004a6c:	e0fff917 	ldw	r3,-28(fp)
10004a70:	d0a00204 	addi	r2,gp,-32760
10004a74:	1885883a 	add	r2,r3,r2
10004a78:	10800003 	ldbu	r2,0(r2)
10004a7c:	20c03fcc 	andi	r3,r4,255
10004a80:	10803fcc 	andi	r2,r2,255
10004a84:	1880051e 	bne	r3,r2,10004a9c <main+0x14c>
                        dkey_pressed_2[key] = 1;
10004a88:	e0ffff04 	addi	r3,fp,-4
10004a8c:	e0bff917 	ldw	r2,-28(fp)
10004a90:	1885883a 	add	r2,r3,r2
10004a94:	00c00044 	movi	r3,1
10004a98:	10c00005 	stb	r3,0(r2)
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
                dkey_pressed_1[key] = dkey_pressed_2[key] = 0;
                for (int i = 0; i < 8; i++) {
10004a9c:	e0bffa17 	ldw	r2,-24(fp)
10004aa0:	10800044 	addi	r2,r2,1
10004aa4:	e0bffa15 	stw	r2,-24(fp)
10004aa8:	e0bffa17 	ldw	r2,-24(fp)
10004aac:	10800210 	cmplti	r2,r2,8
10004ab0:	103fda1e 	bne	r2,zero,10004a1c <__alt_data_end+0xf8004a1c>
                }
                printf("FAILED TO FETCH KEYCODE!\n");
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
10004ab4:	e0bff917 	ldw	r2,-28(fp)
10004ab8:	10800044 	addi	r2,r2,1
10004abc:	e0bff915 	stw	r2,-28(fp)
10004ac0:	e0bff917 	ldw	r2,-28(fp)
10004ac4:	10800110 	cmplti	r2,r2,4
10004ac8:	103fc61e 	bne	r2,zero,100049e4 <__alt_data_end+0xf80049e4>
                    if (keycode[i] == DKEY_KEYCODE_2[key]) {
                        dkey_pressed_2[key] = 1;
                    }
                }
            }
            direction_1 = keys_to_direction(dkey_pressed_1);
10004acc:	e0bffe04 	addi	r2,fp,-8
10004ad0:	1009883a 	mov	r4,r2
10004ad4:	00048080 	call	10004808 <keys_to_direction>
10004ad8:	e0bff415 	stw	r2,-48(fp)
            direction_2 = keys_to_direction(dkey_pressed_2);
10004adc:	e0bfff04 	addi	r2,fp,-4
10004ae0:	1009883a 	mov	r4,r2
10004ae4:	00048080 	call	10004808 <keys_to_direction>
10004ae8:	e0bff515 	stw	r2,-44(fp)

            attack_1 = attack_2 = 0;
10004aec:	e03ff715 	stw	zero,-36(fp)
10004af0:	e0bff717 	ldw	r2,-36(fp)
10004af4:	e0bff615 	stw	r2,-40(fp)
            for (int i = 0; i < 8; i++) {
10004af8:	e03ffb15 	stw	zero,-20(fp)
10004afc:	00001506 	br	10004b54 <main+0x204>
                if (keycode[i] == 44) {  // Space
10004b00:	e0fffc04 	addi	r3,fp,-16
10004b04:	e0bffb17 	ldw	r2,-20(fp)
10004b08:	1885883a 	add	r2,r3,r2
10004b0c:	10800003 	ldbu	r2,0(r2)
10004b10:	10803fcc 	andi	r2,r2,255
10004b14:	10800b18 	cmpnei	r2,r2,44
10004b18:	1000021e 	bne	r2,zero,10004b24 <main+0x1d4>
                    attack_1 = 1;
10004b1c:	00800044 	movi	r2,1
10004b20:	e0bff615 	stw	r2,-40(fp)
                }
                if (keycode[i] == 40) {  // Enter
10004b24:	e0fffc04 	addi	r3,fp,-16
10004b28:	e0bffb17 	ldw	r2,-20(fp)
10004b2c:	1885883a 	add	r2,r3,r2
10004b30:	10800003 	ldbu	r2,0(r2)
10004b34:	10803fcc 	andi	r2,r2,255
10004b38:	10800a18 	cmpnei	r2,r2,40
10004b3c:	1000021e 	bne	r2,zero,10004b48 <main+0x1f8>
                    attack_2 = 1;
10004b40:	00800044 	movi	r2,1
10004b44:	e0bff715 	stw	r2,-36(fp)
            }
            direction_1 = keys_to_direction(dkey_pressed_1);
            direction_2 = keys_to_direction(dkey_pressed_2);

            attack_1 = attack_2 = 0;
            for (int i = 0; i < 8; i++) {
10004b48:	e0bffb17 	ldw	r2,-20(fp)
10004b4c:	10800044 	addi	r2,r2,1
10004b50:	e0bffb15 	stw	r2,-20(fp)
10004b54:	e0bffb17 	ldw	r2,-20(fp)
10004b58:	10800210 	cmplti	r2,r2,8
10004b5c:	103fe81e 	bne	r2,zero,10004b00 <__alt_data_end+0xf8004b00>
                    attack_2 = 1;
                }
            }
       }

       if (frame_count == 0) {
10004b60:	e0bff317 	ldw	r2,-52(fp)
10004b64:	1000081e 	bne	r2,zero,10004b88 <main+0x238>
            // Update game state at frame 1
            refresh(1, direction_1, direction_2, attack_1, attack_2);
10004b68:	e0bff717 	ldw	r2,-36(fp)
10004b6c:	d8800015 	stw	r2,0(sp)
10004b70:	e1fff617 	ldw	r7,-40(fp)
10004b74:	e1bff517 	ldw	r6,-44(fp)
10004b78:	e17ff417 	ldw	r5,-48(fp)
10004b7c:	01000044 	movi	r4,1
10004b80:	00023a40 	call	100023a4 <refresh>
10004b84:	00000706 	br	10004ba4 <main+0x254>
       } else {
            // For other frames, only draw
            refresh(0, direction_1, direction_2, attack_1, attack_2);
10004b88:	e0bff717 	ldw	r2,-36(fp)
10004b8c:	d8800015 	stw	r2,0(sp)
10004b90:	e1fff617 	ldw	r7,-40(fp)
10004b94:	e1bff517 	ldw	r6,-44(fp)
10004b98:	e17ff417 	ldw	r5,-48(fp)
10004b9c:	0009883a 	mov	r4,zero
10004ba0:	00023a40 	call	100023a4 <refresh>
       }

       frame_count++;
10004ba4:	e0bff317 	ldw	r2,-52(fp)
10004ba8:	10800044 	addi	r2,r2,1
10004bac:	e0bff315 	stw	r2,-52(fp)
       if (frame_count == 1) {
10004bb0:	e0bff317 	ldw	r2,-52(fp)
10004bb4:	10800058 	cmpnei	r2,r2,1
10004bb8:	1000011e 	bne	r2,zero,10004bc0 <main+0x270>
           frame_count = 0;
10004bbc:	e03ff315 	stw	zero,-52(fp)
       }


        wait_for_next_frame();
10004bc0:	000276c0 	call	1000276c <wait_for_next_frame>
    }
10004bc4:	003f7006 	br	10004988 <__alt_data_end+0xf8004988>

10004bc8 <__mulsi3>:
10004bc8:	0005883a 	mov	r2,zero
10004bcc:	20000726 	beq	r4,zero,10004bec <__mulsi3+0x24>
10004bd0:	20c0004c 	andi	r3,r4,1
10004bd4:	2008d07a 	srli	r4,r4,1
10004bd8:	18000126 	beq	r3,zero,10004be0 <__mulsi3+0x18>
10004bdc:	1145883a 	add	r2,r2,r5
10004be0:	294b883a 	add	r5,r5,r5
10004be4:	203ffa1e 	bne	r4,zero,10004bd0 <__alt_data_end+0xf8004bd0>
10004be8:	f800283a 	ret
10004bec:	f800283a 	ret

10004bf0 <_printf_r>:
10004bf0:	defffd04 	addi	sp,sp,-12
10004bf4:	2805883a 	mov	r2,r5
10004bf8:	dfc00015 	stw	ra,0(sp)
10004bfc:	d9800115 	stw	r6,4(sp)
10004c00:	d9c00215 	stw	r7,8(sp)
10004c04:	21400217 	ldw	r5,8(r4)
10004c08:	d9c00104 	addi	r7,sp,4
10004c0c:	100d883a 	mov	r6,r2
10004c10:	0004dc80 	call	10004dc8 <___vfprintf_internal_r>
10004c14:	dfc00017 	ldw	ra,0(sp)
10004c18:	dec00304 	addi	sp,sp,12
10004c1c:	f800283a 	ret

10004c20 <printf>:
10004c20:	defffc04 	addi	sp,sp,-16
10004c24:	dfc00015 	stw	ra,0(sp)
10004c28:	d9400115 	stw	r5,4(sp)
10004c2c:	d9800215 	stw	r6,8(sp)
10004c30:	d9c00315 	stw	r7,12(sp)
10004c34:	00840074 	movhi	r2,4097
10004c38:	109e4204 	addi	r2,r2,30984
10004c3c:	10800017 	ldw	r2,0(r2)
10004c40:	200b883a 	mov	r5,r4
10004c44:	d9800104 	addi	r6,sp,4
10004c48:	11000217 	ldw	r4,8(r2)
10004c4c:	00070a40 	call	100070a4 <__vfprintf_internal>
10004c50:	dfc00017 	ldw	ra,0(sp)
10004c54:	dec00404 	addi	sp,sp,16
10004c58:	f800283a 	ret

10004c5c <_puts_r>:
10004c5c:	defff604 	addi	sp,sp,-40
10004c60:	dc000715 	stw	r16,28(sp)
10004c64:	2021883a 	mov	r16,r4
10004c68:	2809883a 	mov	r4,r5
10004c6c:	dc400815 	stw	r17,32(sp)
10004c70:	dfc00915 	stw	ra,36(sp)
10004c74:	2823883a 	mov	r17,r5
10004c78:	0004d300 	call	10004d30 <strlen>
10004c7c:	10c00044 	addi	r3,r2,1
10004c80:	d8800115 	stw	r2,4(sp)
10004c84:	00840074 	movhi	r2,4097
10004c88:	10932304 	addi	r2,r2,19596
10004c8c:	d8800215 	stw	r2,8(sp)
10004c90:	00800044 	movi	r2,1
10004c94:	d8800315 	stw	r2,12(sp)
10004c98:	00800084 	movi	r2,2
10004c9c:	dc400015 	stw	r17,0(sp)
10004ca0:	d8c00615 	stw	r3,24(sp)
10004ca4:	dec00415 	stw	sp,16(sp)
10004ca8:	d8800515 	stw	r2,20(sp)
10004cac:	80000226 	beq	r16,zero,10004cb8 <_puts_r+0x5c>
10004cb0:	80800e17 	ldw	r2,56(r16)
10004cb4:	10001426 	beq	r2,zero,10004d08 <_puts_r+0xac>
10004cb8:	81400217 	ldw	r5,8(r16)
10004cbc:	2880030b 	ldhu	r2,12(r5)
10004cc0:	10c8000c 	andi	r3,r2,8192
10004cc4:	1800061e 	bne	r3,zero,10004ce0 <_puts_r+0x84>
10004cc8:	29001917 	ldw	r4,100(r5)
10004ccc:	00f7ffc4 	movi	r3,-8193
10004cd0:	10880014 	ori	r2,r2,8192
10004cd4:	20c6703a 	and	r3,r4,r3
10004cd8:	2880030d 	sth	r2,12(r5)
10004cdc:	28c01915 	stw	r3,100(r5)
10004ce0:	d9800404 	addi	r6,sp,16
10004ce4:	8009883a 	mov	r4,r16
10004ce8:	000960c0 	call	1000960c <__sfvwrite_r>
10004cec:	1000091e 	bne	r2,zero,10004d14 <_puts_r+0xb8>
10004cf0:	00800284 	movi	r2,10
10004cf4:	dfc00917 	ldw	ra,36(sp)
10004cf8:	dc400817 	ldw	r17,32(sp)
10004cfc:	dc000717 	ldw	r16,28(sp)
10004d00:	dec00a04 	addi	sp,sp,40
10004d04:	f800283a 	ret
10004d08:	8009883a 	mov	r4,r16
10004d0c:	00091880 	call	10009188 <__sinit>
10004d10:	003fe906 	br	10004cb8 <__alt_data_end+0xf8004cb8>
10004d14:	00bfffc4 	movi	r2,-1
10004d18:	003ff606 	br	10004cf4 <__alt_data_end+0xf8004cf4>

10004d1c <puts>:
10004d1c:	00840074 	movhi	r2,4097
10004d20:	109e4204 	addi	r2,r2,30984
10004d24:	200b883a 	mov	r5,r4
10004d28:	11000017 	ldw	r4,0(r2)
10004d2c:	0004c5c1 	jmpi	10004c5c <_puts_r>

10004d30 <strlen>:
10004d30:	208000cc 	andi	r2,r4,3
10004d34:	10002026 	beq	r2,zero,10004db8 <strlen+0x88>
10004d38:	20800007 	ldb	r2,0(r4)
10004d3c:	10002026 	beq	r2,zero,10004dc0 <strlen+0x90>
10004d40:	2005883a 	mov	r2,r4
10004d44:	00000206 	br	10004d50 <strlen+0x20>
10004d48:	10c00007 	ldb	r3,0(r2)
10004d4c:	18001826 	beq	r3,zero,10004db0 <strlen+0x80>
10004d50:	10800044 	addi	r2,r2,1
10004d54:	10c000cc 	andi	r3,r2,3
10004d58:	183ffb1e 	bne	r3,zero,10004d48 <__alt_data_end+0xf8004d48>
10004d5c:	10c00017 	ldw	r3,0(r2)
10004d60:	01ffbff4 	movhi	r7,65279
10004d64:	39ffbfc4 	addi	r7,r7,-257
10004d68:	00ca303a 	nor	r5,zero,r3
10004d6c:	01a02074 	movhi	r6,32897
10004d70:	19c7883a 	add	r3,r3,r7
10004d74:	31a02004 	addi	r6,r6,-32640
10004d78:	1946703a 	and	r3,r3,r5
10004d7c:	1986703a 	and	r3,r3,r6
10004d80:	1800091e 	bne	r3,zero,10004da8 <strlen+0x78>
10004d84:	10800104 	addi	r2,r2,4
10004d88:	10c00017 	ldw	r3,0(r2)
10004d8c:	19cb883a 	add	r5,r3,r7
10004d90:	00c6303a 	nor	r3,zero,r3
10004d94:	28c6703a 	and	r3,r5,r3
10004d98:	1986703a 	and	r3,r3,r6
10004d9c:	183ff926 	beq	r3,zero,10004d84 <__alt_data_end+0xf8004d84>
10004da0:	00000106 	br	10004da8 <strlen+0x78>
10004da4:	10800044 	addi	r2,r2,1
10004da8:	10c00007 	ldb	r3,0(r2)
10004dac:	183ffd1e 	bne	r3,zero,10004da4 <__alt_data_end+0xf8004da4>
10004db0:	1105c83a 	sub	r2,r2,r4
10004db4:	f800283a 	ret
10004db8:	2005883a 	mov	r2,r4
10004dbc:	003fe706 	br	10004d5c <__alt_data_end+0xf8004d5c>
10004dc0:	0005883a 	mov	r2,zero
10004dc4:	f800283a 	ret

10004dc8 <___vfprintf_internal_r>:
10004dc8:	deffb804 	addi	sp,sp,-288
10004dcc:	dfc04715 	stw	ra,284(sp)
10004dd0:	ddc04515 	stw	r23,276(sp)
10004dd4:	dd404315 	stw	r21,268(sp)
10004dd8:	d9002d15 	stw	r4,180(sp)
10004ddc:	282f883a 	mov	r23,r5
10004de0:	302b883a 	mov	r21,r6
10004de4:	d9c02e15 	stw	r7,184(sp)
10004de8:	df004615 	stw	fp,280(sp)
10004dec:	dd804415 	stw	r22,272(sp)
10004df0:	dd004215 	stw	r20,264(sp)
10004df4:	dcc04115 	stw	r19,260(sp)
10004df8:	dc804015 	stw	r18,256(sp)
10004dfc:	dc403f15 	stw	r17,252(sp)
10004e00:	dc003e15 	stw	r16,248(sp)
10004e04:	0009d080 	call	10009d08 <_localeconv_r>
10004e08:	10800017 	ldw	r2,0(r2)
10004e0c:	1009883a 	mov	r4,r2
10004e10:	d8803415 	stw	r2,208(sp)
10004e14:	0004d300 	call	10004d30 <strlen>
10004e18:	d8803715 	stw	r2,220(sp)
10004e1c:	d8802d17 	ldw	r2,180(sp)
10004e20:	10000226 	beq	r2,zero,10004e2c <___vfprintf_internal_r+0x64>
10004e24:	10800e17 	ldw	r2,56(r2)
10004e28:	1000fb26 	beq	r2,zero,10005218 <___vfprintf_internal_r+0x450>
10004e2c:	b880030b 	ldhu	r2,12(r23)
10004e30:	10c8000c 	andi	r3,r2,8192
10004e34:	1800061e 	bne	r3,zero,10004e50 <___vfprintf_internal_r+0x88>
10004e38:	b9001917 	ldw	r4,100(r23)
10004e3c:	00f7ffc4 	movi	r3,-8193
10004e40:	10880014 	ori	r2,r2,8192
10004e44:	20c6703a 	and	r3,r4,r3
10004e48:	b880030d 	sth	r2,12(r23)
10004e4c:	b8c01915 	stw	r3,100(r23)
10004e50:	10c0020c 	andi	r3,r2,8
10004e54:	1800c326 	beq	r3,zero,10005164 <___vfprintf_internal_r+0x39c>
10004e58:	b8c00417 	ldw	r3,16(r23)
10004e5c:	1800c126 	beq	r3,zero,10005164 <___vfprintf_internal_r+0x39c>
10004e60:	1080068c 	andi	r2,r2,26
10004e64:	00c00284 	movi	r3,10
10004e68:	10c0c626 	beq	r2,r3,10005184 <___vfprintf_internal_r+0x3bc>
10004e6c:	d8c00404 	addi	r3,sp,16
10004e70:	05040074 	movhi	r20,4097
10004e74:	d9001e04 	addi	r4,sp,120
10004e78:	a5133484 	addi	r20,r20,19666
10004e7c:	d8c01e15 	stw	r3,120(sp)
10004e80:	d8002015 	stw	zero,128(sp)
10004e84:	d8001f15 	stw	zero,124(sp)
10004e88:	d8003315 	stw	zero,204(sp)
10004e8c:	d8003615 	stw	zero,216(sp)
10004e90:	d8003815 	stw	zero,224(sp)
10004e94:	1811883a 	mov	r8,r3
10004e98:	d8003915 	stw	zero,228(sp)
10004e9c:	d8003a15 	stw	zero,232(sp)
10004ea0:	d8002f15 	stw	zero,188(sp)
10004ea4:	d9002815 	stw	r4,160(sp)
10004ea8:	a8800007 	ldb	r2,0(r21)
10004eac:	10028b26 	beq	r2,zero,100058dc <___vfprintf_internal_r+0xb14>
10004eb0:	00c00944 	movi	r3,37
10004eb4:	a823883a 	mov	r17,r21
10004eb8:	10c0021e 	bne	r2,r3,10004ec4 <___vfprintf_internal_r+0xfc>
10004ebc:	00001406 	br	10004f10 <___vfprintf_internal_r+0x148>
10004ec0:	10c00326 	beq	r2,r3,10004ed0 <___vfprintf_internal_r+0x108>
10004ec4:	8c400044 	addi	r17,r17,1
10004ec8:	88800007 	ldb	r2,0(r17)
10004ecc:	103ffc1e 	bne	r2,zero,10004ec0 <__alt_data_end+0xf8004ec0>
10004ed0:	8d61c83a 	sub	r16,r17,r21
10004ed4:	80000e26 	beq	r16,zero,10004f10 <___vfprintf_internal_r+0x148>
10004ed8:	d8c02017 	ldw	r3,128(sp)
10004edc:	d8801f17 	ldw	r2,124(sp)
10004ee0:	45400015 	stw	r21,0(r8)
10004ee4:	1c07883a 	add	r3,r3,r16
10004ee8:	10800044 	addi	r2,r2,1
10004eec:	d8c02015 	stw	r3,128(sp)
10004ef0:	44000115 	stw	r16,4(r8)
10004ef4:	d8801f15 	stw	r2,124(sp)
10004ef8:	00c001c4 	movi	r3,7
10004efc:	1880a916 	blt	r3,r2,100051a4 <___vfprintf_internal_r+0x3dc>
10004f00:	42000204 	addi	r8,r8,8
10004f04:	d9402f17 	ldw	r5,188(sp)
10004f08:	2c0b883a 	add	r5,r5,r16
10004f0c:	d9402f15 	stw	r5,188(sp)
10004f10:	88800007 	ldb	r2,0(r17)
10004f14:	1000aa26 	beq	r2,zero,100051c0 <___vfprintf_internal_r+0x3f8>
10004f18:	8d400044 	addi	r21,r17,1
10004f1c:	8c400047 	ldb	r17,1(r17)
10004f20:	0021883a 	mov	r16,zero
10004f24:	00bfffc4 	movi	r2,-1
10004f28:	0025883a 	mov	r18,zero
10004f2c:	dc002905 	stb	r16,164(sp)
10004f30:	d8002785 	stb	zero,158(sp)
10004f34:	d8002b05 	stb	zero,172(sp)
10004f38:	d8802a15 	stw	r2,168(sp)
10004f3c:	d8003115 	stw	zero,196(sp)
10004f40:	04c01604 	movi	r19,88
10004f44:	05800244 	movi	r22,9
10004f48:	9021883a 	mov	r16,r18
10004f4c:	4039883a 	mov	fp,r8
10004f50:	ad400044 	addi	r21,r21,1
10004f54:	88bff804 	addi	r2,r17,-32
10004f58:	98833236 	bltu	r19,r2,10005c24 <___vfprintf_internal_r+0xe5c>
10004f5c:	100490ba 	slli	r2,r2,2
10004f60:	00c40034 	movhi	r3,4096
10004f64:	18d3dd04 	addi	r3,r3,20340
10004f68:	10c5883a 	add	r2,r2,r3
10004f6c:	10800017 	ldw	r2,0(r2)
10004f70:	1000683a 	jmp	r2
10004f74:	10005b1c 	xori	zero,r2,364
10004f78:	10005c24 	muli	zero,r2,368
10004f7c:	10005c24 	muli	zero,r2,368
10004f80:	10005b3c 	xorhi	zero,r2,364
10004f84:	10005c24 	muli	zero,r2,368
10004f88:	10005c24 	muli	zero,r2,368
10004f8c:	10005c24 	muli	zero,r2,368
10004f90:	10005c24 	muli	zero,r2,368
10004f94:	10005c24 	muli	zero,r2,368
10004f98:	10005c24 	muli	zero,r2,368
10004f9c:	10005224 	muli	zero,r2,328
10004fa0:	10005a2c 	andhi	zero,r2,360
10004fa4:	10005c24 	muli	zero,r2,368
10004fa8:	100050e8 	cmpgeui	zero,r2,323
10004fac:	10005248 	cmpgei	zero,r2,329
10004fb0:	10005c24 	muli	zero,r2,368
10004fb4:	10005298 	cmpnei	zero,r2,330
10004fb8:	100052a4 	muli	zero,r2,330
10004fbc:	100052a4 	muli	zero,r2,330
10004fc0:	100052a4 	muli	zero,r2,330
10004fc4:	100052a4 	muli	zero,r2,330
10004fc8:	100052a4 	muli	zero,r2,330
10004fcc:	100052a4 	muli	zero,r2,330
10004fd0:	100052a4 	muli	zero,r2,330
10004fd4:	100052a4 	muli	zero,r2,330
10004fd8:	100052a4 	muli	zero,r2,330
10004fdc:	10005c24 	muli	zero,r2,368
10004fe0:	10005c24 	muli	zero,r2,368
10004fe4:	10005c24 	muli	zero,r2,368
10004fe8:	10005c24 	muli	zero,r2,368
10004fec:	10005c24 	muli	zero,r2,368
10004ff0:	10005c24 	muli	zero,r2,368
10004ff4:	10005c24 	muli	zero,r2,368
10004ff8:	10005c24 	muli	zero,r2,368
10004ffc:	10005c24 	muli	zero,r2,368
10005000:	10005c24 	muli	zero,r2,368
10005004:	100052e0 	cmpeqi	zero,r2,331
10005008:	100053a8 	cmpgeui	zero,r2,334
1000500c:	10005c24 	muli	zero,r2,368
10005010:	100053a8 	cmpgeui	zero,r2,334
10005014:	10005c24 	muli	zero,r2,368
10005018:	10005c24 	muli	zero,r2,368
1000501c:	10005c24 	muli	zero,r2,368
10005020:	10005c24 	muli	zero,r2,368
10005024:	10005454 	ori	zero,r2,337
10005028:	10005c24 	muli	zero,r2,368
1000502c:	10005c24 	muli	zero,r2,368
10005030:	10005460 	cmpeqi	zero,r2,337
10005034:	10005c24 	muli	zero,r2,368
10005038:	10005c24 	muli	zero,r2,368
1000503c:	10005c24 	muli	zero,r2,368
10005040:	10005c24 	muli	zero,r2,368
10005044:	10005c24 	muli	zero,r2,368
10005048:	100058e4 	muli	zero,r2,355
1000504c:	10005c24 	muli	zero,r2,368
10005050:	10005c24 	muli	zero,r2,368
10005054:	10005950 	cmplti	zero,r2,357
10005058:	10005c24 	muli	zero,r2,368
1000505c:	10005c24 	muli	zero,r2,368
10005060:	10005c24 	muli	zero,r2,368
10005064:	10005c24 	muli	zero,r2,368
10005068:	10005c24 	muli	zero,r2,368
1000506c:	10005c24 	muli	zero,r2,368
10005070:	10005c24 	muli	zero,r2,368
10005074:	10005c24 	muli	zero,r2,368
10005078:	10005c24 	muli	zero,r2,368
1000507c:	10005c24 	muli	zero,r2,368
10005080:	10005bc8 	cmpgei	zero,r2,367
10005084:	10005b48 	cmpgei	zero,r2,365
10005088:	100053a8 	cmpgeui	zero,r2,334
1000508c:	100053a8 	cmpgeui	zero,r2,334
10005090:	100053a8 	cmpgeui	zero,r2,334
10005094:	10005b68 	cmpgeui	zero,r2,365
10005098:	10005b48 	cmpgei	zero,r2,365
1000509c:	10005c24 	muli	zero,r2,368
100050a0:	10005c24 	muli	zero,r2,368
100050a4:	10005b74 	orhi	zero,r2,365
100050a8:	10005c24 	muli	zero,r2,368
100050ac:	10005b88 	cmpgei	zero,r2,366
100050b0:	10005a0c 	andi	zero,r2,360
100050b4:	100050f4 	orhi	zero,r2,323
100050b8:	10005a44 	addi	zero,r2,361
100050bc:	10005c24 	muli	zero,r2,368
100050c0:	10005a50 	cmplti	zero,r2,361
100050c4:	10005c24 	muli	zero,r2,368
100050c8:	10005ab4 	orhi	zero,r2,362
100050cc:	10005c24 	muli	zero,r2,368
100050d0:	10005c24 	muli	zero,r2,368
100050d4:	10005ad4 	ori	zero,r2,363
100050d8:	d8c03117 	ldw	r3,196(sp)
100050dc:	d8802e15 	stw	r2,184(sp)
100050e0:	00c7c83a 	sub	r3,zero,r3
100050e4:	d8c03115 	stw	r3,196(sp)
100050e8:	84000114 	ori	r16,r16,4
100050ec:	ac400007 	ldb	r17,0(r21)
100050f0:	003f9706 	br	10004f50 <__alt_data_end+0xf8004f50>
100050f4:	00800c04 	movi	r2,48
100050f8:	d8802705 	stb	r2,156(sp)
100050fc:	00801e04 	movi	r2,120
10005100:	d8802745 	stb	r2,157(sp)
10005104:	d9002a17 	ldw	r4,168(sp)
10005108:	d8802e17 	ldw	r2,184(sp)
1000510c:	d8002785 	stb	zero,158(sp)
10005110:	e011883a 	mov	r8,fp
10005114:	10c00104 	addi	r3,r2,4
10005118:	14c00017 	ldw	r19,0(r2)
1000511c:	002d883a 	mov	r22,zero
10005120:	80800094 	ori	r2,r16,2
10005124:	2002ca16 	blt	r4,zero,10005c50 <___vfprintf_internal_r+0xe88>
10005128:	00bfdfc4 	movi	r2,-129
1000512c:	80a4703a 	and	r18,r16,r2
10005130:	d8c02e15 	stw	r3,184(sp)
10005134:	94800094 	ori	r18,r18,2
10005138:	9802b41e 	bne	r19,zero,10005c0c <___vfprintf_internal_r+0xe44>
1000513c:	01440074 	movhi	r5,4097
10005140:	29532d04 	addi	r5,r5,19636
10005144:	d9403915 	stw	r5,228(sp)
10005148:	04401e04 	movi	r17,120
1000514c:	d8802a17 	ldw	r2,168(sp)
10005150:	0039883a 	mov	fp,zero
10005154:	1001fa26 	beq	r2,zero,10005940 <___vfprintf_internal_r+0xb78>
10005158:	0027883a 	mov	r19,zero
1000515c:	002d883a 	mov	r22,zero
10005160:	00021906 	br	100059c8 <___vfprintf_internal_r+0xc00>
10005164:	d9002d17 	ldw	r4,180(sp)
10005168:	b80b883a 	mov	r5,r23
1000516c:	000717c0 	call	1000717c <__swsetup_r>
10005170:	1005dc1e 	bne	r2,zero,100068e4 <___vfprintf_internal_r+0x1b1c>
10005174:	b880030b 	ldhu	r2,12(r23)
10005178:	00c00284 	movi	r3,10
1000517c:	1080068c 	andi	r2,r2,26
10005180:	10ff3a1e 	bne	r2,r3,10004e6c <__alt_data_end+0xf8004e6c>
10005184:	b880038f 	ldh	r2,14(r23)
10005188:	103f3816 	blt	r2,zero,10004e6c <__alt_data_end+0xf8004e6c>
1000518c:	d9c02e17 	ldw	r7,184(sp)
10005190:	d9002d17 	ldw	r4,180(sp)
10005194:	a80d883a 	mov	r6,r21
10005198:	b80b883a 	mov	r5,r23
1000519c:	00070c00 	call	100070c0 <__sbprintf>
100051a0:	00001106 	br	100051e8 <___vfprintf_internal_r+0x420>
100051a4:	d9002d17 	ldw	r4,180(sp)
100051a8:	d9801e04 	addi	r6,sp,120
100051ac:	b80b883a 	mov	r5,r23
100051b0:	000c5a80 	call	1000c5a8 <__sprint_r>
100051b4:	1000081e 	bne	r2,zero,100051d8 <___vfprintf_internal_r+0x410>
100051b8:	da000404 	addi	r8,sp,16
100051bc:	003f5106 	br	10004f04 <__alt_data_end+0xf8004f04>
100051c0:	d8802017 	ldw	r2,128(sp)
100051c4:	10000426 	beq	r2,zero,100051d8 <___vfprintf_internal_r+0x410>
100051c8:	d9002d17 	ldw	r4,180(sp)
100051cc:	d9801e04 	addi	r6,sp,120
100051d0:	b80b883a 	mov	r5,r23
100051d4:	000c5a80 	call	1000c5a8 <__sprint_r>
100051d8:	b880030b 	ldhu	r2,12(r23)
100051dc:	1080100c 	andi	r2,r2,64
100051e0:	1005c01e 	bne	r2,zero,100068e4 <___vfprintf_internal_r+0x1b1c>
100051e4:	d8802f17 	ldw	r2,188(sp)
100051e8:	dfc04717 	ldw	ra,284(sp)
100051ec:	df004617 	ldw	fp,280(sp)
100051f0:	ddc04517 	ldw	r23,276(sp)
100051f4:	dd804417 	ldw	r22,272(sp)
100051f8:	dd404317 	ldw	r21,268(sp)
100051fc:	dd004217 	ldw	r20,264(sp)
10005200:	dcc04117 	ldw	r19,260(sp)
10005204:	dc804017 	ldw	r18,256(sp)
10005208:	dc403f17 	ldw	r17,252(sp)
1000520c:	dc003e17 	ldw	r16,248(sp)
10005210:	dec04804 	addi	sp,sp,288
10005214:	f800283a 	ret
10005218:	d9002d17 	ldw	r4,180(sp)
1000521c:	00091880 	call	10009188 <__sinit>
10005220:	003f0206 	br	10004e2c <__alt_data_end+0xf8004e2c>
10005224:	d9002e17 	ldw	r4,184(sp)
10005228:	d9402e17 	ldw	r5,184(sp)
1000522c:	21000017 	ldw	r4,0(r4)
10005230:	28800104 	addi	r2,r5,4
10005234:	d9003115 	stw	r4,196(sp)
10005238:	203fa716 	blt	r4,zero,100050d8 <__alt_data_end+0xf80050d8>
1000523c:	d8802e15 	stw	r2,184(sp)
10005240:	ac400007 	ldb	r17,0(r21)
10005244:	003f4206 	br	10004f50 <__alt_data_end+0xf8004f50>
10005248:	ac400007 	ldb	r17,0(r21)
1000524c:	01000a84 	movi	r4,42
10005250:	a8c00044 	addi	r3,r21,1
10005254:	89075826 	beq	r17,r4,10006fb8 <___vfprintf_internal_r+0x21f0>
10005258:	8cbff404 	addi	r18,r17,-48
1000525c:	b486ae36 	bltu	r22,r18,10006d18 <___vfprintf_internal_r+0x1f50>
10005260:	0009883a 	mov	r4,zero
10005264:	1823883a 	mov	r17,r3
10005268:	01400284 	movi	r5,10
1000526c:	0004bc80 	call	10004bc8 <__mulsi3>
10005270:	88c00007 	ldb	r3,0(r17)
10005274:	1489883a 	add	r4,r2,r18
10005278:	8d400044 	addi	r21,r17,1
1000527c:	1cbff404 	addi	r18,r3,-48
10005280:	a823883a 	mov	r17,r21
10005284:	b4bff82e 	bgeu	r22,r18,10005268 <__alt_data_end+0xf8005268>
10005288:	1823883a 	mov	r17,r3
1000528c:	2005f616 	blt	r4,zero,10006a68 <___vfprintf_internal_r+0x1ca0>
10005290:	d9002a15 	stw	r4,168(sp)
10005294:	003f2f06 	br	10004f54 <__alt_data_end+0xf8004f54>
10005298:	84002014 	ori	r16,r16,128
1000529c:	ac400007 	ldb	r17,0(r21)
100052a0:	003f2b06 	br	10004f50 <__alt_data_end+0xf8004f50>
100052a4:	8cbff404 	addi	r18,r17,-48
100052a8:	d8003115 	stw	zero,196(sp)
100052ac:	0009883a 	mov	r4,zero
100052b0:	a823883a 	mov	r17,r21
100052b4:	01400284 	movi	r5,10
100052b8:	0004bc80 	call	10004bc8 <__mulsi3>
100052bc:	88c00007 	ldb	r3,0(r17)
100052c0:	9089883a 	add	r4,r18,r2
100052c4:	ad400044 	addi	r21,r21,1
100052c8:	1cbff404 	addi	r18,r3,-48
100052cc:	a823883a 	mov	r17,r21
100052d0:	b4bff82e 	bgeu	r22,r18,100052b4 <__alt_data_end+0xf80052b4>
100052d4:	1823883a 	mov	r17,r3
100052d8:	d9003115 	stw	r4,196(sp)
100052dc:	003f1d06 	br	10004f54 <__alt_data_end+0xf8004f54>
100052e0:	8025883a 	mov	r18,r16
100052e4:	dc002903 	ldbu	r16,164(sp)
100052e8:	e011883a 	mov	r8,fp
100052ec:	84003fcc 	andi	r16,r16,255
100052f0:	8007531e 	bne	r16,zero,10007040 <___vfprintf_internal_r+0x2278>
100052f4:	94800414 	ori	r18,r18,16
100052f8:	9080080c 	andi	r2,r18,32
100052fc:	1003a326 	beq	r2,zero,1000618c <___vfprintf_internal_r+0x13c4>
10005300:	d9002e17 	ldw	r4,184(sp)
10005304:	20800117 	ldw	r2,4(r4)
10005308:	24c00017 	ldw	r19,0(r4)
1000530c:	21000204 	addi	r4,r4,8
10005310:	d9002e15 	stw	r4,184(sp)
10005314:	102d883a 	mov	r22,r2
10005318:	10047316 	blt	r2,zero,100064e8 <___vfprintf_internal_r+0x1720>
1000531c:	d9002a17 	ldw	r4,168(sp)
10005320:	df002783 	ldbu	fp,158(sp)
10005324:	2003e416 	blt	r4,zero,100062b8 <___vfprintf_internal_r+0x14f0>
10005328:	00ffdfc4 	movi	r3,-129
1000532c:	9d84b03a 	or	r2,r19,r22
10005330:	90e4703a 	and	r18,r18,r3
10005334:	10018026 	beq	r2,zero,10005938 <___vfprintf_internal_r+0xb70>
10005338:	b003ab26 	beq	r22,zero,100061e8 <___vfprintf_internal_r+0x1420>
1000533c:	dc402915 	stw	r17,164(sp)
10005340:	dc001e04 	addi	r16,sp,120
10005344:	b023883a 	mov	r17,r22
10005348:	402d883a 	mov	r22,r8
1000534c:	9809883a 	mov	r4,r19
10005350:	880b883a 	mov	r5,r17
10005354:	01800284 	movi	r6,10
10005358:	000f883a 	mov	r7,zero
1000535c:	000eaec0 	call	1000eaec <__umoddi3>
10005360:	10800c04 	addi	r2,r2,48
10005364:	843fffc4 	addi	r16,r16,-1
10005368:	9809883a 	mov	r4,r19
1000536c:	880b883a 	mov	r5,r17
10005370:	80800005 	stb	r2,0(r16)
10005374:	01800284 	movi	r6,10
10005378:	000f883a 	mov	r7,zero
1000537c:	000e4f00 	call	1000e4f0 <__udivdi3>
10005380:	1027883a 	mov	r19,r2
10005384:	10c4b03a 	or	r2,r2,r3
10005388:	1823883a 	mov	r17,r3
1000538c:	103fef1e 	bne	r2,zero,1000534c <__alt_data_end+0xf800534c>
10005390:	d8c02817 	ldw	r3,160(sp)
10005394:	dc402917 	ldw	r17,164(sp)
10005398:	b011883a 	mov	r8,r22
1000539c:	1c07c83a 	sub	r3,r3,r16
100053a0:	d8c02b15 	stw	r3,172(sp)
100053a4:	00005f06 	br	10005524 <___vfprintf_internal_r+0x75c>
100053a8:	8025883a 	mov	r18,r16
100053ac:	dc002903 	ldbu	r16,164(sp)
100053b0:	e011883a 	mov	r8,fp
100053b4:	84003fcc 	andi	r16,r16,255
100053b8:	80071e1e 	bne	r16,zero,10007034 <___vfprintf_internal_r+0x226c>
100053bc:	9080020c 	andi	r2,r18,8
100053c0:	1004af26 	beq	r2,zero,10006680 <___vfprintf_internal_r+0x18b8>
100053c4:	d9002e17 	ldw	r4,184(sp)
100053c8:	d9402e17 	ldw	r5,184(sp)
100053cc:	d8802e17 	ldw	r2,184(sp)
100053d0:	21000017 	ldw	r4,0(r4)
100053d4:	29400117 	ldw	r5,4(r5)
100053d8:	10800204 	addi	r2,r2,8
100053dc:	d9003615 	stw	r4,216(sp)
100053e0:	d9403815 	stw	r5,224(sp)
100053e4:	d8802e15 	stw	r2,184(sp)
100053e8:	d9003617 	ldw	r4,216(sp)
100053ec:	d9403817 	ldw	r5,224(sp)
100053f0:	da003d15 	stw	r8,244(sp)
100053f4:	04000044 	movi	r16,1
100053f8:	000c1cc0 	call	1000c1cc <__fpclassifyd>
100053fc:	da003d17 	ldw	r8,244(sp)
10005400:	1404441e 	bne	r2,r16,10006514 <___vfprintf_internal_r+0x174c>
10005404:	d9003617 	ldw	r4,216(sp)
10005408:	d9403817 	ldw	r5,224(sp)
1000540c:	000d883a 	mov	r6,zero
10005410:	000f883a 	mov	r7,zero
10005414:	00106440 	call	10010644 <__ledf2>
10005418:	da003d17 	ldw	r8,244(sp)
1000541c:	1005e316 	blt	r2,zero,10006bac <___vfprintf_internal_r+0x1de4>
10005420:	df002783 	ldbu	fp,158(sp)
10005424:	008011c4 	movi	r2,71
10005428:	1445580e 	bge	r2,r17,1000698c <___vfprintf_internal_r+0x1bc4>
1000542c:	04040074 	movhi	r16,4097
10005430:	84132504 	addi	r16,r16,19604
10005434:	00c000c4 	movi	r3,3
10005438:	00bfdfc4 	movi	r2,-129
1000543c:	d8c02915 	stw	r3,164(sp)
10005440:	90a4703a 	and	r18,r18,r2
10005444:	d8c02b15 	stw	r3,172(sp)
10005448:	d8002a15 	stw	zero,168(sp)
1000544c:	d8003215 	stw	zero,200(sp)
10005450:	00003a06 	br	1000553c <___vfprintf_internal_r+0x774>
10005454:	84000214 	ori	r16,r16,8
10005458:	ac400007 	ldb	r17,0(r21)
1000545c:	003ebc06 	br	10004f50 <__alt_data_end+0xf8004f50>
10005460:	8025883a 	mov	r18,r16
10005464:	dc002903 	ldbu	r16,164(sp)
10005468:	e011883a 	mov	r8,fp
1000546c:	84003fcc 	andi	r16,r16,255
10005470:	8007001e 	bne	r16,zero,10007074 <___vfprintf_internal_r+0x22ac>
10005474:	94800414 	ori	r18,r18,16
10005478:	9080080c 	andi	r2,r18,32
1000547c:	1002fa26 	beq	r2,zero,10006068 <___vfprintf_internal_r+0x12a0>
10005480:	d9002e17 	ldw	r4,184(sp)
10005484:	d9402a17 	ldw	r5,168(sp)
10005488:	d8002785 	stb	zero,158(sp)
1000548c:	20800204 	addi	r2,r4,8
10005490:	24c00017 	ldw	r19,0(r4)
10005494:	25800117 	ldw	r22,4(r4)
10005498:	2804b116 	blt	r5,zero,10006760 <___vfprintf_internal_r+0x1998>
1000549c:	013fdfc4 	movi	r4,-129
100054a0:	9d86b03a 	or	r3,r19,r22
100054a4:	d8802e15 	stw	r2,184(sp)
100054a8:	9124703a 	and	r18,r18,r4
100054ac:	1802fb1e 	bne	r3,zero,1000609c <___vfprintf_internal_r+0x12d4>
100054b0:	d8c02a17 	ldw	r3,168(sp)
100054b4:	0039883a 	mov	fp,zero
100054b8:	1805e526 	beq	r3,zero,10006c50 <___vfprintf_internal_r+0x1e88>
100054bc:	0027883a 	mov	r19,zero
100054c0:	002d883a 	mov	r22,zero
100054c4:	dc001e04 	addi	r16,sp,120
100054c8:	9806d0fa 	srli	r3,r19,3
100054cc:	b008977a 	slli	r4,r22,29
100054d0:	b02cd0fa 	srli	r22,r22,3
100054d4:	9cc001cc 	andi	r19,r19,7
100054d8:	98800c04 	addi	r2,r19,48
100054dc:	843fffc4 	addi	r16,r16,-1
100054e0:	20e6b03a 	or	r19,r4,r3
100054e4:	80800005 	stb	r2,0(r16)
100054e8:	9d86b03a 	or	r3,r19,r22
100054ec:	183ff61e 	bne	r3,zero,100054c8 <__alt_data_end+0xf80054c8>
100054f0:	90c0004c 	andi	r3,r18,1
100054f4:	18014126 	beq	r3,zero,100059fc <___vfprintf_internal_r+0xc34>
100054f8:	10803fcc 	andi	r2,r2,255
100054fc:	1080201c 	xori	r2,r2,128
10005500:	10bfe004 	addi	r2,r2,-128
10005504:	00c00c04 	movi	r3,48
10005508:	10c13c26 	beq	r2,r3,100059fc <___vfprintf_internal_r+0xc34>
1000550c:	80ffffc5 	stb	r3,-1(r16)
10005510:	d8c02817 	ldw	r3,160(sp)
10005514:	80bfffc4 	addi	r2,r16,-1
10005518:	1021883a 	mov	r16,r2
1000551c:	1887c83a 	sub	r3,r3,r2
10005520:	d8c02b15 	stw	r3,172(sp)
10005524:	d8802b17 	ldw	r2,172(sp)
10005528:	d9002a17 	ldw	r4,168(sp)
1000552c:	1100010e 	bge	r2,r4,10005534 <___vfprintf_internal_r+0x76c>
10005530:	2005883a 	mov	r2,r4
10005534:	d8802915 	stw	r2,164(sp)
10005538:	d8003215 	stw	zero,200(sp)
1000553c:	e7003fcc 	andi	fp,fp,255
10005540:	e700201c 	xori	fp,fp,128
10005544:	e73fe004 	addi	fp,fp,-128
10005548:	e0000326 	beq	fp,zero,10005558 <___vfprintf_internal_r+0x790>
1000554c:	d8c02917 	ldw	r3,164(sp)
10005550:	18c00044 	addi	r3,r3,1
10005554:	d8c02915 	stw	r3,164(sp)
10005558:	90c0008c 	andi	r3,r18,2
1000555c:	d8c02c15 	stw	r3,176(sp)
10005560:	18000326 	beq	r3,zero,10005570 <___vfprintf_internal_r+0x7a8>
10005564:	d8c02917 	ldw	r3,164(sp)
10005568:	18c00084 	addi	r3,r3,2
1000556c:	d8c02915 	stw	r3,164(sp)
10005570:	90c0210c 	andi	r3,r18,132
10005574:	d8c03015 	stw	r3,192(sp)
10005578:	1801c51e 	bne	r3,zero,10005c90 <___vfprintf_internal_r+0xec8>
1000557c:	d9003117 	ldw	r4,196(sp)
10005580:	d8c02917 	ldw	r3,164(sp)
10005584:	20e7c83a 	sub	r19,r4,r3
10005588:	04c1c10e 	bge	zero,r19,10005c90 <___vfprintf_internal_r+0xec8>
1000558c:	02400404 	movi	r9,16
10005590:	d8c02017 	ldw	r3,128(sp)
10005594:	d8801f17 	ldw	r2,124(sp)
10005598:	4cc52f0e 	bge	r9,r19,10006a58 <___vfprintf_internal_r+0x1c90>
1000559c:	01440074 	movhi	r5,4097
100055a0:	29533884 	addi	r5,r5,19682
100055a4:	dc403b15 	stw	r17,236(sp)
100055a8:	d9403515 	stw	r5,212(sp)
100055ac:	9823883a 	mov	r17,r19
100055b0:	482d883a 	mov	r22,r9
100055b4:	9027883a 	mov	r19,r18
100055b8:	070001c4 	movi	fp,7
100055bc:	8025883a 	mov	r18,r16
100055c0:	dc002d17 	ldw	r16,180(sp)
100055c4:	00000306 	br	100055d4 <___vfprintf_internal_r+0x80c>
100055c8:	8c7ffc04 	addi	r17,r17,-16
100055cc:	42000204 	addi	r8,r8,8
100055d0:	b440130e 	bge	r22,r17,10005620 <___vfprintf_internal_r+0x858>
100055d4:	01040074 	movhi	r4,4097
100055d8:	18c00404 	addi	r3,r3,16
100055dc:	10800044 	addi	r2,r2,1
100055e0:	21133884 	addi	r4,r4,19682
100055e4:	41000015 	stw	r4,0(r8)
100055e8:	45800115 	stw	r22,4(r8)
100055ec:	d8c02015 	stw	r3,128(sp)
100055f0:	d8801f15 	stw	r2,124(sp)
100055f4:	e0bff40e 	bge	fp,r2,100055c8 <__alt_data_end+0xf80055c8>
100055f8:	d9801e04 	addi	r6,sp,120
100055fc:	b80b883a 	mov	r5,r23
10005600:	8009883a 	mov	r4,r16
10005604:	000c5a80 	call	1000c5a8 <__sprint_r>
10005608:	103ef31e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
1000560c:	8c7ffc04 	addi	r17,r17,-16
10005610:	d8c02017 	ldw	r3,128(sp)
10005614:	d8801f17 	ldw	r2,124(sp)
10005618:	da000404 	addi	r8,sp,16
1000561c:	b47fed16 	blt	r22,r17,100055d4 <__alt_data_end+0xf80055d4>
10005620:	9021883a 	mov	r16,r18
10005624:	9825883a 	mov	r18,r19
10005628:	8827883a 	mov	r19,r17
1000562c:	dc403b17 	ldw	r17,236(sp)
10005630:	d9403517 	ldw	r5,212(sp)
10005634:	98c7883a 	add	r3,r19,r3
10005638:	10800044 	addi	r2,r2,1
1000563c:	41400015 	stw	r5,0(r8)
10005640:	44c00115 	stw	r19,4(r8)
10005644:	d8c02015 	stw	r3,128(sp)
10005648:	d8801f15 	stw	r2,124(sp)
1000564c:	010001c4 	movi	r4,7
10005650:	2082c516 	blt	r4,r2,10006168 <___vfprintf_internal_r+0x13a0>
10005654:	df002787 	ldb	fp,158(sp)
10005658:	42000204 	addi	r8,r8,8
1000565c:	e0000c26 	beq	fp,zero,10005690 <___vfprintf_internal_r+0x8c8>
10005660:	d8801f17 	ldw	r2,124(sp)
10005664:	d9002784 	addi	r4,sp,158
10005668:	18c00044 	addi	r3,r3,1
1000566c:	10800044 	addi	r2,r2,1
10005670:	41000015 	stw	r4,0(r8)
10005674:	01000044 	movi	r4,1
10005678:	41000115 	stw	r4,4(r8)
1000567c:	d8c02015 	stw	r3,128(sp)
10005680:	d8801f15 	stw	r2,124(sp)
10005684:	010001c4 	movi	r4,7
10005688:	20825e16 	blt	r4,r2,10006004 <___vfprintf_internal_r+0x123c>
1000568c:	42000204 	addi	r8,r8,8
10005690:	d8802c17 	ldw	r2,176(sp)
10005694:	10000c26 	beq	r2,zero,100056c8 <___vfprintf_internal_r+0x900>
10005698:	d8801f17 	ldw	r2,124(sp)
1000569c:	d9002704 	addi	r4,sp,156
100056a0:	18c00084 	addi	r3,r3,2
100056a4:	10800044 	addi	r2,r2,1
100056a8:	41000015 	stw	r4,0(r8)
100056ac:	01000084 	movi	r4,2
100056b0:	41000115 	stw	r4,4(r8)
100056b4:	d8c02015 	stw	r3,128(sp)
100056b8:	d8801f15 	stw	r2,124(sp)
100056bc:	010001c4 	movi	r4,7
100056c0:	20825816 	blt	r4,r2,10006024 <___vfprintf_internal_r+0x125c>
100056c4:	42000204 	addi	r8,r8,8
100056c8:	d9003017 	ldw	r4,192(sp)
100056cc:	00802004 	movi	r2,128
100056d0:	2081bb26 	beq	r4,r2,10005dc0 <___vfprintf_internal_r+0xff8>
100056d4:	d9402a17 	ldw	r5,168(sp)
100056d8:	d8802b17 	ldw	r2,172(sp)
100056dc:	28adc83a 	sub	r22,r5,r2
100056e0:	0580310e 	bge	zero,r22,100057a8 <___vfprintf_internal_r+0x9e0>
100056e4:	07000404 	movi	fp,16
100056e8:	d8801f17 	ldw	r2,124(sp)
100056ec:	e584360e 	bge	fp,r22,100067c8 <___vfprintf_internal_r+0x1a00>
100056f0:	01440074 	movhi	r5,4097
100056f4:	29533484 	addi	r5,r5,19666
100056f8:	dc402a15 	stw	r17,168(sp)
100056fc:	d9402c15 	stw	r5,176(sp)
10005700:	b023883a 	mov	r17,r22
10005704:	04c001c4 	movi	r19,7
10005708:	a82d883a 	mov	r22,r21
1000570c:	902b883a 	mov	r21,r18
10005710:	8025883a 	mov	r18,r16
10005714:	dc002d17 	ldw	r16,180(sp)
10005718:	00000306 	br	10005728 <___vfprintf_internal_r+0x960>
1000571c:	8c7ffc04 	addi	r17,r17,-16
10005720:	42000204 	addi	r8,r8,8
10005724:	e440110e 	bge	fp,r17,1000576c <___vfprintf_internal_r+0x9a4>
10005728:	18c00404 	addi	r3,r3,16
1000572c:	10800044 	addi	r2,r2,1
10005730:	45000015 	stw	r20,0(r8)
10005734:	47000115 	stw	fp,4(r8)
10005738:	d8c02015 	stw	r3,128(sp)
1000573c:	d8801f15 	stw	r2,124(sp)
10005740:	98bff60e 	bge	r19,r2,1000571c <__alt_data_end+0xf800571c>
10005744:	d9801e04 	addi	r6,sp,120
10005748:	b80b883a 	mov	r5,r23
1000574c:	8009883a 	mov	r4,r16
10005750:	000c5a80 	call	1000c5a8 <__sprint_r>
10005754:	103ea01e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10005758:	8c7ffc04 	addi	r17,r17,-16
1000575c:	d8c02017 	ldw	r3,128(sp)
10005760:	d8801f17 	ldw	r2,124(sp)
10005764:	da000404 	addi	r8,sp,16
10005768:	e47fef16 	blt	fp,r17,10005728 <__alt_data_end+0xf8005728>
1000576c:	9021883a 	mov	r16,r18
10005770:	a825883a 	mov	r18,r21
10005774:	b02b883a 	mov	r21,r22
10005778:	882d883a 	mov	r22,r17
1000577c:	dc402a17 	ldw	r17,168(sp)
10005780:	d9002c17 	ldw	r4,176(sp)
10005784:	1d87883a 	add	r3,r3,r22
10005788:	10800044 	addi	r2,r2,1
1000578c:	41000015 	stw	r4,0(r8)
10005790:	45800115 	stw	r22,4(r8)
10005794:	d8c02015 	stw	r3,128(sp)
10005798:	d8801f15 	stw	r2,124(sp)
1000579c:	010001c4 	movi	r4,7
100057a0:	20821016 	blt	r4,r2,10005fe4 <___vfprintf_internal_r+0x121c>
100057a4:	42000204 	addi	r8,r8,8
100057a8:	9080400c 	andi	r2,r18,256
100057ac:	10013a1e 	bne	r2,zero,10005c98 <___vfprintf_internal_r+0xed0>
100057b0:	d9402b17 	ldw	r5,172(sp)
100057b4:	d8801f17 	ldw	r2,124(sp)
100057b8:	44000015 	stw	r16,0(r8)
100057bc:	1947883a 	add	r3,r3,r5
100057c0:	10800044 	addi	r2,r2,1
100057c4:	41400115 	stw	r5,4(r8)
100057c8:	d8c02015 	stw	r3,128(sp)
100057cc:	d8801f15 	stw	r2,124(sp)
100057d0:	010001c4 	movi	r4,7
100057d4:	2081f516 	blt	r4,r2,10005fac <___vfprintf_internal_r+0x11e4>
100057d8:	42000204 	addi	r8,r8,8
100057dc:	9480010c 	andi	r18,r18,4
100057e0:	90003226 	beq	r18,zero,100058ac <___vfprintf_internal_r+0xae4>
100057e4:	d9403117 	ldw	r5,196(sp)
100057e8:	d8802917 	ldw	r2,164(sp)
100057ec:	28a1c83a 	sub	r16,r5,r2
100057f0:	04002e0e 	bge	zero,r16,100058ac <___vfprintf_internal_r+0xae4>
100057f4:	04400404 	movi	r17,16
100057f8:	d8801f17 	ldw	r2,124(sp)
100057fc:	8c04c40e 	bge	r17,r16,10006b10 <___vfprintf_internal_r+0x1d48>
10005800:	01440074 	movhi	r5,4097
10005804:	29533884 	addi	r5,r5,19682
10005808:	d9403515 	stw	r5,212(sp)
1000580c:	048001c4 	movi	r18,7
10005810:	dcc02d17 	ldw	r19,180(sp)
10005814:	00000306 	br	10005824 <___vfprintf_internal_r+0xa5c>
10005818:	843ffc04 	addi	r16,r16,-16
1000581c:	42000204 	addi	r8,r8,8
10005820:	8c00130e 	bge	r17,r16,10005870 <___vfprintf_internal_r+0xaa8>
10005824:	01040074 	movhi	r4,4097
10005828:	18c00404 	addi	r3,r3,16
1000582c:	10800044 	addi	r2,r2,1
10005830:	21133884 	addi	r4,r4,19682
10005834:	41000015 	stw	r4,0(r8)
10005838:	44400115 	stw	r17,4(r8)
1000583c:	d8c02015 	stw	r3,128(sp)
10005840:	d8801f15 	stw	r2,124(sp)
10005844:	90bff40e 	bge	r18,r2,10005818 <__alt_data_end+0xf8005818>
10005848:	d9801e04 	addi	r6,sp,120
1000584c:	b80b883a 	mov	r5,r23
10005850:	9809883a 	mov	r4,r19
10005854:	000c5a80 	call	1000c5a8 <__sprint_r>
10005858:	103e5f1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
1000585c:	843ffc04 	addi	r16,r16,-16
10005860:	d8c02017 	ldw	r3,128(sp)
10005864:	d8801f17 	ldw	r2,124(sp)
10005868:	da000404 	addi	r8,sp,16
1000586c:	8c3fed16 	blt	r17,r16,10005824 <__alt_data_end+0xf8005824>
10005870:	d9403517 	ldw	r5,212(sp)
10005874:	1c07883a 	add	r3,r3,r16
10005878:	10800044 	addi	r2,r2,1
1000587c:	41400015 	stw	r5,0(r8)
10005880:	44000115 	stw	r16,4(r8)
10005884:	d8c02015 	stw	r3,128(sp)
10005888:	d8801f15 	stw	r2,124(sp)
1000588c:	010001c4 	movi	r4,7
10005890:	2080060e 	bge	r4,r2,100058ac <___vfprintf_internal_r+0xae4>
10005894:	d9002d17 	ldw	r4,180(sp)
10005898:	d9801e04 	addi	r6,sp,120
1000589c:	b80b883a 	mov	r5,r23
100058a0:	000c5a80 	call	1000c5a8 <__sprint_r>
100058a4:	103e4c1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100058a8:	d8c02017 	ldw	r3,128(sp)
100058ac:	d8803117 	ldw	r2,196(sp)
100058b0:	d9002917 	ldw	r4,164(sp)
100058b4:	1100010e 	bge	r2,r4,100058bc <___vfprintf_internal_r+0xaf4>
100058b8:	2005883a 	mov	r2,r4
100058bc:	d9402f17 	ldw	r5,188(sp)
100058c0:	288b883a 	add	r5,r5,r2
100058c4:	d9402f15 	stw	r5,188(sp)
100058c8:	1801c01e 	bne	r3,zero,10005fcc <___vfprintf_internal_r+0x1204>
100058cc:	a8800007 	ldb	r2,0(r21)
100058d0:	d8001f15 	stw	zero,124(sp)
100058d4:	da000404 	addi	r8,sp,16
100058d8:	103d751e 	bne	r2,zero,10004eb0 <__alt_data_end+0xf8004eb0>
100058dc:	a823883a 	mov	r17,r21
100058e0:	003d8b06 	br	10004f10 <__alt_data_end+0xf8004f10>
100058e4:	8025883a 	mov	r18,r16
100058e8:	dc002903 	ldbu	r16,164(sp)
100058ec:	e011883a 	mov	r8,fp
100058f0:	84003fcc 	andi	r16,r16,255
100058f4:	8005e51e 	bne	r16,zero,1000708c <___vfprintf_internal_r+0x22c4>
100058f8:	94800414 	ori	r18,r18,16
100058fc:	9080080c 	andi	r2,r18,32
10005900:	10022b26 	beq	r2,zero,100061b0 <___vfprintf_internal_r+0x13e8>
10005904:	d9002e17 	ldw	r4,184(sp)
10005908:	d9402a17 	ldw	r5,168(sp)
1000590c:	d8002785 	stb	zero,158(sp)
10005910:	20c00204 	addi	r3,r4,8
10005914:	24c00017 	ldw	r19,0(r4)
10005918:	25800117 	ldw	r22,4(r4)
1000591c:	28042e16 	blt	r5,zero,100069d8 <___vfprintf_internal_r+0x1c10>
10005920:	013fdfc4 	movi	r4,-129
10005924:	9d84b03a 	or	r2,r19,r22
10005928:	d8c02e15 	stw	r3,184(sp)
1000592c:	9124703a 	and	r18,r18,r4
10005930:	0039883a 	mov	fp,zero
10005934:	103e801e 	bne	r2,zero,10005338 <__alt_data_end+0xf8005338>
10005938:	d9002a17 	ldw	r4,168(sp)
1000593c:	2002e01e 	bne	r4,zero,100064c0 <___vfprintf_internal_r+0x16f8>
10005940:	d8002a15 	stw	zero,168(sp)
10005944:	d8002b15 	stw	zero,172(sp)
10005948:	dc001e04 	addi	r16,sp,120
1000594c:	003ef506 	br	10005524 <__alt_data_end+0xf8005524>
10005950:	8025883a 	mov	r18,r16
10005954:	dc002903 	ldbu	r16,164(sp)
10005958:	e011883a 	mov	r8,fp
1000595c:	84003fcc 	andi	r16,r16,255
10005960:	8005ba1e 	bne	r16,zero,1000704c <___vfprintf_internal_r+0x2284>
10005964:	01040074 	movhi	r4,4097
10005968:	21132804 	addi	r4,r4,19616
1000596c:	d9003915 	stw	r4,228(sp)
10005970:	9080080c 	andi	r2,r18,32
10005974:	10006126 	beq	r2,zero,10005afc <___vfprintf_internal_r+0xd34>
10005978:	d9402e17 	ldw	r5,184(sp)
1000597c:	2cc00017 	ldw	r19,0(r5)
10005980:	2d800117 	ldw	r22,4(r5)
10005984:	29400204 	addi	r5,r5,8
10005988:	d9402e15 	stw	r5,184(sp)
1000598c:	9080004c 	andi	r2,r18,1
10005990:	1001ac26 	beq	r2,zero,10006044 <___vfprintf_internal_r+0x127c>
10005994:	9d84b03a 	or	r2,r19,r22
10005998:	10038526 	beq	r2,zero,100067b0 <___vfprintf_internal_r+0x19e8>
1000599c:	d8c02a17 	ldw	r3,168(sp)
100059a0:	00800c04 	movi	r2,48
100059a4:	d8802705 	stb	r2,156(sp)
100059a8:	dc402745 	stb	r17,157(sp)
100059ac:	d8002785 	stb	zero,158(sp)
100059b0:	90800094 	ori	r2,r18,2
100059b4:	18047916 	blt	r3,zero,10006b9c <___vfprintf_internal_r+0x1dd4>
100059b8:	00bfdfc4 	movi	r2,-129
100059bc:	90a4703a 	and	r18,r18,r2
100059c0:	94800094 	ori	r18,r18,2
100059c4:	0039883a 	mov	fp,zero
100059c8:	d9003917 	ldw	r4,228(sp)
100059cc:	dc001e04 	addi	r16,sp,120
100059d0:	988003cc 	andi	r2,r19,15
100059d4:	b006973a 	slli	r3,r22,28
100059d8:	2085883a 	add	r2,r4,r2
100059dc:	9826d13a 	srli	r19,r19,4
100059e0:	10800003 	ldbu	r2,0(r2)
100059e4:	b02cd13a 	srli	r22,r22,4
100059e8:	843fffc4 	addi	r16,r16,-1
100059ec:	1ce6b03a 	or	r19,r3,r19
100059f0:	80800005 	stb	r2,0(r16)
100059f4:	9d84b03a 	or	r2,r19,r22
100059f8:	103ff51e 	bne	r2,zero,100059d0 <__alt_data_end+0xf80059d0>
100059fc:	d8c02817 	ldw	r3,160(sp)
10005a00:	1c07c83a 	sub	r3,r3,r16
10005a04:	d8c02b15 	stw	r3,172(sp)
10005a08:	003ec606 	br	10005524 <__alt_data_end+0xf8005524>
10005a0c:	8025883a 	mov	r18,r16
10005a10:	dc002903 	ldbu	r16,164(sp)
10005a14:	e011883a 	mov	r8,fp
10005a18:	84003fcc 	andi	r16,r16,255
10005a1c:	803e9626 	beq	r16,zero,10005478 <__alt_data_end+0xf8005478>
10005a20:	d8c02b03 	ldbu	r3,172(sp)
10005a24:	d8c02785 	stb	r3,158(sp)
10005a28:	003e9306 	br	10005478 <__alt_data_end+0xf8005478>
10005a2c:	00c00044 	movi	r3,1
10005a30:	d8c02905 	stb	r3,164(sp)
10005a34:	00c00ac4 	movi	r3,43
10005a38:	d8c02b05 	stb	r3,172(sp)
10005a3c:	ac400007 	ldb	r17,0(r21)
10005a40:	003d4306 	br	10004f50 <__alt_data_end+0xf8004f50>
10005a44:	84000814 	ori	r16,r16,32
10005a48:	ac400007 	ldb	r17,0(r21)
10005a4c:	003d4006 	br	10004f50 <__alt_data_end+0xf8004f50>
10005a50:	d8802e17 	ldw	r2,184(sp)
10005a54:	8025883a 	mov	r18,r16
10005a58:	d8002785 	stb	zero,158(sp)
10005a5c:	14000017 	ldw	r16,0(r2)
10005a60:	e011883a 	mov	r8,fp
10005a64:	14c00104 	addi	r19,r2,4
10005a68:	80042d26 	beq	r16,zero,10006b20 <___vfprintf_internal_r+0x1d58>
10005a6c:	d8c02a17 	ldw	r3,168(sp)
10005a70:	1803e416 	blt	r3,zero,10006a04 <___vfprintf_internal_r+0x1c3c>
10005a74:	180d883a 	mov	r6,r3
10005a78:	000b883a 	mov	r5,zero
10005a7c:	8009883a 	mov	r4,r16
10005a80:	df003d15 	stw	fp,244(sp)
10005a84:	000a7000 	call	1000a700 <memchr>
10005a88:	da003d17 	ldw	r8,244(sp)
10005a8c:	10046826 	beq	r2,zero,10006c30 <___vfprintf_internal_r+0x1e68>
10005a90:	1405c83a 	sub	r2,r2,r16
10005a94:	d8802b15 	stw	r2,172(sp)
10005a98:	1003e016 	blt	r2,zero,10006a1c <___vfprintf_internal_r+0x1c54>
10005a9c:	df002783 	ldbu	fp,158(sp)
10005aa0:	d8802915 	stw	r2,164(sp)
10005aa4:	dcc02e15 	stw	r19,184(sp)
10005aa8:	d8002a15 	stw	zero,168(sp)
10005aac:	d8003215 	stw	zero,200(sp)
10005ab0:	003ea206 	br	1000553c <__alt_data_end+0xf800553c>
10005ab4:	8025883a 	mov	r18,r16
10005ab8:	dc002903 	ldbu	r16,164(sp)
10005abc:	e011883a 	mov	r8,fp
10005ac0:	84003fcc 	andi	r16,r16,255
10005ac4:	803f8d26 	beq	r16,zero,100058fc <__alt_data_end+0xf80058fc>
10005ac8:	d8c02b03 	ldbu	r3,172(sp)
10005acc:	d8c02785 	stb	r3,158(sp)
10005ad0:	003f8a06 	br	100058fc <__alt_data_end+0xf80058fc>
10005ad4:	8025883a 	mov	r18,r16
10005ad8:	dc002903 	ldbu	r16,164(sp)
10005adc:	e011883a 	mov	r8,fp
10005ae0:	84003fcc 	andi	r16,r16,255
10005ae4:	8005661e 	bne	r16,zero,10007080 <___vfprintf_internal_r+0x22b8>
10005ae8:	01040074 	movhi	r4,4097
10005aec:	21132d04 	addi	r4,r4,19636
10005af0:	d9003915 	stw	r4,228(sp)
10005af4:	9080080c 	andi	r2,r18,32
10005af8:	103f9f1e 	bne	r2,zero,10005978 <__alt_data_end+0xf8005978>
10005afc:	9080040c 	andi	r2,r18,16
10005b00:	1002eb26 	beq	r2,zero,100066b0 <___vfprintf_internal_r+0x18e8>
10005b04:	d8802e17 	ldw	r2,184(sp)
10005b08:	002d883a 	mov	r22,zero
10005b0c:	14c00017 	ldw	r19,0(r2)
10005b10:	10800104 	addi	r2,r2,4
10005b14:	d8802e15 	stw	r2,184(sp)
10005b18:	003f9c06 	br	1000598c <__alt_data_end+0xf800598c>
10005b1c:	d8802b07 	ldb	r2,172(sp)
10005b20:	1002e11e 	bne	r2,zero,100066a8 <___vfprintf_internal_r+0x18e0>
10005b24:	00c00044 	movi	r3,1
10005b28:	d8c02905 	stb	r3,164(sp)
10005b2c:	00c00804 	movi	r3,32
10005b30:	d8c02b05 	stb	r3,172(sp)
10005b34:	ac400007 	ldb	r17,0(r21)
10005b38:	003d0506 	br	10004f50 <__alt_data_end+0xf8004f50>
10005b3c:	84000054 	ori	r16,r16,1
10005b40:	ac400007 	ldb	r17,0(r21)
10005b44:	003d0206 	br	10004f50 <__alt_data_end+0xf8004f50>
10005b48:	8025883a 	mov	r18,r16
10005b4c:	dc002903 	ldbu	r16,164(sp)
10005b50:	e011883a 	mov	r8,fp
10005b54:	84003fcc 	andi	r16,r16,255
10005b58:	803de726 	beq	r16,zero,100052f8 <__alt_data_end+0xf80052f8>
10005b5c:	d8c02b03 	ldbu	r3,172(sp)
10005b60:	d8c02785 	stb	r3,158(sp)
10005b64:	003de406 	br	100052f8 <__alt_data_end+0xf80052f8>
10005b68:	84001014 	ori	r16,r16,64
10005b6c:	ac400007 	ldb	r17,0(r21)
10005b70:	003cf706 	br	10004f50 <__alt_data_end+0xf8004f50>
10005b74:	ac400007 	ldb	r17,0(r21)
10005b78:	00801b04 	movi	r2,108
10005b7c:	88838f26 	beq	r17,r2,100069bc <___vfprintf_internal_r+0x1bf4>
10005b80:	84000414 	ori	r16,r16,16
10005b84:	003cf206 	br	10004f50 <__alt_data_end+0xf8004f50>
10005b88:	8025883a 	mov	r18,r16
10005b8c:	dc002903 	ldbu	r16,164(sp)
10005b90:	e011883a 	mov	r8,fp
10005b94:	84003fcc 	andi	r16,r16,255
10005b98:	80053f1e 	bne	r16,zero,10007098 <___vfprintf_internal_r+0x22d0>
10005b9c:	9080080c 	andi	r2,r18,32
10005ba0:	1002d226 	beq	r2,zero,100066ec <___vfprintf_internal_r+0x1924>
10005ba4:	d9002e17 	ldw	r4,184(sp)
10005ba8:	d9402f17 	ldw	r5,188(sp)
10005bac:	20800017 	ldw	r2,0(r4)
10005bb0:	2807d7fa 	srai	r3,r5,31
10005bb4:	21000104 	addi	r4,r4,4
10005bb8:	d9002e15 	stw	r4,184(sp)
10005bbc:	11400015 	stw	r5,0(r2)
10005bc0:	10c00115 	stw	r3,4(r2)
10005bc4:	003cb806 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10005bc8:	d8c02e17 	ldw	r3,184(sp)
10005bcc:	d9002e17 	ldw	r4,184(sp)
10005bd0:	8025883a 	mov	r18,r16
10005bd4:	18800017 	ldw	r2,0(r3)
10005bd8:	21000104 	addi	r4,r4,4
10005bdc:	00c00044 	movi	r3,1
10005be0:	e011883a 	mov	r8,fp
10005be4:	d8c02915 	stw	r3,164(sp)
10005be8:	d8002785 	stb	zero,158(sp)
10005bec:	d8801405 	stb	r2,80(sp)
10005bf0:	d9002e15 	stw	r4,184(sp)
10005bf4:	d8c02b15 	stw	r3,172(sp)
10005bf8:	d8002a15 	stw	zero,168(sp)
10005bfc:	d8003215 	stw	zero,200(sp)
10005c00:	dc001404 	addi	r16,sp,80
10005c04:	0039883a 	mov	fp,zero
10005c08:	003e5306 	br	10005558 <__alt_data_end+0xf8005558>
10005c0c:	01040074 	movhi	r4,4097
10005c10:	21132d04 	addi	r4,r4,19636
10005c14:	0039883a 	mov	fp,zero
10005c18:	d9003915 	stw	r4,228(sp)
10005c1c:	04401e04 	movi	r17,120
10005c20:	003f6906 	br	100059c8 <__alt_data_end+0xf80059c8>
10005c24:	8025883a 	mov	r18,r16
10005c28:	dc002903 	ldbu	r16,164(sp)
10005c2c:	e011883a 	mov	r8,fp
10005c30:	84003fcc 	andi	r16,r16,255
10005c34:	8005081e 	bne	r16,zero,10007058 <___vfprintf_internal_r+0x2290>
10005c38:	883d6126 	beq	r17,zero,100051c0 <__alt_data_end+0xf80051c0>
10005c3c:	00c00044 	movi	r3,1
10005c40:	d8c02915 	stw	r3,164(sp)
10005c44:	dc401405 	stb	r17,80(sp)
10005c48:	d8002785 	stb	zero,158(sp)
10005c4c:	003fe906 	br	10005bf4 <__alt_data_end+0xf8005bf4>
10005c50:	01440074 	movhi	r5,4097
10005c54:	29532d04 	addi	r5,r5,19636
10005c58:	d9403915 	stw	r5,228(sp)
10005c5c:	d8c02e15 	stw	r3,184(sp)
10005c60:	1025883a 	mov	r18,r2
10005c64:	04401e04 	movi	r17,120
10005c68:	9d84b03a 	or	r2,r19,r22
10005c6c:	1000fc1e 	bne	r2,zero,10006060 <___vfprintf_internal_r+0x1298>
10005c70:	0039883a 	mov	fp,zero
10005c74:	00800084 	movi	r2,2
10005c78:	10803fcc 	andi	r2,r2,255
10005c7c:	00c00044 	movi	r3,1
10005c80:	10c20f26 	beq	r2,r3,100064c0 <___vfprintf_internal_r+0x16f8>
10005c84:	00c00084 	movi	r3,2
10005c88:	10fd3326 	beq	r2,r3,10005158 <__alt_data_end+0xf8005158>
10005c8c:	003e0b06 	br	100054bc <__alt_data_end+0xf80054bc>
10005c90:	d8c02017 	ldw	r3,128(sp)
10005c94:	003e7106 	br	1000565c <__alt_data_end+0xf800565c>
10005c98:	00801944 	movi	r2,101
10005c9c:	14407e0e 	bge	r2,r17,10005e98 <___vfprintf_internal_r+0x10d0>
10005ca0:	d9003617 	ldw	r4,216(sp)
10005ca4:	d9403817 	ldw	r5,224(sp)
10005ca8:	000d883a 	mov	r6,zero
10005cac:	000f883a 	mov	r7,zero
10005cb0:	d8c03c15 	stw	r3,240(sp)
10005cb4:	da003d15 	stw	r8,244(sp)
10005cb8:	00104e00 	call	100104e0 <__eqdf2>
10005cbc:	d8c03c17 	ldw	r3,240(sp)
10005cc0:	da003d17 	ldw	r8,244(sp)
10005cc4:	1000f71e 	bne	r2,zero,100060a4 <___vfprintf_internal_r+0x12dc>
10005cc8:	d8801f17 	ldw	r2,124(sp)
10005ccc:	01040074 	movhi	r4,4097
10005cd0:	21133404 	addi	r4,r4,19664
10005cd4:	18c00044 	addi	r3,r3,1
10005cd8:	10800044 	addi	r2,r2,1
10005cdc:	41000015 	stw	r4,0(r8)
10005ce0:	01000044 	movi	r4,1
10005ce4:	41000115 	stw	r4,4(r8)
10005ce8:	d8c02015 	stw	r3,128(sp)
10005cec:	d8801f15 	stw	r2,124(sp)
10005cf0:	010001c4 	movi	r4,7
10005cf4:	2082b816 	blt	r4,r2,100067d8 <___vfprintf_internal_r+0x1a10>
10005cf8:	42000204 	addi	r8,r8,8
10005cfc:	d8802617 	ldw	r2,152(sp)
10005d00:	d9403317 	ldw	r5,204(sp)
10005d04:	11400216 	blt	r2,r5,10005d10 <___vfprintf_internal_r+0xf48>
10005d08:	9080004c 	andi	r2,r18,1
10005d0c:	103eb326 	beq	r2,zero,100057dc <__alt_data_end+0xf80057dc>
10005d10:	d8803717 	ldw	r2,220(sp)
10005d14:	d9003417 	ldw	r4,208(sp)
10005d18:	d9403717 	ldw	r5,220(sp)
10005d1c:	1887883a 	add	r3,r3,r2
10005d20:	d8801f17 	ldw	r2,124(sp)
10005d24:	41000015 	stw	r4,0(r8)
10005d28:	41400115 	stw	r5,4(r8)
10005d2c:	10800044 	addi	r2,r2,1
10005d30:	d8c02015 	stw	r3,128(sp)
10005d34:	d8801f15 	stw	r2,124(sp)
10005d38:	010001c4 	movi	r4,7
10005d3c:	20832916 	blt	r4,r2,100069e4 <___vfprintf_internal_r+0x1c1c>
10005d40:	42000204 	addi	r8,r8,8
10005d44:	d8803317 	ldw	r2,204(sp)
10005d48:	143fffc4 	addi	r16,r2,-1
10005d4c:	043ea30e 	bge	zero,r16,100057dc <__alt_data_end+0xf80057dc>
10005d50:	04400404 	movi	r17,16
10005d54:	d8801f17 	ldw	r2,124(sp)
10005d58:	8c00880e 	bge	r17,r16,10005f7c <___vfprintf_internal_r+0x11b4>
10005d5c:	01440074 	movhi	r5,4097
10005d60:	29533484 	addi	r5,r5,19666
10005d64:	d9402c15 	stw	r5,176(sp)
10005d68:	058001c4 	movi	r22,7
10005d6c:	dcc02d17 	ldw	r19,180(sp)
10005d70:	00000306 	br	10005d80 <___vfprintf_internal_r+0xfb8>
10005d74:	42000204 	addi	r8,r8,8
10005d78:	843ffc04 	addi	r16,r16,-16
10005d7c:	8c00820e 	bge	r17,r16,10005f88 <___vfprintf_internal_r+0x11c0>
10005d80:	18c00404 	addi	r3,r3,16
10005d84:	10800044 	addi	r2,r2,1
10005d88:	45000015 	stw	r20,0(r8)
10005d8c:	44400115 	stw	r17,4(r8)
10005d90:	d8c02015 	stw	r3,128(sp)
10005d94:	d8801f15 	stw	r2,124(sp)
10005d98:	b0bff60e 	bge	r22,r2,10005d74 <__alt_data_end+0xf8005d74>
10005d9c:	d9801e04 	addi	r6,sp,120
10005da0:	b80b883a 	mov	r5,r23
10005da4:	9809883a 	mov	r4,r19
10005da8:	000c5a80 	call	1000c5a8 <__sprint_r>
10005dac:	103d0a1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10005db0:	d8c02017 	ldw	r3,128(sp)
10005db4:	d8801f17 	ldw	r2,124(sp)
10005db8:	da000404 	addi	r8,sp,16
10005dbc:	003fee06 	br	10005d78 <__alt_data_end+0xf8005d78>
10005dc0:	d9403117 	ldw	r5,196(sp)
10005dc4:	d8802917 	ldw	r2,164(sp)
10005dc8:	28adc83a 	sub	r22,r5,r2
10005dcc:	05be410e 	bge	zero,r22,100056d4 <__alt_data_end+0xf80056d4>
10005dd0:	07000404 	movi	fp,16
10005dd4:	d8801f17 	ldw	r2,124(sp)
10005dd8:	e5838f0e 	bge	fp,r22,10006c18 <___vfprintf_internal_r+0x1e50>
10005ddc:	01440074 	movhi	r5,4097
10005de0:	29533484 	addi	r5,r5,19666
10005de4:	dc403015 	stw	r17,192(sp)
10005de8:	d9402c15 	stw	r5,176(sp)
10005dec:	b023883a 	mov	r17,r22
10005df0:	04c001c4 	movi	r19,7
10005df4:	a82d883a 	mov	r22,r21
10005df8:	902b883a 	mov	r21,r18
10005dfc:	8025883a 	mov	r18,r16
10005e00:	dc002d17 	ldw	r16,180(sp)
10005e04:	00000306 	br	10005e14 <___vfprintf_internal_r+0x104c>
10005e08:	8c7ffc04 	addi	r17,r17,-16
10005e0c:	42000204 	addi	r8,r8,8
10005e10:	e440110e 	bge	fp,r17,10005e58 <___vfprintf_internal_r+0x1090>
10005e14:	18c00404 	addi	r3,r3,16
10005e18:	10800044 	addi	r2,r2,1
10005e1c:	45000015 	stw	r20,0(r8)
10005e20:	47000115 	stw	fp,4(r8)
10005e24:	d8c02015 	stw	r3,128(sp)
10005e28:	d8801f15 	stw	r2,124(sp)
10005e2c:	98bff60e 	bge	r19,r2,10005e08 <__alt_data_end+0xf8005e08>
10005e30:	d9801e04 	addi	r6,sp,120
10005e34:	b80b883a 	mov	r5,r23
10005e38:	8009883a 	mov	r4,r16
10005e3c:	000c5a80 	call	1000c5a8 <__sprint_r>
10005e40:	103ce51e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10005e44:	8c7ffc04 	addi	r17,r17,-16
10005e48:	d8c02017 	ldw	r3,128(sp)
10005e4c:	d8801f17 	ldw	r2,124(sp)
10005e50:	da000404 	addi	r8,sp,16
10005e54:	e47fef16 	blt	fp,r17,10005e14 <__alt_data_end+0xf8005e14>
10005e58:	9021883a 	mov	r16,r18
10005e5c:	a825883a 	mov	r18,r21
10005e60:	b02b883a 	mov	r21,r22
10005e64:	882d883a 	mov	r22,r17
10005e68:	dc403017 	ldw	r17,192(sp)
10005e6c:	d9002c17 	ldw	r4,176(sp)
10005e70:	1d87883a 	add	r3,r3,r22
10005e74:	10800044 	addi	r2,r2,1
10005e78:	41000015 	stw	r4,0(r8)
10005e7c:	45800115 	stw	r22,4(r8)
10005e80:	d8c02015 	stw	r3,128(sp)
10005e84:	d8801f15 	stw	r2,124(sp)
10005e88:	010001c4 	movi	r4,7
10005e8c:	20818e16 	blt	r4,r2,100064c8 <___vfprintf_internal_r+0x1700>
10005e90:	42000204 	addi	r8,r8,8
10005e94:	003e0f06 	br	100056d4 <__alt_data_end+0xf80056d4>
10005e98:	d9403317 	ldw	r5,204(sp)
10005e9c:	00800044 	movi	r2,1
10005ea0:	18c00044 	addi	r3,r3,1
10005ea4:	1141530e 	bge	r2,r5,100063f4 <___vfprintf_internal_r+0x162c>
10005ea8:	dc401f17 	ldw	r17,124(sp)
10005eac:	00800044 	movi	r2,1
10005eb0:	40800115 	stw	r2,4(r8)
10005eb4:	8c400044 	addi	r17,r17,1
10005eb8:	44000015 	stw	r16,0(r8)
10005ebc:	d8c02015 	stw	r3,128(sp)
10005ec0:	dc401f15 	stw	r17,124(sp)
10005ec4:	008001c4 	movi	r2,7
10005ec8:	14416b16 	blt	r2,r17,10006478 <___vfprintf_internal_r+0x16b0>
10005ecc:	42000204 	addi	r8,r8,8
10005ed0:	d8803717 	ldw	r2,220(sp)
10005ed4:	d9003417 	ldw	r4,208(sp)
10005ed8:	8c400044 	addi	r17,r17,1
10005edc:	10c7883a 	add	r3,r2,r3
10005ee0:	40800115 	stw	r2,4(r8)
10005ee4:	41000015 	stw	r4,0(r8)
10005ee8:	d8c02015 	stw	r3,128(sp)
10005eec:	dc401f15 	stw	r17,124(sp)
10005ef0:	008001c4 	movi	r2,7
10005ef4:	14416916 	blt	r2,r17,1000649c <___vfprintf_internal_r+0x16d4>
10005ef8:	45800204 	addi	r22,r8,8
10005efc:	d9003617 	ldw	r4,216(sp)
10005f00:	d9403817 	ldw	r5,224(sp)
10005f04:	000d883a 	mov	r6,zero
10005f08:	000f883a 	mov	r7,zero
10005f0c:	d8c03c15 	stw	r3,240(sp)
10005f10:	00104e00 	call	100104e0 <__eqdf2>
10005f14:	d8c03c17 	ldw	r3,240(sp)
10005f18:	1000bc26 	beq	r2,zero,1000620c <___vfprintf_internal_r+0x1444>
10005f1c:	d9403317 	ldw	r5,204(sp)
10005f20:	84000044 	addi	r16,r16,1
10005f24:	8c400044 	addi	r17,r17,1
10005f28:	28bfffc4 	addi	r2,r5,-1
10005f2c:	1887883a 	add	r3,r3,r2
10005f30:	b0800115 	stw	r2,4(r22)
10005f34:	b4000015 	stw	r16,0(r22)
10005f38:	d8c02015 	stw	r3,128(sp)
10005f3c:	dc401f15 	stw	r17,124(sp)
10005f40:	008001c4 	movi	r2,7
10005f44:	14414316 	blt	r2,r17,10006454 <___vfprintf_internal_r+0x168c>
10005f48:	b5800204 	addi	r22,r22,8
10005f4c:	d9003a17 	ldw	r4,232(sp)
10005f50:	df0022c4 	addi	fp,sp,139
10005f54:	8c400044 	addi	r17,r17,1
10005f58:	20c7883a 	add	r3,r4,r3
10005f5c:	b7000015 	stw	fp,0(r22)
10005f60:	b1000115 	stw	r4,4(r22)
10005f64:	d8c02015 	stw	r3,128(sp)
10005f68:	dc401f15 	stw	r17,124(sp)
10005f6c:	008001c4 	movi	r2,7
10005f70:	14400e16 	blt	r2,r17,10005fac <___vfprintf_internal_r+0x11e4>
10005f74:	b2000204 	addi	r8,r22,8
10005f78:	003e1806 	br	100057dc <__alt_data_end+0xf80057dc>
10005f7c:	01040074 	movhi	r4,4097
10005f80:	21133484 	addi	r4,r4,19666
10005f84:	d9002c15 	stw	r4,176(sp)
10005f88:	d9002c17 	ldw	r4,176(sp)
10005f8c:	1c07883a 	add	r3,r3,r16
10005f90:	44000115 	stw	r16,4(r8)
10005f94:	41000015 	stw	r4,0(r8)
10005f98:	10800044 	addi	r2,r2,1
10005f9c:	d8c02015 	stw	r3,128(sp)
10005fa0:	d8801f15 	stw	r2,124(sp)
10005fa4:	010001c4 	movi	r4,7
10005fa8:	20be0b0e 	bge	r4,r2,100057d8 <__alt_data_end+0xf80057d8>
10005fac:	d9002d17 	ldw	r4,180(sp)
10005fb0:	d9801e04 	addi	r6,sp,120
10005fb4:	b80b883a 	mov	r5,r23
10005fb8:	000c5a80 	call	1000c5a8 <__sprint_r>
10005fbc:	103c861e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10005fc0:	d8c02017 	ldw	r3,128(sp)
10005fc4:	da000404 	addi	r8,sp,16
10005fc8:	003e0406 	br	100057dc <__alt_data_end+0xf80057dc>
10005fcc:	d9002d17 	ldw	r4,180(sp)
10005fd0:	d9801e04 	addi	r6,sp,120
10005fd4:	b80b883a 	mov	r5,r23
10005fd8:	000c5a80 	call	1000c5a8 <__sprint_r>
10005fdc:	103e3b26 	beq	r2,zero,100058cc <__alt_data_end+0xf80058cc>
10005fe0:	003c7d06 	br	100051d8 <__alt_data_end+0xf80051d8>
10005fe4:	d9002d17 	ldw	r4,180(sp)
10005fe8:	d9801e04 	addi	r6,sp,120
10005fec:	b80b883a 	mov	r5,r23
10005ff0:	000c5a80 	call	1000c5a8 <__sprint_r>
10005ff4:	103c781e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10005ff8:	d8c02017 	ldw	r3,128(sp)
10005ffc:	da000404 	addi	r8,sp,16
10006000:	003de906 	br	100057a8 <__alt_data_end+0xf80057a8>
10006004:	d9002d17 	ldw	r4,180(sp)
10006008:	d9801e04 	addi	r6,sp,120
1000600c:	b80b883a 	mov	r5,r23
10006010:	000c5a80 	call	1000c5a8 <__sprint_r>
10006014:	103c701e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006018:	d8c02017 	ldw	r3,128(sp)
1000601c:	da000404 	addi	r8,sp,16
10006020:	003d9b06 	br	10005690 <__alt_data_end+0xf8005690>
10006024:	d9002d17 	ldw	r4,180(sp)
10006028:	d9801e04 	addi	r6,sp,120
1000602c:	b80b883a 	mov	r5,r23
10006030:	000c5a80 	call	1000c5a8 <__sprint_r>
10006034:	103c681e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006038:	d8c02017 	ldw	r3,128(sp)
1000603c:	da000404 	addi	r8,sp,16
10006040:	003da106 	br	100056c8 <__alt_data_end+0xf80056c8>
10006044:	d9402a17 	ldw	r5,168(sp)
10006048:	d8002785 	stb	zero,158(sp)
1000604c:	283f0616 	blt	r5,zero,10005c68 <__alt_data_end+0xf8005c68>
10006050:	00ffdfc4 	movi	r3,-129
10006054:	9d84b03a 	or	r2,r19,r22
10006058:	90e4703a 	and	r18,r18,r3
1000605c:	103c3b26 	beq	r2,zero,1000514c <__alt_data_end+0xf800514c>
10006060:	0039883a 	mov	fp,zero
10006064:	003e5806 	br	100059c8 <__alt_data_end+0xf80059c8>
10006068:	9080040c 	andi	r2,r18,16
1000606c:	1001b326 	beq	r2,zero,1000673c <___vfprintf_internal_r+0x1974>
10006070:	d8c02e17 	ldw	r3,184(sp)
10006074:	d9002a17 	ldw	r4,168(sp)
10006078:	d8002785 	stb	zero,158(sp)
1000607c:	18800104 	addi	r2,r3,4
10006080:	1cc00017 	ldw	r19,0(r3)
10006084:	002d883a 	mov	r22,zero
10006088:	2001b516 	blt	r4,zero,10006760 <___vfprintf_internal_r+0x1998>
1000608c:	00ffdfc4 	movi	r3,-129
10006090:	d8802e15 	stw	r2,184(sp)
10006094:	90e4703a 	and	r18,r18,r3
10006098:	983d0526 	beq	r19,zero,100054b0 <__alt_data_end+0xf80054b0>
1000609c:	0039883a 	mov	fp,zero
100060a0:	003d0806 	br	100054c4 <__alt_data_end+0xf80054c4>
100060a4:	dc402617 	ldw	r17,152(sp)
100060a8:	0441d30e 	bge	zero,r17,100067f8 <___vfprintf_internal_r+0x1a30>
100060ac:	dc403217 	ldw	r17,200(sp)
100060b0:	d8803317 	ldw	r2,204(sp)
100060b4:	1440010e 	bge	r2,r17,100060bc <___vfprintf_internal_r+0x12f4>
100060b8:	1023883a 	mov	r17,r2
100060bc:	04400a0e 	bge	zero,r17,100060e8 <___vfprintf_internal_r+0x1320>
100060c0:	d8801f17 	ldw	r2,124(sp)
100060c4:	1c47883a 	add	r3,r3,r17
100060c8:	44000015 	stw	r16,0(r8)
100060cc:	10800044 	addi	r2,r2,1
100060d0:	44400115 	stw	r17,4(r8)
100060d4:	d8c02015 	stw	r3,128(sp)
100060d8:	d8801f15 	stw	r2,124(sp)
100060dc:	010001c4 	movi	r4,7
100060e0:	20826516 	blt	r4,r2,10006a78 <___vfprintf_internal_r+0x1cb0>
100060e4:	42000204 	addi	r8,r8,8
100060e8:	88026116 	blt	r17,zero,10006a70 <___vfprintf_internal_r+0x1ca8>
100060ec:	d9003217 	ldw	r4,200(sp)
100060f0:	2463c83a 	sub	r17,r4,r17
100060f4:	04407b0e 	bge	zero,r17,100062e4 <___vfprintf_internal_r+0x151c>
100060f8:	05800404 	movi	r22,16
100060fc:	d8801f17 	ldw	r2,124(sp)
10006100:	b4419d0e 	bge	r22,r17,10006778 <___vfprintf_internal_r+0x19b0>
10006104:	01040074 	movhi	r4,4097
10006108:	21133484 	addi	r4,r4,19666
1000610c:	d9002c15 	stw	r4,176(sp)
10006110:	070001c4 	movi	fp,7
10006114:	dcc02d17 	ldw	r19,180(sp)
10006118:	00000306 	br	10006128 <___vfprintf_internal_r+0x1360>
1000611c:	42000204 	addi	r8,r8,8
10006120:	8c7ffc04 	addi	r17,r17,-16
10006124:	b441970e 	bge	r22,r17,10006784 <___vfprintf_internal_r+0x19bc>
10006128:	18c00404 	addi	r3,r3,16
1000612c:	10800044 	addi	r2,r2,1
10006130:	45000015 	stw	r20,0(r8)
10006134:	45800115 	stw	r22,4(r8)
10006138:	d8c02015 	stw	r3,128(sp)
1000613c:	d8801f15 	stw	r2,124(sp)
10006140:	e0bff60e 	bge	fp,r2,1000611c <__alt_data_end+0xf800611c>
10006144:	d9801e04 	addi	r6,sp,120
10006148:	b80b883a 	mov	r5,r23
1000614c:	9809883a 	mov	r4,r19
10006150:	000c5a80 	call	1000c5a8 <__sprint_r>
10006154:	103c201e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006158:	d8c02017 	ldw	r3,128(sp)
1000615c:	d8801f17 	ldw	r2,124(sp)
10006160:	da000404 	addi	r8,sp,16
10006164:	003fee06 	br	10006120 <__alt_data_end+0xf8006120>
10006168:	d9002d17 	ldw	r4,180(sp)
1000616c:	d9801e04 	addi	r6,sp,120
10006170:	b80b883a 	mov	r5,r23
10006174:	000c5a80 	call	1000c5a8 <__sprint_r>
10006178:	103c171e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
1000617c:	d8c02017 	ldw	r3,128(sp)
10006180:	df002787 	ldb	fp,158(sp)
10006184:	da000404 	addi	r8,sp,16
10006188:	003d3406 	br	1000565c <__alt_data_end+0xf800565c>
1000618c:	9080040c 	andi	r2,r18,16
10006190:	10016126 	beq	r2,zero,10006718 <___vfprintf_internal_r+0x1950>
10006194:	d9402e17 	ldw	r5,184(sp)
10006198:	2cc00017 	ldw	r19,0(r5)
1000619c:	29400104 	addi	r5,r5,4
100061a0:	d9402e15 	stw	r5,184(sp)
100061a4:	982dd7fa 	srai	r22,r19,31
100061a8:	b005883a 	mov	r2,r22
100061ac:	003c5a06 	br	10005318 <__alt_data_end+0xf8005318>
100061b0:	9080040c 	andi	r2,r18,16
100061b4:	10003526 	beq	r2,zero,1000628c <___vfprintf_internal_r+0x14c4>
100061b8:	d8c02e17 	ldw	r3,184(sp)
100061bc:	d9002a17 	ldw	r4,168(sp)
100061c0:	d8002785 	stb	zero,158(sp)
100061c4:	18800104 	addi	r2,r3,4
100061c8:	1cc00017 	ldw	r19,0(r3)
100061cc:	002d883a 	mov	r22,zero
100061d0:	20003716 	blt	r4,zero,100062b0 <___vfprintf_internal_r+0x14e8>
100061d4:	00ffdfc4 	movi	r3,-129
100061d8:	d8802e15 	stw	r2,184(sp)
100061dc:	90e4703a 	and	r18,r18,r3
100061e0:	0039883a 	mov	fp,zero
100061e4:	983dd426 	beq	r19,zero,10005938 <__alt_data_end+0xf8005938>
100061e8:	00800244 	movi	r2,9
100061ec:	14fc5336 	bltu	r2,r19,1000533c <__alt_data_end+0xf800533c>
100061f0:	d8c02817 	ldw	r3,160(sp)
100061f4:	dc001dc4 	addi	r16,sp,119
100061f8:	9cc00c04 	addi	r19,r19,48
100061fc:	1c07c83a 	sub	r3,r3,r16
10006200:	dcc01dc5 	stb	r19,119(sp)
10006204:	d8c02b15 	stw	r3,172(sp)
10006208:	003cc606 	br	10005524 <__alt_data_end+0xf8005524>
1000620c:	d8803317 	ldw	r2,204(sp)
10006210:	143fffc4 	addi	r16,r2,-1
10006214:	043f4d0e 	bge	zero,r16,10005f4c <__alt_data_end+0xf8005f4c>
10006218:	07000404 	movi	fp,16
1000621c:	e400810e 	bge	fp,r16,10006424 <___vfprintf_internal_r+0x165c>
10006220:	01440074 	movhi	r5,4097
10006224:	29533484 	addi	r5,r5,19666
10006228:	d9402c15 	stw	r5,176(sp)
1000622c:	01c001c4 	movi	r7,7
10006230:	dcc02d17 	ldw	r19,180(sp)
10006234:	00000306 	br	10006244 <___vfprintf_internal_r+0x147c>
10006238:	b5800204 	addi	r22,r22,8
1000623c:	843ffc04 	addi	r16,r16,-16
10006240:	e4007b0e 	bge	fp,r16,10006430 <___vfprintf_internal_r+0x1668>
10006244:	18c00404 	addi	r3,r3,16
10006248:	8c400044 	addi	r17,r17,1
1000624c:	b5000015 	stw	r20,0(r22)
10006250:	b7000115 	stw	fp,4(r22)
10006254:	d8c02015 	stw	r3,128(sp)
10006258:	dc401f15 	stw	r17,124(sp)
1000625c:	3c7ff60e 	bge	r7,r17,10006238 <__alt_data_end+0xf8006238>
10006260:	d9801e04 	addi	r6,sp,120
10006264:	b80b883a 	mov	r5,r23
10006268:	9809883a 	mov	r4,r19
1000626c:	d9c03c15 	stw	r7,240(sp)
10006270:	000c5a80 	call	1000c5a8 <__sprint_r>
10006274:	d9c03c17 	ldw	r7,240(sp)
10006278:	103bd71e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
1000627c:	d8c02017 	ldw	r3,128(sp)
10006280:	dc401f17 	ldw	r17,124(sp)
10006284:	dd800404 	addi	r22,sp,16
10006288:	003fec06 	br	1000623c <__alt_data_end+0xf800623c>
1000628c:	9080100c 	andi	r2,r18,64
10006290:	d8002785 	stb	zero,158(sp)
10006294:	10010e26 	beq	r2,zero,100066d0 <___vfprintf_internal_r+0x1908>
10006298:	d9402e17 	ldw	r5,184(sp)
1000629c:	d8c02a17 	ldw	r3,168(sp)
100062a0:	002d883a 	mov	r22,zero
100062a4:	28800104 	addi	r2,r5,4
100062a8:	2cc0000b 	ldhu	r19,0(r5)
100062ac:	183fc90e 	bge	r3,zero,100061d4 <__alt_data_end+0xf80061d4>
100062b0:	d8802e15 	stw	r2,184(sp)
100062b4:	0039883a 	mov	fp,zero
100062b8:	9d84b03a 	or	r2,r19,r22
100062bc:	103c1e1e 	bne	r2,zero,10005338 <__alt_data_end+0xf8005338>
100062c0:	00800044 	movi	r2,1
100062c4:	003e6c06 	br	10005c78 <__alt_data_end+0xf8005c78>
100062c8:	d9002d17 	ldw	r4,180(sp)
100062cc:	d9801e04 	addi	r6,sp,120
100062d0:	b80b883a 	mov	r5,r23
100062d4:	000c5a80 	call	1000c5a8 <__sprint_r>
100062d8:	103bbf1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100062dc:	d8c02017 	ldw	r3,128(sp)
100062e0:	da000404 	addi	r8,sp,16
100062e4:	d9003217 	ldw	r4,200(sp)
100062e8:	d8802617 	ldw	r2,152(sp)
100062ec:	d9403317 	ldw	r5,204(sp)
100062f0:	8123883a 	add	r17,r16,r4
100062f4:	11400216 	blt	r2,r5,10006300 <___vfprintf_internal_r+0x1538>
100062f8:	9100004c 	andi	r4,r18,1
100062fc:	20000d26 	beq	r4,zero,10006334 <___vfprintf_internal_r+0x156c>
10006300:	d9003717 	ldw	r4,220(sp)
10006304:	d9403417 	ldw	r5,208(sp)
10006308:	1907883a 	add	r3,r3,r4
1000630c:	d9001f17 	ldw	r4,124(sp)
10006310:	41400015 	stw	r5,0(r8)
10006314:	d9403717 	ldw	r5,220(sp)
10006318:	21000044 	addi	r4,r4,1
1000631c:	d8c02015 	stw	r3,128(sp)
10006320:	41400115 	stw	r5,4(r8)
10006324:	d9001f15 	stw	r4,124(sp)
10006328:	014001c4 	movi	r5,7
1000632c:	2901e816 	blt	r5,r4,10006ad0 <___vfprintf_internal_r+0x1d08>
10006330:	42000204 	addi	r8,r8,8
10006334:	d9003317 	ldw	r4,204(sp)
10006338:	8121883a 	add	r16,r16,r4
1000633c:	2085c83a 	sub	r2,r4,r2
10006340:	8461c83a 	sub	r16,r16,r17
10006344:	1400010e 	bge	r2,r16,1000634c <___vfprintf_internal_r+0x1584>
10006348:	1021883a 	mov	r16,r2
1000634c:	04000a0e 	bge	zero,r16,10006378 <___vfprintf_internal_r+0x15b0>
10006350:	d9001f17 	ldw	r4,124(sp)
10006354:	1c07883a 	add	r3,r3,r16
10006358:	44400015 	stw	r17,0(r8)
1000635c:	21000044 	addi	r4,r4,1
10006360:	44000115 	stw	r16,4(r8)
10006364:	d8c02015 	stw	r3,128(sp)
10006368:	d9001f15 	stw	r4,124(sp)
1000636c:	014001c4 	movi	r5,7
10006370:	2901fb16 	blt	r5,r4,10006b60 <___vfprintf_internal_r+0x1d98>
10006374:	42000204 	addi	r8,r8,8
10006378:	8001f716 	blt	r16,zero,10006b58 <___vfprintf_internal_r+0x1d90>
1000637c:	1421c83a 	sub	r16,r2,r16
10006380:	043d160e 	bge	zero,r16,100057dc <__alt_data_end+0xf80057dc>
10006384:	04400404 	movi	r17,16
10006388:	d8801f17 	ldw	r2,124(sp)
1000638c:	8c3efb0e 	bge	r17,r16,10005f7c <__alt_data_end+0xf8005f7c>
10006390:	01440074 	movhi	r5,4097
10006394:	29533484 	addi	r5,r5,19666
10006398:	d9402c15 	stw	r5,176(sp)
1000639c:	058001c4 	movi	r22,7
100063a0:	dcc02d17 	ldw	r19,180(sp)
100063a4:	00000306 	br	100063b4 <___vfprintf_internal_r+0x15ec>
100063a8:	42000204 	addi	r8,r8,8
100063ac:	843ffc04 	addi	r16,r16,-16
100063b0:	8c3ef50e 	bge	r17,r16,10005f88 <__alt_data_end+0xf8005f88>
100063b4:	18c00404 	addi	r3,r3,16
100063b8:	10800044 	addi	r2,r2,1
100063bc:	45000015 	stw	r20,0(r8)
100063c0:	44400115 	stw	r17,4(r8)
100063c4:	d8c02015 	stw	r3,128(sp)
100063c8:	d8801f15 	stw	r2,124(sp)
100063cc:	b0bff60e 	bge	r22,r2,100063a8 <__alt_data_end+0xf80063a8>
100063d0:	d9801e04 	addi	r6,sp,120
100063d4:	b80b883a 	mov	r5,r23
100063d8:	9809883a 	mov	r4,r19
100063dc:	000c5a80 	call	1000c5a8 <__sprint_r>
100063e0:	103b7d1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100063e4:	d8c02017 	ldw	r3,128(sp)
100063e8:	d8801f17 	ldw	r2,124(sp)
100063ec:	da000404 	addi	r8,sp,16
100063f0:	003fee06 	br	100063ac <__alt_data_end+0xf80063ac>
100063f4:	9088703a 	and	r4,r18,r2
100063f8:	203eab1e 	bne	r4,zero,10005ea8 <__alt_data_end+0xf8005ea8>
100063fc:	dc401f17 	ldw	r17,124(sp)
10006400:	40800115 	stw	r2,4(r8)
10006404:	44000015 	stw	r16,0(r8)
10006408:	8c400044 	addi	r17,r17,1
1000640c:	d8c02015 	stw	r3,128(sp)
10006410:	dc401f15 	stw	r17,124(sp)
10006414:	008001c4 	movi	r2,7
10006418:	14400e16 	blt	r2,r17,10006454 <___vfprintf_internal_r+0x168c>
1000641c:	45800204 	addi	r22,r8,8
10006420:	003eca06 	br	10005f4c <__alt_data_end+0xf8005f4c>
10006424:	01040074 	movhi	r4,4097
10006428:	21133484 	addi	r4,r4,19666
1000642c:	d9002c15 	stw	r4,176(sp)
10006430:	d8802c17 	ldw	r2,176(sp)
10006434:	1c07883a 	add	r3,r3,r16
10006438:	8c400044 	addi	r17,r17,1
1000643c:	b0800015 	stw	r2,0(r22)
10006440:	b4000115 	stw	r16,4(r22)
10006444:	d8c02015 	stw	r3,128(sp)
10006448:	dc401f15 	stw	r17,124(sp)
1000644c:	008001c4 	movi	r2,7
10006450:	147ebd0e 	bge	r2,r17,10005f48 <__alt_data_end+0xf8005f48>
10006454:	d9002d17 	ldw	r4,180(sp)
10006458:	d9801e04 	addi	r6,sp,120
1000645c:	b80b883a 	mov	r5,r23
10006460:	000c5a80 	call	1000c5a8 <__sprint_r>
10006464:	103b5c1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006468:	d8c02017 	ldw	r3,128(sp)
1000646c:	dc401f17 	ldw	r17,124(sp)
10006470:	dd800404 	addi	r22,sp,16
10006474:	003eb506 	br	10005f4c <__alt_data_end+0xf8005f4c>
10006478:	d9002d17 	ldw	r4,180(sp)
1000647c:	d9801e04 	addi	r6,sp,120
10006480:	b80b883a 	mov	r5,r23
10006484:	000c5a80 	call	1000c5a8 <__sprint_r>
10006488:	103b531e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
1000648c:	d8c02017 	ldw	r3,128(sp)
10006490:	dc401f17 	ldw	r17,124(sp)
10006494:	da000404 	addi	r8,sp,16
10006498:	003e8d06 	br	10005ed0 <__alt_data_end+0xf8005ed0>
1000649c:	d9002d17 	ldw	r4,180(sp)
100064a0:	d9801e04 	addi	r6,sp,120
100064a4:	b80b883a 	mov	r5,r23
100064a8:	000c5a80 	call	1000c5a8 <__sprint_r>
100064ac:	103b4a1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100064b0:	d8c02017 	ldw	r3,128(sp)
100064b4:	dc401f17 	ldw	r17,124(sp)
100064b8:	dd800404 	addi	r22,sp,16
100064bc:	003e8f06 	br	10005efc <__alt_data_end+0xf8005efc>
100064c0:	0027883a 	mov	r19,zero
100064c4:	003f4a06 	br	100061f0 <__alt_data_end+0xf80061f0>
100064c8:	d9002d17 	ldw	r4,180(sp)
100064cc:	d9801e04 	addi	r6,sp,120
100064d0:	b80b883a 	mov	r5,r23
100064d4:	000c5a80 	call	1000c5a8 <__sprint_r>
100064d8:	103b3f1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100064dc:	d8c02017 	ldw	r3,128(sp)
100064e0:	da000404 	addi	r8,sp,16
100064e4:	003c7b06 	br	100056d4 <__alt_data_end+0xf80056d4>
100064e8:	d9402a17 	ldw	r5,168(sp)
100064ec:	04e7c83a 	sub	r19,zero,r19
100064f0:	07000b44 	movi	fp,45
100064f4:	9804c03a 	cmpne	r2,r19,zero
100064f8:	05adc83a 	sub	r22,zero,r22
100064fc:	df002785 	stb	fp,158(sp)
10006500:	b0adc83a 	sub	r22,r22,r2
10006504:	28017b16 	blt	r5,zero,10006af4 <___vfprintf_internal_r+0x1d2c>
10006508:	00bfdfc4 	movi	r2,-129
1000650c:	90a4703a 	and	r18,r18,r2
10006510:	003b8906 	br	10005338 <__alt_data_end+0xf8005338>
10006514:	d9003617 	ldw	r4,216(sp)
10006518:	d9403817 	ldw	r5,224(sp)
1000651c:	da003d15 	stw	r8,244(sp)
10006520:	000c1cc0 	call	1000c1cc <__fpclassifyd>
10006524:	da003d17 	ldw	r8,244(sp)
10006528:	1000f026 	beq	r2,zero,100068ec <___vfprintf_internal_r+0x1b24>
1000652c:	d9002a17 	ldw	r4,168(sp)
10006530:	05bff7c4 	movi	r22,-33
10006534:	00bfffc4 	movi	r2,-1
10006538:	8dac703a 	and	r22,r17,r22
1000653c:	20820026 	beq	r4,r2,10006d40 <___vfprintf_internal_r+0x1f78>
10006540:	008011c4 	movi	r2,71
10006544:	b081f726 	beq	r22,r2,10006d24 <___vfprintf_internal_r+0x1f5c>
10006548:	d9003817 	ldw	r4,224(sp)
1000654c:	90c04014 	ori	r3,r18,256
10006550:	d8c02c15 	stw	r3,176(sp)
10006554:	20021516 	blt	r4,zero,10006dac <___vfprintf_internal_r+0x1fe4>
10006558:	dcc03817 	ldw	r19,224(sp)
1000655c:	d8002905 	stb	zero,164(sp)
10006560:	00801984 	movi	r2,102
10006564:	8881f926 	beq	r17,r2,10006d4c <___vfprintf_internal_r+0x1f84>
10006568:	00801184 	movi	r2,70
1000656c:	88821c26 	beq	r17,r2,10006de0 <___vfprintf_internal_r+0x2018>
10006570:	00801144 	movi	r2,69
10006574:	b081ef26 	beq	r22,r2,10006d34 <___vfprintf_internal_r+0x1f6c>
10006578:	d8c02a17 	ldw	r3,168(sp)
1000657c:	d8802104 	addi	r2,sp,132
10006580:	d8800315 	stw	r2,12(sp)
10006584:	d9403617 	ldw	r5,216(sp)
10006588:	d8802504 	addi	r2,sp,148
1000658c:	d9002d17 	ldw	r4,180(sp)
10006590:	d8800215 	stw	r2,8(sp)
10006594:	d8802604 	addi	r2,sp,152
10006598:	d8c00015 	stw	r3,0(sp)
1000659c:	d8800115 	stw	r2,4(sp)
100065a0:	01c00084 	movi	r7,2
100065a4:	980d883a 	mov	r6,r19
100065a8:	d8c03c15 	stw	r3,240(sp)
100065ac:	da003d15 	stw	r8,244(sp)
100065b0:	00074f80 	call	100074f8 <_dtoa_r>
100065b4:	1021883a 	mov	r16,r2
100065b8:	008019c4 	movi	r2,103
100065bc:	d8c03c17 	ldw	r3,240(sp)
100065c0:	da003d17 	ldw	r8,244(sp)
100065c4:	88817126 	beq	r17,r2,10006b8c <___vfprintf_internal_r+0x1dc4>
100065c8:	008011c4 	movi	r2,71
100065cc:	88829126 	beq	r17,r2,10007014 <___vfprintf_internal_r+0x224c>
100065d0:	80f9883a 	add	fp,r16,r3
100065d4:	d9003617 	ldw	r4,216(sp)
100065d8:	000d883a 	mov	r6,zero
100065dc:	000f883a 	mov	r7,zero
100065e0:	980b883a 	mov	r5,r19
100065e4:	da003d15 	stw	r8,244(sp)
100065e8:	00104e00 	call	100104e0 <__eqdf2>
100065ec:	da003d17 	ldw	r8,244(sp)
100065f0:	10018d26 	beq	r2,zero,10006c28 <___vfprintf_internal_r+0x1e60>
100065f4:	d8802117 	ldw	r2,132(sp)
100065f8:	1700062e 	bgeu	r2,fp,10006614 <___vfprintf_internal_r+0x184c>
100065fc:	01000c04 	movi	r4,48
10006600:	10c00044 	addi	r3,r2,1
10006604:	d8c02115 	stw	r3,132(sp)
10006608:	11000005 	stb	r4,0(r2)
1000660c:	d8802117 	ldw	r2,132(sp)
10006610:	173ffb36 	bltu	r2,fp,10006600 <__alt_data_end+0xf8006600>
10006614:	1405c83a 	sub	r2,r2,r16
10006618:	d8803315 	stw	r2,204(sp)
1000661c:	008011c4 	movi	r2,71
10006620:	b0817626 	beq	r22,r2,10006bfc <___vfprintf_internal_r+0x1e34>
10006624:	00801944 	movi	r2,101
10006628:	1442800e 	bge	r2,r17,1000702c <___vfprintf_internal_r+0x2264>
1000662c:	d8c02617 	ldw	r3,152(sp)
10006630:	00801984 	movi	r2,102
10006634:	d8c03215 	stw	r3,200(sp)
10006638:	8881fe26 	beq	r17,r2,10006e34 <___vfprintf_internal_r+0x206c>
1000663c:	d8c03217 	ldw	r3,200(sp)
10006640:	d9003317 	ldw	r4,204(sp)
10006644:	1901dd16 	blt	r3,r4,10006dbc <___vfprintf_internal_r+0x1ff4>
10006648:	9480004c 	andi	r18,r18,1
1000664c:	90022b1e 	bne	r18,zero,10006efc <___vfprintf_internal_r+0x2134>
10006650:	1805883a 	mov	r2,r3
10006654:	18028316 	blt	r3,zero,10007064 <___vfprintf_internal_r+0x229c>
10006658:	d8c03217 	ldw	r3,200(sp)
1000665c:	044019c4 	movi	r17,103
10006660:	d8c02b15 	stw	r3,172(sp)
10006664:	df002907 	ldb	fp,164(sp)
10006668:	e001531e 	bne	fp,zero,10006bb8 <___vfprintf_internal_r+0x1df0>
1000666c:	df002783 	ldbu	fp,158(sp)
10006670:	d8802915 	stw	r2,164(sp)
10006674:	dc802c17 	ldw	r18,176(sp)
10006678:	d8002a15 	stw	zero,168(sp)
1000667c:	003baf06 	br	1000553c <__alt_data_end+0xf800553c>
10006680:	d8c02e17 	ldw	r3,184(sp)
10006684:	d9002e17 	ldw	r4,184(sp)
10006688:	d9402e17 	ldw	r5,184(sp)
1000668c:	18c00017 	ldw	r3,0(r3)
10006690:	21000117 	ldw	r4,4(r4)
10006694:	29400204 	addi	r5,r5,8
10006698:	d8c03615 	stw	r3,216(sp)
1000669c:	d9003815 	stw	r4,224(sp)
100066a0:	d9402e15 	stw	r5,184(sp)
100066a4:	003b5006 	br	100053e8 <__alt_data_end+0xf80053e8>
100066a8:	ac400007 	ldb	r17,0(r21)
100066ac:	003a2806 	br	10004f50 <__alt_data_end+0xf8004f50>
100066b0:	9080100c 	andi	r2,r18,64
100066b4:	1000a826 	beq	r2,zero,10006958 <___vfprintf_internal_r+0x1b90>
100066b8:	d8c02e17 	ldw	r3,184(sp)
100066bc:	002d883a 	mov	r22,zero
100066c0:	1cc0000b 	ldhu	r19,0(r3)
100066c4:	18c00104 	addi	r3,r3,4
100066c8:	d8c02e15 	stw	r3,184(sp)
100066cc:	003caf06 	br	1000598c <__alt_data_end+0xf800598c>
100066d0:	d9002e17 	ldw	r4,184(sp)
100066d4:	d9402a17 	ldw	r5,168(sp)
100066d8:	002d883a 	mov	r22,zero
100066dc:	20800104 	addi	r2,r4,4
100066e0:	24c00017 	ldw	r19,0(r4)
100066e4:	283ebb0e 	bge	r5,zero,100061d4 <__alt_data_end+0xf80061d4>
100066e8:	003ef106 	br	100062b0 <__alt_data_end+0xf80062b0>
100066ec:	9080040c 	andi	r2,r18,16
100066f0:	1000921e 	bne	r2,zero,1000693c <___vfprintf_internal_r+0x1b74>
100066f4:	9480100c 	andi	r18,r18,64
100066f8:	90013926 	beq	r18,zero,10006be0 <___vfprintf_internal_r+0x1e18>
100066fc:	d9402e17 	ldw	r5,184(sp)
10006700:	d8c02f17 	ldw	r3,188(sp)
10006704:	28800017 	ldw	r2,0(r5)
10006708:	29400104 	addi	r5,r5,4
1000670c:	d9402e15 	stw	r5,184(sp)
10006710:	10c0000d 	sth	r3,0(r2)
10006714:	0039e406 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10006718:	9080100c 	andi	r2,r18,64
1000671c:	10008026 	beq	r2,zero,10006920 <___vfprintf_internal_r+0x1b58>
10006720:	d8802e17 	ldw	r2,184(sp)
10006724:	14c0000f 	ldh	r19,0(r2)
10006728:	10800104 	addi	r2,r2,4
1000672c:	d8802e15 	stw	r2,184(sp)
10006730:	982dd7fa 	srai	r22,r19,31
10006734:	b005883a 	mov	r2,r22
10006738:	003af706 	br	10005318 <__alt_data_end+0xf8005318>
1000673c:	9080100c 	andi	r2,r18,64
10006740:	d8002785 	stb	zero,158(sp)
10006744:	10008a1e 	bne	r2,zero,10006970 <___vfprintf_internal_r+0x1ba8>
10006748:	d9002e17 	ldw	r4,184(sp)
1000674c:	d9402a17 	ldw	r5,168(sp)
10006750:	002d883a 	mov	r22,zero
10006754:	20800104 	addi	r2,r4,4
10006758:	24c00017 	ldw	r19,0(r4)
1000675c:	283e4b0e 	bge	r5,zero,1000608c <__alt_data_end+0xf800608c>
10006760:	9d86b03a 	or	r3,r19,r22
10006764:	d8802e15 	stw	r2,184(sp)
10006768:	183e4c1e 	bne	r3,zero,1000609c <__alt_data_end+0xf800609c>
1000676c:	0039883a 	mov	fp,zero
10006770:	0005883a 	mov	r2,zero
10006774:	003d4006 	br	10005c78 <__alt_data_end+0xf8005c78>
10006778:	01440074 	movhi	r5,4097
1000677c:	29533484 	addi	r5,r5,19666
10006780:	d9402c15 	stw	r5,176(sp)
10006784:	d9402c17 	ldw	r5,176(sp)
10006788:	1c47883a 	add	r3,r3,r17
1000678c:	10800044 	addi	r2,r2,1
10006790:	41400015 	stw	r5,0(r8)
10006794:	44400115 	stw	r17,4(r8)
10006798:	d8c02015 	stw	r3,128(sp)
1000679c:	d8801f15 	stw	r2,124(sp)
100067a0:	010001c4 	movi	r4,7
100067a4:	20bec816 	blt	r4,r2,100062c8 <__alt_data_end+0xf80062c8>
100067a8:	42000204 	addi	r8,r8,8
100067ac:	003ecd06 	br	100062e4 <__alt_data_end+0xf80062e4>
100067b0:	d9002a17 	ldw	r4,168(sp)
100067b4:	d8002785 	stb	zero,158(sp)
100067b8:	203d2d16 	blt	r4,zero,10005c70 <__alt_data_end+0xf8005c70>
100067bc:	00bfdfc4 	movi	r2,-129
100067c0:	90a4703a 	and	r18,r18,r2
100067c4:	003a6106 	br	1000514c <__alt_data_end+0xf800514c>
100067c8:	01040074 	movhi	r4,4097
100067cc:	21133484 	addi	r4,r4,19666
100067d0:	d9002c15 	stw	r4,176(sp)
100067d4:	003bea06 	br	10005780 <__alt_data_end+0xf8005780>
100067d8:	d9002d17 	ldw	r4,180(sp)
100067dc:	d9801e04 	addi	r6,sp,120
100067e0:	b80b883a 	mov	r5,r23
100067e4:	000c5a80 	call	1000c5a8 <__sprint_r>
100067e8:	103a7b1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100067ec:	d8c02017 	ldw	r3,128(sp)
100067f0:	da000404 	addi	r8,sp,16
100067f4:	003d4106 	br	10005cfc <__alt_data_end+0xf8005cfc>
100067f8:	d8801f17 	ldw	r2,124(sp)
100067fc:	01440074 	movhi	r5,4097
10006800:	01000044 	movi	r4,1
10006804:	18c00044 	addi	r3,r3,1
10006808:	10800044 	addi	r2,r2,1
1000680c:	29533404 	addi	r5,r5,19664
10006810:	41000115 	stw	r4,4(r8)
10006814:	41400015 	stw	r5,0(r8)
10006818:	d8c02015 	stw	r3,128(sp)
1000681c:	d8801f15 	stw	r2,124(sp)
10006820:	010001c4 	movi	r4,7
10006824:	20805c16 	blt	r4,r2,10006998 <___vfprintf_internal_r+0x1bd0>
10006828:	42000204 	addi	r8,r8,8
1000682c:	8800041e 	bne	r17,zero,10006840 <___vfprintf_internal_r+0x1a78>
10006830:	d8803317 	ldw	r2,204(sp)
10006834:	1000021e 	bne	r2,zero,10006840 <___vfprintf_internal_r+0x1a78>
10006838:	9080004c 	andi	r2,r18,1
1000683c:	103be726 	beq	r2,zero,100057dc <__alt_data_end+0xf80057dc>
10006840:	d9003717 	ldw	r4,220(sp)
10006844:	d8801f17 	ldw	r2,124(sp)
10006848:	d9403417 	ldw	r5,208(sp)
1000684c:	20c7883a 	add	r3,r4,r3
10006850:	10800044 	addi	r2,r2,1
10006854:	41000115 	stw	r4,4(r8)
10006858:	41400015 	stw	r5,0(r8)
1000685c:	d8c02015 	stw	r3,128(sp)
10006860:	d8801f15 	stw	r2,124(sp)
10006864:	010001c4 	movi	r4,7
10006868:	20812116 	blt	r4,r2,10006cf0 <___vfprintf_internal_r+0x1f28>
1000686c:	42000204 	addi	r8,r8,8
10006870:	0463c83a 	sub	r17,zero,r17
10006874:	0440730e 	bge	zero,r17,10006a44 <___vfprintf_internal_r+0x1c7c>
10006878:	05800404 	movi	r22,16
1000687c:	b440860e 	bge	r22,r17,10006a98 <___vfprintf_internal_r+0x1cd0>
10006880:	01440074 	movhi	r5,4097
10006884:	29533484 	addi	r5,r5,19666
10006888:	d9402c15 	stw	r5,176(sp)
1000688c:	070001c4 	movi	fp,7
10006890:	dcc02d17 	ldw	r19,180(sp)
10006894:	00000306 	br	100068a4 <___vfprintf_internal_r+0x1adc>
10006898:	42000204 	addi	r8,r8,8
1000689c:	8c7ffc04 	addi	r17,r17,-16
100068a0:	b440800e 	bge	r22,r17,10006aa4 <___vfprintf_internal_r+0x1cdc>
100068a4:	18c00404 	addi	r3,r3,16
100068a8:	10800044 	addi	r2,r2,1
100068ac:	45000015 	stw	r20,0(r8)
100068b0:	45800115 	stw	r22,4(r8)
100068b4:	d8c02015 	stw	r3,128(sp)
100068b8:	d8801f15 	stw	r2,124(sp)
100068bc:	e0bff60e 	bge	fp,r2,10006898 <__alt_data_end+0xf8006898>
100068c0:	d9801e04 	addi	r6,sp,120
100068c4:	b80b883a 	mov	r5,r23
100068c8:	9809883a 	mov	r4,r19
100068cc:	000c5a80 	call	1000c5a8 <__sprint_r>
100068d0:	103a411e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100068d4:	d8c02017 	ldw	r3,128(sp)
100068d8:	d8801f17 	ldw	r2,124(sp)
100068dc:	da000404 	addi	r8,sp,16
100068e0:	003fee06 	br	1000689c <__alt_data_end+0xf800689c>
100068e4:	00bfffc4 	movi	r2,-1
100068e8:	003a3f06 	br	100051e8 <__alt_data_end+0xf80051e8>
100068ec:	008011c4 	movi	r2,71
100068f0:	1440b816 	blt	r2,r17,10006bd4 <___vfprintf_internal_r+0x1e0c>
100068f4:	04040074 	movhi	r16,4097
100068f8:	84132604 	addi	r16,r16,19608
100068fc:	00c000c4 	movi	r3,3
10006900:	00bfdfc4 	movi	r2,-129
10006904:	d8c02915 	stw	r3,164(sp)
10006908:	90a4703a 	and	r18,r18,r2
1000690c:	df002783 	ldbu	fp,158(sp)
10006910:	d8c02b15 	stw	r3,172(sp)
10006914:	d8002a15 	stw	zero,168(sp)
10006918:	d8003215 	stw	zero,200(sp)
1000691c:	003b0706 	br	1000553c <__alt_data_end+0xf800553c>
10006920:	d8c02e17 	ldw	r3,184(sp)
10006924:	1cc00017 	ldw	r19,0(r3)
10006928:	18c00104 	addi	r3,r3,4
1000692c:	d8c02e15 	stw	r3,184(sp)
10006930:	982dd7fa 	srai	r22,r19,31
10006934:	b005883a 	mov	r2,r22
10006938:	003a7706 	br	10005318 <__alt_data_end+0xf8005318>
1000693c:	d8c02e17 	ldw	r3,184(sp)
10006940:	d9002f17 	ldw	r4,188(sp)
10006944:	18800017 	ldw	r2,0(r3)
10006948:	18c00104 	addi	r3,r3,4
1000694c:	d8c02e15 	stw	r3,184(sp)
10006950:	11000015 	stw	r4,0(r2)
10006954:	00395406 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10006958:	d9002e17 	ldw	r4,184(sp)
1000695c:	002d883a 	mov	r22,zero
10006960:	24c00017 	ldw	r19,0(r4)
10006964:	21000104 	addi	r4,r4,4
10006968:	d9002e15 	stw	r4,184(sp)
1000696c:	003c0706 	br	1000598c <__alt_data_end+0xf800598c>
10006970:	d9402e17 	ldw	r5,184(sp)
10006974:	d8c02a17 	ldw	r3,168(sp)
10006978:	002d883a 	mov	r22,zero
1000697c:	28800104 	addi	r2,r5,4
10006980:	2cc0000b 	ldhu	r19,0(r5)
10006984:	183dc10e 	bge	r3,zero,1000608c <__alt_data_end+0xf800608c>
10006988:	003f7506 	br	10006760 <__alt_data_end+0xf8006760>
1000698c:	04040074 	movhi	r16,4097
10006990:	84132404 	addi	r16,r16,19600
10006994:	003aa706 	br	10005434 <__alt_data_end+0xf8005434>
10006998:	d9002d17 	ldw	r4,180(sp)
1000699c:	d9801e04 	addi	r6,sp,120
100069a0:	b80b883a 	mov	r5,r23
100069a4:	000c5a80 	call	1000c5a8 <__sprint_r>
100069a8:	103a0b1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100069ac:	dc402617 	ldw	r17,152(sp)
100069b0:	d8c02017 	ldw	r3,128(sp)
100069b4:	da000404 	addi	r8,sp,16
100069b8:	003f9c06 	br	1000682c <__alt_data_end+0xf800682c>
100069bc:	ac400043 	ldbu	r17,1(r21)
100069c0:	84000814 	ori	r16,r16,32
100069c4:	ad400044 	addi	r21,r21,1
100069c8:	8c403fcc 	andi	r17,r17,255
100069cc:	8c40201c 	xori	r17,r17,128
100069d0:	8c7fe004 	addi	r17,r17,-128
100069d4:	00395e06 	br	10004f50 <__alt_data_end+0xf8004f50>
100069d8:	d8c02e15 	stw	r3,184(sp)
100069dc:	0039883a 	mov	fp,zero
100069e0:	003e3506 	br	100062b8 <__alt_data_end+0xf80062b8>
100069e4:	d9002d17 	ldw	r4,180(sp)
100069e8:	d9801e04 	addi	r6,sp,120
100069ec:	b80b883a 	mov	r5,r23
100069f0:	000c5a80 	call	1000c5a8 <__sprint_r>
100069f4:	1039f81e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
100069f8:	d8c02017 	ldw	r3,128(sp)
100069fc:	da000404 	addi	r8,sp,16
10006a00:	003cd006 	br	10005d44 <__alt_data_end+0xf8005d44>
10006a04:	8009883a 	mov	r4,r16
10006a08:	df003d15 	stw	fp,244(sp)
10006a0c:	0004d300 	call	10004d30 <strlen>
10006a10:	d8802b15 	stw	r2,172(sp)
10006a14:	da003d17 	ldw	r8,244(sp)
10006a18:	103c200e 	bge	r2,zero,10005a9c <__alt_data_end+0xf8005a9c>
10006a1c:	0005883a 	mov	r2,zero
10006a20:	003c1e06 	br	10005a9c <__alt_data_end+0xf8005a9c>
10006a24:	d9002d17 	ldw	r4,180(sp)
10006a28:	d9801e04 	addi	r6,sp,120
10006a2c:	b80b883a 	mov	r5,r23
10006a30:	000c5a80 	call	1000c5a8 <__sprint_r>
10006a34:	1039e81e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006a38:	d8c02017 	ldw	r3,128(sp)
10006a3c:	d8801f17 	ldw	r2,124(sp)
10006a40:	da000404 	addi	r8,sp,16
10006a44:	d9403317 	ldw	r5,204(sp)
10006a48:	10800044 	addi	r2,r2,1
10006a4c:	44000015 	stw	r16,0(r8)
10006a50:	28c7883a 	add	r3,r5,r3
10006a54:	003b5b06 	br	100057c4 <__alt_data_end+0xf80057c4>
10006a58:	01040074 	movhi	r4,4097
10006a5c:	21133884 	addi	r4,r4,19682
10006a60:	d9003515 	stw	r4,212(sp)
10006a64:	003af206 	br	10005630 <__alt_data_end+0xf8005630>
10006a68:	013fffc4 	movi	r4,-1
10006a6c:	003a0806 	br	10005290 <__alt_data_end+0xf8005290>
10006a70:	0023883a 	mov	r17,zero
10006a74:	003d9d06 	br	100060ec <__alt_data_end+0xf80060ec>
10006a78:	d9002d17 	ldw	r4,180(sp)
10006a7c:	d9801e04 	addi	r6,sp,120
10006a80:	b80b883a 	mov	r5,r23
10006a84:	000c5a80 	call	1000c5a8 <__sprint_r>
10006a88:	1039d31e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006a8c:	d8c02017 	ldw	r3,128(sp)
10006a90:	da000404 	addi	r8,sp,16
10006a94:	003d9406 	br	100060e8 <__alt_data_end+0xf80060e8>
10006a98:	01040074 	movhi	r4,4097
10006a9c:	21133484 	addi	r4,r4,19666
10006aa0:	d9002c15 	stw	r4,176(sp)
10006aa4:	d9002c17 	ldw	r4,176(sp)
10006aa8:	1c47883a 	add	r3,r3,r17
10006aac:	10800044 	addi	r2,r2,1
10006ab0:	41000015 	stw	r4,0(r8)
10006ab4:	44400115 	stw	r17,4(r8)
10006ab8:	d8c02015 	stw	r3,128(sp)
10006abc:	d8801f15 	stw	r2,124(sp)
10006ac0:	010001c4 	movi	r4,7
10006ac4:	20bfd716 	blt	r4,r2,10006a24 <__alt_data_end+0xf8006a24>
10006ac8:	42000204 	addi	r8,r8,8
10006acc:	003fdd06 	br	10006a44 <__alt_data_end+0xf8006a44>
10006ad0:	d9002d17 	ldw	r4,180(sp)
10006ad4:	d9801e04 	addi	r6,sp,120
10006ad8:	b80b883a 	mov	r5,r23
10006adc:	000c5a80 	call	1000c5a8 <__sprint_r>
10006ae0:	1039bd1e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006ae4:	d8802617 	ldw	r2,152(sp)
10006ae8:	d8c02017 	ldw	r3,128(sp)
10006aec:	da000404 	addi	r8,sp,16
10006af0:	003e1006 	br	10006334 <__alt_data_end+0xf8006334>
10006af4:	00800044 	movi	r2,1
10006af8:	10803fcc 	andi	r2,r2,255
10006afc:	00c00044 	movi	r3,1
10006b00:	10fa0d26 	beq	r2,r3,10005338 <__alt_data_end+0xf8005338>
10006b04:	00c00084 	movi	r3,2
10006b08:	10fbaf26 	beq	r2,r3,100059c8 <__alt_data_end+0xf80059c8>
10006b0c:	003a6d06 	br	100054c4 <__alt_data_end+0xf80054c4>
10006b10:	01040074 	movhi	r4,4097
10006b14:	21133884 	addi	r4,r4,19682
10006b18:	d9003515 	stw	r4,212(sp)
10006b1c:	003b5406 	br	10005870 <__alt_data_end+0xf8005870>
10006b20:	d8802a17 	ldw	r2,168(sp)
10006b24:	00c00184 	movi	r3,6
10006b28:	1880012e 	bgeu	r3,r2,10006b30 <___vfprintf_internal_r+0x1d68>
10006b2c:	1805883a 	mov	r2,r3
10006b30:	d8802b15 	stw	r2,172(sp)
10006b34:	1000ef16 	blt	r2,zero,10006ef4 <___vfprintf_internal_r+0x212c>
10006b38:	04040074 	movhi	r16,4097
10006b3c:	d8802915 	stw	r2,164(sp)
10006b40:	dcc02e15 	stw	r19,184(sp)
10006b44:	d8002a15 	stw	zero,168(sp)
10006b48:	d8003215 	stw	zero,200(sp)
10006b4c:	84133204 	addi	r16,r16,19656
10006b50:	0039883a 	mov	fp,zero
10006b54:	003a8006 	br	10005558 <__alt_data_end+0xf8005558>
10006b58:	0021883a 	mov	r16,zero
10006b5c:	003e0706 	br	1000637c <__alt_data_end+0xf800637c>
10006b60:	d9002d17 	ldw	r4,180(sp)
10006b64:	d9801e04 	addi	r6,sp,120
10006b68:	b80b883a 	mov	r5,r23
10006b6c:	000c5a80 	call	1000c5a8 <__sprint_r>
10006b70:	1039991e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006b74:	d8802617 	ldw	r2,152(sp)
10006b78:	d9403317 	ldw	r5,204(sp)
10006b7c:	d8c02017 	ldw	r3,128(sp)
10006b80:	da000404 	addi	r8,sp,16
10006b84:	2885c83a 	sub	r2,r5,r2
10006b88:	003dfb06 	br	10006378 <__alt_data_end+0xf8006378>
10006b8c:	9080004c 	andi	r2,r18,1
10006b90:	103e8f1e 	bne	r2,zero,100065d0 <__alt_data_end+0xf80065d0>
10006b94:	d8802117 	ldw	r2,132(sp)
10006b98:	003e9e06 	br	10006614 <__alt_data_end+0xf8006614>
10006b9c:	1025883a 	mov	r18,r2
10006ba0:	0039883a 	mov	fp,zero
10006ba4:	00800084 	movi	r2,2
10006ba8:	003fd306 	br	10006af8 <__alt_data_end+0xf8006af8>
10006bac:	07000b44 	movi	fp,45
10006bb0:	df002785 	stb	fp,158(sp)
10006bb4:	003a1b06 	br	10005424 <__alt_data_end+0xf8005424>
10006bb8:	00c00b44 	movi	r3,45
10006bbc:	d8c02785 	stb	r3,158(sp)
10006bc0:	d8802915 	stw	r2,164(sp)
10006bc4:	dc802c17 	ldw	r18,176(sp)
10006bc8:	d8002a15 	stw	zero,168(sp)
10006bcc:	07000b44 	movi	fp,45
10006bd0:	003a5e06 	br	1000554c <__alt_data_end+0xf800554c>
10006bd4:	04040074 	movhi	r16,4097
10006bd8:	84132704 	addi	r16,r16,19612
10006bdc:	003f4706 	br	100068fc <__alt_data_end+0xf80068fc>
10006be0:	d9002e17 	ldw	r4,184(sp)
10006be4:	d9402f17 	ldw	r5,188(sp)
10006be8:	20800017 	ldw	r2,0(r4)
10006bec:	21000104 	addi	r4,r4,4
10006bf0:	d9002e15 	stw	r4,184(sp)
10006bf4:	11400015 	stw	r5,0(r2)
10006bf8:	0038ab06 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10006bfc:	dd802617 	ldw	r22,152(sp)
10006c00:	00bfff44 	movi	r2,-3
10006c04:	b0801c16 	blt	r22,r2,10006c78 <___vfprintf_internal_r+0x1eb0>
10006c08:	d9402a17 	ldw	r5,168(sp)
10006c0c:	2d801a16 	blt	r5,r22,10006c78 <___vfprintf_internal_r+0x1eb0>
10006c10:	dd803215 	stw	r22,200(sp)
10006c14:	003e8906 	br	1000663c <__alt_data_end+0xf800663c>
10006c18:	01040074 	movhi	r4,4097
10006c1c:	21133484 	addi	r4,r4,19666
10006c20:	d9002c15 	stw	r4,176(sp)
10006c24:	003c9106 	br	10005e6c <__alt_data_end+0xf8005e6c>
10006c28:	e005883a 	mov	r2,fp
10006c2c:	003e7906 	br	10006614 <__alt_data_end+0xf8006614>
10006c30:	d9002a17 	ldw	r4,168(sp)
10006c34:	df002783 	ldbu	fp,158(sp)
10006c38:	dcc02e15 	stw	r19,184(sp)
10006c3c:	d9002915 	stw	r4,164(sp)
10006c40:	d9002b15 	stw	r4,172(sp)
10006c44:	d8002a15 	stw	zero,168(sp)
10006c48:	d8003215 	stw	zero,200(sp)
10006c4c:	003a3b06 	br	1000553c <__alt_data_end+0xf800553c>
10006c50:	9080004c 	andi	r2,r18,1
10006c54:	0039883a 	mov	fp,zero
10006c58:	10000426 	beq	r2,zero,10006c6c <___vfprintf_internal_r+0x1ea4>
10006c5c:	00800c04 	movi	r2,48
10006c60:	dc001dc4 	addi	r16,sp,119
10006c64:	d8801dc5 	stb	r2,119(sp)
10006c68:	003b6406 	br	100059fc <__alt_data_end+0xf80059fc>
10006c6c:	d8002b15 	stw	zero,172(sp)
10006c70:	dc001e04 	addi	r16,sp,120
10006c74:	003a2b06 	br	10005524 <__alt_data_end+0xf8005524>
10006c78:	8c7fff84 	addi	r17,r17,-2
10006c7c:	b5bfffc4 	addi	r22,r22,-1
10006c80:	dd802615 	stw	r22,152(sp)
10006c84:	dc4022c5 	stb	r17,139(sp)
10006c88:	b000bf16 	blt	r22,zero,10006f88 <___vfprintf_internal_r+0x21c0>
10006c8c:	00800ac4 	movi	r2,43
10006c90:	d8802305 	stb	r2,140(sp)
10006c94:	00800244 	movi	r2,9
10006c98:	15807016 	blt	r2,r22,10006e5c <___vfprintf_internal_r+0x2094>
10006c9c:	00800c04 	movi	r2,48
10006ca0:	b5800c04 	addi	r22,r22,48
10006ca4:	d8802345 	stb	r2,141(sp)
10006ca8:	dd802385 	stb	r22,142(sp)
10006cac:	d88023c4 	addi	r2,sp,143
10006cb0:	df0022c4 	addi	fp,sp,139
10006cb4:	d8c03317 	ldw	r3,204(sp)
10006cb8:	1739c83a 	sub	fp,r2,fp
10006cbc:	d9003317 	ldw	r4,204(sp)
10006cc0:	e0c7883a 	add	r3,fp,r3
10006cc4:	df003a15 	stw	fp,232(sp)
10006cc8:	d8c02b15 	stw	r3,172(sp)
10006ccc:	00800044 	movi	r2,1
10006cd0:	1100b30e 	bge	r2,r4,10006fa0 <___vfprintf_internal_r+0x21d8>
10006cd4:	d8c02b17 	ldw	r3,172(sp)
10006cd8:	18c00044 	addi	r3,r3,1
10006cdc:	d8c02b15 	stw	r3,172(sp)
10006ce0:	1805883a 	mov	r2,r3
10006ce4:	1800ac16 	blt	r3,zero,10006f98 <___vfprintf_internal_r+0x21d0>
10006ce8:	d8003215 	stw	zero,200(sp)
10006cec:	003e5d06 	br	10006664 <__alt_data_end+0xf8006664>
10006cf0:	d9002d17 	ldw	r4,180(sp)
10006cf4:	d9801e04 	addi	r6,sp,120
10006cf8:	b80b883a 	mov	r5,r23
10006cfc:	000c5a80 	call	1000c5a8 <__sprint_r>
10006d00:	1039351e 	bne	r2,zero,100051d8 <__alt_data_end+0xf80051d8>
10006d04:	dc402617 	ldw	r17,152(sp)
10006d08:	d8c02017 	ldw	r3,128(sp)
10006d0c:	d8801f17 	ldw	r2,124(sp)
10006d10:	da000404 	addi	r8,sp,16
10006d14:	003ed606 	br	10006870 <__alt_data_end+0xf8006870>
10006d18:	182b883a 	mov	r21,r3
10006d1c:	d8002a15 	stw	zero,168(sp)
10006d20:	00388c06 	br	10004f54 <__alt_data_end+0xf8004f54>
10006d24:	d8802a17 	ldw	r2,168(sp)
10006d28:	103e071e 	bne	r2,zero,10006548 <__alt_data_end+0xf8006548>
10006d2c:	dc002a15 	stw	r16,168(sp)
10006d30:	003e0506 	br	10006548 <__alt_data_end+0xf8006548>
10006d34:	d9002a17 	ldw	r4,168(sp)
10006d38:	20c00044 	addi	r3,r4,1
10006d3c:	003e0f06 	br	1000657c <__alt_data_end+0xf800657c>
10006d40:	01400184 	movi	r5,6
10006d44:	d9402a15 	stw	r5,168(sp)
10006d48:	003dff06 	br	10006548 <__alt_data_end+0xf8006548>
10006d4c:	d8802104 	addi	r2,sp,132
10006d50:	d8800315 	stw	r2,12(sp)
10006d54:	d8802504 	addi	r2,sp,148
10006d58:	d8800215 	stw	r2,8(sp)
10006d5c:	d8802604 	addi	r2,sp,152
10006d60:	d8800115 	stw	r2,4(sp)
10006d64:	d8802a17 	ldw	r2,168(sp)
10006d68:	d9403617 	ldw	r5,216(sp)
10006d6c:	d9002d17 	ldw	r4,180(sp)
10006d70:	d8800015 	stw	r2,0(sp)
10006d74:	01c000c4 	movi	r7,3
10006d78:	980d883a 	mov	r6,r19
10006d7c:	da003d15 	stw	r8,244(sp)
10006d80:	00074f80 	call	100074f8 <_dtoa_r>
10006d84:	d8c02a17 	ldw	r3,168(sp)
10006d88:	da003d17 	ldw	r8,244(sp)
10006d8c:	1021883a 	mov	r16,r2
10006d90:	10f9883a 	add	fp,r2,r3
10006d94:	81000007 	ldb	r4,0(r16)
10006d98:	00800c04 	movi	r2,48
10006d9c:	20805e26 	beq	r4,r2,10006f18 <___vfprintf_internal_r+0x2150>
10006da0:	d8c02617 	ldw	r3,152(sp)
10006da4:	e0f9883a 	add	fp,fp,r3
10006da8:	003e0a06 	br	100065d4 <__alt_data_end+0xf80065d4>
10006dac:	00c00b44 	movi	r3,45
10006db0:	24e0003c 	xorhi	r19,r4,32768
10006db4:	d8c02905 	stb	r3,164(sp)
10006db8:	003de906 	br	10006560 <__alt_data_end+0xf8006560>
10006dbc:	d8c03217 	ldw	r3,200(sp)
10006dc0:	00c07a0e 	bge	zero,r3,10006fac <___vfprintf_internal_r+0x21e4>
10006dc4:	00800044 	movi	r2,1
10006dc8:	d9003317 	ldw	r4,204(sp)
10006dcc:	1105883a 	add	r2,r2,r4
10006dd0:	d8802b15 	stw	r2,172(sp)
10006dd4:	10004e16 	blt	r2,zero,10006f10 <___vfprintf_internal_r+0x2148>
10006dd8:	044019c4 	movi	r17,103
10006ddc:	003e2106 	br	10006664 <__alt_data_end+0xf8006664>
10006de0:	d9002a17 	ldw	r4,168(sp)
10006de4:	d8802104 	addi	r2,sp,132
10006de8:	d8800315 	stw	r2,12(sp)
10006dec:	d9000015 	stw	r4,0(sp)
10006df0:	d8802504 	addi	r2,sp,148
10006df4:	d9403617 	ldw	r5,216(sp)
10006df8:	d9002d17 	ldw	r4,180(sp)
10006dfc:	d8800215 	stw	r2,8(sp)
10006e00:	d8802604 	addi	r2,sp,152
10006e04:	d8800115 	stw	r2,4(sp)
10006e08:	01c000c4 	movi	r7,3
10006e0c:	980d883a 	mov	r6,r19
10006e10:	da003d15 	stw	r8,244(sp)
10006e14:	00074f80 	call	100074f8 <_dtoa_r>
10006e18:	d8c02a17 	ldw	r3,168(sp)
10006e1c:	da003d17 	ldw	r8,244(sp)
10006e20:	1021883a 	mov	r16,r2
10006e24:	00801184 	movi	r2,70
10006e28:	80f9883a 	add	fp,r16,r3
10006e2c:	88bfd926 	beq	r17,r2,10006d94 <__alt_data_end+0xf8006d94>
10006e30:	003de806 	br	100065d4 <__alt_data_end+0xf80065d4>
10006e34:	d9002a17 	ldw	r4,168(sp)
10006e38:	00c04d0e 	bge	zero,r3,10006f70 <___vfprintf_internal_r+0x21a8>
10006e3c:	2000441e 	bne	r4,zero,10006f50 <___vfprintf_internal_r+0x2188>
10006e40:	9480004c 	andi	r18,r18,1
10006e44:	9000421e 	bne	r18,zero,10006f50 <___vfprintf_internal_r+0x2188>
10006e48:	1805883a 	mov	r2,r3
10006e4c:	18006f16 	blt	r3,zero,1000700c <___vfprintf_internal_r+0x2244>
10006e50:	d8c03217 	ldw	r3,200(sp)
10006e54:	d8c02b15 	stw	r3,172(sp)
10006e58:	003e0206 	br	10006664 <__alt_data_end+0xf8006664>
10006e5c:	df0022c4 	addi	fp,sp,139
10006e60:	dc002a15 	stw	r16,168(sp)
10006e64:	4027883a 	mov	r19,r8
10006e68:	e021883a 	mov	r16,fp
10006e6c:	b009883a 	mov	r4,r22
10006e70:	01400284 	movi	r5,10
10006e74:	000f1340 	call	1000f134 <__modsi3>
10006e78:	10800c04 	addi	r2,r2,48
10006e7c:	843fffc4 	addi	r16,r16,-1
10006e80:	b009883a 	mov	r4,r22
10006e84:	01400284 	movi	r5,10
10006e88:	80800005 	stb	r2,0(r16)
10006e8c:	000f0b00 	call	1000f0b0 <__divsi3>
10006e90:	102d883a 	mov	r22,r2
10006e94:	00800244 	movi	r2,9
10006e98:	15bff416 	blt	r2,r22,10006e6c <__alt_data_end+0xf8006e6c>
10006e9c:	9811883a 	mov	r8,r19
10006ea0:	b0800c04 	addi	r2,r22,48
10006ea4:	8027883a 	mov	r19,r16
10006ea8:	997fffc4 	addi	r5,r19,-1
10006eac:	98bfffc5 	stb	r2,-1(r19)
10006eb0:	dc002a17 	ldw	r16,168(sp)
10006eb4:	2f006d2e 	bgeu	r5,fp,1000706c <___vfprintf_internal_r+0x22a4>
10006eb8:	d9c02384 	addi	r7,sp,142
10006ebc:	3ccfc83a 	sub	r7,r7,r19
10006ec0:	d9002344 	addi	r4,sp,141
10006ec4:	e1cf883a 	add	r7,fp,r7
10006ec8:	00000106 	br	10006ed0 <___vfprintf_internal_r+0x2108>
10006ecc:	28800003 	ldbu	r2,0(r5)
10006ed0:	20800005 	stb	r2,0(r4)
10006ed4:	21000044 	addi	r4,r4,1
10006ed8:	29400044 	addi	r5,r5,1
10006edc:	393ffb1e 	bne	r7,r4,10006ecc <__alt_data_end+0xf8006ecc>
10006ee0:	d8802304 	addi	r2,sp,140
10006ee4:	14c5c83a 	sub	r2,r2,r19
10006ee8:	d8c02344 	addi	r3,sp,141
10006eec:	1885883a 	add	r2,r3,r2
10006ef0:	003f7006 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10006ef4:	0005883a 	mov	r2,zero
10006ef8:	003f0f06 	br	10006b38 <__alt_data_end+0xf8006b38>
10006efc:	d8c03217 	ldw	r3,200(sp)
10006f00:	18c00044 	addi	r3,r3,1
10006f04:	d8c02b15 	stw	r3,172(sp)
10006f08:	1805883a 	mov	r2,r3
10006f0c:	183fb20e 	bge	r3,zero,10006dd8 <__alt_data_end+0xf8006dd8>
10006f10:	0005883a 	mov	r2,zero
10006f14:	003fb006 	br	10006dd8 <__alt_data_end+0xf8006dd8>
10006f18:	d9003617 	ldw	r4,216(sp)
10006f1c:	000d883a 	mov	r6,zero
10006f20:	000f883a 	mov	r7,zero
10006f24:	980b883a 	mov	r5,r19
10006f28:	d8c03c15 	stw	r3,240(sp)
10006f2c:	da003d15 	stw	r8,244(sp)
10006f30:	00104e00 	call	100104e0 <__eqdf2>
10006f34:	d8c03c17 	ldw	r3,240(sp)
10006f38:	da003d17 	ldw	r8,244(sp)
10006f3c:	103f9826 	beq	r2,zero,10006da0 <__alt_data_end+0xf8006da0>
10006f40:	00800044 	movi	r2,1
10006f44:	10c7c83a 	sub	r3,r2,r3
10006f48:	d8c02615 	stw	r3,152(sp)
10006f4c:	003f9506 	br	10006da4 <__alt_data_end+0xf8006da4>
10006f50:	d9002a17 	ldw	r4,168(sp)
10006f54:	d8c03217 	ldw	r3,200(sp)
10006f58:	20800044 	addi	r2,r4,1
10006f5c:	1885883a 	add	r2,r3,r2
10006f60:	d8802b15 	stw	r2,172(sp)
10006f64:	103dbf0e 	bge	r2,zero,10006664 <__alt_data_end+0xf8006664>
10006f68:	0005883a 	mov	r2,zero
10006f6c:	003dbd06 	br	10006664 <__alt_data_end+0xf8006664>
10006f70:	2000201e 	bne	r4,zero,10006ff4 <___vfprintf_internal_r+0x222c>
10006f74:	9480004c 	andi	r18,r18,1
10006f78:	90001e1e 	bne	r18,zero,10006ff4 <___vfprintf_internal_r+0x222c>
10006f7c:	00800044 	movi	r2,1
10006f80:	d8802b15 	stw	r2,172(sp)
10006f84:	003db706 	br	10006664 <__alt_data_end+0xf8006664>
10006f88:	00800b44 	movi	r2,45
10006f8c:	05adc83a 	sub	r22,zero,r22
10006f90:	d8802305 	stb	r2,140(sp)
10006f94:	003f3f06 	br	10006c94 <__alt_data_end+0xf8006c94>
10006f98:	0005883a 	mov	r2,zero
10006f9c:	003f5206 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10006fa0:	90a4703a 	and	r18,r18,r2
10006fa4:	903f4e26 	beq	r18,zero,10006ce0 <__alt_data_end+0xf8006ce0>
10006fa8:	003f4a06 	br	10006cd4 <__alt_data_end+0xf8006cd4>
10006fac:	00800084 	movi	r2,2
10006fb0:	10c5c83a 	sub	r2,r2,r3
10006fb4:	003f8406 	br	10006dc8 <__alt_data_end+0xf8006dc8>
10006fb8:	d9402e17 	ldw	r5,184(sp)
10006fbc:	d9002e17 	ldw	r4,184(sp)
10006fc0:	ac400043 	ldbu	r17,1(r21)
10006fc4:	29400017 	ldw	r5,0(r5)
10006fc8:	20800104 	addi	r2,r4,4
10006fcc:	d8802e15 	stw	r2,184(sp)
10006fd0:	d9402a15 	stw	r5,168(sp)
10006fd4:	182b883a 	mov	r21,r3
10006fd8:	283e7b0e 	bge	r5,zero,100069c8 <__alt_data_end+0xf80069c8>
10006fdc:	8c403fcc 	andi	r17,r17,255
10006fe0:	017fffc4 	movi	r5,-1
10006fe4:	8c40201c 	xori	r17,r17,128
10006fe8:	d9402a15 	stw	r5,168(sp)
10006fec:	8c7fe004 	addi	r17,r17,-128
10006ff0:	0037d706 	br	10004f50 <__alt_data_end+0xf8004f50>
10006ff4:	d8c02a17 	ldw	r3,168(sp)
10006ff8:	18c00084 	addi	r3,r3,2
10006ffc:	d8c02b15 	stw	r3,172(sp)
10007000:	1805883a 	mov	r2,r3
10007004:	183d970e 	bge	r3,zero,10006664 <__alt_data_end+0xf8006664>
10007008:	003fd706 	br	10006f68 <__alt_data_end+0xf8006f68>
1000700c:	0005883a 	mov	r2,zero
10007010:	003f8f06 	br	10006e50 <__alt_data_end+0xf8006e50>
10007014:	9080004c 	andi	r2,r18,1
10007018:	103f821e 	bne	r2,zero,10006e24 <__alt_data_end+0xf8006e24>
1000701c:	d8802117 	ldw	r2,132(sp)
10007020:	1405c83a 	sub	r2,r2,r16
10007024:	d8803315 	stw	r2,204(sp)
10007028:	b47ef426 	beq	r22,r17,10006bfc <__alt_data_end+0xf8006bfc>
1000702c:	dd802617 	ldw	r22,152(sp)
10007030:	003f1206 	br	10006c7c <__alt_data_end+0xf8006c7c>
10007034:	d8c02b03 	ldbu	r3,172(sp)
10007038:	d8c02785 	stb	r3,158(sp)
1000703c:	0038df06 	br	100053bc <__alt_data_end+0xf80053bc>
10007040:	d8c02b03 	ldbu	r3,172(sp)
10007044:	d8c02785 	stb	r3,158(sp)
10007048:	0038aa06 	br	100052f4 <__alt_data_end+0xf80052f4>
1000704c:	d8c02b03 	ldbu	r3,172(sp)
10007050:	d8c02785 	stb	r3,158(sp)
10007054:	003a4306 	br	10005964 <__alt_data_end+0xf8005964>
10007058:	d8c02b03 	ldbu	r3,172(sp)
1000705c:	d8c02785 	stb	r3,158(sp)
10007060:	003af506 	br	10005c38 <__alt_data_end+0xf8005c38>
10007064:	0005883a 	mov	r2,zero
10007068:	003d7b06 	br	10006658 <__alt_data_end+0xf8006658>
1000706c:	d8802344 	addi	r2,sp,141
10007070:	003f1006 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10007074:	d8c02b03 	ldbu	r3,172(sp)
10007078:	d8c02785 	stb	r3,158(sp)
1000707c:	0038fd06 	br	10005474 <__alt_data_end+0xf8005474>
10007080:	d8c02b03 	ldbu	r3,172(sp)
10007084:	d8c02785 	stb	r3,158(sp)
10007088:	003a9706 	br	10005ae8 <__alt_data_end+0xf8005ae8>
1000708c:	d8c02b03 	ldbu	r3,172(sp)
10007090:	d8c02785 	stb	r3,158(sp)
10007094:	003a1806 	br	100058f8 <__alt_data_end+0xf80058f8>
10007098:	d8c02b03 	ldbu	r3,172(sp)
1000709c:	d8c02785 	stb	r3,158(sp)
100070a0:	003abe06 	br	10005b9c <__alt_data_end+0xf8005b9c>

100070a4 <__vfprintf_internal>:
100070a4:	00840074 	movhi	r2,4097
100070a8:	109e4204 	addi	r2,r2,30984
100070ac:	300f883a 	mov	r7,r6
100070b0:	280d883a 	mov	r6,r5
100070b4:	200b883a 	mov	r5,r4
100070b8:	11000017 	ldw	r4,0(r2)
100070bc:	0004dc81 	jmpi	10004dc8 <___vfprintf_internal_r>

100070c0 <__sbprintf>:
100070c0:	2880030b 	ldhu	r2,12(r5)
100070c4:	2ac01917 	ldw	r11,100(r5)
100070c8:	2a80038b 	ldhu	r10,14(r5)
100070cc:	2a400717 	ldw	r9,28(r5)
100070d0:	2a000917 	ldw	r8,36(r5)
100070d4:	defee204 	addi	sp,sp,-1144
100070d8:	00c10004 	movi	r3,1024
100070dc:	dc011a15 	stw	r16,1128(sp)
100070e0:	10bfff4c 	andi	r2,r2,65533
100070e4:	2821883a 	mov	r16,r5
100070e8:	d8cb883a 	add	r5,sp,r3
100070ec:	dc811c15 	stw	r18,1136(sp)
100070f0:	dc411b15 	stw	r17,1132(sp)
100070f4:	dfc11d15 	stw	ra,1140(sp)
100070f8:	2025883a 	mov	r18,r4
100070fc:	d881030d 	sth	r2,1036(sp)
10007100:	dac11915 	stw	r11,1124(sp)
10007104:	da81038d 	sth	r10,1038(sp)
10007108:	da410715 	stw	r9,1052(sp)
1000710c:	da010915 	stw	r8,1060(sp)
10007110:	dec10015 	stw	sp,1024(sp)
10007114:	dec10415 	stw	sp,1040(sp)
10007118:	d8c10215 	stw	r3,1032(sp)
1000711c:	d8c10515 	stw	r3,1044(sp)
10007120:	d8010615 	stw	zero,1048(sp)
10007124:	0004dc80 	call	10004dc8 <___vfprintf_internal_r>
10007128:	1023883a 	mov	r17,r2
1000712c:	10000416 	blt	r2,zero,10007140 <__sbprintf+0x80>
10007130:	d9410004 	addi	r5,sp,1024
10007134:	9009883a 	mov	r4,r18
10007138:	0008d9c0 	call	10008d9c <_fflush_r>
1000713c:	10000d1e 	bne	r2,zero,10007174 <__sbprintf+0xb4>
10007140:	d881030b 	ldhu	r2,1036(sp)
10007144:	1080100c 	andi	r2,r2,64
10007148:	10000326 	beq	r2,zero,10007158 <__sbprintf+0x98>
1000714c:	8080030b 	ldhu	r2,12(r16)
10007150:	10801014 	ori	r2,r2,64
10007154:	8080030d 	sth	r2,12(r16)
10007158:	8805883a 	mov	r2,r17
1000715c:	dfc11d17 	ldw	ra,1140(sp)
10007160:	dc811c17 	ldw	r18,1136(sp)
10007164:	dc411b17 	ldw	r17,1132(sp)
10007168:	dc011a17 	ldw	r16,1128(sp)
1000716c:	dec11e04 	addi	sp,sp,1144
10007170:	f800283a 	ret
10007174:	047fffc4 	movi	r17,-1
10007178:	003ff106 	br	10007140 <__alt_data_end+0xf8007140>

1000717c <__swsetup_r>:
1000717c:	00840074 	movhi	r2,4097
10007180:	defffd04 	addi	sp,sp,-12
10007184:	109e4204 	addi	r2,r2,30984
10007188:	dc400115 	stw	r17,4(sp)
1000718c:	2023883a 	mov	r17,r4
10007190:	11000017 	ldw	r4,0(r2)
10007194:	dc000015 	stw	r16,0(sp)
10007198:	dfc00215 	stw	ra,8(sp)
1000719c:	2821883a 	mov	r16,r5
100071a0:	20000226 	beq	r4,zero,100071ac <__swsetup_r+0x30>
100071a4:	20800e17 	ldw	r2,56(r4)
100071a8:	10003126 	beq	r2,zero,10007270 <__swsetup_r+0xf4>
100071ac:	8080030b 	ldhu	r2,12(r16)
100071b0:	10c0020c 	andi	r3,r2,8
100071b4:	1009883a 	mov	r4,r2
100071b8:	18000f26 	beq	r3,zero,100071f8 <__swsetup_r+0x7c>
100071bc:	80c00417 	ldw	r3,16(r16)
100071c0:	18001526 	beq	r3,zero,10007218 <__swsetup_r+0x9c>
100071c4:	1100004c 	andi	r4,r2,1
100071c8:	20001c1e 	bne	r4,zero,1000723c <__swsetup_r+0xc0>
100071cc:	1080008c 	andi	r2,r2,2
100071d0:	1000291e 	bne	r2,zero,10007278 <__swsetup_r+0xfc>
100071d4:	80800517 	ldw	r2,20(r16)
100071d8:	80800215 	stw	r2,8(r16)
100071dc:	18001c26 	beq	r3,zero,10007250 <__swsetup_r+0xd4>
100071e0:	0005883a 	mov	r2,zero
100071e4:	dfc00217 	ldw	ra,8(sp)
100071e8:	dc400117 	ldw	r17,4(sp)
100071ec:	dc000017 	ldw	r16,0(sp)
100071f0:	dec00304 	addi	sp,sp,12
100071f4:	f800283a 	ret
100071f8:	2080040c 	andi	r2,r4,16
100071fc:	10002e26 	beq	r2,zero,100072b8 <__swsetup_r+0x13c>
10007200:	2080010c 	andi	r2,r4,4
10007204:	10001e1e 	bne	r2,zero,10007280 <__swsetup_r+0x104>
10007208:	80c00417 	ldw	r3,16(r16)
1000720c:	20800214 	ori	r2,r4,8
10007210:	8080030d 	sth	r2,12(r16)
10007214:	183feb1e 	bne	r3,zero,100071c4 <__alt_data_end+0xf80071c4>
10007218:	1100a00c 	andi	r4,r2,640
1000721c:	01408004 	movi	r5,512
10007220:	217fe826 	beq	r4,r5,100071c4 <__alt_data_end+0xf80071c4>
10007224:	800b883a 	mov	r5,r16
10007228:	8809883a 	mov	r4,r17
1000722c:	0009d380 	call	10009d38 <__smakebuf_r>
10007230:	8080030b 	ldhu	r2,12(r16)
10007234:	80c00417 	ldw	r3,16(r16)
10007238:	003fe206 	br	100071c4 <__alt_data_end+0xf80071c4>
1000723c:	80800517 	ldw	r2,20(r16)
10007240:	80000215 	stw	zero,8(r16)
10007244:	0085c83a 	sub	r2,zero,r2
10007248:	80800615 	stw	r2,24(r16)
1000724c:	183fe41e 	bne	r3,zero,100071e0 <__alt_data_end+0xf80071e0>
10007250:	80c0030b 	ldhu	r3,12(r16)
10007254:	0005883a 	mov	r2,zero
10007258:	1900200c 	andi	r4,r3,128
1000725c:	203fe126 	beq	r4,zero,100071e4 <__alt_data_end+0xf80071e4>
10007260:	18c01014 	ori	r3,r3,64
10007264:	80c0030d 	sth	r3,12(r16)
10007268:	00bfffc4 	movi	r2,-1
1000726c:	003fdd06 	br	100071e4 <__alt_data_end+0xf80071e4>
10007270:	00091880 	call	10009188 <__sinit>
10007274:	003fcd06 	br	100071ac <__alt_data_end+0xf80071ac>
10007278:	0005883a 	mov	r2,zero
1000727c:	003fd606 	br	100071d8 <__alt_data_end+0xf80071d8>
10007280:	81400c17 	ldw	r5,48(r16)
10007284:	28000626 	beq	r5,zero,100072a0 <__swsetup_r+0x124>
10007288:	80801004 	addi	r2,r16,64
1000728c:	28800326 	beq	r5,r2,1000729c <__swsetup_r+0x120>
10007290:	8809883a 	mov	r4,r17
10007294:	00092fc0 	call	100092fc <_free_r>
10007298:	8100030b 	ldhu	r4,12(r16)
1000729c:	80000c15 	stw	zero,48(r16)
100072a0:	80c00417 	ldw	r3,16(r16)
100072a4:	00bff6c4 	movi	r2,-37
100072a8:	1108703a 	and	r4,r2,r4
100072ac:	80000115 	stw	zero,4(r16)
100072b0:	80c00015 	stw	r3,0(r16)
100072b4:	003fd506 	br	1000720c <__alt_data_end+0xf800720c>
100072b8:	00800244 	movi	r2,9
100072bc:	88800015 	stw	r2,0(r17)
100072c0:	20801014 	ori	r2,r4,64
100072c4:	8080030d 	sth	r2,12(r16)
100072c8:	00bfffc4 	movi	r2,-1
100072cc:	003fc506 	br	100071e4 <__alt_data_end+0xf80071e4>

100072d0 <quorem>:
100072d0:	defff204 	addi	sp,sp,-56
100072d4:	ddc00b15 	stw	r23,44(sp)
100072d8:	20800417 	ldw	r2,16(r4)
100072dc:	2dc00417 	ldw	r23,16(r5)
100072e0:	dfc00d15 	stw	ra,52(sp)
100072e4:	df000c15 	stw	fp,48(sp)
100072e8:	dd800a15 	stw	r22,40(sp)
100072ec:	dd400915 	stw	r21,36(sp)
100072f0:	dd000815 	stw	r20,32(sp)
100072f4:	dcc00715 	stw	r19,28(sp)
100072f8:	dc800615 	stw	r18,24(sp)
100072fc:	dc400515 	stw	r17,20(sp)
10007300:	dc000415 	stw	r16,16(sp)
10007304:	15c07a16 	blt	r2,r23,100074f0 <quorem+0x220>
10007308:	bdffffc4 	addi	r23,r23,-1
1000730c:	bde9883a 	add	r20,r23,r23
10007310:	28c00504 	addi	r3,r5,20
10007314:	a529883a 	add	r20,r20,r20
10007318:	1d39883a 	add	fp,r3,r20
1000731c:	24c00504 	addi	r19,r4,20
10007320:	d9400215 	stw	r5,8(sp)
10007324:	9d29883a 	add	r20,r19,r20
10007328:	e1400017 	ldw	r5,0(fp)
1000732c:	d9000015 	stw	r4,0(sp)
10007330:	a1000017 	ldw	r4,0(r20)
10007334:	29400044 	addi	r5,r5,1
10007338:	d8c00115 	stw	r3,4(sp)
1000733c:	dd000315 	stw	r20,12(sp)
10007340:	000f1a80 	call	1000f1a8 <__udivsi3>
10007344:	1025883a 	mov	r18,r2
10007348:	10003026 	beq	r2,zero,1000740c <quorem+0x13c>
1000734c:	dc400117 	ldw	r17,4(sp)
10007350:	9829883a 	mov	r20,r19
10007354:	002d883a 	mov	r22,zero
10007358:	0021883a 	mov	r16,zero
1000735c:	8d400017 	ldw	r21,0(r17)
10007360:	900b883a 	mov	r5,r18
10007364:	8c400104 	addi	r17,r17,4
10007368:	a93fffcc 	andi	r4,r21,65535
1000736c:	0004bc80 	call	10004bc8 <__mulsi3>
10007370:	a808d43a 	srli	r4,r21,16
10007374:	900b883a 	mov	r5,r18
10007378:	15ad883a 	add	r22,r2,r22
1000737c:	0004bc80 	call	10004bc8 <__mulsi3>
10007380:	a1000017 	ldw	r4,0(r20)
10007384:	b00cd43a 	srli	r6,r22,16
10007388:	b0ffffcc 	andi	r3,r22,65535
1000738c:	217fffcc 	andi	r5,r4,65535
10007390:	2c21883a 	add	r16,r5,r16
10007394:	80c7c83a 	sub	r3,r16,r3
10007398:	2008d43a 	srli	r4,r4,16
1000739c:	1185883a 	add	r2,r2,r6
100073a0:	1821d43a 	srai	r16,r3,16
100073a4:	117fffcc 	andi	r5,r2,65535
100073a8:	2149c83a 	sub	r4,r4,r5
100073ac:	2421883a 	add	r16,r4,r16
100073b0:	8008943a 	slli	r4,r16,16
100073b4:	18ffffcc 	andi	r3,r3,65535
100073b8:	102cd43a 	srli	r22,r2,16
100073bc:	20c8b03a 	or	r4,r4,r3
100073c0:	a1000015 	stw	r4,0(r20)
100073c4:	8021d43a 	srai	r16,r16,16
100073c8:	a5000104 	addi	r20,r20,4
100073cc:	e47fe32e 	bgeu	fp,r17,1000735c <__alt_data_end+0xf800735c>
100073d0:	d8c00317 	ldw	r3,12(sp)
100073d4:	18800017 	ldw	r2,0(r3)
100073d8:	10000c1e 	bne	r2,zero,1000740c <quorem+0x13c>
100073dc:	18bfff04 	addi	r2,r3,-4
100073e0:	9880082e 	bgeu	r19,r2,10007404 <quorem+0x134>
100073e4:	18ffff17 	ldw	r3,-4(r3)
100073e8:	18000326 	beq	r3,zero,100073f8 <quorem+0x128>
100073ec:	00000506 	br	10007404 <quorem+0x134>
100073f0:	10c00017 	ldw	r3,0(r2)
100073f4:	1800031e 	bne	r3,zero,10007404 <quorem+0x134>
100073f8:	10bfff04 	addi	r2,r2,-4
100073fc:	bdffffc4 	addi	r23,r23,-1
10007400:	98bffb36 	bltu	r19,r2,100073f0 <__alt_data_end+0xf80073f0>
10007404:	d8c00017 	ldw	r3,0(sp)
10007408:	1dc00415 	stw	r23,16(r3)
1000740c:	d9400217 	ldw	r5,8(sp)
10007410:	d9000017 	ldw	r4,0(sp)
10007414:	000b5340 	call	1000b534 <__mcmp>
10007418:	10002816 	blt	r2,zero,100074bc <quorem+0x1ec>
1000741c:	dc400117 	ldw	r17,4(sp)
10007420:	94800044 	addi	r18,r18,1
10007424:	980d883a 	mov	r6,r19
10007428:	0007883a 	mov	r3,zero
1000742c:	31000017 	ldw	r4,0(r6)
10007430:	89400017 	ldw	r5,0(r17)
10007434:	31800104 	addi	r6,r6,4
10007438:	20bfffcc 	andi	r2,r4,65535
1000743c:	10c7883a 	add	r3,r2,r3
10007440:	28bfffcc 	andi	r2,r5,65535
10007444:	1885c83a 	sub	r2,r3,r2
10007448:	280ad43a 	srli	r5,r5,16
1000744c:	2008d43a 	srli	r4,r4,16
10007450:	1007d43a 	srai	r3,r2,16
10007454:	10bfffcc 	andi	r2,r2,65535
10007458:	2149c83a 	sub	r4,r4,r5
1000745c:	20c9883a 	add	r4,r4,r3
10007460:	200a943a 	slli	r5,r4,16
10007464:	8c400104 	addi	r17,r17,4
10007468:	2007d43a 	srai	r3,r4,16
1000746c:	2884b03a 	or	r2,r5,r2
10007470:	30bfff15 	stw	r2,-4(r6)
10007474:	e47fed2e 	bgeu	fp,r17,1000742c <__alt_data_end+0xf800742c>
10007478:	bdc5883a 	add	r2,r23,r23
1000747c:	1085883a 	add	r2,r2,r2
10007480:	9887883a 	add	r3,r19,r2
10007484:	18800017 	ldw	r2,0(r3)
10007488:	10000c1e 	bne	r2,zero,100074bc <quorem+0x1ec>
1000748c:	18bfff04 	addi	r2,r3,-4
10007490:	9880082e 	bgeu	r19,r2,100074b4 <quorem+0x1e4>
10007494:	18ffff17 	ldw	r3,-4(r3)
10007498:	18000326 	beq	r3,zero,100074a8 <quorem+0x1d8>
1000749c:	00000506 	br	100074b4 <quorem+0x1e4>
100074a0:	10c00017 	ldw	r3,0(r2)
100074a4:	1800031e 	bne	r3,zero,100074b4 <quorem+0x1e4>
100074a8:	10bfff04 	addi	r2,r2,-4
100074ac:	bdffffc4 	addi	r23,r23,-1
100074b0:	98bffb36 	bltu	r19,r2,100074a0 <__alt_data_end+0xf80074a0>
100074b4:	d8c00017 	ldw	r3,0(sp)
100074b8:	1dc00415 	stw	r23,16(r3)
100074bc:	9005883a 	mov	r2,r18
100074c0:	dfc00d17 	ldw	ra,52(sp)
100074c4:	df000c17 	ldw	fp,48(sp)
100074c8:	ddc00b17 	ldw	r23,44(sp)
100074cc:	dd800a17 	ldw	r22,40(sp)
100074d0:	dd400917 	ldw	r21,36(sp)
100074d4:	dd000817 	ldw	r20,32(sp)
100074d8:	dcc00717 	ldw	r19,28(sp)
100074dc:	dc800617 	ldw	r18,24(sp)
100074e0:	dc400517 	ldw	r17,20(sp)
100074e4:	dc000417 	ldw	r16,16(sp)
100074e8:	dec00e04 	addi	sp,sp,56
100074ec:	f800283a 	ret
100074f0:	0005883a 	mov	r2,zero
100074f4:	003ff206 	br	100074c0 <__alt_data_end+0xf80074c0>

100074f8 <_dtoa_r>:
100074f8:	20801017 	ldw	r2,64(r4)
100074fc:	deffde04 	addi	sp,sp,-136
10007500:	df002015 	stw	fp,128(sp)
10007504:	dcc01b15 	stw	r19,108(sp)
10007508:	dc801a15 	stw	r18,104(sp)
1000750c:	dc401915 	stw	r17,100(sp)
10007510:	dc001815 	stw	r16,96(sp)
10007514:	dfc02115 	stw	ra,132(sp)
10007518:	ddc01f15 	stw	r23,124(sp)
1000751c:	dd801e15 	stw	r22,120(sp)
10007520:	dd401d15 	stw	r21,116(sp)
10007524:	dd001c15 	stw	r20,112(sp)
10007528:	d9c00315 	stw	r7,12(sp)
1000752c:	2039883a 	mov	fp,r4
10007530:	3023883a 	mov	r17,r6
10007534:	2825883a 	mov	r18,r5
10007538:	dc002417 	ldw	r16,144(sp)
1000753c:	3027883a 	mov	r19,r6
10007540:	10000826 	beq	r2,zero,10007564 <_dtoa_r+0x6c>
10007544:	21801117 	ldw	r6,68(r4)
10007548:	00c00044 	movi	r3,1
1000754c:	100b883a 	mov	r5,r2
10007550:	1986983a 	sll	r3,r3,r6
10007554:	11800115 	stw	r6,4(r2)
10007558:	10c00215 	stw	r3,8(r2)
1000755c:	000ac580 	call	1000ac58 <_Bfree>
10007560:	e0001015 	stw	zero,64(fp)
10007564:	88002e16 	blt	r17,zero,10007620 <_dtoa_r+0x128>
10007568:	80000015 	stw	zero,0(r16)
1000756c:	889ffc2c 	andhi	r2,r17,32752
10007570:	00dffc34 	movhi	r3,32752
10007574:	10c01c26 	beq	r2,r3,100075e8 <_dtoa_r+0xf0>
10007578:	000d883a 	mov	r6,zero
1000757c:	000f883a 	mov	r7,zero
10007580:	9009883a 	mov	r4,r18
10007584:	980b883a 	mov	r5,r19
10007588:	00104e00 	call	100104e0 <__eqdf2>
1000758c:	10002b1e 	bne	r2,zero,1000763c <_dtoa_r+0x144>
10007590:	d9c02317 	ldw	r7,140(sp)
10007594:	00800044 	movi	r2,1
10007598:	38800015 	stw	r2,0(r7)
1000759c:	d8802517 	ldw	r2,148(sp)
100075a0:	10019e26 	beq	r2,zero,10007c1c <_dtoa_r+0x724>
100075a4:	d8c02517 	ldw	r3,148(sp)
100075a8:	00840074 	movhi	r2,4097
100075ac:	10933444 	addi	r2,r2,19665
100075b0:	18800015 	stw	r2,0(r3)
100075b4:	10bfffc4 	addi	r2,r2,-1
100075b8:	dfc02117 	ldw	ra,132(sp)
100075bc:	df002017 	ldw	fp,128(sp)
100075c0:	ddc01f17 	ldw	r23,124(sp)
100075c4:	dd801e17 	ldw	r22,120(sp)
100075c8:	dd401d17 	ldw	r21,116(sp)
100075cc:	dd001c17 	ldw	r20,112(sp)
100075d0:	dcc01b17 	ldw	r19,108(sp)
100075d4:	dc801a17 	ldw	r18,104(sp)
100075d8:	dc401917 	ldw	r17,100(sp)
100075dc:	dc001817 	ldw	r16,96(sp)
100075e0:	dec02204 	addi	sp,sp,136
100075e4:	f800283a 	ret
100075e8:	d8c02317 	ldw	r3,140(sp)
100075ec:	0089c3c4 	movi	r2,9999
100075f0:	18800015 	stw	r2,0(r3)
100075f4:	90017726 	beq	r18,zero,10007bd4 <_dtoa_r+0x6dc>
100075f8:	00840074 	movhi	r2,4097
100075fc:	10934004 	addi	r2,r2,19712
10007600:	d9002517 	ldw	r4,148(sp)
10007604:	203fec26 	beq	r4,zero,100075b8 <__alt_data_end+0xf80075b8>
10007608:	10c000c7 	ldb	r3,3(r2)
1000760c:	1801781e 	bne	r3,zero,10007bf0 <_dtoa_r+0x6f8>
10007610:	10c000c4 	addi	r3,r2,3
10007614:	d9802517 	ldw	r6,148(sp)
10007618:	30c00015 	stw	r3,0(r6)
1000761c:	003fe606 	br	100075b8 <__alt_data_end+0xf80075b8>
10007620:	04e00034 	movhi	r19,32768
10007624:	9cffffc4 	addi	r19,r19,-1
10007628:	00800044 	movi	r2,1
1000762c:	8ce6703a 	and	r19,r17,r19
10007630:	80800015 	stw	r2,0(r16)
10007634:	9823883a 	mov	r17,r19
10007638:	003fcc06 	br	1000756c <__alt_data_end+0xf800756c>
1000763c:	d8800204 	addi	r2,sp,8
10007640:	d8800015 	stw	r2,0(sp)
10007644:	d9c00104 	addi	r7,sp,4
10007648:	900b883a 	mov	r5,r18
1000764c:	980d883a 	mov	r6,r19
10007650:	e009883a 	mov	r4,fp
10007654:	8820d53a 	srli	r16,r17,20
10007658:	000b9000 	call	1000b900 <__d2b>
1000765c:	d8800915 	stw	r2,36(sp)
10007660:	8001651e 	bne	r16,zero,10007bf8 <_dtoa_r+0x700>
10007664:	dd800217 	ldw	r22,8(sp)
10007668:	dc000117 	ldw	r16,4(sp)
1000766c:	00800804 	movi	r2,32
10007670:	b421883a 	add	r16,r22,r16
10007674:	80c10c84 	addi	r3,r16,1074
10007678:	10c2d10e 	bge	r2,r3,100081c0 <_dtoa_r+0xcc8>
1000767c:	00801004 	movi	r2,64
10007680:	81010484 	addi	r4,r16,1042
10007684:	10c7c83a 	sub	r3,r2,r3
10007688:	9108d83a 	srl	r4,r18,r4
1000768c:	88e2983a 	sll	r17,r17,r3
10007690:	2448b03a 	or	r4,r4,r17
10007694:	00119fc0 	call	100119fc <__floatunsidf>
10007698:	017f8434 	movhi	r5,65040
1000769c:	01800044 	movi	r6,1
100076a0:	1009883a 	mov	r4,r2
100076a4:	194b883a 	add	r5,r3,r5
100076a8:	843fffc4 	addi	r16,r16,-1
100076ac:	d9801115 	stw	r6,68(sp)
100076b0:	000d883a 	mov	r6,zero
100076b4:	01cffe34 	movhi	r7,16376
100076b8:	0010fa40 	call	10010fa4 <__subdf3>
100076bc:	0198dbf4 	movhi	r6,25455
100076c0:	01cff4f4 	movhi	r7,16339
100076c4:	3190d844 	addi	r6,r6,17249
100076c8:	39e1e9c4 	addi	r7,r7,-30809
100076cc:	1009883a 	mov	r4,r2
100076d0:	180b883a 	mov	r5,r3
100076d4:	00107380 	call	10010738 <__muldf3>
100076d8:	01a2d874 	movhi	r6,35681
100076dc:	01cff1f4 	movhi	r7,16327
100076e0:	31b22cc4 	addi	r6,r6,-14157
100076e4:	39e28a04 	addi	r7,r7,-30168
100076e8:	180b883a 	mov	r5,r3
100076ec:	1009883a 	mov	r4,r2
100076f0:	000f2640 	call	1000f264 <__adddf3>
100076f4:	8009883a 	mov	r4,r16
100076f8:	1029883a 	mov	r20,r2
100076fc:	1823883a 	mov	r17,r3
10007700:	00119200 	call	10011920 <__floatsidf>
10007704:	019427f4 	movhi	r6,20639
10007708:	01cff4f4 	movhi	r7,16339
1000770c:	319e7ec4 	addi	r6,r6,31227
10007710:	39d104c4 	addi	r7,r7,17427
10007714:	1009883a 	mov	r4,r2
10007718:	180b883a 	mov	r5,r3
1000771c:	00107380 	call	10010738 <__muldf3>
10007720:	100d883a 	mov	r6,r2
10007724:	180f883a 	mov	r7,r3
10007728:	a009883a 	mov	r4,r20
1000772c:	880b883a 	mov	r5,r17
10007730:	000f2640 	call	1000f264 <__adddf3>
10007734:	1009883a 	mov	r4,r2
10007738:	180b883a 	mov	r5,r3
1000773c:	1029883a 	mov	r20,r2
10007740:	1823883a 	mov	r17,r3
10007744:	00118a00 	call	100118a0 <__fixdfsi>
10007748:	000d883a 	mov	r6,zero
1000774c:	000f883a 	mov	r7,zero
10007750:	a009883a 	mov	r4,r20
10007754:	880b883a 	mov	r5,r17
10007758:	d8800515 	stw	r2,20(sp)
1000775c:	00106440 	call	10010644 <__ledf2>
10007760:	10028716 	blt	r2,zero,10008180 <_dtoa_r+0xc88>
10007764:	d8c00517 	ldw	r3,20(sp)
10007768:	00800584 	movi	r2,22
1000776c:	10c27536 	bltu	r2,r3,10008144 <_dtoa_r+0xc4c>
10007770:	180490fa 	slli	r2,r3,3
10007774:	00c40074 	movhi	r3,4097
10007778:	18d35c04 	addi	r3,r3,19824
1000777c:	1885883a 	add	r2,r3,r2
10007780:	11000017 	ldw	r4,0(r2)
10007784:	11400117 	ldw	r5,4(r2)
10007788:	900d883a 	mov	r6,r18
1000778c:	980f883a 	mov	r7,r19
10007790:	00105680 	call	10010568 <__gedf2>
10007794:	00828d0e 	bge	zero,r2,100081cc <_dtoa_r+0xcd4>
10007798:	d9000517 	ldw	r4,20(sp)
1000779c:	d8000e15 	stw	zero,56(sp)
100077a0:	213fffc4 	addi	r4,r4,-1
100077a4:	d9000515 	stw	r4,20(sp)
100077a8:	b42dc83a 	sub	r22,r22,r16
100077ac:	b5bfffc4 	addi	r22,r22,-1
100077b0:	b0026f16 	blt	r22,zero,10008170 <_dtoa_r+0xc78>
100077b4:	d8000815 	stw	zero,32(sp)
100077b8:	d9c00517 	ldw	r7,20(sp)
100077bc:	38026416 	blt	r7,zero,10008150 <_dtoa_r+0xc58>
100077c0:	b1ed883a 	add	r22,r22,r7
100077c4:	d9c00d15 	stw	r7,52(sp)
100077c8:	d8000a15 	stw	zero,40(sp)
100077cc:	d9800317 	ldw	r6,12(sp)
100077d0:	00800244 	movi	r2,9
100077d4:	11811436 	bltu	r2,r6,10007c28 <_dtoa_r+0x730>
100077d8:	00800144 	movi	r2,5
100077dc:	1184e10e 	bge	r2,r6,10008b64 <_dtoa_r+0x166c>
100077e0:	31bfff04 	addi	r6,r6,-4
100077e4:	d9800315 	stw	r6,12(sp)
100077e8:	0023883a 	mov	r17,zero
100077ec:	d9800317 	ldw	r6,12(sp)
100077f0:	008000c4 	movi	r2,3
100077f4:	30836726 	beq	r6,r2,10008594 <_dtoa_r+0x109c>
100077f8:	1183410e 	bge	r2,r6,10008500 <_dtoa_r+0x1008>
100077fc:	d9c00317 	ldw	r7,12(sp)
10007800:	00800104 	movi	r2,4
10007804:	38827c26 	beq	r7,r2,100081f8 <_dtoa_r+0xd00>
10007808:	00800144 	movi	r2,5
1000780c:	3884c41e 	bne	r7,r2,10008b20 <_dtoa_r+0x1628>
10007810:	00800044 	movi	r2,1
10007814:	d8800b15 	stw	r2,44(sp)
10007818:	d8c00517 	ldw	r3,20(sp)
1000781c:	d9002217 	ldw	r4,136(sp)
10007820:	1907883a 	add	r3,r3,r4
10007824:	19800044 	addi	r6,r3,1
10007828:	d8c00c15 	stw	r3,48(sp)
1000782c:	d9800615 	stw	r6,24(sp)
10007830:	0183a40e 	bge	zero,r6,100086c4 <_dtoa_r+0x11cc>
10007834:	d9800617 	ldw	r6,24(sp)
10007838:	3021883a 	mov	r16,r6
1000783c:	e0001115 	stw	zero,68(fp)
10007840:	008005c4 	movi	r2,23
10007844:	1184c92e 	bgeu	r2,r6,10008b6c <_dtoa_r+0x1674>
10007848:	00c00044 	movi	r3,1
1000784c:	00800104 	movi	r2,4
10007850:	1085883a 	add	r2,r2,r2
10007854:	11000504 	addi	r4,r2,20
10007858:	180b883a 	mov	r5,r3
1000785c:	18c00044 	addi	r3,r3,1
10007860:	313ffb2e 	bgeu	r6,r4,10007850 <__alt_data_end+0xf8007850>
10007864:	e1401115 	stw	r5,68(fp)
10007868:	e009883a 	mov	r4,fp
1000786c:	000abb00 	call	1000abb0 <_Balloc>
10007870:	d8800715 	stw	r2,28(sp)
10007874:	e0801015 	stw	r2,64(fp)
10007878:	00800384 	movi	r2,14
1000787c:	1400f736 	bltu	r2,r16,10007c5c <_dtoa_r+0x764>
10007880:	8800f626 	beq	r17,zero,10007c5c <_dtoa_r+0x764>
10007884:	d9c00517 	ldw	r7,20(sp)
10007888:	01c39a0e 	bge	zero,r7,100086f4 <_dtoa_r+0x11fc>
1000788c:	388003cc 	andi	r2,r7,15
10007890:	100490fa 	slli	r2,r2,3
10007894:	382bd13a 	srai	r21,r7,4
10007898:	00c40074 	movhi	r3,4097
1000789c:	18d35c04 	addi	r3,r3,19824
100078a0:	1885883a 	add	r2,r3,r2
100078a4:	a8c0040c 	andi	r3,r21,16
100078a8:	12400017 	ldw	r9,0(r2)
100078ac:	12000117 	ldw	r8,4(r2)
100078b0:	18037926 	beq	r3,zero,10008698 <_dtoa_r+0x11a0>
100078b4:	00840074 	movhi	r2,4097
100078b8:	10935204 	addi	r2,r2,19784
100078bc:	11800817 	ldw	r6,32(r2)
100078c0:	11c00917 	ldw	r7,36(r2)
100078c4:	9009883a 	mov	r4,r18
100078c8:	980b883a 	mov	r5,r19
100078cc:	da001715 	stw	r8,92(sp)
100078d0:	da401615 	stw	r9,88(sp)
100078d4:	000fb100 	call	1000fb10 <__divdf3>
100078d8:	da001717 	ldw	r8,92(sp)
100078dc:	da401617 	ldw	r9,88(sp)
100078e0:	ad4003cc 	andi	r21,r21,15
100078e4:	040000c4 	movi	r16,3
100078e8:	1023883a 	mov	r17,r2
100078ec:	1829883a 	mov	r20,r3
100078f0:	a8001126 	beq	r21,zero,10007938 <_dtoa_r+0x440>
100078f4:	05c40074 	movhi	r23,4097
100078f8:	bdd35204 	addi	r23,r23,19784
100078fc:	4805883a 	mov	r2,r9
10007900:	4007883a 	mov	r3,r8
10007904:	a980004c 	andi	r6,r21,1
10007908:	1009883a 	mov	r4,r2
1000790c:	a82bd07a 	srai	r21,r21,1
10007910:	180b883a 	mov	r5,r3
10007914:	30000426 	beq	r6,zero,10007928 <_dtoa_r+0x430>
10007918:	b9800017 	ldw	r6,0(r23)
1000791c:	b9c00117 	ldw	r7,4(r23)
10007920:	84000044 	addi	r16,r16,1
10007924:	00107380 	call	10010738 <__muldf3>
10007928:	bdc00204 	addi	r23,r23,8
1000792c:	a83ff51e 	bne	r21,zero,10007904 <__alt_data_end+0xf8007904>
10007930:	1013883a 	mov	r9,r2
10007934:	1811883a 	mov	r8,r3
10007938:	480d883a 	mov	r6,r9
1000793c:	400f883a 	mov	r7,r8
10007940:	8809883a 	mov	r4,r17
10007944:	a00b883a 	mov	r5,r20
10007948:	000fb100 	call	1000fb10 <__divdf3>
1000794c:	d8800f15 	stw	r2,60(sp)
10007950:	d8c01015 	stw	r3,64(sp)
10007954:	d8c00e17 	ldw	r3,56(sp)
10007958:	18000626 	beq	r3,zero,10007974 <_dtoa_r+0x47c>
1000795c:	d9000f17 	ldw	r4,60(sp)
10007960:	d9401017 	ldw	r5,64(sp)
10007964:	000d883a 	mov	r6,zero
10007968:	01cffc34 	movhi	r7,16368
1000796c:	00106440 	call	10010644 <__ledf2>
10007970:	10040b16 	blt	r2,zero,100089a0 <_dtoa_r+0x14a8>
10007974:	8009883a 	mov	r4,r16
10007978:	00119200 	call	10011920 <__floatsidf>
1000797c:	d9800f17 	ldw	r6,60(sp)
10007980:	d9c01017 	ldw	r7,64(sp)
10007984:	1009883a 	mov	r4,r2
10007988:	180b883a 	mov	r5,r3
1000798c:	00107380 	call	10010738 <__muldf3>
10007990:	000d883a 	mov	r6,zero
10007994:	01d00734 	movhi	r7,16412
10007998:	1009883a 	mov	r4,r2
1000799c:	180b883a 	mov	r5,r3
100079a0:	000f2640 	call	1000f264 <__adddf3>
100079a4:	1021883a 	mov	r16,r2
100079a8:	d8800617 	ldw	r2,24(sp)
100079ac:	047f3034 	movhi	r17,64704
100079b0:	1c63883a 	add	r17,r3,r17
100079b4:	10031826 	beq	r2,zero,10008618 <_dtoa_r+0x1120>
100079b8:	d8c00517 	ldw	r3,20(sp)
100079bc:	db000617 	ldw	r12,24(sp)
100079c0:	d8c01315 	stw	r3,76(sp)
100079c4:	d9000b17 	ldw	r4,44(sp)
100079c8:	20038f26 	beq	r4,zero,10008808 <_dtoa_r+0x1310>
100079cc:	60bfffc4 	addi	r2,r12,-1
100079d0:	100490fa 	slli	r2,r2,3
100079d4:	00c40074 	movhi	r3,4097
100079d8:	18d35c04 	addi	r3,r3,19824
100079dc:	1885883a 	add	r2,r3,r2
100079e0:	11800017 	ldw	r6,0(r2)
100079e4:	11c00117 	ldw	r7,4(r2)
100079e8:	d8800717 	ldw	r2,28(sp)
100079ec:	0009883a 	mov	r4,zero
100079f0:	014ff834 	movhi	r5,16352
100079f4:	db001615 	stw	r12,88(sp)
100079f8:	15c00044 	addi	r23,r2,1
100079fc:	000fb100 	call	1000fb10 <__divdf3>
10007a00:	800d883a 	mov	r6,r16
10007a04:	880f883a 	mov	r7,r17
10007a08:	1009883a 	mov	r4,r2
10007a0c:	180b883a 	mov	r5,r3
10007a10:	0010fa40 	call	10010fa4 <__subdf3>
10007a14:	d9401017 	ldw	r5,64(sp)
10007a18:	d9000f17 	ldw	r4,60(sp)
10007a1c:	102b883a 	mov	r21,r2
10007a20:	d8c01215 	stw	r3,72(sp)
10007a24:	00118a00 	call	100118a0 <__fixdfsi>
10007a28:	1009883a 	mov	r4,r2
10007a2c:	1029883a 	mov	r20,r2
10007a30:	00119200 	call	10011920 <__floatsidf>
10007a34:	d9000f17 	ldw	r4,60(sp)
10007a38:	d9401017 	ldw	r5,64(sp)
10007a3c:	100d883a 	mov	r6,r2
10007a40:	180f883a 	mov	r7,r3
10007a44:	0010fa40 	call	10010fa4 <__subdf3>
10007a48:	1823883a 	mov	r17,r3
10007a4c:	d8c00717 	ldw	r3,28(sp)
10007a50:	d9401217 	ldw	r5,72(sp)
10007a54:	a2000c04 	addi	r8,r20,48
10007a58:	1021883a 	mov	r16,r2
10007a5c:	1a000005 	stb	r8,0(r3)
10007a60:	800d883a 	mov	r6,r16
10007a64:	880f883a 	mov	r7,r17
10007a68:	a809883a 	mov	r4,r21
10007a6c:	4029883a 	mov	r20,r8
10007a70:	00105680 	call	10010568 <__gedf2>
10007a74:	00841d16 	blt	zero,r2,10008aec <_dtoa_r+0x15f4>
10007a78:	800d883a 	mov	r6,r16
10007a7c:	880f883a 	mov	r7,r17
10007a80:	0009883a 	mov	r4,zero
10007a84:	014ffc34 	movhi	r5,16368
10007a88:	0010fa40 	call	10010fa4 <__subdf3>
10007a8c:	d9401217 	ldw	r5,72(sp)
10007a90:	100d883a 	mov	r6,r2
10007a94:	180f883a 	mov	r7,r3
10007a98:	a809883a 	mov	r4,r21
10007a9c:	00105680 	call	10010568 <__gedf2>
10007aa0:	db001617 	ldw	r12,88(sp)
10007aa4:	00840e16 	blt	zero,r2,10008ae0 <_dtoa_r+0x15e8>
10007aa8:	00800044 	movi	r2,1
10007aac:	13006b0e 	bge	r2,r12,10007c5c <_dtoa_r+0x764>
10007ab0:	d9000717 	ldw	r4,28(sp)
10007ab4:	dd800f15 	stw	r22,60(sp)
10007ab8:	dcc01015 	stw	r19,64(sp)
10007abc:	2319883a 	add	r12,r4,r12
10007ac0:	dcc01217 	ldw	r19,72(sp)
10007ac4:	602d883a 	mov	r22,r12
10007ac8:	dc801215 	stw	r18,72(sp)
10007acc:	b825883a 	mov	r18,r23
10007ad0:	00000906 	br	10007af8 <_dtoa_r+0x600>
10007ad4:	0010fa40 	call	10010fa4 <__subdf3>
10007ad8:	a80d883a 	mov	r6,r21
10007adc:	980f883a 	mov	r7,r19
10007ae0:	1009883a 	mov	r4,r2
10007ae4:	180b883a 	mov	r5,r3
10007ae8:	00106440 	call	10010644 <__ledf2>
10007aec:	1003e816 	blt	r2,zero,10008a90 <_dtoa_r+0x1598>
10007af0:	b825883a 	mov	r18,r23
10007af4:	bd83e926 	beq	r23,r22,10008a9c <_dtoa_r+0x15a4>
10007af8:	a809883a 	mov	r4,r21
10007afc:	980b883a 	mov	r5,r19
10007b00:	000d883a 	mov	r6,zero
10007b04:	01d00934 	movhi	r7,16420
10007b08:	00107380 	call	10010738 <__muldf3>
10007b0c:	000d883a 	mov	r6,zero
10007b10:	01d00934 	movhi	r7,16420
10007b14:	8009883a 	mov	r4,r16
10007b18:	880b883a 	mov	r5,r17
10007b1c:	102b883a 	mov	r21,r2
10007b20:	1827883a 	mov	r19,r3
10007b24:	00107380 	call	10010738 <__muldf3>
10007b28:	180b883a 	mov	r5,r3
10007b2c:	1009883a 	mov	r4,r2
10007b30:	1821883a 	mov	r16,r3
10007b34:	1023883a 	mov	r17,r2
10007b38:	00118a00 	call	100118a0 <__fixdfsi>
10007b3c:	1009883a 	mov	r4,r2
10007b40:	1029883a 	mov	r20,r2
10007b44:	00119200 	call	10011920 <__floatsidf>
10007b48:	8809883a 	mov	r4,r17
10007b4c:	800b883a 	mov	r5,r16
10007b50:	100d883a 	mov	r6,r2
10007b54:	180f883a 	mov	r7,r3
10007b58:	0010fa40 	call	10010fa4 <__subdf3>
10007b5c:	a5000c04 	addi	r20,r20,48
10007b60:	a80d883a 	mov	r6,r21
10007b64:	980f883a 	mov	r7,r19
10007b68:	1009883a 	mov	r4,r2
10007b6c:	180b883a 	mov	r5,r3
10007b70:	95000005 	stb	r20,0(r18)
10007b74:	1021883a 	mov	r16,r2
10007b78:	1823883a 	mov	r17,r3
10007b7c:	00106440 	call	10010644 <__ledf2>
10007b80:	bdc00044 	addi	r23,r23,1
10007b84:	800d883a 	mov	r6,r16
10007b88:	880f883a 	mov	r7,r17
10007b8c:	0009883a 	mov	r4,zero
10007b90:	014ffc34 	movhi	r5,16368
10007b94:	103fcf0e 	bge	r2,zero,10007ad4 <__alt_data_end+0xf8007ad4>
10007b98:	d8c01317 	ldw	r3,76(sp)
10007b9c:	d8c00515 	stw	r3,20(sp)
10007ba0:	d9400917 	ldw	r5,36(sp)
10007ba4:	e009883a 	mov	r4,fp
10007ba8:	000ac580 	call	1000ac58 <_Bfree>
10007bac:	d9000517 	ldw	r4,20(sp)
10007bb0:	d9802317 	ldw	r6,140(sp)
10007bb4:	d9c02517 	ldw	r7,148(sp)
10007bb8:	b8000005 	stb	zero,0(r23)
10007bbc:	20800044 	addi	r2,r4,1
10007bc0:	30800015 	stw	r2,0(r6)
10007bc4:	3802aa26 	beq	r7,zero,10008670 <_dtoa_r+0x1178>
10007bc8:	3dc00015 	stw	r23,0(r7)
10007bcc:	d8800717 	ldw	r2,28(sp)
10007bd0:	003e7906 	br	100075b8 <__alt_data_end+0xf80075b8>
10007bd4:	00800434 	movhi	r2,16
10007bd8:	10bfffc4 	addi	r2,r2,-1
10007bdc:	88a2703a 	and	r17,r17,r2
10007be0:	883e851e 	bne	r17,zero,100075f8 <__alt_data_end+0xf80075f8>
10007be4:	00840074 	movhi	r2,4097
10007be8:	10933d04 	addi	r2,r2,19700
10007bec:	003e8406 	br	10007600 <__alt_data_end+0xf8007600>
10007bf0:	10c00204 	addi	r3,r2,8
10007bf4:	003e8706 	br	10007614 <__alt_data_end+0xf8007614>
10007bf8:	01400434 	movhi	r5,16
10007bfc:	297fffc4 	addi	r5,r5,-1
10007c00:	994a703a 	and	r5,r19,r5
10007c04:	9009883a 	mov	r4,r18
10007c08:	843f0044 	addi	r16,r16,-1023
10007c0c:	294ffc34 	orhi	r5,r5,16368
10007c10:	dd800217 	ldw	r22,8(sp)
10007c14:	d8001115 	stw	zero,68(sp)
10007c18:	003ea506 	br	100076b0 <__alt_data_end+0xf80076b0>
10007c1c:	00840074 	movhi	r2,4097
10007c20:	10933404 	addi	r2,r2,19664
10007c24:	003e6406 	br	100075b8 <__alt_data_end+0xf80075b8>
10007c28:	e0001115 	stw	zero,68(fp)
10007c2c:	000b883a 	mov	r5,zero
10007c30:	e009883a 	mov	r4,fp
10007c34:	000abb00 	call	1000abb0 <_Balloc>
10007c38:	01bfffc4 	movi	r6,-1
10007c3c:	01c00044 	movi	r7,1
10007c40:	d8800715 	stw	r2,28(sp)
10007c44:	d9800c15 	stw	r6,48(sp)
10007c48:	e0801015 	stw	r2,64(fp)
10007c4c:	d8000315 	stw	zero,12(sp)
10007c50:	d9c00b15 	stw	r7,44(sp)
10007c54:	d9800615 	stw	r6,24(sp)
10007c58:	d8002215 	stw	zero,136(sp)
10007c5c:	d8800117 	ldw	r2,4(sp)
10007c60:	10008916 	blt	r2,zero,10007e88 <_dtoa_r+0x990>
10007c64:	d9000517 	ldw	r4,20(sp)
10007c68:	00c00384 	movi	r3,14
10007c6c:	19008616 	blt	r3,r4,10007e88 <_dtoa_r+0x990>
10007c70:	200490fa 	slli	r2,r4,3
10007c74:	00c40074 	movhi	r3,4097
10007c78:	d9802217 	ldw	r6,136(sp)
10007c7c:	18d35c04 	addi	r3,r3,19824
10007c80:	1885883a 	add	r2,r3,r2
10007c84:	14000017 	ldw	r16,0(r2)
10007c88:	14400117 	ldw	r17,4(r2)
10007c8c:	30016316 	blt	r6,zero,1000821c <_dtoa_r+0xd24>
10007c90:	800d883a 	mov	r6,r16
10007c94:	880f883a 	mov	r7,r17
10007c98:	9009883a 	mov	r4,r18
10007c9c:	980b883a 	mov	r5,r19
10007ca0:	000fb100 	call	1000fb10 <__divdf3>
10007ca4:	180b883a 	mov	r5,r3
10007ca8:	1009883a 	mov	r4,r2
10007cac:	00118a00 	call	100118a0 <__fixdfsi>
10007cb0:	1009883a 	mov	r4,r2
10007cb4:	102b883a 	mov	r21,r2
10007cb8:	00119200 	call	10011920 <__floatsidf>
10007cbc:	800d883a 	mov	r6,r16
10007cc0:	880f883a 	mov	r7,r17
10007cc4:	1009883a 	mov	r4,r2
10007cc8:	180b883a 	mov	r5,r3
10007ccc:	00107380 	call	10010738 <__muldf3>
10007cd0:	100d883a 	mov	r6,r2
10007cd4:	180f883a 	mov	r7,r3
10007cd8:	9009883a 	mov	r4,r18
10007cdc:	980b883a 	mov	r5,r19
10007ce0:	0010fa40 	call	10010fa4 <__subdf3>
10007ce4:	d9c00717 	ldw	r7,28(sp)
10007ce8:	1009883a 	mov	r4,r2
10007cec:	a8800c04 	addi	r2,r21,48
10007cf0:	38800005 	stb	r2,0(r7)
10007cf4:	3dc00044 	addi	r23,r7,1
10007cf8:	d9c00617 	ldw	r7,24(sp)
10007cfc:	01800044 	movi	r6,1
10007d00:	180b883a 	mov	r5,r3
10007d04:	2005883a 	mov	r2,r4
10007d08:	39803826 	beq	r7,r6,10007dec <_dtoa_r+0x8f4>
10007d0c:	000d883a 	mov	r6,zero
10007d10:	01d00934 	movhi	r7,16420
10007d14:	00107380 	call	10010738 <__muldf3>
10007d18:	000d883a 	mov	r6,zero
10007d1c:	000f883a 	mov	r7,zero
10007d20:	1009883a 	mov	r4,r2
10007d24:	180b883a 	mov	r5,r3
10007d28:	1025883a 	mov	r18,r2
10007d2c:	1827883a 	mov	r19,r3
10007d30:	00104e00 	call	100104e0 <__eqdf2>
10007d34:	103f9a26 	beq	r2,zero,10007ba0 <__alt_data_end+0xf8007ba0>
10007d38:	d9c00617 	ldw	r7,24(sp)
10007d3c:	d8c00717 	ldw	r3,28(sp)
10007d40:	b829883a 	mov	r20,r23
10007d44:	38bfffc4 	addi	r2,r7,-1
10007d48:	18ad883a 	add	r22,r3,r2
10007d4c:	00000a06 	br	10007d78 <_dtoa_r+0x880>
10007d50:	00107380 	call	10010738 <__muldf3>
10007d54:	000d883a 	mov	r6,zero
10007d58:	000f883a 	mov	r7,zero
10007d5c:	1009883a 	mov	r4,r2
10007d60:	180b883a 	mov	r5,r3
10007d64:	1025883a 	mov	r18,r2
10007d68:	1827883a 	mov	r19,r3
10007d6c:	b829883a 	mov	r20,r23
10007d70:	00104e00 	call	100104e0 <__eqdf2>
10007d74:	103f8a26 	beq	r2,zero,10007ba0 <__alt_data_end+0xf8007ba0>
10007d78:	800d883a 	mov	r6,r16
10007d7c:	880f883a 	mov	r7,r17
10007d80:	9009883a 	mov	r4,r18
10007d84:	980b883a 	mov	r5,r19
10007d88:	000fb100 	call	1000fb10 <__divdf3>
10007d8c:	180b883a 	mov	r5,r3
10007d90:	1009883a 	mov	r4,r2
10007d94:	00118a00 	call	100118a0 <__fixdfsi>
10007d98:	1009883a 	mov	r4,r2
10007d9c:	102b883a 	mov	r21,r2
10007da0:	00119200 	call	10011920 <__floatsidf>
10007da4:	800d883a 	mov	r6,r16
10007da8:	880f883a 	mov	r7,r17
10007dac:	1009883a 	mov	r4,r2
10007db0:	180b883a 	mov	r5,r3
10007db4:	00107380 	call	10010738 <__muldf3>
10007db8:	100d883a 	mov	r6,r2
10007dbc:	180f883a 	mov	r7,r3
10007dc0:	9009883a 	mov	r4,r18
10007dc4:	980b883a 	mov	r5,r19
10007dc8:	0010fa40 	call	10010fa4 <__subdf3>
10007dcc:	aa000c04 	addi	r8,r21,48
10007dd0:	a2000005 	stb	r8,0(r20)
10007dd4:	000d883a 	mov	r6,zero
10007dd8:	01d00934 	movhi	r7,16420
10007ddc:	1009883a 	mov	r4,r2
10007de0:	180b883a 	mov	r5,r3
10007de4:	a5c00044 	addi	r23,r20,1
10007de8:	b53fd91e 	bne	r22,r20,10007d50 <__alt_data_end+0xf8007d50>
10007dec:	100d883a 	mov	r6,r2
10007df0:	180f883a 	mov	r7,r3
10007df4:	1009883a 	mov	r4,r2
10007df8:	180b883a 	mov	r5,r3
10007dfc:	000f2640 	call	1000f264 <__adddf3>
10007e00:	100d883a 	mov	r6,r2
10007e04:	180f883a 	mov	r7,r3
10007e08:	8009883a 	mov	r4,r16
10007e0c:	880b883a 	mov	r5,r17
10007e10:	1027883a 	mov	r19,r2
10007e14:	1825883a 	mov	r18,r3
10007e18:	00106440 	call	10010644 <__ledf2>
10007e1c:	10000816 	blt	r2,zero,10007e40 <_dtoa_r+0x948>
10007e20:	980d883a 	mov	r6,r19
10007e24:	900f883a 	mov	r7,r18
10007e28:	8009883a 	mov	r4,r16
10007e2c:	880b883a 	mov	r5,r17
10007e30:	00104e00 	call	100104e0 <__eqdf2>
10007e34:	103f5a1e 	bne	r2,zero,10007ba0 <__alt_data_end+0xf8007ba0>
10007e38:	ad40004c 	andi	r21,r21,1
10007e3c:	a83f5826 	beq	r21,zero,10007ba0 <__alt_data_end+0xf8007ba0>
10007e40:	bd3fffc3 	ldbu	r20,-1(r23)
10007e44:	b8bfffc4 	addi	r2,r23,-1
10007e48:	1007883a 	mov	r3,r2
10007e4c:	01400e44 	movi	r5,57
10007e50:	d9800717 	ldw	r6,28(sp)
10007e54:	00000506 	br	10007e6c <_dtoa_r+0x974>
10007e58:	18ffffc4 	addi	r3,r3,-1
10007e5c:	11824726 	beq	r2,r6,1000877c <_dtoa_r+0x1284>
10007e60:	1d000003 	ldbu	r20,0(r3)
10007e64:	102f883a 	mov	r23,r2
10007e68:	10bfffc4 	addi	r2,r2,-1
10007e6c:	a1003fcc 	andi	r4,r20,255
10007e70:	2100201c 	xori	r4,r4,128
10007e74:	213fe004 	addi	r4,r4,-128
10007e78:	217ff726 	beq	r4,r5,10007e58 <__alt_data_end+0xf8007e58>
10007e7c:	a2000044 	addi	r8,r20,1
10007e80:	12000005 	stb	r8,0(r2)
10007e84:	003f4606 	br	10007ba0 <__alt_data_end+0xf8007ba0>
10007e88:	d9000b17 	ldw	r4,44(sp)
10007e8c:	2000c826 	beq	r4,zero,100081b0 <_dtoa_r+0xcb8>
10007e90:	d9800317 	ldw	r6,12(sp)
10007e94:	00c00044 	movi	r3,1
10007e98:	1980f90e 	bge	r3,r6,10008280 <_dtoa_r+0xd88>
10007e9c:	d8800617 	ldw	r2,24(sp)
10007ea0:	d8c00a17 	ldw	r3,40(sp)
10007ea4:	157fffc4 	addi	r21,r2,-1
10007ea8:	1d41f316 	blt	r3,r21,10008678 <_dtoa_r+0x1180>
10007eac:	1d6bc83a 	sub	r21,r3,r21
10007eb0:	d9c00617 	ldw	r7,24(sp)
10007eb4:	3802aa16 	blt	r7,zero,10008960 <_dtoa_r+0x1468>
10007eb8:	dd000817 	ldw	r20,32(sp)
10007ebc:	d8800617 	ldw	r2,24(sp)
10007ec0:	d8c00817 	ldw	r3,32(sp)
10007ec4:	01400044 	movi	r5,1
10007ec8:	e009883a 	mov	r4,fp
10007ecc:	1887883a 	add	r3,r3,r2
10007ed0:	d8c00815 	stw	r3,32(sp)
10007ed4:	b0ad883a 	add	r22,r22,r2
10007ed8:	000afe40 	call	1000afe4 <__i2b>
10007edc:	1023883a 	mov	r17,r2
10007ee0:	a0000826 	beq	r20,zero,10007f04 <_dtoa_r+0xa0c>
10007ee4:	0580070e 	bge	zero,r22,10007f04 <_dtoa_r+0xa0c>
10007ee8:	a005883a 	mov	r2,r20
10007eec:	b500b916 	blt	r22,r20,100081d4 <_dtoa_r+0xcdc>
10007ef0:	d9000817 	ldw	r4,32(sp)
10007ef4:	a0a9c83a 	sub	r20,r20,r2
10007ef8:	b0adc83a 	sub	r22,r22,r2
10007efc:	2089c83a 	sub	r4,r4,r2
10007f00:	d9000815 	stw	r4,32(sp)
10007f04:	d9800a17 	ldw	r6,40(sp)
10007f08:	0181810e 	bge	zero,r6,10008510 <_dtoa_r+0x1018>
10007f0c:	d9c00b17 	ldw	r7,44(sp)
10007f10:	3800b326 	beq	r7,zero,100081e0 <_dtoa_r+0xce8>
10007f14:	a800b226 	beq	r21,zero,100081e0 <_dtoa_r+0xce8>
10007f18:	880b883a 	mov	r5,r17
10007f1c:	a80d883a 	mov	r6,r21
10007f20:	e009883a 	mov	r4,fp
10007f24:	000b2ac0 	call	1000b2ac <__pow5mult>
10007f28:	d9800917 	ldw	r6,36(sp)
10007f2c:	100b883a 	mov	r5,r2
10007f30:	e009883a 	mov	r4,fp
10007f34:	1023883a 	mov	r17,r2
10007f38:	000b0200 	call	1000b020 <__multiply>
10007f3c:	1021883a 	mov	r16,r2
10007f40:	d8800a17 	ldw	r2,40(sp)
10007f44:	d9400917 	ldw	r5,36(sp)
10007f48:	e009883a 	mov	r4,fp
10007f4c:	1545c83a 	sub	r2,r2,r21
10007f50:	d8800a15 	stw	r2,40(sp)
10007f54:	000ac580 	call	1000ac58 <_Bfree>
10007f58:	d8c00a17 	ldw	r3,40(sp)
10007f5c:	18009f1e 	bne	r3,zero,100081dc <_dtoa_r+0xce4>
10007f60:	05c00044 	movi	r23,1
10007f64:	e009883a 	mov	r4,fp
10007f68:	b80b883a 	mov	r5,r23
10007f6c:	000afe40 	call	1000afe4 <__i2b>
10007f70:	d9000d17 	ldw	r4,52(sp)
10007f74:	102b883a 	mov	r21,r2
10007f78:	2000ce26 	beq	r4,zero,100082b4 <_dtoa_r+0xdbc>
10007f7c:	200d883a 	mov	r6,r4
10007f80:	100b883a 	mov	r5,r2
10007f84:	e009883a 	mov	r4,fp
10007f88:	000b2ac0 	call	1000b2ac <__pow5mult>
10007f8c:	d9800317 	ldw	r6,12(sp)
10007f90:	102b883a 	mov	r21,r2
10007f94:	b981810e 	bge	r23,r6,1000859c <_dtoa_r+0x10a4>
10007f98:	0027883a 	mov	r19,zero
10007f9c:	a8800417 	ldw	r2,16(r21)
10007fa0:	05c00804 	movi	r23,32
10007fa4:	10800104 	addi	r2,r2,4
10007fa8:	1085883a 	add	r2,r2,r2
10007fac:	1085883a 	add	r2,r2,r2
10007fb0:	a885883a 	add	r2,r21,r2
10007fb4:	11000017 	ldw	r4,0(r2)
10007fb8:	000aecc0 	call	1000aecc <__hi0bits>
10007fbc:	b885c83a 	sub	r2,r23,r2
10007fc0:	1585883a 	add	r2,r2,r22
10007fc4:	108007cc 	andi	r2,r2,31
10007fc8:	1000b326 	beq	r2,zero,10008298 <_dtoa_r+0xda0>
10007fcc:	00c00804 	movi	r3,32
10007fd0:	1887c83a 	sub	r3,r3,r2
10007fd4:	01000104 	movi	r4,4
10007fd8:	20c2cd0e 	bge	r4,r3,10008b10 <_dtoa_r+0x1618>
10007fdc:	00c00704 	movi	r3,28
10007fe0:	1885c83a 	sub	r2,r3,r2
10007fe4:	d8c00817 	ldw	r3,32(sp)
10007fe8:	a0a9883a 	add	r20,r20,r2
10007fec:	b0ad883a 	add	r22,r22,r2
10007ff0:	1887883a 	add	r3,r3,r2
10007ff4:	d8c00815 	stw	r3,32(sp)
10007ff8:	d9800817 	ldw	r6,32(sp)
10007ffc:	0180040e 	bge	zero,r6,10008010 <_dtoa_r+0xb18>
10008000:	800b883a 	mov	r5,r16
10008004:	e009883a 	mov	r4,fp
10008008:	000b3ec0 	call	1000b3ec <__lshift>
1000800c:	1021883a 	mov	r16,r2
10008010:	0580050e 	bge	zero,r22,10008028 <_dtoa_r+0xb30>
10008014:	a80b883a 	mov	r5,r21
10008018:	b00d883a 	mov	r6,r22
1000801c:	e009883a 	mov	r4,fp
10008020:	000b3ec0 	call	1000b3ec <__lshift>
10008024:	102b883a 	mov	r21,r2
10008028:	d9c00e17 	ldw	r7,56(sp)
1000802c:	3801211e 	bne	r7,zero,100084b4 <_dtoa_r+0xfbc>
10008030:	d9800617 	ldw	r6,24(sp)
10008034:	0181380e 	bge	zero,r6,10008518 <_dtoa_r+0x1020>
10008038:	d8c00b17 	ldw	r3,44(sp)
1000803c:	1800ab1e 	bne	r3,zero,100082ec <_dtoa_r+0xdf4>
10008040:	dc800717 	ldw	r18,28(sp)
10008044:	dcc00617 	ldw	r19,24(sp)
10008048:	9029883a 	mov	r20,r18
1000804c:	00000206 	br	10008058 <_dtoa_r+0xb60>
10008050:	000ac800 	call	1000ac80 <__multadd>
10008054:	1021883a 	mov	r16,r2
10008058:	a80b883a 	mov	r5,r21
1000805c:	8009883a 	mov	r4,r16
10008060:	00072d00 	call	100072d0 <quorem>
10008064:	10800c04 	addi	r2,r2,48
10008068:	90800005 	stb	r2,0(r18)
1000806c:	94800044 	addi	r18,r18,1
10008070:	9507c83a 	sub	r3,r18,r20
10008074:	000f883a 	mov	r7,zero
10008078:	01800284 	movi	r6,10
1000807c:	800b883a 	mov	r5,r16
10008080:	e009883a 	mov	r4,fp
10008084:	1cfff216 	blt	r3,r19,10008050 <__alt_data_end+0xf8008050>
10008088:	1011883a 	mov	r8,r2
1000808c:	d8800617 	ldw	r2,24(sp)
10008090:	0082370e 	bge	zero,r2,10008970 <_dtoa_r+0x1478>
10008094:	d9000717 	ldw	r4,28(sp)
10008098:	0025883a 	mov	r18,zero
1000809c:	20af883a 	add	r23,r4,r2
100080a0:	01800044 	movi	r6,1
100080a4:	800b883a 	mov	r5,r16
100080a8:	e009883a 	mov	r4,fp
100080ac:	da001715 	stw	r8,92(sp)
100080b0:	000b3ec0 	call	1000b3ec <__lshift>
100080b4:	a80b883a 	mov	r5,r21
100080b8:	1009883a 	mov	r4,r2
100080bc:	d8800915 	stw	r2,36(sp)
100080c0:	000b5340 	call	1000b534 <__mcmp>
100080c4:	da001717 	ldw	r8,92(sp)
100080c8:	0081800e 	bge	zero,r2,100086cc <_dtoa_r+0x11d4>
100080cc:	b93fffc3 	ldbu	r4,-1(r23)
100080d0:	b8bfffc4 	addi	r2,r23,-1
100080d4:	1007883a 	mov	r3,r2
100080d8:	01800e44 	movi	r6,57
100080dc:	d9c00717 	ldw	r7,28(sp)
100080e0:	00000506 	br	100080f8 <_dtoa_r+0xc00>
100080e4:	18ffffc4 	addi	r3,r3,-1
100080e8:	11c12326 	beq	r2,r7,10008578 <_dtoa_r+0x1080>
100080ec:	19000003 	ldbu	r4,0(r3)
100080f0:	102f883a 	mov	r23,r2
100080f4:	10bfffc4 	addi	r2,r2,-1
100080f8:	21403fcc 	andi	r5,r4,255
100080fc:	2940201c 	xori	r5,r5,128
10008100:	297fe004 	addi	r5,r5,-128
10008104:	29bff726 	beq	r5,r6,100080e4 <__alt_data_end+0xf80080e4>
10008108:	21000044 	addi	r4,r4,1
1000810c:	11000005 	stb	r4,0(r2)
10008110:	a80b883a 	mov	r5,r21
10008114:	e009883a 	mov	r4,fp
10008118:	000ac580 	call	1000ac58 <_Bfree>
1000811c:	883ea026 	beq	r17,zero,10007ba0 <__alt_data_end+0xf8007ba0>
10008120:	90000426 	beq	r18,zero,10008134 <_dtoa_r+0xc3c>
10008124:	94400326 	beq	r18,r17,10008134 <_dtoa_r+0xc3c>
10008128:	900b883a 	mov	r5,r18
1000812c:	e009883a 	mov	r4,fp
10008130:	000ac580 	call	1000ac58 <_Bfree>
10008134:	880b883a 	mov	r5,r17
10008138:	e009883a 	mov	r4,fp
1000813c:	000ac580 	call	1000ac58 <_Bfree>
10008140:	003e9706 	br	10007ba0 <__alt_data_end+0xf8007ba0>
10008144:	01800044 	movi	r6,1
10008148:	d9800e15 	stw	r6,56(sp)
1000814c:	003d9606 	br	100077a8 <__alt_data_end+0xf80077a8>
10008150:	d8800817 	ldw	r2,32(sp)
10008154:	d8c00517 	ldw	r3,20(sp)
10008158:	d8000d15 	stw	zero,52(sp)
1000815c:	10c5c83a 	sub	r2,r2,r3
10008160:	00c9c83a 	sub	r4,zero,r3
10008164:	d8800815 	stw	r2,32(sp)
10008168:	d9000a15 	stw	r4,40(sp)
1000816c:	003d9706 	br	100077cc <__alt_data_end+0xf80077cc>
10008170:	05adc83a 	sub	r22,zero,r22
10008174:	dd800815 	stw	r22,32(sp)
10008178:	002d883a 	mov	r22,zero
1000817c:	003d8e06 	br	100077b8 <__alt_data_end+0xf80077b8>
10008180:	d9000517 	ldw	r4,20(sp)
10008184:	00119200 	call	10011920 <__floatsidf>
10008188:	100d883a 	mov	r6,r2
1000818c:	180f883a 	mov	r7,r3
10008190:	a009883a 	mov	r4,r20
10008194:	880b883a 	mov	r5,r17
10008198:	00104e00 	call	100104e0 <__eqdf2>
1000819c:	103d7126 	beq	r2,zero,10007764 <__alt_data_end+0xf8007764>
100081a0:	d9c00517 	ldw	r7,20(sp)
100081a4:	39ffffc4 	addi	r7,r7,-1
100081a8:	d9c00515 	stw	r7,20(sp)
100081ac:	003d6d06 	br	10007764 <__alt_data_end+0xf8007764>
100081b0:	dd400a17 	ldw	r21,40(sp)
100081b4:	dd000817 	ldw	r20,32(sp)
100081b8:	0023883a 	mov	r17,zero
100081bc:	003f4806 	br	10007ee0 <__alt_data_end+0xf8007ee0>
100081c0:	10e3c83a 	sub	r17,r2,r3
100081c4:	9448983a 	sll	r4,r18,r17
100081c8:	003d3206 	br	10007694 <__alt_data_end+0xf8007694>
100081cc:	d8000e15 	stw	zero,56(sp)
100081d0:	003d7506 	br	100077a8 <__alt_data_end+0xf80077a8>
100081d4:	b005883a 	mov	r2,r22
100081d8:	003f4506 	br	10007ef0 <__alt_data_end+0xf8007ef0>
100081dc:	dc000915 	stw	r16,36(sp)
100081e0:	d9800a17 	ldw	r6,40(sp)
100081e4:	d9400917 	ldw	r5,36(sp)
100081e8:	e009883a 	mov	r4,fp
100081ec:	000b2ac0 	call	1000b2ac <__pow5mult>
100081f0:	1021883a 	mov	r16,r2
100081f4:	003f5a06 	br	10007f60 <__alt_data_end+0xf8007f60>
100081f8:	01c00044 	movi	r7,1
100081fc:	d9c00b15 	stw	r7,44(sp)
10008200:	d8802217 	ldw	r2,136(sp)
10008204:	0081280e 	bge	zero,r2,100086a8 <_dtoa_r+0x11b0>
10008208:	100d883a 	mov	r6,r2
1000820c:	1021883a 	mov	r16,r2
10008210:	d8800c15 	stw	r2,48(sp)
10008214:	d8800615 	stw	r2,24(sp)
10008218:	003d8806 	br	1000783c <__alt_data_end+0xf800783c>
1000821c:	d8800617 	ldw	r2,24(sp)
10008220:	00be9b16 	blt	zero,r2,10007c90 <__alt_data_end+0xf8007c90>
10008224:	10010f1e 	bne	r2,zero,10008664 <_dtoa_r+0x116c>
10008228:	880b883a 	mov	r5,r17
1000822c:	000d883a 	mov	r6,zero
10008230:	01d00534 	movhi	r7,16404
10008234:	8009883a 	mov	r4,r16
10008238:	00107380 	call	10010738 <__muldf3>
1000823c:	900d883a 	mov	r6,r18
10008240:	980f883a 	mov	r7,r19
10008244:	1009883a 	mov	r4,r2
10008248:	180b883a 	mov	r5,r3
1000824c:	00105680 	call	10010568 <__gedf2>
10008250:	002b883a 	mov	r21,zero
10008254:	0023883a 	mov	r17,zero
10008258:	1000bf16 	blt	r2,zero,10008558 <_dtoa_r+0x1060>
1000825c:	d9802217 	ldw	r6,136(sp)
10008260:	ddc00717 	ldw	r23,28(sp)
10008264:	018c303a 	nor	r6,zero,r6
10008268:	d9800515 	stw	r6,20(sp)
1000826c:	a80b883a 	mov	r5,r21
10008270:	e009883a 	mov	r4,fp
10008274:	000ac580 	call	1000ac58 <_Bfree>
10008278:	883e4926 	beq	r17,zero,10007ba0 <__alt_data_end+0xf8007ba0>
1000827c:	003fad06 	br	10008134 <__alt_data_end+0xf8008134>
10008280:	d9c01117 	ldw	r7,68(sp)
10008284:	3801bc26 	beq	r7,zero,10008978 <_dtoa_r+0x1480>
10008288:	10810cc4 	addi	r2,r2,1075
1000828c:	dd400a17 	ldw	r21,40(sp)
10008290:	dd000817 	ldw	r20,32(sp)
10008294:	003f0a06 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008298:	00800704 	movi	r2,28
1000829c:	d9000817 	ldw	r4,32(sp)
100082a0:	a0a9883a 	add	r20,r20,r2
100082a4:	b0ad883a 	add	r22,r22,r2
100082a8:	2089883a 	add	r4,r4,r2
100082ac:	d9000815 	stw	r4,32(sp)
100082b0:	003f5106 	br	10007ff8 <__alt_data_end+0xf8007ff8>
100082b4:	d8c00317 	ldw	r3,12(sp)
100082b8:	b8c1fc0e 	bge	r23,r3,10008aac <_dtoa_r+0x15b4>
100082bc:	0027883a 	mov	r19,zero
100082c0:	b805883a 	mov	r2,r23
100082c4:	003f3e06 	br	10007fc0 <__alt_data_end+0xf8007fc0>
100082c8:	880b883a 	mov	r5,r17
100082cc:	e009883a 	mov	r4,fp
100082d0:	000f883a 	mov	r7,zero
100082d4:	01800284 	movi	r6,10
100082d8:	000ac800 	call	1000ac80 <__multadd>
100082dc:	d9000c17 	ldw	r4,48(sp)
100082e0:	1023883a 	mov	r17,r2
100082e4:	0102040e 	bge	zero,r4,10008af8 <_dtoa_r+0x1600>
100082e8:	d9000615 	stw	r4,24(sp)
100082ec:	0500050e 	bge	zero,r20,10008304 <_dtoa_r+0xe0c>
100082f0:	880b883a 	mov	r5,r17
100082f4:	a00d883a 	mov	r6,r20
100082f8:	e009883a 	mov	r4,fp
100082fc:	000b3ec0 	call	1000b3ec <__lshift>
10008300:	1023883a 	mov	r17,r2
10008304:	9801241e 	bne	r19,zero,10008798 <_dtoa_r+0x12a0>
10008308:	8829883a 	mov	r20,r17
1000830c:	d9000617 	ldw	r4,24(sp)
10008310:	dcc00717 	ldw	r19,28(sp)
10008314:	9480004c 	andi	r18,r18,1
10008318:	20bfffc4 	addi	r2,r4,-1
1000831c:	9885883a 	add	r2,r19,r2
10008320:	d8800415 	stw	r2,16(sp)
10008324:	dc800615 	stw	r18,24(sp)
10008328:	a80b883a 	mov	r5,r21
1000832c:	8009883a 	mov	r4,r16
10008330:	00072d00 	call	100072d0 <quorem>
10008334:	880b883a 	mov	r5,r17
10008338:	8009883a 	mov	r4,r16
1000833c:	102f883a 	mov	r23,r2
10008340:	000b5340 	call	1000b534 <__mcmp>
10008344:	a80b883a 	mov	r5,r21
10008348:	a00d883a 	mov	r6,r20
1000834c:	e009883a 	mov	r4,fp
10008350:	102d883a 	mov	r22,r2
10008354:	000b5940 	call	1000b594 <__mdiff>
10008358:	1007883a 	mov	r3,r2
1000835c:	10800317 	ldw	r2,12(r2)
10008360:	bc800c04 	addi	r18,r23,48
10008364:	180b883a 	mov	r5,r3
10008368:	10004e1e 	bne	r2,zero,100084a4 <_dtoa_r+0xfac>
1000836c:	8009883a 	mov	r4,r16
10008370:	d8c01615 	stw	r3,88(sp)
10008374:	000b5340 	call	1000b534 <__mcmp>
10008378:	d8c01617 	ldw	r3,88(sp)
1000837c:	e009883a 	mov	r4,fp
10008380:	d8801615 	stw	r2,88(sp)
10008384:	180b883a 	mov	r5,r3
10008388:	000ac580 	call	1000ac58 <_Bfree>
1000838c:	d8801617 	ldw	r2,88(sp)
10008390:	1000041e 	bne	r2,zero,100083a4 <_dtoa_r+0xeac>
10008394:	d9800317 	ldw	r6,12(sp)
10008398:	3000021e 	bne	r6,zero,100083a4 <_dtoa_r+0xeac>
1000839c:	d8c00617 	ldw	r3,24(sp)
100083a0:	18003726 	beq	r3,zero,10008480 <_dtoa_r+0xf88>
100083a4:	b0002016 	blt	r22,zero,10008428 <_dtoa_r+0xf30>
100083a8:	b000041e 	bne	r22,zero,100083bc <_dtoa_r+0xec4>
100083ac:	d9000317 	ldw	r4,12(sp)
100083b0:	2000021e 	bne	r4,zero,100083bc <_dtoa_r+0xec4>
100083b4:	d8c00617 	ldw	r3,24(sp)
100083b8:	18001b26 	beq	r3,zero,10008428 <_dtoa_r+0xf30>
100083bc:	00810716 	blt	zero,r2,100087dc <_dtoa_r+0x12e4>
100083c0:	d8c00417 	ldw	r3,16(sp)
100083c4:	9d800044 	addi	r22,r19,1
100083c8:	9c800005 	stb	r18,0(r19)
100083cc:	b02f883a 	mov	r23,r22
100083d0:	98c10626 	beq	r19,r3,100087ec <_dtoa_r+0x12f4>
100083d4:	800b883a 	mov	r5,r16
100083d8:	000f883a 	mov	r7,zero
100083dc:	01800284 	movi	r6,10
100083e0:	e009883a 	mov	r4,fp
100083e4:	000ac800 	call	1000ac80 <__multadd>
100083e8:	1021883a 	mov	r16,r2
100083ec:	000f883a 	mov	r7,zero
100083f0:	01800284 	movi	r6,10
100083f4:	880b883a 	mov	r5,r17
100083f8:	e009883a 	mov	r4,fp
100083fc:	8d002526 	beq	r17,r20,10008494 <_dtoa_r+0xf9c>
10008400:	000ac800 	call	1000ac80 <__multadd>
10008404:	a00b883a 	mov	r5,r20
10008408:	000f883a 	mov	r7,zero
1000840c:	01800284 	movi	r6,10
10008410:	e009883a 	mov	r4,fp
10008414:	1023883a 	mov	r17,r2
10008418:	000ac800 	call	1000ac80 <__multadd>
1000841c:	1029883a 	mov	r20,r2
10008420:	b027883a 	mov	r19,r22
10008424:	003fc006 	br	10008328 <__alt_data_end+0xf8008328>
10008428:	9011883a 	mov	r8,r18
1000842c:	00800e0e 	bge	zero,r2,10008468 <_dtoa_r+0xf70>
10008430:	800b883a 	mov	r5,r16
10008434:	01800044 	movi	r6,1
10008438:	e009883a 	mov	r4,fp
1000843c:	da001715 	stw	r8,92(sp)
10008440:	000b3ec0 	call	1000b3ec <__lshift>
10008444:	a80b883a 	mov	r5,r21
10008448:	1009883a 	mov	r4,r2
1000844c:	1021883a 	mov	r16,r2
10008450:	000b5340 	call	1000b534 <__mcmp>
10008454:	da001717 	ldw	r8,92(sp)
10008458:	0081960e 	bge	zero,r2,10008ab4 <_dtoa_r+0x15bc>
1000845c:	00800e44 	movi	r2,57
10008460:	40817026 	beq	r8,r2,10008a24 <_dtoa_r+0x152c>
10008464:	ba000c44 	addi	r8,r23,49
10008468:	8825883a 	mov	r18,r17
1000846c:	9dc00044 	addi	r23,r19,1
10008470:	9a000005 	stb	r8,0(r19)
10008474:	a023883a 	mov	r17,r20
10008478:	dc000915 	stw	r16,36(sp)
1000847c:	003f2406 	br	10008110 <__alt_data_end+0xf8008110>
10008480:	00800e44 	movi	r2,57
10008484:	9011883a 	mov	r8,r18
10008488:	90816626 	beq	r18,r2,10008a24 <_dtoa_r+0x152c>
1000848c:	05bff516 	blt	zero,r22,10008464 <__alt_data_end+0xf8008464>
10008490:	003ff506 	br	10008468 <__alt_data_end+0xf8008468>
10008494:	000ac800 	call	1000ac80 <__multadd>
10008498:	1023883a 	mov	r17,r2
1000849c:	1029883a 	mov	r20,r2
100084a0:	003fdf06 	br	10008420 <__alt_data_end+0xf8008420>
100084a4:	e009883a 	mov	r4,fp
100084a8:	000ac580 	call	1000ac58 <_Bfree>
100084ac:	00800044 	movi	r2,1
100084b0:	003fbc06 	br	100083a4 <__alt_data_end+0xf80083a4>
100084b4:	a80b883a 	mov	r5,r21
100084b8:	8009883a 	mov	r4,r16
100084bc:	000b5340 	call	1000b534 <__mcmp>
100084c0:	103edb0e 	bge	r2,zero,10008030 <__alt_data_end+0xf8008030>
100084c4:	800b883a 	mov	r5,r16
100084c8:	000f883a 	mov	r7,zero
100084cc:	01800284 	movi	r6,10
100084d0:	e009883a 	mov	r4,fp
100084d4:	000ac800 	call	1000ac80 <__multadd>
100084d8:	1021883a 	mov	r16,r2
100084dc:	d8800517 	ldw	r2,20(sp)
100084e0:	d8c00b17 	ldw	r3,44(sp)
100084e4:	10bfffc4 	addi	r2,r2,-1
100084e8:	d8800515 	stw	r2,20(sp)
100084ec:	183f761e 	bne	r3,zero,100082c8 <__alt_data_end+0xf80082c8>
100084f0:	d9000c17 	ldw	r4,48(sp)
100084f4:	0101730e 	bge	zero,r4,10008ac4 <_dtoa_r+0x15cc>
100084f8:	d9000615 	stw	r4,24(sp)
100084fc:	003ed006 	br	10008040 <__alt_data_end+0xf8008040>
10008500:	00800084 	movi	r2,2
10008504:	3081861e 	bne	r6,r2,10008b20 <_dtoa_r+0x1628>
10008508:	d8000b15 	stw	zero,44(sp)
1000850c:	003f3c06 	br	10008200 <__alt_data_end+0xf8008200>
10008510:	dc000917 	ldw	r16,36(sp)
10008514:	003e9206 	br	10007f60 <__alt_data_end+0xf8007f60>
10008518:	d9c00317 	ldw	r7,12(sp)
1000851c:	00800084 	movi	r2,2
10008520:	11fec50e 	bge	r2,r7,10008038 <__alt_data_end+0xf8008038>
10008524:	d9000617 	ldw	r4,24(sp)
10008528:	20013c1e 	bne	r4,zero,10008a1c <_dtoa_r+0x1524>
1000852c:	a80b883a 	mov	r5,r21
10008530:	000f883a 	mov	r7,zero
10008534:	01800144 	movi	r6,5
10008538:	e009883a 	mov	r4,fp
1000853c:	000ac800 	call	1000ac80 <__multadd>
10008540:	100b883a 	mov	r5,r2
10008544:	8009883a 	mov	r4,r16
10008548:	102b883a 	mov	r21,r2
1000854c:	000b5340 	call	1000b534 <__mcmp>
10008550:	dc000915 	stw	r16,36(sp)
10008554:	00bf410e 	bge	zero,r2,1000825c <__alt_data_end+0xf800825c>
10008558:	d9c00717 	ldw	r7,28(sp)
1000855c:	00800c44 	movi	r2,49
10008560:	38800005 	stb	r2,0(r7)
10008564:	d8800517 	ldw	r2,20(sp)
10008568:	3dc00044 	addi	r23,r7,1
1000856c:	10800044 	addi	r2,r2,1
10008570:	d8800515 	stw	r2,20(sp)
10008574:	003f3d06 	br	1000826c <__alt_data_end+0xf800826c>
10008578:	d9800517 	ldw	r6,20(sp)
1000857c:	d9c00717 	ldw	r7,28(sp)
10008580:	00800c44 	movi	r2,49
10008584:	31800044 	addi	r6,r6,1
10008588:	d9800515 	stw	r6,20(sp)
1000858c:	38800005 	stb	r2,0(r7)
10008590:	003edf06 	br	10008110 <__alt_data_end+0xf8008110>
10008594:	d8000b15 	stw	zero,44(sp)
10008598:	003c9f06 	br	10007818 <__alt_data_end+0xf8007818>
1000859c:	903e7e1e 	bne	r18,zero,10007f98 <__alt_data_end+0xf8007f98>
100085a0:	00800434 	movhi	r2,16
100085a4:	10bfffc4 	addi	r2,r2,-1
100085a8:	9884703a 	and	r2,r19,r2
100085ac:	1000ea1e 	bne	r2,zero,10008958 <_dtoa_r+0x1460>
100085b0:	9cdffc2c 	andhi	r19,r19,32752
100085b4:	9800e826 	beq	r19,zero,10008958 <_dtoa_r+0x1460>
100085b8:	d9c00817 	ldw	r7,32(sp)
100085bc:	b5800044 	addi	r22,r22,1
100085c0:	04c00044 	movi	r19,1
100085c4:	39c00044 	addi	r7,r7,1
100085c8:	d9c00815 	stw	r7,32(sp)
100085cc:	d8800d17 	ldw	r2,52(sp)
100085d0:	103e721e 	bne	r2,zero,10007f9c <__alt_data_end+0xf8007f9c>
100085d4:	00800044 	movi	r2,1
100085d8:	003e7906 	br	10007fc0 <__alt_data_end+0xf8007fc0>
100085dc:	8009883a 	mov	r4,r16
100085e0:	00119200 	call	10011920 <__floatsidf>
100085e4:	d9800f17 	ldw	r6,60(sp)
100085e8:	d9c01017 	ldw	r7,64(sp)
100085ec:	1009883a 	mov	r4,r2
100085f0:	180b883a 	mov	r5,r3
100085f4:	00107380 	call	10010738 <__muldf3>
100085f8:	000d883a 	mov	r6,zero
100085fc:	01d00734 	movhi	r7,16412
10008600:	1009883a 	mov	r4,r2
10008604:	180b883a 	mov	r5,r3
10008608:	000f2640 	call	1000f264 <__adddf3>
1000860c:	047f3034 	movhi	r17,64704
10008610:	1021883a 	mov	r16,r2
10008614:	1c63883a 	add	r17,r3,r17
10008618:	d9000f17 	ldw	r4,60(sp)
1000861c:	d9401017 	ldw	r5,64(sp)
10008620:	000d883a 	mov	r6,zero
10008624:	01d00534 	movhi	r7,16404
10008628:	0010fa40 	call	10010fa4 <__subdf3>
1000862c:	800d883a 	mov	r6,r16
10008630:	880f883a 	mov	r7,r17
10008634:	1009883a 	mov	r4,r2
10008638:	180b883a 	mov	r5,r3
1000863c:	102b883a 	mov	r21,r2
10008640:	1829883a 	mov	r20,r3
10008644:	00105680 	call	10010568 <__gedf2>
10008648:	00806c16 	blt	zero,r2,100087fc <_dtoa_r+0x1304>
1000864c:	89e0003c 	xorhi	r7,r17,32768
10008650:	800d883a 	mov	r6,r16
10008654:	a809883a 	mov	r4,r21
10008658:	a00b883a 	mov	r5,r20
1000865c:	00106440 	call	10010644 <__ledf2>
10008660:	103d7e0e 	bge	r2,zero,10007c5c <__alt_data_end+0xf8007c5c>
10008664:	002b883a 	mov	r21,zero
10008668:	0023883a 	mov	r17,zero
1000866c:	003efb06 	br	1000825c <__alt_data_end+0xf800825c>
10008670:	d8800717 	ldw	r2,28(sp)
10008674:	003bd006 	br	100075b8 <__alt_data_end+0xf80075b8>
10008678:	d9000a17 	ldw	r4,40(sp)
1000867c:	d9800d17 	ldw	r6,52(sp)
10008680:	dd400a15 	stw	r21,40(sp)
10008684:	a905c83a 	sub	r2,r21,r4
10008688:	308d883a 	add	r6,r6,r2
1000868c:	d9800d15 	stw	r6,52(sp)
10008690:	002b883a 	mov	r21,zero
10008694:	003e0606 	br	10007eb0 <__alt_data_end+0xf8007eb0>
10008698:	9023883a 	mov	r17,r18
1000869c:	9829883a 	mov	r20,r19
100086a0:	04000084 	movi	r16,2
100086a4:	003c9206 	br	100078f0 <__alt_data_end+0xf80078f0>
100086a8:	04000044 	movi	r16,1
100086ac:	dc000c15 	stw	r16,48(sp)
100086b0:	dc000615 	stw	r16,24(sp)
100086b4:	dc002215 	stw	r16,136(sp)
100086b8:	e0001115 	stw	zero,68(fp)
100086bc:	000b883a 	mov	r5,zero
100086c0:	003c6906 	br	10007868 <__alt_data_end+0xf8007868>
100086c4:	3021883a 	mov	r16,r6
100086c8:	003ffb06 	br	100086b8 <__alt_data_end+0xf80086b8>
100086cc:	1000021e 	bne	r2,zero,100086d8 <_dtoa_r+0x11e0>
100086d0:	4200004c 	andi	r8,r8,1
100086d4:	403e7d1e 	bne	r8,zero,100080cc <__alt_data_end+0xf80080cc>
100086d8:	01000c04 	movi	r4,48
100086dc:	00000106 	br	100086e4 <_dtoa_r+0x11ec>
100086e0:	102f883a 	mov	r23,r2
100086e4:	b8bfffc4 	addi	r2,r23,-1
100086e8:	10c00007 	ldb	r3,0(r2)
100086ec:	193ffc26 	beq	r3,r4,100086e0 <__alt_data_end+0xf80086e0>
100086f0:	003e8706 	br	10008110 <__alt_data_end+0xf8008110>
100086f4:	d8800517 	ldw	r2,20(sp)
100086f8:	00a3c83a 	sub	r17,zero,r2
100086fc:	8800a426 	beq	r17,zero,10008990 <_dtoa_r+0x1498>
10008700:	888003cc 	andi	r2,r17,15
10008704:	100490fa 	slli	r2,r2,3
10008708:	00c40074 	movhi	r3,4097
1000870c:	18d35c04 	addi	r3,r3,19824
10008710:	1885883a 	add	r2,r3,r2
10008714:	11800017 	ldw	r6,0(r2)
10008718:	11c00117 	ldw	r7,4(r2)
1000871c:	9009883a 	mov	r4,r18
10008720:	980b883a 	mov	r5,r19
10008724:	8823d13a 	srai	r17,r17,4
10008728:	00107380 	call	10010738 <__muldf3>
1000872c:	d8800f15 	stw	r2,60(sp)
10008730:	d8c01015 	stw	r3,64(sp)
10008734:	8800e826 	beq	r17,zero,10008ad8 <_dtoa_r+0x15e0>
10008738:	05040074 	movhi	r20,4097
1000873c:	a5135204 	addi	r20,r20,19784
10008740:	04000084 	movi	r16,2
10008744:	8980004c 	andi	r6,r17,1
10008748:	1009883a 	mov	r4,r2
1000874c:	8823d07a 	srai	r17,r17,1
10008750:	180b883a 	mov	r5,r3
10008754:	30000426 	beq	r6,zero,10008768 <_dtoa_r+0x1270>
10008758:	a1800017 	ldw	r6,0(r20)
1000875c:	a1c00117 	ldw	r7,4(r20)
10008760:	84000044 	addi	r16,r16,1
10008764:	00107380 	call	10010738 <__muldf3>
10008768:	a5000204 	addi	r20,r20,8
1000876c:	883ff51e 	bne	r17,zero,10008744 <__alt_data_end+0xf8008744>
10008770:	d8800f15 	stw	r2,60(sp)
10008774:	d8c01015 	stw	r3,64(sp)
10008778:	003c7606 	br	10007954 <__alt_data_end+0xf8007954>
1000877c:	00c00c04 	movi	r3,48
10008780:	10c00005 	stb	r3,0(r2)
10008784:	d8c00517 	ldw	r3,20(sp)
10008788:	bd3fffc3 	ldbu	r20,-1(r23)
1000878c:	18c00044 	addi	r3,r3,1
10008790:	d8c00515 	stw	r3,20(sp)
10008794:	003db906 	br	10007e7c <__alt_data_end+0xf8007e7c>
10008798:	89400117 	ldw	r5,4(r17)
1000879c:	e009883a 	mov	r4,fp
100087a0:	000abb00 	call	1000abb0 <_Balloc>
100087a4:	89800417 	ldw	r6,16(r17)
100087a8:	89400304 	addi	r5,r17,12
100087ac:	11000304 	addi	r4,r2,12
100087b0:	31800084 	addi	r6,r6,2
100087b4:	318d883a 	add	r6,r6,r6
100087b8:	318d883a 	add	r6,r6,r6
100087bc:	1027883a 	mov	r19,r2
100087c0:	000a7e40 	call	1000a7e4 <memcpy>
100087c4:	01800044 	movi	r6,1
100087c8:	980b883a 	mov	r5,r19
100087cc:	e009883a 	mov	r4,fp
100087d0:	000b3ec0 	call	1000b3ec <__lshift>
100087d4:	1029883a 	mov	r20,r2
100087d8:	003ecc06 	br	1000830c <__alt_data_end+0xf800830c>
100087dc:	00800e44 	movi	r2,57
100087e0:	90809026 	beq	r18,r2,10008a24 <_dtoa_r+0x152c>
100087e4:	92000044 	addi	r8,r18,1
100087e8:	003f1f06 	br	10008468 <__alt_data_end+0xf8008468>
100087ec:	9011883a 	mov	r8,r18
100087f0:	8825883a 	mov	r18,r17
100087f4:	a023883a 	mov	r17,r20
100087f8:	003e2906 	br	100080a0 <__alt_data_end+0xf80080a0>
100087fc:	002b883a 	mov	r21,zero
10008800:	0023883a 	mov	r17,zero
10008804:	003f5406 	br	10008558 <__alt_data_end+0xf8008558>
10008808:	61bfffc4 	addi	r6,r12,-1
1000880c:	300490fa 	slli	r2,r6,3
10008810:	00c40074 	movhi	r3,4097
10008814:	18d35c04 	addi	r3,r3,19824
10008818:	1885883a 	add	r2,r3,r2
1000881c:	11000017 	ldw	r4,0(r2)
10008820:	11400117 	ldw	r5,4(r2)
10008824:	d8800717 	ldw	r2,28(sp)
10008828:	880f883a 	mov	r7,r17
1000882c:	d9801215 	stw	r6,72(sp)
10008830:	800d883a 	mov	r6,r16
10008834:	db001615 	stw	r12,88(sp)
10008838:	15c00044 	addi	r23,r2,1
1000883c:	00107380 	call	10010738 <__muldf3>
10008840:	d9401017 	ldw	r5,64(sp)
10008844:	d9000f17 	ldw	r4,60(sp)
10008848:	d8c01515 	stw	r3,84(sp)
1000884c:	d8801415 	stw	r2,80(sp)
10008850:	00118a00 	call	100118a0 <__fixdfsi>
10008854:	1009883a 	mov	r4,r2
10008858:	1021883a 	mov	r16,r2
1000885c:	00119200 	call	10011920 <__floatsidf>
10008860:	d9000f17 	ldw	r4,60(sp)
10008864:	d9401017 	ldw	r5,64(sp)
10008868:	100d883a 	mov	r6,r2
1000886c:	180f883a 	mov	r7,r3
10008870:	0010fa40 	call	10010fa4 <__subdf3>
10008874:	1829883a 	mov	r20,r3
10008878:	d8c00717 	ldw	r3,28(sp)
1000887c:	84000c04 	addi	r16,r16,48
10008880:	1023883a 	mov	r17,r2
10008884:	1c000005 	stb	r16,0(r3)
10008888:	db001617 	ldw	r12,88(sp)
1000888c:	00800044 	movi	r2,1
10008890:	60802226 	beq	r12,r2,1000891c <_dtoa_r+0x1424>
10008894:	d9c00717 	ldw	r7,28(sp)
10008898:	8805883a 	mov	r2,r17
1000889c:	b82b883a 	mov	r21,r23
100088a0:	3b19883a 	add	r12,r7,r12
100088a4:	6023883a 	mov	r17,r12
100088a8:	a007883a 	mov	r3,r20
100088ac:	dc800f15 	stw	r18,60(sp)
100088b0:	000d883a 	mov	r6,zero
100088b4:	01d00934 	movhi	r7,16420
100088b8:	1009883a 	mov	r4,r2
100088bc:	180b883a 	mov	r5,r3
100088c0:	00107380 	call	10010738 <__muldf3>
100088c4:	180b883a 	mov	r5,r3
100088c8:	1009883a 	mov	r4,r2
100088cc:	1829883a 	mov	r20,r3
100088d0:	1025883a 	mov	r18,r2
100088d4:	00118a00 	call	100118a0 <__fixdfsi>
100088d8:	1009883a 	mov	r4,r2
100088dc:	1021883a 	mov	r16,r2
100088e0:	00119200 	call	10011920 <__floatsidf>
100088e4:	100d883a 	mov	r6,r2
100088e8:	180f883a 	mov	r7,r3
100088ec:	9009883a 	mov	r4,r18
100088f0:	a00b883a 	mov	r5,r20
100088f4:	84000c04 	addi	r16,r16,48
100088f8:	0010fa40 	call	10010fa4 <__subdf3>
100088fc:	ad400044 	addi	r21,r21,1
10008900:	ac3fffc5 	stb	r16,-1(r21)
10008904:	ac7fea1e 	bne	r21,r17,100088b0 <__alt_data_end+0xf80088b0>
10008908:	1023883a 	mov	r17,r2
1000890c:	d8801217 	ldw	r2,72(sp)
10008910:	dc800f17 	ldw	r18,60(sp)
10008914:	1829883a 	mov	r20,r3
10008918:	b8af883a 	add	r23,r23,r2
1000891c:	d9001417 	ldw	r4,80(sp)
10008920:	d9401517 	ldw	r5,84(sp)
10008924:	000d883a 	mov	r6,zero
10008928:	01cff834 	movhi	r7,16352
1000892c:	000f2640 	call	1000f264 <__adddf3>
10008930:	880d883a 	mov	r6,r17
10008934:	a00f883a 	mov	r7,r20
10008938:	1009883a 	mov	r4,r2
1000893c:	180b883a 	mov	r5,r3
10008940:	00106440 	call	10010644 <__ledf2>
10008944:	10003e0e 	bge	r2,zero,10008a40 <_dtoa_r+0x1548>
10008948:	d9001317 	ldw	r4,76(sp)
1000894c:	bd3fffc3 	ldbu	r20,-1(r23)
10008950:	d9000515 	stw	r4,20(sp)
10008954:	003d3b06 	br	10007e44 <__alt_data_end+0xf8007e44>
10008958:	0027883a 	mov	r19,zero
1000895c:	003f1b06 	br	100085cc <__alt_data_end+0xf80085cc>
10008960:	d8800817 	ldw	r2,32(sp)
10008964:	11e9c83a 	sub	r20,r2,r7
10008968:	0005883a 	mov	r2,zero
1000896c:	003d5406 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008970:	00800044 	movi	r2,1
10008974:	003dc706 	br	10008094 <__alt_data_end+0xf8008094>
10008978:	d8c00217 	ldw	r3,8(sp)
1000897c:	00800d84 	movi	r2,54
10008980:	dd400a17 	ldw	r21,40(sp)
10008984:	10c5c83a 	sub	r2,r2,r3
10008988:	dd000817 	ldw	r20,32(sp)
1000898c:	003d4c06 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008990:	dc800f15 	stw	r18,60(sp)
10008994:	dcc01015 	stw	r19,64(sp)
10008998:	04000084 	movi	r16,2
1000899c:	003bed06 	br	10007954 <__alt_data_end+0xf8007954>
100089a0:	d9000617 	ldw	r4,24(sp)
100089a4:	203f0d26 	beq	r4,zero,100085dc <__alt_data_end+0xf80085dc>
100089a8:	d9800c17 	ldw	r6,48(sp)
100089ac:	01bcab0e 	bge	zero,r6,10007c5c <__alt_data_end+0xf8007c5c>
100089b0:	d9401017 	ldw	r5,64(sp)
100089b4:	d9000f17 	ldw	r4,60(sp)
100089b8:	000d883a 	mov	r6,zero
100089bc:	01d00934 	movhi	r7,16420
100089c0:	00107380 	call	10010738 <__muldf3>
100089c4:	81000044 	addi	r4,r16,1
100089c8:	d8800f15 	stw	r2,60(sp)
100089cc:	d8c01015 	stw	r3,64(sp)
100089d0:	00119200 	call	10011920 <__floatsidf>
100089d4:	d9800f17 	ldw	r6,60(sp)
100089d8:	d9c01017 	ldw	r7,64(sp)
100089dc:	1009883a 	mov	r4,r2
100089e0:	180b883a 	mov	r5,r3
100089e4:	00107380 	call	10010738 <__muldf3>
100089e8:	01d00734 	movhi	r7,16412
100089ec:	000d883a 	mov	r6,zero
100089f0:	1009883a 	mov	r4,r2
100089f4:	180b883a 	mov	r5,r3
100089f8:	000f2640 	call	1000f264 <__adddf3>
100089fc:	d9c00517 	ldw	r7,20(sp)
10008a00:	047f3034 	movhi	r17,64704
10008a04:	1021883a 	mov	r16,r2
10008a08:	39ffffc4 	addi	r7,r7,-1
10008a0c:	d9c01315 	stw	r7,76(sp)
10008a10:	1c63883a 	add	r17,r3,r17
10008a14:	db000c17 	ldw	r12,48(sp)
10008a18:	003bea06 	br	100079c4 <__alt_data_end+0xf80079c4>
10008a1c:	dc000915 	stw	r16,36(sp)
10008a20:	003e0e06 	br	1000825c <__alt_data_end+0xf800825c>
10008a24:	01000e44 	movi	r4,57
10008a28:	8825883a 	mov	r18,r17
10008a2c:	9dc00044 	addi	r23,r19,1
10008a30:	99000005 	stb	r4,0(r19)
10008a34:	a023883a 	mov	r17,r20
10008a38:	dc000915 	stw	r16,36(sp)
10008a3c:	003da406 	br	100080d0 <__alt_data_end+0xf80080d0>
10008a40:	d9801417 	ldw	r6,80(sp)
10008a44:	d9c01517 	ldw	r7,84(sp)
10008a48:	0009883a 	mov	r4,zero
10008a4c:	014ff834 	movhi	r5,16352
10008a50:	0010fa40 	call	10010fa4 <__subdf3>
10008a54:	880d883a 	mov	r6,r17
10008a58:	a00f883a 	mov	r7,r20
10008a5c:	1009883a 	mov	r4,r2
10008a60:	180b883a 	mov	r5,r3
10008a64:	00105680 	call	10010568 <__gedf2>
10008a68:	00bc7c0e 	bge	zero,r2,10007c5c <__alt_data_end+0xf8007c5c>
10008a6c:	01000c04 	movi	r4,48
10008a70:	00000106 	br	10008a78 <_dtoa_r+0x1580>
10008a74:	102f883a 	mov	r23,r2
10008a78:	b8bfffc4 	addi	r2,r23,-1
10008a7c:	10c00007 	ldb	r3,0(r2)
10008a80:	193ffc26 	beq	r3,r4,10008a74 <__alt_data_end+0xf8008a74>
10008a84:	d9801317 	ldw	r6,76(sp)
10008a88:	d9800515 	stw	r6,20(sp)
10008a8c:	003c4406 	br	10007ba0 <__alt_data_end+0xf8007ba0>
10008a90:	d9801317 	ldw	r6,76(sp)
10008a94:	d9800515 	stw	r6,20(sp)
10008a98:	003cea06 	br	10007e44 <__alt_data_end+0xf8007e44>
10008a9c:	dd800f17 	ldw	r22,60(sp)
10008aa0:	dcc01017 	ldw	r19,64(sp)
10008aa4:	dc801217 	ldw	r18,72(sp)
10008aa8:	003c6c06 	br	10007c5c <__alt_data_end+0xf8007c5c>
10008aac:	903e031e 	bne	r18,zero,100082bc <__alt_data_end+0xf80082bc>
10008ab0:	003ebb06 	br	100085a0 <__alt_data_end+0xf80085a0>
10008ab4:	103e6c1e 	bne	r2,zero,10008468 <__alt_data_end+0xf8008468>
10008ab8:	4080004c 	andi	r2,r8,1
10008abc:	103e6a26 	beq	r2,zero,10008468 <__alt_data_end+0xf8008468>
10008ac0:	003e6606 	br	1000845c <__alt_data_end+0xf800845c>
10008ac4:	d8c00317 	ldw	r3,12(sp)
10008ac8:	00800084 	movi	r2,2
10008acc:	10c02916 	blt	r2,r3,10008b74 <_dtoa_r+0x167c>
10008ad0:	d9000c17 	ldw	r4,48(sp)
10008ad4:	003e8806 	br	100084f8 <__alt_data_end+0xf80084f8>
10008ad8:	04000084 	movi	r16,2
10008adc:	003b9d06 	br	10007954 <__alt_data_end+0xf8007954>
10008ae0:	d9001317 	ldw	r4,76(sp)
10008ae4:	d9000515 	stw	r4,20(sp)
10008ae8:	003cd606 	br	10007e44 <__alt_data_end+0xf8007e44>
10008aec:	d8801317 	ldw	r2,76(sp)
10008af0:	d8800515 	stw	r2,20(sp)
10008af4:	003c2a06 	br	10007ba0 <__alt_data_end+0xf8007ba0>
10008af8:	d9800317 	ldw	r6,12(sp)
10008afc:	00800084 	movi	r2,2
10008b00:	11801516 	blt	r2,r6,10008b58 <_dtoa_r+0x1660>
10008b04:	d9c00c17 	ldw	r7,48(sp)
10008b08:	d9c00615 	stw	r7,24(sp)
10008b0c:	003df706 	br	100082ec <__alt_data_end+0xf80082ec>
10008b10:	193d3926 	beq	r3,r4,10007ff8 <__alt_data_end+0xf8007ff8>
10008b14:	00c00f04 	movi	r3,60
10008b18:	1885c83a 	sub	r2,r3,r2
10008b1c:	003ddf06 	br	1000829c <__alt_data_end+0xf800829c>
10008b20:	e009883a 	mov	r4,fp
10008b24:	e0001115 	stw	zero,68(fp)
10008b28:	000b883a 	mov	r5,zero
10008b2c:	000abb00 	call	1000abb0 <_Balloc>
10008b30:	d8800715 	stw	r2,28(sp)
10008b34:	d8c00717 	ldw	r3,28(sp)
10008b38:	00bfffc4 	movi	r2,-1
10008b3c:	01000044 	movi	r4,1
10008b40:	d8800c15 	stw	r2,48(sp)
10008b44:	e0c01015 	stw	r3,64(fp)
10008b48:	d9000b15 	stw	r4,44(sp)
10008b4c:	d8800615 	stw	r2,24(sp)
10008b50:	d8002215 	stw	zero,136(sp)
10008b54:	003c4106 	br	10007c5c <__alt_data_end+0xf8007c5c>
10008b58:	d8c00c17 	ldw	r3,48(sp)
10008b5c:	d8c00615 	stw	r3,24(sp)
10008b60:	003e7006 	br	10008524 <__alt_data_end+0xf8008524>
10008b64:	04400044 	movi	r17,1
10008b68:	003b2006 	br	100077ec <__alt_data_end+0xf80077ec>
10008b6c:	000b883a 	mov	r5,zero
10008b70:	003b3d06 	br	10007868 <__alt_data_end+0xf8007868>
10008b74:	d8800c17 	ldw	r2,48(sp)
10008b78:	d8800615 	stw	r2,24(sp)
10008b7c:	003e6906 	br	10008524 <__alt_data_end+0xf8008524>

10008b80 <__sflush_r>:
10008b80:	2880030b 	ldhu	r2,12(r5)
10008b84:	defffb04 	addi	sp,sp,-20
10008b88:	dcc00315 	stw	r19,12(sp)
10008b8c:	dc400115 	stw	r17,4(sp)
10008b90:	dfc00415 	stw	ra,16(sp)
10008b94:	dc800215 	stw	r18,8(sp)
10008b98:	dc000015 	stw	r16,0(sp)
10008b9c:	10c0020c 	andi	r3,r2,8
10008ba0:	2823883a 	mov	r17,r5
10008ba4:	2027883a 	mov	r19,r4
10008ba8:	1800311e 	bne	r3,zero,10008c70 <__sflush_r+0xf0>
10008bac:	28c00117 	ldw	r3,4(r5)
10008bb0:	10820014 	ori	r2,r2,2048
10008bb4:	2880030d 	sth	r2,12(r5)
10008bb8:	00c04b0e 	bge	zero,r3,10008ce8 <__sflush_r+0x168>
10008bbc:	8a000a17 	ldw	r8,40(r17)
10008bc0:	40002326 	beq	r8,zero,10008c50 <__sflush_r+0xd0>
10008bc4:	9c000017 	ldw	r16,0(r19)
10008bc8:	10c4000c 	andi	r3,r2,4096
10008bcc:	98000015 	stw	zero,0(r19)
10008bd0:	18004826 	beq	r3,zero,10008cf4 <__sflush_r+0x174>
10008bd4:	89801417 	ldw	r6,80(r17)
10008bd8:	10c0010c 	andi	r3,r2,4
10008bdc:	18000626 	beq	r3,zero,10008bf8 <__sflush_r+0x78>
10008be0:	88c00117 	ldw	r3,4(r17)
10008be4:	88800c17 	ldw	r2,48(r17)
10008be8:	30cdc83a 	sub	r6,r6,r3
10008bec:	10000226 	beq	r2,zero,10008bf8 <__sflush_r+0x78>
10008bf0:	88800f17 	ldw	r2,60(r17)
10008bf4:	308dc83a 	sub	r6,r6,r2
10008bf8:	89400717 	ldw	r5,28(r17)
10008bfc:	000f883a 	mov	r7,zero
10008c00:	9809883a 	mov	r4,r19
10008c04:	403ee83a 	callr	r8
10008c08:	00ffffc4 	movi	r3,-1
10008c0c:	10c04426 	beq	r2,r3,10008d20 <__sflush_r+0x1a0>
10008c10:	88c0030b 	ldhu	r3,12(r17)
10008c14:	89000417 	ldw	r4,16(r17)
10008c18:	88000115 	stw	zero,4(r17)
10008c1c:	197dffcc 	andi	r5,r3,63487
10008c20:	8940030d 	sth	r5,12(r17)
10008c24:	89000015 	stw	r4,0(r17)
10008c28:	18c4000c 	andi	r3,r3,4096
10008c2c:	18002c1e 	bne	r3,zero,10008ce0 <__sflush_r+0x160>
10008c30:	89400c17 	ldw	r5,48(r17)
10008c34:	9c000015 	stw	r16,0(r19)
10008c38:	28000526 	beq	r5,zero,10008c50 <__sflush_r+0xd0>
10008c3c:	88801004 	addi	r2,r17,64
10008c40:	28800226 	beq	r5,r2,10008c4c <__sflush_r+0xcc>
10008c44:	9809883a 	mov	r4,r19
10008c48:	00092fc0 	call	100092fc <_free_r>
10008c4c:	88000c15 	stw	zero,48(r17)
10008c50:	0005883a 	mov	r2,zero
10008c54:	dfc00417 	ldw	ra,16(sp)
10008c58:	dcc00317 	ldw	r19,12(sp)
10008c5c:	dc800217 	ldw	r18,8(sp)
10008c60:	dc400117 	ldw	r17,4(sp)
10008c64:	dc000017 	ldw	r16,0(sp)
10008c68:	dec00504 	addi	sp,sp,20
10008c6c:	f800283a 	ret
10008c70:	2c800417 	ldw	r18,16(r5)
10008c74:	903ff626 	beq	r18,zero,10008c50 <__alt_data_end+0xf8008c50>
10008c78:	2c000017 	ldw	r16,0(r5)
10008c7c:	108000cc 	andi	r2,r2,3
10008c80:	2c800015 	stw	r18,0(r5)
10008c84:	84a1c83a 	sub	r16,r16,r18
10008c88:	1000131e 	bne	r2,zero,10008cd8 <__sflush_r+0x158>
10008c8c:	28800517 	ldw	r2,20(r5)
10008c90:	88800215 	stw	r2,8(r17)
10008c94:	04000316 	blt	zero,r16,10008ca4 <__sflush_r+0x124>
10008c98:	003fed06 	br	10008c50 <__alt_data_end+0xf8008c50>
10008c9c:	90a5883a 	add	r18,r18,r2
10008ca0:	043feb0e 	bge	zero,r16,10008c50 <__alt_data_end+0xf8008c50>
10008ca4:	88800917 	ldw	r2,36(r17)
10008ca8:	89400717 	ldw	r5,28(r17)
10008cac:	800f883a 	mov	r7,r16
10008cb0:	900d883a 	mov	r6,r18
10008cb4:	9809883a 	mov	r4,r19
10008cb8:	103ee83a 	callr	r2
10008cbc:	80a1c83a 	sub	r16,r16,r2
10008cc0:	00bff616 	blt	zero,r2,10008c9c <__alt_data_end+0xf8008c9c>
10008cc4:	88c0030b 	ldhu	r3,12(r17)
10008cc8:	00bfffc4 	movi	r2,-1
10008ccc:	18c01014 	ori	r3,r3,64
10008cd0:	88c0030d 	sth	r3,12(r17)
10008cd4:	003fdf06 	br	10008c54 <__alt_data_end+0xf8008c54>
10008cd8:	0005883a 	mov	r2,zero
10008cdc:	003fec06 	br	10008c90 <__alt_data_end+0xf8008c90>
10008ce0:	88801415 	stw	r2,80(r17)
10008ce4:	003fd206 	br	10008c30 <__alt_data_end+0xf8008c30>
10008ce8:	28c00f17 	ldw	r3,60(r5)
10008cec:	00ffb316 	blt	zero,r3,10008bbc <__alt_data_end+0xf8008bbc>
10008cf0:	003fd706 	br	10008c50 <__alt_data_end+0xf8008c50>
10008cf4:	89400717 	ldw	r5,28(r17)
10008cf8:	000d883a 	mov	r6,zero
10008cfc:	01c00044 	movi	r7,1
10008d00:	9809883a 	mov	r4,r19
10008d04:	403ee83a 	callr	r8
10008d08:	100d883a 	mov	r6,r2
10008d0c:	00bfffc4 	movi	r2,-1
10008d10:	30801426 	beq	r6,r2,10008d64 <__sflush_r+0x1e4>
10008d14:	8880030b 	ldhu	r2,12(r17)
10008d18:	8a000a17 	ldw	r8,40(r17)
10008d1c:	003fae06 	br	10008bd8 <__alt_data_end+0xf8008bd8>
10008d20:	98c00017 	ldw	r3,0(r19)
10008d24:	183fba26 	beq	r3,zero,10008c10 <__alt_data_end+0xf8008c10>
10008d28:	01000744 	movi	r4,29
10008d2c:	19000626 	beq	r3,r4,10008d48 <__sflush_r+0x1c8>
10008d30:	01000584 	movi	r4,22
10008d34:	19000426 	beq	r3,r4,10008d48 <__sflush_r+0x1c8>
10008d38:	88c0030b 	ldhu	r3,12(r17)
10008d3c:	18c01014 	ori	r3,r3,64
10008d40:	88c0030d 	sth	r3,12(r17)
10008d44:	003fc306 	br	10008c54 <__alt_data_end+0xf8008c54>
10008d48:	8880030b 	ldhu	r2,12(r17)
10008d4c:	88c00417 	ldw	r3,16(r17)
10008d50:	88000115 	stw	zero,4(r17)
10008d54:	10bdffcc 	andi	r2,r2,63487
10008d58:	8880030d 	sth	r2,12(r17)
10008d5c:	88c00015 	stw	r3,0(r17)
10008d60:	003fb306 	br	10008c30 <__alt_data_end+0xf8008c30>
10008d64:	98800017 	ldw	r2,0(r19)
10008d68:	103fea26 	beq	r2,zero,10008d14 <__alt_data_end+0xf8008d14>
10008d6c:	00c00744 	movi	r3,29
10008d70:	10c00226 	beq	r2,r3,10008d7c <__sflush_r+0x1fc>
10008d74:	00c00584 	movi	r3,22
10008d78:	10c0031e 	bne	r2,r3,10008d88 <__sflush_r+0x208>
10008d7c:	9c000015 	stw	r16,0(r19)
10008d80:	0005883a 	mov	r2,zero
10008d84:	003fb306 	br	10008c54 <__alt_data_end+0xf8008c54>
10008d88:	88c0030b 	ldhu	r3,12(r17)
10008d8c:	3005883a 	mov	r2,r6
10008d90:	18c01014 	ori	r3,r3,64
10008d94:	88c0030d 	sth	r3,12(r17)
10008d98:	003fae06 	br	10008c54 <__alt_data_end+0xf8008c54>

10008d9c <_fflush_r>:
10008d9c:	defffd04 	addi	sp,sp,-12
10008da0:	dc000115 	stw	r16,4(sp)
10008da4:	dfc00215 	stw	ra,8(sp)
10008da8:	2021883a 	mov	r16,r4
10008dac:	20000226 	beq	r4,zero,10008db8 <_fflush_r+0x1c>
10008db0:	20800e17 	ldw	r2,56(r4)
10008db4:	10000c26 	beq	r2,zero,10008de8 <_fflush_r+0x4c>
10008db8:	2880030f 	ldh	r2,12(r5)
10008dbc:	1000051e 	bne	r2,zero,10008dd4 <_fflush_r+0x38>
10008dc0:	0005883a 	mov	r2,zero
10008dc4:	dfc00217 	ldw	ra,8(sp)
10008dc8:	dc000117 	ldw	r16,4(sp)
10008dcc:	dec00304 	addi	sp,sp,12
10008dd0:	f800283a 	ret
10008dd4:	8009883a 	mov	r4,r16
10008dd8:	dfc00217 	ldw	ra,8(sp)
10008ddc:	dc000117 	ldw	r16,4(sp)
10008de0:	dec00304 	addi	sp,sp,12
10008de4:	0008b801 	jmpi	10008b80 <__sflush_r>
10008de8:	d9400015 	stw	r5,0(sp)
10008dec:	00091880 	call	10009188 <__sinit>
10008df0:	d9400017 	ldw	r5,0(sp)
10008df4:	003ff006 	br	10008db8 <__alt_data_end+0xf8008db8>

10008df8 <fflush>:
10008df8:	20000526 	beq	r4,zero,10008e10 <fflush+0x18>
10008dfc:	00840074 	movhi	r2,4097
10008e00:	109e4204 	addi	r2,r2,30984
10008e04:	200b883a 	mov	r5,r4
10008e08:	11000017 	ldw	r4,0(r2)
10008e0c:	0008d9c1 	jmpi	10008d9c <_fflush_r>
10008e10:	00840074 	movhi	r2,4097
10008e14:	109e4104 	addi	r2,r2,30980
10008e18:	11000017 	ldw	r4,0(r2)
10008e1c:	01440074 	movhi	r5,4097
10008e20:	29636704 	addi	r5,r5,-29284
10008e24:	0009b981 	jmpi	10009b98 <_fwalk_reent>

10008e28 <__fp_unlock>:
10008e28:	0005883a 	mov	r2,zero
10008e2c:	f800283a 	ret

10008e30 <_cleanup_r>:
10008e30:	01440074 	movhi	r5,4097
10008e34:	29774d04 	addi	r5,r5,-8908
10008e38:	0009b981 	jmpi	10009b98 <_fwalk_reent>

10008e3c <__sinit.part.1>:
10008e3c:	defff704 	addi	sp,sp,-36
10008e40:	00c40074 	movhi	r3,4097
10008e44:	dfc00815 	stw	ra,32(sp)
10008e48:	ddc00715 	stw	r23,28(sp)
10008e4c:	dd800615 	stw	r22,24(sp)
10008e50:	dd400515 	stw	r21,20(sp)
10008e54:	dd000415 	stw	r20,16(sp)
10008e58:	dcc00315 	stw	r19,12(sp)
10008e5c:	dc800215 	stw	r18,8(sp)
10008e60:	dc400115 	stw	r17,4(sp)
10008e64:	dc000015 	stw	r16,0(sp)
10008e68:	18e38c04 	addi	r3,r3,-29136
10008e6c:	24000117 	ldw	r16,4(r4)
10008e70:	20c00f15 	stw	r3,60(r4)
10008e74:	2080bb04 	addi	r2,r4,748
10008e78:	00c000c4 	movi	r3,3
10008e7c:	20c0b915 	stw	r3,740(r4)
10008e80:	2080ba15 	stw	r2,744(r4)
10008e84:	2000b815 	stw	zero,736(r4)
10008e88:	05c00204 	movi	r23,8
10008e8c:	00800104 	movi	r2,4
10008e90:	2025883a 	mov	r18,r4
10008e94:	b80d883a 	mov	r6,r23
10008e98:	81001704 	addi	r4,r16,92
10008e9c:	000b883a 	mov	r5,zero
10008ea0:	80000015 	stw	zero,0(r16)
10008ea4:	80000115 	stw	zero,4(r16)
10008ea8:	80000215 	stw	zero,8(r16)
10008eac:	8080030d 	sth	r2,12(r16)
10008eb0:	80001915 	stw	zero,100(r16)
10008eb4:	8000038d 	sth	zero,14(r16)
10008eb8:	80000415 	stw	zero,16(r16)
10008ebc:	80000515 	stw	zero,20(r16)
10008ec0:	80000615 	stw	zero,24(r16)
10008ec4:	000aa880 	call	1000aa88 <memset>
10008ec8:	05840074 	movhi	r22,4097
10008ecc:	94400217 	ldw	r17,8(r18)
10008ed0:	05440074 	movhi	r21,4097
10008ed4:	05040074 	movhi	r20,4097
10008ed8:	04c40074 	movhi	r19,4097
10008edc:	b5b0a504 	addi	r22,r22,-15724
10008ee0:	ad70bc04 	addi	r21,r21,-15632
10008ee4:	a530db04 	addi	r20,r20,-15508
10008ee8:	9cf0f204 	addi	r19,r19,-15416
10008eec:	85800815 	stw	r22,32(r16)
10008ef0:	85400915 	stw	r21,36(r16)
10008ef4:	85000a15 	stw	r20,40(r16)
10008ef8:	84c00b15 	stw	r19,44(r16)
10008efc:	84000715 	stw	r16,28(r16)
10008f00:	00800284 	movi	r2,10
10008f04:	8880030d 	sth	r2,12(r17)
10008f08:	00800044 	movi	r2,1
10008f0c:	b80d883a 	mov	r6,r23
10008f10:	89001704 	addi	r4,r17,92
10008f14:	000b883a 	mov	r5,zero
10008f18:	88000015 	stw	zero,0(r17)
10008f1c:	88000115 	stw	zero,4(r17)
10008f20:	88000215 	stw	zero,8(r17)
10008f24:	88001915 	stw	zero,100(r17)
10008f28:	8880038d 	sth	r2,14(r17)
10008f2c:	88000415 	stw	zero,16(r17)
10008f30:	88000515 	stw	zero,20(r17)
10008f34:	88000615 	stw	zero,24(r17)
10008f38:	000aa880 	call	1000aa88 <memset>
10008f3c:	94000317 	ldw	r16,12(r18)
10008f40:	00800484 	movi	r2,18
10008f44:	8c400715 	stw	r17,28(r17)
10008f48:	8d800815 	stw	r22,32(r17)
10008f4c:	8d400915 	stw	r21,36(r17)
10008f50:	8d000a15 	stw	r20,40(r17)
10008f54:	8cc00b15 	stw	r19,44(r17)
10008f58:	8080030d 	sth	r2,12(r16)
10008f5c:	00800084 	movi	r2,2
10008f60:	80000015 	stw	zero,0(r16)
10008f64:	80000115 	stw	zero,4(r16)
10008f68:	80000215 	stw	zero,8(r16)
10008f6c:	80001915 	stw	zero,100(r16)
10008f70:	8080038d 	sth	r2,14(r16)
10008f74:	80000415 	stw	zero,16(r16)
10008f78:	80000515 	stw	zero,20(r16)
10008f7c:	80000615 	stw	zero,24(r16)
10008f80:	b80d883a 	mov	r6,r23
10008f84:	000b883a 	mov	r5,zero
10008f88:	81001704 	addi	r4,r16,92
10008f8c:	000aa880 	call	1000aa88 <memset>
10008f90:	00800044 	movi	r2,1
10008f94:	84000715 	stw	r16,28(r16)
10008f98:	85800815 	stw	r22,32(r16)
10008f9c:	85400915 	stw	r21,36(r16)
10008fa0:	85000a15 	stw	r20,40(r16)
10008fa4:	84c00b15 	stw	r19,44(r16)
10008fa8:	90800e15 	stw	r2,56(r18)
10008fac:	dfc00817 	ldw	ra,32(sp)
10008fb0:	ddc00717 	ldw	r23,28(sp)
10008fb4:	dd800617 	ldw	r22,24(sp)
10008fb8:	dd400517 	ldw	r21,20(sp)
10008fbc:	dd000417 	ldw	r20,16(sp)
10008fc0:	dcc00317 	ldw	r19,12(sp)
10008fc4:	dc800217 	ldw	r18,8(sp)
10008fc8:	dc400117 	ldw	r17,4(sp)
10008fcc:	dc000017 	ldw	r16,0(sp)
10008fd0:	dec00904 	addi	sp,sp,36
10008fd4:	f800283a 	ret

10008fd8 <__fp_lock>:
10008fd8:	0005883a 	mov	r2,zero
10008fdc:	f800283a 	ret

10008fe0 <__sfmoreglue>:
10008fe0:	defffc04 	addi	sp,sp,-16
10008fe4:	dc800215 	stw	r18,8(sp)
10008fe8:	2825883a 	mov	r18,r5
10008fec:	dc000015 	stw	r16,0(sp)
10008ff0:	01401a04 	movi	r5,104
10008ff4:	2021883a 	mov	r16,r4
10008ff8:	913fffc4 	addi	r4,r18,-1
10008ffc:	dfc00315 	stw	ra,12(sp)
10009000:	dc400115 	stw	r17,4(sp)
10009004:	0004bc80 	call	10004bc8 <__mulsi3>
10009008:	8009883a 	mov	r4,r16
1000900c:	11401d04 	addi	r5,r2,116
10009010:	1023883a 	mov	r17,r2
10009014:	0009ef40 	call	10009ef4 <_malloc_r>
10009018:	1021883a 	mov	r16,r2
1000901c:	10000726 	beq	r2,zero,1000903c <__sfmoreglue+0x5c>
10009020:	11000304 	addi	r4,r2,12
10009024:	10000015 	stw	zero,0(r2)
10009028:	14800115 	stw	r18,4(r2)
1000902c:	11000215 	stw	r4,8(r2)
10009030:	89801a04 	addi	r6,r17,104
10009034:	000b883a 	mov	r5,zero
10009038:	000aa880 	call	1000aa88 <memset>
1000903c:	8005883a 	mov	r2,r16
10009040:	dfc00317 	ldw	ra,12(sp)
10009044:	dc800217 	ldw	r18,8(sp)
10009048:	dc400117 	ldw	r17,4(sp)
1000904c:	dc000017 	ldw	r16,0(sp)
10009050:	dec00404 	addi	sp,sp,16
10009054:	f800283a 	ret

10009058 <__sfp>:
10009058:	defffb04 	addi	sp,sp,-20
1000905c:	dc000015 	stw	r16,0(sp)
10009060:	04040074 	movhi	r16,4097
10009064:	841e4104 	addi	r16,r16,30980
10009068:	dcc00315 	stw	r19,12(sp)
1000906c:	2027883a 	mov	r19,r4
10009070:	81000017 	ldw	r4,0(r16)
10009074:	dfc00415 	stw	ra,16(sp)
10009078:	dc800215 	stw	r18,8(sp)
1000907c:	20800e17 	ldw	r2,56(r4)
10009080:	dc400115 	stw	r17,4(sp)
10009084:	1000021e 	bne	r2,zero,10009090 <__sfp+0x38>
10009088:	0008e3c0 	call	10008e3c <__sinit.part.1>
1000908c:	81000017 	ldw	r4,0(r16)
10009090:	2480b804 	addi	r18,r4,736
10009094:	047fffc4 	movi	r17,-1
10009098:	91000117 	ldw	r4,4(r18)
1000909c:	94000217 	ldw	r16,8(r18)
100090a0:	213fffc4 	addi	r4,r4,-1
100090a4:	20000a16 	blt	r4,zero,100090d0 <__sfp+0x78>
100090a8:	8080030f 	ldh	r2,12(r16)
100090ac:	10000c26 	beq	r2,zero,100090e0 <__sfp+0x88>
100090b0:	80c01d04 	addi	r3,r16,116
100090b4:	00000206 	br	100090c0 <__sfp+0x68>
100090b8:	18bfe60f 	ldh	r2,-104(r3)
100090bc:	10000826 	beq	r2,zero,100090e0 <__sfp+0x88>
100090c0:	213fffc4 	addi	r4,r4,-1
100090c4:	1c3ffd04 	addi	r16,r3,-12
100090c8:	18c01a04 	addi	r3,r3,104
100090cc:	247ffa1e 	bne	r4,r17,100090b8 <__alt_data_end+0xf80090b8>
100090d0:	90800017 	ldw	r2,0(r18)
100090d4:	10001d26 	beq	r2,zero,1000914c <__sfp+0xf4>
100090d8:	1025883a 	mov	r18,r2
100090dc:	003fee06 	br	10009098 <__alt_data_end+0xf8009098>
100090e0:	00bfffc4 	movi	r2,-1
100090e4:	8080038d 	sth	r2,14(r16)
100090e8:	00800044 	movi	r2,1
100090ec:	8080030d 	sth	r2,12(r16)
100090f0:	80001915 	stw	zero,100(r16)
100090f4:	80000015 	stw	zero,0(r16)
100090f8:	80000215 	stw	zero,8(r16)
100090fc:	80000115 	stw	zero,4(r16)
10009100:	80000415 	stw	zero,16(r16)
10009104:	80000515 	stw	zero,20(r16)
10009108:	80000615 	stw	zero,24(r16)
1000910c:	01800204 	movi	r6,8
10009110:	000b883a 	mov	r5,zero
10009114:	81001704 	addi	r4,r16,92
10009118:	000aa880 	call	1000aa88 <memset>
1000911c:	8005883a 	mov	r2,r16
10009120:	80000c15 	stw	zero,48(r16)
10009124:	80000d15 	stw	zero,52(r16)
10009128:	80001115 	stw	zero,68(r16)
1000912c:	80001215 	stw	zero,72(r16)
10009130:	dfc00417 	ldw	ra,16(sp)
10009134:	dcc00317 	ldw	r19,12(sp)
10009138:	dc800217 	ldw	r18,8(sp)
1000913c:	dc400117 	ldw	r17,4(sp)
10009140:	dc000017 	ldw	r16,0(sp)
10009144:	dec00504 	addi	sp,sp,20
10009148:	f800283a 	ret
1000914c:	01400104 	movi	r5,4
10009150:	9809883a 	mov	r4,r19
10009154:	0008fe00 	call	10008fe0 <__sfmoreglue>
10009158:	90800015 	stw	r2,0(r18)
1000915c:	103fde1e 	bne	r2,zero,100090d8 <__alt_data_end+0xf80090d8>
10009160:	00800304 	movi	r2,12
10009164:	98800015 	stw	r2,0(r19)
10009168:	0005883a 	mov	r2,zero
1000916c:	003ff006 	br	10009130 <__alt_data_end+0xf8009130>

10009170 <_cleanup>:
10009170:	00840074 	movhi	r2,4097
10009174:	109e4104 	addi	r2,r2,30980
10009178:	11000017 	ldw	r4,0(r2)
1000917c:	01440074 	movhi	r5,4097
10009180:	29774d04 	addi	r5,r5,-8908
10009184:	0009b981 	jmpi	10009b98 <_fwalk_reent>

10009188 <__sinit>:
10009188:	20800e17 	ldw	r2,56(r4)
1000918c:	10000126 	beq	r2,zero,10009194 <__sinit+0xc>
10009190:	f800283a 	ret
10009194:	0008e3c1 	jmpi	10008e3c <__sinit.part.1>

10009198 <__sfp_lock_acquire>:
10009198:	f800283a 	ret

1000919c <__sfp_lock_release>:
1000919c:	f800283a 	ret

100091a0 <__sinit_lock_acquire>:
100091a0:	f800283a 	ret

100091a4 <__sinit_lock_release>:
100091a4:	f800283a 	ret

100091a8 <__fp_lock_all>:
100091a8:	00840074 	movhi	r2,4097
100091ac:	109e4204 	addi	r2,r2,30984
100091b0:	11000017 	ldw	r4,0(r2)
100091b4:	01440074 	movhi	r5,4097
100091b8:	2963f604 	addi	r5,r5,-28712
100091bc:	0009ad41 	jmpi	10009ad4 <_fwalk>

100091c0 <__fp_unlock_all>:
100091c0:	00840074 	movhi	r2,4097
100091c4:	109e4204 	addi	r2,r2,30984
100091c8:	11000017 	ldw	r4,0(r2)
100091cc:	01440074 	movhi	r5,4097
100091d0:	29638a04 	addi	r5,r5,-29144
100091d4:	0009ad41 	jmpi	10009ad4 <_fwalk>

100091d8 <_malloc_trim_r>:
100091d8:	defffb04 	addi	sp,sp,-20
100091dc:	dcc00315 	stw	r19,12(sp)
100091e0:	04c40074 	movhi	r19,4097
100091e4:	dc800215 	stw	r18,8(sp)
100091e8:	dc400115 	stw	r17,4(sp)
100091ec:	dc000015 	stw	r16,0(sp)
100091f0:	dfc00415 	stw	ra,16(sp)
100091f4:	2821883a 	mov	r16,r5
100091f8:	9cd8ba04 	addi	r19,r19,25320
100091fc:	2025883a 	mov	r18,r4
10009200:	00120a40 	call	100120a4 <__malloc_lock>
10009204:	98800217 	ldw	r2,8(r19)
10009208:	14400117 	ldw	r17,4(r2)
1000920c:	00bfff04 	movi	r2,-4
10009210:	88a2703a 	and	r17,r17,r2
10009214:	8c21c83a 	sub	r16,r17,r16
10009218:	8403fbc4 	addi	r16,r16,4079
1000921c:	8020d33a 	srli	r16,r16,12
10009220:	0083ffc4 	movi	r2,4095
10009224:	843fffc4 	addi	r16,r16,-1
10009228:	8020933a 	slli	r16,r16,12
1000922c:	1400060e 	bge	r2,r16,10009248 <_malloc_trim_r+0x70>
10009230:	000b883a 	mov	r5,zero
10009234:	9009883a 	mov	r4,r18
10009238:	000c2400 	call	1000c240 <_sbrk_r>
1000923c:	98c00217 	ldw	r3,8(r19)
10009240:	1c47883a 	add	r3,r3,r17
10009244:	10c00a26 	beq	r2,r3,10009270 <_malloc_trim_r+0x98>
10009248:	9009883a 	mov	r4,r18
1000924c:	00120c80 	call	100120c8 <__malloc_unlock>
10009250:	0005883a 	mov	r2,zero
10009254:	dfc00417 	ldw	ra,16(sp)
10009258:	dcc00317 	ldw	r19,12(sp)
1000925c:	dc800217 	ldw	r18,8(sp)
10009260:	dc400117 	ldw	r17,4(sp)
10009264:	dc000017 	ldw	r16,0(sp)
10009268:	dec00504 	addi	sp,sp,20
1000926c:	f800283a 	ret
10009270:	040bc83a 	sub	r5,zero,r16
10009274:	9009883a 	mov	r4,r18
10009278:	000c2400 	call	1000c240 <_sbrk_r>
1000927c:	00ffffc4 	movi	r3,-1
10009280:	10c00d26 	beq	r2,r3,100092b8 <_malloc_trim_r+0xe0>
10009284:	00c400b4 	movhi	r3,4098
10009288:	18ea7204 	addi	r3,r3,-22072
1000928c:	18800017 	ldw	r2,0(r3)
10009290:	99000217 	ldw	r4,8(r19)
10009294:	8c23c83a 	sub	r17,r17,r16
10009298:	8c400054 	ori	r17,r17,1
1000929c:	1421c83a 	sub	r16,r2,r16
100092a0:	24400115 	stw	r17,4(r4)
100092a4:	9009883a 	mov	r4,r18
100092a8:	1c000015 	stw	r16,0(r3)
100092ac:	00120c80 	call	100120c8 <__malloc_unlock>
100092b0:	00800044 	movi	r2,1
100092b4:	003fe706 	br	10009254 <__alt_data_end+0xf8009254>
100092b8:	000b883a 	mov	r5,zero
100092bc:	9009883a 	mov	r4,r18
100092c0:	000c2400 	call	1000c240 <_sbrk_r>
100092c4:	99000217 	ldw	r4,8(r19)
100092c8:	014003c4 	movi	r5,15
100092cc:	1107c83a 	sub	r3,r2,r4
100092d0:	28ffdd0e 	bge	r5,r3,10009248 <__alt_data_end+0xf8009248>
100092d4:	01440074 	movhi	r5,4097
100092d8:	295e4404 	addi	r5,r5,30992
100092dc:	29400017 	ldw	r5,0(r5)
100092e0:	18c00054 	ori	r3,r3,1
100092e4:	20c00115 	stw	r3,4(r4)
100092e8:	00c400b4 	movhi	r3,4098
100092ec:	1145c83a 	sub	r2,r2,r5
100092f0:	18ea7204 	addi	r3,r3,-22072
100092f4:	18800015 	stw	r2,0(r3)
100092f8:	003fd306 	br	10009248 <__alt_data_end+0xf8009248>

100092fc <_free_r>:
100092fc:	28004126 	beq	r5,zero,10009404 <_free_r+0x108>
10009300:	defffd04 	addi	sp,sp,-12
10009304:	dc400115 	stw	r17,4(sp)
10009308:	dc000015 	stw	r16,0(sp)
1000930c:	2023883a 	mov	r17,r4
10009310:	2821883a 	mov	r16,r5
10009314:	dfc00215 	stw	ra,8(sp)
10009318:	00120a40 	call	100120a4 <__malloc_lock>
1000931c:	81ffff17 	ldw	r7,-4(r16)
10009320:	00bfff84 	movi	r2,-2
10009324:	01040074 	movhi	r4,4097
10009328:	81bffe04 	addi	r6,r16,-8
1000932c:	3884703a 	and	r2,r7,r2
10009330:	2118ba04 	addi	r4,r4,25320
10009334:	308b883a 	add	r5,r6,r2
10009338:	2a400117 	ldw	r9,4(r5)
1000933c:	22000217 	ldw	r8,8(r4)
10009340:	00ffff04 	movi	r3,-4
10009344:	48c6703a 	and	r3,r9,r3
10009348:	2a005726 	beq	r5,r8,100094a8 <_free_r+0x1ac>
1000934c:	28c00115 	stw	r3,4(r5)
10009350:	39c0004c 	andi	r7,r7,1
10009354:	3800091e 	bne	r7,zero,1000937c <_free_r+0x80>
10009358:	823ffe17 	ldw	r8,-8(r16)
1000935c:	22400204 	addi	r9,r4,8
10009360:	320dc83a 	sub	r6,r6,r8
10009364:	31c00217 	ldw	r7,8(r6)
10009368:	1205883a 	add	r2,r2,r8
1000936c:	3a406526 	beq	r7,r9,10009504 <_free_r+0x208>
10009370:	32000317 	ldw	r8,12(r6)
10009374:	3a000315 	stw	r8,12(r7)
10009378:	41c00215 	stw	r7,8(r8)
1000937c:	28cf883a 	add	r7,r5,r3
10009380:	39c00117 	ldw	r7,4(r7)
10009384:	39c0004c 	andi	r7,r7,1
10009388:	38003a26 	beq	r7,zero,10009474 <_free_r+0x178>
1000938c:	10c00054 	ori	r3,r2,1
10009390:	30c00115 	stw	r3,4(r6)
10009394:	3087883a 	add	r3,r6,r2
10009398:	18800015 	stw	r2,0(r3)
1000939c:	00c07fc4 	movi	r3,511
100093a0:	18801936 	bltu	r3,r2,10009408 <_free_r+0x10c>
100093a4:	1004d0fa 	srli	r2,r2,3
100093a8:	01c00044 	movi	r7,1
100093ac:	21400117 	ldw	r5,4(r4)
100093b0:	10c00044 	addi	r3,r2,1
100093b4:	18c7883a 	add	r3,r3,r3
100093b8:	1005d0ba 	srai	r2,r2,2
100093bc:	18c7883a 	add	r3,r3,r3
100093c0:	18c7883a 	add	r3,r3,r3
100093c4:	1907883a 	add	r3,r3,r4
100093c8:	3884983a 	sll	r2,r7,r2
100093cc:	19c00017 	ldw	r7,0(r3)
100093d0:	1a3ffe04 	addi	r8,r3,-8
100093d4:	1144b03a 	or	r2,r2,r5
100093d8:	32000315 	stw	r8,12(r6)
100093dc:	31c00215 	stw	r7,8(r6)
100093e0:	20800115 	stw	r2,4(r4)
100093e4:	19800015 	stw	r6,0(r3)
100093e8:	39800315 	stw	r6,12(r7)
100093ec:	8809883a 	mov	r4,r17
100093f0:	dfc00217 	ldw	ra,8(sp)
100093f4:	dc400117 	ldw	r17,4(sp)
100093f8:	dc000017 	ldw	r16,0(sp)
100093fc:	dec00304 	addi	sp,sp,12
10009400:	00120c81 	jmpi	100120c8 <__malloc_unlock>
10009404:	f800283a 	ret
10009408:	100ad27a 	srli	r5,r2,9
1000940c:	00c00104 	movi	r3,4
10009410:	19404a36 	bltu	r3,r5,1000953c <_free_r+0x240>
10009414:	100ad1ba 	srli	r5,r2,6
10009418:	28c00e44 	addi	r3,r5,57
1000941c:	18c7883a 	add	r3,r3,r3
10009420:	29400e04 	addi	r5,r5,56
10009424:	18c7883a 	add	r3,r3,r3
10009428:	18c7883a 	add	r3,r3,r3
1000942c:	1909883a 	add	r4,r3,r4
10009430:	20c00017 	ldw	r3,0(r4)
10009434:	01c40074 	movhi	r7,4097
10009438:	213ffe04 	addi	r4,r4,-8
1000943c:	39d8ba04 	addi	r7,r7,25320
10009440:	20c04426 	beq	r4,r3,10009554 <_free_r+0x258>
10009444:	01ffff04 	movi	r7,-4
10009448:	19400117 	ldw	r5,4(r3)
1000944c:	29ca703a 	and	r5,r5,r7
10009450:	1140022e 	bgeu	r2,r5,1000945c <_free_r+0x160>
10009454:	18c00217 	ldw	r3,8(r3)
10009458:	20fffb1e 	bne	r4,r3,10009448 <__alt_data_end+0xf8009448>
1000945c:	19000317 	ldw	r4,12(r3)
10009460:	31000315 	stw	r4,12(r6)
10009464:	30c00215 	stw	r3,8(r6)
10009468:	21800215 	stw	r6,8(r4)
1000946c:	19800315 	stw	r6,12(r3)
10009470:	003fde06 	br	100093ec <__alt_data_end+0xf80093ec>
10009474:	29c00217 	ldw	r7,8(r5)
10009478:	10c5883a 	add	r2,r2,r3
1000947c:	00c40074 	movhi	r3,4097
10009480:	18d8bc04 	addi	r3,r3,25328
10009484:	38c03b26 	beq	r7,r3,10009574 <_free_r+0x278>
10009488:	2a000317 	ldw	r8,12(r5)
1000948c:	11400054 	ori	r5,r2,1
10009490:	3087883a 	add	r3,r6,r2
10009494:	3a000315 	stw	r8,12(r7)
10009498:	41c00215 	stw	r7,8(r8)
1000949c:	31400115 	stw	r5,4(r6)
100094a0:	18800015 	stw	r2,0(r3)
100094a4:	003fbd06 	br	1000939c <__alt_data_end+0xf800939c>
100094a8:	39c0004c 	andi	r7,r7,1
100094ac:	10c5883a 	add	r2,r2,r3
100094b0:	3800071e 	bne	r7,zero,100094d0 <_free_r+0x1d4>
100094b4:	81fffe17 	ldw	r7,-8(r16)
100094b8:	31cdc83a 	sub	r6,r6,r7
100094bc:	30c00317 	ldw	r3,12(r6)
100094c0:	31400217 	ldw	r5,8(r6)
100094c4:	11c5883a 	add	r2,r2,r7
100094c8:	28c00315 	stw	r3,12(r5)
100094cc:	19400215 	stw	r5,8(r3)
100094d0:	10c00054 	ori	r3,r2,1
100094d4:	30c00115 	stw	r3,4(r6)
100094d8:	00c40074 	movhi	r3,4097
100094dc:	18de4504 	addi	r3,r3,30996
100094e0:	18c00017 	ldw	r3,0(r3)
100094e4:	21800215 	stw	r6,8(r4)
100094e8:	10ffc036 	bltu	r2,r3,100093ec <__alt_data_end+0xf80093ec>
100094ec:	008400b4 	movhi	r2,4098
100094f0:	10a8cd04 	addi	r2,r2,-23756
100094f4:	11400017 	ldw	r5,0(r2)
100094f8:	8809883a 	mov	r4,r17
100094fc:	00091d80 	call	100091d8 <_malloc_trim_r>
10009500:	003fba06 	br	100093ec <__alt_data_end+0xf80093ec>
10009504:	28c9883a 	add	r4,r5,r3
10009508:	21000117 	ldw	r4,4(r4)
1000950c:	2100004c 	andi	r4,r4,1
10009510:	2000391e 	bne	r4,zero,100095f8 <_free_r+0x2fc>
10009514:	29c00217 	ldw	r7,8(r5)
10009518:	29000317 	ldw	r4,12(r5)
1000951c:	1885883a 	add	r2,r3,r2
10009520:	10c00054 	ori	r3,r2,1
10009524:	39000315 	stw	r4,12(r7)
10009528:	21c00215 	stw	r7,8(r4)
1000952c:	30c00115 	stw	r3,4(r6)
10009530:	308d883a 	add	r6,r6,r2
10009534:	30800015 	stw	r2,0(r6)
10009538:	003fac06 	br	100093ec <__alt_data_end+0xf80093ec>
1000953c:	00c00504 	movi	r3,20
10009540:	19401536 	bltu	r3,r5,10009598 <_free_r+0x29c>
10009544:	28c01704 	addi	r3,r5,92
10009548:	18c7883a 	add	r3,r3,r3
1000954c:	294016c4 	addi	r5,r5,91
10009550:	003fb406 	br	10009424 <__alt_data_end+0xf8009424>
10009554:	280bd0ba 	srai	r5,r5,2
10009558:	00c00044 	movi	r3,1
1000955c:	38800117 	ldw	r2,4(r7)
10009560:	194a983a 	sll	r5,r3,r5
10009564:	2007883a 	mov	r3,r4
10009568:	2884b03a 	or	r2,r5,r2
1000956c:	38800115 	stw	r2,4(r7)
10009570:	003fbb06 	br	10009460 <__alt_data_end+0xf8009460>
10009574:	21800515 	stw	r6,20(r4)
10009578:	21800415 	stw	r6,16(r4)
1000957c:	10c00054 	ori	r3,r2,1
10009580:	31c00315 	stw	r7,12(r6)
10009584:	31c00215 	stw	r7,8(r6)
10009588:	30c00115 	stw	r3,4(r6)
1000958c:	308d883a 	add	r6,r6,r2
10009590:	30800015 	stw	r2,0(r6)
10009594:	003f9506 	br	100093ec <__alt_data_end+0xf80093ec>
10009598:	00c01504 	movi	r3,84
1000959c:	19400536 	bltu	r3,r5,100095b4 <_free_r+0x2b8>
100095a0:	100ad33a 	srli	r5,r2,12
100095a4:	28c01bc4 	addi	r3,r5,111
100095a8:	18c7883a 	add	r3,r3,r3
100095ac:	29401b84 	addi	r5,r5,110
100095b0:	003f9c06 	br	10009424 <__alt_data_end+0xf8009424>
100095b4:	00c05504 	movi	r3,340
100095b8:	19400536 	bltu	r3,r5,100095d0 <_free_r+0x2d4>
100095bc:	100ad3fa 	srli	r5,r2,15
100095c0:	28c01e04 	addi	r3,r5,120
100095c4:	18c7883a 	add	r3,r3,r3
100095c8:	29401dc4 	addi	r5,r5,119
100095cc:	003f9506 	br	10009424 <__alt_data_end+0xf8009424>
100095d0:	00c15504 	movi	r3,1364
100095d4:	19400536 	bltu	r3,r5,100095ec <_free_r+0x2f0>
100095d8:	100ad4ba 	srli	r5,r2,18
100095dc:	28c01f44 	addi	r3,r5,125
100095e0:	18c7883a 	add	r3,r3,r3
100095e4:	29401f04 	addi	r5,r5,124
100095e8:	003f8e06 	br	10009424 <__alt_data_end+0xf8009424>
100095ec:	00c03f84 	movi	r3,254
100095f0:	01401f84 	movi	r5,126
100095f4:	003f8b06 	br	10009424 <__alt_data_end+0xf8009424>
100095f8:	10c00054 	ori	r3,r2,1
100095fc:	30c00115 	stw	r3,4(r6)
10009600:	308d883a 	add	r6,r6,r2
10009604:	30800015 	stw	r2,0(r6)
10009608:	003f7806 	br	100093ec <__alt_data_end+0xf80093ec>

1000960c <__sfvwrite_r>:
1000960c:	30800217 	ldw	r2,8(r6)
10009610:	10006726 	beq	r2,zero,100097b0 <__sfvwrite_r+0x1a4>
10009614:	28c0030b 	ldhu	r3,12(r5)
10009618:	defff404 	addi	sp,sp,-48
1000961c:	dd400715 	stw	r21,28(sp)
10009620:	dd000615 	stw	r20,24(sp)
10009624:	dc000215 	stw	r16,8(sp)
10009628:	dfc00b15 	stw	ra,44(sp)
1000962c:	df000a15 	stw	fp,40(sp)
10009630:	ddc00915 	stw	r23,36(sp)
10009634:	dd800815 	stw	r22,32(sp)
10009638:	dcc00515 	stw	r19,20(sp)
1000963c:	dc800415 	stw	r18,16(sp)
10009640:	dc400315 	stw	r17,12(sp)
10009644:	1880020c 	andi	r2,r3,8
10009648:	2821883a 	mov	r16,r5
1000964c:	202b883a 	mov	r21,r4
10009650:	3029883a 	mov	r20,r6
10009654:	10002726 	beq	r2,zero,100096f4 <__sfvwrite_r+0xe8>
10009658:	28800417 	ldw	r2,16(r5)
1000965c:	10002526 	beq	r2,zero,100096f4 <__sfvwrite_r+0xe8>
10009660:	1880008c 	andi	r2,r3,2
10009664:	a4400017 	ldw	r17,0(r20)
10009668:	10002a26 	beq	r2,zero,10009714 <__sfvwrite_r+0x108>
1000966c:	05a00034 	movhi	r22,32768
10009670:	0027883a 	mov	r19,zero
10009674:	0025883a 	mov	r18,zero
10009678:	b5bf0004 	addi	r22,r22,-1024
1000967c:	980d883a 	mov	r6,r19
10009680:	a809883a 	mov	r4,r21
10009684:	90004626 	beq	r18,zero,100097a0 <__sfvwrite_r+0x194>
10009688:	900f883a 	mov	r7,r18
1000968c:	b480022e 	bgeu	r22,r18,10009698 <__sfvwrite_r+0x8c>
10009690:	01e00034 	movhi	r7,32768
10009694:	39ff0004 	addi	r7,r7,-1024
10009698:	80800917 	ldw	r2,36(r16)
1000969c:	81400717 	ldw	r5,28(r16)
100096a0:	103ee83a 	callr	r2
100096a4:	00805a0e 	bge	zero,r2,10009810 <__sfvwrite_r+0x204>
100096a8:	a0c00217 	ldw	r3,8(r20)
100096ac:	98a7883a 	add	r19,r19,r2
100096b0:	90a5c83a 	sub	r18,r18,r2
100096b4:	1885c83a 	sub	r2,r3,r2
100096b8:	a0800215 	stw	r2,8(r20)
100096bc:	103fef1e 	bne	r2,zero,1000967c <__alt_data_end+0xf800967c>
100096c0:	0005883a 	mov	r2,zero
100096c4:	dfc00b17 	ldw	ra,44(sp)
100096c8:	df000a17 	ldw	fp,40(sp)
100096cc:	ddc00917 	ldw	r23,36(sp)
100096d0:	dd800817 	ldw	r22,32(sp)
100096d4:	dd400717 	ldw	r21,28(sp)
100096d8:	dd000617 	ldw	r20,24(sp)
100096dc:	dcc00517 	ldw	r19,20(sp)
100096e0:	dc800417 	ldw	r18,16(sp)
100096e4:	dc400317 	ldw	r17,12(sp)
100096e8:	dc000217 	ldw	r16,8(sp)
100096ec:	dec00c04 	addi	sp,sp,48
100096f0:	f800283a 	ret
100096f4:	800b883a 	mov	r5,r16
100096f8:	a809883a 	mov	r4,r21
100096fc:	000717c0 	call	1000717c <__swsetup_r>
10009700:	1000ee1e 	bne	r2,zero,10009abc <__sfvwrite_r+0x4b0>
10009704:	80c0030b 	ldhu	r3,12(r16)
10009708:	a4400017 	ldw	r17,0(r20)
1000970c:	1880008c 	andi	r2,r3,2
10009710:	103fd61e 	bne	r2,zero,1000966c <__alt_data_end+0xf800966c>
10009714:	1880004c 	andi	r2,r3,1
10009718:	1000421e 	bne	r2,zero,10009824 <__sfvwrite_r+0x218>
1000971c:	0039883a 	mov	fp,zero
10009720:	0025883a 	mov	r18,zero
10009724:	90001a26 	beq	r18,zero,10009790 <__sfvwrite_r+0x184>
10009728:	1880800c 	andi	r2,r3,512
1000972c:	84c00217 	ldw	r19,8(r16)
10009730:	10002126 	beq	r2,zero,100097b8 <__sfvwrite_r+0x1ac>
10009734:	982f883a 	mov	r23,r19
10009738:	94c09636 	bltu	r18,r19,10009994 <__sfvwrite_r+0x388>
1000973c:	1881200c 	andi	r2,r3,1152
10009740:	1000a11e 	bne	r2,zero,100099c8 <__sfvwrite_r+0x3bc>
10009744:	81000017 	ldw	r4,0(r16)
10009748:	b80d883a 	mov	r6,r23
1000974c:	e00b883a 	mov	r5,fp
10009750:	000a92c0 	call	1000a92c <memmove>
10009754:	80c00217 	ldw	r3,8(r16)
10009758:	81000017 	ldw	r4,0(r16)
1000975c:	9005883a 	mov	r2,r18
10009760:	1ce7c83a 	sub	r19,r3,r19
10009764:	25cf883a 	add	r7,r4,r23
10009768:	84c00215 	stw	r19,8(r16)
1000976c:	81c00015 	stw	r7,0(r16)
10009770:	a0c00217 	ldw	r3,8(r20)
10009774:	e0b9883a 	add	fp,fp,r2
10009778:	90a5c83a 	sub	r18,r18,r2
1000977c:	18a7c83a 	sub	r19,r3,r2
10009780:	a4c00215 	stw	r19,8(r20)
10009784:	983fce26 	beq	r19,zero,100096c0 <__alt_data_end+0xf80096c0>
10009788:	80c0030b 	ldhu	r3,12(r16)
1000978c:	903fe61e 	bne	r18,zero,10009728 <__alt_data_end+0xf8009728>
10009790:	8f000017 	ldw	fp,0(r17)
10009794:	8c800117 	ldw	r18,4(r17)
10009798:	8c400204 	addi	r17,r17,8
1000979c:	003fe106 	br	10009724 <__alt_data_end+0xf8009724>
100097a0:	8cc00017 	ldw	r19,0(r17)
100097a4:	8c800117 	ldw	r18,4(r17)
100097a8:	8c400204 	addi	r17,r17,8
100097ac:	003fb306 	br	1000967c <__alt_data_end+0xf800967c>
100097b0:	0005883a 	mov	r2,zero
100097b4:	f800283a 	ret
100097b8:	81000017 	ldw	r4,0(r16)
100097bc:	80800417 	ldw	r2,16(r16)
100097c0:	11005a36 	bltu	r2,r4,1000992c <__sfvwrite_r+0x320>
100097c4:	85c00517 	ldw	r23,20(r16)
100097c8:	95c05836 	bltu	r18,r23,1000992c <__sfvwrite_r+0x320>
100097cc:	00a00034 	movhi	r2,32768
100097d0:	10bfffc4 	addi	r2,r2,-1
100097d4:	9009883a 	mov	r4,r18
100097d8:	1480012e 	bgeu	r2,r18,100097e0 <__sfvwrite_r+0x1d4>
100097dc:	1009883a 	mov	r4,r2
100097e0:	b80b883a 	mov	r5,r23
100097e4:	000f0b00 	call	1000f0b0 <__divsi3>
100097e8:	b80b883a 	mov	r5,r23
100097ec:	1009883a 	mov	r4,r2
100097f0:	0004bc80 	call	10004bc8 <__mulsi3>
100097f4:	81400717 	ldw	r5,28(r16)
100097f8:	80c00917 	ldw	r3,36(r16)
100097fc:	100f883a 	mov	r7,r2
10009800:	e00d883a 	mov	r6,fp
10009804:	a809883a 	mov	r4,r21
10009808:	183ee83a 	callr	r3
1000980c:	00bfd816 	blt	zero,r2,10009770 <__alt_data_end+0xf8009770>
10009810:	8080030b 	ldhu	r2,12(r16)
10009814:	10801014 	ori	r2,r2,64
10009818:	8080030d 	sth	r2,12(r16)
1000981c:	00bfffc4 	movi	r2,-1
10009820:	003fa806 	br	100096c4 <__alt_data_end+0xf80096c4>
10009824:	0027883a 	mov	r19,zero
10009828:	0011883a 	mov	r8,zero
1000982c:	0039883a 	mov	fp,zero
10009830:	0025883a 	mov	r18,zero
10009834:	90001f26 	beq	r18,zero,100098b4 <__sfvwrite_r+0x2a8>
10009838:	40005a26 	beq	r8,zero,100099a4 <__sfvwrite_r+0x398>
1000983c:	982d883a 	mov	r22,r19
10009840:	94c0012e 	bgeu	r18,r19,10009848 <__sfvwrite_r+0x23c>
10009844:	902d883a 	mov	r22,r18
10009848:	81000017 	ldw	r4,0(r16)
1000984c:	80800417 	ldw	r2,16(r16)
10009850:	b02f883a 	mov	r23,r22
10009854:	81c00517 	ldw	r7,20(r16)
10009858:	1100032e 	bgeu	r2,r4,10009868 <__sfvwrite_r+0x25c>
1000985c:	80c00217 	ldw	r3,8(r16)
10009860:	38c7883a 	add	r3,r7,r3
10009864:	1d801816 	blt	r3,r22,100098c8 <__sfvwrite_r+0x2bc>
10009868:	b1c03e16 	blt	r22,r7,10009964 <__sfvwrite_r+0x358>
1000986c:	80800917 	ldw	r2,36(r16)
10009870:	81400717 	ldw	r5,28(r16)
10009874:	e00d883a 	mov	r6,fp
10009878:	da000115 	stw	r8,4(sp)
1000987c:	a809883a 	mov	r4,r21
10009880:	103ee83a 	callr	r2
10009884:	102f883a 	mov	r23,r2
10009888:	da000117 	ldw	r8,4(sp)
1000988c:	00bfe00e 	bge	zero,r2,10009810 <__alt_data_end+0xf8009810>
10009890:	9de7c83a 	sub	r19,r19,r23
10009894:	98001f26 	beq	r19,zero,10009914 <__sfvwrite_r+0x308>
10009898:	a0800217 	ldw	r2,8(r20)
1000989c:	e5f9883a 	add	fp,fp,r23
100098a0:	95e5c83a 	sub	r18,r18,r23
100098a4:	15efc83a 	sub	r23,r2,r23
100098a8:	a5c00215 	stw	r23,8(r20)
100098ac:	b83f8426 	beq	r23,zero,100096c0 <__alt_data_end+0xf80096c0>
100098b0:	903fe11e 	bne	r18,zero,10009838 <__alt_data_end+0xf8009838>
100098b4:	8f000017 	ldw	fp,0(r17)
100098b8:	8c800117 	ldw	r18,4(r17)
100098bc:	0011883a 	mov	r8,zero
100098c0:	8c400204 	addi	r17,r17,8
100098c4:	003fdb06 	br	10009834 <__alt_data_end+0xf8009834>
100098c8:	180d883a 	mov	r6,r3
100098cc:	e00b883a 	mov	r5,fp
100098d0:	da000115 	stw	r8,4(sp)
100098d4:	d8c00015 	stw	r3,0(sp)
100098d8:	000a92c0 	call	1000a92c <memmove>
100098dc:	d8c00017 	ldw	r3,0(sp)
100098e0:	80800017 	ldw	r2,0(r16)
100098e4:	800b883a 	mov	r5,r16
100098e8:	a809883a 	mov	r4,r21
100098ec:	10c5883a 	add	r2,r2,r3
100098f0:	80800015 	stw	r2,0(r16)
100098f4:	d8c00015 	stw	r3,0(sp)
100098f8:	0008d9c0 	call	10008d9c <_fflush_r>
100098fc:	d8c00017 	ldw	r3,0(sp)
10009900:	da000117 	ldw	r8,4(sp)
10009904:	103fc21e 	bne	r2,zero,10009810 <__alt_data_end+0xf8009810>
10009908:	182f883a 	mov	r23,r3
1000990c:	9de7c83a 	sub	r19,r19,r23
10009910:	983fe11e 	bne	r19,zero,10009898 <__alt_data_end+0xf8009898>
10009914:	800b883a 	mov	r5,r16
10009918:	a809883a 	mov	r4,r21
1000991c:	0008d9c0 	call	10008d9c <_fflush_r>
10009920:	103fbb1e 	bne	r2,zero,10009810 <__alt_data_end+0xf8009810>
10009924:	0011883a 	mov	r8,zero
10009928:	003fdb06 	br	10009898 <__alt_data_end+0xf8009898>
1000992c:	94c0012e 	bgeu	r18,r19,10009934 <__sfvwrite_r+0x328>
10009930:	9027883a 	mov	r19,r18
10009934:	980d883a 	mov	r6,r19
10009938:	e00b883a 	mov	r5,fp
1000993c:	000a92c0 	call	1000a92c <memmove>
10009940:	80800217 	ldw	r2,8(r16)
10009944:	80c00017 	ldw	r3,0(r16)
10009948:	14c5c83a 	sub	r2,r2,r19
1000994c:	1cc7883a 	add	r3,r3,r19
10009950:	80800215 	stw	r2,8(r16)
10009954:	80c00015 	stw	r3,0(r16)
10009958:	10004326 	beq	r2,zero,10009a68 <__sfvwrite_r+0x45c>
1000995c:	9805883a 	mov	r2,r19
10009960:	003f8306 	br	10009770 <__alt_data_end+0xf8009770>
10009964:	b00d883a 	mov	r6,r22
10009968:	e00b883a 	mov	r5,fp
1000996c:	da000115 	stw	r8,4(sp)
10009970:	000a92c0 	call	1000a92c <memmove>
10009974:	80800217 	ldw	r2,8(r16)
10009978:	80c00017 	ldw	r3,0(r16)
1000997c:	da000117 	ldw	r8,4(sp)
10009980:	1585c83a 	sub	r2,r2,r22
10009984:	1dad883a 	add	r22,r3,r22
10009988:	80800215 	stw	r2,8(r16)
1000998c:	85800015 	stw	r22,0(r16)
10009990:	003fbf06 	br	10009890 <__alt_data_end+0xf8009890>
10009994:	81000017 	ldw	r4,0(r16)
10009998:	9027883a 	mov	r19,r18
1000999c:	902f883a 	mov	r23,r18
100099a0:	003f6906 	br	10009748 <__alt_data_end+0xf8009748>
100099a4:	900d883a 	mov	r6,r18
100099a8:	01400284 	movi	r5,10
100099ac:	e009883a 	mov	r4,fp
100099b0:	000a7000 	call	1000a700 <memchr>
100099b4:	10003e26 	beq	r2,zero,10009ab0 <__sfvwrite_r+0x4a4>
100099b8:	10800044 	addi	r2,r2,1
100099bc:	1727c83a 	sub	r19,r2,fp
100099c0:	02000044 	movi	r8,1
100099c4:	003f9d06 	br	1000983c <__alt_data_end+0xf800983c>
100099c8:	80800517 	ldw	r2,20(r16)
100099cc:	81400417 	ldw	r5,16(r16)
100099d0:	81c00017 	ldw	r7,0(r16)
100099d4:	10a7883a 	add	r19,r2,r2
100099d8:	9885883a 	add	r2,r19,r2
100099dc:	1026d7fa 	srli	r19,r2,31
100099e0:	396dc83a 	sub	r22,r7,r5
100099e4:	b1000044 	addi	r4,r22,1
100099e8:	9885883a 	add	r2,r19,r2
100099ec:	1027d07a 	srai	r19,r2,1
100099f0:	2485883a 	add	r2,r4,r18
100099f4:	980d883a 	mov	r6,r19
100099f8:	9880022e 	bgeu	r19,r2,10009a04 <__sfvwrite_r+0x3f8>
100099fc:	1027883a 	mov	r19,r2
10009a00:	100d883a 	mov	r6,r2
10009a04:	18c1000c 	andi	r3,r3,1024
10009a08:	18001c26 	beq	r3,zero,10009a7c <__sfvwrite_r+0x470>
10009a0c:	300b883a 	mov	r5,r6
10009a10:	a809883a 	mov	r4,r21
10009a14:	0009ef40 	call	10009ef4 <_malloc_r>
10009a18:	102f883a 	mov	r23,r2
10009a1c:	10002926 	beq	r2,zero,10009ac4 <__sfvwrite_r+0x4b8>
10009a20:	81400417 	ldw	r5,16(r16)
10009a24:	b00d883a 	mov	r6,r22
10009a28:	1009883a 	mov	r4,r2
10009a2c:	000a7e40 	call	1000a7e4 <memcpy>
10009a30:	8080030b 	ldhu	r2,12(r16)
10009a34:	00fedfc4 	movi	r3,-1153
10009a38:	10c4703a 	and	r2,r2,r3
10009a3c:	10802014 	ori	r2,r2,128
10009a40:	8080030d 	sth	r2,12(r16)
10009a44:	bd89883a 	add	r4,r23,r22
10009a48:	9d8fc83a 	sub	r7,r19,r22
10009a4c:	85c00415 	stw	r23,16(r16)
10009a50:	84c00515 	stw	r19,20(r16)
10009a54:	81000015 	stw	r4,0(r16)
10009a58:	9027883a 	mov	r19,r18
10009a5c:	81c00215 	stw	r7,8(r16)
10009a60:	902f883a 	mov	r23,r18
10009a64:	003f3806 	br	10009748 <__alt_data_end+0xf8009748>
10009a68:	800b883a 	mov	r5,r16
10009a6c:	a809883a 	mov	r4,r21
10009a70:	0008d9c0 	call	10008d9c <_fflush_r>
10009a74:	103fb926 	beq	r2,zero,1000995c <__alt_data_end+0xf800995c>
10009a78:	003f6506 	br	10009810 <__alt_data_end+0xf8009810>
10009a7c:	a809883a 	mov	r4,r21
10009a80:	000bc680 	call	1000bc68 <_realloc_r>
10009a84:	102f883a 	mov	r23,r2
10009a88:	103fee1e 	bne	r2,zero,10009a44 <__alt_data_end+0xf8009a44>
10009a8c:	81400417 	ldw	r5,16(r16)
10009a90:	a809883a 	mov	r4,r21
10009a94:	00092fc0 	call	100092fc <_free_r>
10009a98:	8080030b 	ldhu	r2,12(r16)
10009a9c:	00ffdfc4 	movi	r3,-129
10009aa0:	1884703a 	and	r2,r3,r2
10009aa4:	00c00304 	movi	r3,12
10009aa8:	a8c00015 	stw	r3,0(r21)
10009aac:	003f5906 	br	10009814 <__alt_data_end+0xf8009814>
10009ab0:	94c00044 	addi	r19,r18,1
10009ab4:	02000044 	movi	r8,1
10009ab8:	003f6006 	br	1000983c <__alt_data_end+0xf800983c>
10009abc:	00bfffc4 	movi	r2,-1
10009ac0:	003f0006 	br	100096c4 <__alt_data_end+0xf80096c4>
10009ac4:	00800304 	movi	r2,12
10009ac8:	a8800015 	stw	r2,0(r21)
10009acc:	8080030b 	ldhu	r2,12(r16)
10009ad0:	003f5006 	br	10009814 <__alt_data_end+0xf8009814>

10009ad4 <_fwalk>:
10009ad4:	defff704 	addi	sp,sp,-36
10009ad8:	dd000415 	stw	r20,16(sp)
10009adc:	dfc00815 	stw	ra,32(sp)
10009ae0:	ddc00715 	stw	r23,28(sp)
10009ae4:	dd800615 	stw	r22,24(sp)
10009ae8:	dd400515 	stw	r21,20(sp)
10009aec:	dcc00315 	stw	r19,12(sp)
10009af0:	dc800215 	stw	r18,8(sp)
10009af4:	dc400115 	stw	r17,4(sp)
10009af8:	dc000015 	stw	r16,0(sp)
10009afc:	2500b804 	addi	r20,r4,736
10009b00:	a0002326 	beq	r20,zero,10009b90 <_fwalk+0xbc>
10009b04:	282b883a 	mov	r21,r5
10009b08:	002f883a 	mov	r23,zero
10009b0c:	05800044 	movi	r22,1
10009b10:	04ffffc4 	movi	r19,-1
10009b14:	a4400117 	ldw	r17,4(r20)
10009b18:	a4800217 	ldw	r18,8(r20)
10009b1c:	8c7fffc4 	addi	r17,r17,-1
10009b20:	88000d16 	blt	r17,zero,10009b58 <_fwalk+0x84>
10009b24:	94000304 	addi	r16,r18,12
10009b28:	94800384 	addi	r18,r18,14
10009b2c:	8080000b 	ldhu	r2,0(r16)
10009b30:	8c7fffc4 	addi	r17,r17,-1
10009b34:	813ffd04 	addi	r4,r16,-12
10009b38:	b080042e 	bgeu	r22,r2,10009b4c <_fwalk+0x78>
10009b3c:	9080000f 	ldh	r2,0(r18)
10009b40:	14c00226 	beq	r2,r19,10009b4c <_fwalk+0x78>
10009b44:	a83ee83a 	callr	r21
10009b48:	b8aeb03a 	or	r23,r23,r2
10009b4c:	84001a04 	addi	r16,r16,104
10009b50:	94801a04 	addi	r18,r18,104
10009b54:	8cfff51e 	bne	r17,r19,10009b2c <__alt_data_end+0xf8009b2c>
10009b58:	a5000017 	ldw	r20,0(r20)
10009b5c:	a03fed1e 	bne	r20,zero,10009b14 <__alt_data_end+0xf8009b14>
10009b60:	b805883a 	mov	r2,r23
10009b64:	dfc00817 	ldw	ra,32(sp)
10009b68:	ddc00717 	ldw	r23,28(sp)
10009b6c:	dd800617 	ldw	r22,24(sp)
10009b70:	dd400517 	ldw	r21,20(sp)
10009b74:	dd000417 	ldw	r20,16(sp)
10009b78:	dcc00317 	ldw	r19,12(sp)
10009b7c:	dc800217 	ldw	r18,8(sp)
10009b80:	dc400117 	ldw	r17,4(sp)
10009b84:	dc000017 	ldw	r16,0(sp)
10009b88:	dec00904 	addi	sp,sp,36
10009b8c:	f800283a 	ret
10009b90:	002f883a 	mov	r23,zero
10009b94:	003ff206 	br	10009b60 <__alt_data_end+0xf8009b60>

10009b98 <_fwalk_reent>:
10009b98:	defff704 	addi	sp,sp,-36
10009b9c:	dd000415 	stw	r20,16(sp)
10009ba0:	dfc00815 	stw	ra,32(sp)
10009ba4:	ddc00715 	stw	r23,28(sp)
10009ba8:	dd800615 	stw	r22,24(sp)
10009bac:	dd400515 	stw	r21,20(sp)
10009bb0:	dcc00315 	stw	r19,12(sp)
10009bb4:	dc800215 	stw	r18,8(sp)
10009bb8:	dc400115 	stw	r17,4(sp)
10009bbc:	dc000015 	stw	r16,0(sp)
10009bc0:	2500b804 	addi	r20,r4,736
10009bc4:	a0002326 	beq	r20,zero,10009c54 <_fwalk_reent+0xbc>
10009bc8:	282b883a 	mov	r21,r5
10009bcc:	2027883a 	mov	r19,r4
10009bd0:	002f883a 	mov	r23,zero
10009bd4:	05800044 	movi	r22,1
10009bd8:	04bfffc4 	movi	r18,-1
10009bdc:	a4400117 	ldw	r17,4(r20)
10009be0:	a4000217 	ldw	r16,8(r20)
10009be4:	8c7fffc4 	addi	r17,r17,-1
10009be8:	88000c16 	blt	r17,zero,10009c1c <_fwalk_reent+0x84>
10009bec:	84000304 	addi	r16,r16,12
10009bf0:	8080000b 	ldhu	r2,0(r16)
10009bf4:	8c7fffc4 	addi	r17,r17,-1
10009bf8:	817ffd04 	addi	r5,r16,-12
10009bfc:	b080052e 	bgeu	r22,r2,10009c14 <_fwalk_reent+0x7c>
10009c00:	8080008f 	ldh	r2,2(r16)
10009c04:	9809883a 	mov	r4,r19
10009c08:	14800226 	beq	r2,r18,10009c14 <_fwalk_reent+0x7c>
10009c0c:	a83ee83a 	callr	r21
10009c10:	b8aeb03a 	or	r23,r23,r2
10009c14:	84001a04 	addi	r16,r16,104
10009c18:	8cbff51e 	bne	r17,r18,10009bf0 <__alt_data_end+0xf8009bf0>
10009c1c:	a5000017 	ldw	r20,0(r20)
10009c20:	a03fee1e 	bne	r20,zero,10009bdc <__alt_data_end+0xf8009bdc>
10009c24:	b805883a 	mov	r2,r23
10009c28:	dfc00817 	ldw	ra,32(sp)
10009c2c:	ddc00717 	ldw	r23,28(sp)
10009c30:	dd800617 	ldw	r22,24(sp)
10009c34:	dd400517 	ldw	r21,20(sp)
10009c38:	dd000417 	ldw	r20,16(sp)
10009c3c:	dcc00317 	ldw	r19,12(sp)
10009c40:	dc800217 	ldw	r18,8(sp)
10009c44:	dc400117 	ldw	r17,4(sp)
10009c48:	dc000017 	ldw	r16,0(sp)
10009c4c:	dec00904 	addi	sp,sp,36
10009c50:	f800283a 	ret
10009c54:	002f883a 	mov	r23,zero
10009c58:	003ff206 	br	10009c24 <__alt_data_end+0xf8009c24>

10009c5c <_setlocale_r>:
10009c5c:	30001b26 	beq	r6,zero,10009ccc <_setlocale_r+0x70>
10009c60:	01440074 	movhi	r5,4097
10009c64:	defffe04 	addi	sp,sp,-8
10009c68:	29534204 	addi	r5,r5,19720
10009c6c:	3009883a 	mov	r4,r6
10009c70:	dc000015 	stw	r16,0(sp)
10009c74:	dfc00115 	stw	ra,4(sp)
10009c78:	3021883a 	mov	r16,r6
10009c7c:	000c3d00 	call	1000c3d0 <strcmp>
10009c80:	1000061e 	bne	r2,zero,10009c9c <_setlocale_r+0x40>
10009c84:	00840074 	movhi	r2,4097
10009c88:	10934104 	addi	r2,r2,19716
10009c8c:	dfc00117 	ldw	ra,4(sp)
10009c90:	dc000017 	ldw	r16,0(sp)
10009c94:	dec00204 	addi	sp,sp,8
10009c98:	f800283a 	ret
10009c9c:	01440074 	movhi	r5,4097
10009ca0:	29534104 	addi	r5,r5,19716
10009ca4:	8009883a 	mov	r4,r16
10009ca8:	000c3d00 	call	1000c3d0 <strcmp>
10009cac:	103ff526 	beq	r2,zero,10009c84 <__alt_data_end+0xf8009c84>
10009cb0:	01440074 	movhi	r5,4097
10009cb4:	29532c04 	addi	r5,r5,19632
10009cb8:	8009883a 	mov	r4,r16
10009cbc:	000c3d00 	call	1000c3d0 <strcmp>
10009cc0:	103ff026 	beq	r2,zero,10009c84 <__alt_data_end+0xf8009c84>
10009cc4:	0005883a 	mov	r2,zero
10009cc8:	003ff006 	br	10009c8c <__alt_data_end+0xf8009c8c>
10009ccc:	00840074 	movhi	r2,4097
10009cd0:	10934104 	addi	r2,r2,19716
10009cd4:	f800283a 	ret

10009cd8 <__locale_charset>:
10009cd8:	00840074 	movhi	r2,4097
10009cdc:	1098a404 	addi	r2,r2,25232
10009ce0:	f800283a 	ret

10009ce4 <__locale_mb_cur_max>:
10009ce4:	00840074 	movhi	r2,4097
10009ce8:	109e4304 	addi	r2,r2,30988
10009cec:	10800017 	ldw	r2,0(r2)
10009cf0:	f800283a 	ret

10009cf4 <__locale_msgcharset>:
10009cf4:	00840074 	movhi	r2,4097
10009cf8:	10989c04 	addi	r2,r2,25200
10009cfc:	f800283a 	ret

10009d00 <__locale_cjk_lang>:
10009d00:	0005883a 	mov	r2,zero
10009d04:	f800283a 	ret

10009d08 <_localeconv_r>:
10009d08:	00840074 	movhi	r2,4097
10009d0c:	1098ac04 	addi	r2,r2,25264
10009d10:	f800283a 	ret

10009d14 <setlocale>:
10009d14:	00840074 	movhi	r2,4097
10009d18:	109e4204 	addi	r2,r2,30984
10009d1c:	280d883a 	mov	r6,r5
10009d20:	200b883a 	mov	r5,r4
10009d24:	11000017 	ldw	r4,0(r2)
10009d28:	0009c5c1 	jmpi	10009c5c <_setlocale_r>

10009d2c <localeconv>:
10009d2c:	00840074 	movhi	r2,4097
10009d30:	1098ac04 	addi	r2,r2,25264
10009d34:	f800283a 	ret

10009d38 <__smakebuf_r>:
10009d38:	2880030b 	ldhu	r2,12(r5)
10009d3c:	10c0008c 	andi	r3,r2,2
10009d40:	1800411e 	bne	r3,zero,10009e48 <__smakebuf_r+0x110>
10009d44:	deffec04 	addi	sp,sp,-80
10009d48:	dc000f15 	stw	r16,60(sp)
10009d4c:	2821883a 	mov	r16,r5
10009d50:	2940038f 	ldh	r5,14(r5)
10009d54:	dc401015 	stw	r17,64(sp)
10009d58:	dfc01315 	stw	ra,76(sp)
10009d5c:	dcc01215 	stw	r19,72(sp)
10009d60:	dc801115 	stw	r18,68(sp)
10009d64:	2023883a 	mov	r17,r4
10009d68:	28001c16 	blt	r5,zero,10009ddc <__smakebuf_r+0xa4>
10009d6c:	d80d883a 	mov	r6,sp
10009d70:	000e0400 	call	1000e040 <_fstat_r>
10009d74:	10001816 	blt	r2,zero,10009dd8 <__smakebuf_r+0xa0>
10009d78:	d8800117 	ldw	r2,4(sp)
10009d7c:	00e00014 	movui	r3,32768
10009d80:	10bc000c 	andi	r2,r2,61440
10009d84:	14c80020 	cmpeqi	r19,r2,8192
10009d88:	10c03726 	beq	r2,r3,10009e68 <__smakebuf_r+0x130>
10009d8c:	80c0030b 	ldhu	r3,12(r16)
10009d90:	18c20014 	ori	r3,r3,2048
10009d94:	80c0030d 	sth	r3,12(r16)
10009d98:	00c80004 	movi	r3,8192
10009d9c:	10c0521e 	bne	r2,r3,10009ee8 <__smakebuf_r+0x1b0>
10009da0:	8140038f 	ldh	r5,14(r16)
10009da4:	8809883a 	mov	r4,r17
10009da8:	000e09c0 	call	1000e09c <_isatty_r>
10009dac:	10004c26 	beq	r2,zero,10009ee0 <__smakebuf_r+0x1a8>
10009db0:	8080030b 	ldhu	r2,12(r16)
10009db4:	80c010c4 	addi	r3,r16,67
10009db8:	80c00015 	stw	r3,0(r16)
10009dbc:	10800054 	ori	r2,r2,1
10009dc0:	8080030d 	sth	r2,12(r16)
10009dc4:	00800044 	movi	r2,1
10009dc8:	80c00415 	stw	r3,16(r16)
10009dcc:	80800515 	stw	r2,20(r16)
10009dd0:	04810004 	movi	r18,1024
10009dd4:	00000706 	br	10009df4 <__smakebuf_r+0xbc>
10009dd8:	8080030b 	ldhu	r2,12(r16)
10009ddc:	10c0200c 	andi	r3,r2,128
10009de0:	18001f1e 	bne	r3,zero,10009e60 <__smakebuf_r+0x128>
10009de4:	04810004 	movi	r18,1024
10009de8:	10820014 	ori	r2,r2,2048
10009dec:	8080030d 	sth	r2,12(r16)
10009df0:	0027883a 	mov	r19,zero
10009df4:	900b883a 	mov	r5,r18
10009df8:	8809883a 	mov	r4,r17
10009dfc:	0009ef40 	call	10009ef4 <_malloc_r>
10009e00:	10002c26 	beq	r2,zero,10009eb4 <__smakebuf_r+0x17c>
10009e04:	80c0030b 	ldhu	r3,12(r16)
10009e08:	01040074 	movhi	r4,4097
10009e0c:	21238c04 	addi	r4,r4,-29136
10009e10:	89000f15 	stw	r4,60(r17)
10009e14:	18c02014 	ori	r3,r3,128
10009e18:	80c0030d 	sth	r3,12(r16)
10009e1c:	80800015 	stw	r2,0(r16)
10009e20:	80800415 	stw	r2,16(r16)
10009e24:	84800515 	stw	r18,20(r16)
10009e28:	98001a1e 	bne	r19,zero,10009e94 <__smakebuf_r+0x15c>
10009e2c:	dfc01317 	ldw	ra,76(sp)
10009e30:	dcc01217 	ldw	r19,72(sp)
10009e34:	dc801117 	ldw	r18,68(sp)
10009e38:	dc401017 	ldw	r17,64(sp)
10009e3c:	dc000f17 	ldw	r16,60(sp)
10009e40:	dec01404 	addi	sp,sp,80
10009e44:	f800283a 	ret
10009e48:	288010c4 	addi	r2,r5,67
10009e4c:	28800015 	stw	r2,0(r5)
10009e50:	28800415 	stw	r2,16(r5)
10009e54:	00800044 	movi	r2,1
10009e58:	28800515 	stw	r2,20(r5)
10009e5c:	f800283a 	ret
10009e60:	04801004 	movi	r18,64
10009e64:	003fe006 	br	10009de8 <__alt_data_end+0xf8009de8>
10009e68:	81000a17 	ldw	r4,40(r16)
10009e6c:	00c40074 	movhi	r3,4097
10009e70:	18f0db04 	addi	r3,r3,-15508
10009e74:	20ffc51e 	bne	r4,r3,10009d8c <__alt_data_end+0xf8009d8c>
10009e78:	8080030b 	ldhu	r2,12(r16)
10009e7c:	04810004 	movi	r18,1024
10009e80:	84801315 	stw	r18,76(r16)
10009e84:	1484b03a 	or	r2,r2,r18
10009e88:	8080030d 	sth	r2,12(r16)
10009e8c:	0027883a 	mov	r19,zero
10009e90:	003fd806 	br	10009df4 <__alt_data_end+0xf8009df4>
10009e94:	8140038f 	ldh	r5,14(r16)
10009e98:	8809883a 	mov	r4,r17
10009e9c:	000e09c0 	call	1000e09c <_isatty_r>
10009ea0:	103fe226 	beq	r2,zero,10009e2c <__alt_data_end+0xf8009e2c>
10009ea4:	8080030b 	ldhu	r2,12(r16)
10009ea8:	10800054 	ori	r2,r2,1
10009eac:	8080030d 	sth	r2,12(r16)
10009eb0:	003fde06 	br	10009e2c <__alt_data_end+0xf8009e2c>
10009eb4:	8080030b 	ldhu	r2,12(r16)
10009eb8:	10c0800c 	andi	r3,r2,512
10009ebc:	183fdb1e 	bne	r3,zero,10009e2c <__alt_data_end+0xf8009e2c>
10009ec0:	10800094 	ori	r2,r2,2
10009ec4:	80c010c4 	addi	r3,r16,67
10009ec8:	8080030d 	sth	r2,12(r16)
10009ecc:	00800044 	movi	r2,1
10009ed0:	80c00015 	stw	r3,0(r16)
10009ed4:	80c00415 	stw	r3,16(r16)
10009ed8:	80800515 	stw	r2,20(r16)
10009edc:	003fd306 	br	10009e2c <__alt_data_end+0xf8009e2c>
10009ee0:	04810004 	movi	r18,1024
10009ee4:	003fc306 	br	10009df4 <__alt_data_end+0xf8009df4>
10009ee8:	0027883a 	mov	r19,zero
10009eec:	04810004 	movi	r18,1024
10009ef0:	003fc006 	br	10009df4 <__alt_data_end+0xf8009df4>

10009ef4 <_malloc_r>:
10009ef4:	defff504 	addi	sp,sp,-44
10009ef8:	dc800315 	stw	r18,12(sp)
10009efc:	dfc00a15 	stw	ra,40(sp)
10009f00:	df000915 	stw	fp,36(sp)
10009f04:	ddc00815 	stw	r23,32(sp)
10009f08:	dd800715 	stw	r22,28(sp)
10009f0c:	dd400615 	stw	r21,24(sp)
10009f10:	dd000515 	stw	r20,20(sp)
10009f14:	dcc00415 	stw	r19,16(sp)
10009f18:	dc400215 	stw	r17,8(sp)
10009f1c:	dc000115 	stw	r16,4(sp)
10009f20:	288002c4 	addi	r2,r5,11
10009f24:	00c00584 	movi	r3,22
10009f28:	2025883a 	mov	r18,r4
10009f2c:	18807f2e 	bgeu	r3,r2,1000a12c <_malloc_r+0x238>
10009f30:	047ffe04 	movi	r17,-8
10009f34:	1462703a 	and	r17,r2,r17
10009f38:	8800a316 	blt	r17,zero,1000a1c8 <_malloc_r+0x2d4>
10009f3c:	8940a236 	bltu	r17,r5,1000a1c8 <_malloc_r+0x2d4>
10009f40:	00120a40 	call	100120a4 <__malloc_lock>
10009f44:	00807dc4 	movi	r2,503
10009f48:	1441e92e 	bgeu	r2,r17,1000a6f0 <_malloc_r+0x7fc>
10009f4c:	8804d27a 	srli	r2,r17,9
10009f50:	1000a126 	beq	r2,zero,1000a1d8 <_malloc_r+0x2e4>
10009f54:	00c00104 	movi	r3,4
10009f58:	18811e36 	bltu	r3,r2,1000a3d4 <_malloc_r+0x4e0>
10009f5c:	8804d1ba 	srli	r2,r17,6
10009f60:	12000e44 	addi	r8,r2,57
10009f64:	11c00e04 	addi	r7,r2,56
10009f68:	4209883a 	add	r4,r8,r8
10009f6c:	04c40074 	movhi	r19,4097
10009f70:	2109883a 	add	r4,r4,r4
10009f74:	9cd8ba04 	addi	r19,r19,25320
10009f78:	2109883a 	add	r4,r4,r4
10009f7c:	9909883a 	add	r4,r19,r4
10009f80:	24000117 	ldw	r16,4(r4)
10009f84:	213ffe04 	addi	r4,r4,-8
10009f88:	24009726 	beq	r4,r16,1000a1e8 <_malloc_r+0x2f4>
10009f8c:	80800117 	ldw	r2,4(r16)
10009f90:	01bfff04 	movi	r6,-4
10009f94:	014003c4 	movi	r5,15
10009f98:	1184703a 	and	r2,r2,r6
10009f9c:	1447c83a 	sub	r3,r2,r17
10009fa0:	28c00716 	blt	r5,r3,10009fc0 <_malloc_r+0xcc>
10009fa4:	1800920e 	bge	r3,zero,1000a1f0 <_malloc_r+0x2fc>
10009fa8:	84000317 	ldw	r16,12(r16)
10009fac:	24008e26 	beq	r4,r16,1000a1e8 <_malloc_r+0x2f4>
10009fb0:	80800117 	ldw	r2,4(r16)
10009fb4:	1184703a 	and	r2,r2,r6
10009fb8:	1447c83a 	sub	r3,r2,r17
10009fbc:	28fff90e 	bge	r5,r3,10009fa4 <__alt_data_end+0xf8009fa4>
10009fc0:	3809883a 	mov	r4,r7
10009fc4:	01840074 	movhi	r6,4097
10009fc8:	9c000417 	ldw	r16,16(r19)
10009fcc:	3198ba04 	addi	r6,r6,25320
10009fd0:	32000204 	addi	r8,r6,8
10009fd4:	82013426 	beq	r16,r8,1000a4a8 <_malloc_r+0x5b4>
10009fd8:	80c00117 	ldw	r3,4(r16)
10009fdc:	00bfff04 	movi	r2,-4
10009fe0:	188e703a 	and	r7,r3,r2
10009fe4:	3c45c83a 	sub	r2,r7,r17
10009fe8:	00c003c4 	movi	r3,15
10009fec:	18811f16 	blt	r3,r2,1000a46c <_malloc_r+0x578>
10009ff0:	32000515 	stw	r8,20(r6)
10009ff4:	32000415 	stw	r8,16(r6)
10009ff8:	10007f0e 	bge	r2,zero,1000a1f8 <_malloc_r+0x304>
10009ffc:	00807fc4 	movi	r2,511
1000a000:	11c0fd36 	bltu	r2,r7,1000a3f8 <_malloc_r+0x504>
1000a004:	3806d0fa 	srli	r3,r7,3
1000a008:	01c00044 	movi	r7,1
1000a00c:	30800117 	ldw	r2,4(r6)
1000a010:	19400044 	addi	r5,r3,1
1000a014:	294b883a 	add	r5,r5,r5
1000a018:	1807d0ba 	srai	r3,r3,2
1000a01c:	294b883a 	add	r5,r5,r5
1000a020:	294b883a 	add	r5,r5,r5
1000a024:	298b883a 	add	r5,r5,r6
1000a028:	38c6983a 	sll	r3,r7,r3
1000a02c:	29c00017 	ldw	r7,0(r5)
1000a030:	2a7ffe04 	addi	r9,r5,-8
1000a034:	1886b03a 	or	r3,r3,r2
1000a038:	82400315 	stw	r9,12(r16)
1000a03c:	81c00215 	stw	r7,8(r16)
1000a040:	30c00115 	stw	r3,4(r6)
1000a044:	2c000015 	stw	r16,0(r5)
1000a048:	3c000315 	stw	r16,12(r7)
1000a04c:	2005d0ba 	srai	r2,r4,2
1000a050:	01400044 	movi	r5,1
1000a054:	288a983a 	sll	r5,r5,r2
1000a058:	19406f36 	bltu	r3,r5,1000a218 <_malloc_r+0x324>
1000a05c:	28c4703a 	and	r2,r5,r3
1000a060:	10000a1e 	bne	r2,zero,1000a08c <_malloc_r+0x198>
1000a064:	00bfff04 	movi	r2,-4
1000a068:	294b883a 	add	r5,r5,r5
1000a06c:	2088703a 	and	r4,r4,r2
1000a070:	28c4703a 	and	r2,r5,r3
1000a074:	21000104 	addi	r4,r4,4
1000a078:	1000041e 	bne	r2,zero,1000a08c <_malloc_r+0x198>
1000a07c:	294b883a 	add	r5,r5,r5
1000a080:	28c4703a 	and	r2,r5,r3
1000a084:	21000104 	addi	r4,r4,4
1000a088:	103ffc26 	beq	r2,zero,1000a07c <__alt_data_end+0xf800a07c>
1000a08c:	02bfff04 	movi	r10,-4
1000a090:	024003c4 	movi	r9,15
1000a094:	21800044 	addi	r6,r4,1
1000a098:	318d883a 	add	r6,r6,r6
1000a09c:	318d883a 	add	r6,r6,r6
1000a0a0:	318d883a 	add	r6,r6,r6
1000a0a4:	998d883a 	add	r6,r19,r6
1000a0a8:	333ffe04 	addi	r12,r6,-8
1000a0ac:	2017883a 	mov	r11,r4
1000a0b0:	31800104 	addi	r6,r6,4
1000a0b4:	34000017 	ldw	r16,0(r6)
1000a0b8:	31fffd04 	addi	r7,r6,-12
1000a0bc:	81c0041e 	bne	r16,r7,1000a0d0 <_malloc_r+0x1dc>
1000a0c0:	0000fb06 	br	1000a4b0 <_malloc_r+0x5bc>
1000a0c4:	1801030e 	bge	r3,zero,1000a4d4 <_malloc_r+0x5e0>
1000a0c8:	84000317 	ldw	r16,12(r16)
1000a0cc:	81c0f826 	beq	r16,r7,1000a4b0 <_malloc_r+0x5bc>
1000a0d0:	80800117 	ldw	r2,4(r16)
1000a0d4:	1284703a 	and	r2,r2,r10
1000a0d8:	1447c83a 	sub	r3,r2,r17
1000a0dc:	48fff90e 	bge	r9,r3,1000a0c4 <__alt_data_end+0xf800a0c4>
1000a0e0:	80800317 	ldw	r2,12(r16)
1000a0e4:	81000217 	ldw	r4,8(r16)
1000a0e8:	89400054 	ori	r5,r17,1
1000a0ec:	81400115 	stw	r5,4(r16)
1000a0f0:	20800315 	stw	r2,12(r4)
1000a0f4:	11000215 	stw	r4,8(r2)
1000a0f8:	8463883a 	add	r17,r16,r17
1000a0fc:	9c400515 	stw	r17,20(r19)
1000a100:	9c400415 	stw	r17,16(r19)
1000a104:	18800054 	ori	r2,r3,1
1000a108:	88800115 	stw	r2,4(r17)
1000a10c:	8a000315 	stw	r8,12(r17)
1000a110:	8a000215 	stw	r8,8(r17)
1000a114:	88e3883a 	add	r17,r17,r3
1000a118:	88c00015 	stw	r3,0(r17)
1000a11c:	9009883a 	mov	r4,r18
1000a120:	00120c80 	call	100120c8 <__malloc_unlock>
1000a124:	80800204 	addi	r2,r16,8
1000a128:	00001b06 	br	1000a198 <_malloc_r+0x2a4>
1000a12c:	04400404 	movi	r17,16
1000a130:	89402536 	bltu	r17,r5,1000a1c8 <_malloc_r+0x2d4>
1000a134:	00120a40 	call	100120a4 <__malloc_lock>
1000a138:	00800184 	movi	r2,6
1000a13c:	01000084 	movi	r4,2
1000a140:	04c40074 	movhi	r19,4097
1000a144:	1085883a 	add	r2,r2,r2
1000a148:	9cd8ba04 	addi	r19,r19,25320
1000a14c:	1085883a 	add	r2,r2,r2
1000a150:	9885883a 	add	r2,r19,r2
1000a154:	14000117 	ldw	r16,4(r2)
1000a158:	10fffe04 	addi	r3,r2,-8
1000a15c:	80c0d926 	beq	r16,r3,1000a4c4 <_malloc_r+0x5d0>
1000a160:	80c00117 	ldw	r3,4(r16)
1000a164:	81000317 	ldw	r4,12(r16)
1000a168:	00bfff04 	movi	r2,-4
1000a16c:	1884703a 	and	r2,r3,r2
1000a170:	81400217 	ldw	r5,8(r16)
1000a174:	8085883a 	add	r2,r16,r2
1000a178:	10c00117 	ldw	r3,4(r2)
1000a17c:	29000315 	stw	r4,12(r5)
1000a180:	21400215 	stw	r5,8(r4)
1000a184:	18c00054 	ori	r3,r3,1
1000a188:	10c00115 	stw	r3,4(r2)
1000a18c:	9009883a 	mov	r4,r18
1000a190:	00120c80 	call	100120c8 <__malloc_unlock>
1000a194:	80800204 	addi	r2,r16,8
1000a198:	dfc00a17 	ldw	ra,40(sp)
1000a19c:	df000917 	ldw	fp,36(sp)
1000a1a0:	ddc00817 	ldw	r23,32(sp)
1000a1a4:	dd800717 	ldw	r22,28(sp)
1000a1a8:	dd400617 	ldw	r21,24(sp)
1000a1ac:	dd000517 	ldw	r20,20(sp)
1000a1b0:	dcc00417 	ldw	r19,16(sp)
1000a1b4:	dc800317 	ldw	r18,12(sp)
1000a1b8:	dc400217 	ldw	r17,8(sp)
1000a1bc:	dc000117 	ldw	r16,4(sp)
1000a1c0:	dec00b04 	addi	sp,sp,44
1000a1c4:	f800283a 	ret
1000a1c8:	00800304 	movi	r2,12
1000a1cc:	90800015 	stw	r2,0(r18)
1000a1d0:	0005883a 	mov	r2,zero
1000a1d4:	003ff006 	br	1000a198 <__alt_data_end+0xf800a198>
1000a1d8:	01002004 	movi	r4,128
1000a1dc:	02001004 	movi	r8,64
1000a1e0:	01c00fc4 	movi	r7,63
1000a1e4:	003f6106 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a1e8:	4009883a 	mov	r4,r8
1000a1ec:	003f7506 	br	10009fc4 <__alt_data_end+0xf8009fc4>
1000a1f0:	81000317 	ldw	r4,12(r16)
1000a1f4:	003fde06 	br	1000a170 <__alt_data_end+0xf800a170>
1000a1f8:	81c5883a 	add	r2,r16,r7
1000a1fc:	11400117 	ldw	r5,4(r2)
1000a200:	9009883a 	mov	r4,r18
1000a204:	29400054 	ori	r5,r5,1
1000a208:	11400115 	stw	r5,4(r2)
1000a20c:	00120c80 	call	100120c8 <__malloc_unlock>
1000a210:	80800204 	addi	r2,r16,8
1000a214:	003fe006 	br	1000a198 <__alt_data_end+0xf800a198>
1000a218:	9c000217 	ldw	r16,8(r19)
1000a21c:	00bfff04 	movi	r2,-4
1000a220:	85800117 	ldw	r22,4(r16)
1000a224:	b0ac703a 	and	r22,r22,r2
1000a228:	b4400336 	bltu	r22,r17,1000a238 <_malloc_r+0x344>
1000a22c:	b445c83a 	sub	r2,r22,r17
1000a230:	00c003c4 	movi	r3,15
1000a234:	18805d16 	blt	r3,r2,1000a3ac <_malloc_r+0x4b8>
1000a238:	05c40074 	movhi	r23,4097
1000a23c:	008400b4 	movhi	r2,4098
1000a240:	10a8cd04 	addi	r2,r2,-23756
1000a244:	bdde4404 	addi	r23,r23,30992
1000a248:	15400017 	ldw	r21,0(r2)
1000a24c:	b8c00017 	ldw	r3,0(r23)
1000a250:	00bfffc4 	movi	r2,-1
1000a254:	858d883a 	add	r6,r16,r22
1000a258:	8d6b883a 	add	r21,r17,r21
1000a25c:	1880ea26 	beq	r3,r2,1000a608 <_malloc_r+0x714>
1000a260:	ad4403c4 	addi	r21,r21,4111
1000a264:	00bc0004 	movi	r2,-4096
1000a268:	a8aa703a 	and	r21,r21,r2
1000a26c:	a80b883a 	mov	r5,r21
1000a270:	9009883a 	mov	r4,r18
1000a274:	d9800015 	stw	r6,0(sp)
1000a278:	000c2400 	call	1000c240 <_sbrk_r>
1000a27c:	1029883a 	mov	r20,r2
1000a280:	00bfffc4 	movi	r2,-1
1000a284:	d9800017 	ldw	r6,0(sp)
1000a288:	a080e826 	beq	r20,r2,1000a62c <_malloc_r+0x738>
1000a28c:	a180a636 	bltu	r20,r6,1000a528 <_malloc_r+0x634>
1000a290:	070400b4 	movhi	fp,4098
1000a294:	e72a7204 	addi	fp,fp,-22072
1000a298:	e0800017 	ldw	r2,0(fp)
1000a29c:	a887883a 	add	r3,r21,r2
1000a2a0:	e0c00015 	stw	r3,0(fp)
1000a2a4:	3500e626 	beq	r6,r20,1000a640 <_malloc_r+0x74c>
1000a2a8:	b9000017 	ldw	r4,0(r23)
1000a2ac:	00bfffc4 	movi	r2,-1
1000a2b0:	2080ee26 	beq	r4,r2,1000a66c <_malloc_r+0x778>
1000a2b4:	a185c83a 	sub	r2,r20,r6
1000a2b8:	10c5883a 	add	r2,r2,r3
1000a2bc:	e0800015 	stw	r2,0(fp)
1000a2c0:	a0c001cc 	andi	r3,r20,7
1000a2c4:	1800bc26 	beq	r3,zero,1000a5b8 <_malloc_r+0x6c4>
1000a2c8:	a0e9c83a 	sub	r20,r20,r3
1000a2cc:	00840204 	movi	r2,4104
1000a2d0:	a5000204 	addi	r20,r20,8
1000a2d4:	10c7c83a 	sub	r3,r2,r3
1000a2d8:	a545883a 	add	r2,r20,r21
1000a2dc:	1083ffcc 	andi	r2,r2,4095
1000a2e0:	18abc83a 	sub	r21,r3,r2
1000a2e4:	a80b883a 	mov	r5,r21
1000a2e8:	9009883a 	mov	r4,r18
1000a2ec:	000c2400 	call	1000c240 <_sbrk_r>
1000a2f0:	00ffffc4 	movi	r3,-1
1000a2f4:	10c0e126 	beq	r2,r3,1000a67c <_malloc_r+0x788>
1000a2f8:	1505c83a 	sub	r2,r2,r20
1000a2fc:	1545883a 	add	r2,r2,r21
1000a300:	10800054 	ori	r2,r2,1
1000a304:	e0c00017 	ldw	r3,0(fp)
1000a308:	9d000215 	stw	r20,8(r19)
1000a30c:	a0800115 	stw	r2,4(r20)
1000a310:	a8c7883a 	add	r3,r21,r3
1000a314:	e0c00015 	stw	r3,0(fp)
1000a318:	84c00e26 	beq	r16,r19,1000a354 <_malloc_r+0x460>
1000a31c:	018003c4 	movi	r6,15
1000a320:	3580a72e 	bgeu	r6,r22,1000a5c0 <_malloc_r+0x6cc>
1000a324:	81400117 	ldw	r5,4(r16)
1000a328:	013ffe04 	movi	r4,-8
1000a32c:	b0bffd04 	addi	r2,r22,-12
1000a330:	1104703a 	and	r2,r2,r4
1000a334:	2900004c 	andi	r4,r5,1
1000a338:	2088b03a 	or	r4,r4,r2
1000a33c:	81000115 	stw	r4,4(r16)
1000a340:	01400144 	movi	r5,5
1000a344:	8089883a 	add	r4,r16,r2
1000a348:	21400115 	stw	r5,4(r4)
1000a34c:	21400215 	stw	r5,8(r4)
1000a350:	3080cd36 	bltu	r6,r2,1000a688 <_malloc_r+0x794>
1000a354:	008400b4 	movhi	r2,4098
1000a358:	10a8cc04 	addi	r2,r2,-23760
1000a35c:	11000017 	ldw	r4,0(r2)
1000a360:	20c0012e 	bgeu	r4,r3,1000a368 <_malloc_r+0x474>
1000a364:	10c00015 	stw	r3,0(r2)
1000a368:	008400b4 	movhi	r2,4098
1000a36c:	10a8cb04 	addi	r2,r2,-23764
1000a370:	11000017 	ldw	r4,0(r2)
1000a374:	9c000217 	ldw	r16,8(r19)
1000a378:	20c0012e 	bgeu	r4,r3,1000a380 <_malloc_r+0x48c>
1000a37c:	10c00015 	stw	r3,0(r2)
1000a380:	80c00117 	ldw	r3,4(r16)
1000a384:	00bfff04 	movi	r2,-4
1000a388:	1886703a 	and	r3,r3,r2
1000a38c:	1c45c83a 	sub	r2,r3,r17
1000a390:	1c400236 	bltu	r3,r17,1000a39c <_malloc_r+0x4a8>
1000a394:	00c003c4 	movi	r3,15
1000a398:	18800416 	blt	r3,r2,1000a3ac <_malloc_r+0x4b8>
1000a39c:	9009883a 	mov	r4,r18
1000a3a0:	00120c80 	call	100120c8 <__malloc_unlock>
1000a3a4:	0005883a 	mov	r2,zero
1000a3a8:	003f7b06 	br	1000a198 <__alt_data_end+0xf800a198>
1000a3ac:	88c00054 	ori	r3,r17,1
1000a3b0:	80c00115 	stw	r3,4(r16)
1000a3b4:	8463883a 	add	r17,r16,r17
1000a3b8:	10800054 	ori	r2,r2,1
1000a3bc:	9c400215 	stw	r17,8(r19)
1000a3c0:	88800115 	stw	r2,4(r17)
1000a3c4:	9009883a 	mov	r4,r18
1000a3c8:	00120c80 	call	100120c8 <__malloc_unlock>
1000a3cc:	80800204 	addi	r2,r16,8
1000a3d0:	003f7106 	br	1000a198 <__alt_data_end+0xf800a198>
1000a3d4:	00c00504 	movi	r3,20
1000a3d8:	18804a2e 	bgeu	r3,r2,1000a504 <_malloc_r+0x610>
1000a3dc:	00c01504 	movi	r3,84
1000a3e0:	18806e36 	bltu	r3,r2,1000a59c <_malloc_r+0x6a8>
1000a3e4:	8804d33a 	srli	r2,r17,12
1000a3e8:	12001bc4 	addi	r8,r2,111
1000a3ec:	11c01b84 	addi	r7,r2,110
1000a3f0:	4209883a 	add	r4,r8,r8
1000a3f4:	003edd06 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a3f8:	3804d27a 	srli	r2,r7,9
1000a3fc:	00c00104 	movi	r3,4
1000a400:	1880442e 	bgeu	r3,r2,1000a514 <_malloc_r+0x620>
1000a404:	00c00504 	movi	r3,20
1000a408:	18808136 	bltu	r3,r2,1000a610 <_malloc_r+0x71c>
1000a40c:	11401704 	addi	r5,r2,92
1000a410:	10c016c4 	addi	r3,r2,91
1000a414:	294b883a 	add	r5,r5,r5
1000a418:	294b883a 	add	r5,r5,r5
1000a41c:	294b883a 	add	r5,r5,r5
1000a420:	994b883a 	add	r5,r19,r5
1000a424:	28800017 	ldw	r2,0(r5)
1000a428:	01840074 	movhi	r6,4097
1000a42c:	297ffe04 	addi	r5,r5,-8
1000a430:	3198ba04 	addi	r6,r6,25320
1000a434:	28806526 	beq	r5,r2,1000a5cc <_malloc_r+0x6d8>
1000a438:	01bfff04 	movi	r6,-4
1000a43c:	10c00117 	ldw	r3,4(r2)
1000a440:	1986703a 	and	r3,r3,r6
1000a444:	38c0022e 	bgeu	r7,r3,1000a450 <_malloc_r+0x55c>
1000a448:	10800217 	ldw	r2,8(r2)
1000a44c:	28bffb1e 	bne	r5,r2,1000a43c <__alt_data_end+0xf800a43c>
1000a450:	11400317 	ldw	r5,12(r2)
1000a454:	98c00117 	ldw	r3,4(r19)
1000a458:	81400315 	stw	r5,12(r16)
1000a45c:	80800215 	stw	r2,8(r16)
1000a460:	2c000215 	stw	r16,8(r5)
1000a464:	14000315 	stw	r16,12(r2)
1000a468:	003ef806 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a46c:	88c00054 	ori	r3,r17,1
1000a470:	80c00115 	stw	r3,4(r16)
1000a474:	8463883a 	add	r17,r16,r17
1000a478:	34400515 	stw	r17,20(r6)
1000a47c:	34400415 	stw	r17,16(r6)
1000a480:	10c00054 	ori	r3,r2,1
1000a484:	8a000315 	stw	r8,12(r17)
1000a488:	8a000215 	stw	r8,8(r17)
1000a48c:	88c00115 	stw	r3,4(r17)
1000a490:	88a3883a 	add	r17,r17,r2
1000a494:	88800015 	stw	r2,0(r17)
1000a498:	9009883a 	mov	r4,r18
1000a49c:	00120c80 	call	100120c8 <__malloc_unlock>
1000a4a0:	80800204 	addi	r2,r16,8
1000a4a4:	003f3c06 	br	1000a198 <__alt_data_end+0xf800a198>
1000a4a8:	30c00117 	ldw	r3,4(r6)
1000a4ac:	003ee706 	br	1000a04c <__alt_data_end+0xf800a04c>
1000a4b0:	5ac00044 	addi	r11,r11,1
1000a4b4:	588000cc 	andi	r2,r11,3
1000a4b8:	31800204 	addi	r6,r6,8
1000a4bc:	103efd1e 	bne	r2,zero,1000a0b4 <__alt_data_end+0xf800a0b4>
1000a4c0:	00002406 	br	1000a554 <_malloc_r+0x660>
1000a4c4:	14000317 	ldw	r16,12(r2)
1000a4c8:	143f251e 	bne	r2,r16,1000a160 <__alt_data_end+0xf800a160>
1000a4cc:	21000084 	addi	r4,r4,2
1000a4d0:	003ebc06 	br	10009fc4 <__alt_data_end+0xf8009fc4>
1000a4d4:	8085883a 	add	r2,r16,r2
1000a4d8:	10c00117 	ldw	r3,4(r2)
1000a4dc:	81000317 	ldw	r4,12(r16)
1000a4e0:	81400217 	ldw	r5,8(r16)
1000a4e4:	18c00054 	ori	r3,r3,1
1000a4e8:	10c00115 	stw	r3,4(r2)
1000a4ec:	29000315 	stw	r4,12(r5)
1000a4f0:	21400215 	stw	r5,8(r4)
1000a4f4:	9009883a 	mov	r4,r18
1000a4f8:	00120c80 	call	100120c8 <__malloc_unlock>
1000a4fc:	80800204 	addi	r2,r16,8
1000a500:	003f2506 	br	1000a198 <__alt_data_end+0xf800a198>
1000a504:	12001704 	addi	r8,r2,92
1000a508:	11c016c4 	addi	r7,r2,91
1000a50c:	4209883a 	add	r4,r8,r8
1000a510:	003e9606 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a514:	3804d1ba 	srli	r2,r7,6
1000a518:	11400e44 	addi	r5,r2,57
1000a51c:	10c00e04 	addi	r3,r2,56
1000a520:	294b883a 	add	r5,r5,r5
1000a524:	003fbc06 	br	1000a418 <__alt_data_end+0xf800a418>
1000a528:	84ff5926 	beq	r16,r19,1000a290 <__alt_data_end+0xf800a290>
1000a52c:	00840074 	movhi	r2,4097
1000a530:	1098ba04 	addi	r2,r2,25320
1000a534:	14000217 	ldw	r16,8(r2)
1000a538:	00bfff04 	movi	r2,-4
1000a53c:	80c00117 	ldw	r3,4(r16)
1000a540:	1886703a 	and	r3,r3,r2
1000a544:	003f9106 	br	1000a38c <__alt_data_end+0xf800a38c>
1000a548:	60800217 	ldw	r2,8(r12)
1000a54c:	213fffc4 	addi	r4,r4,-1
1000a550:	1300651e 	bne	r2,r12,1000a6e8 <_malloc_r+0x7f4>
1000a554:	208000cc 	andi	r2,r4,3
1000a558:	633ffe04 	addi	r12,r12,-8
1000a55c:	103ffa1e 	bne	r2,zero,1000a548 <__alt_data_end+0xf800a548>
1000a560:	98800117 	ldw	r2,4(r19)
1000a564:	0146303a 	nor	r3,zero,r5
1000a568:	1884703a 	and	r2,r3,r2
1000a56c:	98800115 	stw	r2,4(r19)
1000a570:	294b883a 	add	r5,r5,r5
1000a574:	117f2836 	bltu	r2,r5,1000a218 <__alt_data_end+0xf800a218>
1000a578:	283f2726 	beq	r5,zero,1000a218 <__alt_data_end+0xf800a218>
1000a57c:	2886703a 	and	r3,r5,r2
1000a580:	5809883a 	mov	r4,r11
1000a584:	183ec31e 	bne	r3,zero,1000a094 <__alt_data_end+0xf800a094>
1000a588:	294b883a 	add	r5,r5,r5
1000a58c:	2886703a 	and	r3,r5,r2
1000a590:	21000104 	addi	r4,r4,4
1000a594:	183ffc26 	beq	r3,zero,1000a588 <__alt_data_end+0xf800a588>
1000a598:	003ebe06 	br	1000a094 <__alt_data_end+0xf800a094>
1000a59c:	00c05504 	movi	r3,340
1000a5a0:	18801236 	bltu	r3,r2,1000a5ec <_malloc_r+0x6f8>
1000a5a4:	8804d3fa 	srli	r2,r17,15
1000a5a8:	12001e04 	addi	r8,r2,120
1000a5ac:	11c01dc4 	addi	r7,r2,119
1000a5b0:	4209883a 	add	r4,r8,r8
1000a5b4:	003e6d06 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a5b8:	00c40004 	movi	r3,4096
1000a5bc:	003f4606 	br	1000a2d8 <__alt_data_end+0xf800a2d8>
1000a5c0:	00800044 	movi	r2,1
1000a5c4:	a0800115 	stw	r2,4(r20)
1000a5c8:	003f7406 	br	1000a39c <__alt_data_end+0xf800a39c>
1000a5cc:	1805d0ba 	srai	r2,r3,2
1000a5d0:	01c00044 	movi	r7,1
1000a5d4:	30c00117 	ldw	r3,4(r6)
1000a5d8:	388e983a 	sll	r7,r7,r2
1000a5dc:	2805883a 	mov	r2,r5
1000a5e0:	38c6b03a 	or	r3,r7,r3
1000a5e4:	30c00115 	stw	r3,4(r6)
1000a5e8:	003f9b06 	br	1000a458 <__alt_data_end+0xf800a458>
1000a5ec:	00c15504 	movi	r3,1364
1000a5f0:	18801a36 	bltu	r3,r2,1000a65c <_malloc_r+0x768>
1000a5f4:	8804d4ba 	srli	r2,r17,18
1000a5f8:	12001f44 	addi	r8,r2,125
1000a5fc:	11c01f04 	addi	r7,r2,124
1000a600:	4209883a 	add	r4,r8,r8
1000a604:	003e5906 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a608:	ad400404 	addi	r21,r21,16
1000a60c:	003f1706 	br	1000a26c <__alt_data_end+0xf800a26c>
1000a610:	00c01504 	movi	r3,84
1000a614:	18802336 	bltu	r3,r2,1000a6a4 <_malloc_r+0x7b0>
1000a618:	3804d33a 	srli	r2,r7,12
1000a61c:	11401bc4 	addi	r5,r2,111
1000a620:	10c01b84 	addi	r3,r2,110
1000a624:	294b883a 	add	r5,r5,r5
1000a628:	003f7b06 	br	1000a418 <__alt_data_end+0xf800a418>
1000a62c:	9c000217 	ldw	r16,8(r19)
1000a630:	00bfff04 	movi	r2,-4
1000a634:	80c00117 	ldw	r3,4(r16)
1000a638:	1886703a 	and	r3,r3,r2
1000a63c:	003f5306 	br	1000a38c <__alt_data_end+0xf800a38c>
1000a640:	3083ffcc 	andi	r2,r6,4095
1000a644:	103f181e 	bne	r2,zero,1000a2a8 <__alt_data_end+0xf800a2a8>
1000a648:	99000217 	ldw	r4,8(r19)
1000a64c:	b545883a 	add	r2,r22,r21
1000a650:	10800054 	ori	r2,r2,1
1000a654:	20800115 	stw	r2,4(r4)
1000a658:	003f3e06 	br	1000a354 <__alt_data_end+0xf800a354>
1000a65c:	01003f84 	movi	r4,254
1000a660:	02001fc4 	movi	r8,127
1000a664:	01c01f84 	movi	r7,126
1000a668:	003e4006 	br	10009f6c <__alt_data_end+0xf8009f6c>
1000a66c:	00840074 	movhi	r2,4097
1000a670:	109e4404 	addi	r2,r2,30992
1000a674:	15000015 	stw	r20,0(r2)
1000a678:	003f1106 	br	1000a2c0 <__alt_data_end+0xf800a2c0>
1000a67c:	00800044 	movi	r2,1
1000a680:	002b883a 	mov	r21,zero
1000a684:	003f1f06 	br	1000a304 <__alt_data_end+0xf800a304>
1000a688:	81400204 	addi	r5,r16,8
1000a68c:	9009883a 	mov	r4,r18
1000a690:	00092fc0 	call	100092fc <_free_r>
1000a694:	008400b4 	movhi	r2,4098
1000a698:	10aa7204 	addi	r2,r2,-22072
1000a69c:	10c00017 	ldw	r3,0(r2)
1000a6a0:	003f2c06 	br	1000a354 <__alt_data_end+0xf800a354>
1000a6a4:	00c05504 	movi	r3,340
1000a6a8:	18800536 	bltu	r3,r2,1000a6c0 <_malloc_r+0x7cc>
1000a6ac:	3804d3fa 	srli	r2,r7,15
1000a6b0:	11401e04 	addi	r5,r2,120
1000a6b4:	10c01dc4 	addi	r3,r2,119
1000a6b8:	294b883a 	add	r5,r5,r5
1000a6bc:	003f5606 	br	1000a418 <__alt_data_end+0xf800a418>
1000a6c0:	00c15504 	movi	r3,1364
1000a6c4:	18800536 	bltu	r3,r2,1000a6dc <_malloc_r+0x7e8>
1000a6c8:	3804d4ba 	srli	r2,r7,18
1000a6cc:	11401f44 	addi	r5,r2,125
1000a6d0:	10c01f04 	addi	r3,r2,124
1000a6d4:	294b883a 	add	r5,r5,r5
1000a6d8:	003f4f06 	br	1000a418 <__alt_data_end+0xf800a418>
1000a6dc:	01403f84 	movi	r5,254
1000a6e0:	00c01f84 	movi	r3,126
1000a6e4:	003f4c06 	br	1000a418 <__alt_data_end+0xf800a418>
1000a6e8:	98800117 	ldw	r2,4(r19)
1000a6ec:	003fa006 	br	1000a570 <__alt_data_end+0xf800a570>
1000a6f0:	8808d0fa 	srli	r4,r17,3
1000a6f4:	20800044 	addi	r2,r4,1
1000a6f8:	1085883a 	add	r2,r2,r2
1000a6fc:	003e9006 	br	1000a140 <__alt_data_end+0xf800a140>

1000a700 <memchr>:
1000a700:	208000cc 	andi	r2,r4,3
1000a704:	280f883a 	mov	r7,r5
1000a708:	10003426 	beq	r2,zero,1000a7dc <memchr+0xdc>
1000a70c:	30bfffc4 	addi	r2,r6,-1
1000a710:	30001a26 	beq	r6,zero,1000a77c <memchr+0x7c>
1000a714:	20c00003 	ldbu	r3,0(r4)
1000a718:	29803fcc 	andi	r6,r5,255
1000a71c:	30c0051e 	bne	r6,r3,1000a734 <memchr+0x34>
1000a720:	00001806 	br	1000a784 <memchr+0x84>
1000a724:	10001526 	beq	r2,zero,1000a77c <memchr+0x7c>
1000a728:	20c00003 	ldbu	r3,0(r4)
1000a72c:	10bfffc4 	addi	r2,r2,-1
1000a730:	30c01426 	beq	r6,r3,1000a784 <memchr+0x84>
1000a734:	21000044 	addi	r4,r4,1
1000a738:	20c000cc 	andi	r3,r4,3
1000a73c:	183ff91e 	bne	r3,zero,1000a724 <__alt_data_end+0xf800a724>
1000a740:	020000c4 	movi	r8,3
1000a744:	40801136 	bltu	r8,r2,1000a78c <memchr+0x8c>
1000a748:	10000c26 	beq	r2,zero,1000a77c <memchr+0x7c>
1000a74c:	20c00003 	ldbu	r3,0(r4)
1000a750:	29403fcc 	andi	r5,r5,255
1000a754:	28c00b26 	beq	r5,r3,1000a784 <memchr+0x84>
1000a758:	20c00044 	addi	r3,r4,1
1000a75c:	39803fcc 	andi	r6,r7,255
1000a760:	2089883a 	add	r4,r4,r2
1000a764:	00000306 	br	1000a774 <memchr+0x74>
1000a768:	18c00044 	addi	r3,r3,1
1000a76c:	197fffc3 	ldbu	r5,-1(r3)
1000a770:	31400526 	beq	r6,r5,1000a788 <memchr+0x88>
1000a774:	1805883a 	mov	r2,r3
1000a778:	20fffb1e 	bne	r4,r3,1000a768 <__alt_data_end+0xf800a768>
1000a77c:	0005883a 	mov	r2,zero
1000a780:	f800283a 	ret
1000a784:	2005883a 	mov	r2,r4
1000a788:	f800283a 	ret
1000a78c:	28c03fcc 	andi	r3,r5,255
1000a790:	1812923a 	slli	r9,r3,8
1000a794:	02ffbff4 	movhi	r11,65279
1000a798:	02a02074 	movhi	r10,32897
1000a79c:	48d2b03a 	or	r9,r9,r3
1000a7a0:	4806943a 	slli	r3,r9,16
1000a7a4:	5affbfc4 	addi	r11,r11,-257
1000a7a8:	52a02004 	addi	r10,r10,-32640
1000a7ac:	48d2b03a 	or	r9,r9,r3
1000a7b0:	20c00017 	ldw	r3,0(r4)
1000a7b4:	48c6f03a 	xor	r3,r9,r3
1000a7b8:	1acd883a 	add	r6,r3,r11
1000a7bc:	00c6303a 	nor	r3,zero,r3
1000a7c0:	30c6703a 	and	r3,r6,r3
1000a7c4:	1a86703a 	and	r3,r3,r10
1000a7c8:	183fe01e 	bne	r3,zero,1000a74c <__alt_data_end+0xf800a74c>
1000a7cc:	10bfff04 	addi	r2,r2,-4
1000a7d0:	21000104 	addi	r4,r4,4
1000a7d4:	40bff636 	bltu	r8,r2,1000a7b0 <__alt_data_end+0xf800a7b0>
1000a7d8:	003fdb06 	br	1000a748 <__alt_data_end+0xf800a748>
1000a7dc:	3005883a 	mov	r2,r6
1000a7e0:	003fd706 	br	1000a740 <__alt_data_end+0xf800a740>

1000a7e4 <memcpy>:
1000a7e4:	defffd04 	addi	sp,sp,-12
1000a7e8:	dfc00215 	stw	ra,8(sp)
1000a7ec:	dc400115 	stw	r17,4(sp)
1000a7f0:	dc000015 	stw	r16,0(sp)
1000a7f4:	00c003c4 	movi	r3,15
1000a7f8:	2005883a 	mov	r2,r4
1000a7fc:	1980452e 	bgeu	r3,r6,1000a914 <memcpy+0x130>
1000a800:	2906b03a 	or	r3,r5,r4
1000a804:	18c000cc 	andi	r3,r3,3
1000a808:	1800441e 	bne	r3,zero,1000a91c <memcpy+0x138>
1000a80c:	347ffc04 	addi	r17,r6,-16
1000a810:	8822d13a 	srli	r17,r17,4
1000a814:	28c00104 	addi	r3,r5,4
1000a818:	23400104 	addi	r13,r4,4
1000a81c:	8820913a 	slli	r16,r17,4
1000a820:	2b000204 	addi	r12,r5,8
1000a824:	22c00204 	addi	r11,r4,8
1000a828:	84000504 	addi	r16,r16,20
1000a82c:	2a800304 	addi	r10,r5,12
1000a830:	22400304 	addi	r9,r4,12
1000a834:	2c21883a 	add	r16,r5,r16
1000a838:	2811883a 	mov	r8,r5
1000a83c:	200f883a 	mov	r7,r4
1000a840:	41000017 	ldw	r4,0(r8)
1000a844:	1fc00017 	ldw	ra,0(r3)
1000a848:	63c00017 	ldw	r15,0(r12)
1000a84c:	39000015 	stw	r4,0(r7)
1000a850:	53800017 	ldw	r14,0(r10)
1000a854:	6fc00015 	stw	ra,0(r13)
1000a858:	5bc00015 	stw	r15,0(r11)
1000a85c:	4b800015 	stw	r14,0(r9)
1000a860:	18c00404 	addi	r3,r3,16
1000a864:	39c00404 	addi	r7,r7,16
1000a868:	42000404 	addi	r8,r8,16
1000a86c:	6b400404 	addi	r13,r13,16
1000a870:	63000404 	addi	r12,r12,16
1000a874:	5ac00404 	addi	r11,r11,16
1000a878:	52800404 	addi	r10,r10,16
1000a87c:	4a400404 	addi	r9,r9,16
1000a880:	1c3fef1e 	bne	r3,r16,1000a840 <__alt_data_end+0xf800a840>
1000a884:	89c00044 	addi	r7,r17,1
1000a888:	380e913a 	slli	r7,r7,4
1000a88c:	310003cc 	andi	r4,r6,15
1000a890:	02c000c4 	movi	r11,3
1000a894:	11c7883a 	add	r3,r2,r7
1000a898:	29cb883a 	add	r5,r5,r7
1000a89c:	5900212e 	bgeu	r11,r4,1000a924 <memcpy+0x140>
1000a8a0:	1813883a 	mov	r9,r3
1000a8a4:	2811883a 	mov	r8,r5
1000a8a8:	200f883a 	mov	r7,r4
1000a8ac:	42800017 	ldw	r10,0(r8)
1000a8b0:	4a400104 	addi	r9,r9,4
1000a8b4:	39ffff04 	addi	r7,r7,-4
1000a8b8:	4abfff15 	stw	r10,-4(r9)
1000a8bc:	42000104 	addi	r8,r8,4
1000a8c0:	59fffa36 	bltu	r11,r7,1000a8ac <__alt_data_end+0xf800a8ac>
1000a8c4:	213fff04 	addi	r4,r4,-4
1000a8c8:	2008d0ba 	srli	r4,r4,2
1000a8cc:	318000cc 	andi	r6,r6,3
1000a8d0:	21000044 	addi	r4,r4,1
1000a8d4:	2109883a 	add	r4,r4,r4
1000a8d8:	2109883a 	add	r4,r4,r4
1000a8dc:	1907883a 	add	r3,r3,r4
1000a8e0:	290b883a 	add	r5,r5,r4
1000a8e4:	30000626 	beq	r6,zero,1000a900 <memcpy+0x11c>
1000a8e8:	198d883a 	add	r6,r3,r6
1000a8ec:	29c00003 	ldbu	r7,0(r5)
1000a8f0:	18c00044 	addi	r3,r3,1
1000a8f4:	29400044 	addi	r5,r5,1
1000a8f8:	19ffffc5 	stb	r7,-1(r3)
1000a8fc:	19bffb1e 	bne	r3,r6,1000a8ec <__alt_data_end+0xf800a8ec>
1000a900:	dfc00217 	ldw	ra,8(sp)
1000a904:	dc400117 	ldw	r17,4(sp)
1000a908:	dc000017 	ldw	r16,0(sp)
1000a90c:	dec00304 	addi	sp,sp,12
1000a910:	f800283a 	ret
1000a914:	2007883a 	mov	r3,r4
1000a918:	003ff206 	br	1000a8e4 <__alt_data_end+0xf800a8e4>
1000a91c:	2007883a 	mov	r3,r4
1000a920:	003ff106 	br	1000a8e8 <__alt_data_end+0xf800a8e8>
1000a924:	200d883a 	mov	r6,r4
1000a928:	003fee06 	br	1000a8e4 <__alt_data_end+0xf800a8e4>

1000a92c <memmove>:
1000a92c:	2005883a 	mov	r2,r4
1000a930:	29000b2e 	bgeu	r5,r4,1000a960 <memmove+0x34>
1000a934:	298f883a 	add	r7,r5,r6
1000a938:	21c0092e 	bgeu	r4,r7,1000a960 <memmove+0x34>
1000a93c:	2187883a 	add	r3,r4,r6
1000a940:	198bc83a 	sub	r5,r3,r6
1000a944:	30004826 	beq	r6,zero,1000aa68 <memmove+0x13c>
1000a948:	39ffffc4 	addi	r7,r7,-1
1000a94c:	39000003 	ldbu	r4,0(r7)
1000a950:	18ffffc4 	addi	r3,r3,-1
1000a954:	19000005 	stb	r4,0(r3)
1000a958:	28fffb1e 	bne	r5,r3,1000a948 <__alt_data_end+0xf800a948>
1000a95c:	f800283a 	ret
1000a960:	00c003c4 	movi	r3,15
1000a964:	1980412e 	bgeu	r3,r6,1000aa6c <memmove+0x140>
1000a968:	2886b03a 	or	r3,r5,r2
1000a96c:	18c000cc 	andi	r3,r3,3
1000a970:	1800401e 	bne	r3,zero,1000aa74 <memmove+0x148>
1000a974:	33fffc04 	addi	r15,r6,-16
1000a978:	781ed13a 	srli	r15,r15,4
1000a97c:	28c00104 	addi	r3,r5,4
1000a980:	13400104 	addi	r13,r2,4
1000a984:	781c913a 	slli	r14,r15,4
1000a988:	2b000204 	addi	r12,r5,8
1000a98c:	12c00204 	addi	r11,r2,8
1000a990:	73800504 	addi	r14,r14,20
1000a994:	2a800304 	addi	r10,r5,12
1000a998:	12400304 	addi	r9,r2,12
1000a99c:	2b9d883a 	add	r14,r5,r14
1000a9a0:	2811883a 	mov	r8,r5
1000a9a4:	100f883a 	mov	r7,r2
1000a9a8:	41000017 	ldw	r4,0(r8)
1000a9ac:	39c00404 	addi	r7,r7,16
1000a9b0:	18c00404 	addi	r3,r3,16
1000a9b4:	393ffc15 	stw	r4,-16(r7)
1000a9b8:	193ffc17 	ldw	r4,-16(r3)
1000a9bc:	6b400404 	addi	r13,r13,16
1000a9c0:	5ac00404 	addi	r11,r11,16
1000a9c4:	693ffc15 	stw	r4,-16(r13)
1000a9c8:	61000017 	ldw	r4,0(r12)
1000a9cc:	4a400404 	addi	r9,r9,16
1000a9d0:	42000404 	addi	r8,r8,16
1000a9d4:	593ffc15 	stw	r4,-16(r11)
1000a9d8:	51000017 	ldw	r4,0(r10)
1000a9dc:	63000404 	addi	r12,r12,16
1000a9e0:	52800404 	addi	r10,r10,16
1000a9e4:	493ffc15 	stw	r4,-16(r9)
1000a9e8:	1bbfef1e 	bne	r3,r14,1000a9a8 <__alt_data_end+0xf800a9a8>
1000a9ec:	79000044 	addi	r4,r15,1
1000a9f0:	2008913a 	slli	r4,r4,4
1000a9f4:	328003cc 	andi	r10,r6,15
1000a9f8:	02c000c4 	movi	r11,3
1000a9fc:	1107883a 	add	r3,r2,r4
1000aa00:	290b883a 	add	r5,r5,r4
1000aa04:	5a801e2e 	bgeu	r11,r10,1000aa80 <memmove+0x154>
1000aa08:	1813883a 	mov	r9,r3
1000aa0c:	2811883a 	mov	r8,r5
1000aa10:	500f883a 	mov	r7,r10
1000aa14:	41000017 	ldw	r4,0(r8)
1000aa18:	4a400104 	addi	r9,r9,4
1000aa1c:	39ffff04 	addi	r7,r7,-4
1000aa20:	493fff15 	stw	r4,-4(r9)
1000aa24:	42000104 	addi	r8,r8,4
1000aa28:	59fffa36 	bltu	r11,r7,1000aa14 <__alt_data_end+0xf800aa14>
1000aa2c:	513fff04 	addi	r4,r10,-4
1000aa30:	2008d0ba 	srli	r4,r4,2
1000aa34:	318000cc 	andi	r6,r6,3
1000aa38:	21000044 	addi	r4,r4,1
1000aa3c:	2109883a 	add	r4,r4,r4
1000aa40:	2109883a 	add	r4,r4,r4
1000aa44:	1907883a 	add	r3,r3,r4
1000aa48:	290b883a 	add	r5,r5,r4
1000aa4c:	30000b26 	beq	r6,zero,1000aa7c <memmove+0x150>
1000aa50:	198d883a 	add	r6,r3,r6
1000aa54:	29c00003 	ldbu	r7,0(r5)
1000aa58:	18c00044 	addi	r3,r3,1
1000aa5c:	29400044 	addi	r5,r5,1
1000aa60:	19ffffc5 	stb	r7,-1(r3)
1000aa64:	19bffb1e 	bne	r3,r6,1000aa54 <__alt_data_end+0xf800aa54>
1000aa68:	f800283a 	ret
1000aa6c:	1007883a 	mov	r3,r2
1000aa70:	003ff606 	br	1000aa4c <__alt_data_end+0xf800aa4c>
1000aa74:	1007883a 	mov	r3,r2
1000aa78:	003ff506 	br	1000aa50 <__alt_data_end+0xf800aa50>
1000aa7c:	f800283a 	ret
1000aa80:	500d883a 	mov	r6,r10
1000aa84:	003ff106 	br	1000aa4c <__alt_data_end+0xf800aa4c>

1000aa88 <memset>:
1000aa88:	20c000cc 	andi	r3,r4,3
1000aa8c:	2005883a 	mov	r2,r4
1000aa90:	18004426 	beq	r3,zero,1000aba4 <memset+0x11c>
1000aa94:	31ffffc4 	addi	r7,r6,-1
1000aa98:	30004026 	beq	r6,zero,1000ab9c <memset+0x114>
1000aa9c:	2813883a 	mov	r9,r5
1000aaa0:	200d883a 	mov	r6,r4
1000aaa4:	2007883a 	mov	r3,r4
1000aaa8:	00000406 	br	1000aabc <memset+0x34>
1000aaac:	3a3fffc4 	addi	r8,r7,-1
1000aab0:	31800044 	addi	r6,r6,1
1000aab4:	38003926 	beq	r7,zero,1000ab9c <memset+0x114>
1000aab8:	400f883a 	mov	r7,r8
1000aabc:	18c00044 	addi	r3,r3,1
1000aac0:	32400005 	stb	r9,0(r6)
1000aac4:	1a0000cc 	andi	r8,r3,3
1000aac8:	403ff81e 	bne	r8,zero,1000aaac <__alt_data_end+0xf800aaac>
1000aacc:	010000c4 	movi	r4,3
1000aad0:	21c02d2e 	bgeu	r4,r7,1000ab88 <memset+0x100>
1000aad4:	29003fcc 	andi	r4,r5,255
1000aad8:	200c923a 	slli	r6,r4,8
1000aadc:	3108b03a 	or	r4,r6,r4
1000aae0:	200c943a 	slli	r6,r4,16
1000aae4:	218cb03a 	or	r6,r4,r6
1000aae8:	010003c4 	movi	r4,15
1000aaec:	21c0182e 	bgeu	r4,r7,1000ab50 <memset+0xc8>
1000aaf0:	3b3ffc04 	addi	r12,r7,-16
1000aaf4:	6018d13a 	srli	r12,r12,4
1000aaf8:	1a000104 	addi	r8,r3,4
1000aafc:	1ac00204 	addi	r11,r3,8
1000ab00:	6008913a 	slli	r4,r12,4
1000ab04:	1a800304 	addi	r10,r3,12
1000ab08:	1813883a 	mov	r9,r3
1000ab0c:	21000504 	addi	r4,r4,20
1000ab10:	1909883a 	add	r4,r3,r4
1000ab14:	49800015 	stw	r6,0(r9)
1000ab18:	41800015 	stw	r6,0(r8)
1000ab1c:	59800015 	stw	r6,0(r11)
1000ab20:	51800015 	stw	r6,0(r10)
1000ab24:	42000404 	addi	r8,r8,16
1000ab28:	4a400404 	addi	r9,r9,16
1000ab2c:	5ac00404 	addi	r11,r11,16
1000ab30:	52800404 	addi	r10,r10,16
1000ab34:	413ff71e 	bne	r8,r4,1000ab14 <__alt_data_end+0xf800ab14>
1000ab38:	63000044 	addi	r12,r12,1
1000ab3c:	6018913a 	slli	r12,r12,4
1000ab40:	39c003cc 	andi	r7,r7,15
1000ab44:	010000c4 	movi	r4,3
1000ab48:	1b07883a 	add	r3,r3,r12
1000ab4c:	21c00e2e 	bgeu	r4,r7,1000ab88 <memset+0x100>
1000ab50:	1813883a 	mov	r9,r3
1000ab54:	3811883a 	mov	r8,r7
1000ab58:	010000c4 	movi	r4,3
1000ab5c:	49800015 	stw	r6,0(r9)
1000ab60:	423fff04 	addi	r8,r8,-4
1000ab64:	4a400104 	addi	r9,r9,4
1000ab68:	223ffc36 	bltu	r4,r8,1000ab5c <__alt_data_end+0xf800ab5c>
1000ab6c:	393fff04 	addi	r4,r7,-4
1000ab70:	2008d0ba 	srli	r4,r4,2
1000ab74:	39c000cc 	andi	r7,r7,3
1000ab78:	21000044 	addi	r4,r4,1
1000ab7c:	2109883a 	add	r4,r4,r4
1000ab80:	2109883a 	add	r4,r4,r4
1000ab84:	1907883a 	add	r3,r3,r4
1000ab88:	38000526 	beq	r7,zero,1000aba0 <memset+0x118>
1000ab8c:	19cf883a 	add	r7,r3,r7
1000ab90:	19400005 	stb	r5,0(r3)
1000ab94:	18c00044 	addi	r3,r3,1
1000ab98:	38fffd1e 	bne	r7,r3,1000ab90 <__alt_data_end+0xf800ab90>
1000ab9c:	f800283a 	ret
1000aba0:	f800283a 	ret
1000aba4:	2007883a 	mov	r3,r4
1000aba8:	300f883a 	mov	r7,r6
1000abac:	003fc706 	br	1000aacc <__alt_data_end+0xf800aacc>

1000abb0 <_Balloc>:
1000abb0:	20801317 	ldw	r2,76(r4)
1000abb4:	defffc04 	addi	sp,sp,-16
1000abb8:	dc400115 	stw	r17,4(sp)
1000abbc:	dc000015 	stw	r16,0(sp)
1000abc0:	dfc00315 	stw	ra,12(sp)
1000abc4:	dc800215 	stw	r18,8(sp)
1000abc8:	2023883a 	mov	r17,r4
1000abcc:	2821883a 	mov	r16,r5
1000abd0:	10000f26 	beq	r2,zero,1000ac10 <_Balloc+0x60>
1000abd4:	8407883a 	add	r3,r16,r16
1000abd8:	18c7883a 	add	r3,r3,r3
1000abdc:	10c7883a 	add	r3,r2,r3
1000abe0:	18800017 	ldw	r2,0(r3)
1000abe4:	10001126 	beq	r2,zero,1000ac2c <_Balloc+0x7c>
1000abe8:	11000017 	ldw	r4,0(r2)
1000abec:	19000015 	stw	r4,0(r3)
1000abf0:	10000415 	stw	zero,16(r2)
1000abf4:	10000315 	stw	zero,12(r2)
1000abf8:	dfc00317 	ldw	ra,12(sp)
1000abfc:	dc800217 	ldw	r18,8(sp)
1000ac00:	dc400117 	ldw	r17,4(sp)
1000ac04:	dc000017 	ldw	r16,0(sp)
1000ac08:	dec00404 	addi	sp,sp,16
1000ac0c:	f800283a 	ret
1000ac10:	01800844 	movi	r6,33
1000ac14:	01400104 	movi	r5,4
1000ac18:	000dc580 	call	1000dc58 <_calloc_r>
1000ac1c:	88801315 	stw	r2,76(r17)
1000ac20:	103fec1e 	bne	r2,zero,1000abd4 <__alt_data_end+0xf800abd4>
1000ac24:	0005883a 	mov	r2,zero
1000ac28:	003ff306 	br	1000abf8 <__alt_data_end+0xf800abf8>
1000ac2c:	01400044 	movi	r5,1
1000ac30:	2c24983a 	sll	r18,r5,r16
1000ac34:	8809883a 	mov	r4,r17
1000ac38:	91800144 	addi	r6,r18,5
1000ac3c:	318d883a 	add	r6,r6,r6
1000ac40:	318d883a 	add	r6,r6,r6
1000ac44:	000dc580 	call	1000dc58 <_calloc_r>
1000ac48:	103ff626 	beq	r2,zero,1000ac24 <__alt_data_end+0xf800ac24>
1000ac4c:	14000115 	stw	r16,4(r2)
1000ac50:	14800215 	stw	r18,8(r2)
1000ac54:	003fe606 	br	1000abf0 <__alt_data_end+0xf800abf0>

1000ac58 <_Bfree>:
1000ac58:	28000826 	beq	r5,zero,1000ac7c <_Bfree+0x24>
1000ac5c:	28c00117 	ldw	r3,4(r5)
1000ac60:	20801317 	ldw	r2,76(r4)
1000ac64:	18c7883a 	add	r3,r3,r3
1000ac68:	18c7883a 	add	r3,r3,r3
1000ac6c:	10c5883a 	add	r2,r2,r3
1000ac70:	10c00017 	ldw	r3,0(r2)
1000ac74:	28c00015 	stw	r3,0(r5)
1000ac78:	11400015 	stw	r5,0(r2)
1000ac7c:	f800283a 	ret

1000ac80 <__multadd>:
1000ac80:	defff704 	addi	sp,sp,-36
1000ac84:	dc800215 	stw	r18,8(sp)
1000ac88:	2c800417 	ldw	r18,16(r5)
1000ac8c:	dd800615 	stw	r22,24(sp)
1000ac90:	dd400515 	stw	r21,20(sp)
1000ac94:	dd000415 	stw	r20,16(sp)
1000ac98:	dcc00315 	stw	r19,12(sp)
1000ac9c:	dc400115 	stw	r17,4(sp)
1000aca0:	dc000015 	stw	r16,0(sp)
1000aca4:	dfc00815 	stw	ra,32(sp)
1000aca8:	ddc00715 	stw	r23,28(sp)
1000acac:	2827883a 	mov	r19,r5
1000acb0:	2029883a 	mov	r20,r4
1000acb4:	3023883a 	mov	r17,r6
1000acb8:	3821883a 	mov	r16,r7
1000acbc:	2d400504 	addi	r21,r5,20
1000acc0:	002d883a 	mov	r22,zero
1000acc4:	adc00017 	ldw	r23,0(r21)
1000acc8:	880b883a 	mov	r5,r17
1000accc:	ad400104 	addi	r21,r21,4
1000acd0:	b93fffcc 	andi	r4,r23,65535
1000acd4:	0004bc80 	call	10004bc8 <__mulsi3>
1000acd8:	b808d43a 	srli	r4,r23,16
1000acdc:	880b883a 	mov	r5,r17
1000ace0:	1421883a 	add	r16,r2,r16
1000ace4:	0004bc80 	call	10004bc8 <__mulsi3>
1000ace8:	800ed43a 	srli	r7,r16,16
1000acec:	80ffffcc 	andi	r3,r16,65535
1000acf0:	b5800044 	addi	r22,r22,1
1000acf4:	11c5883a 	add	r2,r2,r7
1000acf8:	100e943a 	slli	r7,r2,16
1000acfc:	1020d43a 	srli	r16,r2,16
1000ad00:	38c7883a 	add	r3,r7,r3
1000ad04:	a8ffff15 	stw	r3,-4(r21)
1000ad08:	b4bfee16 	blt	r22,r18,1000acc4 <__alt_data_end+0xf800acc4>
1000ad0c:	80000926 	beq	r16,zero,1000ad34 <__multadd+0xb4>
1000ad10:	98800217 	ldw	r2,8(r19)
1000ad14:	9080130e 	bge	r18,r2,1000ad64 <__multadd+0xe4>
1000ad18:	90800144 	addi	r2,r18,5
1000ad1c:	1085883a 	add	r2,r2,r2
1000ad20:	1085883a 	add	r2,r2,r2
1000ad24:	9885883a 	add	r2,r19,r2
1000ad28:	14000015 	stw	r16,0(r2)
1000ad2c:	94800044 	addi	r18,r18,1
1000ad30:	9c800415 	stw	r18,16(r19)
1000ad34:	9805883a 	mov	r2,r19
1000ad38:	dfc00817 	ldw	ra,32(sp)
1000ad3c:	ddc00717 	ldw	r23,28(sp)
1000ad40:	dd800617 	ldw	r22,24(sp)
1000ad44:	dd400517 	ldw	r21,20(sp)
1000ad48:	dd000417 	ldw	r20,16(sp)
1000ad4c:	dcc00317 	ldw	r19,12(sp)
1000ad50:	dc800217 	ldw	r18,8(sp)
1000ad54:	dc400117 	ldw	r17,4(sp)
1000ad58:	dc000017 	ldw	r16,0(sp)
1000ad5c:	dec00904 	addi	sp,sp,36
1000ad60:	f800283a 	ret
1000ad64:	99400117 	ldw	r5,4(r19)
1000ad68:	a009883a 	mov	r4,r20
1000ad6c:	29400044 	addi	r5,r5,1
1000ad70:	000abb00 	call	1000abb0 <_Balloc>
1000ad74:	99800417 	ldw	r6,16(r19)
1000ad78:	99400304 	addi	r5,r19,12
1000ad7c:	11000304 	addi	r4,r2,12
1000ad80:	31800084 	addi	r6,r6,2
1000ad84:	318d883a 	add	r6,r6,r6
1000ad88:	318d883a 	add	r6,r6,r6
1000ad8c:	1023883a 	mov	r17,r2
1000ad90:	000a7e40 	call	1000a7e4 <memcpy>
1000ad94:	98000a26 	beq	r19,zero,1000adc0 <__multadd+0x140>
1000ad98:	98c00117 	ldw	r3,4(r19)
1000ad9c:	a0801317 	ldw	r2,76(r20)
1000ada0:	18c7883a 	add	r3,r3,r3
1000ada4:	18c7883a 	add	r3,r3,r3
1000ada8:	10c5883a 	add	r2,r2,r3
1000adac:	10c00017 	ldw	r3,0(r2)
1000adb0:	98c00015 	stw	r3,0(r19)
1000adb4:	14c00015 	stw	r19,0(r2)
1000adb8:	8827883a 	mov	r19,r17
1000adbc:	003fd606 	br	1000ad18 <__alt_data_end+0xf800ad18>
1000adc0:	8827883a 	mov	r19,r17
1000adc4:	003fd406 	br	1000ad18 <__alt_data_end+0xf800ad18>

1000adc8 <__s2b>:
1000adc8:	defff904 	addi	sp,sp,-28
1000adcc:	dc400115 	stw	r17,4(sp)
1000add0:	dc000015 	stw	r16,0(sp)
1000add4:	2023883a 	mov	r17,r4
1000add8:	2821883a 	mov	r16,r5
1000addc:	39000204 	addi	r4,r7,8
1000ade0:	01400244 	movi	r5,9
1000ade4:	dcc00315 	stw	r19,12(sp)
1000ade8:	dc800215 	stw	r18,8(sp)
1000adec:	dfc00615 	stw	ra,24(sp)
1000adf0:	dd400515 	stw	r21,20(sp)
1000adf4:	dd000415 	stw	r20,16(sp)
1000adf8:	3825883a 	mov	r18,r7
1000adfc:	3027883a 	mov	r19,r6
1000ae00:	000f0b00 	call	1000f0b0 <__divsi3>
1000ae04:	00c00044 	movi	r3,1
1000ae08:	000b883a 	mov	r5,zero
1000ae0c:	1880030e 	bge	r3,r2,1000ae1c <__s2b+0x54>
1000ae10:	18c7883a 	add	r3,r3,r3
1000ae14:	29400044 	addi	r5,r5,1
1000ae18:	18bffd16 	blt	r3,r2,1000ae10 <__alt_data_end+0xf800ae10>
1000ae1c:	8809883a 	mov	r4,r17
1000ae20:	000abb00 	call	1000abb0 <_Balloc>
1000ae24:	d8c00717 	ldw	r3,28(sp)
1000ae28:	10c00515 	stw	r3,20(r2)
1000ae2c:	00c00044 	movi	r3,1
1000ae30:	10c00415 	stw	r3,16(r2)
1000ae34:	00c00244 	movi	r3,9
1000ae38:	1cc0210e 	bge	r3,r19,1000aec0 <__s2b+0xf8>
1000ae3c:	80eb883a 	add	r21,r16,r3
1000ae40:	a829883a 	mov	r20,r21
1000ae44:	84e1883a 	add	r16,r16,r19
1000ae48:	a1c00007 	ldb	r7,0(r20)
1000ae4c:	01800284 	movi	r6,10
1000ae50:	a5000044 	addi	r20,r20,1
1000ae54:	100b883a 	mov	r5,r2
1000ae58:	39fff404 	addi	r7,r7,-48
1000ae5c:	8809883a 	mov	r4,r17
1000ae60:	000ac800 	call	1000ac80 <__multadd>
1000ae64:	a43ff81e 	bne	r20,r16,1000ae48 <__alt_data_end+0xf800ae48>
1000ae68:	ace1883a 	add	r16,r21,r19
1000ae6c:	843ffe04 	addi	r16,r16,-8
1000ae70:	9c800a0e 	bge	r19,r18,1000ae9c <__s2b+0xd4>
1000ae74:	94e5c83a 	sub	r18,r18,r19
1000ae78:	84a5883a 	add	r18,r16,r18
1000ae7c:	81c00007 	ldb	r7,0(r16)
1000ae80:	01800284 	movi	r6,10
1000ae84:	84000044 	addi	r16,r16,1
1000ae88:	100b883a 	mov	r5,r2
1000ae8c:	39fff404 	addi	r7,r7,-48
1000ae90:	8809883a 	mov	r4,r17
1000ae94:	000ac800 	call	1000ac80 <__multadd>
1000ae98:	84bff81e 	bne	r16,r18,1000ae7c <__alt_data_end+0xf800ae7c>
1000ae9c:	dfc00617 	ldw	ra,24(sp)
1000aea0:	dd400517 	ldw	r21,20(sp)
1000aea4:	dd000417 	ldw	r20,16(sp)
1000aea8:	dcc00317 	ldw	r19,12(sp)
1000aeac:	dc800217 	ldw	r18,8(sp)
1000aeb0:	dc400117 	ldw	r17,4(sp)
1000aeb4:	dc000017 	ldw	r16,0(sp)
1000aeb8:	dec00704 	addi	sp,sp,28
1000aebc:	f800283a 	ret
1000aec0:	84000284 	addi	r16,r16,10
1000aec4:	1827883a 	mov	r19,r3
1000aec8:	003fe906 	br	1000ae70 <__alt_data_end+0xf800ae70>

1000aecc <__hi0bits>:
1000aecc:	20bfffec 	andhi	r2,r4,65535
1000aed0:	1000141e 	bne	r2,zero,1000af24 <__hi0bits+0x58>
1000aed4:	2008943a 	slli	r4,r4,16
1000aed8:	00800404 	movi	r2,16
1000aedc:	20ffc02c 	andhi	r3,r4,65280
1000aee0:	1800021e 	bne	r3,zero,1000aeec <__hi0bits+0x20>
1000aee4:	2008923a 	slli	r4,r4,8
1000aee8:	10800204 	addi	r2,r2,8
1000aeec:	20fc002c 	andhi	r3,r4,61440
1000aef0:	1800021e 	bne	r3,zero,1000aefc <__hi0bits+0x30>
1000aef4:	2008913a 	slli	r4,r4,4
1000aef8:	10800104 	addi	r2,r2,4
1000aefc:	20f0002c 	andhi	r3,r4,49152
1000af00:	1800031e 	bne	r3,zero,1000af10 <__hi0bits+0x44>
1000af04:	2109883a 	add	r4,r4,r4
1000af08:	10800084 	addi	r2,r2,2
1000af0c:	2109883a 	add	r4,r4,r4
1000af10:	20000316 	blt	r4,zero,1000af20 <__hi0bits+0x54>
1000af14:	2110002c 	andhi	r4,r4,16384
1000af18:	2000041e 	bne	r4,zero,1000af2c <__hi0bits+0x60>
1000af1c:	00800804 	movi	r2,32
1000af20:	f800283a 	ret
1000af24:	0005883a 	mov	r2,zero
1000af28:	003fec06 	br	1000aedc <__alt_data_end+0xf800aedc>
1000af2c:	10800044 	addi	r2,r2,1
1000af30:	f800283a 	ret

1000af34 <__lo0bits>:
1000af34:	20c00017 	ldw	r3,0(r4)
1000af38:	188001cc 	andi	r2,r3,7
1000af3c:	10000826 	beq	r2,zero,1000af60 <__lo0bits+0x2c>
1000af40:	1880004c 	andi	r2,r3,1
1000af44:	1000211e 	bne	r2,zero,1000afcc <__lo0bits+0x98>
1000af48:	1880008c 	andi	r2,r3,2
1000af4c:	1000211e 	bne	r2,zero,1000afd4 <__lo0bits+0xa0>
1000af50:	1806d0ba 	srli	r3,r3,2
1000af54:	00800084 	movi	r2,2
1000af58:	20c00015 	stw	r3,0(r4)
1000af5c:	f800283a 	ret
1000af60:	18bfffcc 	andi	r2,r3,65535
1000af64:	10001326 	beq	r2,zero,1000afb4 <__lo0bits+0x80>
1000af68:	0005883a 	mov	r2,zero
1000af6c:	19403fcc 	andi	r5,r3,255
1000af70:	2800021e 	bne	r5,zero,1000af7c <__lo0bits+0x48>
1000af74:	1806d23a 	srli	r3,r3,8
1000af78:	10800204 	addi	r2,r2,8
1000af7c:	194003cc 	andi	r5,r3,15
1000af80:	2800021e 	bne	r5,zero,1000af8c <__lo0bits+0x58>
1000af84:	1806d13a 	srli	r3,r3,4
1000af88:	10800104 	addi	r2,r2,4
1000af8c:	194000cc 	andi	r5,r3,3
1000af90:	2800021e 	bne	r5,zero,1000af9c <__lo0bits+0x68>
1000af94:	1806d0ba 	srli	r3,r3,2
1000af98:	10800084 	addi	r2,r2,2
1000af9c:	1940004c 	andi	r5,r3,1
1000afa0:	2800081e 	bne	r5,zero,1000afc4 <__lo0bits+0x90>
1000afa4:	1806d07a 	srli	r3,r3,1
1000afa8:	1800051e 	bne	r3,zero,1000afc0 <__lo0bits+0x8c>
1000afac:	00800804 	movi	r2,32
1000afb0:	f800283a 	ret
1000afb4:	1806d43a 	srli	r3,r3,16
1000afb8:	00800404 	movi	r2,16
1000afbc:	003feb06 	br	1000af6c <__alt_data_end+0xf800af6c>
1000afc0:	10800044 	addi	r2,r2,1
1000afc4:	20c00015 	stw	r3,0(r4)
1000afc8:	f800283a 	ret
1000afcc:	0005883a 	mov	r2,zero
1000afd0:	f800283a 	ret
1000afd4:	1806d07a 	srli	r3,r3,1
1000afd8:	00800044 	movi	r2,1
1000afdc:	20c00015 	stw	r3,0(r4)
1000afe0:	f800283a 	ret

1000afe4 <__i2b>:
1000afe4:	defffd04 	addi	sp,sp,-12
1000afe8:	dc000015 	stw	r16,0(sp)
1000afec:	04000044 	movi	r16,1
1000aff0:	dc400115 	stw	r17,4(sp)
1000aff4:	2823883a 	mov	r17,r5
1000aff8:	800b883a 	mov	r5,r16
1000affc:	dfc00215 	stw	ra,8(sp)
1000b000:	000abb00 	call	1000abb0 <_Balloc>
1000b004:	14400515 	stw	r17,20(r2)
1000b008:	14000415 	stw	r16,16(r2)
1000b00c:	dfc00217 	ldw	ra,8(sp)
1000b010:	dc400117 	ldw	r17,4(sp)
1000b014:	dc000017 	ldw	r16,0(sp)
1000b018:	dec00304 	addi	sp,sp,12
1000b01c:	f800283a 	ret

1000b020 <__multiply>:
1000b020:	deffef04 	addi	sp,sp,-68
1000b024:	dc400815 	stw	r17,32(sp)
1000b028:	dc000715 	stw	r16,28(sp)
1000b02c:	34400417 	ldw	r17,16(r6)
1000b030:	2c000417 	ldw	r16,16(r5)
1000b034:	dd800d15 	stw	r22,52(sp)
1000b038:	dc800915 	stw	r18,36(sp)
1000b03c:	dfc01015 	stw	ra,64(sp)
1000b040:	df000f15 	stw	fp,60(sp)
1000b044:	ddc00e15 	stw	r23,56(sp)
1000b048:	dd400c15 	stw	r21,48(sp)
1000b04c:	dd000b15 	stw	r20,44(sp)
1000b050:	dcc00a15 	stw	r19,40(sp)
1000b054:	2825883a 	mov	r18,r5
1000b058:	302d883a 	mov	r22,r6
1000b05c:	8440050e 	bge	r16,r17,1000b074 <__multiply+0x54>
1000b060:	8007883a 	mov	r3,r16
1000b064:	3025883a 	mov	r18,r6
1000b068:	8821883a 	mov	r16,r17
1000b06c:	282d883a 	mov	r22,r5
1000b070:	1823883a 	mov	r17,r3
1000b074:	90800217 	ldw	r2,8(r18)
1000b078:	8447883a 	add	r3,r16,r17
1000b07c:	d8c00215 	stw	r3,8(sp)
1000b080:	91400117 	ldw	r5,4(r18)
1000b084:	10c0010e 	bge	r2,r3,1000b08c <__multiply+0x6c>
1000b088:	29400044 	addi	r5,r5,1
1000b08c:	000abb00 	call	1000abb0 <_Balloc>
1000b090:	d8c00217 	ldw	r3,8(sp)
1000b094:	d8800615 	stw	r2,24(sp)
1000b098:	18eb883a 	add	r21,r3,r3
1000b09c:	ad6b883a 	add	r21,r21,r21
1000b0a0:	10c00504 	addi	r3,r2,20
1000b0a4:	1d6b883a 	add	r21,r3,r21
1000b0a8:	d8c00115 	stw	r3,4(sp)
1000b0ac:	dd400315 	stw	r21,12(sp)
1000b0b0:	1805883a 	mov	r2,r3
1000b0b4:	1d40042e 	bgeu	r3,r21,1000b0c8 <__multiply+0xa8>
1000b0b8:	d8c00317 	ldw	r3,12(sp)
1000b0bc:	10000015 	stw	zero,0(r2)
1000b0c0:	10800104 	addi	r2,r2,4
1000b0c4:	10fffc36 	bltu	r2,r3,1000b0b8 <__alt_data_end+0xf800b0b8>
1000b0c8:	8c63883a 	add	r17,r17,r17
1000b0cc:	b5800504 	addi	r22,r22,20
1000b0d0:	8c63883a 	add	r17,r17,r17
1000b0d4:	94800504 	addi	r18,r18,20
1000b0d8:	8421883a 	add	r16,r16,r16
1000b0dc:	b463883a 	add	r17,r22,r17
1000b0e0:	8421883a 	add	r16,r16,r16
1000b0e4:	dd800015 	stw	r22,0(sp)
1000b0e8:	dc800415 	stw	r18,16(sp)
1000b0ec:	dc400515 	stw	r17,20(sp)
1000b0f0:	9429883a 	add	r20,r18,r16
1000b0f4:	b4404f2e 	bgeu	r22,r17,1000b234 <__multiply+0x214>
1000b0f8:	d8c00017 	ldw	r3,0(sp)
1000b0fc:	1c800017 	ldw	r18,0(r3)
1000b100:	947fffcc 	andi	r17,r18,65535
1000b104:	88001e26 	beq	r17,zero,1000b180 <__multiply+0x160>
1000b108:	dd800117 	ldw	r22,4(sp)
1000b10c:	dd400417 	ldw	r21,16(sp)
1000b110:	0027883a 	mov	r19,zero
1000b114:	ac800017 	ldw	r18,0(r21)
1000b118:	b4000017 	ldw	r16,0(r22)
1000b11c:	880b883a 	mov	r5,r17
1000b120:	913fffcc 	andi	r4,r18,65535
1000b124:	0004bc80 	call	10004bc8 <__mulsi3>
1000b128:	9008d43a 	srli	r4,r18,16
1000b12c:	84bfffcc 	andi	r18,r16,65535
1000b130:	1485883a 	add	r2,r2,r18
1000b134:	14e5883a 	add	r18,r2,r19
1000b138:	8020d43a 	srli	r16,r16,16
1000b13c:	9026d43a 	srli	r19,r18,16
1000b140:	880b883a 	mov	r5,r17
1000b144:	0004bc80 	call	10004bc8 <__mulsi3>
1000b148:	1405883a 	add	r2,r2,r16
1000b14c:	14e1883a 	add	r16,r2,r19
1000b150:	90ffffcc 	andi	r3,r18,65535
1000b154:	8024943a 	slli	r18,r16,16
1000b158:	ad400104 	addi	r21,r21,4
1000b15c:	b005883a 	mov	r2,r22
1000b160:	90c6b03a 	or	r3,r18,r3
1000b164:	b0c00015 	stw	r3,0(r22)
1000b168:	8026d43a 	srli	r19,r16,16
1000b16c:	b5800104 	addi	r22,r22,4
1000b170:	ad3fe836 	bltu	r21,r20,1000b114 <__alt_data_end+0xf800b114>
1000b174:	d8c00017 	ldw	r3,0(sp)
1000b178:	14c00115 	stw	r19,4(r2)
1000b17c:	1c800017 	ldw	r18,0(r3)
1000b180:	9024d43a 	srli	r18,r18,16
1000b184:	90002226 	beq	r18,zero,1000b210 <__multiply+0x1f0>
1000b188:	d8c00117 	ldw	r3,4(sp)
1000b18c:	dd800417 	ldw	r22,16(sp)
1000b190:	002f883a 	mov	r23,zero
1000b194:	1f000017 	ldw	fp,0(r3)
1000b198:	1823883a 	mov	r17,r3
1000b19c:	182b883a 	mov	r21,r3
1000b1a0:	e021883a 	mov	r16,fp
1000b1a4:	00000106 	br	1000b1ac <__multiply+0x18c>
1000b1a8:	982b883a 	mov	r21,r19
1000b1ac:	b100000b 	ldhu	r4,0(r22)
1000b1b0:	8020d43a 	srli	r16,r16,16
1000b1b4:	900b883a 	mov	r5,r18
1000b1b8:	0004bc80 	call	10004bc8 <__mulsi3>
1000b1bc:	1405883a 	add	r2,r2,r16
1000b1c0:	15ef883a 	add	r23,r2,r23
1000b1c4:	b804943a 	slli	r2,r23,16
1000b1c8:	e0ffffcc 	andi	r3,fp,65535
1000b1cc:	8c400104 	addi	r17,r17,4
1000b1d0:	10c6b03a 	or	r3,r2,r3
1000b1d4:	88ffff15 	stw	r3,-4(r17)
1000b1d8:	b5800104 	addi	r22,r22,4
1000b1dc:	b13fff17 	ldw	r4,-4(r22)
1000b1e0:	acc00104 	addi	r19,r21,4
1000b1e4:	900b883a 	mov	r5,r18
1000b1e8:	2008d43a 	srli	r4,r4,16
1000b1ec:	9c000017 	ldw	r16,0(r19)
1000b1f0:	0004bc80 	call	10004bc8 <__mulsi3>
1000b1f4:	b806d43a 	srli	r3,r23,16
1000b1f8:	813fffcc 	andi	r4,r16,65535
1000b1fc:	1105883a 	add	r2,r2,r4
1000b200:	10f9883a 	add	fp,r2,r3
1000b204:	e02ed43a 	srli	r23,fp,16
1000b208:	b53fe736 	bltu	r22,r20,1000b1a8 <__alt_data_end+0xf800b1a8>
1000b20c:	af000115 	stw	fp,4(r21)
1000b210:	d8c00017 	ldw	r3,0(sp)
1000b214:	d9000517 	ldw	r4,20(sp)
1000b218:	18c00104 	addi	r3,r3,4
1000b21c:	d8c00015 	stw	r3,0(sp)
1000b220:	d8c00117 	ldw	r3,4(sp)
1000b224:	18c00104 	addi	r3,r3,4
1000b228:	d8c00115 	stw	r3,4(sp)
1000b22c:	d8c00017 	ldw	r3,0(sp)
1000b230:	193fb136 	bltu	r3,r4,1000b0f8 <__alt_data_end+0xf800b0f8>
1000b234:	d8c00217 	ldw	r3,8(sp)
1000b238:	00c00c0e 	bge	zero,r3,1000b26c <__multiply+0x24c>
1000b23c:	d8c00317 	ldw	r3,12(sp)
1000b240:	18bfff17 	ldw	r2,-4(r3)
1000b244:	1d7fff04 	addi	r21,r3,-4
1000b248:	10000326 	beq	r2,zero,1000b258 <__multiply+0x238>
1000b24c:	00000706 	br	1000b26c <__multiply+0x24c>
1000b250:	a8800017 	ldw	r2,0(r21)
1000b254:	1000051e 	bne	r2,zero,1000b26c <__multiply+0x24c>
1000b258:	d8c00217 	ldw	r3,8(sp)
1000b25c:	ad7fff04 	addi	r21,r21,-4
1000b260:	18ffffc4 	addi	r3,r3,-1
1000b264:	d8c00215 	stw	r3,8(sp)
1000b268:	183ff91e 	bne	r3,zero,1000b250 <__alt_data_end+0xf800b250>
1000b26c:	d8c00617 	ldw	r3,24(sp)
1000b270:	d9000217 	ldw	r4,8(sp)
1000b274:	1805883a 	mov	r2,r3
1000b278:	19000415 	stw	r4,16(r3)
1000b27c:	dfc01017 	ldw	ra,64(sp)
1000b280:	df000f17 	ldw	fp,60(sp)
1000b284:	ddc00e17 	ldw	r23,56(sp)
1000b288:	dd800d17 	ldw	r22,52(sp)
1000b28c:	dd400c17 	ldw	r21,48(sp)
1000b290:	dd000b17 	ldw	r20,44(sp)
1000b294:	dcc00a17 	ldw	r19,40(sp)
1000b298:	dc800917 	ldw	r18,36(sp)
1000b29c:	dc400817 	ldw	r17,32(sp)
1000b2a0:	dc000717 	ldw	r16,28(sp)
1000b2a4:	dec01104 	addi	sp,sp,68
1000b2a8:	f800283a 	ret

1000b2ac <__pow5mult>:
1000b2ac:	defffa04 	addi	sp,sp,-24
1000b2b0:	dcc00315 	stw	r19,12(sp)
1000b2b4:	dc000015 	stw	r16,0(sp)
1000b2b8:	dfc00515 	stw	ra,20(sp)
1000b2bc:	dd000415 	stw	r20,16(sp)
1000b2c0:	dc800215 	stw	r18,8(sp)
1000b2c4:	dc400115 	stw	r17,4(sp)
1000b2c8:	308000cc 	andi	r2,r6,3
1000b2cc:	3021883a 	mov	r16,r6
1000b2d0:	2027883a 	mov	r19,r4
1000b2d4:	10002f1e 	bne	r2,zero,1000b394 <__pow5mult+0xe8>
1000b2d8:	2825883a 	mov	r18,r5
1000b2dc:	8021d0ba 	srai	r16,r16,2
1000b2e0:	80001a26 	beq	r16,zero,1000b34c <__pow5mult+0xa0>
1000b2e4:	9c401217 	ldw	r17,72(r19)
1000b2e8:	8800061e 	bne	r17,zero,1000b304 <__pow5mult+0x58>
1000b2ec:	00003406 	br	1000b3c0 <__pow5mult+0x114>
1000b2f0:	8021d07a 	srai	r16,r16,1
1000b2f4:	80001526 	beq	r16,zero,1000b34c <__pow5mult+0xa0>
1000b2f8:	88800017 	ldw	r2,0(r17)
1000b2fc:	10001c26 	beq	r2,zero,1000b370 <__pow5mult+0xc4>
1000b300:	1023883a 	mov	r17,r2
1000b304:	8080004c 	andi	r2,r16,1
1000b308:	103ff926 	beq	r2,zero,1000b2f0 <__alt_data_end+0xf800b2f0>
1000b30c:	880d883a 	mov	r6,r17
1000b310:	900b883a 	mov	r5,r18
1000b314:	9809883a 	mov	r4,r19
1000b318:	000b0200 	call	1000b020 <__multiply>
1000b31c:	90001b26 	beq	r18,zero,1000b38c <__pow5mult+0xe0>
1000b320:	91000117 	ldw	r4,4(r18)
1000b324:	98c01317 	ldw	r3,76(r19)
1000b328:	8021d07a 	srai	r16,r16,1
1000b32c:	2109883a 	add	r4,r4,r4
1000b330:	2109883a 	add	r4,r4,r4
1000b334:	1907883a 	add	r3,r3,r4
1000b338:	19000017 	ldw	r4,0(r3)
1000b33c:	91000015 	stw	r4,0(r18)
1000b340:	1c800015 	stw	r18,0(r3)
1000b344:	1025883a 	mov	r18,r2
1000b348:	803feb1e 	bne	r16,zero,1000b2f8 <__alt_data_end+0xf800b2f8>
1000b34c:	9005883a 	mov	r2,r18
1000b350:	dfc00517 	ldw	ra,20(sp)
1000b354:	dd000417 	ldw	r20,16(sp)
1000b358:	dcc00317 	ldw	r19,12(sp)
1000b35c:	dc800217 	ldw	r18,8(sp)
1000b360:	dc400117 	ldw	r17,4(sp)
1000b364:	dc000017 	ldw	r16,0(sp)
1000b368:	dec00604 	addi	sp,sp,24
1000b36c:	f800283a 	ret
1000b370:	880d883a 	mov	r6,r17
1000b374:	880b883a 	mov	r5,r17
1000b378:	9809883a 	mov	r4,r19
1000b37c:	000b0200 	call	1000b020 <__multiply>
1000b380:	88800015 	stw	r2,0(r17)
1000b384:	10000015 	stw	zero,0(r2)
1000b388:	003fdd06 	br	1000b300 <__alt_data_end+0xf800b300>
1000b38c:	1025883a 	mov	r18,r2
1000b390:	003fd706 	br	1000b2f0 <__alt_data_end+0xf800b2f0>
1000b394:	10bfffc4 	addi	r2,r2,-1
1000b398:	1085883a 	add	r2,r2,r2
1000b39c:	00c40074 	movhi	r3,4097
1000b3a0:	18d34504 	addi	r3,r3,19732
1000b3a4:	1085883a 	add	r2,r2,r2
1000b3a8:	1885883a 	add	r2,r3,r2
1000b3ac:	11800017 	ldw	r6,0(r2)
1000b3b0:	000f883a 	mov	r7,zero
1000b3b4:	000ac800 	call	1000ac80 <__multadd>
1000b3b8:	1025883a 	mov	r18,r2
1000b3bc:	003fc706 	br	1000b2dc <__alt_data_end+0xf800b2dc>
1000b3c0:	05000044 	movi	r20,1
1000b3c4:	a00b883a 	mov	r5,r20
1000b3c8:	9809883a 	mov	r4,r19
1000b3cc:	000abb00 	call	1000abb0 <_Balloc>
1000b3d0:	1023883a 	mov	r17,r2
1000b3d4:	00809c44 	movi	r2,625
1000b3d8:	88800515 	stw	r2,20(r17)
1000b3dc:	8d000415 	stw	r20,16(r17)
1000b3e0:	9c401215 	stw	r17,72(r19)
1000b3e4:	88000015 	stw	zero,0(r17)
1000b3e8:	003fc606 	br	1000b304 <__alt_data_end+0xf800b304>

1000b3ec <__lshift>:
1000b3ec:	defff904 	addi	sp,sp,-28
1000b3f0:	dd400515 	stw	r21,20(sp)
1000b3f4:	dcc00315 	stw	r19,12(sp)
1000b3f8:	302bd17a 	srai	r21,r6,5
1000b3fc:	2cc00417 	ldw	r19,16(r5)
1000b400:	28800217 	ldw	r2,8(r5)
1000b404:	dd000415 	stw	r20,16(sp)
1000b408:	ace7883a 	add	r19,r21,r19
1000b40c:	dc800215 	stw	r18,8(sp)
1000b410:	dc400115 	stw	r17,4(sp)
1000b414:	dc000015 	stw	r16,0(sp)
1000b418:	dfc00615 	stw	ra,24(sp)
1000b41c:	9c000044 	addi	r16,r19,1
1000b420:	2823883a 	mov	r17,r5
1000b424:	3029883a 	mov	r20,r6
1000b428:	2025883a 	mov	r18,r4
1000b42c:	29400117 	ldw	r5,4(r5)
1000b430:	1400030e 	bge	r2,r16,1000b440 <__lshift+0x54>
1000b434:	1085883a 	add	r2,r2,r2
1000b438:	29400044 	addi	r5,r5,1
1000b43c:	143ffd16 	blt	r2,r16,1000b434 <__alt_data_end+0xf800b434>
1000b440:	9009883a 	mov	r4,r18
1000b444:	000abb00 	call	1000abb0 <_Balloc>
1000b448:	10c00504 	addi	r3,r2,20
1000b44c:	0540070e 	bge	zero,r21,1000b46c <__lshift+0x80>
1000b450:	ad6b883a 	add	r21,r21,r21
1000b454:	ad6b883a 	add	r21,r21,r21
1000b458:	1809883a 	mov	r4,r3
1000b45c:	1d47883a 	add	r3,r3,r21
1000b460:	20000015 	stw	zero,0(r4)
1000b464:	21000104 	addi	r4,r4,4
1000b468:	193ffd1e 	bne	r3,r4,1000b460 <__alt_data_end+0xf800b460>
1000b46c:	8a000417 	ldw	r8,16(r17)
1000b470:	89000504 	addi	r4,r17,20
1000b474:	a18007cc 	andi	r6,r20,31
1000b478:	4211883a 	add	r8,r8,r8
1000b47c:	4211883a 	add	r8,r8,r8
1000b480:	2211883a 	add	r8,r4,r8
1000b484:	30002326 	beq	r6,zero,1000b514 <__lshift+0x128>
1000b488:	02400804 	movi	r9,32
1000b48c:	4993c83a 	sub	r9,r9,r6
1000b490:	000b883a 	mov	r5,zero
1000b494:	21c00017 	ldw	r7,0(r4)
1000b498:	1815883a 	mov	r10,r3
1000b49c:	18c00104 	addi	r3,r3,4
1000b4a0:	398e983a 	sll	r7,r7,r6
1000b4a4:	21000104 	addi	r4,r4,4
1000b4a8:	394ab03a 	or	r5,r7,r5
1000b4ac:	197fff15 	stw	r5,-4(r3)
1000b4b0:	217fff17 	ldw	r5,-4(r4)
1000b4b4:	2a4ad83a 	srl	r5,r5,r9
1000b4b8:	223ff636 	bltu	r4,r8,1000b494 <__alt_data_end+0xf800b494>
1000b4bc:	51400115 	stw	r5,4(r10)
1000b4c0:	28001a1e 	bne	r5,zero,1000b52c <__lshift+0x140>
1000b4c4:	843fffc4 	addi	r16,r16,-1
1000b4c8:	14000415 	stw	r16,16(r2)
1000b4cc:	88000826 	beq	r17,zero,1000b4f0 <__lshift+0x104>
1000b4d0:	89000117 	ldw	r4,4(r17)
1000b4d4:	90c01317 	ldw	r3,76(r18)
1000b4d8:	2109883a 	add	r4,r4,r4
1000b4dc:	2109883a 	add	r4,r4,r4
1000b4e0:	1907883a 	add	r3,r3,r4
1000b4e4:	19000017 	ldw	r4,0(r3)
1000b4e8:	89000015 	stw	r4,0(r17)
1000b4ec:	1c400015 	stw	r17,0(r3)
1000b4f0:	dfc00617 	ldw	ra,24(sp)
1000b4f4:	dd400517 	ldw	r21,20(sp)
1000b4f8:	dd000417 	ldw	r20,16(sp)
1000b4fc:	dcc00317 	ldw	r19,12(sp)
1000b500:	dc800217 	ldw	r18,8(sp)
1000b504:	dc400117 	ldw	r17,4(sp)
1000b508:	dc000017 	ldw	r16,0(sp)
1000b50c:	dec00704 	addi	sp,sp,28
1000b510:	f800283a 	ret
1000b514:	21400017 	ldw	r5,0(r4)
1000b518:	18c00104 	addi	r3,r3,4
1000b51c:	21000104 	addi	r4,r4,4
1000b520:	197fff15 	stw	r5,-4(r3)
1000b524:	223ffb36 	bltu	r4,r8,1000b514 <__alt_data_end+0xf800b514>
1000b528:	003fe606 	br	1000b4c4 <__alt_data_end+0xf800b4c4>
1000b52c:	9c000084 	addi	r16,r19,2
1000b530:	003fe406 	br	1000b4c4 <__alt_data_end+0xf800b4c4>

1000b534 <__mcmp>:
1000b534:	20800417 	ldw	r2,16(r4)
1000b538:	28c00417 	ldw	r3,16(r5)
1000b53c:	10c5c83a 	sub	r2,r2,r3
1000b540:	1000111e 	bne	r2,zero,1000b588 <__mcmp+0x54>
1000b544:	18c7883a 	add	r3,r3,r3
1000b548:	18c7883a 	add	r3,r3,r3
1000b54c:	21000504 	addi	r4,r4,20
1000b550:	29400504 	addi	r5,r5,20
1000b554:	20c5883a 	add	r2,r4,r3
1000b558:	28cb883a 	add	r5,r5,r3
1000b55c:	00000106 	br	1000b564 <__mcmp+0x30>
1000b560:	20800a2e 	bgeu	r4,r2,1000b58c <__mcmp+0x58>
1000b564:	10bfff04 	addi	r2,r2,-4
1000b568:	297fff04 	addi	r5,r5,-4
1000b56c:	11800017 	ldw	r6,0(r2)
1000b570:	28c00017 	ldw	r3,0(r5)
1000b574:	30fffa26 	beq	r6,r3,1000b560 <__alt_data_end+0xf800b560>
1000b578:	30c00236 	bltu	r6,r3,1000b584 <__mcmp+0x50>
1000b57c:	00800044 	movi	r2,1
1000b580:	f800283a 	ret
1000b584:	00bfffc4 	movi	r2,-1
1000b588:	f800283a 	ret
1000b58c:	0005883a 	mov	r2,zero
1000b590:	f800283a 	ret

1000b594 <__mdiff>:
1000b594:	28c00417 	ldw	r3,16(r5)
1000b598:	30800417 	ldw	r2,16(r6)
1000b59c:	defffa04 	addi	sp,sp,-24
1000b5a0:	dcc00315 	stw	r19,12(sp)
1000b5a4:	dc800215 	stw	r18,8(sp)
1000b5a8:	dfc00515 	stw	ra,20(sp)
1000b5ac:	dd000415 	stw	r20,16(sp)
1000b5b0:	dc400115 	stw	r17,4(sp)
1000b5b4:	dc000015 	stw	r16,0(sp)
1000b5b8:	1887c83a 	sub	r3,r3,r2
1000b5bc:	2825883a 	mov	r18,r5
1000b5c0:	3027883a 	mov	r19,r6
1000b5c4:	1800141e 	bne	r3,zero,1000b618 <__mdiff+0x84>
1000b5c8:	1085883a 	add	r2,r2,r2
1000b5cc:	1085883a 	add	r2,r2,r2
1000b5d0:	2a000504 	addi	r8,r5,20
1000b5d4:	34000504 	addi	r16,r6,20
1000b5d8:	4087883a 	add	r3,r8,r2
1000b5dc:	8085883a 	add	r2,r16,r2
1000b5e0:	00000106 	br	1000b5e8 <__mdiff+0x54>
1000b5e4:	40c0592e 	bgeu	r8,r3,1000b74c <__mdiff+0x1b8>
1000b5e8:	18ffff04 	addi	r3,r3,-4
1000b5ec:	10bfff04 	addi	r2,r2,-4
1000b5f0:	19c00017 	ldw	r7,0(r3)
1000b5f4:	11400017 	ldw	r5,0(r2)
1000b5f8:	397ffa26 	beq	r7,r5,1000b5e4 <__alt_data_end+0xf800b5e4>
1000b5fc:	3940592e 	bgeu	r7,r5,1000b764 <__mdiff+0x1d0>
1000b600:	9005883a 	mov	r2,r18
1000b604:	4023883a 	mov	r17,r8
1000b608:	9825883a 	mov	r18,r19
1000b60c:	05000044 	movi	r20,1
1000b610:	1027883a 	mov	r19,r2
1000b614:	00000406 	br	1000b628 <__mdiff+0x94>
1000b618:	18005616 	blt	r3,zero,1000b774 <__mdiff+0x1e0>
1000b61c:	34400504 	addi	r17,r6,20
1000b620:	2c000504 	addi	r16,r5,20
1000b624:	0029883a 	mov	r20,zero
1000b628:	91400117 	ldw	r5,4(r18)
1000b62c:	000abb00 	call	1000abb0 <_Balloc>
1000b630:	92400417 	ldw	r9,16(r18)
1000b634:	9b000417 	ldw	r12,16(r19)
1000b638:	12c00504 	addi	r11,r2,20
1000b63c:	4a51883a 	add	r8,r9,r9
1000b640:	6319883a 	add	r12,r12,r12
1000b644:	4211883a 	add	r8,r8,r8
1000b648:	6319883a 	add	r12,r12,r12
1000b64c:	15000315 	stw	r20,12(r2)
1000b650:	8211883a 	add	r8,r16,r8
1000b654:	8b19883a 	add	r12,r17,r12
1000b658:	0007883a 	mov	r3,zero
1000b65c:	81400017 	ldw	r5,0(r16)
1000b660:	89c00017 	ldw	r7,0(r17)
1000b664:	59800104 	addi	r6,r11,4
1000b668:	293fffcc 	andi	r4,r5,65535
1000b66c:	20c7883a 	add	r3,r4,r3
1000b670:	393fffcc 	andi	r4,r7,65535
1000b674:	1909c83a 	sub	r4,r3,r4
1000b678:	280ad43a 	srli	r5,r5,16
1000b67c:	380ed43a 	srli	r7,r7,16
1000b680:	2007d43a 	srai	r3,r4,16
1000b684:	213fffcc 	andi	r4,r4,65535
1000b688:	29cbc83a 	sub	r5,r5,r7
1000b68c:	28c7883a 	add	r3,r5,r3
1000b690:	180a943a 	slli	r5,r3,16
1000b694:	8c400104 	addi	r17,r17,4
1000b698:	84000104 	addi	r16,r16,4
1000b69c:	2908b03a 	or	r4,r5,r4
1000b6a0:	59000015 	stw	r4,0(r11)
1000b6a4:	1807d43a 	srai	r3,r3,16
1000b6a8:	3015883a 	mov	r10,r6
1000b6ac:	3017883a 	mov	r11,r6
1000b6b0:	8b3fea36 	bltu	r17,r12,1000b65c <__alt_data_end+0xf800b65c>
1000b6b4:	8200162e 	bgeu	r16,r8,1000b710 <__mdiff+0x17c>
1000b6b8:	8017883a 	mov	r11,r16
1000b6bc:	59400017 	ldw	r5,0(r11)
1000b6c0:	31800104 	addi	r6,r6,4
1000b6c4:	5ac00104 	addi	r11,r11,4
1000b6c8:	293fffcc 	andi	r4,r5,65535
1000b6cc:	20c7883a 	add	r3,r4,r3
1000b6d0:	280ed43a 	srli	r7,r5,16
1000b6d4:	180bd43a 	srai	r5,r3,16
1000b6d8:	193fffcc 	andi	r4,r3,65535
1000b6dc:	3947883a 	add	r3,r7,r5
1000b6e0:	180a943a 	slli	r5,r3,16
1000b6e4:	1807d43a 	srai	r3,r3,16
1000b6e8:	2908b03a 	or	r4,r5,r4
1000b6ec:	313fff15 	stw	r4,-4(r6)
1000b6f0:	5a3ff236 	bltu	r11,r8,1000b6bc <__alt_data_end+0xf800b6bc>
1000b6f4:	0406303a 	nor	r3,zero,r16
1000b6f8:	1a07883a 	add	r3,r3,r8
1000b6fc:	1806d0ba 	srli	r3,r3,2
1000b700:	18c00044 	addi	r3,r3,1
1000b704:	18c7883a 	add	r3,r3,r3
1000b708:	18c7883a 	add	r3,r3,r3
1000b70c:	50d5883a 	add	r10,r10,r3
1000b710:	50ffff04 	addi	r3,r10,-4
1000b714:	2000041e 	bne	r4,zero,1000b728 <__mdiff+0x194>
1000b718:	18ffff04 	addi	r3,r3,-4
1000b71c:	19000017 	ldw	r4,0(r3)
1000b720:	4a7fffc4 	addi	r9,r9,-1
1000b724:	203ffc26 	beq	r4,zero,1000b718 <__alt_data_end+0xf800b718>
1000b728:	12400415 	stw	r9,16(r2)
1000b72c:	dfc00517 	ldw	ra,20(sp)
1000b730:	dd000417 	ldw	r20,16(sp)
1000b734:	dcc00317 	ldw	r19,12(sp)
1000b738:	dc800217 	ldw	r18,8(sp)
1000b73c:	dc400117 	ldw	r17,4(sp)
1000b740:	dc000017 	ldw	r16,0(sp)
1000b744:	dec00604 	addi	sp,sp,24
1000b748:	f800283a 	ret
1000b74c:	000b883a 	mov	r5,zero
1000b750:	000abb00 	call	1000abb0 <_Balloc>
1000b754:	00c00044 	movi	r3,1
1000b758:	10c00415 	stw	r3,16(r2)
1000b75c:	10000515 	stw	zero,20(r2)
1000b760:	003ff206 	br	1000b72c <__alt_data_end+0xf800b72c>
1000b764:	8023883a 	mov	r17,r16
1000b768:	0029883a 	mov	r20,zero
1000b76c:	4021883a 	mov	r16,r8
1000b770:	003fad06 	br	1000b628 <__alt_data_end+0xf800b628>
1000b774:	9005883a 	mov	r2,r18
1000b778:	94400504 	addi	r17,r18,20
1000b77c:	9c000504 	addi	r16,r19,20
1000b780:	9825883a 	mov	r18,r19
1000b784:	05000044 	movi	r20,1
1000b788:	1027883a 	mov	r19,r2
1000b78c:	003fa606 	br	1000b628 <__alt_data_end+0xf800b628>

1000b790 <__ulp>:
1000b790:	295ffc2c 	andhi	r5,r5,32752
1000b794:	00bf3034 	movhi	r2,64704
1000b798:	2887883a 	add	r3,r5,r2
1000b79c:	00c0020e 	bge	zero,r3,1000b7a8 <__ulp+0x18>
1000b7a0:	0005883a 	mov	r2,zero
1000b7a4:	f800283a 	ret
1000b7a8:	00c7c83a 	sub	r3,zero,r3
1000b7ac:	1807d53a 	srai	r3,r3,20
1000b7b0:	008004c4 	movi	r2,19
1000b7b4:	10c00b0e 	bge	r2,r3,1000b7e4 <__ulp+0x54>
1000b7b8:	18bffb04 	addi	r2,r3,-20
1000b7bc:	01000784 	movi	r4,30
1000b7c0:	0007883a 	mov	r3,zero
1000b7c4:	20800516 	blt	r4,r2,1000b7dc <__ulp+0x4c>
1000b7c8:	010007c4 	movi	r4,31
1000b7cc:	2089c83a 	sub	r4,r4,r2
1000b7d0:	00800044 	movi	r2,1
1000b7d4:	1104983a 	sll	r2,r2,r4
1000b7d8:	f800283a 	ret
1000b7dc:	00800044 	movi	r2,1
1000b7e0:	f800283a 	ret
1000b7e4:	01400234 	movhi	r5,8
1000b7e8:	28c7d83a 	sra	r3,r5,r3
1000b7ec:	0005883a 	mov	r2,zero
1000b7f0:	f800283a 	ret

1000b7f4 <__b2d>:
1000b7f4:	defffa04 	addi	sp,sp,-24
1000b7f8:	dc000015 	stw	r16,0(sp)
1000b7fc:	24000417 	ldw	r16,16(r4)
1000b800:	dc400115 	stw	r17,4(sp)
1000b804:	24400504 	addi	r17,r4,20
1000b808:	8421883a 	add	r16,r16,r16
1000b80c:	8421883a 	add	r16,r16,r16
1000b810:	8c21883a 	add	r16,r17,r16
1000b814:	dc800215 	stw	r18,8(sp)
1000b818:	84bfff17 	ldw	r18,-4(r16)
1000b81c:	dd000415 	stw	r20,16(sp)
1000b820:	dcc00315 	stw	r19,12(sp)
1000b824:	9009883a 	mov	r4,r18
1000b828:	2829883a 	mov	r20,r5
1000b82c:	dfc00515 	stw	ra,20(sp)
1000b830:	000aecc0 	call	1000aecc <__hi0bits>
1000b834:	00c00804 	movi	r3,32
1000b838:	1889c83a 	sub	r4,r3,r2
1000b83c:	a1000015 	stw	r4,0(r20)
1000b840:	01000284 	movi	r4,10
1000b844:	84ffff04 	addi	r19,r16,-4
1000b848:	20801216 	blt	r4,r2,1000b894 <__b2d+0xa0>
1000b84c:	018002c4 	movi	r6,11
1000b850:	308dc83a 	sub	r6,r6,r2
1000b854:	9186d83a 	srl	r3,r18,r6
1000b858:	18cffc34 	orhi	r3,r3,16368
1000b85c:	8cc0212e 	bgeu	r17,r19,1000b8e4 <__b2d+0xf0>
1000b860:	813ffe17 	ldw	r4,-8(r16)
1000b864:	218cd83a 	srl	r6,r4,r6
1000b868:	10800544 	addi	r2,r2,21
1000b86c:	9084983a 	sll	r2,r18,r2
1000b870:	1184b03a 	or	r2,r2,r6
1000b874:	dfc00517 	ldw	ra,20(sp)
1000b878:	dd000417 	ldw	r20,16(sp)
1000b87c:	dcc00317 	ldw	r19,12(sp)
1000b880:	dc800217 	ldw	r18,8(sp)
1000b884:	dc400117 	ldw	r17,4(sp)
1000b888:	dc000017 	ldw	r16,0(sp)
1000b88c:	dec00604 	addi	sp,sp,24
1000b890:	f800283a 	ret
1000b894:	8cc00f2e 	bgeu	r17,r19,1000b8d4 <__b2d+0xe0>
1000b898:	117ffd44 	addi	r5,r2,-11
1000b89c:	80bffe17 	ldw	r2,-8(r16)
1000b8a0:	28000e26 	beq	r5,zero,1000b8dc <__b2d+0xe8>
1000b8a4:	1949c83a 	sub	r4,r3,r5
1000b8a8:	9164983a 	sll	r18,r18,r5
1000b8ac:	1106d83a 	srl	r3,r2,r4
1000b8b0:	81bffe04 	addi	r6,r16,-8
1000b8b4:	948ffc34 	orhi	r18,r18,16368
1000b8b8:	90c6b03a 	or	r3,r18,r3
1000b8bc:	89800e2e 	bgeu	r17,r6,1000b8f8 <__b2d+0x104>
1000b8c0:	81bffd17 	ldw	r6,-12(r16)
1000b8c4:	1144983a 	sll	r2,r2,r5
1000b8c8:	310ad83a 	srl	r5,r6,r4
1000b8cc:	2884b03a 	or	r2,r5,r2
1000b8d0:	003fe806 	br	1000b874 <__alt_data_end+0xf800b874>
1000b8d4:	10bffd44 	addi	r2,r2,-11
1000b8d8:	1000041e 	bne	r2,zero,1000b8ec <__b2d+0xf8>
1000b8dc:	90cffc34 	orhi	r3,r18,16368
1000b8e0:	003fe406 	br	1000b874 <__alt_data_end+0xf800b874>
1000b8e4:	000d883a 	mov	r6,zero
1000b8e8:	003fdf06 	br	1000b868 <__alt_data_end+0xf800b868>
1000b8ec:	90a4983a 	sll	r18,r18,r2
1000b8f0:	0005883a 	mov	r2,zero
1000b8f4:	003ff906 	br	1000b8dc <__alt_data_end+0xf800b8dc>
1000b8f8:	1144983a 	sll	r2,r2,r5
1000b8fc:	003fdd06 	br	1000b874 <__alt_data_end+0xf800b874>

1000b900 <__d2b>:
1000b900:	defff804 	addi	sp,sp,-32
1000b904:	dc000215 	stw	r16,8(sp)
1000b908:	3021883a 	mov	r16,r6
1000b90c:	dc400315 	stw	r17,12(sp)
1000b910:	8022907a 	slli	r17,r16,1
1000b914:	dd000615 	stw	r20,24(sp)
1000b918:	2829883a 	mov	r20,r5
1000b91c:	01400044 	movi	r5,1
1000b920:	dcc00515 	stw	r19,20(sp)
1000b924:	dc800415 	stw	r18,16(sp)
1000b928:	dfc00715 	stw	ra,28(sp)
1000b92c:	3825883a 	mov	r18,r7
1000b930:	8822d57a 	srli	r17,r17,21
1000b934:	000abb00 	call	1000abb0 <_Balloc>
1000b938:	1027883a 	mov	r19,r2
1000b93c:	00800434 	movhi	r2,16
1000b940:	10bfffc4 	addi	r2,r2,-1
1000b944:	808c703a 	and	r6,r16,r2
1000b948:	88000126 	beq	r17,zero,1000b950 <__d2b+0x50>
1000b94c:	31800434 	orhi	r6,r6,16
1000b950:	d9800015 	stw	r6,0(sp)
1000b954:	a0002426 	beq	r20,zero,1000b9e8 <__d2b+0xe8>
1000b958:	d9000104 	addi	r4,sp,4
1000b95c:	dd000115 	stw	r20,4(sp)
1000b960:	000af340 	call	1000af34 <__lo0bits>
1000b964:	d8c00017 	ldw	r3,0(sp)
1000b968:	10002f1e 	bne	r2,zero,1000ba28 <__d2b+0x128>
1000b96c:	d9000117 	ldw	r4,4(sp)
1000b970:	99000515 	stw	r4,20(r19)
1000b974:	1821003a 	cmpeq	r16,r3,zero
1000b978:	01000084 	movi	r4,2
1000b97c:	2421c83a 	sub	r16,r4,r16
1000b980:	98c00615 	stw	r3,24(r19)
1000b984:	9c000415 	stw	r16,16(r19)
1000b988:	88001f1e 	bne	r17,zero,1000ba08 <__d2b+0x108>
1000b98c:	10bef384 	addi	r2,r2,-1074
1000b990:	90800015 	stw	r2,0(r18)
1000b994:	00900034 	movhi	r2,16384
1000b998:	10bfffc4 	addi	r2,r2,-1
1000b99c:	8085883a 	add	r2,r16,r2
1000b9a0:	1085883a 	add	r2,r2,r2
1000b9a4:	1085883a 	add	r2,r2,r2
1000b9a8:	9885883a 	add	r2,r19,r2
1000b9ac:	11000517 	ldw	r4,20(r2)
1000b9b0:	8020917a 	slli	r16,r16,5
1000b9b4:	000aecc0 	call	1000aecc <__hi0bits>
1000b9b8:	d8c00817 	ldw	r3,32(sp)
1000b9bc:	8085c83a 	sub	r2,r16,r2
1000b9c0:	18800015 	stw	r2,0(r3)
1000b9c4:	9805883a 	mov	r2,r19
1000b9c8:	dfc00717 	ldw	ra,28(sp)
1000b9cc:	dd000617 	ldw	r20,24(sp)
1000b9d0:	dcc00517 	ldw	r19,20(sp)
1000b9d4:	dc800417 	ldw	r18,16(sp)
1000b9d8:	dc400317 	ldw	r17,12(sp)
1000b9dc:	dc000217 	ldw	r16,8(sp)
1000b9e0:	dec00804 	addi	sp,sp,32
1000b9e4:	f800283a 	ret
1000b9e8:	d809883a 	mov	r4,sp
1000b9ec:	000af340 	call	1000af34 <__lo0bits>
1000b9f0:	d8c00017 	ldw	r3,0(sp)
1000b9f4:	04000044 	movi	r16,1
1000b9f8:	9c000415 	stw	r16,16(r19)
1000b9fc:	98c00515 	stw	r3,20(r19)
1000ba00:	10800804 	addi	r2,r2,32
1000ba04:	883fe126 	beq	r17,zero,1000b98c <__alt_data_end+0xf800b98c>
1000ba08:	00c00d44 	movi	r3,53
1000ba0c:	8c7ef344 	addi	r17,r17,-1075
1000ba10:	88a3883a 	add	r17,r17,r2
1000ba14:	1885c83a 	sub	r2,r3,r2
1000ba18:	d8c00817 	ldw	r3,32(sp)
1000ba1c:	94400015 	stw	r17,0(r18)
1000ba20:	18800015 	stw	r2,0(r3)
1000ba24:	003fe706 	br	1000b9c4 <__alt_data_end+0xf800b9c4>
1000ba28:	01000804 	movi	r4,32
1000ba2c:	2089c83a 	sub	r4,r4,r2
1000ba30:	1908983a 	sll	r4,r3,r4
1000ba34:	d9400117 	ldw	r5,4(sp)
1000ba38:	1886d83a 	srl	r3,r3,r2
1000ba3c:	2148b03a 	or	r4,r4,r5
1000ba40:	99000515 	stw	r4,20(r19)
1000ba44:	d8c00015 	stw	r3,0(sp)
1000ba48:	003fca06 	br	1000b974 <__alt_data_end+0xf800b974>

1000ba4c <__ratio>:
1000ba4c:	defff904 	addi	sp,sp,-28
1000ba50:	dc400315 	stw	r17,12(sp)
1000ba54:	2823883a 	mov	r17,r5
1000ba58:	d9400104 	addi	r5,sp,4
1000ba5c:	dfc00615 	stw	ra,24(sp)
1000ba60:	dcc00515 	stw	r19,20(sp)
1000ba64:	dc800415 	stw	r18,16(sp)
1000ba68:	2027883a 	mov	r19,r4
1000ba6c:	dc000215 	stw	r16,8(sp)
1000ba70:	000b7f40 	call	1000b7f4 <__b2d>
1000ba74:	d80b883a 	mov	r5,sp
1000ba78:	8809883a 	mov	r4,r17
1000ba7c:	1025883a 	mov	r18,r2
1000ba80:	1821883a 	mov	r16,r3
1000ba84:	000b7f40 	call	1000b7f4 <__b2d>
1000ba88:	8a000417 	ldw	r8,16(r17)
1000ba8c:	99000417 	ldw	r4,16(r19)
1000ba90:	d9400117 	ldw	r5,4(sp)
1000ba94:	2209c83a 	sub	r4,r4,r8
1000ba98:	2010917a 	slli	r8,r4,5
1000ba9c:	d9000017 	ldw	r4,0(sp)
1000baa0:	2909c83a 	sub	r4,r5,r4
1000baa4:	4109883a 	add	r4,r8,r4
1000baa8:	01000e0e 	bge	zero,r4,1000bae4 <__ratio+0x98>
1000baac:	2008953a 	slli	r4,r4,20
1000bab0:	2421883a 	add	r16,r4,r16
1000bab4:	100d883a 	mov	r6,r2
1000bab8:	180f883a 	mov	r7,r3
1000babc:	9009883a 	mov	r4,r18
1000bac0:	800b883a 	mov	r5,r16
1000bac4:	000fb100 	call	1000fb10 <__divdf3>
1000bac8:	dfc00617 	ldw	ra,24(sp)
1000bacc:	dcc00517 	ldw	r19,20(sp)
1000bad0:	dc800417 	ldw	r18,16(sp)
1000bad4:	dc400317 	ldw	r17,12(sp)
1000bad8:	dc000217 	ldw	r16,8(sp)
1000badc:	dec00704 	addi	sp,sp,28
1000bae0:	f800283a 	ret
1000bae4:	2008953a 	slli	r4,r4,20
1000bae8:	1907c83a 	sub	r3,r3,r4
1000baec:	003ff106 	br	1000bab4 <__alt_data_end+0xf800bab4>

1000baf0 <_mprec_log10>:
1000baf0:	defffe04 	addi	sp,sp,-8
1000baf4:	dc000015 	stw	r16,0(sp)
1000baf8:	dfc00115 	stw	ra,4(sp)
1000bafc:	008005c4 	movi	r2,23
1000bb00:	2021883a 	mov	r16,r4
1000bb04:	11000d0e 	bge	r2,r4,1000bb3c <_mprec_log10+0x4c>
1000bb08:	0005883a 	mov	r2,zero
1000bb0c:	00cffc34 	movhi	r3,16368
1000bb10:	843fffc4 	addi	r16,r16,-1
1000bb14:	000d883a 	mov	r6,zero
1000bb18:	01d00934 	movhi	r7,16420
1000bb1c:	1009883a 	mov	r4,r2
1000bb20:	180b883a 	mov	r5,r3
1000bb24:	00107380 	call	10010738 <__muldf3>
1000bb28:	803ff91e 	bne	r16,zero,1000bb10 <__alt_data_end+0xf800bb10>
1000bb2c:	dfc00117 	ldw	ra,4(sp)
1000bb30:	dc000017 	ldw	r16,0(sp)
1000bb34:	dec00204 	addi	sp,sp,8
1000bb38:	f800283a 	ret
1000bb3c:	202090fa 	slli	r16,r4,3
1000bb40:	00840074 	movhi	r2,4097
1000bb44:	10935c04 	addi	r2,r2,19824
1000bb48:	1421883a 	add	r16,r2,r16
1000bb4c:	80800017 	ldw	r2,0(r16)
1000bb50:	80c00117 	ldw	r3,4(r16)
1000bb54:	dfc00117 	ldw	ra,4(sp)
1000bb58:	dc000017 	ldw	r16,0(sp)
1000bb5c:	dec00204 	addi	sp,sp,8
1000bb60:	f800283a 	ret

1000bb64 <__copybits>:
1000bb64:	297fffc4 	addi	r5,r5,-1
1000bb68:	280fd17a 	srai	r7,r5,5
1000bb6c:	30c00417 	ldw	r3,16(r6)
1000bb70:	30800504 	addi	r2,r6,20
1000bb74:	39c00044 	addi	r7,r7,1
1000bb78:	18c7883a 	add	r3,r3,r3
1000bb7c:	39cf883a 	add	r7,r7,r7
1000bb80:	18c7883a 	add	r3,r3,r3
1000bb84:	39cf883a 	add	r7,r7,r7
1000bb88:	10c7883a 	add	r3,r2,r3
1000bb8c:	21cf883a 	add	r7,r4,r7
1000bb90:	10c00d2e 	bgeu	r2,r3,1000bbc8 <__copybits+0x64>
1000bb94:	200b883a 	mov	r5,r4
1000bb98:	12000017 	ldw	r8,0(r2)
1000bb9c:	29400104 	addi	r5,r5,4
1000bba0:	10800104 	addi	r2,r2,4
1000bba4:	2a3fff15 	stw	r8,-4(r5)
1000bba8:	10fffb36 	bltu	r2,r3,1000bb98 <__alt_data_end+0xf800bb98>
1000bbac:	1985c83a 	sub	r2,r3,r6
1000bbb0:	10bffac4 	addi	r2,r2,-21
1000bbb4:	1004d0ba 	srli	r2,r2,2
1000bbb8:	10800044 	addi	r2,r2,1
1000bbbc:	1085883a 	add	r2,r2,r2
1000bbc0:	1085883a 	add	r2,r2,r2
1000bbc4:	2089883a 	add	r4,r4,r2
1000bbc8:	21c0032e 	bgeu	r4,r7,1000bbd8 <__copybits+0x74>
1000bbcc:	20000015 	stw	zero,0(r4)
1000bbd0:	21000104 	addi	r4,r4,4
1000bbd4:	21fffd36 	bltu	r4,r7,1000bbcc <__alt_data_end+0xf800bbcc>
1000bbd8:	f800283a 	ret

1000bbdc <__any_on>:
1000bbdc:	20c00417 	ldw	r3,16(r4)
1000bbe0:	2805d17a 	srai	r2,r5,5
1000bbe4:	21000504 	addi	r4,r4,20
1000bbe8:	18800d0e 	bge	r3,r2,1000bc20 <__any_on+0x44>
1000bbec:	18c7883a 	add	r3,r3,r3
1000bbf0:	18c7883a 	add	r3,r3,r3
1000bbf4:	20c7883a 	add	r3,r4,r3
1000bbf8:	20c0192e 	bgeu	r4,r3,1000bc60 <__any_on+0x84>
1000bbfc:	18bfff17 	ldw	r2,-4(r3)
1000bc00:	18ffff04 	addi	r3,r3,-4
1000bc04:	1000041e 	bne	r2,zero,1000bc18 <__any_on+0x3c>
1000bc08:	20c0142e 	bgeu	r4,r3,1000bc5c <__any_on+0x80>
1000bc0c:	18ffff04 	addi	r3,r3,-4
1000bc10:	19400017 	ldw	r5,0(r3)
1000bc14:	283ffc26 	beq	r5,zero,1000bc08 <__alt_data_end+0xf800bc08>
1000bc18:	00800044 	movi	r2,1
1000bc1c:	f800283a 	ret
1000bc20:	10c00a0e 	bge	r2,r3,1000bc4c <__any_on+0x70>
1000bc24:	1085883a 	add	r2,r2,r2
1000bc28:	1085883a 	add	r2,r2,r2
1000bc2c:	294007cc 	andi	r5,r5,31
1000bc30:	2087883a 	add	r3,r4,r2
1000bc34:	283ff026 	beq	r5,zero,1000bbf8 <__alt_data_end+0xf800bbf8>
1000bc38:	19800017 	ldw	r6,0(r3)
1000bc3c:	3144d83a 	srl	r2,r6,r5
1000bc40:	114a983a 	sll	r5,r2,r5
1000bc44:	317ff41e 	bne	r6,r5,1000bc18 <__alt_data_end+0xf800bc18>
1000bc48:	003feb06 	br	1000bbf8 <__alt_data_end+0xf800bbf8>
1000bc4c:	1085883a 	add	r2,r2,r2
1000bc50:	1085883a 	add	r2,r2,r2
1000bc54:	2087883a 	add	r3,r4,r2
1000bc58:	003fe706 	br	1000bbf8 <__alt_data_end+0xf800bbf8>
1000bc5c:	f800283a 	ret
1000bc60:	0005883a 	mov	r2,zero
1000bc64:	f800283a 	ret

1000bc68 <_realloc_r>:
1000bc68:	defff604 	addi	sp,sp,-40
1000bc6c:	dc800215 	stw	r18,8(sp)
1000bc70:	dfc00915 	stw	ra,36(sp)
1000bc74:	df000815 	stw	fp,32(sp)
1000bc78:	ddc00715 	stw	r23,28(sp)
1000bc7c:	dd800615 	stw	r22,24(sp)
1000bc80:	dd400515 	stw	r21,20(sp)
1000bc84:	dd000415 	stw	r20,16(sp)
1000bc88:	dcc00315 	stw	r19,12(sp)
1000bc8c:	dc400115 	stw	r17,4(sp)
1000bc90:	dc000015 	stw	r16,0(sp)
1000bc94:	3025883a 	mov	r18,r6
1000bc98:	2800b726 	beq	r5,zero,1000bf78 <_realloc_r+0x310>
1000bc9c:	282b883a 	mov	r21,r5
1000bca0:	2029883a 	mov	r20,r4
1000bca4:	00120a40 	call	100120a4 <__malloc_lock>
1000bca8:	a8bfff17 	ldw	r2,-4(r21)
1000bcac:	043fff04 	movi	r16,-4
1000bcb0:	90c002c4 	addi	r3,r18,11
1000bcb4:	01000584 	movi	r4,22
1000bcb8:	acfffe04 	addi	r19,r21,-8
1000bcbc:	1420703a 	and	r16,r2,r16
1000bcc0:	20c0332e 	bgeu	r4,r3,1000bd90 <_realloc_r+0x128>
1000bcc4:	047ffe04 	movi	r17,-8
1000bcc8:	1c62703a 	and	r17,r3,r17
1000bccc:	8807883a 	mov	r3,r17
1000bcd0:	88005816 	blt	r17,zero,1000be34 <_realloc_r+0x1cc>
1000bcd4:	8c805736 	bltu	r17,r18,1000be34 <_realloc_r+0x1cc>
1000bcd8:	80c0300e 	bge	r16,r3,1000bd9c <_realloc_r+0x134>
1000bcdc:	07040074 	movhi	fp,4097
1000bce0:	e718ba04 	addi	fp,fp,25320
1000bce4:	e1c00217 	ldw	r7,8(fp)
1000bce8:	9c09883a 	add	r4,r19,r16
1000bcec:	22000117 	ldw	r8,4(r4)
1000bcf0:	21c06326 	beq	r4,r7,1000be80 <_realloc_r+0x218>
1000bcf4:	017fff84 	movi	r5,-2
1000bcf8:	414a703a 	and	r5,r8,r5
1000bcfc:	214b883a 	add	r5,r4,r5
1000bd00:	29800117 	ldw	r6,4(r5)
1000bd04:	3180004c 	andi	r6,r6,1
1000bd08:	30003f26 	beq	r6,zero,1000be08 <_realloc_r+0x1a0>
1000bd0c:	1080004c 	andi	r2,r2,1
1000bd10:	10008326 	beq	r2,zero,1000bf20 <_realloc_r+0x2b8>
1000bd14:	900b883a 	mov	r5,r18
1000bd18:	a009883a 	mov	r4,r20
1000bd1c:	0009ef40 	call	10009ef4 <_malloc_r>
1000bd20:	1025883a 	mov	r18,r2
1000bd24:	10011e26 	beq	r2,zero,1000c1a0 <_realloc_r+0x538>
1000bd28:	a93fff17 	ldw	r4,-4(r21)
1000bd2c:	10fffe04 	addi	r3,r2,-8
1000bd30:	00bfff84 	movi	r2,-2
1000bd34:	2084703a 	and	r2,r4,r2
1000bd38:	9885883a 	add	r2,r19,r2
1000bd3c:	1880ee26 	beq	r3,r2,1000c0f8 <_realloc_r+0x490>
1000bd40:	81bfff04 	addi	r6,r16,-4
1000bd44:	00800904 	movi	r2,36
1000bd48:	1180b836 	bltu	r2,r6,1000c02c <_realloc_r+0x3c4>
1000bd4c:	00c004c4 	movi	r3,19
1000bd50:	19809636 	bltu	r3,r6,1000bfac <_realloc_r+0x344>
1000bd54:	9005883a 	mov	r2,r18
1000bd58:	a807883a 	mov	r3,r21
1000bd5c:	19000017 	ldw	r4,0(r3)
1000bd60:	11000015 	stw	r4,0(r2)
1000bd64:	19000117 	ldw	r4,4(r3)
1000bd68:	11000115 	stw	r4,4(r2)
1000bd6c:	18c00217 	ldw	r3,8(r3)
1000bd70:	10c00215 	stw	r3,8(r2)
1000bd74:	a80b883a 	mov	r5,r21
1000bd78:	a009883a 	mov	r4,r20
1000bd7c:	00092fc0 	call	100092fc <_free_r>
1000bd80:	a009883a 	mov	r4,r20
1000bd84:	00120c80 	call	100120c8 <__malloc_unlock>
1000bd88:	9005883a 	mov	r2,r18
1000bd8c:	00001206 	br	1000bdd8 <_realloc_r+0x170>
1000bd90:	00c00404 	movi	r3,16
1000bd94:	1823883a 	mov	r17,r3
1000bd98:	003fce06 	br	1000bcd4 <__alt_data_end+0xf800bcd4>
1000bd9c:	a825883a 	mov	r18,r21
1000bda0:	8445c83a 	sub	r2,r16,r17
1000bda4:	00c003c4 	movi	r3,15
1000bda8:	18802636 	bltu	r3,r2,1000be44 <_realloc_r+0x1dc>
1000bdac:	99800117 	ldw	r6,4(r19)
1000bdb0:	9c07883a 	add	r3,r19,r16
1000bdb4:	3180004c 	andi	r6,r6,1
1000bdb8:	3420b03a 	or	r16,r6,r16
1000bdbc:	9c000115 	stw	r16,4(r19)
1000bdc0:	18800117 	ldw	r2,4(r3)
1000bdc4:	10800054 	ori	r2,r2,1
1000bdc8:	18800115 	stw	r2,4(r3)
1000bdcc:	a009883a 	mov	r4,r20
1000bdd0:	00120c80 	call	100120c8 <__malloc_unlock>
1000bdd4:	9005883a 	mov	r2,r18
1000bdd8:	dfc00917 	ldw	ra,36(sp)
1000bddc:	df000817 	ldw	fp,32(sp)
1000bde0:	ddc00717 	ldw	r23,28(sp)
1000bde4:	dd800617 	ldw	r22,24(sp)
1000bde8:	dd400517 	ldw	r21,20(sp)
1000bdec:	dd000417 	ldw	r20,16(sp)
1000bdf0:	dcc00317 	ldw	r19,12(sp)
1000bdf4:	dc800217 	ldw	r18,8(sp)
1000bdf8:	dc400117 	ldw	r17,4(sp)
1000bdfc:	dc000017 	ldw	r16,0(sp)
1000be00:	dec00a04 	addi	sp,sp,40
1000be04:	f800283a 	ret
1000be08:	017fff04 	movi	r5,-4
1000be0c:	414a703a 	and	r5,r8,r5
1000be10:	814d883a 	add	r6,r16,r5
1000be14:	30c01f16 	blt	r6,r3,1000be94 <_realloc_r+0x22c>
1000be18:	20800317 	ldw	r2,12(r4)
1000be1c:	20c00217 	ldw	r3,8(r4)
1000be20:	a825883a 	mov	r18,r21
1000be24:	3021883a 	mov	r16,r6
1000be28:	18800315 	stw	r2,12(r3)
1000be2c:	10c00215 	stw	r3,8(r2)
1000be30:	003fdb06 	br	1000bda0 <__alt_data_end+0xf800bda0>
1000be34:	00800304 	movi	r2,12
1000be38:	a0800015 	stw	r2,0(r20)
1000be3c:	0005883a 	mov	r2,zero
1000be40:	003fe506 	br	1000bdd8 <__alt_data_end+0xf800bdd8>
1000be44:	98c00117 	ldw	r3,4(r19)
1000be48:	9c4b883a 	add	r5,r19,r17
1000be4c:	11000054 	ori	r4,r2,1
1000be50:	18c0004c 	andi	r3,r3,1
1000be54:	1c62b03a 	or	r17,r3,r17
1000be58:	9c400115 	stw	r17,4(r19)
1000be5c:	29000115 	stw	r4,4(r5)
1000be60:	2885883a 	add	r2,r5,r2
1000be64:	10c00117 	ldw	r3,4(r2)
1000be68:	29400204 	addi	r5,r5,8
1000be6c:	a009883a 	mov	r4,r20
1000be70:	18c00054 	ori	r3,r3,1
1000be74:	10c00115 	stw	r3,4(r2)
1000be78:	00092fc0 	call	100092fc <_free_r>
1000be7c:	003fd306 	br	1000bdcc <__alt_data_end+0xf800bdcc>
1000be80:	017fff04 	movi	r5,-4
1000be84:	414a703a 	and	r5,r8,r5
1000be88:	89800404 	addi	r6,r17,16
1000be8c:	8151883a 	add	r8,r16,r5
1000be90:	4180590e 	bge	r8,r6,1000bff8 <_realloc_r+0x390>
1000be94:	1080004c 	andi	r2,r2,1
1000be98:	103f9e1e 	bne	r2,zero,1000bd14 <__alt_data_end+0xf800bd14>
1000be9c:	adbffe17 	ldw	r22,-8(r21)
1000bea0:	00bfff04 	movi	r2,-4
1000bea4:	9dadc83a 	sub	r22,r19,r22
1000bea8:	b1800117 	ldw	r6,4(r22)
1000beac:	3084703a 	and	r2,r6,r2
1000beb0:	20002026 	beq	r4,zero,1000bf34 <_realloc_r+0x2cc>
1000beb4:	80af883a 	add	r23,r16,r2
1000beb8:	b96f883a 	add	r23,r23,r5
1000bebc:	21c05f26 	beq	r4,r7,1000c03c <_realloc_r+0x3d4>
1000bec0:	b8c01c16 	blt	r23,r3,1000bf34 <_realloc_r+0x2cc>
1000bec4:	20800317 	ldw	r2,12(r4)
1000bec8:	20c00217 	ldw	r3,8(r4)
1000becc:	81bfff04 	addi	r6,r16,-4
1000bed0:	01000904 	movi	r4,36
1000bed4:	18800315 	stw	r2,12(r3)
1000bed8:	10c00215 	stw	r3,8(r2)
1000bedc:	b0c00217 	ldw	r3,8(r22)
1000bee0:	b0800317 	ldw	r2,12(r22)
1000bee4:	b4800204 	addi	r18,r22,8
1000bee8:	18800315 	stw	r2,12(r3)
1000beec:	10c00215 	stw	r3,8(r2)
1000bef0:	21801b36 	bltu	r4,r6,1000bf60 <_realloc_r+0x2f8>
1000bef4:	008004c4 	movi	r2,19
1000bef8:	1180352e 	bgeu	r2,r6,1000bfd0 <_realloc_r+0x368>
1000befc:	a8800017 	ldw	r2,0(r21)
1000bf00:	b0800215 	stw	r2,8(r22)
1000bf04:	a8800117 	ldw	r2,4(r21)
1000bf08:	b0800315 	stw	r2,12(r22)
1000bf0c:	008006c4 	movi	r2,27
1000bf10:	11807f36 	bltu	r2,r6,1000c110 <_realloc_r+0x4a8>
1000bf14:	b0800404 	addi	r2,r22,16
1000bf18:	ad400204 	addi	r21,r21,8
1000bf1c:	00002d06 	br	1000bfd4 <_realloc_r+0x36c>
1000bf20:	adbffe17 	ldw	r22,-8(r21)
1000bf24:	00bfff04 	movi	r2,-4
1000bf28:	9dadc83a 	sub	r22,r19,r22
1000bf2c:	b1000117 	ldw	r4,4(r22)
1000bf30:	2084703a 	and	r2,r4,r2
1000bf34:	b03f7726 	beq	r22,zero,1000bd14 <__alt_data_end+0xf800bd14>
1000bf38:	80af883a 	add	r23,r16,r2
1000bf3c:	b8ff7516 	blt	r23,r3,1000bd14 <__alt_data_end+0xf800bd14>
1000bf40:	b0800317 	ldw	r2,12(r22)
1000bf44:	b0c00217 	ldw	r3,8(r22)
1000bf48:	81bfff04 	addi	r6,r16,-4
1000bf4c:	01000904 	movi	r4,36
1000bf50:	18800315 	stw	r2,12(r3)
1000bf54:	10c00215 	stw	r3,8(r2)
1000bf58:	b4800204 	addi	r18,r22,8
1000bf5c:	21bfe52e 	bgeu	r4,r6,1000bef4 <__alt_data_end+0xf800bef4>
1000bf60:	a80b883a 	mov	r5,r21
1000bf64:	9009883a 	mov	r4,r18
1000bf68:	000a92c0 	call	1000a92c <memmove>
1000bf6c:	b821883a 	mov	r16,r23
1000bf70:	b027883a 	mov	r19,r22
1000bf74:	003f8a06 	br	1000bda0 <__alt_data_end+0xf800bda0>
1000bf78:	300b883a 	mov	r5,r6
1000bf7c:	dfc00917 	ldw	ra,36(sp)
1000bf80:	df000817 	ldw	fp,32(sp)
1000bf84:	ddc00717 	ldw	r23,28(sp)
1000bf88:	dd800617 	ldw	r22,24(sp)
1000bf8c:	dd400517 	ldw	r21,20(sp)
1000bf90:	dd000417 	ldw	r20,16(sp)
1000bf94:	dcc00317 	ldw	r19,12(sp)
1000bf98:	dc800217 	ldw	r18,8(sp)
1000bf9c:	dc400117 	ldw	r17,4(sp)
1000bfa0:	dc000017 	ldw	r16,0(sp)
1000bfa4:	dec00a04 	addi	sp,sp,40
1000bfa8:	0009ef41 	jmpi	10009ef4 <_malloc_r>
1000bfac:	a8c00017 	ldw	r3,0(r21)
1000bfb0:	90c00015 	stw	r3,0(r18)
1000bfb4:	a8c00117 	ldw	r3,4(r21)
1000bfb8:	90c00115 	stw	r3,4(r18)
1000bfbc:	00c006c4 	movi	r3,27
1000bfc0:	19804536 	bltu	r3,r6,1000c0d8 <_realloc_r+0x470>
1000bfc4:	90800204 	addi	r2,r18,8
1000bfc8:	a8c00204 	addi	r3,r21,8
1000bfcc:	003f6306 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000bfd0:	9005883a 	mov	r2,r18
1000bfd4:	a8c00017 	ldw	r3,0(r21)
1000bfd8:	b821883a 	mov	r16,r23
1000bfdc:	b027883a 	mov	r19,r22
1000bfe0:	10c00015 	stw	r3,0(r2)
1000bfe4:	a8c00117 	ldw	r3,4(r21)
1000bfe8:	10c00115 	stw	r3,4(r2)
1000bfec:	a8c00217 	ldw	r3,8(r21)
1000bff0:	10c00215 	stw	r3,8(r2)
1000bff4:	003f6a06 	br	1000bda0 <__alt_data_end+0xf800bda0>
1000bff8:	9c67883a 	add	r19,r19,r17
1000bffc:	4445c83a 	sub	r2,r8,r17
1000c000:	e4c00215 	stw	r19,8(fp)
1000c004:	10800054 	ori	r2,r2,1
1000c008:	98800115 	stw	r2,4(r19)
1000c00c:	a8bfff17 	ldw	r2,-4(r21)
1000c010:	a009883a 	mov	r4,r20
1000c014:	1080004c 	andi	r2,r2,1
1000c018:	1462b03a 	or	r17,r2,r17
1000c01c:	ac7fff15 	stw	r17,-4(r21)
1000c020:	00120c80 	call	100120c8 <__malloc_unlock>
1000c024:	a805883a 	mov	r2,r21
1000c028:	003f6b06 	br	1000bdd8 <__alt_data_end+0xf800bdd8>
1000c02c:	a80b883a 	mov	r5,r21
1000c030:	9009883a 	mov	r4,r18
1000c034:	000a92c0 	call	1000a92c <memmove>
1000c038:	003f4e06 	br	1000bd74 <__alt_data_end+0xf800bd74>
1000c03c:	89000404 	addi	r4,r17,16
1000c040:	b93fbc16 	blt	r23,r4,1000bf34 <__alt_data_end+0xf800bf34>
1000c044:	b0800317 	ldw	r2,12(r22)
1000c048:	b0c00217 	ldw	r3,8(r22)
1000c04c:	81bfff04 	addi	r6,r16,-4
1000c050:	01000904 	movi	r4,36
1000c054:	18800315 	stw	r2,12(r3)
1000c058:	10c00215 	stw	r3,8(r2)
1000c05c:	b4800204 	addi	r18,r22,8
1000c060:	21804336 	bltu	r4,r6,1000c170 <_realloc_r+0x508>
1000c064:	008004c4 	movi	r2,19
1000c068:	11803f2e 	bgeu	r2,r6,1000c168 <_realloc_r+0x500>
1000c06c:	a8800017 	ldw	r2,0(r21)
1000c070:	b0800215 	stw	r2,8(r22)
1000c074:	a8800117 	ldw	r2,4(r21)
1000c078:	b0800315 	stw	r2,12(r22)
1000c07c:	008006c4 	movi	r2,27
1000c080:	11803f36 	bltu	r2,r6,1000c180 <_realloc_r+0x518>
1000c084:	b0800404 	addi	r2,r22,16
1000c088:	ad400204 	addi	r21,r21,8
1000c08c:	a8c00017 	ldw	r3,0(r21)
1000c090:	10c00015 	stw	r3,0(r2)
1000c094:	a8c00117 	ldw	r3,4(r21)
1000c098:	10c00115 	stw	r3,4(r2)
1000c09c:	a8c00217 	ldw	r3,8(r21)
1000c0a0:	10c00215 	stw	r3,8(r2)
1000c0a4:	b447883a 	add	r3,r22,r17
1000c0a8:	bc45c83a 	sub	r2,r23,r17
1000c0ac:	e0c00215 	stw	r3,8(fp)
1000c0b0:	10800054 	ori	r2,r2,1
1000c0b4:	18800115 	stw	r2,4(r3)
1000c0b8:	b0800117 	ldw	r2,4(r22)
1000c0bc:	a009883a 	mov	r4,r20
1000c0c0:	1080004c 	andi	r2,r2,1
1000c0c4:	1462b03a 	or	r17,r2,r17
1000c0c8:	b4400115 	stw	r17,4(r22)
1000c0cc:	00120c80 	call	100120c8 <__malloc_unlock>
1000c0d0:	9005883a 	mov	r2,r18
1000c0d4:	003f4006 	br	1000bdd8 <__alt_data_end+0xf800bdd8>
1000c0d8:	a8c00217 	ldw	r3,8(r21)
1000c0dc:	90c00215 	stw	r3,8(r18)
1000c0e0:	a8c00317 	ldw	r3,12(r21)
1000c0e4:	90c00315 	stw	r3,12(r18)
1000c0e8:	30801126 	beq	r6,r2,1000c130 <_realloc_r+0x4c8>
1000c0ec:	90800404 	addi	r2,r18,16
1000c0f0:	a8c00404 	addi	r3,r21,16
1000c0f4:	003f1906 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000c0f8:	90ffff17 	ldw	r3,-4(r18)
1000c0fc:	00bfff04 	movi	r2,-4
1000c100:	a825883a 	mov	r18,r21
1000c104:	1884703a 	and	r2,r3,r2
1000c108:	80a1883a 	add	r16,r16,r2
1000c10c:	003f2406 	br	1000bda0 <__alt_data_end+0xf800bda0>
1000c110:	a8800217 	ldw	r2,8(r21)
1000c114:	b0800415 	stw	r2,16(r22)
1000c118:	a8800317 	ldw	r2,12(r21)
1000c11c:	b0800515 	stw	r2,20(r22)
1000c120:	31000a26 	beq	r6,r4,1000c14c <_realloc_r+0x4e4>
1000c124:	b0800604 	addi	r2,r22,24
1000c128:	ad400404 	addi	r21,r21,16
1000c12c:	003fa906 	br	1000bfd4 <__alt_data_end+0xf800bfd4>
1000c130:	a9000417 	ldw	r4,16(r21)
1000c134:	90800604 	addi	r2,r18,24
1000c138:	a8c00604 	addi	r3,r21,24
1000c13c:	91000415 	stw	r4,16(r18)
1000c140:	a9000517 	ldw	r4,20(r21)
1000c144:	91000515 	stw	r4,20(r18)
1000c148:	003f0406 	br	1000bd5c <__alt_data_end+0xf800bd5c>
1000c14c:	a8c00417 	ldw	r3,16(r21)
1000c150:	ad400604 	addi	r21,r21,24
1000c154:	b0800804 	addi	r2,r22,32
1000c158:	b0c00615 	stw	r3,24(r22)
1000c15c:	a8ffff17 	ldw	r3,-4(r21)
1000c160:	b0c00715 	stw	r3,28(r22)
1000c164:	003f9b06 	br	1000bfd4 <__alt_data_end+0xf800bfd4>
1000c168:	9005883a 	mov	r2,r18
1000c16c:	003fc706 	br	1000c08c <__alt_data_end+0xf800c08c>
1000c170:	a80b883a 	mov	r5,r21
1000c174:	9009883a 	mov	r4,r18
1000c178:	000a92c0 	call	1000a92c <memmove>
1000c17c:	003fc906 	br	1000c0a4 <__alt_data_end+0xf800c0a4>
1000c180:	a8800217 	ldw	r2,8(r21)
1000c184:	b0800415 	stw	r2,16(r22)
1000c188:	a8800317 	ldw	r2,12(r21)
1000c18c:	b0800515 	stw	r2,20(r22)
1000c190:	31000726 	beq	r6,r4,1000c1b0 <_realloc_r+0x548>
1000c194:	b0800604 	addi	r2,r22,24
1000c198:	ad400404 	addi	r21,r21,16
1000c19c:	003fbb06 	br	1000c08c <__alt_data_end+0xf800c08c>
1000c1a0:	a009883a 	mov	r4,r20
1000c1a4:	00120c80 	call	100120c8 <__malloc_unlock>
1000c1a8:	0005883a 	mov	r2,zero
1000c1ac:	003f0a06 	br	1000bdd8 <__alt_data_end+0xf800bdd8>
1000c1b0:	a8c00417 	ldw	r3,16(r21)
1000c1b4:	ad400604 	addi	r21,r21,24
1000c1b8:	b0800804 	addi	r2,r22,32
1000c1bc:	b0c00615 	stw	r3,24(r22)
1000c1c0:	a8ffff17 	ldw	r3,-4(r21)
1000c1c4:	b0c00715 	stw	r3,28(r22)
1000c1c8:	003fb006 	br	1000c08c <__alt_data_end+0xf800c08c>

1000c1cc <__fpclassifyd>:
1000c1cc:	00a00034 	movhi	r2,32768
1000c1d0:	10bfffc4 	addi	r2,r2,-1
1000c1d4:	2884703a 	and	r2,r5,r2
1000c1d8:	10000726 	beq	r2,zero,1000c1f8 <__fpclassifyd+0x2c>
1000c1dc:	00fffc34 	movhi	r3,65520
1000c1e0:	019ff834 	movhi	r6,32736
1000c1e4:	28c7883a 	add	r3,r5,r3
1000c1e8:	31bfffc4 	addi	r6,r6,-1
1000c1ec:	30c00536 	bltu	r6,r3,1000c204 <__fpclassifyd+0x38>
1000c1f0:	00800104 	movi	r2,4
1000c1f4:	f800283a 	ret
1000c1f8:	2000021e 	bne	r4,zero,1000c204 <__fpclassifyd+0x38>
1000c1fc:	00800084 	movi	r2,2
1000c200:	f800283a 	ret
1000c204:	00dffc34 	movhi	r3,32752
1000c208:	019ff834 	movhi	r6,32736
1000c20c:	28cb883a 	add	r5,r5,r3
1000c210:	31bfffc4 	addi	r6,r6,-1
1000c214:	317ff62e 	bgeu	r6,r5,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c218:	01400434 	movhi	r5,16
1000c21c:	297fffc4 	addi	r5,r5,-1
1000c220:	28800236 	bltu	r5,r2,1000c22c <__fpclassifyd+0x60>
1000c224:	008000c4 	movi	r2,3
1000c228:	f800283a 	ret
1000c22c:	10c00226 	beq	r2,r3,1000c238 <__fpclassifyd+0x6c>
1000c230:	0005883a 	mov	r2,zero
1000c234:	f800283a 	ret
1000c238:	2005003a 	cmpeq	r2,r4,zero
1000c23c:	f800283a 	ret

1000c240 <_sbrk_r>:
1000c240:	defffd04 	addi	sp,sp,-12
1000c244:	dc000015 	stw	r16,0(sp)
1000c248:	040400b4 	movhi	r16,4098
1000c24c:	dc400115 	stw	r17,4(sp)
1000c250:	8428ce04 	addi	r16,r16,-23752
1000c254:	2023883a 	mov	r17,r4
1000c258:	2809883a 	mov	r4,r5
1000c25c:	dfc00215 	stw	ra,8(sp)
1000c260:	80000015 	stw	zero,0(r16)
1000c264:	00122b00 	call	100122b0 <sbrk>
1000c268:	00ffffc4 	movi	r3,-1
1000c26c:	10c00526 	beq	r2,r3,1000c284 <_sbrk_r+0x44>
1000c270:	dfc00217 	ldw	ra,8(sp)
1000c274:	dc400117 	ldw	r17,4(sp)
1000c278:	dc000017 	ldw	r16,0(sp)
1000c27c:	dec00304 	addi	sp,sp,12
1000c280:	f800283a 	ret
1000c284:	80c00017 	ldw	r3,0(r16)
1000c288:	183ff926 	beq	r3,zero,1000c270 <__alt_data_end+0xf800c270>
1000c28c:	88c00015 	stw	r3,0(r17)
1000c290:	003ff706 	br	1000c270 <__alt_data_end+0xf800c270>

1000c294 <__sread>:
1000c294:	defffe04 	addi	sp,sp,-8
1000c298:	dc000015 	stw	r16,0(sp)
1000c29c:	2821883a 	mov	r16,r5
1000c2a0:	2940038f 	ldh	r5,14(r5)
1000c2a4:	dfc00115 	stw	ra,4(sp)
1000c2a8:	000e1500 	call	1000e150 <_read_r>
1000c2ac:	10000716 	blt	r2,zero,1000c2cc <__sread+0x38>
1000c2b0:	80c01417 	ldw	r3,80(r16)
1000c2b4:	1887883a 	add	r3,r3,r2
1000c2b8:	80c01415 	stw	r3,80(r16)
1000c2bc:	dfc00117 	ldw	ra,4(sp)
1000c2c0:	dc000017 	ldw	r16,0(sp)
1000c2c4:	dec00204 	addi	sp,sp,8
1000c2c8:	f800283a 	ret
1000c2cc:	80c0030b 	ldhu	r3,12(r16)
1000c2d0:	18fbffcc 	andi	r3,r3,61439
1000c2d4:	80c0030d 	sth	r3,12(r16)
1000c2d8:	dfc00117 	ldw	ra,4(sp)
1000c2dc:	dc000017 	ldw	r16,0(sp)
1000c2e0:	dec00204 	addi	sp,sp,8
1000c2e4:	f800283a 	ret

1000c2e8 <__seofread>:
1000c2e8:	0005883a 	mov	r2,zero
1000c2ec:	f800283a 	ret

1000c2f0 <__swrite>:
1000c2f0:	2880030b 	ldhu	r2,12(r5)
1000c2f4:	defffb04 	addi	sp,sp,-20
1000c2f8:	dcc00315 	stw	r19,12(sp)
1000c2fc:	dc800215 	stw	r18,8(sp)
1000c300:	dc400115 	stw	r17,4(sp)
1000c304:	dc000015 	stw	r16,0(sp)
1000c308:	dfc00415 	stw	ra,16(sp)
1000c30c:	10c0400c 	andi	r3,r2,256
1000c310:	2821883a 	mov	r16,r5
1000c314:	2023883a 	mov	r17,r4
1000c318:	3025883a 	mov	r18,r6
1000c31c:	3827883a 	mov	r19,r7
1000c320:	18000526 	beq	r3,zero,1000c338 <__swrite+0x48>
1000c324:	2940038f 	ldh	r5,14(r5)
1000c328:	01c00084 	movi	r7,2
1000c32c:	000d883a 	mov	r6,zero
1000c330:	000e0f00 	call	1000e0f0 <_lseek_r>
1000c334:	8080030b 	ldhu	r2,12(r16)
1000c338:	8140038f 	ldh	r5,14(r16)
1000c33c:	10bbffcc 	andi	r2,r2,61439
1000c340:	980f883a 	mov	r7,r19
1000c344:	900d883a 	mov	r6,r18
1000c348:	8809883a 	mov	r4,r17
1000c34c:	8080030d 	sth	r2,12(r16)
1000c350:	dfc00417 	ldw	ra,16(sp)
1000c354:	dcc00317 	ldw	r19,12(sp)
1000c358:	dc800217 	ldw	r18,8(sp)
1000c35c:	dc400117 	ldw	r17,4(sp)
1000c360:	dc000017 	ldw	r16,0(sp)
1000c364:	dec00504 	addi	sp,sp,20
1000c368:	000dba41 	jmpi	1000dba4 <_write_r>

1000c36c <__sseek>:
1000c36c:	defffe04 	addi	sp,sp,-8
1000c370:	dc000015 	stw	r16,0(sp)
1000c374:	2821883a 	mov	r16,r5
1000c378:	2940038f 	ldh	r5,14(r5)
1000c37c:	dfc00115 	stw	ra,4(sp)
1000c380:	000e0f00 	call	1000e0f0 <_lseek_r>
1000c384:	00ffffc4 	movi	r3,-1
1000c388:	10c00826 	beq	r2,r3,1000c3ac <__sseek+0x40>
1000c38c:	80c0030b 	ldhu	r3,12(r16)
1000c390:	80801415 	stw	r2,80(r16)
1000c394:	18c40014 	ori	r3,r3,4096
1000c398:	80c0030d 	sth	r3,12(r16)
1000c39c:	dfc00117 	ldw	ra,4(sp)
1000c3a0:	dc000017 	ldw	r16,0(sp)
1000c3a4:	dec00204 	addi	sp,sp,8
1000c3a8:	f800283a 	ret
1000c3ac:	80c0030b 	ldhu	r3,12(r16)
1000c3b0:	18fbffcc 	andi	r3,r3,61439
1000c3b4:	80c0030d 	sth	r3,12(r16)
1000c3b8:	dfc00117 	ldw	ra,4(sp)
1000c3bc:	dc000017 	ldw	r16,0(sp)
1000c3c0:	dec00204 	addi	sp,sp,8
1000c3c4:	f800283a 	ret

1000c3c8 <__sclose>:
1000c3c8:	2940038f 	ldh	r5,14(r5)
1000c3cc:	000dc041 	jmpi	1000dc04 <_close_r>

1000c3d0 <strcmp>:
1000c3d0:	2144b03a 	or	r2,r4,r5
1000c3d4:	108000cc 	andi	r2,r2,3
1000c3d8:	1000171e 	bne	r2,zero,1000c438 <strcmp+0x68>
1000c3dc:	20800017 	ldw	r2,0(r4)
1000c3e0:	28c00017 	ldw	r3,0(r5)
1000c3e4:	10c0141e 	bne	r2,r3,1000c438 <strcmp+0x68>
1000c3e8:	027fbff4 	movhi	r9,65279
1000c3ec:	4a7fbfc4 	addi	r9,r9,-257
1000c3f0:	0086303a 	nor	r3,zero,r2
1000c3f4:	02202074 	movhi	r8,32897
1000c3f8:	1245883a 	add	r2,r2,r9
1000c3fc:	42202004 	addi	r8,r8,-32640
1000c400:	10c4703a 	and	r2,r2,r3
1000c404:	1204703a 	and	r2,r2,r8
1000c408:	10000226 	beq	r2,zero,1000c414 <strcmp+0x44>
1000c40c:	00002306 	br	1000c49c <strcmp+0xcc>
1000c410:	1000221e 	bne	r2,zero,1000c49c <strcmp+0xcc>
1000c414:	21000104 	addi	r4,r4,4
1000c418:	20c00017 	ldw	r3,0(r4)
1000c41c:	29400104 	addi	r5,r5,4
1000c420:	29800017 	ldw	r6,0(r5)
1000c424:	1a4f883a 	add	r7,r3,r9
1000c428:	00c4303a 	nor	r2,zero,r3
1000c42c:	3884703a 	and	r2,r7,r2
1000c430:	1204703a 	and	r2,r2,r8
1000c434:	19bff626 	beq	r3,r6,1000c410 <__alt_data_end+0xf800c410>
1000c438:	20800003 	ldbu	r2,0(r4)
1000c43c:	10c03fcc 	andi	r3,r2,255
1000c440:	18c0201c 	xori	r3,r3,128
1000c444:	18ffe004 	addi	r3,r3,-128
1000c448:	18000c26 	beq	r3,zero,1000c47c <strcmp+0xac>
1000c44c:	29800007 	ldb	r6,0(r5)
1000c450:	19800326 	beq	r3,r6,1000c460 <strcmp+0x90>
1000c454:	00001306 	br	1000c4a4 <strcmp+0xd4>
1000c458:	29800007 	ldb	r6,0(r5)
1000c45c:	11800b1e 	bne	r2,r6,1000c48c <strcmp+0xbc>
1000c460:	21000044 	addi	r4,r4,1
1000c464:	20c00003 	ldbu	r3,0(r4)
1000c468:	29400044 	addi	r5,r5,1
1000c46c:	18803fcc 	andi	r2,r3,255
1000c470:	1080201c 	xori	r2,r2,128
1000c474:	10bfe004 	addi	r2,r2,-128
1000c478:	103ff71e 	bne	r2,zero,1000c458 <__alt_data_end+0xf800c458>
1000c47c:	0007883a 	mov	r3,zero
1000c480:	28800003 	ldbu	r2,0(r5)
1000c484:	1885c83a 	sub	r2,r3,r2
1000c488:	f800283a 	ret
1000c48c:	28800003 	ldbu	r2,0(r5)
1000c490:	18c03fcc 	andi	r3,r3,255
1000c494:	1885c83a 	sub	r2,r3,r2
1000c498:	f800283a 	ret
1000c49c:	0005883a 	mov	r2,zero
1000c4a0:	f800283a 	ret
1000c4a4:	10c03fcc 	andi	r3,r2,255
1000c4a8:	003ff506 	br	1000c480 <__alt_data_end+0xf800c480>

1000c4ac <__sprint_r.part.0>:
1000c4ac:	28801917 	ldw	r2,100(r5)
1000c4b0:	defff604 	addi	sp,sp,-40
1000c4b4:	dd400515 	stw	r21,20(sp)
1000c4b8:	dfc00915 	stw	ra,36(sp)
1000c4bc:	df000815 	stw	fp,32(sp)
1000c4c0:	ddc00715 	stw	r23,28(sp)
1000c4c4:	dd800615 	stw	r22,24(sp)
1000c4c8:	dd000415 	stw	r20,16(sp)
1000c4cc:	dcc00315 	stw	r19,12(sp)
1000c4d0:	dc800215 	stw	r18,8(sp)
1000c4d4:	dc400115 	stw	r17,4(sp)
1000c4d8:	dc000015 	stw	r16,0(sp)
1000c4dc:	1088000c 	andi	r2,r2,8192
1000c4e0:	302b883a 	mov	r21,r6
1000c4e4:	10002e26 	beq	r2,zero,1000c5a0 <__sprint_r.part.0+0xf4>
1000c4e8:	30800217 	ldw	r2,8(r6)
1000c4ec:	35800017 	ldw	r22,0(r6)
1000c4f0:	10002926 	beq	r2,zero,1000c598 <__sprint_r.part.0+0xec>
1000c4f4:	2827883a 	mov	r19,r5
1000c4f8:	2029883a 	mov	r20,r4
1000c4fc:	b5c00104 	addi	r23,r22,4
1000c500:	04bfffc4 	movi	r18,-1
1000c504:	bc400017 	ldw	r17,0(r23)
1000c508:	b4000017 	ldw	r16,0(r22)
1000c50c:	0039883a 	mov	fp,zero
1000c510:	8822d0ba 	srli	r17,r17,2
1000c514:	8800031e 	bne	r17,zero,1000c524 <__sprint_r.part.0+0x78>
1000c518:	00001806 	br	1000c57c <__sprint_r.part.0+0xd0>
1000c51c:	84000104 	addi	r16,r16,4
1000c520:	8f001526 	beq	r17,fp,1000c578 <__sprint_r.part.0+0xcc>
1000c524:	81400017 	ldw	r5,0(r16)
1000c528:	980d883a 	mov	r6,r19
1000c52c:	a009883a 	mov	r4,r20
1000c530:	000df9c0 	call	1000df9c <_fputwc_r>
1000c534:	e7000044 	addi	fp,fp,1
1000c538:	14bff81e 	bne	r2,r18,1000c51c <__alt_data_end+0xf800c51c>
1000c53c:	9005883a 	mov	r2,r18
1000c540:	a8000215 	stw	zero,8(r21)
1000c544:	a8000115 	stw	zero,4(r21)
1000c548:	dfc00917 	ldw	ra,36(sp)
1000c54c:	df000817 	ldw	fp,32(sp)
1000c550:	ddc00717 	ldw	r23,28(sp)
1000c554:	dd800617 	ldw	r22,24(sp)
1000c558:	dd400517 	ldw	r21,20(sp)
1000c55c:	dd000417 	ldw	r20,16(sp)
1000c560:	dcc00317 	ldw	r19,12(sp)
1000c564:	dc800217 	ldw	r18,8(sp)
1000c568:	dc400117 	ldw	r17,4(sp)
1000c56c:	dc000017 	ldw	r16,0(sp)
1000c570:	dec00a04 	addi	sp,sp,40
1000c574:	f800283a 	ret
1000c578:	a8800217 	ldw	r2,8(r21)
1000c57c:	8c63883a 	add	r17,r17,r17
1000c580:	8c63883a 	add	r17,r17,r17
1000c584:	1445c83a 	sub	r2,r2,r17
1000c588:	a8800215 	stw	r2,8(r21)
1000c58c:	b5800204 	addi	r22,r22,8
1000c590:	bdc00204 	addi	r23,r23,8
1000c594:	103fdb1e 	bne	r2,zero,1000c504 <__alt_data_end+0xf800c504>
1000c598:	0005883a 	mov	r2,zero
1000c59c:	003fe806 	br	1000c540 <__alt_data_end+0xf800c540>
1000c5a0:	000960c0 	call	1000960c <__sfvwrite_r>
1000c5a4:	003fe606 	br	1000c540 <__alt_data_end+0xf800c540>

1000c5a8 <__sprint_r>:
1000c5a8:	30c00217 	ldw	r3,8(r6)
1000c5ac:	18000126 	beq	r3,zero,1000c5b4 <__sprint_r+0xc>
1000c5b0:	000c4ac1 	jmpi	1000c4ac <__sprint_r.part.0>
1000c5b4:	30000115 	stw	zero,4(r6)
1000c5b8:	0005883a 	mov	r2,zero
1000c5bc:	f800283a 	ret

1000c5c0 <___vfiprintf_internal_r>:
1000c5c0:	deffca04 	addi	sp,sp,-216
1000c5c4:	dd403115 	stw	r21,196(sp)
1000c5c8:	dfc03515 	stw	ra,212(sp)
1000c5cc:	df003415 	stw	fp,208(sp)
1000c5d0:	ddc03315 	stw	r23,204(sp)
1000c5d4:	dd803215 	stw	r22,200(sp)
1000c5d8:	dd003015 	stw	r20,192(sp)
1000c5dc:	dcc02f15 	stw	r19,188(sp)
1000c5e0:	dc802e15 	stw	r18,184(sp)
1000c5e4:	dc402d15 	stw	r17,180(sp)
1000c5e8:	dc002c15 	stw	r16,176(sp)
1000c5ec:	d9002115 	stw	r4,132(sp)
1000c5f0:	d9402015 	stw	r5,128(sp)
1000c5f4:	d9c02215 	stw	r7,136(sp)
1000c5f8:	302b883a 	mov	r21,r6
1000c5fc:	20000226 	beq	r4,zero,1000c608 <___vfiprintf_internal_r+0x48>
1000c600:	20800e17 	ldw	r2,56(r4)
1000c604:	1000cf26 	beq	r2,zero,1000c944 <___vfiprintf_internal_r+0x384>
1000c608:	d8c02017 	ldw	r3,128(sp)
1000c60c:	1880030b 	ldhu	r2,12(r3)
1000c610:	10c8000c 	andi	r3,r2,8192
1000c614:	1800071e 	bne	r3,zero,1000c634 <___vfiprintf_internal_r+0x74>
1000c618:	d9402017 	ldw	r5,128(sp)
1000c61c:	00f7ffc4 	movi	r3,-8193
1000c620:	10880014 	ori	r2,r2,8192
1000c624:	29001917 	ldw	r4,100(r5)
1000c628:	2880030d 	sth	r2,12(r5)
1000c62c:	20c6703a 	and	r3,r4,r3
1000c630:	28c01915 	stw	r3,100(r5)
1000c634:	10c0020c 	andi	r3,r2,8
1000c638:	1800a526 	beq	r3,zero,1000c8d0 <___vfiprintf_internal_r+0x310>
1000c63c:	d9002017 	ldw	r4,128(sp)
1000c640:	20c00417 	ldw	r3,16(r4)
1000c644:	1800a226 	beq	r3,zero,1000c8d0 <___vfiprintf_internal_r+0x310>
1000c648:	1080068c 	andi	r2,r2,26
1000c64c:	00c00284 	movi	r3,10
1000c650:	10c0a826 	beq	r2,r3,1000c8f4 <___vfiprintf_internal_r+0x334>
1000c654:	d9001a04 	addi	r4,sp,104
1000c658:	d94019c4 	addi	r5,sp,103
1000c65c:	04840074 	movhi	r18,4097
1000c660:	2145c83a 	sub	r2,r4,r5
1000c664:	94938e04 	addi	r18,r18,20024
1000c668:	d9001e15 	stw	r4,120(sp)
1000c66c:	d9401f15 	stw	r5,124(sp)
1000c670:	dec01a15 	stw	sp,104(sp)
1000c674:	d8001c15 	stw	zero,112(sp)
1000c678:	d8001b15 	stw	zero,108(sp)
1000c67c:	d811883a 	mov	r8,sp
1000c680:	d8002615 	stw	zero,152(sp)
1000c684:	d8002415 	stw	zero,144(sp)
1000c688:	d8802815 	stw	r2,160(sp)
1000c68c:	a82d883a 	mov	r22,r21
1000c690:	b0800007 	ldb	r2,0(r22)
1000c694:	10040d26 	beq	r2,zero,1000d6cc <___vfiprintf_internal_r+0x110c>
1000c698:	00c00944 	movi	r3,37
1000c69c:	b029883a 	mov	r20,r22
1000c6a0:	10c0021e 	bne	r2,r3,1000c6ac <___vfiprintf_internal_r+0xec>
1000c6a4:	00001606 	br	1000c700 <___vfiprintf_internal_r+0x140>
1000c6a8:	10c00326 	beq	r2,r3,1000c6b8 <___vfiprintf_internal_r+0xf8>
1000c6ac:	a5000044 	addi	r20,r20,1
1000c6b0:	a0800007 	ldb	r2,0(r20)
1000c6b4:	103ffc1e 	bne	r2,zero,1000c6a8 <__alt_data_end+0xf800c6a8>
1000c6b8:	a5a1c83a 	sub	r16,r20,r22
1000c6bc:	80001026 	beq	r16,zero,1000c700 <___vfiprintf_internal_r+0x140>
1000c6c0:	d8c01c17 	ldw	r3,112(sp)
1000c6c4:	d8801b17 	ldw	r2,108(sp)
1000c6c8:	45800015 	stw	r22,0(r8)
1000c6cc:	80c7883a 	add	r3,r16,r3
1000c6d0:	10800044 	addi	r2,r2,1
1000c6d4:	44000115 	stw	r16,4(r8)
1000c6d8:	d8c01c15 	stw	r3,112(sp)
1000c6dc:	d8801b15 	stw	r2,108(sp)
1000c6e0:	010001c4 	movi	r4,7
1000c6e4:	2080750e 	bge	r4,r2,1000c8bc <___vfiprintf_internal_r+0x2fc>
1000c6e8:	1803951e 	bne	r3,zero,1000d540 <___vfiprintf_internal_r+0xf80>
1000c6ec:	d8c02417 	ldw	r3,144(sp)
1000c6f0:	d8001b15 	stw	zero,108(sp)
1000c6f4:	d811883a 	mov	r8,sp
1000c6f8:	1c07883a 	add	r3,r3,r16
1000c6fc:	d8c02415 	stw	r3,144(sp)
1000c700:	a0800007 	ldb	r2,0(r20)
1000c704:	1002e026 	beq	r2,zero,1000d288 <___vfiprintf_internal_r+0xcc8>
1000c708:	a5800044 	addi	r22,r20,1
1000c70c:	a0c00047 	ldb	r3,1(r20)
1000c710:	d8001d85 	stb	zero,118(sp)
1000c714:	0027883a 	mov	r19,zero
1000c718:	d8002305 	stb	zero,140(sp)
1000c71c:	043fffc4 	movi	r16,-1
1000c720:	d8002515 	stw	zero,148(sp)
1000c724:	0023883a 	mov	r17,zero
1000c728:	05001604 	movi	r20,88
1000c72c:	05400244 	movi	r21,9
1000c730:	402f883a 	mov	r23,r8
1000c734:	b5800044 	addi	r22,r22,1
1000c738:	18bff804 	addi	r2,r3,-32
1000c73c:	a0827736 	bltu	r20,r2,1000d11c <___vfiprintf_internal_r+0xb5c>
1000c740:	100490ba 	slli	r2,r2,2
1000c744:	01040074 	movhi	r4,4097
1000c748:	2131d604 	addi	r4,r4,-14504
1000c74c:	1105883a 	add	r2,r2,r4
1000c750:	10800017 	ldw	r2,0(r2)
1000c754:	1000683a 	jmp	r2
1000c758:	1000ce1c 	xori	zero,r2,824
1000c75c:	1000d11c 	xori	zero,r2,836
1000c760:	1000d11c 	xori	zero,r2,836
1000c764:	1000ce38 	rdprs	zero,r2,824
1000c768:	1000d11c 	xori	zero,r2,836
1000c76c:	1000d11c 	xori	zero,r2,836
1000c770:	1000d11c 	xori	zero,r2,836
1000c774:	1000d11c 	xori	zero,r2,836
1000c778:	1000d11c 	xori	zero,r2,836
1000c77c:	1000d11c 	xori	zero,r2,836
1000c780:	1000d040 	call	11000d04 <_gp+0xfe140c>
1000c784:	1000d064 	muli	zero,r2,833
1000c788:	1000d11c 	xori	zero,r2,836
1000c78c:	1000c95c 	xori	zero,r2,805
1000c790:	1000d078 	rdprs	zero,r2,833
1000c794:	1000d11c 	xori	zero,r2,836
1000c798:	1000ce44 	addi	zero,r2,825
1000c79c:	1000ce50 	cmplti	zero,r2,825
1000c7a0:	1000ce50 	cmplti	zero,r2,825
1000c7a4:	1000ce50 	cmplti	zero,r2,825
1000c7a8:	1000ce50 	cmplti	zero,r2,825
1000c7ac:	1000ce50 	cmplti	zero,r2,825
1000c7b0:	1000ce50 	cmplti	zero,r2,825
1000c7b4:	1000ce50 	cmplti	zero,r2,825
1000c7b8:	1000ce50 	cmplti	zero,r2,825
1000c7bc:	1000ce50 	cmplti	zero,r2,825
1000c7c0:	1000d11c 	xori	zero,r2,836
1000c7c4:	1000d11c 	xori	zero,r2,836
1000c7c8:	1000d11c 	xori	zero,r2,836
1000c7cc:	1000d11c 	xori	zero,r2,836
1000c7d0:	1000d11c 	xori	zero,r2,836
1000c7d4:	1000d11c 	xori	zero,r2,836
1000c7d8:	1000d11c 	xori	zero,r2,836
1000c7dc:	1000d11c 	xori	zero,r2,836
1000c7e0:	1000d11c 	xori	zero,r2,836
1000c7e4:	1000d11c 	xori	zero,r2,836
1000c7e8:	1000ce90 	cmplti	zero,r2,826
1000c7ec:	1000d11c 	xori	zero,r2,836
1000c7f0:	1000d11c 	xori	zero,r2,836
1000c7f4:	1000d11c 	xori	zero,r2,836
1000c7f8:	1000d11c 	xori	zero,r2,836
1000c7fc:	1000d11c 	xori	zero,r2,836
1000c800:	1000d11c 	xori	zero,r2,836
1000c804:	1000d11c 	xori	zero,r2,836
1000c808:	1000d11c 	xori	zero,r2,836
1000c80c:	1000d11c 	xori	zero,r2,836
1000c810:	1000d11c 	xori	zero,r2,836
1000c814:	1000cecc 	andi	zero,r2,827
1000c818:	1000d11c 	xori	zero,r2,836
1000c81c:	1000d11c 	xori	zero,r2,836
1000c820:	1000d11c 	xori	zero,r2,836
1000c824:	1000d11c 	xori	zero,r2,836
1000c828:	1000d11c 	xori	zero,r2,836
1000c82c:	1000cf28 	cmpgeui	zero,r2,828
1000c830:	1000d11c 	xori	zero,r2,836
1000c834:	1000d11c 	xori	zero,r2,836
1000c838:	1000cf9c 	xori	zero,r2,830
1000c83c:	1000d11c 	xori	zero,r2,836
1000c840:	1000d11c 	xori	zero,r2,836
1000c844:	1000d11c 	xori	zero,r2,836
1000c848:	1000d11c 	xori	zero,r2,836
1000c84c:	1000d11c 	xori	zero,r2,836
1000c850:	1000d11c 	xori	zero,r2,836
1000c854:	1000d11c 	xori	zero,r2,836
1000c858:	1000d11c 	xori	zero,r2,836
1000c85c:	1000d11c 	xori	zero,r2,836
1000c860:	1000d11c 	xori	zero,r2,836
1000c864:	1000cd44 	addi	zero,r2,821
1000c868:	1000cd74 	orhi	zero,r2,821
1000c86c:	1000d11c 	xori	zero,r2,836
1000c870:	1000d11c 	xori	zero,r2,836
1000c874:	1000d11c 	xori	zero,r2,836
1000c878:	1000d0c4 	addi	zero,r2,835
1000c87c:	1000cd74 	orhi	zero,r2,821
1000c880:	1000d11c 	xori	zero,r2,836
1000c884:	1000d11c 	xori	zero,r2,836
1000c888:	1000cc1c 	xori	zero,r2,816
1000c88c:	1000d11c 	xori	zero,r2,836
1000c890:	1000cc30 	cmpltui	zero,r2,816
1000c894:	1000cc68 	cmpgeui	zero,r2,817
1000c898:	1000c968 	cmpgeui	zero,r2,805
1000c89c:	1000cc10 	cmplti	zero,r2,816
1000c8a0:	1000d11c 	xori	zero,r2,836
1000c8a4:	1000cfdc 	xori	zero,r2,831
1000c8a8:	1000d11c 	xori	zero,r2,836
1000c8ac:	1000d028 	cmpgeui	zero,r2,832
1000c8b0:	1000d11c 	xori	zero,r2,836
1000c8b4:	1000d11c 	xori	zero,r2,836
1000c8b8:	1000ccec 	andhi	zero,r2,819
1000c8bc:	42000204 	addi	r8,r8,8
1000c8c0:	d8c02417 	ldw	r3,144(sp)
1000c8c4:	1c07883a 	add	r3,r3,r16
1000c8c8:	d8c02415 	stw	r3,144(sp)
1000c8cc:	003f8c06 	br	1000c700 <__alt_data_end+0xf800c700>
1000c8d0:	d9402017 	ldw	r5,128(sp)
1000c8d4:	d9002117 	ldw	r4,132(sp)
1000c8d8:	000717c0 	call	1000717c <__swsetup_r>
1000c8dc:	1003c11e 	bne	r2,zero,1000d7e4 <___vfiprintf_internal_r+0x1224>
1000c8e0:	d9402017 	ldw	r5,128(sp)
1000c8e4:	00c00284 	movi	r3,10
1000c8e8:	2880030b 	ldhu	r2,12(r5)
1000c8ec:	1080068c 	andi	r2,r2,26
1000c8f0:	10ff581e 	bne	r2,r3,1000c654 <__alt_data_end+0xf800c654>
1000c8f4:	d8c02017 	ldw	r3,128(sp)
1000c8f8:	1880038f 	ldh	r2,14(r3)
1000c8fc:	103f5516 	blt	r2,zero,1000c654 <__alt_data_end+0xf800c654>
1000c900:	d9c02217 	ldw	r7,136(sp)
1000c904:	d9002117 	ldw	r4,132(sp)
1000c908:	a80d883a 	mov	r6,r21
1000c90c:	180b883a 	mov	r5,r3
1000c910:	000dae80 	call	1000dae8 <__sbprintf>
1000c914:	dfc03517 	ldw	ra,212(sp)
1000c918:	df003417 	ldw	fp,208(sp)
1000c91c:	ddc03317 	ldw	r23,204(sp)
1000c920:	dd803217 	ldw	r22,200(sp)
1000c924:	dd403117 	ldw	r21,196(sp)
1000c928:	dd003017 	ldw	r20,192(sp)
1000c92c:	dcc02f17 	ldw	r19,188(sp)
1000c930:	dc802e17 	ldw	r18,184(sp)
1000c934:	dc402d17 	ldw	r17,180(sp)
1000c938:	dc002c17 	ldw	r16,176(sp)
1000c93c:	dec03604 	addi	sp,sp,216
1000c940:	f800283a 	ret
1000c944:	00091880 	call	10009188 <__sinit>
1000c948:	003f2f06 	br	1000c608 <__alt_data_end+0xf800c608>
1000c94c:	d8c02517 	ldw	r3,148(sp)
1000c950:	d8802215 	stw	r2,136(sp)
1000c954:	00c7c83a 	sub	r3,zero,r3
1000c958:	d8c02515 	stw	r3,148(sp)
1000c95c:	8c400114 	ori	r17,r17,4
1000c960:	b0c00007 	ldb	r3,0(r22)
1000c964:	003f7306 	br	1000c734 <__alt_data_end+0xf800c734>
1000c968:	00800c04 	movi	r2,48
1000c96c:	d9402217 	ldw	r5,136(sp)
1000c970:	d8801d05 	stb	r2,116(sp)
1000c974:	00801e04 	movi	r2,120
1000c978:	d8801d45 	stb	r2,117(sp)
1000c97c:	d8001d85 	stb	zero,118(sp)
1000c980:	b811883a 	mov	r8,r23
1000c984:	28c00104 	addi	r3,r5,4
1000c988:	2cc00017 	ldw	r19,0(r5)
1000c98c:	0029883a 	mov	r20,zero
1000c990:	88800094 	ori	r2,r17,2
1000c994:	80032516 	blt	r16,zero,1000d62c <___vfiprintf_internal_r+0x106c>
1000c998:	00bfdfc4 	movi	r2,-129
1000c99c:	88a2703a 	and	r17,r17,r2
1000c9a0:	d8c02215 	stw	r3,136(sp)
1000c9a4:	8c400094 	ori	r17,r17,2
1000c9a8:	98032a1e 	bne	r19,zero,1000d654 <___vfiprintf_internal_r+0x1094>
1000c9ac:	00840074 	movhi	r2,4097
1000c9b0:	10932d04 	addi	r2,r2,19636
1000c9b4:	d8802615 	stw	r2,152(sp)
1000c9b8:	002b883a 	mov	r21,zero
1000c9bc:	8001741e 	bne	r16,zero,1000cf90 <___vfiprintf_internal_r+0x9d0>
1000c9c0:	0021883a 	mov	r16,zero
1000c9c4:	0029883a 	mov	r20,zero
1000c9c8:	ddc01a04 	addi	r23,sp,104
1000c9cc:	8027883a 	mov	r19,r16
1000c9d0:	8500010e 	bge	r16,r20,1000c9d8 <___vfiprintf_internal_r+0x418>
1000c9d4:	a027883a 	mov	r19,r20
1000c9d8:	ad403fcc 	andi	r21,r21,255
1000c9dc:	ad40201c 	xori	r21,r21,128
1000c9e0:	ad7fe004 	addi	r21,r21,-128
1000c9e4:	a8000126 	beq	r21,zero,1000c9ec <___vfiprintf_internal_r+0x42c>
1000c9e8:	9cc00044 	addi	r19,r19,1
1000c9ec:	89c0008c 	andi	r7,r17,2
1000c9f0:	38000126 	beq	r7,zero,1000c9f8 <___vfiprintf_internal_r+0x438>
1000c9f4:	9cc00084 	addi	r19,r19,2
1000c9f8:	88c0210c 	andi	r3,r17,132
1000c9fc:	1801dd1e 	bne	r3,zero,1000d174 <___vfiprintf_internal_r+0xbb4>
1000ca00:	d9402517 	ldw	r5,148(sp)
1000ca04:	2cebc83a 	sub	r21,r5,r19
1000ca08:	0541da0e 	bge	zero,r21,1000d174 <___vfiprintf_internal_r+0xbb4>
1000ca0c:	07000404 	movi	fp,16
1000ca10:	d8801c17 	ldw	r2,112(sp)
1000ca14:	e543be0e 	bge	fp,r21,1000d910 <___vfiprintf_internal_r+0x1350>
1000ca18:	01440074 	movhi	r5,4097
1000ca1c:	29539204 	addi	r5,r5,20040
1000ca20:	dc002715 	stw	r16,156(sp)
1000ca24:	d9801b17 	ldw	r6,108(sp)
1000ca28:	a821883a 	mov	r16,r21
1000ca2c:	d9402315 	stw	r5,140(sp)
1000ca30:	028001c4 	movi	r10,7
1000ca34:	d9c02915 	stw	r7,164(sp)
1000ca38:	182b883a 	mov	r21,r3
1000ca3c:	00000506 	br	1000ca54 <___vfiprintf_internal_r+0x494>
1000ca40:	31000084 	addi	r4,r6,2
1000ca44:	42000204 	addi	r8,r8,8
1000ca48:	180d883a 	mov	r6,r3
1000ca4c:	843ffc04 	addi	r16,r16,-16
1000ca50:	e4000f0e 	bge	fp,r16,1000ca90 <___vfiprintf_internal_r+0x4d0>
1000ca54:	01040074 	movhi	r4,4097
1000ca58:	10800404 	addi	r2,r2,16
1000ca5c:	30c00044 	addi	r3,r6,1
1000ca60:	21139204 	addi	r4,r4,20040
1000ca64:	41000015 	stw	r4,0(r8)
1000ca68:	47000115 	stw	fp,4(r8)
1000ca6c:	d8801c15 	stw	r2,112(sp)
1000ca70:	d8c01b15 	stw	r3,108(sp)
1000ca74:	50fff20e 	bge	r10,r3,1000ca40 <__alt_data_end+0xf800ca40>
1000ca78:	1001b21e 	bne	r2,zero,1000d144 <___vfiprintf_internal_r+0xb84>
1000ca7c:	843ffc04 	addi	r16,r16,-16
1000ca80:	000d883a 	mov	r6,zero
1000ca84:	01000044 	movi	r4,1
1000ca88:	d811883a 	mov	r8,sp
1000ca8c:	e43ff116 	blt	fp,r16,1000ca54 <__alt_data_end+0xf800ca54>
1000ca90:	a807883a 	mov	r3,r21
1000ca94:	d9c02917 	ldw	r7,164(sp)
1000ca98:	802b883a 	mov	r21,r16
1000ca9c:	dc002717 	ldw	r16,156(sp)
1000caa0:	d9402317 	ldw	r5,140(sp)
1000caa4:	a885883a 	add	r2,r21,r2
1000caa8:	45400115 	stw	r21,4(r8)
1000caac:	41400015 	stw	r5,0(r8)
1000cab0:	d8801c15 	stw	r2,112(sp)
1000cab4:	d9001b15 	stw	r4,108(sp)
1000cab8:	014001c4 	movi	r5,7
1000cabc:	29026216 	blt	r5,r4,1000d448 <___vfiprintf_internal_r+0xe88>
1000cac0:	d9801d87 	ldb	r6,118(sp)
1000cac4:	42000204 	addi	r8,r8,8
1000cac8:	21400044 	addi	r5,r4,1
1000cacc:	3001ae1e 	bne	r6,zero,1000d188 <___vfiprintf_internal_r+0xbc8>
1000cad0:	3801bb26 	beq	r7,zero,1000d1c0 <___vfiprintf_internal_r+0xc00>
1000cad4:	d9001d04 	addi	r4,sp,116
1000cad8:	10800084 	addi	r2,r2,2
1000cadc:	41000015 	stw	r4,0(r8)
1000cae0:	01000084 	movi	r4,2
1000cae4:	41000115 	stw	r4,4(r8)
1000cae8:	d8801c15 	stw	r2,112(sp)
1000caec:	d9401b15 	stw	r5,108(sp)
1000caf0:	010001c4 	movi	r4,7
1000caf4:	2142680e 	bge	r4,r5,1000d498 <___vfiprintf_internal_r+0xed8>
1000caf8:	1002b11e 	bne	r2,zero,1000d5c0 <___vfiprintf_internal_r+0x1000>
1000cafc:	01802004 	movi	r6,128
1000cb00:	01400044 	movi	r5,1
1000cb04:	0009883a 	mov	r4,zero
1000cb08:	d811883a 	mov	r8,sp
1000cb0c:	1981ae1e 	bne	r3,r6,1000d1c8 <___vfiprintf_internal_r+0xc08>
1000cb10:	d8c02517 	ldw	r3,148(sp)
1000cb14:	1cf9c83a 	sub	fp,r3,r19
1000cb18:	0701ab0e 	bge	zero,fp,1000d1c8 <___vfiprintf_internal_r+0xc08>
1000cb1c:	05400404 	movi	r21,16
1000cb20:	af03a90e 	bge	r21,fp,1000d9c8 <___vfiprintf_internal_r+0x1408>
1000cb24:	01440074 	movhi	r5,4097
1000cb28:	29538e04 	addi	r5,r5,20024
1000cb2c:	d9402315 	stw	r5,140(sp)
1000cb30:	01c001c4 	movi	r7,7
1000cb34:	00000506 	br	1000cb4c <___vfiprintf_internal_r+0x58c>
1000cb38:	21800084 	addi	r6,r4,2
1000cb3c:	42000204 	addi	r8,r8,8
1000cb40:	1809883a 	mov	r4,r3
1000cb44:	e73ffc04 	addi	fp,fp,-16
1000cb48:	af000d0e 	bge	r21,fp,1000cb80 <___vfiprintf_internal_r+0x5c0>
1000cb4c:	10800404 	addi	r2,r2,16
1000cb50:	20c00044 	addi	r3,r4,1
1000cb54:	44800015 	stw	r18,0(r8)
1000cb58:	45400115 	stw	r21,4(r8)
1000cb5c:	d8801c15 	stw	r2,112(sp)
1000cb60:	d8c01b15 	stw	r3,108(sp)
1000cb64:	38fff40e 	bge	r7,r3,1000cb38 <__alt_data_end+0xf800cb38>
1000cb68:	10022b1e 	bne	r2,zero,1000d418 <___vfiprintf_internal_r+0xe58>
1000cb6c:	e73ffc04 	addi	fp,fp,-16
1000cb70:	01800044 	movi	r6,1
1000cb74:	0009883a 	mov	r4,zero
1000cb78:	d811883a 	mov	r8,sp
1000cb7c:	af3ff316 	blt	r21,fp,1000cb4c <__alt_data_end+0xf800cb4c>
1000cb80:	d8c02317 	ldw	r3,140(sp)
1000cb84:	1705883a 	add	r2,r2,fp
1000cb88:	47000115 	stw	fp,4(r8)
1000cb8c:	40c00015 	stw	r3,0(r8)
1000cb90:	d8801c15 	stw	r2,112(sp)
1000cb94:	d9801b15 	stw	r6,108(sp)
1000cb98:	00c001c4 	movi	r3,7
1000cb9c:	19829416 	blt	r3,r6,1000d5f0 <___vfiprintf_internal_r+0x1030>
1000cba0:	8521c83a 	sub	r16,r16,r20
1000cba4:	42000204 	addi	r8,r8,8
1000cba8:	31400044 	addi	r5,r6,1
1000cbac:	3009883a 	mov	r4,r6
1000cbb0:	04018716 	blt	zero,r16,1000d1d0 <___vfiprintf_internal_r+0xc10>
1000cbb4:	a085883a 	add	r2,r20,r2
1000cbb8:	45c00015 	stw	r23,0(r8)
1000cbbc:	45000115 	stw	r20,4(r8)
1000cbc0:	d8801c15 	stw	r2,112(sp)
1000cbc4:	d9401b15 	stw	r5,108(sp)
1000cbc8:	00c001c4 	movi	r3,7
1000cbcc:	1941c20e 	bge	r3,r5,1000d2d8 <___vfiprintf_internal_r+0xd18>
1000cbd0:	1002531e 	bne	r2,zero,1000d520 <___vfiprintf_internal_r+0xf60>
1000cbd4:	d8001b15 	stw	zero,108(sp)
1000cbd8:	8c40010c 	andi	r17,r17,4
1000cbdc:	88023226 	beq	r17,zero,1000d4a8 <___vfiprintf_internal_r+0xee8>
1000cbe0:	d9002517 	ldw	r4,148(sp)
1000cbe4:	24e3c83a 	sub	r17,r4,r19
1000cbe8:	04432916 	blt	zero,r17,1000d890 <___vfiprintf_internal_r+0x12d0>
1000cbec:	d8802517 	ldw	r2,148(sp)
1000cbf0:	14c0010e 	bge	r2,r19,1000cbf8 <___vfiprintf_internal_r+0x638>
1000cbf4:	9805883a 	mov	r2,r19
1000cbf8:	d8c02417 	ldw	r3,144(sp)
1000cbfc:	1887883a 	add	r3,r3,r2
1000cc00:	d8c02415 	stw	r3,144(sp)
1000cc04:	d8001b15 	stw	zero,108(sp)
1000cc08:	d811883a 	mov	r8,sp
1000cc0c:	003ea006 	br	1000c690 <__alt_data_end+0xf800c690>
1000cc10:	8c400814 	ori	r17,r17,32
1000cc14:	b0c00007 	ldb	r3,0(r22)
1000cc18:	003ec606 	br	1000c734 <__alt_data_end+0xf800c734>
1000cc1c:	b0c00007 	ldb	r3,0(r22)
1000cc20:	00801b04 	movi	r2,108
1000cc24:	18832026 	beq	r3,r2,1000d8a8 <___vfiprintf_internal_r+0x12e8>
1000cc28:	8c400414 	ori	r17,r17,16
1000cc2c:	003ec106 	br	1000c734 <__alt_data_end+0xf800c734>
1000cc30:	9cc03fcc 	andi	r19,r19,255
1000cc34:	b811883a 	mov	r8,r23
1000cc38:	9803981e 	bne	r19,zero,1000da9c <___vfiprintf_internal_r+0x14dc>
1000cc3c:	8880080c 	andi	r2,r17,32
1000cc40:	1002be26 	beq	r2,zero,1000d73c <___vfiprintf_internal_r+0x117c>
1000cc44:	d9002217 	ldw	r4,136(sp)
1000cc48:	d9402417 	ldw	r5,144(sp)
1000cc4c:	20800017 	ldw	r2,0(r4)
1000cc50:	2807d7fa 	srai	r3,r5,31
1000cc54:	21000104 	addi	r4,r4,4
1000cc58:	d9002215 	stw	r4,136(sp)
1000cc5c:	11400015 	stw	r5,0(r2)
1000cc60:	10c00115 	stw	r3,4(r2)
1000cc64:	003e8a06 	br	1000c690 <__alt_data_end+0xf800c690>
1000cc68:	9cc03fcc 	andi	r19,r19,255
1000cc6c:	b811883a 	mov	r8,r23
1000cc70:	9803871e 	bne	r19,zero,1000da90 <___vfiprintf_internal_r+0x14d0>
1000cc74:	8880080c 	andi	r2,r17,32
1000cc78:	10009a26 	beq	r2,zero,1000cee4 <___vfiprintf_internal_r+0x924>
1000cc7c:	d9002217 	ldw	r4,136(sp)
1000cc80:	d8001d85 	stb	zero,118(sp)
1000cc84:	20800204 	addi	r2,r4,8
1000cc88:	24c00017 	ldw	r19,0(r4)
1000cc8c:	25000117 	ldw	r20,4(r4)
1000cc90:	8002a416 	blt	r16,zero,1000d724 <___vfiprintf_internal_r+0x1164>
1000cc94:	013fdfc4 	movi	r4,-129
1000cc98:	9d06b03a 	or	r3,r19,r20
1000cc9c:	d8802215 	stw	r2,136(sp)
1000cca0:	8922703a 	and	r17,r17,r4
1000cca4:	18009b26 	beq	r3,zero,1000cf14 <___vfiprintf_internal_r+0x954>
1000cca8:	002b883a 	mov	r21,zero
1000ccac:	ddc01a04 	addi	r23,sp,104
1000ccb0:	9806d0fa 	srli	r3,r19,3
1000ccb4:	a008977a 	slli	r4,r20,29
1000ccb8:	a028d0fa 	srli	r20,r20,3
1000ccbc:	9cc001cc 	andi	r19,r19,7
1000ccc0:	98800c04 	addi	r2,r19,48
1000ccc4:	bdffffc4 	addi	r23,r23,-1
1000ccc8:	20e6b03a 	or	r19,r4,r3
1000cccc:	b8800005 	stb	r2,0(r23)
1000ccd0:	9d06b03a 	or	r3,r19,r20
1000ccd4:	183ff61e 	bne	r3,zero,1000ccb0 <__alt_data_end+0xf800ccb0>
1000ccd8:	88c0004c 	andi	r3,r17,1
1000ccdc:	18021f1e 	bne	r3,zero,1000d55c <___vfiprintf_internal_r+0xf9c>
1000cce0:	d9401e17 	ldw	r5,120(sp)
1000cce4:	2de9c83a 	sub	r20,r5,r23
1000cce8:	003f3806 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000ccec:	9cc03fcc 	andi	r19,r19,255
1000ccf0:	b811883a 	mov	r8,r23
1000ccf4:	98034f1e 	bne	r19,zero,1000da34 <___vfiprintf_internal_r+0x1474>
1000ccf8:	00840074 	movhi	r2,4097
1000ccfc:	10932d04 	addi	r2,r2,19636
1000cd00:	d8802615 	stw	r2,152(sp)
1000cd04:	8880080c 	andi	r2,r17,32
1000cd08:	1000ac26 	beq	r2,zero,1000cfbc <___vfiprintf_internal_r+0x9fc>
1000cd0c:	d9002217 	ldw	r4,136(sp)
1000cd10:	24c00017 	ldw	r19,0(r4)
1000cd14:	25000117 	ldw	r20,4(r4)
1000cd18:	21000204 	addi	r4,r4,8
1000cd1c:	d9002215 	stw	r4,136(sp)
1000cd20:	8880004c 	andi	r2,r17,1
1000cd24:	1001e726 	beq	r2,zero,1000d4c4 <___vfiprintf_internal_r+0xf04>
1000cd28:	9d04b03a 	or	r2,r19,r20
1000cd2c:	10025c1e 	bne	r2,zero,1000d6a0 <___vfiprintf_internal_r+0x10e0>
1000cd30:	d8001d85 	stb	zero,118(sp)
1000cd34:	80024416 	blt	r16,zero,1000d648 <___vfiprintf_internal_r+0x1088>
1000cd38:	00bfdfc4 	movi	r2,-129
1000cd3c:	88a2703a 	and	r17,r17,r2
1000cd40:	003f1d06 	br	1000c9b8 <__alt_data_end+0xf800c9b8>
1000cd44:	d8c02217 	ldw	r3,136(sp)
1000cd48:	04c00044 	movi	r19,1
1000cd4c:	b811883a 	mov	r8,r23
1000cd50:	18800017 	ldw	r2,0(r3)
1000cd54:	18c00104 	addi	r3,r3,4
1000cd58:	d8001d85 	stb	zero,118(sp)
1000cd5c:	d8801005 	stb	r2,64(sp)
1000cd60:	d8c02215 	stw	r3,136(sp)
1000cd64:	9829883a 	mov	r20,r19
1000cd68:	ddc01004 	addi	r23,sp,64
1000cd6c:	0021883a 	mov	r16,zero
1000cd70:	003f1e06 	br	1000c9ec <__alt_data_end+0xf800c9ec>
1000cd74:	9cc03fcc 	andi	r19,r19,255
1000cd78:	b811883a 	mov	r8,r23
1000cd7c:	9803331e 	bne	r19,zero,1000da4c <___vfiprintf_internal_r+0x148c>
1000cd80:	8880080c 	andi	r2,r17,32
1000cd84:	10004826 	beq	r2,zero,1000cea8 <___vfiprintf_internal_r+0x8e8>
1000cd88:	d9002217 	ldw	r4,136(sp)
1000cd8c:	20800117 	ldw	r2,4(r4)
1000cd90:	24c00017 	ldw	r19,0(r4)
1000cd94:	21000204 	addi	r4,r4,8
1000cd98:	d9002215 	stw	r4,136(sp)
1000cd9c:	1029883a 	mov	r20,r2
1000cda0:	10024c16 	blt	r2,zero,1000d6d4 <___vfiprintf_internal_r+0x1114>
1000cda4:	dd401d83 	ldbu	r21,118(sp)
1000cda8:	80007116 	blt	r16,zero,1000cf70 <___vfiprintf_internal_r+0x9b0>
1000cdac:	00ffdfc4 	movi	r3,-129
1000cdb0:	9d04b03a 	or	r2,r19,r20
1000cdb4:	88e2703a 	and	r17,r17,r3
1000cdb8:	1000d126 	beq	r2,zero,1000d100 <___vfiprintf_internal_r+0xb40>
1000cdbc:	a0023526 	beq	r20,zero,1000d694 <___vfiprintf_internal_r+0x10d4>
1000cdc0:	ddc01a04 	addi	r23,sp,104
1000cdc4:	4039883a 	mov	fp,r8
1000cdc8:	9809883a 	mov	r4,r19
1000cdcc:	a00b883a 	mov	r5,r20
1000cdd0:	01800284 	movi	r6,10
1000cdd4:	000f883a 	mov	r7,zero
1000cdd8:	000eaec0 	call	1000eaec <__umoddi3>
1000cddc:	10800c04 	addi	r2,r2,48
1000cde0:	bdffffc4 	addi	r23,r23,-1
1000cde4:	9809883a 	mov	r4,r19
1000cde8:	a00b883a 	mov	r5,r20
1000cdec:	b8800005 	stb	r2,0(r23)
1000cdf0:	01800284 	movi	r6,10
1000cdf4:	000f883a 	mov	r7,zero
1000cdf8:	000e4f00 	call	1000e4f0 <__udivdi3>
1000cdfc:	1027883a 	mov	r19,r2
1000ce00:	10c4b03a 	or	r2,r2,r3
1000ce04:	1829883a 	mov	r20,r3
1000ce08:	103fef1e 	bne	r2,zero,1000cdc8 <__alt_data_end+0xf800cdc8>
1000ce0c:	d9001e17 	ldw	r4,120(sp)
1000ce10:	e011883a 	mov	r8,fp
1000ce14:	25e9c83a 	sub	r20,r4,r23
1000ce18:	003eec06 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000ce1c:	d8802307 	ldb	r2,140(sp)
1000ce20:	1002361e 	bne	r2,zero,1000d6fc <___vfiprintf_internal_r+0x113c>
1000ce24:	00c00804 	movi	r3,32
1000ce28:	d8c02305 	stb	r3,140(sp)
1000ce2c:	04c00044 	movi	r19,1
1000ce30:	b0c00007 	ldb	r3,0(r22)
1000ce34:	003e3f06 	br	1000c734 <__alt_data_end+0xf800c734>
1000ce38:	8c400054 	ori	r17,r17,1
1000ce3c:	b0c00007 	ldb	r3,0(r22)
1000ce40:	003e3c06 	br	1000c734 <__alt_data_end+0xf800c734>
1000ce44:	8c402014 	ori	r17,r17,128
1000ce48:	b0c00007 	ldb	r3,0(r22)
1000ce4c:	003e3906 	br	1000c734 <__alt_data_end+0xf800c734>
1000ce50:	dc002715 	stw	r16,156(sp)
1000ce54:	d8002515 	stw	zero,148(sp)
1000ce58:	1f3ff404 	addi	fp,r3,-48
1000ce5c:	0009883a 	mov	r4,zero
1000ce60:	b021883a 	mov	r16,r22
1000ce64:	01400284 	movi	r5,10
1000ce68:	0004bc80 	call	10004bc8 <__mulsi3>
1000ce6c:	80c00007 	ldb	r3,0(r16)
1000ce70:	e089883a 	add	r4,fp,r2
1000ce74:	b5800044 	addi	r22,r22,1
1000ce78:	1f3ff404 	addi	fp,r3,-48
1000ce7c:	b021883a 	mov	r16,r22
1000ce80:	af3ff82e 	bgeu	r21,fp,1000ce64 <__alt_data_end+0xf800ce64>
1000ce84:	d9002515 	stw	r4,148(sp)
1000ce88:	dc002717 	ldw	r16,156(sp)
1000ce8c:	003e2a06 	br	1000c738 <__alt_data_end+0xf800c738>
1000ce90:	9cc03fcc 	andi	r19,r19,255
1000ce94:	b811883a 	mov	r8,r23
1000ce98:	9802e91e 	bne	r19,zero,1000da40 <___vfiprintf_internal_r+0x1480>
1000ce9c:	8c400414 	ori	r17,r17,16
1000cea0:	8880080c 	andi	r2,r17,32
1000cea4:	103fb81e 	bne	r2,zero,1000cd88 <__alt_data_end+0xf800cd88>
1000cea8:	8880040c 	andi	r2,r17,16
1000ceac:	10022e26 	beq	r2,zero,1000d768 <___vfiprintf_internal_r+0x11a8>
1000ceb0:	d9402217 	ldw	r5,136(sp)
1000ceb4:	2cc00017 	ldw	r19,0(r5)
1000ceb8:	29400104 	addi	r5,r5,4
1000cebc:	d9402215 	stw	r5,136(sp)
1000cec0:	9829d7fa 	srai	r20,r19,31
1000cec4:	a005883a 	mov	r2,r20
1000cec8:	003fb506 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000cecc:	9cc03fcc 	andi	r19,r19,255
1000ced0:	b811883a 	mov	r8,r23
1000ced4:	9802fa1e 	bne	r19,zero,1000dac0 <___vfiprintf_internal_r+0x1500>
1000ced8:	8c400414 	ori	r17,r17,16
1000cedc:	8880080c 	andi	r2,r17,32
1000cee0:	103f661e 	bne	r2,zero,1000cc7c <__alt_data_end+0xf800cc7c>
1000cee4:	8880040c 	andi	r2,r17,16
1000cee8:	10020626 	beq	r2,zero,1000d704 <___vfiprintf_internal_r+0x1144>
1000ceec:	d9402217 	ldw	r5,136(sp)
1000cef0:	d8001d85 	stb	zero,118(sp)
1000cef4:	0029883a 	mov	r20,zero
1000cef8:	28800104 	addi	r2,r5,4
1000cefc:	2cc00017 	ldw	r19,0(r5)
1000cf00:	80020816 	blt	r16,zero,1000d724 <___vfiprintf_internal_r+0x1164>
1000cf04:	00ffdfc4 	movi	r3,-129
1000cf08:	d8802215 	stw	r2,136(sp)
1000cf0c:	88e2703a 	and	r17,r17,r3
1000cf10:	983f651e 	bne	r19,zero,1000cca8 <__alt_data_end+0xf800cca8>
1000cf14:	002b883a 	mov	r21,zero
1000cf18:	8002cf26 	beq	r16,zero,1000da58 <___vfiprintf_internal_r+0x1498>
1000cf1c:	0027883a 	mov	r19,zero
1000cf20:	0029883a 	mov	r20,zero
1000cf24:	003f6106 	br	1000ccac <__alt_data_end+0xf800ccac>
1000cf28:	9cc03fcc 	andi	r19,r19,255
1000cf2c:	b811883a 	mov	r8,r23
1000cf30:	9802e01e 	bne	r19,zero,1000dab4 <___vfiprintf_internal_r+0x14f4>
1000cf34:	8c400414 	ori	r17,r17,16
1000cf38:	8880080c 	andi	r2,r17,32
1000cf3c:	1000641e 	bne	r2,zero,1000d0d0 <___vfiprintf_internal_r+0xb10>
1000cf40:	8880040c 	andi	r2,r17,16
1000cf44:	1001c81e 	bne	r2,zero,1000d668 <___vfiprintf_internal_r+0x10a8>
1000cf48:	8880100c 	andi	r2,r17,64
1000cf4c:	d8001d85 	stb	zero,118(sp)
1000cf50:	1002281e 	bne	r2,zero,1000d7f4 <___vfiprintf_internal_r+0x1234>
1000cf54:	d9002217 	ldw	r4,136(sp)
1000cf58:	0029883a 	mov	r20,zero
1000cf5c:	20800104 	addi	r2,r4,4
1000cf60:	24c00017 	ldw	r19,0(r4)
1000cf64:	8001c60e 	bge	r16,zero,1000d680 <___vfiprintf_internal_r+0x10c0>
1000cf68:	d8802215 	stw	r2,136(sp)
1000cf6c:	002b883a 	mov	r21,zero
1000cf70:	9d04b03a 	or	r2,r19,r20
1000cf74:	103f911e 	bne	r2,zero,1000cdbc <__alt_data_end+0xf800cdbc>
1000cf78:	00800044 	movi	r2,1
1000cf7c:	10803fcc 	andi	r2,r2,255
1000cf80:	00c00044 	movi	r3,1
1000cf84:	10c05f26 	beq	r2,r3,1000d104 <___vfiprintf_internal_r+0xb44>
1000cf88:	00c00084 	movi	r3,2
1000cf8c:	10ffe31e 	bne	r2,r3,1000cf1c <__alt_data_end+0xf800cf1c>
1000cf90:	0027883a 	mov	r19,zero
1000cf94:	0029883a 	mov	r20,zero
1000cf98:	00015106 	br	1000d4e0 <___vfiprintf_internal_r+0xf20>
1000cf9c:	9cc03fcc 	andi	r19,r19,255
1000cfa0:	b811883a 	mov	r8,r23
1000cfa4:	9802c01e 	bne	r19,zero,1000daa8 <___vfiprintf_internal_r+0x14e8>
1000cfa8:	01440074 	movhi	r5,4097
1000cfac:	29532804 	addi	r5,r5,19616
1000cfb0:	d9402615 	stw	r5,152(sp)
1000cfb4:	8880080c 	andi	r2,r17,32
1000cfb8:	103f541e 	bne	r2,zero,1000cd0c <__alt_data_end+0xf800cd0c>
1000cfbc:	8880040c 	andi	r2,r17,16
1000cfc0:	1001f226 	beq	r2,zero,1000d78c <___vfiprintf_internal_r+0x11cc>
1000cfc4:	d9402217 	ldw	r5,136(sp)
1000cfc8:	0029883a 	mov	r20,zero
1000cfcc:	2cc00017 	ldw	r19,0(r5)
1000cfd0:	29400104 	addi	r5,r5,4
1000cfd4:	d9402215 	stw	r5,136(sp)
1000cfd8:	003f5106 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000cfdc:	d8c02217 	ldw	r3,136(sp)
1000cfe0:	b811883a 	mov	r8,r23
1000cfe4:	d8001d85 	stb	zero,118(sp)
1000cfe8:	1dc00017 	ldw	r23,0(r3)
1000cfec:	1f000104 	addi	fp,r3,4
1000cff0:	b8025926 	beq	r23,zero,1000d958 <___vfiprintf_internal_r+0x1398>
1000cff4:	80023316 	blt	r16,zero,1000d8c4 <___vfiprintf_internal_r+0x1304>
1000cff8:	800d883a 	mov	r6,r16
1000cffc:	000b883a 	mov	r5,zero
1000d000:	b809883a 	mov	r4,r23
1000d004:	da002a15 	stw	r8,168(sp)
1000d008:	000a7000 	call	1000a700 <memchr>
1000d00c:	da002a17 	ldw	r8,168(sp)
1000d010:	10026826 	beq	r2,zero,1000d9b4 <___vfiprintf_internal_r+0x13f4>
1000d014:	15e9c83a 	sub	r20,r2,r23
1000d018:	dd401d83 	ldbu	r21,118(sp)
1000d01c:	df002215 	stw	fp,136(sp)
1000d020:	0021883a 	mov	r16,zero
1000d024:	003e6906 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d028:	9cc03fcc 	andi	r19,r19,255
1000d02c:	b811883a 	mov	r8,r23
1000d030:	983fc126 	beq	r19,zero,1000cf38 <__alt_data_end+0xf800cf38>
1000d034:	d8c02303 	ldbu	r3,140(sp)
1000d038:	d8c01d85 	stb	r3,118(sp)
1000d03c:	003fbe06 	br	1000cf38 <__alt_data_end+0xf800cf38>
1000d040:	d9002217 	ldw	r4,136(sp)
1000d044:	d9402217 	ldw	r5,136(sp)
1000d048:	21000017 	ldw	r4,0(r4)
1000d04c:	28800104 	addi	r2,r5,4
1000d050:	d9002515 	stw	r4,148(sp)
1000d054:	203e3d16 	blt	r4,zero,1000c94c <__alt_data_end+0xf800c94c>
1000d058:	d8802215 	stw	r2,136(sp)
1000d05c:	b0c00007 	ldb	r3,0(r22)
1000d060:	003db406 	br	1000c734 <__alt_data_end+0xf800c734>
1000d064:	00c00ac4 	movi	r3,43
1000d068:	d8c02305 	stb	r3,140(sp)
1000d06c:	04c00044 	movi	r19,1
1000d070:	b0c00007 	ldb	r3,0(r22)
1000d074:	003daf06 	br	1000c734 <__alt_data_end+0xf800c734>
1000d078:	b0c00007 	ldb	r3,0(r22)
1000d07c:	01000a84 	movi	r4,42
1000d080:	b4000044 	addi	r16,r22,1
1000d084:	19025e26 	beq	r3,r4,1000da00 <___vfiprintf_internal_r+0x1440>
1000d088:	1f3ff404 	addi	fp,r3,-48
1000d08c:	0009883a 	mov	r4,zero
1000d090:	af025236 	bltu	r21,fp,1000d9dc <___vfiprintf_internal_r+0x141c>
1000d094:	01400284 	movi	r5,10
1000d098:	0004bc80 	call	10004bc8 <__mulsi3>
1000d09c:	80c00007 	ldb	r3,0(r16)
1000d0a0:	1709883a 	add	r4,r2,fp
1000d0a4:	85800044 	addi	r22,r16,1
1000d0a8:	1f3ff404 	addi	fp,r3,-48
1000d0ac:	b021883a 	mov	r16,r22
1000d0b0:	af3ff82e 	bgeu	r21,fp,1000d094 <__alt_data_end+0xf800d094>
1000d0b4:	2021883a 	mov	r16,r4
1000d0b8:	203d9f0e 	bge	r4,zero,1000c738 <__alt_data_end+0xf800c738>
1000d0bc:	043fffc4 	movi	r16,-1
1000d0c0:	003d9d06 	br	1000c738 <__alt_data_end+0xf800c738>
1000d0c4:	8c401014 	ori	r17,r17,64
1000d0c8:	b0c00007 	ldb	r3,0(r22)
1000d0cc:	003d9906 	br	1000c734 <__alt_data_end+0xf800c734>
1000d0d0:	d9002217 	ldw	r4,136(sp)
1000d0d4:	d8001d85 	stb	zero,118(sp)
1000d0d8:	20c00204 	addi	r3,r4,8
1000d0dc:	24c00017 	ldw	r19,0(r4)
1000d0e0:	25000117 	ldw	r20,4(r4)
1000d0e4:	8001e716 	blt	r16,zero,1000d884 <___vfiprintf_internal_r+0x12c4>
1000d0e8:	013fdfc4 	movi	r4,-129
1000d0ec:	9d04b03a 	or	r2,r19,r20
1000d0f0:	d8c02215 	stw	r3,136(sp)
1000d0f4:	8922703a 	and	r17,r17,r4
1000d0f8:	002b883a 	mov	r21,zero
1000d0fc:	103f2f1e 	bne	r2,zero,1000cdbc <__alt_data_end+0xf800cdbc>
1000d100:	803e2f26 	beq	r16,zero,1000c9c0 <__alt_data_end+0xf800c9c0>
1000d104:	0027883a 	mov	r19,zero
1000d108:	9cc00c04 	addi	r19,r19,48
1000d10c:	dcc019c5 	stb	r19,103(sp)
1000d110:	dd002817 	ldw	r20,160(sp)
1000d114:	ddc019c4 	addi	r23,sp,103
1000d118:	003e2c06 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d11c:	9cc03fcc 	andi	r19,r19,255
1000d120:	b811883a 	mov	r8,r23
1000d124:	9802571e 	bne	r19,zero,1000da84 <___vfiprintf_internal_r+0x14c4>
1000d128:	18005726 	beq	r3,zero,1000d288 <___vfiprintf_internal_r+0xcc8>
1000d12c:	04c00044 	movi	r19,1
1000d130:	d8c01005 	stb	r3,64(sp)
1000d134:	d8001d85 	stb	zero,118(sp)
1000d138:	9829883a 	mov	r20,r19
1000d13c:	ddc01004 	addi	r23,sp,64
1000d140:	003f0a06 	br	1000cd6c <__alt_data_end+0xf800cd6c>
1000d144:	d9402017 	ldw	r5,128(sp)
1000d148:	d9002117 	ldw	r4,132(sp)
1000d14c:	d9801a04 	addi	r6,sp,104
1000d150:	da802a15 	stw	r10,168(sp)
1000d154:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d158:	da802a17 	ldw	r10,168(sp)
1000d15c:	1000501e 	bne	r2,zero,1000d2a0 <___vfiprintf_internal_r+0xce0>
1000d160:	d9801b17 	ldw	r6,108(sp)
1000d164:	d8801c17 	ldw	r2,112(sp)
1000d168:	d811883a 	mov	r8,sp
1000d16c:	31000044 	addi	r4,r6,1
1000d170:	003e3606 	br	1000ca4c <__alt_data_end+0xf800ca4c>
1000d174:	d9001b17 	ldw	r4,108(sp)
1000d178:	d8801c17 	ldw	r2,112(sp)
1000d17c:	21400044 	addi	r5,r4,1
1000d180:	d9801d87 	ldb	r6,118(sp)
1000d184:	303e5226 	beq	r6,zero,1000cad0 <__alt_data_end+0xf800cad0>
1000d188:	01800044 	movi	r6,1
1000d18c:	d9001d84 	addi	r4,sp,118
1000d190:	1185883a 	add	r2,r2,r6
1000d194:	41000015 	stw	r4,0(r8)
1000d198:	41800115 	stw	r6,4(r8)
1000d19c:	d8801c15 	stw	r2,112(sp)
1000d1a0:	d9401b15 	stw	r5,108(sp)
1000d1a4:	010001c4 	movi	r4,7
1000d1a8:	2140b00e 	bge	r4,r5,1000d46c <___vfiprintf_internal_r+0xeac>
1000d1ac:	1000f61e 	bne	r2,zero,1000d588 <___vfiprintf_internal_r+0xfc8>
1000d1b0:	3800b31e 	bne	r7,zero,1000d480 <___vfiprintf_internal_r+0xec0>
1000d1b4:	0009883a 	mov	r4,zero
1000d1b8:	300b883a 	mov	r5,r6
1000d1bc:	d811883a 	mov	r8,sp
1000d1c0:	01802004 	movi	r6,128
1000d1c4:	19be5226 	beq	r3,r6,1000cb10 <__alt_data_end+0xf800cb10>
1000d1c8:	8521c83a 	sub	r16,r16,r20
1000d1cc:	043e790e 	bge	zero,r16,1000cbb4 <__alt_data_end+0xf800cbb4>
1000d1d0:	05400404 	movi	r21,16
1000d1d4:	ac01b00e 	bge	r21,r16,1000d898 <___vfiprintf_internal_r+0x12d8>
1000d1d8:	01440074 	movhi	r5,4097
1000d1dc:	29538e04 	addi	r5,r5,20024
1000d1e0:	d9402315 	stw	r5,140(sp)
1000d1e4:	070001c4 	movi	fp,7
1000d1e8:	00000506 	br	1000d200 <___vfiprintf_internal_r+0xc40>
1000d1ec:	21400084 	addi	r5,r4,2
1000d1f0:	42000204 	addi	r8,r8,8
1000d1f4:	1809883a 	mov	r4,r3
1000d1f8:	843ffc04 	addi	r16,r16,-16
1000d1fc:	ac000d0e 	bge	r21,r16,1000d234 <___vfiprintf_internal_r+0xc74>
1000d200:	10800404 	addi	r2,r2,16
1000d204:	20c00044 	addi	r3,r4,1
1000d208:	44800015 	stw	r18,0(r8)
1000d20c:	45400115 	stw	r21,4(r8)
1000d210:	d8801c15 	stw	r2,112(sp)
1000d214:	d8c01b15 	stw	r3,108(sp)
1000d218:	e0fff40e 	bge	fp,r3,1000d1ec <__alt_data_end+0xf800d1ec>
1000d21c:	1000101e 	bne	r2,zero,1000d260 <___vfiprintf_internal_r+0xca0>
1000d220:	843ffc04 	addi	r16,r16,-16
1000d224:	01400044 	movi	r5,1
1000d228:	0009883a 	mov	r4,zero
1000d22c:	d811883a 	mov	r8,sp
1000d230:	ac3ff316 	blt	r21,r16,1000d200 <__alt_data_end+0xf800d200>
1000d234:	d8c02317 	ldw	r3,140(sp)
1000d238:	1405883a 	add	r2,r2,r16
1000d23c:	44000115 	stw	r16,4(r8)
1000d240:	40c00015 	stw	r3,0(r8)
1000d244:	d8801c15 	stw	r2,112(sp)
1000d248:	d9401b15 	stw	r5,108(sp)
1000d24c:	00c001c4 	movi	r3,7
1000d250:	19401916 	blt	r3,r5,1000d2b8 <___vfiprintf_internal_r+0xcf8>
1000d254:	42000204 	addi	r8,r8,8
1000d258:	29400044 	addi	r5,r5,1
1000d25c:	003e5506 	br	1000cbb4 <__alt_data_end+0xf800cbb4>
1000d260:	d9402017 	ldw	r5,128(sp)
1000d264:	d9002117 	ldw	r4,132(sp)
1000d268:	d9801a04 	addi	r6,sp,104
1000d26c:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d270:	10000b1e 	bne	r2,zero,1000d2a0 <___vfiprintf_internal_r+0xce0>
1000d274:	d9001b17 	ldw	r4,108(sp)
1000d278:	d8801c17 	ldw	r2,112(sp)
1000d27c:	d811883a 	mov	r8,sp
1000d280:	21400044 	addi	r5,r4,1
1000d284:	003fdc06 	br	1000d1f8 <__alt_data_end+0xf800d1f8>
1000d288:	d8801c17 	ldw	r2,112(sp)
1000d28c:	10000426 	beq	r2,zero,1000d2a0 <___vfiprintf_internal_r+0xce0>
1000d290:	d9402017 	ldw	r5,128(sp)
1000d294:	d9002117 	ldw	r4,132(sp)
1000d298:	d9801a04 	addi	r6,sp,104
1000d29c:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d2a0:	d9402017 	ldw	r5,128(sp)
1000d2a4:	2880030b 	ldhu	r2,12(r5)
1000d2a8:	1080100c 	andi	r2,r2,64
1000d2ac:	10014d1e 	bne	r2,zero,1000d7e4 <___vfiprintf_internal_r+0x1224>
1000d2b0:	d8802417 	ldw	r2,144(sp)
1000d2b4:	003d9706 	br	1000c914 <__alt_data_end+0xf800c914>
1000d2b8:	1000d21e 	bne	r2,zero,1000d604 <___vfiprintf_internal_r+0x1044>
1000d2bc:	00c00044 	movi	r3,1
1000d2c0:	a005883a 	mov	r2,r20
1000d2c4:	ddc00015 	stw	r23,0(sp)
1000d2c8:	dd000115 	stw	r20,4(sp)
1000d2cc:	dd001c15 	stw	r20,112(sp)
1000d2d0:	d8c01b15 	stw	r3,108(sp)
1000d2d4:	d811883a 	mov	r8,sp
1000d2d8:	42000204 	addi	r8,r8,8
1000d2dc:	8c40010c 	andi	r17,r17,4
1000d2e0:	88004026 	beq	r17,zero,1000d3e4 <___vfiprintf_internal_r+0xe24>
1000d2e4:	d9002517 	ldw	r4,148(sp)
1000d2e8:	24e3c83a 	sub	r17,r4,r19
1000d2ec:	04403d0e 	bge	zero,r17,1000d3e4 <___vfiprintf_internal_r+0xe24>
1000d2f0:	04000404 	movi	r16,16
1000d2f4:	8441a90e 	bge	r16,r17,1000d99c <___vfiprintf_internal_r+0x13dc>
1000d2f8:	00c40074 	movhi	r3,4097
1000d2fc:	18d39204 	addi	r3,r3,20040
1000d300:	d9001b17 	ldw	r4,108(sp)
1000d304:	d8c02315 	stw	r3,140(sp)
1000d308:	050001c4 	movi	r20,7
1000d30c:	dd402117 	ldw	r21,132(sp)
1000d310:	ddc02017 	ldw	r23,128(sp)
1000d314:	00000506 	br	1000d32c <___vfiprintf_internal_r+0xd6c>
1000d318:	21400084 	addi	r5,r4,2
1000d31c:	42000204 	addi	r8,r8,8
1000d320:	1809883a 	mov	r4,r3
1000d324:	8c7ffc04 	addi	r17,r17,-16
1000d328:	84400f0e 	bge	r16,r17,1000d368 <___vfiprintf_internal_r+0xda8>
1000d32c:	01440074 	movhi	r5,4097
1000d330:	10800404 	addi	r2,r2,16
1000d334:	20c00044 	addi	r3,r4,1
1000d338:	29539204 	addi	r5,r5,20040
1000d33c:	41400015 	stw	r5,0(r8)
1000d340:	44000115 	stw	r16,4(r8)
1000d344:	d8801c15 	stw	r2,112(sp)
1000d348:	d8c01b15 	stw	r3,108(sp)
1000d34c:	a0fff20e 	bge	r20,r3,1000d318 <__alt_data_end+0xf800d318>
1000d350:	1000141e 	bne	r2,zero,1000d3a4 <___vfiprintf_internal_r+0xde4>
1000d354:	8c7ffc04 	addi	r17,r17,-16
1000d358:	01400044 	movi	r5,1
1000d35c:	0009883a 	mov	r4,zero
1000d360:	d811883a 	mov	r8,sp
1000d364:	847ff116 	blt	r16,r17,1000d32c <__alt_data_end+0xf800d32c>
1000d368:	d8c02317 	ldw	r3,140(sp)
1000d36c:	1445883a 	add	r2,r2,r17
1000d370:	44400115 	stw	r17,4(r8)
1000d374:	40c00015 	stw	r3,0(r8)
1000d378:	d8801c15 	stw	r2,112(sp)
1000d37c:	d9401b15 	stw	r5,108(sp)
1000d380:	00c001c4 	movi	r3,7
1000d384:	1940170e 	bge	r3,r5,1000d3e4 <___vfiprintf_internal_r+0xe24>
1000d388:	1000101e 	bne	r2,zero,1000d3cc <___vfiprintf_internal_r+0xe0c>
1000d38c:	d8802517 	ldw	r2,148(sp)
1000d390:	14c11616 	blt	r2,r19,1000d7ec <___vfiprintf_internal_r+0x122c>
1000d394:	d9002417 	ldw	r4,144(sp)
1000d398:	2089883a 	add	r4,r4,r2
1000d39c:	d9002415 	stw	r4,144(sp)
1000d3a0:	003e1806 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d3a4:	d9801a04 	addi	r6,sp,104
1000d3a8:	b80b883a 	mov	r5,r23
1000d3ac:	a809883a 	mov	r4,r21
1000d3b0:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d3b4:	103fba1e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d3b8:	d9001b17 	ldw	r4,108(sp)
1000d3bc:	d8801c17 	ldw	r2,112(sp)
1000d3c0:	d811883a 	mov	r8,sp
1000d3c4:	21400044 	addi	r5,r4,1
1000d3c8:	003fd606 	br	1000d324 <__alt_data_end+0xf800d324>
1000d3cc:	d9402017 	ldw	r5,128(sp)
1000d3d0:	d9002117 	ldw	r4,132(sp)
1000d3d4:	d9801a04 	addi	r6,sp,104
1000d3d8:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d3dc:	103fb01e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d3e0:	d8801c17 	ldw	r2,112(sp)
1000d3e4:	d8c02517 	ldw	r3,148(sp)
1000d3e8:	1cc0010e 	bge	r3,r19,1000d3f0 <___vfiprintf_internal_r+0xe30>
1000d3ec:	9807883a 	mov	r3,r19
1000d3f0:	d9002417 	ldw	r4,144(sp)
1000d3f4:	20c9883a 	add	r4,r4,r3
1000d3f8:	d9002415 	stw	r4,144(sp)
1000d3fc:	103e0126 	beq	r2,zero,1000cc04 <__alt_data_end+0xf800cc04>
1000d400:	d9402017 	ldw	r5,128(sp)
1000d404:	d9002117 	ldw	r4,132(sp)
1000d408:	d9801a04 	addi	r6,sp,104
1000d40c:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d410:	103dfc26 	beq	r2,zero,1000cc04 <__alt_data_end+0xf800cc04>
1000d414:	003fa206 	br	1000d2a0 <__alt_data_end+0xf800d2a0>
1000d418:	d9402017 	ldw	r5,128(sp)
1000d41c:	d9002117 	ldw	r4,132(sp)
1000d420:	d9801a04 	addi	r6,sp,104
1000d424:	d9c02b15 	stw	r7,172(sp)
1000d428:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d42c:	d9c02b17 	ldw	r7,172(sp)
1000d430:	103f9b1e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d434:	d9001b17 	ldw	r4,108(sp)
1000d438:	d8801c17 	ldw	r2,112(sp)
1000d43c:	d811883a 	mov	r8,sp
1000d440:	21800044 	addi	r6,r4,1
1000d444:	003dbf06 	br	1000cb44 <__alt_data_end+0xf800cb44>
1000d448:	1000d81e 	bne	r2,zero,1000d7ac <___vfiprintf_internal_r+0x11ec>
1000d44c:	d9001d87 	ldb	r4,118(sp)
1000d450:	20000a26 	beq	r4,zero,1000d47c <___vfiprintf_internal_r+0xebc>
1000d454:	00800044 	movi	r2,1
1000d458:	d9001d84 	addi	r4,sp,118
1000d45c:	100b883a 	mov	r5,r2
1000d460:	d9000015 	stw	r4,0(sp)
1000d464:	d8800115 	stw	r2,4(sp)
1000d468:	d811883a 	mov	r8,sp
1000d46c:	2809883a 	mov	r4,r5
1000d470:	42000204 	addi	r8,r8,8
1000d474:	29400044 	addi	r5,r5,1
1000d478:	003d9506 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000d47c:	3800fd26 	beq	r7,zero,1000d874 <___vfiprintf_internal_r+0x12b4>
1000d480:	00800084 	movi	r2,2
1000d484:	d9001d04 	addi	r4,sp,116
1000d488:	d9000015 	stw	r4,0(sp)
1000d48c:	d8800115 	stw	r2,4(sp)
1000d490:	01400044 	movi	r5,1
1000d494:	d811883a 	mov	r8,sp
1000d498:	2809883a 	mov	r4,r5
1000d49c:	42000204 	addi	r8,r8,8
1000d4a0:	29400044 	addi	r5,r5,1
1000d4a4:	003f4606 	br	1000d1c0 <__alt_data_end+0xf800d1c0>
1000d4a8:	d8802517 	ldw	r2,148(sp)
1000d4ac:	14c0010e 	bge	r2,r19,1000d4b4 <___vfiprintf_internal_r+0xef4>
1000d4b0:	9805883a 	mov	r2,r19
1000d4b4:	d9402417 	ldw	r5,144(sp)
1000d4b8:	288b883a 	add	r5,r5,r2
1000d4bc:	d9402415 	stw	r5,144(sp)
1000d4c0:	003dd006 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000d4c4:	d8001d85 	stb	zero,118(sp)
1000d4c8:	80005d16 	blt	r16,zero,1000d640 <___vfiprintf_internal_r+0x1080>
1000d4cc:	00ffdfc4 	movi	r3,-129
1000d4d0:	9d04b03a 	or	r2,r19,r20
1000d4d4:	88e2703a 	and	r17,r17,r3
1000d4d8:	103d3726 	beq	r2,zero,1000c9b8 <__alt_data_end+0xf800c9b8>
1000d4dc:	002b883a 	mov	r21,zero
1000d4e0:	d9002617 	ldw	r4,152(sp)
1000d4e4:	ddc01a04 	addi	r23,sp,104
1000d4e8:	988003cc 	andi	r2,r19,15
1000d4ec:	a006973a 	slli	r3,r20,28
1000d4f0:	2085883a 	add	r2,r4,r2
1000d4f4:	9826d13a 	srli	r19,r19,4
1000d4f8:	10800003 	ldbu	r2,0(r2)
1000d4fc:	a028d13a 	srli	r20,r20,4
1000d500:	bdffffc4 	addi	r23,r23,-1
1000d504:	1ce6b03a 	or	r19,r3,r19
1000d508:	b8800005 	stb	r2,0(r23)
1000d50c:	9d04b03a 	or	r2,r19,r20
1000d510:	103ff51e 	bne	r2,zero,1000d4e8 <__alt_data_end+0xf800d4e8>
1000d514:	d8801e17 	ldw	r2,120(sp)
1000d518:	15e9c83a 	sub	r20,r2,r23
1000d51c:	003d2b06 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d520:	d9402017 	ldw	r5,128(sp)
1000d524:	d9002117 	ldw	r4,132(sp)
1000d528:	d9801a04 	addi	r6,sp,104
1000d52c:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d530:	103f5b1e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d534:	d8801c17 	ldw	r2,112(sp)
1000d538:	d811883a 	mov	r8,sp
1000d53c:	003f6706 	br	1000d2dc <__alt_data_end+0xf800d2dc>
1000d540:	d9402017 	ldw	r5,128(sp)
1000d544:	d9002117 	ldw	r4,132(sp)
1000d548:	d9801a04 	addi	r6,sp,104
1000d54c:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d550:	103f531e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d554:	d811883a 	mov	r8,sp
1000d558:	003cd906 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000d55c:	10803fcc 	andi	r2,r2,255
1000d560:	1080201c 	xori	r2,r2,128
1000d564:	10bfe004 	addi	r2,r2,-128
1000d568:	00c00c04 	movi	r3,48
1000d56c:	10ffe926 	beq	r2,r3,1000d514 <__alt_data_end+0xf800d514>
1000d570:	b8ffffc5 	stb	r3,-1(r23)
1000d574:	d8c01e17 	ldw	r3,120(sp)
1000d578:	b8bfffc4 	addi	r2,r23,-1
1000d57c:	102f883a 	mov	r23,r2
1000d580:	18a9c83a 	sub	r20,r3,r2
1000d584:	003d1106 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d588:	d9402017 	ldw	r5,128(sp)
1000d58c:	d9002117 	ldw	r4,132(sp)
1000d590:	d9801a04 	addi	r6,sp,104
1000d594:	d8c02a15 	stw	r3,168(sp)
1000d598:	d9c02b15 	stw	r7,172(sp)
1000d59c:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d5a0:	d8c02a17 	ldw	r3,168(sp)
1000d5a4:	d9c02b17 	ldw	r7,172(sp)
1000d5a8:	103f3d1e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d5ac:	d9001b17 	ldw	r4,108(sp)
1000d5b0:	d8801c17 	ldw	r2,112(sp)
1000d5b4:	d811883a 	mov	r8,sp
1000d5b8:	21400044 	addi	r5,r4,1
1000d5bc:	003d4406 	br	1000cad0 <__alt_data_end+0xf800cad0>
1000d5c0:	d9402017 	ldw	r5,128(sp)
1000d5c4:	d9002117 	ldw	r4,132(sp)
1000d5c8:	d9801a04 	addi	r6,sp,104
1000d5cc:	d8c02a15 	stw	r3,168(sp)
1000d5d0:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d5d4:	d8c02a17 	ldw	r3,168(sp)
1000d5d8:	103f311e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d5dc:	d9001b17 	ldw	r4,108(sp)
1000d5e0:	d8801c17 	ldw	r2,112(sp)
1000d5e4:	d811883a 	mov	r8,sp
1000d5e8:	21400044 	addi	r5,r4,1
1000d5ec:	003ef406 	br	1000d1c0 <__alt_data_end+0xf800d1c0>
1000d5f0:	1000bd1e 	bne	r2,zero,1000d8e8 <___vfiprintf_internal_r+0x1328>
1000d5f4:	01400044 	movi	r5,1
1000d5f8:	0009883a 	mov	r4,zero
1000d5fc:	d811883a 	mov	r8,sp
1000d600:	003ef106 	br	1000d1c8 <__alt_data_end+0xf800d1c8>
1000d604:	d9402017 	ldw	r5,128(sp)
1000d608:	d9002117 	ldw	r4,132(sp)
1000d60c:	d9801a04 	addi	r6,sp,104
1000d610:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d614:	103f221e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d618:	d9401b17 	ldw	r5,108(sp)
1000d61c:	d8801c17 	ldw	r2,112(sp)
1000d620:	d811883a 	mov	r8,sp
1000d624:	29400044 	addi	r5,r5,1
1000d628:	003d6206 	br	1000cbb4 <__alt_data_end+0xf800cbb4>
1000d62c:	01440074 	movhi	r5,4097
1000d630:	29532d04 	addi	r5,r5,19636
1000d634:	d9402615 	stw	r5,152(sp)
1000d638:	d8c02215 	stw	r3,136(sp)
1000d63c:	1023883a 	mov	r17,r2
1000d640:	9d04b03a 	or	r2,r19,r20
1000d644:	103fa51e 	bne	r2,zero,1000d4dc <__alt_data_end+0xf800d4dc>
1000d648:	002b883a 	mov	r21,zero
1000d64c:	00800084 	movi	r2,2
1000d650:	003e4a06 	br	1000cf7c <__alt_data_end+0xf800cf7c>
1000d654:	01440074 	movhi	r5,4097
1000d658:	29532d04 	addi	r5,r5,19636
1000d65c:	002b883a 	mov	r21,zero
1000d660:	d9402615 	stw	r5,152(sp)
1000d664:	003f9e06 	br	1000d4e0 <__alt_data_end+0xf800d4e0>
1000d668:	d9402217 	ldw	r5,136(sp)
1000d66c:	d8001d85 	stb	zero,118(sp)
1000d670:	0029883a 	mov	r20,zero
1000d674:	28800104 	addi	r2,r5,4
1000d678:	2cc00017 	ldw	r19,0(r5)
1000d67c:	803e3a16 	blt	r16,zero,1000cf68 <__alt_data_end+0xf800cf68>
1000d680:	00ffdfc4 	movi	r3,-129
1000d684:	d8802215 	stw	r2,136(sp)
1000d688:	88e2703a 	and	r17,r17,r3
1000d68c:	002b883a 	mov	r21,zero
1000d690:	983e9b26 	beq	r19,zero,1000d100 <__alt_data_end+0xf800d100>
1000d694:	00800244 	movi	r2,9
1000d698:	14fdc936 	bltu	r2,r19,1000cdc0 <__alt_data_end+0xf800cdc0>
1000d69c:	003e9a06 	br	1000d108 <__alt_data_end+0xf800d108>
1000d6a0:	00800c04 	movi	r2,48
1000d6a4:	d8c01d45 	stb	r3,117(sp)
1000d6a8:	d8801d05 	stb	r2,116(sp)
1000d6ac:	d8001d85 	stb	zero,118(sp)
1000d6b0:	88c00094 	ori	r3,r17,2
1000d6b4:	80009c16 	blt	r16,zero,1000d928 <___vfiprintf_internal_r+0x1368>
1000d6b8:	00bfdfc4 	movi	r2,-129
1000d6bc:	88a2703a 	and	r17,r17,r2
1000d6c0:	8c400094 	ori	r17,r17,2
1000d6c4:	002b883a 	mov	r21,zero
1000d6c8:	003f8506 	br	1000d4e0 <__alt_data_end+0xf800d4e0>
1000d6cc:	b029883a 	mov	r20,r22
1000d6d0:	003c0b06 	br	1000c700 <__alt_data_end+0xf800c700>
1000d6d4:	04e7c83a 	sub	r19,zero,r19
1000d6d8:	05400b44 	movi	r21,45
1000d6dc:	9804c03a 	cmpne	r2,r19,zero
1000d6e0:	0529c83a 	sub	r20,zero,r20
1000d6e4:	dd401d85 	stb	r21,118(sp)
1000d6e8:	a0a9c83a 	sub	r20,r20,r2
1000d6ec:	80009716 	blt	r16,zero,1000d94c <___vfiprintf_internal_r+0x138c>
1000d6f0:	00bfdfc4 	movi	r2,-129
1000d6f4:	88a2703a 	and	r17,r17,r2
1000d6f8:	003db006 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000d6fc:	b0c00007 	ldb	r3,0(r22)
1000d700:	003c0c06 	br	1000c734 <__alt_data_end+0xf800c734>
1000d704:	8880100c 	andi	r2,r17,64
1000d708:	d8001d85 	stb	zero,118(sp)
1000d70c:	1000461e 	bne	r2,zero,1000d828 <___vfiprintf_internal_r+0x1268>
1000d710:	d9002217 	ldw	r4,136(sp)
1000d714:	0029883a 	mov	r20,zero
1000d718:	20800104 	addi	r2,r4,4
1000d71c:	24c00017 	ldw	r19,0(r4)
1000d720:	803df80e 	bge	r16,zero,1000cf04 <__alt_data_end+0xf800cf04>
1000d724:	9d06b03a 	or	r3,r19,r20
1000d728:	d8802215 	stw	r2,136(sp)
1000d72c:	183d5e1e 	bne	r3,zero,1000cca8 <__alt_data_end+0xf800cca8>
1000d730:	002b883a 	mov	r21,zero
1000d734:	0005883a 	mov	r2,zero
1000d738:	003e1006 	br	1000cf7c <__alt_data_end+0xf800cf7c>
1000d73c:	8880040c 	andi	r2,r17,16
1000d740:	1000321e 	bne	r2,zero,1000d80c <___vfiprintf_internal_r+0x124c>
1000d744:	8c40100c 	andi	r17,r17,64
1000d748:	88008d26 	beq	r17,zero,1000d980 <___vfiprintf_internal_r+0x13c0>
1000d74c:	d9402217 	ldw	r5,136(sp)
1000d750:	d8c02417 	ldw	r3,144(sp)
1000d754:	28800017 	ldw	r2,0(r5)
1000d758:	29400104 	addi	r5,r5,4
1000d75c:	d9402215 	stw	r5,136(sp)
1000d760:	10c0000d 	sth	r3,0(r2)
1000d764:	003bca06 	br	1000c690 <__alt_data_end+0xf800c690>
1000d768:	8880100c 	andi	r2,r17,64
1000d76c:	10003a26 	beq	r2,zero,1000d858 <___vfiprintf_internal_r+0x1298>
1000d770:	d8802217 	ldw	r2,136(sp)
1000d774:	14c0000f 	ldh	r19,0(r2)
1000d778:	10800104 	addi	r2,r2,4
1000d77c:	d8802215 	stw	r2,136(sp)
1000d780:	9829d7fa 	srai	r20,r19,31
1000d784:	a005883a 	mov	r2,r20
1000d788:	003d8506 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000d78c:	8880100c 	andi	r2,r17,64
1000d790:	10002b26 	beq	r2,zero,1000d840 <___vfiprintf_internal_r+0x1280>
1000d794:	d8802217 	ldw	r2,136(sp)
1000d798:	0029883a 	mov	r20,zero
1000d79c:	14c0000b 	ldhu	r19,0(r2)
1000d7a0:	10800104 	addi	r2,r2,4
1000d7a4:	d8802215 	stw	r2,136(sp)
1000d7a8:	003d5d06 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d7ac:	d9402017 	ldw	r5,128(sp)
1000d7b0:	d9002117 	ldw	r4,132(sp)
1000d7b4:	d9801a04 	addi	r6,sp,104
1000d7b8:	d8c02a15 	stw	r3,168(sp)
1000d7bc:	d9c02b15 	stw	r7,172(sp)
1000d7c0:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d7c4:	d8c02a17 	ldw	r3,168(sp)
1000d7c8:	d9c02b17 	ldw	r7,172(sp)
1000d7cc:	103eb41e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d7d0:	d9001b17 	ldw	r4,108(sp)
1000d7d4:	d8801c17 	ldw	r2,112(sp)
1000d7d8:	d811883a 	mov	r8,sp
1000d7dc:	21400044 	addi	r5,r4,1
1000d7e0:	003e6706 	br	1000d180 <__alt_data_end+0xf800d180>
1000d7e4:	00bfffc4 	movi	r2,-1
1000d7e8:	003c4a06 	br	1000c914 <__alt_data_end+0xf800c914>
1000d7ec:	9805883a 	mov	r2,r19
1000d7f0:	003ee806 	br	1000d394 <__alt_data_end+0xf800d394>
1000d7f4:	d8c02217 	ldw	r3,136(sp)
1000d7f8:	0029883a 	mov	r20,zero
1000d7fc:	18800104 	addi	r2,r3,4
1000d800:	1cc0000b 	ldhu	r19,0(r3)
1000d804:	803f9e0e 	bge	r16,zero,1000d680 <__alt_data_end+0xf800d680>
1000d808:	003dd706 	br	1000cf68 <__alt_data_end+0xf800cf68>
1000d80c:	d8c02217 	ldw	r3,136(sp)
1000d810:	d9002417 	ldw	r4,144(sp)
1000d814:	18800017 	ldw	r2,0(r3)
1000d818:	18c00104 	addi	r3,r3,4
1000d81c:	d8c02215 	stw	r3,136(sp)
1000d820:	11000015 	stw	r4,0(r2)
1000d824:	003b9a06 	br	1000c690 <__alt_data_end+0xf800c690>
1000d828:	d8c02217 	ldw	r3,136(sp)
1000d82c:	0029883a 	mov	r20,zero
1000d830:	18800104 	addi	r2,r3,4
1000d834:	1cc0000b 	ldhu	r19,0(r3)
1000d838:	803db20e 	bge	r16,zero,1000cf04 <__alt_data_end+0xf800cf04>
1000d83c:	003fb906 	br	1000d724 <__alt_data_end+0xf800d724>
1000d840:	d9002217 	ldw	r4,136(sp)
1000d844:	0029883a 	mov	r20,zero
1000d848:	24c00017 	ldw	r19,0(r4)
1000d84c:	21000104 	addi	r4,r4,4
1000d850:	d9002215 	stw	r4,136(sp)
1000d854:	003d3206 	br	1000cd20 <__alt_data_end+0xf800cd20>
1000d858:	d8c02217 	ldw	r3,136(sp)
1000d85c:	1cc00017 	ldw	r19,0(r3)
1000d860:	18c00104 	addi	r3,r3,4
1000d864:	d8c02215 	stw	r3,136(sp)
1000d868:	9829d7fa 	srai	r20,r19,31
1000d86c:	a005883a 	mov	r2,r20
1000d870:	003d4b06 	br	1000cda0 <__alt_data_end+0xf800cda0>
1000d874:	0009883a 	mov	r4,zero
1000d878:	01400044 	movi	r5,1
1000d87c:	d811883a 	mov	r8,sp
1000d880:	003e4f06 	br	1000d1c0 <__alt_data_end+0xf800d1c0>
1000d884:	d8c02215 	stw	r3,136(sp)
1000d888:	002b883a 	mov	r21,zero
1000d88c:	003db806 	br	1000cf70 <__alt_data_end+0xf800cf70>
1000d890:	d811883a 	mov	r8,sp
1000d894:	003e9606 	br	1000d2f0 <__alt_data_end+0xf800d2f0>
1000d898:	01040074 	movhi	r4,4097
1000d89c:	21138e04 	addi	r4,r4,20024
1000d8a0:	d9002315 	stw	r4,140(sp)
1000d8a4:	003e6306 	br	1000d234 <__alt_data_end+0xf800d234>
1000d8a8:	b0c00043 	ldbu	r3,1(r22)
1000d8ac:	8c400814 	ori	r17,r17,32
1000d8b0:	b5800044 	addi	r22,r22,1
1000d8b4:	18c03fcc 	andi	r3,r3,255
1000d8b8:	18c0201c 	xori	r3,r3,128
1000d8bc:	18ffe004 	addi	r3,r3,-128
1000d8c0:	003b9c06 	br	1000c734 <__alt_data_end+0xf800c734>
1000d8c4:	b809883a 	mov	r4,r23
1000d8c8:	da002a15 	stw	r8,168(sp)
1000d8cc:	0004d300 	call	10004d30 <strlen>
1000d8d0:	1029883a 	mov	r20,r2
1000d8d4:	dd401d83 	ldbu	r21,118(sp)
1000d8d8:	df002215 	stw	fp,136(sp)
1000d8dc:	0021883a 	mov	r16,zero
1000d8e0:	da002a17 	ldw	r8,168(sp)
1000d8e4:	003c3906 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d8e8:	d9402017 	ldw	r5,128(sp)
1000d8ec:	d9002117 	ldw	r4,132(sp)
1000d8f0:	d9801a04 	addi	r6,sp,104
1000d8f4:	000c4ac0 	call	1000c4ac <__sprint_r.part.0>
1000d8f8:	103e691e 	bne	r2,zero,1000d2a0 <__alt_data_end+0xf800d2a0>
1000d8fc:	d9001b17 	ldw	r4,108(sp)
1000d900:	d8801c17 	ldw	r2,112(sp)
1000d904:	d811883a 	mov	r8,sp
1000d908:	21400044 	addi	r5,r4,1
1000d90c:	003e2e06 	br	1000d1c8 <__alt_data_end+0xf800d1c8>
1000d910:	01040074 	movhi	r4,4097
1000d914:	21139204 	addi	r4,r4,20040
1000d918:	d9002315 	stw	r4,140(sp)
1000d91c:	d9001b17 	ldw	r4,108(sp)
1000d920:	21000044 	addi	r4,r4,1
1000d924:	003c5e06 	br	1000caa0 <__alt_data_end+0xf800caa0>
1000d928:	002b883a 	mov	r21,zero
1000d92c:	00800084 	movi	r2,2
1000d930:	10803fcc 	andi	r2,r2,255
1000d934:	01000044 	movi	r4,1
1000d938:	11002b26 	beq	r2,r4,1000d9e8 <___vfiprintf_internal_r+0x1428>
1000d93c:	01000084 	movi	r4,2
1000d940:	11002b1e 	bne	r2,r4,1000d9f0 <___vfiprintf_internal_r+0x1430>
1000d944:	1823883a 	mov	r17,r3
1000d948:	003ee506 	br	1000d4e0 <__alt_data_end+0xf800d4e0>
1000d94c:	8807883a 	mov	r3,r17
1000d950:	00800044 	movi	r2,1
1000d954:	003ff606 	br	1000d930 <__alt_data_end+0xf800d930>
1000d958:	00800184 	movi	r2,6
1000d95c:	1400012e 	bgeu	r2,r16,1000d964 <___vfiprintf_internal_r+0x13a4>
1000d960:	1021883a 	mov	r16,r2
1000d964:	8029883a 	mov	r20,r16
1000d968:	8027883a 	mov	r19,r16
1000d96c:	80002216 	blt	r16,zero,1000d9f8 <___vfiprintf_internal_r+0x1438>
1000d970:	05c40074 	movhi	r23,4097
1000d974:	df002215 	stw	fp,136(sp)
1000d978:	bdd33204 	addi	r23,r23,19656
1000d97c:	003cfb06 	br	1000cd6c <__alt_data_end+0xf800cd6c>
1000d980:	d9002217 	ldw	r4,136(sp)
1000d984:	d9402417 	ldw	r5,144(sp)
1000d988:	20800017 	ldw	r2,0(r4)
1000d98c:	21000104 	addi	r4,r4,4
1000d990:	d9002215 	stw	r4,136(sp)
1000d994:	11400015 	stw	r5,0(r2)
1000d998:	003b3d06 	br	1000c690 <__alt_data_end+0xf800c690>
1000d99c:	01440074 	movhi	r5,4097
1000d9a0:	29539204 	addi	r5,r5,20040
1000d9a4:	d9402315 	stw	r5,140(sp)
1000d9a8:	d9401b17 	ldw	r5,108(sp)
1000d9ac:	29400044 	addi	r5,r5,1
1000d9b0:	003e6d06 	br	1000d368 <__alt_data_end+0xf800d368>
1000d9b4:	8029883a 	mov	r20,r16
1000d9b8:	dd401d83 	ldbu	r21,118(sp)
1000d9bc:	df002215 	stw	fp,136(sp)
1000d9c0:	0021883a 	mov	r16,zero
1000d9c4:	003c0106 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000d9c8:	00c40074 	movhi	r3,4097
1000d9cc:	18d38e04 	addi	r3,r3,20024
1000d9d0:	d8c02315 	stw	r3,140(sp)
1000d9d4:	280d883a 	mov	r6,r5
1000d9d8:	003c6906 	br	1000cb80 <__alt_data_end+0xf800cb80>
1000d9dc:	802d883a 	mov	r22,r16
1000d9e0:	0021883a 	mov	r16,zero
1000d9e4:	003b5406 	br	1000c738 <__alt_data_end+0xf800c738>
1000d9e8:	1823883a 	mov	r17,r3
1000d9ec:	003cf306 	br	1000cdbc <__alt_data_end+0xf800cdbc>
1000d9f0:	1823883a 	mov	r17,r3
1000d9f4:	003cad06 	br	1000ccac <__alt_data_end+0xf800ccac>
1000d9f8:	0027883a 	mov	r19,zero
1000d9fc:	003fdc06 	br	1000d970 <__alt_data_end+0xf800d970>
1000da00:	d9402217 	ldw	r5,136(sp)
1000da04:	8005883a 	mov	r2,r16
1000da08:	b0c00043 	ldbu	r3,1(r22)
1000da0c:	2c000017 	ldw	r16,0(r5)
1000da10:	29000104 	addi	r4,r5,4
1000da14:	d9002215 	stw	r4,136(sp)
1000da18:	102d883a 	mov	r22,r2
1000da1c:	803fa50e 	bge	r16,zero,1000d8b4 <__alt_data_end+0xf800d8b4>
1000da20:	18c03fcc 	andi	r3,r3,255
1000da24:	18c0201c 	xori	r3,r3,128
1000da28:	043fffc4 	movi	r16,-1
1000da2c:	18ffe004 	addi	r3,r3,-128
1000da30:	003b4006 	br	1000c734 <__alt_data_end+0xf800c734>
1000da34:	d9402303 	ldbu	r5,140(sp)
1000da38:	d9401d85 	stb	r5,118(sp)
1000da3c:	003cae06 	br	1000ccf8 <__alt_data_end+0xf800ccf8>
1000da40:	d8c02303 	ldbu	r3,140(sp)
1000da44:	d8c01d85 	stb	r3,118(sp)
1000da48:	003d1406 	br	1000ce9c <__alt_data_end+0xf800ce9c>
1000da4c:	d8c02303 	ldbu	r3,140(sp)
1000da50:	d8c01d85 	stb	r3,118(sp)
1000da54:	003cca06 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000da58:	8880004c 	andi	r2,r17,1
1000da5c:	002b883a 	mov	r21,zero
1000da60:	10000526 	beq	r2,zero,1000da78 <___vfiprintf_internal_r+0x14b8>
1000da64:	00800c04 	movi	r2,48
1000da68:	d88019c5 	stb	r2,103(sp)
1000da6c:	dd002817 	ldw	r20,160(sp)
1000da70:	ddc019c4 	addi	r23,sp,103
1000da74:	003bd506 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000da78:	0029883a 	mov	r20,zero
1000da7c:	ddc01a04 	addi	r23,sp,104
1000da80:	003bd206 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000da84:	d9002303 	ldbu	r4,140(sp)
1000da88:	d9001d85 	stb	r4,118(sp)
1000da8c:	003da606 	br	1000d128 <__alt_data_end+0xf800d128>
1000da90:	d8c02303 	ldbu	r3,140(sp)
1000da94:	d8c01d85 	stb	r3,118(sp)
1000da98:	003c7606 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000da9c:	d8c02303 	ldbu	r3,140(sp)
1000daa0:	d8c01d85 	stb	r3,118(sp)
1000daa4:	003c6506 	br	1000cc3c <__alt_data_end+0xf800cc3c>
1000daa8:	d9002303 	ldbu	r4,140(sp)
1000daac:	d9001d85 	stb	r4,118(sp)
1000dab0:	003d3d06 	br	1000cfa8 <__alt_data_end+0xf800cfa8>
1000dab4:	d8c02303 	ldbu	r3,140(sp)
1000dab8:	d8c01d85 	stb	r3,118(sp)
1000dabc:	003d1d06 	br	1000cf34 <__alt_data_end+0xf800cf34>
1000dac0:	d8c02303 	ldbu	r3,140(sp)
1000dac4:	d8c01d85 	stb	r3,118(sp)
1000dac8:	003d0306 	br	1000ced8 <__alt_data_end+0xf800ced8>

1000dacc <__vfiprintf_internal>:
1000dacc:	00840074 	movhi	r2,4097
1000dad0:	109e4204 	addi	r2,r2,30984
1000dad4:	300f883a 	mov	r7,r6
1000dad8:	280d883a 	mov	r6,r5
1000dadc:	200b883a 	mov	r5,r4
1000dae0:	11000017 	ldw	r4,0(r2)
1000dae4:	000c5c01 	jmpi	1000c5c0 <___vfiprintf_internal_r>

1000dae8 <__sbprintf>:
1000dae8:	2880030b 	ldhu	r2,12(r5)
1000daec:	2ac01917 	ldw	r11,100(r5)
1000daf0:	2a80038b 	ldhu	r10,14(r5)
1000daf4:	2a400717 	ldw	r9,28(r5)
1000daf8:	2a000917 	ldw	r8,36(r5)
1000dafc:	defee204 	addi	sp,sp,-1144
1000db00:	00c10004 	movi	r3,1024
1000db04:	dc011a15 	stw	r16,1128(sp)
1000db08:	10bfff4c 	andi	r2,r2,65533
1000db0c:	2821883a 	mov	r16,r5
1000db10:	d8cb883a 	add	r5,sp,r3
1000db14:	dc811c15 	stw	r18,1136(sp)
1000db18:	dc411b15 	stw	r17,1132(sp)
1000db1c:	dfc11d15 	stw	ra,1140(sp)
1000db20:	2025883a 	mov	r18,r4
1000db24:	d881030d 	sth	r2,1036(sp)
1000db28:	dac11915 	stw	r11,1124(sp)
1000db2c:	da81038d 	sth	r10,1038(sp)
1000db30:	da410715 	stw	r9,1052(sp)
1000db34:	da010915 	stw	r8,1060(sp)
1000db38:	dec10015 	stw	sp,1024(sp)
1000db3c:	dec10415 	stw	sp,1040(sp)
1000db40:	d8c10215 	stw	r3,1032(sp)
1000db44:	d8c10515 	stw	r3,1044(sp)
1000db48:	d8010615 	stw	zero,1048(sp)
1000db4c:	000c5c00 	call	1000c5c0 <___vfiprintf_internal_r>
1000db50:	1023883a 	mov	r17,r2
1000db54:	10000416 	blt	r2,zero,1000db68 <__sbprintf+0x80>
1000db58:	d9410004 	addi	r5,sp,1024
1000db5c:	9009883a 	mov	r4,r18
1000db60:	0008d9c0 	call	10008d9c <_fflush_r>
1000db64:	10000d1e 	bne	r2,zero,1000db9c <__sbprintf+0xb4>
1000db68:	d881030b 	ldhu	r2,1036(sp)
1000db6c:	1080100c 	andi	r2,r2,64
1000db70:	10000326 	beq	r2,zero,1000db80 <__sbprintf+0x98>
1000db74:	8080030b 	ldhu	r2,12(r16)
1000db78:	10801014 	ori	r2,r2,64
1000db7c:	8080030d 	sth	r2,12(r16)
1000db80:	8805883a 	mov	r2,r17
1000db84:	dfc11d17 	ldw	ra,1140(sp)
1000db88:	dc811c17 	ldw	r18,1136(sp)
1000db8c:	dc411b17 	ldw	r17,1132(sp)
1000db90:	dc011a17 	ldw	r16,1128(sp)
1000db94:	dec11e04 	addi	sp,sp,1144
1000db98:	f800283a 	ret
1000db9c:	047fffc4 	movi	r17,-1
1000dba0:	003ff106 	br	1000db68 <__alt_data_end+0xf800db68>

1000dba4 <_write_r>:
1000dba4:	defffd04 	addi	sp,sp,-12
1000dba8:	2805883a 	mov	r2,r5
1000dbac:	dc000015 	stw	r16,0(sp)
1000dbb0:	040400b4 	movhi	r16,4098
1000dbb4:	dc400115 	stw	r17,4(sp)
1000dbb8:	300b883a 	mov	r5,r6
1000dbbc:	8428ce04 	addi	r16,r16,-23752
1000dbc0:	2023883a 	mov	r17,r4
1000dbc4:	380d883a 	mov	r6,r7
1000dbc8:	1009883a 	mov	r4,r2
1000dbcc:	dfc00215 	stw	ra,8(sp)
1000dbd0:	80000015 	stw	zero,0(r16)
1000dbd4:	00123cc0 	call	100123cc <write>
1000dbd8:	00ffffc4 	movi	r3,-1
1000dbdc:	10c00526 	beq	r2,r3,1000dbf4 <_write_r+0x50>
1000dbe0:	dfc00217 	ldw	ra,8(sp)
1000dbe4:	dc400117 	ldw	r17,4(sp)
1000dbe8:	dc000017 	ldw	r16,0(sp)
1000dbec:	dec00304 	addi	sp,sp,12
1000dbf0:	f800283a 	ret
1000dbf4:	80c00017 	ldw	r3,0(r16)
1000dbf8:	183ff926 	beq	r3,zero,1000dbe0 <__alt_data_end+0xf800dbe0>
1000dbfc:	88c00015 	stw	r3,0(r17)
1000dc00:	003ff706 	br	1000dbe0 <__alt_data_end+0xf800dbe0>

1000dc04 <_close_r>:
1000dc04:	defffd04 	addi	sp,sp,-12
1000dc08:	dc000015 	stw	r16,0(sp)
1000dc0c:	040400b4 	movhi	r16,4098
1000dc10:	dc400115 	stw	r17,4(sp)
1000dc14:	8428ce04 	addi	r16,r16,-23752
1000dc18:	2023883a 	mov	r17,r4
1000dc1c:	2809883a 	mov	r4,r5
1000dc20:	dfc00215 	stw	ra,8(sp)
1000dc24:	80000015 	stw	zero,0(r16)
1000dc28:	0011b440 	call	10011b44 <close>
1000dc2c:	00ffffc4 	movi	r3,-1
1000dc30:	10c00526 	beq	r2,r3,1000dc48 <_close_r+0x44>
1000dc34:	dfc00217 	ldw	ra,8(sp)
1000dc38:	dc400117 	ldw	r17,4(sp)
1000dc3c:	dc000017 	ldw	r16,0(sp)
1000dc40:	dec00304 	addi	sp,sp,12
1000dc44:	f800283a 	ret
1000dc48:	80c00017 	ldw	r3,0(r16)
1000dc4c:	183ff926 	beq	r3,zero,1000dc34 <__alt_data_end+0xf800dc34>
1000dc50:	88c00015 	stw	r3,0(r17)
1000dc54:	003ff706 	br	1000dc34 <__alt_data_end+0xf800dc34>

1000dc58 <_calloc_r>:
1000dc58:	defffe04 	addi	sp,sp,-8
1000dc5c:	2805883a 	mov	r2,r5
1000dc60:	dc000015 	stw	r16,0(sp)
1000dc64:	300b883a 	mov	r5,r6
1000dc68:	2021883a 	mov	r16,r4
1000dc6c:	1009883a 	mov	r4,r2
1000dc70:	dfc00115 	stw	ra,4(sp)
1000dc74:	0004bc80 	call	10004bc8 <__mulsi3>
1000dc78:	100b883a 	mov	r5,r2
1000dc7c:	8009883a 	mov	r4,r16
1000dc80:	0009ef40 	call	10009ef4 <_malloc_r>
1000dc84:	10002926 	beq	r2,zero,1000dd2c <_calloc_r+0xd4>
1000dc88:	11bfff17 	ldw	r6,-4(r2)
1000dc8c:	1021883a 	mov	r16,r2
1000dc90:	00bfff04 	movi	r2,-4
1000dc94:	308c703a 	and	r6,r6,r2
1000dc98:	00c00904 	movi	r3,36
1000dc9c:	308d883a 	add	r6,r6,r2
1000dca0:	19801636 	bltu	r3,r6,1000dcfc <_calloc_r+0xa4>
1000dca4:	008004c4 	movi	r2,19
1000dca8:	11800b2e 	bgeu	r2,r6,1000dcd8 <_calloc_r+0x80>
1000dcac:	80000015 	stw	zero,0(r16)
1000dcb0:	80000115 	stw	zero,4(r16)
1000dcb4:	008006c4 	movi	r2,27
1000dcb8:	11801a2e 	bgeu	r2,r6,1000dd24 <_calloc_r+0xcc>
1000dcbc:	80000215 	stw	zero,8(r16)
1000dcc0:	80000315 	stw	zero,12(r16)
1000dcc4:	30c0151e 	bne	r6,r3,1000dd1c <_calloc_r+0xc4>
1000dcc8:	80000415 	stw	zero,16(r16)
1000dccc:	80800604 	addi	r2,r16,24
1000dcd0:	80000515 	stw	zero,20(r16)
1000dcd4:	00000106 	br	1000dcdc <_calloc_r+0x84>
1000dcd8:	8005883a 	mov	r2,r16
1000dcdc:	10000015 	stw	zero,0(r2)
1000dce0:	10000115 	stw	zero,4(r2)
1000dce4:	10000215 	stw	zero,8(r2)
1000dce8:	8005883a 	mov	r2,r16
1000dcec:	dfc00117 	ldw	ra,4(sp)
1000dcf0:	dc000017 	ldw	r16,0(sp)
1000dcf4:	dec00204 	addi	sp,sp,8
1000dcf8:	f800283a 	ret
1000dcfc:	000b883a 	mov	r5,zero
1000dd00:	8009883a 	mov	r4,r16
1000dd04:	000aa880 	call	1000aa88 <memset>
1000dd08:	8005883a 	mov	r2,r16
1000dd0c:	dfc00117 	ldw	ra,4(sp)
1000dd10:	dc000017 	ldw	r16,0(sp)
1000dd14:	dec00204 	addi	sp,sp,8
1000dd18:	f800283a 	ret
1000dd1c:	80800404 	addi	r2,r16,16
1000dd20:	003fee06 	br	1000dcdc <__alt_data_end+0xf800dcdc>
1000dd24:	80800204 	addi	r2,r16,8
1000dd28:	003fec06 	br	1000dcdc <__alt_data_end+0xf800dcdc>
1000dd2c:	0005883a 	mov	r2,zero
1000dd30:	003fee06 	br	1000dcec <__alt_data_end+0xf800dcec>

1000dd34 <_fclose_r>:
1000dd34:	28003926 	beq	r5,zero,1000de1c <_fclose_r+0xe8>
1000dd38:	defffc04 	addi	sp,sp,-16
1000dd3c:	dc400115 	stw	r17,4(sp)
1000dd40:	dc000015 	stw	r16,0(sp)
1000dd44:	dfc00315 	stw	ra,12(sp)
1000dd48:	dc800215 	stw	r18,8(sp)
1000dd4c:	2023883a 	mov	r17,r4
1000dd50:	2821883a 	mov	r16,r5
1000dd54:	20000226 	beq	r4,zero,1000dd60 <_fclose_r+0x2c>
1000dd58:	20800e17 	ldw	r2,56(r4)
1000dd5c:	10002726 	beq	r2,zero,1000ddfc <_fclose_r+0xc8>
1000dd60:	8080030f 	ldh	r2,12(r16)
1000dd64:	1000071e 	bne	r2,zero,1000dd84 <_fclose_r+0x50>
1000dd68:	0005883a 	mov	r2,zero
1000dd6c:	dfc00317 	ldw	ra,12(sp)
1000dd70:	dc800217 	ldw	r18,8(sp)
1000dd74:	dc400117 	ldw	r17,4(sp)
1000dd78:	dc000017 	ldw	r16,0(sp)
1000dd7c:	dec00404 	addi	sp,sp,16
1000dd80:	f800283a 	ret
1000dd84:	800b883a 	mov	r5,r16
1000dd88:	8809883a 	mov	r4,r17
1000dd8c:	0008b800 	call	10008b80 <__sflush_r>
1000dd90:	1025883a 	mov	r18,r2
1000dd94:	80800b17 	ldw	r2,44(r16)
1000dd98:	10000426 	beq	r2,zero,1000ddac <_fclose_r+0x78>
1000dd9c:	81400717 	ldw	r5,28(r16)
1000dda0:	8809883a 	mov	r4,r17
1000dda4:	103ee83a 	callr	r2
1000dda8:	10001616 	blt	r2,zero,1000de04 <_fclose_r+0xd0>
1000ddac:	8080030b 	ldhu	r2,12(r16)
1000ddb0:	1080200c 	andi	r2,r2,128
1000ddb4:	1000151e 	bne	r2,zero,1000de0c <_fclose_r+0xd8>
1000ddb8:	81400c17 	ldw	r5,48(r16)
1000ddbc:	28000526 	beq	r5,zero,1000ddd4 <_fclose_r+0xa0>
1000ddc0:	80801004 	addi	r2,r16,64
1000ddc4:	28800226 	beq	r5,r2,1000ddd0 <_fclose_r+0x9c>
1000ddc8:	8809883a 	mov	r4,r17
1000ddcc:	00092fc0 	call	100092fc <_free_r>
1000ddd0:	80000c15 	stw	zero,48(r16)
1000ddd4:	81401117 	ldw	r5,68(r16)
1000ddd8:	28000326 	beq	r5,zero,1000dde8 <_fclose_r+0xb4>
1000dddc:	8809883a 	mov	r4,r17
1000dde0:	00092fc0 	call	100092fc <_free_r>
1000dde4:	80001115 	stw	zero,68(r16)
1000dde8:	00091980 	call	10009198 <__sfp_lock_acquire>
1000ddec:	8000030d 	sth	zero,12(r16)
1000ddf0:	000919c0 	call	1000919c <__sfp_lock_release>
1000ddf4:	9005883a 	mov	r2,r18
1000ddf8:	003fdc06 	br	1000dd6c <__alt_data_end+0xf800dd6c>
1000ddfc:	00091880 	call	10009188 <__sinit>
1000de00:	003fd706 	br	1000dd60 <__alt_data_end+0xf800dd60>
1000de04:	04bfffc4 	movi	r18,-1
1000de08:	003fe806 	br	1000ddac <__alt_data_end+0xf800ddac>
1000de0c:	81400417 	ldw	r5,16(r16)
1000de10:	8809883a 	mov	r4,r17
1000de14:	00092fc0 	call	100092fc <_free_r>
1000de18:	003fe706 	br	1000ddb8 <__alt_data_end+0xf800ddb8>
1000de1c:	0005883a 	mov	r2,zero
1000de20:	f800283a 	ret

1000de24 <fclose>:
1000de24:	00840074 	movhi	r2,4097
1000de28:	109e4204 	addi	r2,r2,30984
1000de2c:	200b883a 	mov	r5,r4
1000de30:	11000017 	ldw	r4,0(r2)
1000de34:	000dd341 	jmpi	1000dd34 <_fclose_r>

1000de38 <__fputwc>:
1000de38:	defff804 	addi	sp,sp,-32
1000de3c:	dcc00415 	stw	r19,16(sp)
1000de40:	dc800315 	stw	r18,12(sp)
1000de44:	dc000115 	stw	r16,4(sp)
1000de48:	dfc00715 	stw	ra,28(sp)
1000de4c:	dd400615 	stw	r21,24(sp)
1000de50:	dd000515 	stw	r20,20(sp)
1000de54:	dc400215 	stw	r17,8(sp)
1000de58:	2027883a 	mov	r19,r4
1000de5c:	2825883a 	mov	r18,r5
1000de60:	3021883a 	mov	r16,r6
1000de64:	0009ce40 	call	10009ce4 <__locale_mb_cur_max>
1000de68:	00c00044 	movi	r3,1
1000de6c:	10c03e26 	beq	r2,r3,1000df68 <__fputwc+0x130>
1000de70:	81c01704 	addi	r7,r16,92
1000de74:	900d883a 	mov	r6,r18
1000de78:	d80b883a 	mov	r5,sp
1000de7c:	9809883a 	mov	r4,r19
1000de80:	000e3080 	call	1000e308 <_wcrtomb_r>
1000de84:	1029883a 	mov	r20,r2
1000de88:	00bfffc4 	movi	r2,-1
1000de8c:	a0802026 	beq	r20,r2,1000df10 <__fputwc+0xd8>
1000de90:	d9400003 	ldbu	r5,0(sp)
1000de94:	a0001c26 	beq	r20,zero,1000df08 <__fputwc+0xd0>
1000de98:	0023883a 	mov	r17,zero
1000de9c:	05400284 	movi	r21,10
1000dea0:	00000906 	br	1000dec8 <__fputwc+0x90>
1000dea4:	80800017 	ldw	r2,0(r16)
1000dea8:	11400005 	stb	r5,0(r2)
1000deac:	80c00017 	ldw	r3,0(r16)
1000deb0:	18c00044 	addi	r3,r3,1
1000deb4:	80c00015 	stw	r3,0(r16)
1000deb8:	8c400044 	addi	r17,r17,1
1000debc:	dc45883a 	add	r2,sp,r17
1000dec0:	8d00112e 	bgeu	r17,r20,1000df08 <__fputwc+0xd0>
1000dec4:	11400003 	ldbu	r5,0(r2)
1000dec8:	80c00217 	ldw	r3,8(r16)
1000decc:	18ffffc4 	addi	r3,r3,-1
1000ded0:	80c00215 	stw	r3,8(r16)
1000ded4:	183ff30e 	bge	r3,zero,1000dea4 <__alt_data_end+0xf800dea4>
1000ded8:	80800617 	ldw	r2,24(r16)
1000dedc:	18801916 	blt	r3,r2,1000df44 <__fputwc+0x10c>
1000dee0:	80800017 	ldw	r2,0(r16)
1000dee4:	11400005 	stb	r5,0(r2)
1000dee8:	80800017 	ldw	r2,0(r16)
1000deec:	10c00003 	ldbu	r3,0(r2)
1000def0:	10800044 	addi	r2,r2,1
1000def4:	1d402326 	beq	r3,r21,1000df84 <__fputwc+0x14c>
1000def8:	80800015 	stw	r2,0(r16)
1000defc:	8c400044 	addi	r17,r17,1
1000df00:	dc45883a 	add	r2,sp,r17
1000df04:	8d3fef36 	bltu	r17,r20,1000dec4 <__alt_data_end+0xf800dec4>
1000df08:	9005883a 	mov	r2,r18
1000df0c:	00000406 	br	1000df20 <__fputwc+0xe8>
1000df10:	80c0030b 	ldhu	r3,12(r16)
1000df14:	a005883a 	mov	r2,r20
1000df18:	18c01014 	ori	r3,r3,64
1000df1c:	80c0030d 	sth	r3,12(r16)
1000df20:	dfc00717 	ldw	ra,28(sp)
1000df24:	dd400617 	ldw	r21,24(sp)
1000df28:	dd000517 	ldw	r20,20(sp)
1000df2c:	dcc00417 	ldw	r19,16(sp)
1000df30:	dc800317 	ldw	r18,12(sp)
1000df34:	dc400217 	ldw	r17,8(sp)
1000df38:	dc000117 	ldw	r16,4(sp)
1000df3c:	dec00804 	addi	sp,sp,32
1000df40:	f800283a 	ret
1000df44:	800d883a 	mov	r6,r16
1000df48:	29403fcc 	andi	r5,r5,255
1000df4c:	9809883a 	mov	r4,r19
1000df50:	000e1b00 	call	1000e1b0 <__swbuf_r>
1000df54:	10bfffe0 	cmpeqi	r2,r2,-1
1000df58:	10803fcc 	andi	r2,r2,255
1000df5c:	103fd626 	beq	r2,zero,1000deb8 <__alt_data_end+0xf800deb8>
1000df60:	00bfffc4 	movi	r2,-1
1000df64:	003fee06 	br	1000df20 <__alt_data_end+0xf800df20>
1000df68:	90ffffc4 	addi	r3,r18,-1
1000df6c:	01003f84 	movi	r4,254
1000df70:	20ffbf36 	bltu	r4,r3,1000de70 <__alt_data_end+0xf800de70>
1000df74:	900b883a 	mov	r5,r18
1000df78:	dc800005 	stb	r18,0(sp)
1000df7c:	1029883a 	mov	r20,r2
1000df80:	003fc506 	br	1000de98 <__alt_data_end+0xf800de98>
1000df84:	800d883a 	mov	r6,r16
1000df88:	a80b883a 	mov	r5,r21
1000df8c:	9809883a 	mov	r4,r19
1000df90:	000e1b00 	call	1000e1b0 <__swbuf_r>
1000df94:	10bfffe0 	cmpeqi	r2,r2,-1
1000df98:	003fef06 	br	1000df58 <__alt_data_end+0xf800df58>

1000df9c <_fputwc_r>:
1000df9c:	3080030b 	ldhu	r2,12(r6)
1000dfa0:	10c8000c 	andi	r3,r2,8192
1000dfa4:	1800051e 	bne	r3,zero,1000dfbc <_fputwc_r+0x20>
1000dfa8:	30c01917 	ldw	r3,100(r6)
1000dfac:	10880014 	ori	r2,r2,8192
1000dfb0:	3080030d 	sth	r2,12(r6)
1000dfb4:	18880014 	ori	r2,r3,8192
1000dfb8:	30801915 	stw	r2,100(r6)
1000dfbc:	000de381 	jmpi	1000de38 <__fputwc>

1000dfc0 <fputwc>:
1000dfc0:	00840074 	movhi	r2,4097
1000dfc4:	defffc04 	addi	sp,sp,-16
1000dfc8:	109e4204 	addi	r2,r2,30984
1000dfcc:	dc000115 	stw	r16,4(sp)
1000dfd0:	14000017 	ldw	r16,0(r2)
1000dfd4:	dc400215 	stw	r17,8(sp)
1000dfd8:	dfc00315 	stw	ra,12(sp)
1000dfdc:	2023883a 	mov	r17,r4
1000dfe0:	80000226 	beq	r16,zero,1000dfec <fputwc+0x2c>
1000dfe4:	80800e17 	ldw	r2,56(r16)
1000dfe8:	10001026 	beq	r2,zero,1000e02c <fputwc+0x6c>
1000dfec:	2880030b 	ldhu	r2,12(r5)
1000dff0:	10c8000c 	andi	r3,r2,8192
1000dff4:	1800051e 	bne	r3,zero,1000e00c <fputwc+0x4c>
1000dff8:	28c01917 	ldw	r3,100(r5)
1000dffc:	10880014 	ori	r2,r2,8192
1000e000:	2880030d 	sth	r2,12(r5)
1000e004:	18880014 	ori	r2,r3,8192
1000e008:	28801915 	stw	r2,100(r5)
1000e00c:	280d883a 	mov	r6,r5
1000e010:	8009883a 	mov	r4,r16
1000e014:	880b883a 	mov	r5,r17
1000e018:	dfc00317 	ldw	ra,12(sp)
1000e01c:	dc400217 	ldw	r17,8(sp)
1000e020:	dc000117 	ldw	r16,4(sp)
1000e024:	dec00404 	addi	sp,sp,16
1000e028:	000de381 	jmpi	1000de38 <__fputwc>
1000e02c:	8009883a 	mov	r4,r16
1000e030:	d9400015 	stw	r5,0(sp)
1000e034:	00091880 	call	10009188 <__sinit>
1000e038:	d9400017 	ldw	r5,0(sp)
1000e03c:	003feb06 	br	1000dfec <__alt_data_end+0xf800dfec>

1000e040 <_fstat_r>:
1000e040:	defffd04 	addi	sp,sp,-12
1000e044:	2805883a 	mov	r2,r5
1000e048:	dc000015 	stw	r16,0(sp)
1000e04c:	040400b4 	movhi	r16,4098
1000e050:	dc400115 	stw	r17,4(sp)
1000e054:	8428ce04 	addi	r16,r16,-23752
1000e058:	2023883a 	mov	r17,r4
1000e05c:	300b883a 	mov	r5,r6
1000e060:	1009883a 	mov	r4,r2
1000e064:	dfc00215 	stw	ra,8(sp)
1000e068:	80000015 	stw	zero,0(r16)
1000e06c:	0011c840 	call	10011c84 <fstat>
1000e070:	00ffffc4 	movi	r3,-1
1000e074:	10c00526 	beq	r2,r3,1000e08c <_fstat_r+0x4c>
1000e078:	dfc00217 	ldw	ra,8(sp)
1000e07c:	dc400117 	ldw	r17,4(sp)
1000e080:	dc000017 	ldw	r16,0(sp)
1000e084:	dec00304 	addi	sp,sp,12
1000e088:	f800283a 	ret
1000e08c:	80c00017 	ldw	r3,0(r16)
1000e090:	183ff926 	beq	r3,zero,1000e078 <__alt_data_end+0xf800e078>
1000e094:	88c00015 	stw	r3,0(r17)
1000e098:	003ff706 	br	1000e078 <__alt_data_end+0xf800e078>

1000e09c <_isatty_r>:
1000e09c:	defffd04 	addi	sp,sp,-12
1000e0a0:	dc000015 	stw	r16,0(sp)
1000e0a4:	040400b4 	movhi	r16,4098
1000e0a8:	dc400115 	stw	r17,4(sp)
1000e0ac:	8428ce04 	addi	r16,r16,-23752
1000e0b0:	2023883a 	mov	r17,r4
1000e0b4:	2809883a 	mov	r4,r5
1000e0b8:	dfc00215 	stw	ra,8(sp)
1000e0bc:	80000015 	stw	zero,0(r16)
1000e0c0:	0011d780 	call	10011d78 <isatty>
1000e0c4:	00ffffc4 	movi	r3,-1
1000e0c8:	10c00526 	beq	r2,r3,1000e0e0 <_isatty_r+0x44>
1000e0cc:	dfc00217 	ldw	ra,8(sp)
1000e0d0:	dc400117 	ldw	r17,4(sp)
1000e0d4:	dc000017 	ldw	r16,0(sp)
1000e0d8:	dec00304 	addi	sp,sp,12
1000e0dc:	f800283a 	ret
1000e0e0:	80c00017 	ldw	r3,0(r16)
1000e0e4:	183ff926 	beq	r3,zero,1000e0cc <__alt_data_end+0xf800e0cc>
1000e0e8:	88c00015 	stw	r3,0(r17)
1000e0ec:	003ff706 	br	1000e0cc <__alt_data_end+0xf800e0cc>

1000e0f0 <_lseek_r>:
1000e0f0:	defffd04 	addi	sp,sp,-12
1000e0f4:	2805883a 	mov	r2,r5
1000e0f8:	dc000015 	stw	r16,0(sp)
1000e0fc:	040400b4 	movhi	r16,4098
1000e100:	dc400115 	stw	r17,4(sp)
1000e104:	300b883a 	mov	r5,r6
1000e108:	8428ce04 	addi	r16,r16,-23752
1000e10c:	2023883a 	mov	r17,r4
1000e110:	380d883a 	mov	r6,r7
1000e114:	1009883a 	mov	r4,r2
1000e118:	dfc00215 	stw	ra,8(sp)
1000e11c:	80000015 	stw	zero,0(r16)
1000e120:	0011f4c0 	call	10011f4c <lseek>
1000e124:	00ffffc4 	movi	r3,-1
1000e128:	10c00526 	beq	r2,r3,1000e140 <_lseek_r+0x50>
1000e12c:	dfc00217 	ldw	ra,8(sp)
1000e130:	dc400117 	ldw	r17,4(sp)
1000e134:	dc000017 	ldw	r16,0(sp)
1000e138:	dec00304 	addi	sp,sp,12
1000e13c:	f800283a 	ret
1000e140:	80c00017 	ldw	r3,0(r16)
1000e144:	183ff926 	beq	r3,zero,1000e12c <__alt_data_end+0xf800e12c>
1000e148:	88c00015 	stw	r3,0(r17)
1000e14c:	003ff706 	br	1000e12c <__alt_data_end+0xf800e12c>

1000e150 <_read_r>:
1000e150:	defffd04 	addi	sp,sp,-12
1000e154:	2805883a 	mov	r2,r5
1000e158:	dc000015 	stw	r16,0(sp)
1000e15c:	040400b4 	movhi	r16,4098
1000e160:	dc400115 	stw	r17,4(sp)
1000e164:	300b883a 	mov	r5,r6
1000e168:	8428ce04 	addi	r16,r16,-23752
1000e16c:	2023883a 	mov	r17,r4
1000e170:	380d883a 	mov	r6,r7
1000e174:	1009883a 	mov	r4,r2
1000e178:	dfc00215 	stw	ra,8(sp)
1000e17c:	80000015 	stw	zero,0(r16)
1000e180:	00121280 	call	10012128 <read>
1000e184:	00ffffc4 	movi	r3,-1
1000e188:	10c00526 	beq	r2,r3,1000e1a0 <_read_r+0x50>
1000e18c:	dfc00217 	ldw	ra,8(sp)
1000e190:	dc400117 	ldw	r17,4(sp)
1000e194:	dc000017 	ldw	r16,0(sp)
1000e198:	dec00304 	addi	sp,sp,12
1000e19c:	f800283a 	ret
1000e1a0:	80c00017 	ldw	r3,0(r16)
1000e1a4:	183ff926 	beq	r3,zero,1000e18c <__alt_data_end+0xf800e18c>
1000e1a8:	88c00015 	stw	r3,0(r17)
1000e1ac:	003ff706 	br	1000e18c <__alt_data_end+0xf800e18c>

1000e1b0 <__swbuf_r>:
1000e1b0:	defffb04 	addi	sp,sp,-20
1000e1b4:	dcc00315 	stw	r19,12(sp)
1000e1b8:	dc800215 	stw	r18,8(sp)
1000e1bc:	dc000015 	stw	r16,0(sp)
1000e1c0:	dfc00415 	stw	ra,16(sp)
1000e1c4:	dc400115 	stw	r17,4(sp)
1000e1c8:	2025883a 	mov	r18,r4
1000e1cc:	2827883a 	mov	r19,r5
1000e1d0:	3021883a 	mov	r16,r6
1000e1d4:	20000226 	beq	r4,zero,1000e1e0 <__swbuf_r+0x30>
1000e1d8:	20800e17 	ldw	r2,56(r4)
1000e1dc:	10004226 	beq	r2,zero,1000e2e8 <__swbuf_r+0x138>
1000e1e0:	80800617 	ldw	r2,24(r16)
1000e1e4:	8100030b 	ldhu	r4,12(r16)
1000e1e8:	80800215 	stw	r2,8(r16)
1000e1ec:	2080020c 	andi	r2,r4,8
1000e1f0:	10003626 	beq	r2,zero,1000e2cc <__swbuf_r+0x11c>
1000e1f4:	80c00417 	ldw	r3,16(r16)
1000e1f8:	18003426 	beq	r3,zero,1000e2cc <__swbuf_r+0x11c>
1000e1fc:	2088000c 	andi	r2,r4,8192
1000e200:	9c403fcc 	andi	r17,r19,255
1000e204:	10001a26 	beq	r2,zero,1000e270 <__swbuf_r+0xc0>
1000e208:	80800017 	ldw	r2,0(r16)
1000e20c:	81000517 	ldw	r4,20(r16)
1000e210:	10c7c83a 	sub	r3,r2,r3
1000e214:	1900200e 	bge	r3,r4,1000e298 <__swbuf_r+0xe8>
1000e218:	18c00044 	addi	r3,r3,1
1000e21c:	81000217 	ldw	r4,8(r16)
1000e220:	11400044 	addi	r5,r2,1
1000e224:	81400015 	stw	r5,0(r16)
1000e228:	213fffc4 	addi	r4,r4,-1
1000e22c:	81000215 	stw	r4,8(r16)
1000e230:	14c00005 	stb	r19,0(r2)
1000e234:	80800517 	ldw	r2,20(r16)
1000e238:	10c01e26 	beq	r2,r3,1000e2b4 <__swbuf_r+0x104>
1000e23c:	8080030b 	ldhu	r2,12(r16)
1000e240:	1080004c 	andi	r2,r2,1
1000e244:	10000226 	beq	r2,zero,1000e250 <__swbuf_r+0xa0>
1000e248:	00800284 	movi	r2,10
1000e24c:	88801926 	beq	r17,r2,1000e2b4 <__swbuf_r+0x104>
1000e250:	8805883a 	mov	r2,r17
1000e254:	dfc00417 	ldw	ra,16(sp)
1000e258:	dcc00317 	ldw	r19,12(sp)
1000e25c:	dc800217 	ldw	r18,8(sp)
1000e260:	dc400117 	ldw	r17,4(sp)
1000e264:	dc000017 	ldw	r16,0(sp)
1000e268:	dec00504 	addi	sp,sp,20
1000e26c:	f800283a 	ret
1000e270:	81401917 	ldw	r5,100(r16)
1000e274:	00b7ffc4 	movi	r2,-8193
1000e278:	21080014 	ori	r4,r4,8192
1000e27c:	2884703a 	and	r2,r5,r2
1000e280:	80801915 	stw	r2,100(r16)
1000e284:	80800017 	ldw	r2,0(r16)
1000e288:	8100030d 	sth	r4,12(r16)
1000e28c:	81000517 	ldw	r4,20(r16)
1000e290:	10c7c83a 	sub	r3,r2,r3
1000e294:	193fe016 	blt	r3,r4,1000e218 <__alt_data_end+0xf800e218>
1000e298:	800b883a 	mov	r5,r16
1000e29c:	9009883a 	mov	r4,r18
1000e2a0:	0008d9c0 	call	10008d9c <_fflush_r>
1000e2a4:	1000071e 	bne	r2,zero,1000e2c4 <__swbuf_r+0x114>
1000e2a8:	80800017 	ldw	r2,0(r16)
1000e2ac:	00c00044 	movi	r3,1
1000e2b0:	003fda06 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e2b4:	800b883a 	mov	r5,r16
1000e2b8:	9009883a 	mov	r4,r18
1000e2bc:	0008d9c0 	call	10008d9c <_fflush_r>
1000e2c0:	103fe326 	beq	r2,zero,1000e250 <__alt_data_end+0xf800e250>
1000e2c4:	00bfffc4 	movi	r2,-1
1000e2c8:	003fe206 	br	1000e254 <__alt_data_end+0xf800e254>
1000e2cc:	800b883a 	mov	r5,r16
1000e2d0:	9009883a 	mov	r4,r18
1000e2d4:	000717c0 	call	1000717c <__swsetup_r>
1000e2d8:	103ffa1e 	bne	r2,zero,1000e2c4 <__alt_data_end+0xf800e2c4>
1000e2dc:	8100030b 	ldhu	r4,12(r16)
1000e2e0:	80c00417 	ldw	r3,16(r16)
1000e2e4:	003fc506 	br	1000e1fc <__alt_data_end+0xf800e1fc>
1000e2e8:	00091880 	call	10009188 <__sinit>
1000e2ec:	003fbc06 	br	1000e1e0 <__alt_data_end+0xf800e1e0>

1000e2f0 <__swbuf>:
1000e2f0:	00840074 	movhi	r2,4097
1000e2f4:	109e4204 	addi	r2,r2,30984
1000e2f8:	280d883a 	mov	r6,r5
1000e2fc:	200b883a 	mov	r5,r4
1000e300:	11000017 	ldw	r4,0(r2)
1000e304:	000e1b01 	jmpi	1000e1b0 <__swbuf_r>

1000e308 <_wcrtomb_r>:
1000e308:	defff604 	addi	sp,sp,-40
1000e30c:	00840074 	movhi	r2,4097
1000e310:	dc800815 	stw	r18,32(sp)
1000e314:	dc400715 	stw	r17,28(sp)
1000e318:	dc000615 	stw	r16,24(sp)
1000e31c:	109e4604 	addi	r2,r2,31000
1000e320:	dfc00915 	stw	ra,36(sp)
1000e324:	2021883a 	mov	r16,r4
1000e328:	3823883a 	mov	r17,r7
1000e32c:	14800017 	ldw	r18,0(r2)
1000e330:	28001426 	beq	r5,zero,1000e384 <_wcrtomb_r+0x7c>
1000e334:	d9400415 	stw	r5,16(sp)
1000e338:	d9800515 	stw	r6,20(sp)
1000e33c:	0009cd80 	call	10009cd8 <__locale_charset>
1000e340:	d9800517 	ldw	r6,20(sp)
1000e344:	d9400417 	ldw	r5,16(sp)
1000e348:	100f883a 	mov	r7,r2
1000e34c:	dc400015 	stw	r17,0(sp)
1000e350:	8009883a 	mov	r4,r16
1000e354:	903ee83a 	callr	r18
1000e358:	00ffffc4 	movi	r3,-1
1000e35c:	10c0031e 	bne	r2,r3,1000e36c <_wcrtomb_r+0x64>
1000e360:	88000015 	stw	zero,0(r17)
1000e364:	00c02284 	movi	r3,138
1000e368:	80c00015 	stw	r3,0(r16)
1000e36c:	dfc00917 	ldw	ra,36(sp)
1000e370:	dc800817 	ldw	r18,32(sp)
1000e374:	dc400717 	ldw	r17,28(sp)
1000e378:	dc000617 	ldw	r16,24(sp)
1000e37c:	dec00a04 	addi	sp,sp,40
1000e380:	f800283a 	ret
1000e384:	0009cd80 	call	10009cd8 <__locale_charset>
1000e388:	100f883a 	mov	r7,r2
1000e38c:	dc400015 	stw	r17,0(sp)
1000e390:	000d883a 	mov	r6,zero
1000e394:	d9400104 	addi	r5,sp,4
1000e398:	8009883a 	mov	r4,r16
1000e39c:	903ee83a 	callr	r18
1000e3a0:	003fed06 	br	1000e358 <__alt_data_end+0xf800e358>

1000e3a4 <wcrtomb>:
1000e3a4:	defff604 	addi	sp,sp,-40
1000e3a8:	00840074 	movhi	r2,4097
1000e3ac:	dc800615 	stw	r18,24(sp)
1000e3b0:	dc400515 	stw	r17,20(sp)
1000e3b4:	109e4204 	addi	r2,r2,30984
1000e3b8:	dfc00915 	stw	ra,36(sp)
1000e3bc:	dd000815 	stw	r20,32(sp)
1000e3c0:	dcc00715 	stw	r19,28(sp)
1000e3c4:	dc000415 	stw	r16,16(sp)
1000e3c8:	3025883a 	mov	r18,r6
1000e3cc:	14400017 	ldw	r17,0(r2)
1000e3d0:	20001926 	beq	r4,zero,1000e438 <wcrtomb+0x94>
1000e3d4:	00840074 	movhi	r2,4097
1000e3d8:	109e4604 	addi	r2,r2,31000
1000e3dc:	15000017 	ldw	r20,0(r2)
1000e3e0:	2021883a 	mov	r16,r4
1000e3e4:	2827883a 	mov	r19,r5
1000e3e8:	0009cd80 	call	10009cd8 <__locale_charset>
1000e3ec:	100f883a 	mov	r7,r2
1000e3f0:	dc800015 	stw	r18,0(sp)
1000e3f4:	980d883a 	mov	r6,r19
1000e3f8:	800b883a 	mov	r5,r16
1000e3fc:	8809883a 	mov	r4,r17
1000e400:	a03ee83a 	callr	r20
1000e404:	00ffffc4 	movi	r3,-1
1000e408:	10c0031e 	bne	r2,r3,1000e418 <wcrtomb+0x74>
1000e40c:	90000015 	stw	zero,0(r18)
1000e410:	00c02284 	movi	r3,138
1000e414:	88c00015 	stw	r3,0(r17)
1000e418:	dfc00917 	ldw	ra,36(sp)
1000e41c:	dd000817 	ldw	r20,32(sp)
1000e420:	dcc00717 	ldw	r19,28(sp)
1000e424:	dc800617 	ldw	r18,24(sp)
1000e428:	dc400517 	ldw	r17,20(sp)
1000e42c:	dc000417 	ldw	r16,16(sp)
1000e430:	dec00a04 	addi	sp,sp,40
1000e434:	f800283a 	ret
1000e438:	00840074 	movhi	r2,4097
1000e43c:	109e4604 	addi	r2,r2,31000
1000e440:	14000017 	ldw	r16,0(r2)
1000e444:	0009cd80 	call	10009cd8 <__locale_charset>
1000e448:	100f883a 	mov	r7,r2
1000e44c:	dc800015 	stw	r18,0(sp)
1000e450:	000d883a 	mov	r6,zero
1000e454:	d9400104 	addi	r5,sp,4
1000e458:	8809883a 	mov	r4,r17
1000e45c:	803ee83a 	callr	r16
1000e460:	003fe806 	br	1000e404 <__alt_data_end+0xf800e404>

1000e464 <__ascii_wctomb>:
1000e464:	28000526 	beq	r5,zero,1000e47c <__ascii_wctomb+0x18>
1000e468:	00803fc4 	movi	r2,255
1000e46c:	11800536 	bltu	r2,r6,1000e484 <__ascii_wctomb+0x20>
1000e470:	29800005 	stb	r6,0(r5)
1000e474:	00800044 	movi	r2,1
1000e478:	f800283a 	ret
1000e47c:	0005883a 	mov	r2,zero
1000e480:	f800283a 	ret
1000e484:	00802284 	movi	r2,138
1000e488:	20800015 	stw	r2,0(r4)
1000e48c:	00bfffc4 	movi	r2,-1
1000e490:	f800283a 	ret

1000e494 <_wctomb_r>:
1000e494:	00840074 	movhi	r2,4097
1000e498:	defff904 	addi	sp,sp,-28
1000e49c:	109e4604 	addi	r2,r2,31000
1000e4a0:	dfc00615 	stw	ra,24(sp)
1000e4a4:	dc400515 	stw	r17,20(sp)
1000e4a8:	dc000415 	stw	r16,16(sp)
1000e4ac:	3823883a 	mov	r17,r7
1000e4b0:	14000017 	ldw	r16,0(r2)
1000e4b4:	d9000115 	stw	r4,4(sp)
1000e4b8:	d9400215 	stw	r5,8(sp)
1000e4bc:	d9800315 	stw	r6,12(sp)
1000e4c0:	0009cd80 	call	10009cd8 <__locale_charset>
1000e4c4:	d9800317 	ldw	r6,12(sp)
1000e4c8:	d9400217 	ldw	r5,8(sp)
1000e4cc:	d9000117 	ldw	r4,4(sp)
1000e4d0:	100f883a 	mov	r7,r2
1000e4d4:	dc400015 	stw	r17,0(sp)
1000e4d8:	803ee83a 	callr	r16
1000e4dc:	dfc00617 	ldw	ra,24(sp)
1000e4e0:	dc400517 	ldw	r17,20(sp)
1000e4e4:	dc000417 	ldw	r16,16(sp)
1000e4e8:	dec00704 	addi	sp,sp,28
1000e4ec:	f800283a 	ret

1000e4f0 <__udivdi3>:
1000e4f0:	defff404 	addi	sp,sp,-48
1000e4f4:	dcc00515 	stw	r19,20(sp)
1000e4f8:	dc000215 	stw	r16,8(sp)
1000e4fc:	dfc00b15 	stw	ra,44(sp)
1000e500:	df000a15 	stw	fp,40(sp)
1000e504:	ddc00915 	stw	r23,36(sp)
1000e508:	dd800815 	stw	r22,32(sp)
1000e50c:	dd400715 	stw	r21,28(sp)
1000e510:	dd000615 	stw	r20,24(sp)
1000e514:	dc800415 	stw	r18,16(sp)
1000e518:	dc400315 	stw	r17,12(sp)
1000e51c:	2027883a 	mov	r19,r4
1000e520:	2821883a 	mov	r16,r5
1000e524:	3800461e 	bne	r7,zero,1000e640 <__udivdi3+0x150>
1000e528:	3023883a 	mov	r17,r6
1000e52c:	2025883a 	mov	r18,r4
1000e530:	2980572e 	bgeu	r5,r6,1000e690 <__udivdi3+0x1a0>
1000e534:	00bfffd4 	movui	r2,65535
1000e538:	282d883a 	mov	r22,r5
1000e53c:	1180b236 	bltu	r2,r6,1000e808 <__udivdi3+0x318>
1000e540:	00803fc4 	movi	r2,255
1000e544:	1185803a 	cmpltu	r2,r2,r6
1000e548:	100490fa 	slli	r2,r2,3
1000e54c:	3086d83a 	srl	r3,r6,r2
1000e550:	01040074 	movhi	r4,4097
1000e554:	21139604 	addi	r4,r4,20056
1000e558:	20c7883a 	add	r3,r4,r3
1000e55c:	18c00003 	ldbu	r3,0(r3)
1000e560:	1885883a 	add	r2,r3,r2
1000e564:	00c00804 	movi	r3,32
1000e568:	1887c83a 	sub	r3,r3,r2
1000e56c:	18000526 	beq	r3,zero,1000e584 <__udivdi3+0x94>
1000e570:	80e0983a 	sll	r16,r16,r3
1000e574:	9884d83a 	srl	r2,r19,r2
1000e578:	30e2983a 	sll	r17,r6,r3
1000e57c:	98e4983a 	sll	r18,r19,r3
1000e580:	142cb03a 	or	r22,r2,r16
1000e584:	882ad43a 	srli	r21,r17,16
1000e588:	b009883a 	mov	r4,r22
1000e58c:	8d3fffcc 	andi	r20,r17,65535
1000e590:	a80b883a 	mov	r5,r21
1000e594:	000f20c0 	call	1000f20c <__umodsi3>
1000e598:	b009883a 	mov	r4,r22
1000e59c:	a80b883a 	mov	r5,r21
1000e5a0:	1027883a 	mov	r19,r2
1000e5a4:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e5a8:	100b883a 	mov	r5,r2
1000e5ac:	a009883a 	mov	r4,r20
1000e5b0:	102d883a 	mov	r22,r2
1000e5b4:	0004bc80 	call	10004bc8 <__mulsi3>
1000e5b8:	9826943a 	slli	r19,r19,16
1000e5bc:	9006d43a 	srli	r3,r18,16
1000e5c0:	1cc6b03a 	or	r3,r3,r19
1000e5c4:	1880052e 	bgeu	r3,r2,1000e5dc <__udivdi3+0xec>
1000e5c8:	1c47883a 	add	r3,r3,r17
1000e5cc:	b13fffc4 	addi	r4,r22,-1
1000e5d0:	1c400136 	bltu	r3,r17,1000e5d8 <__udivdi3+0xe8>
1000e5d4:	18814236 	bltu	r3,r2,1000eae0 <__udivdi3+0x5f0>
1000e5d8:	202d883a 	mov	r22,r4
1000e5dc:	18a1c83a 	sub	r16,r3,r2
1000e5e0:	8009883a 	mov	r4,r16
1000e5e4:	a80b883a 	mov	r5,r21
1000e5e8:	000f20c0 	call	1000f20c <__umodsi3>
1000e5ec:	1027883a 	mov	r19,r2
1000e5f0:	8009883a 	mov	r4,r16
1000e5f4:	a80b883a 	mov	r5,r21
1000e5f8:	9826943a 	slli	r19,r19,16
1000e5fc:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e600:	100b883a 	mov	r5,r2
1000e604:	a009883a 	mov	r4,r20
1000e608:	94bfffcc 	andi	r18,r18,65535
1000e60c:	1021883a 	mov	r16,r2
1000e610:	94e4b03a 	or	r18,r18,r19
1000e614:	0004bc80 	call	10004bc8 <__mulsi3>
1000e618:	9080052e 	bgeu	r18,r2,1000e630 <__udivdi3+0x140>
1000e61c:	8ca5883a 	add	r18,r17,r18
1000e620:	80ffffc4 	addi	r3,r16,-1
1000e624:	94410c36 	bltu	r18,r17,1000ea58 <__udivdi3+0x568>
1000e628:	90810b2e 	bgeu	r18,r2,1000ea58 <__udivdi3+0x568>
1000e62c:	843fff84 	addi	r16,r16,-2
1000e630:	b004943a 	slli	r2,r22,16
1000e634:	0007883a 	mov	r3,zero
1000e638:	1404b03a 	or	r2,r2,r16
1000e63c:	00005e06 	br	1000e7b8 <__udivdi3+0x2c8>
1000e640:	29c05b36 	bltu	r5,r7,1000e7b0 <__udivdi3+0x2c0>
1000e644:	00bfffd4 	movui	r2,65535
1000e648:	11c0672e 	bgeu	r2,r7,1000e7e8 <__udivdi3+0x2f8>
1000e64c:	00804034 	movhi	r2,256
1000e650:	10bfffc4 	addi	r2,r2,-1
1000e654:	11c10a36 	bltu	r2,r7,1000ea80 <__udivdi3+0x590>
1000e658:	00800404 	movi	r2,16
1000e65c:	3886d83a 	srl	r3,r7,r2
1000e660:	01040074 	movhi	r4,4097
1000e664:	21139604 	addi	r4,r4,20056
1000e668:	20c7883a 	add	r3,r4,r3
1000e66c:	18c00003 	ldbu	r3,0(r3)
1000e670:	05c00804 	movi	r23,32
1000e674:	1885883a 	add	r2,r3,r2
1000e678:	b8afc83a 	sub	r23,r23,r2
1000e67c:	b800671e 	bne	r23,zero,1000e81c <__udivdi3+0x32c>
1000e680:	3c010536 	bltu	r7,r16,1000ea98 <__udivdi3+0x5a8>
1000e684:	9985403a 	cmpgeu	r2,r19,r6
1000e688:	0007883a 	mov	r3,zero
1000e68c:	00004a06 	br	1000e7b8 <__udivdi3+0x2c8>
1000e690:	3000041e 	bne	r6,zero,1000e6a4 <__udivdi3+0x1b4>
1000e694:	000b883a 	mov	r5,zero
1000e698:	01000044 	movi	r4,1
1000e69c:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e6a0:	1023883a 	mov	r17,r2
1000e6a4:	00bfffd4 	movui	r2,65535
1000e6a8:	1440532e 	bgeu	r2,r17,1000e7f8 <__udivdi3+0x308>
1000e6ac:	00804034 	movhi	r2,256
1000e6b0:	10bfffc4 	addi	r2,r2,-1
1000e6b4:	1440f436 	bltu	r2,r17,1000ea88 <__udivdi3+0x598>
1000e6b8:	00800404 	movi	r2,16
1000e6bc:	8886d83a 	srl	r3,r17,r2
1000e6c0:	01040074 	movhi	r4,4097
1000e6c4:	21139604 	addi	r4,r4,20056
1000e6c8:	20c7883a 	add	r3,r4,r3
1000e6cc:	18c00003 	ldbu	r3,0(r3)
1000e6d0:	1885883a 	add	r2,r3,r2
1000e6d4:	00c00804 	movi	r3,32
1000e6d8:	1887c83a 	sub	r3,r3,r2
1000e6dc:	1800a51e 	bne	r3,zero,1000e974 <__udivdi3+0x484>
1000e6e0:	882ad43a 	srli	r21,r17,16
1000e6e4:	8461c83a 	sub	r16,r16,r17
1000e6e8:	8d3fffcc 	andi	r20,r17,65535
1000e6ec:	00c00044 	movi	r3,1
1000e6f0:	a80b883a 	mov	r5,r21
1000e6f4:	8009883a 	mov	r4,r16
1000e6f8:	d8c00115 	stw	r3,4(sp)
1000e6fc:	000f20c0 	call	1000f20c <__umodsi3>
1000e700:	a80b883a 	mov	r5,r21
1000e704:	8009883a 	mov	r4,r16
1000e708:	1027883a 	mov	r19,r2
1000e70c:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e710:	a00b883a 	mov	r5,r20
1000e714:	1009883a 	mov	r4,r2
1000e718:	102d883a 	mov	r22,r2
1000e71c:	0004bc80 	call	10004bc8 <__mulsi3>
1000e720:	9826943a 	slli	r19,r19,16
1000e724:	900ed43a 	srli	r7,r18,16
1000e728:	d8c00117 	ldw	r3,4(sp)
1000e72c:	3cceb03a 	or	r7,r7,r19
1000e730:	3880052e 	bgeu	r7,r2,1000e748 <__udivdi3+0x258>
1000e734:	3c4f883a 	add	r7,r7,r17
1000e738:	b13fffc4 	addi	r4,r22,-1
1000e73c:	3c400136 	bltu	r7,r17,1000e744 <__udivdi3+0x254>
1000e740:	3880e436 	bltu	r7,r2,1000ead4 <__udivdi3+0x5e4>
1000e744:	202d883a 	mov	r22,r4
1000e748:	38a1c83a 	sub	r16,r7,r2
1000e74c:	8009883a 	mov	r4,r16
1000e750:	a80b883a 	mov	r5,r21
1000e754:	d8c00115 	stw	r3,4(sp)
1000e758:	000f20c0 	call	1000f20c <__umodsi3>
1000e75c:	1027883a 	mov	r19,r2
1000e760:	8009883a 	mov	r4,r16
1000e764:	a80b883a 	mov	r5,r21
1000e768:	9826943a 	slli	r19,r19,16
1000e76c:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e770:	a00b883a 	mov	r5,r20
1000e774:	1009883a 	mov	r4,r2
1000e778:	94bfffcc 	andi	r18,r18,65535
1000e77c:	1021883a 	mov	r16,r2
1000e780:	94e4b03a 	or	r18,r18,r19
1000e784:	0004bc80 	call	10004bc8 <__mulsi3>
1000e788:	d8c00117 	ldw	r3,4(sp)
1000e78c:	9080052e 	bgeu	r18,r2,1000e7a4 <__udivdi3+0x2b4>
1000e790:	8ca5883a 	add	r18,r17,r18
1000e794:	813fffc4 	addi	r4,r16,-1
1000e798:	9440ad36 	bltu	r18,r17,1000ea50 <__udivdi3+0x560>
1000e79c:	9080ac2e 	bgeu	r18,r2,1000ea50 <__udivdi3+0x560>
1000e7a0:	843fff84 	addi	r16,r16,-2
1000e7a4:	b004943a 	slli	r2,r22,16
1000e7a8:	1404b03a 	or	r2,r2,r16
1000e7ac:	00000206 	br	1000e7b8 <__udivdi3+0x2c8>
1000e7b0:	0007883a 	mov	r3,zero
1000e7b4:	0005883a 	mov	r2,zero
1000e7b8:	dfc00b17 	ldw	ra,44(sp)
1000e7bc:	df000a17 	ldw	fp,40(sp)
1000e7c0:	ddc00917 	ldw	r23,36(sp)
1000e7c4:	dd800817 	ldw	r22,32(sp)
1000e7c8:	dd400717 	ldw	r21,28(sp)
1000e7cc:	dd000617 	ldw	r20,24(sp)
1000e7d0:	dcc00517 	ldw	r19,20(sp)
1000e7d4:	dc800417 	ldw	r18,16(sp)
1000e7d8:	dc400317 	ldw	r17,12(sp)
1000e7dc:	dc000217 	ldw	r16,8(sp)
1000e7e0:	dec00c04 	addi	sp,sp,48
1000e7e4:	f800283a 	ret
1000e7e8:	00803fc4 	movi	r2,255
1000e7ec:	11c5803a 	cmpltu	r2,r2,r7
1000e7f0:	100490fa 	slli	r2,r2,3
1000e7f4:	003f9906 	br	1000e65c <__alt_data_end+0xf800e65c>
1000e7f8:	00803fc4 	movi	r2,255
1000e7fc:	1445803a 	cmpltu	r2,r2,r17
1000e800:	100490fa 	slli	r2,r2,3
1000e804:	003fad06 	br	1000e6bc <__alt_data_end+0xf800e6bc>
1000e808:	00804034 	movhi	r2,256
1000e80c:	10bfffc4 	addi	r2,r2,-1
1000e810:	11809f36 	bltu	r2,r6,1000ea90 <__udivdi3+0x5a0>
1000e814:	00800404 	movi	r2,16
1000e818:	003f4c06 	br	1000e54c <__alt_data_end+0xf800e54c>
1000e81c:	3dce983a 	sll	r7,r7,r23
1000e820:	30b8d83a 	srl	fp,r6,r2
1000e824:	80a2d83a 	srl	r17,r16,r2
1000e828:	35cc983a 	sll	r6,r6,r23
1000e82c:	3f38b03a 	or	fp,r7,fp
1000e830:	e024d43a 	srli	r18,fp,16
1000e834:	9884d83a 	srl	r2,r19,r2
1000e838:	85e0983a 	sll	r16,r16,r23
1000e83c:	8809883a 	mov	r4,r17
1000e840:	900b883a 	mov	r5,r18
1000e844:	d9800015 	stw	r6,0(sp)
1000e848:	1420b03a 	or	r16,r2,r16
1000e84c:	000f20c0 	call	1000f20c <__umodsi3>
1000e850:	900b883a 	mov	r5,r18
1000e854:	8809883a 	mov	r4,r17
1000e858:	1029883a 	mov	r20,r2
1000e85c:	e5bfffcc 	andi	r22,fp,65535
1000e860:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e864:	100b883a 	mov	r5,r2
1000e868:	b009883a 	mov	r4,r22
1000e86c:	102b883a 	mov	r21,r2
1000e870:	0004bc80 	call	10004bc8 <__mulsi3>
1000e874:	a028943a 	slli	r20,r20,16
1000e878:	8006d43a 	srli	r3,r16,16
1000e87c:	1d06b03a 	or	r3,r3,r20
1000e880:	1880042e 	bgeu	r3,r2,1000e894 <__udivdi3+0x3a4>
1000e884:	1f07883a 	add	r3,r3,fp
1000e888:	a93fffc4 	addi	r4,r21,-1
1000e88c:	1f00892e 	bgeu	r3,fp,1000eab4 <__udivdi3+0x5c4>
1000e890:	202b883a 	mov	r21,r4
1000e894:	18a3c83a 	sub	r17,r3,r2
1000e898:	8809883a 	mov	r4,r17
1000e89c:	900b883a 	mov	r5,r18
1000e8a0:	000f20c0 	call	1000f20c <__umodsi3>
1000e8a4:	1029883a 	mov	r20,r2
1000e8a8:	8809883a 	mov	r4,r17
1000e8ac:	900b883a 	mov	r5,r18
1000e8b0:	a028943a 	slli	r20,r20,16
1000e8b4:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e8b8:	100b883a 	mov	r5,r2
1000e8bc:	b009883a 	mov	r4,r22
1000e8c0:	843fffcc 	andi	r16,r16,65535
1000e8c4:	1023883a 	mov	r17,r2
1000e8c8:	8520b03a 	or	r16,r16,r20
1000e8cc:	0004bc80 	call	10004bc8 <__mulsi3>
1000e8d0:	8080042e 	bgeu	r16,r2,1000e8e4 <__udivdi3+0x3f4>
1000e8d4:	8721883a 	add	r16,r16,fp
1000e8d8:	88ffffc4 	addi	r3,r17,-1
1000e8dc:	8700712e 	bgeu	r16,fp,1000eaa4 <__udivdi3+0x5b4>
1000e8e0:	1823883a 	mov	r17,r3
1000e8e4:	a80e943a 	slli	r7,r21,16
1000e8e8:	d8c00017 	ldw	r3,0(sp)
1000e8ec:	80a1c83a 	sub	r16,r16,r2
1000e8f0:	3c64b03a 	or	r18,r7,r17
1000e8f4:	1d3fffcc 	andi	r20,r3,65535
1000e8f8:	9022d43a 	srli	r17,r18,16
1000e8fc:	95bfffcc 	andi	r22,r18,65535
1000e900:	a00b883a 	mov	r5,r20
1000e904:	b009883a 	mov	r4,r22
1000e908:	182ad43a 	srli	r21,r3,16
1000e90c:	0004bc80 	call	10004bc8 <__mulsi3>
1000e910:	a00b883a 	mov	r5,r20
1000e914:	8809883a 	mov	r4,r17
1000e918:	1039883a 	mov	fp,r2
1000e91c:	0004bc80 	call	10004bc8 <__mulsi3>
1000e920:	8809883a 	mov	r4,r17
1000e924:	a80b883a 	mov	r5,r21
1000e928:	1029883a 	mov	r20,r2
1000e92c:	0004bc80 	call	10004bc8 <__mulsi3>
1000e930:	a80b883a 	mov	r5,r21
1000e934:	b009883a 	mov	r4,r22
1000e938:	1023883a 	mov	r17,r2
1000e93c:	0004bc80 	call	10004bc8 <__mulsi3>
1000e940:	e006d43a 	srli	r3,fp,16
1000e944:	1505883a 	add	r2,r2,r20
1000e948:	1887883a 	add	r3,r3,r2
1000e94c:	1d00022e 	bgeu	r3,r20,1000e958 <__udivdi3+0x468>
1000e950:	00800074 	movhi	r2,1
1000e954:	88a3883a 	add	r17,r17,r2
1000e958:	1804d43a 	srli	r2,r3,16
1000e95c:	1463883a 	add	r17,r2,r17
1000e960:	84404436 	bltu	r16,r17,1000ea74 <__udivdi3+0x584>
1000e964:	84403e26 	beq	r16,r17,1000ea60 <__udivdi3+0x570>
1000e968:	9005883a 	mov	r2,r18
1000e96c:	0007883a 	mov	r3,zero
1000e970:	003f9106 	br	1000e7b8 <__alt_data_end+0xf800e7b8>
1000e974:	88e2983a 	sll	r17,r17,r3
1000e978:	80aed83a 	srl	r23,r16,r2
1000e97c:	80e0983a 	sll	r16,r16,r3
1000e980:	882ad43a 	srli	r21,r17,16
1000e984:	9884d83a 	srl	r2,r19,r2
1000e988:	b809883a 	mov	r4,r23
1000e98c:	a80b883a 	mov	r5,r21
1000e990:	98e4983a 	sll	r18,r19,r3
1000e994:	142cb03a 	or	r22,r2,r16
1000e998:	000f20c0 	call	1000f20c <__umodsi3>
1000e99c:	b809883a 	mov	r4,r23
1000e9a0:	a80b883a 	mov	r5,r21
1000e9a4:	1027883a 	mov	r19,r2
1000e9a8:	8d3fffcc 	andi	r20,r17,65535
1000e9ac:	000f1a80 	call	1000f1a8 <__udivsi3>
1000e9b0:	a009883a 	mov	r4,r20
1000e9b4:	100b883a 	mov	r5,r2
1000e9b8:	102f883a 	mov	r23,r2
1000e9bc:	0004bc80 	call	10004bc8 <__mulsi3>
1000e9c0:	9826943a 	slli	r19,r19,16
1000e9c4:	b008d43a 	srli	r4,r22,16
1000e9c8:	24c8b03a 	or	r4,r4,r19
1000e9cc:	2080062e 	bgeu	r4,r2,1000e9e8 <__udivdi3+0x4f8>
1000e9d0:	2449883a 	add	r4,r4,r17
1000e9d4:	b8ffffc4 	addi	r3,r23,-1
1000e9d8:	24403c36 	bltu	r4,r17,1000eacc <__udivdi3+0x5dc>
1000e9dc:	20803b2e 	bgeu	r4,r2,1000eacc <__udivdi3+0x5dc>
1000e9e0:	bdffff84 	addi	r23,r23,-2
1000e9e4:	2449883a 	add	r4,r4,r17
1000e9e8:	20a1c83a 	sub	r16,r4,r2
1000e9ec:	a80b883a 	mov	r5,r21
1000e9f0:	8009883a 	mov	r4,r16
1000e9f4:	000f20c0 	call	1000f20c <__umodsi3>
1000e9f8:	a80b883a 	mov	r5,r21
1000e9fc:	8009883a 	mov	r4,r16
1000ea00:	1027883a 	mov	r19,r2
1000ea04:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ea08:	a009883a 	mov	r4,r20
1000ea0c:	100b883a 	mov	r5,r2
1000ea10:	9826943a 	slli	r19,r19,16
1000ea14:	1039883a 	mov	fp,r2
1000ea18:	0004bc80 	call	10004bc8 <__mulsi3>
1000ea1c:	b13fffcc 	andi	r4,r22,65535
1000ea20:	24c8b03a 	or	r4,r4,r19
1000ea24:	2080062e 	bgeu	r4,r2,1000ea40 <__udivdi3+0x550>
1000ea28:	2449883a 	add	r4,r4,r17
1000ea2c:	e0ffffc4 	addi	r3,fp,-1
1000ea30:	24402436 	bltu	r4,r17,1000eac4 <__udivdi3+0x5d4>
1000ea34:	2080232e 	bgeu	r4,r2,1000eac4 <__udivdi3+0x5d4>
1000ea38:	e73fff84 	addi	fp,fp,-2
1000ea3c:	2449883a 	add	r4,r4,r17
1000ea40:	b82e943a 	slli	r23,r23,16
1000ea44:	20a1c83a 	sub	r16,r4,r2
1000ea48:	bf06b03a 	or	r3,r23,fp
1000ea4c:	003f2806 	br	1000e6f0 <__alt_data_end+0xf800e6f0>
1000ea50:	2021883a 	mov	r16,r4
1000ea54:	003f5306 	br	1000e7a4 <__alt_data_end+0xf800e7a4>
1000ea58:	1821883a 	mov	r16,r3
1000ea5c:	003ef406 	br	1000e630 <__alt_data_end+0xf800e630>
1000ea60:	1806943a 	slli	r3,r3,16
1000ea64:	9de6983a 	sll	r19,r19,r23
1000ea68:	e73fffcc 	andi	fp,fp,65535
1000ea6c:	1f07883a 	add	r3,r3,fp
1000ea70:	98ffbd2e 	bgeu	r19,r3,1000e968 <__alt_data_end+0xf800e968>
1000ea74:	90bfffc4 	addi	r2,r18,-1
1000ea78:	0007883a 	mov	r3,zero
1000ea7c:	003f4e06 	br	1000e7b8 <__alt_data_end+0xf800e7b8>
1000ea80:	00800604 	movi	r2,24
1000ea84:	003ef506 	br	1000e65c <__alt_data_end+0xf800e65c>
1000ea88:	00800604 	movi	r2,24
1000ea8c:	003f0b06 	br	1000e6bc <__alt_data_end+0xf800e6bc>
1000ea90:	00800604 	movi	r2,24
1000ea94:	003ead06 	br	1000e54c <__alt_data_end+0xf800e54c>
1000ea98:	0007883a 	mov	r3,zero
1000ea9c:	00800044 	movi	r2,1
1000eaa0:	003f4506 	br	1000e7b8 <__alt_data_end+0xf800e7b8>
1000eaa4:	80bf8e2e 	bgeu	r16,r2,1000e8e0 <__alt_data_end+0xf800e8e0>
1000eaa8:	8c7fff84 	addi	r17,r17,-2
1000eaac:	8721883a 	add	r16,r16,fp
1000eab0:	003f8c06 	br	1000e8e4 <__alt_data_end+0xf800e8e4>
1000eab4:	18bf762e 	bgeu	r3,r2,1000e890 <__alt_data_end+0xf800e890>
1000eab8:	ad7fff84 	addi	r21,r21,-2
1000eabc:	1f07883a 	add	r3,r3,fp
1000eac0:	003f7406 	br	1000e894 <__alt_data_end+0xf800e894>
1000eac4:	1839883a 	mov	fp,r3
1000eac8:	003fdd06 	br	1000ea40 <__alt_data_end+0xf800ea40>
1000eacc:	182f883a 	mov	r23,r3
1000ead0:	003fc506 	br	1000e9e8 <__alt_data_end+0xf800e9e8>
1000ead4:	b5bfff84 	addi	r22,r22,-2
1000ead8:	3c4f883a 	add	r7,r7,r17
1000eadc:	003f1a06 	br	1000e748 <__alt_data_end+0xf800e748>
1000eae0:	b5bfff84 	addi	r22,r22,-2
1000eae4:	1c47883a 	add	r3,r3,r17
1000eae8:	003ebc06 	br	1000e5dc <__alt_data_end+0xf800e5dc>

1000eaec <__umoddi3>:
1000eaec:	defff304 	addi	sp,sp,-52
1000eaf0:	df000b15 	stw	fp,44(sp)
1000eaf4:	dc400415 	stw	r17,16(sp)
1000eaf8:	dc000315 	stw	r16,12(sp)
1000eafc:	dfc00c15 	stw	ra,48(sp)
1000eb00:	ddc00a15 	stw	r23,40(sp)
1000eb04:	dd800915 	stw	r22,36(sp)
1000eb08:	dd400815 	stw	r21,32(sp)
1000eb0c:	dd000715 	stw	r20,28(sp)
1000eb10:	dcc00615 	stw	r19,24(sp)
1000eb14:	dc800515 	stw	r18,20(sp)
1000eb18:	2021883a 	mov	r16,r4
1000eb1c:	2823883a 	mov	r17,r5
1000eb20:	2839883a 	mov	fp,r5
1000eb24:	3800401e 	bne	r7,zero,1000ec28 <__umoddi3+0x13c>
1000eb28:	3027883a 	mov	r19,r6
1000eb2c:	2029883a 	mov	r20,r4
1000eb30:	2980552e 	bgeu	r5,r6,1000ec88 <__umoddi3+0x19c>
1000eb34:	00bfffd4 	movui	r2,65535
1000eb38:	1180a236 	bltu	r2,r6,1000edc4 <__umoddi3+0x2d8>
1000eb3c:	01003fc4 	movi	r4,255
1000eb40:	2189803a 	cmpltu	r4,r4,r6
1000eb44:	200890fa 	slli	r4,r4,3
1000eb48:	3104d83a 	srl	r2,r6,r4
1000eb4c:	00c40074 	movhi	r3,4097
1000eb50:	18d39604 	addi	r3,r3,20056
1000eb54:	1885883a 	add	r2,r3,r2
1000eb58:	10c00003 	ldbu	r3,0(r2)
1000eb5c:	00800804 	movi	r2,32
1000eb60:	1909883a 	add	r4,r3,r4
1000eb64:	1125c83a 	sub	r18,r2,r4
1000eb68:	90000526 	beq	r18,zero,1000eb80 <__umoddi3+0x94>
1000eb6c:	8ca2983a 	sll	r17,r17,r18
1000eb70:	8108d83a 	srl	r4,r16,r4
1000eb74:	34a6983a 	sll	r19,r6,r18
1000eb78:	84a8983a 	sll	r20,r16,r18
1000eb7c:	2478b03a 	or	fp,r4,r17
1000eb80:	982cd43a 	srli	r22,r19,16
1000eb84:	e009883a 	mov	r4,fp
1000eb88:	9dffffcc 	andi	r23,r19,65535
1000eb8c:	b00b883a 	mov	r5,r22
1000eb90:	000f20c0 	call	1000f20c <__umodsi3>
1000eb94:	b00b883a 	mov	r5,r22
1000eb98:	e009883a 	mov	r4,fp
1000eb9c:	102b883a 	mov	r21,r2
1000eba0:	000f1a80 	call	1000f1a8 <__udivsi3>
1000eba4:	100b883a 	mov	r5,r2
1000eba8:	b809883a 	mov	r4,r23
1000ebac:	0004bc80 	call	10004bc8 <__mulsi3>
1000ebb0:	a82a943a 	slli	r21,r21,16
1000ebb4:	a006d43a 	srli	r3,r20,16
1000ebb8:	1d46b03a 	or	r3,r3,r21
1000ebbc:	1880032e 	bgeu	r3,r2,1000ebcc <__umoddi3+0xe0>
1000ebc0:	1cc7883a 	add	r3,r3,r19
1000ebc4:	1cc00136 	bltu	r3,r19,1000ebcc <__umoddi3+0xe0>
1000ebc8:	18813136 	bltu	r3,r2,1000f090 <__umoddi3+0x5a4>
1000ebcc:	18a1c83a 	sub	r16,r3,r2
1000ebd0:	b00b883a 	mov	r5,r22
1000ebd4:	8009883a 	mov	r4,r16
1000ebd8:	000f20c0 	call	1000f20c <__umodsi3>
1000ebdc:	b00b883a 	mov	r5,r22
1000ebe0:	8009883a 	mov	r4,r16
1000ebe4:	1023883a 	mov	r17,r2
1000ebe8:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ebec:	100b883a 	mov	r5,r2
1000ebf0:	b809883a 	mov	r4,r23
1000ebf4:	8822943a 	slli	r17,r17,16
1000ebf8:	0004bc80 	call	10004bc8 <__mulsi3>
1000ebfc:	a0ffffcc 	andi	r3,r20,65535
1000ec00:	1c46b03a 	or	r3,r3,r17
1000ec04:	1880042e 	bgeu	r3,r2,1000ec18 <__umoddi3+0x12c>
1000ec08:	1cc7883a 	add	r3,r3,r19
1000ec0c:	1cc00236 	bltu	r3,r19,1000ec18 <__umoddi3+0x12c>
1000ec10:	1880012e 	bgeu	r3,r2,1000ec18 <__umoddi3+0x12c>
1000ec14:	1cc7883a 	add	r3,r3,r19
1000ec18:	1885c83a 	sub	r2,r3,r2
1000ec1c:	1484d83a 	srl	r2,r2,r18
1000ec20:	0007883a 	mov	r3,zero
1000ec24:	00005306 	br	1000ed74 <__umoddi3+0x288>
1000ec28:	29c05036 	bltu	r5,r7,1000ed6c <__umoddi3+0x280>
1000ec2c:	00bfffd4 	movui	r2,65535
1000ec30:	11c05c2e 	bgeu	r2,r7,1000eda4 <__umoddi3+0x2b8>
1000ec34:	00804034 	movhi	r2,256
1000ec38:	10bfffc4 	addi	r2,r2,-1
1000ec3c:	11c10636 	bltu	r2,r7,1000f058 <__umoddi3+0x56c>
1000ec40:	01000404 	movi	r4,16
1000ec44:	3904d83a 	srl	r2,r7,r4
1000ec48:	00c40074 	movhi	r3,4097
1000ec4c:	18d39604 	addi	r3,r3,20056
1000ec50:	1885883a 	add	r2,r3,r2
1000ec54:	14c00003 	ldbu	r19,0(r2)
1000ec58:	00c00804 	movi	r3,32
1000ec5c:	9927883a 	add	r19,r19,r4
1000ec60:	1ce9c83a 	sub	r20,r3,r19
1000ec64:	a0005c1e 	bne	r20,zero,1000edd8 <__umoddi3+0x2ec>
1000ec68:	3c400136 	bltu	r7,r17,1000ec70 <__umoddi3+0x184>
1000ec6c:	81810a36 	bltu	r16,r6,1000f098 <__umoddi3+0x5ac>
1000ec70:	8185c83a 	sub	r2,r16,r6
1000ec74:	89e3c83a 	sub	r17,r17,r7
1000ec78:	8089803a 	cmpltu	r4,r16,r2
1000ec7c:	8939c83a 	sub	fp,r17,r4
1000ec80:	e007883a 	mov	r3,fp
1000ec84:	00003b06 	br	1000ed74 <__umoddi3+0x288>
1000ec88:	3000041e 	bne	r6,zero,1000ec9c <__umoddi3+0x1b0>
1000ec8c:	000b883a 	mov	r5,zero
1000ec90:	01000044 	movi	r4,1
1000ec94:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ec98:	1027883a 	mov	r19,r2
1000ec9c:	00bfffd4 	movui	r2,65535
1000eca0:	14c0442e 	bgeu	r2,r19,1000edb4 <__umoddi3+0x2c8>
1000eca4:	00804034 	movhi	r2,256
1000eca8:	10bfffc4 	addi	r2,r2,-1
1000ecac:	14c0ec36 	bltu	r2,r19,1000f060 <__umoddi3+0x574>
1000ecb0:	00800404 	movi	r2,16
1000ecb4:	9886d83a 	srl	r3,r19,r2
1000ecb8:	01040074 	movhi	r4,4097
1000ecbc:	21139604 	addi	r4,r4,20056
1000ecc0:	20c7883a 	add	r3,r4,r3
1000ecc4:	18c00003 	ldbu	r3,0(r3)
1000ecc8:	1887883a 	add	r3,r3,r2
1000eccc:	00800804 	movi	r2,32
1000ecd0:	10e5c83a 	sub	r18,r2,r3
1000ecd4:	9000ab1e 	bne	r18,zero,1000ef84 <__umoddi3+0x498>
1000ecd8:	982cd43a 	srli	r22,r19,16
1000ecdc:	8ce3c83a 	sub	r17,r17,r19
1000ece0:	9dffffcc 	andi	r23,r19,65535
1000ece4:	b00b883a 	mov	r5,r22
1000ece8:	8809883a 	mov	r4,r17
1000ecec:	000f20c0 	call	1000f20c <__umodsi3>
1000ecf0:	b00b883a 	mov	r5,r22
1000ecf4:	8809883a 	mov	r4,r17
1000ecf8:	102b883a 	mov	r21,r2
1000ecfc:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ed00:	b80b883a 	mov	r5,r23
1000ed04:	1009883a 	mov	r4,r2
1000ed08:	0004bc80 	call	10004bc8 <__mulsi3>
1000ed0c:	a82a943a 	slli	r21,r21,16
1000ed10:	a006d43a 	srli	r3,r20,16
1000ed14:	1d46b03a 	or	r3,r3,r21
1000ed18:	1880042e 	bgeu	r3,r2,1000ed2c <__umoddi3+0x240>
1000ed1c:	1cc7883a 	add	r3,r3,r19
1000ed20:	1cc00236 	bltu	r3,r19,1000ed2c <__umoddi3+0x240>
1000ed24:	1880012e 	bgeu	r3,r2,1000ed2c <__umoddi3+0x240>
1000ed28:	1cc7883a 	add	r3,r3,r19
1000ed2c:	18a1c83a 	sub	r16,r3,r2
1000ed30:	b00b883a 	mov	r5,r22
1000ed34:	8009883a 	mov	r4,r16
1000ed38:	000f20c0 	call	1000f20c <__umodsi3>
1000ed3c:	1023883a 	mov	r17,r2
1000ed40:	b00b883a 	mov	r5,r22
1000ed44:	8009883a 	mov	r4,r16
1000ed48:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ed4c:	8822943a 	slli	r17,r17,16
1000ed50:	b80b883a 	mov	r5,r23
1000ed54:	1009883a 	mov	r4,r2
1000ed58:	0004bc80 	call	10004bc8 <__mulsi3>
1000ed5c:	a53fffcc 	andi	r20,r20,65535
1000ed60:	a446b03a 	or	r3,r20,r17
1000ed64:	18bfac2e 	bgeu	r3,r2,1000ec18 <__alt_data_end+0xf800ec18>
1000ed68:	003fa706 	br	1000ec08 <__alt_data_end+0xf800ec08>
1000ed6c:	2005883a 	mov	r2,r4
1000ed70:	2807883a 	mov	r3,r5
1000ed74:	dfc00c17 	ldw	ra,48(sp)
1000ed78:	df000b17 	ldw	fp,44(sp)
1000ed7c:	ddc00a17 	ldw	r23,40(sp)
1000ed80:	dd800917 	ldw	r22,36(sp)
1000ed84:	dd400817 	ldw	r21,32(sp)
1000ed88:	dd000717 	ldw	r20,28(sp)
1000ed8c:	dcc00617 	ldw	r19,24(sp)
1000ed90:	dc800517 	ldw	r18,20(sp)
1000ed94:	dc400417 	ldw	r17,16(sp)
1000ed98:	dc000317 	ldw	r16,12(sp)
1000ed9c:	dec00d04 	addi	sp,sp,52
1000eda0:	f800283a 	ret
1000eda4:	04c03fc4 	movi	r19,255
1000eda8:	99c9803a 	cmpltu	r4,r19,r7
1000edac:	200890fa 	slli	r4,r4,3
1000edb0:	003fa406 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000edb4:	00803fc4 	movi	r2,255
1000edb8:	14c5803a 	cmpltu	r2,r2,r19
1000edbc:	100490fa 	slli	r2,r2,3
1000edc0:	003fbc06 	br	1000ecb4 <__alt_data_end+0xf800ecb4>
1000edc4:	00804034 	movhi	r2,256
1000edc8:	10bfffc4 	addi	r2,r2,-1
1000edcc:	1180a636 	bltu	r2,r6,1000f068 <__umoddi3+0x57c>
1000edd0:	01000404 	movi	r4,16
1000edd4:	003f5c06 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000edd8:	3d0e983a 	sll	r7,r7,r20
1000eddc:	34ead83a 	srl	r21,r6,r19
1000ede0:	8cc6d83a 	srl	r3,r17,r19
1000ede4:	8d10983a 	sll	r8,r17,r20
1000ede8:	3d6ab03a 	or	r21,r7,r21
1000edec:	a82cd43a 	srli	r22,r21,16
1000edf0:	84e2d83a 	srl	r17,r16,r19
1000edf4:	1809883a 	mov	r4,r3
1000edf8:	b00b883a 	mov	r5,r22
1000edfc:	8a22b03a 	or	r17,r17,r8
1000ee00:	3524983a 	sll	r18,r6,r20
1000ee04:	dc400015 	stw	r17,0(sp)
1000ee08:	d8c00115 	stw	r3,4(sp)
1000ee0c:	000f20c0 	call	1000f20c <__umodsi3>
1000ee10:	d8c00117 	ldw	r3,4(sp)
1000ee14:	b00b883a 	mov	r5,r22
1000ee18:	1039883a 	mov	fp,r2
1000ee1c:	1809883a 	mov	r4,r3
1000ee20:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ee24:	adffffcc 	andi	r23,r21,65535
1000ee28:	100b883a 	mov	r5,r2
1000ee2c:	b809883a 	mov	r4,r23
1000ee30:	1023883a 	mov	r17,r2
1000ee34:	0004bc80 	call	10004bc8 <__mulsi3>
1000ee38:	d9400017 	ldw	r5,0(sp)
1000ee3c:	e008943a 	slli	r4,fp,16
1000ee40:	8520983a 	sll	r16,r16,r20
1000ee44:	2806d43a 	srli	r3,r5,16
1000ee48:	1906b03a 	or	r3,r3,r4
1000ee4c:	1880042e 	bgeu	r3,r2,1000ee60 <__umoddi3+0x374>
1000ee50:	1d47883a 	add	r3,r3,r21
1000ee54:	893fffc4 	addi	r4,r17,-1
1000ee58:	1d40892e 	bgeu	r3,r21,1000f080 <__umoddi3+0x594>
1000ee5c:	2023883a 	mov	r17,r4
1000ee60:	18b9c83a 	sub	fp,r3,r2
1000ee64:	b00b883a 	mov	r5,r22
1000ee68:	e009883a 	mov	r4,fp
1000ee6c:	000f20c0 	call	1000f20c <__umodsi3>
1000ee70:	b00b883a 	mov	r5,r22
1000ee74:	e009883a 	mov	r4,fp
1000ee78:	d8800215 	stw	r2,8(sp)
1000ee7c:	000f1a80 	call	1000f1a8 <__udivsi3>
1000ee80:	100b883a 	mov	r5,r2
1000ee84:	b809883a 	mov	r4,r23
1000ee88:	102d883a 	mov	r22,r2
1000ee8c:	0004bc80 	call	10004bc8 <__mulsi3>
1000ee90:	d9800217 	ldw	r6,8(sp)
1000ee94:	d8c00017 	ldw	r3,0(sp)
1000ee98:	300c943a 	slli	r6,r6,16
1000ee9c:	1a3fffcc 	andi	r8,r3,65535
1000eea0:	4190b03a 	or	r8,r8,r6
1000eea4:	4080042e 	bgeu	r8,r2,1000eeb8 <__umoddi3+0x3cc>
1000eea8:	4551883a 	add	r8,r8,r21
1000eeac:	b0ffffc4 	addi	r3,r22,-1
1000eeb0:	45406f2e 	bgeu	r8,r21,1000f070 <__umoddi3+0x584>
1000eeb4:	182d883a 	mov	r22,r3
1000eeb8:	880e943a 	slli	r7,r17,16
1000eebc:	9006d43a 	srli	r3,r18,16
1000eec0:	91bfffcc 	andi	r6,r18,65535
1000eec4:	3dacb03a 	or	r22,r7,r22
1000eec8:	b02ed43a 	srli	r23,r22,16
1000eecc:	b5bfffcc 	andi	r22,r22,65535
1000eed0:	300b883a 	mov	r5,r6
1000eed4:	b009883a 	mov	r4,r22
1000eed8:	40a3c83a 	sub	r17,r8,r2
1000eedc:	d8c00115 	stw	r3,4(sp)
1000eee0:	d9800215 	stw	r6,8(sp)
1000eee4:	0004bc80 	call	10004bc8 <__mulsi3>
1000eee8:	d9800217 	ldw	r6,8(sp)
1000eeec:	b809883a 	mov	r4,r23
1000eef0:	1039883a 	mov	fp,r2
1000eef4:	300b883a 	mov	r5,r6
1000eef8:	0004bc80 	call	10004bc8 <__mulsi3>
1000eefc:	d8c00117 	ldw	r3,4(sp)
1000ef00:	b809883a 	mov	r4,r23
1000ef04:	d8800215 	stw	r2,8(sp)
1000ef08:	180b883a 	mov	r5,r3
1000ef0c:	0004bc80 	call	10004bc8 <__mulsi3>
1000ef10:	d8c00117 	ldw	r3,4(sp)
1000ef14:	b009883a 	mov	r4,r22
1000ef18:	102f883a 	mov	r23,r2
1000ef1c:	180b883a 	mov	r5,r3
1000ef20:	0004bc80 	call	10004bc8 <__mulsi3>
1000ef24:	d9800217 	ldw	r6,8(sp)
1000ef28:	e006d43a 	srli	r3,fp,16
1000ef2c:	1185883a 	add	r2,r2,r6
1000ef30:	1885883a 	add	r2,r3,r2
1000ef34:	1180022e 	bgeu	r2,r6,1000ef40 <__umoddi3+0x454>
1000ef38:	00c00074 	movhi	r3,1
1000ef3c:	b8ef883a 	add	r23,r23,r3
1000ef40:	1006d43a 	srli	r3,r2,16
1000ef44:	1004943a 	slli	r2,r2,16
1000ef48:	e73fffcc 	andi	fp,fp,65535
1000ef4c:	1dc7883a 	add	r3,r3,r23
1000ef50:	1739883a 	add	fp,r2,fp
1000ef54:	88c03a36 	bltu	r17,r3,1000f040 <__umoddi3+0x554>
1000ef58:	88c05126 	beq	r17,r3,1000f0a0 <__umoddi3+0x5b4>
1000ef5c:	88c9c83a 	sub	r4,r17,r3
1000ef60:	e00f883a 	mov	r7,fp
1000ef64:	81cfc83a 	sub	r7,r16,r7
1000ef68:	81c7803a 	cmpltu	r3,r16,r7
1000ef6c:	20c7c83a 	sub	r3,r4,r3
1000ef70:	1cc4983a 	sll	r2,r3,r19
1000ef74:	3d0ed83a 	srl	r7,r7,r20
1000ef78:	1d06d83a 	srl	r3,r3,r20
1000ef7c:	11c4b03a 	or	r2,r2,r7
1000ef80:	003f7c06 	br	1000ed74 <__alt_data_end+0xf800ed74>
1000ef84:	9ca6983a 	sll	r19,r19,r18
1000ef88:	88f8d83a 	srl	fp,r17,r3
1000ef8c:	80c4d83a 	srl	r2,r16,r3
1000ef90:	982cd43a 	srli	r22,r19,16
1000ef94:	8ca2983a 	sll	r17,r17,r18
1000ef98:	e009883a 	mov	r4,fp
1000ef9c:	b00b883a 	mov	r5,r22
1000efa0:	146ab03a 	or	r21,r2,r17
1000efa4:	000f20c0 	call	1000f20c <__umodsi3>
1000efa8:	b00b883a 	mov	r5,r22
1000efac:	e009883a 	mov	r4,fp
1000efb0:	1029883a 	mov	r20,r2
1000efb4:	9dffffcc 	andi	r23,r19,65535
1000efb8:	000f1a80 	call	1000f1a8 <__udivsi3>
1000efbc:	b809883a 	mov	r4,r23
1000efc0:	100b883a 	mov	r5,r2
1000efc4:	0004bc80 	call	10004bc8 <__mulsi3>
1000efc8:	a008943a 	slli	r4,r20,16
1000efcc:	a806d43a 	srli	r3,r21,16
1000efd0:	84a8983a 	sll	r20,r16,r18
1000efd4:	1906b03a 	or	r3,r3,r4
1000efd8:	1880042e 	bgeu	r3,r2,1000efec <__umoddi3+0x500>
1000efdc:	1cc7883a 	add	r3,r3,r19
1000efe0:	1cc00236 	bltu	r3,r19,1000efec <__umoddi3+0x500>
1000efe4:	1880012e 	bgeu	r3,r2,1000efec <__umoddi3+0x500>
1000efe8:	1cc7883a 	add	r3,r3,r19
1000efec:	18a3c83a 	sub	r17,r3,r2
1000eff0:	b00b883a 	mov	r5,r22
1000eff4:	8809883a 	mov	r4,r17
1000eff8:	000f20c0 	call	1000f20c <__umodsi3>
1000effc:	b00b883a 	mov	r5,r22
1000f000:	8809883a 	mov	r4,r17
1000f004:	1021883a 	mov	r16,r2
1000f008:	000f1a80 	call	1000f1a8 <__udivsi3>
1000f00c:	100b883a 	mov	r5,r2
1000f010:	b809883a 	mov	r4,r23
1000f014:	8020943a 	slli	r16,r16,16
1000f018:	0004bc80 	call	10004bc8 <__mulsi3>
1000f01c:	a8ffffcc 	andi	r3,r21,65535
1000f020:	1c06b03a 	or	r3,r3,r16
1000f024:	1880042e 	bgeu	r3,r2,1000f038 <__umoddi3+0x54c>
1000f028:	1cc7883a 	add	r3,r3,r19
1000f02c:	1cc00236 	bltu	r3,r19,1000f038 <__umoddi3+0x54c>
1000f030:	1880012e 	bgeu	r3,r2,1000f038 <__umoddi3+0x54c>
1000f034:	1cc7883a 	add	r3,r3,r19
1000f038:	18a3c83a 	sub	r17,r3,r2
1000f03c:	003f2906 	br	1000ece4 <__alt_data_end+0xf800ece4>
1000f040:	e48fc83a 	sub	r7,fp,r18
1000f044:	1d49c83a 	sub	r4,r3,r21
1000f048:	e1f9803a 	cmpltu	fp,fp,r7
1000f04c:	2739c83a 	sub	fp,r4,fp
1000f050:	8f09c83a 	sub	r4,r17,fp
1000f054:	003fc306 	br	1000ef64 <__alt_data_end+0xf800ef64>
1000f058:	01000604 	movi	r4,24
1000f05c:	003ef906 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000f060:	00800604 	movi	r2,24
1000f064:	003f1306 	br	1000ecb4 <__alt_data_end+0xf800ecb4>
1000f068:	01000604 	movi	r4,24
1000f06c:	003eb606 	br	1000eb48 <__alt_data_end+0xf800eb48>
1000f070:	40bf902e 	bgeu	r8,r2,1000eeb4 <__alt_data_end+0xf800eeb4>
1000f074:	b5bfff84 	addi	r22,r22,-2
1000f078:	4551883a 	add	r8,r8,r21
1000f07c:	003f8e06 	br	1000eeb8 <__alt_data_end+0xf800eeb8>
1000f080:	18bf762e 	bgeu	r3,r2,1000ee5c <__alt_data_end+0xf800ee5c>
1000f084:	8c7fff84 	addi	r17,r17,-2
1000f088:	1d47883a 	add	r3,r3,r21
1000f08c:	003f7406 	br	1000ee60 <__alt_data_end+0xf800ee60>
1000f090:	1cc7883a 	add	r3,r3,r19
1000f094:	003ecd06 	br	1000ebcc <__alt_data_end+0xf800ebcc>
1000f098:	8005883a 	mov	r2,r16
1000f09c:	003ef806 	br	1000ec80 <__alt_data_end+0xf800ec80>
1000f0a0:	873fe736 	bltu	r16,fp,1000f040 <__alt_data_end+0xf800f040>
1000f0a4:	e00f883a 	mov	r7,fp
1000f0a8:	0009883a 	mov	r4,zero
1000f0ac:	003fad06 	br	1000ef64 <__alt_data_end+0xf800ef64>

1000f0b0 <__divsi3>:
1000f0b0:	20001b16 	blt	r4,zero,1000f120 <__divsi3+0x70>
1000f0b4:	000f883a 	mov	r7,zero
1000f0b8:	28001616 	blt	r5,zero,1000f114 <__divsi3+0x64>
1000f0bc:	200d883a 	mov	r6,r4
1000f0c0:	29001a2e 	bgeu	r5,r4,1000f12c <__divsi3+0x7c>
1000f0c4:	00800804 	movi	r2,32
1000f0c8:	00c00044 	movi	r3,1
1000f0cc:	00000106 	br	1000f0d4 <__divsi3+0x24>
1000f0d0:	10000d26 	beq	r2,zero,1000f108 <__divsi3+0x58>
1000f0d4:	294b883a 	add	r5,r5,r5
1000f0d8:	10bfffc4 	addi	r2,r2,-1
1000f0dc:	18c7883a 	add	r3,r3,r3
1000f0e0:	293ffb36 	bltu	r5,r4,1000f0d0 <__alt_data_end+0xf800f0d0>
1000f0e4:	0005883a 	mov	r2,zero
1000f0e8:	18000726 	beq	r3,zero,1000f108 <__divsi3+0x58>
1000f0ec:	0005883a 	mov	r2,zero
1000f0f0:	31400236 	bltu	r6,r5,1000f0fc <__divsi3+0x4c>
1000f0f4:	314dc83a 	sub	r6,r6,r5
1000f0f8:	10c4b03a 	or	r2,r2,r3
1000f0fc:	1806d07a 	srli	r3,r3,1
1000f100:	280ad07a 	srli	r5,r5,1
1000f104:	183ffa1e 	bne	r3,zero,1000f0f0 <__alt_data_end+0xf800f0f0>
1000f108:	38000126 	beq	r7,zero,1000f110 <__divsi3+0x60>
1000f10c:	0085c83a 	sub	r2,zero,r2
1000f110:	f800283a 	ret
1000f114:	014bc83a 	sub	r5,zero,r5
1000f118:	39c0005c 	xori	r7,r7,1
1000f11c:	003fe706 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000f120:	0109c83a 	sub	r4,zero,r4
1000f124:	01c00044 	movi	r7,1
1000f128:	003fe306 	br	1000f0b8 <__alt_data_end+0xf800f0b8>
1000f12c:	00c00044 	movi	r3,1
1000f130:	003fee06 	br	1000f0ec <__alt_data_end+0xf800f0ec>

1000f134 <__modsi3>:
1000f134:	20001716 	blt	r4,zero,1000f194 <__modsi3+0x60>
1000f138:	000f883a 	mov	r7,zero
1000f13c:	2005883a 	mov	r2,r4
1000f140:	28001216 	blt	r5,zero,1000f18c <__modsi3+0x58>
1000f144:	2900162e 	bgeu	r5,r4,1000f1a0 <__modsi3+0x6c>
1000f148:	01800804 	movi	r6,32
1000f14c:	00c00044 	movi	r3,1
1000f150:	00000106 	br	1000f158 <__modsi3+0x24>
1000f154:	30000a26 	beq	r6,zero,1000f180 <__modsi3+0x4c>
1000f158:	294b883a 	add	r5,r5,r5
1000f15c:	31bfffc4 	addi	r6,r6,-1
1000f160:	18c7883a 	add	r3,r3,r3
1000f164:	293ffb36 	bltu	r5,r4,1000f154 <__alt_data_end+0xf800f154>
1000f168:	18000526 	beq	r3,zero,1000f180 <__modsi3+0x4c>
1000f16c:	1806d07a 	srli	r3,r3,1
1000f170:	11400136 	bltu	r2,r5,1000f178 <__modsi3+0x44>
1000f174:	1145c83a 	sub	r2,r2,r5
1000f178:	280ad07a 	srli	r5,r5,1
1000f17c:	183ffb1e 	bne	r3,zero,1000f16c <__alt_data_end+0xf800f16c>
1000f180:	38000126 	beq	r7,zero,1000f188 <__modsi3+0x54>
1000f184:	0085c83a 	sub	r2,zero,r2
1000f188:	f800283a 	ret
1000f18c:	014bc83a 	sub	r5,zero,r5
1000f190:	003fec06 	br	1000f144 <__alt_data_end+0xf800f144>
1000f194:	0109c83a 	sub	r4,zero,r4
1000f198:	01c00044 	movi	r7,1
1000f19c:	003fe706 	br	1000f13c <__alt_data_end+0xf800f13c>
1000f1a0:	00c00044 	movi	r3,1
1000f1a4:	003ff106 	br	1000f16c <__alt_data_end+0xf800f16c>

1000f1a8 <__udivsi3>:
1000f1a8:	200d883a 	mov	r6,r4
1000f1ac:	2900152e 	bgeu	r5,r4,1000f204 <__udivsi3+0x5c>
1000f1b0:	28001416 	blt	r5,zero,1000f204 <__udivsi3+0x5c>
1000f1b4:	00800804 	movi	r2,32
1000f1b8:	00c00044 	movi	r3,1
1000f1bc:	00000206 	br	1000f1c8 <__udivsi3+0x20>
1000f1c0:	10000e26 	beq	r2,zero,1000f1fc <__udivsi3+0x54>
1000f1c4:	28000516 	blt	r5,zero,1000f1dc <__udivsi3+0x34>
1000f1c8:	294b883a 	add	r5,r5,r5
1000f1cc:	10bfffc4 	addi	r2,r2,-1
1000f1d0:	18c7883a 	add	r3,r3,r3
1000f1d4:	293ffa36 	bltu	r5,r4,1000f1c0 <__alt_data_end+0xf800f1c0>
1000f1d8:	18000826 	beq	r3,zero,1000f1fc <__udivsi3+0x54>
1000f1dc:	0005883a 	mov	r2,zero
1000f1e0:	31400236 	bltu	r6,r5,1000f1ec <__udivsi3+0x44>
1000f1e4:	314dc83a 	sub	r6,r6,r5
1000f1e8:	10c4b03a 	or	r2,r2,r3
1000f1ec:	1806d07a 	srli	r3,r3,1
1000f1f0:	280ad07a 	srli	r5,r5,1
1000f1f4:	183ffa1e 	bne	r3,zero,1000f1e0 <__alt_data_end+0xf800f1e0>
1000f1f8:	f800283a 	ret
1000f1fc:	0005883a 	mov	r2,zero
1000f200:	f800283a 	ret
1000f204:	00c00044 	movi	r3,1
1000f208:	003ff406 	br	1000f1dc <__alt_data_end+0xf800f1dc>

1000f20c <__umodsi3>:
1000f20c:	2005883a 	mov	r2,r4
1000f210:	2900122e 	bgeu	r5,r4,1000f25c <__umodsi3+0x50>
1000f214:	28001116 	blt	r5,zero,1000f25c <__umodsi3+0x50>
1000f218:	01800804 	movi	r6,32
1000f21c:	00c00044 	movi	r3,1
1000f220:	00000206 	br	1000f22c <__umodsi3+0x20>
1000f224:	30000c26 	beq	r6,zero,1000f258 <__umodsi3+0x4c>
1000f228:	28000516 	blt	r5,zero,1000f240 <__umodsi3+0x34>
1000f22c:	294b883a 	add	r5,r5,r5
1000f230:	31bfffc4 	addi	r6,r6,-1
1000f234:	18c7883a 	add	r3,r3,r3
1000f238:	293ffa36 	bltu	r5,r4,1000f224 <__alt_data_end+0xf800f224>
1000f23c:	18000626 	beq	r3,zero,1000f258 <__umodsi3+0x4c>
1000f240:	1806d07a 	srli	r3,r3,1
1000f244:	11400136 	bltu	r2,r5,1000f24c <__umodsi3+0x40>
1000f248:	1145c83a 	sub	r2,r2,r5
1000f24c:	280ad07a 	srli	r5,r5,1
1000f250:	183ffb1e 	bne	r3,zero,1000f240 <__alt_data_end+0xf800f240>
1000f254:	f800283a 	ret
1000f258:	f800283a 	ret
1000f25c:	00c00044 	movi	r3,1
1000f260:	003ff706 	br	1000f240 <__alt_data_end+0xf800f240>

1000f264 <__adddf3>:
1000f264:	02c00434 	movhi	r11,16
1000f268:	5affffc4 	addi	r11,r11,-1
1000f26c:	2806d7fa 	srli	r3,r5,31
1000f270:	2ad4703a 	and	r10,r5,r11
1000f274:	3ad2703a 	and	r9,r7,r11
1000f278:	3804d53a 	srli	r2,r7,20
1000f27c:	3018d77a 	srli	r12,r6,29
1000f280:	280ad53a 	srli	r5,r5,20
1000f284:	501490fa 	slli	r10,r10,3
1000f288:	2010d77a 	srli	r8,r4,29
1000f28c:	481290fa 	slli	r9,r9,3
1000f290:	380ed7fa 	srli	r7,r7,31
1000f294:	defffb04 	addi	sp,sp,-20
1000f298:	dc800215 	stw	r18,8(sp)
1000f29c:	dc400115 	stw	r17,4(sp)
1000f2a0:	dc000015 	stw	r16,0(sp)
1000f2a4:	dfc00415 	stw	ra,16(sp)
1000f2a8:	dcc00315 	stw	r19,12(sp)
1000f2ac:	1c803fcc 	andi	r18,r3,255
1000f2b0:	2c01ffcc 	andi	r16,r5,2047
1000f2b4:	5210b03a 	or	r8,r10,r8
1000f2b8:	202290fa 	slli	r17,r4,3
1000f2bc:	1081ffcc 	andi	r2,r2,2047
1000f2c0:	4b12b03a 	or	r9,r9,r12
1000f2c4:	300c90fa 	slli	r6,r6,3
1000f2c8:	91c07526 	beq	r18,r7,1000f4a0 <__adddf3+0x23c>
1000f2cc:	8087c83a 	sub	r3,r16,r2
1000f2d0:	00c0ab0e 	bge	zero,r3,1000f580 <__adddf3+0x31c>
1000f2d4:	10002a1e 	bne	r2,zero,1000f380 <__adddf3+0x11c>
1000f2d8:	4984b03a 	or	r2,r9,r6
1000f2dc:	1000961e 	bne	r2,zero,1000f538 <__adddf3+0x2d4>
1000f2e0:	888001cc 	andi	r2,r17,7
1000f2e4:	10000726 	beq	r2,zero,1000f304 <__adddf3+0xa0>
1000f2e8:	888003cc 	andi	r2,r17,15
1000f2ec:	00c00104 	movi	r3,4
1000f2f0:	10c00426 	beq	r2,r3,1000f304 <__adddf3+0xa0>
1000f2f4:	88c7883a 	add	r3,r17,r3
1000f2f8:	1c63803a 	cmpltu	r17,r3,r17
1000f2fc:	4451883a 	add	r8,r8,r17
1000f300:	1823883a 	mov	r17,r3
1000f304:	4080202c 	andhi	r2,r8,128
1000f308:	10005926 	beq	r2,zero,1000f470 <__adddf3+0x20c>
1000f30c:	84000044 	addi	r16,r16,1
1000f310:	0081ffc4 	movi	r2,2047
1000f314:	8080ba26 	beq	r16,r2,1000f600 <__adddf3+0x39c>
1000f318:	00bfe034 	movhi	r2,65408
1000f31c:	10bfffc4 	addi	r2,r2,-1
1000f320:	4090703a 	and	r8,r8,r2
1000f324:	4004977a 	slli	r2,r8,29
1000f328:	4010927a 	slli	r8,r8,9
1000f32c:	8822d0fa 	srli	r17,r17,3
1000f330:	8401ffcc 	andi	r16,r16,2047
1000f334:	4010d33a 	srli	r8,r8,12
1000f338:	9007883a 	mov	r3,r18
1000f33c:	1444b03a 	or	r2,r2,r17
1000f340:	8401ffcc 	andi	r16,r16,2047
1000f344:	8020953a 	slli	r16,r16,20
1000f348:	18c03fcc 	andi	r3,r3,255
1000f34c:	01000434 	movhi	r4,16
1000f350:	213fffc4 	addi	r4,r4,-1
1000f354:	180697fa 	slli	r3,r3,31
1000f358:	4110703a 	and	r8,r8,r4
1000f35c:	4410b03a 	or	r8,r8,r16
1000f360:	40c6b03a 	or	r3,r8,r3
1000f364:	dfc00417 	ldw	ra,16(sp)
1000f368:	dcc00317 	ldw	r19,12(sp)
1000f36c:	dc800217 	ldw	r18,8(sp)
1000f370:	dc400117 	ldw	r17,4(sp)
1000f374:	dc000017 	ldw	r16,0(sp)
1000f378:	dec00504 	addi	sp,sp,20
1000f37c:	f800283a 	ret
1000f380:	0081ffc4 	movi	r2,2047
1000f384:	80bfd626 	beq	r16,r2,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f388:	4a402034 	orhi	r9,r9,128
1000f38c:	00800e04 	movi	r2,56
1000f390:	10c09f16 	blt	r2,r3,1000f610 <__adddf3+0x3ac>
1000f394:	008007c4 	movi	r2,31
1000f398:	10c0c216 	blt	r2,r3,1000f6a4 <__adddf3+0x440>
1000f39c:	00800804 	movi	r2,32
1000f3a0:	10c5c83a 	sub	r2,r2,r3
1000f3a4:	488a983a 	sll	r5,r9,r2
1000f3a8:	30c8d83a 	srl	r4,r6,r3
1000f3ac:	3084983a 	sll	r2,r6,r2
1000f3b0:	48c6d83a 	srl	r3,r9,r3
1000f3b4:	290cb03a 	or	r6,r5,r4
1000f3b8:	1004c03a 	cmpne	r2,r2,zero
1000f3bc:	308cb03a 	or	r6,r6,r2
1000f3c0:	898dc83a 	sub	r6,r17,r6
1000f3c4:	89a3803a 	cmpltu	r17,r17,r6
1000f3c8:	40d1c83a 	sub	r8,r8,r3
1000f3cc:	4451c83a 	sub	r8,r8,r17
1000f3d0:	3023883a 	mov	r17,r6
1000f3d4:	4080202c 	andhi	r2,r8,128
1000f3d8:	10002326 	beq	r2,zero,1000f468 <__adddf3+0x204>
1000f3dc:	04c02034 	movhi	r19,128
1000f3e0:	9cffffc4 	addi	r19,r19,-1
1000f3e4:	44e6703a 	and	r19,r8,r19
1000f3e8:	98007626 	beq	r19,zero,1000f5c4 <__adddf3+0x360>
1000f3ec:	9809883a 	mov	r4,r19
1000f3f0:	0011aa40 	call	10011aa4 <__clzsi2>
1000f3f4:	10fffe04 	addi	r3,r2,-8
1000f3f8:	010007c4 	movi	r4,31
1000f3fc:	20c07716 	blt	r4,r3,1000f5dc <__adddf3+0x378>
1000f400:	00800804 	movi	r2,32
1000f404:	10c5c83a 	sub	r2,r2,r3
1000f408:	8884d83a 	srl	r2,r17,r2
1000f40c:	98d0983a 	sll	r8,r19,r3
1000f410:	88e2983a 	sll	r17,r17,r3
1000f414:	1204b03a 	or	r2,r2,r8
1000f418:	1c007416 	blt	r3,r16,1000f5ec <__adddf3+0x388>
1000f41c:	1c21c83a 	sub	r16,r3,r16
1000f420:	82000044 	addi	r8,r16,1
1000f424:	00c007c4 	movi	r3,31
1000f428:	1a009116 	blt	r3,r8,1000f670 <__adddf3+0x40c>
1000f42c:	00c00804 	movi	r3,32
1000f430:	1a07c83a 	sub	r3,r3,r8
1000f434:	8a08d83a 	srl	r4,r17,r8
1000f438:	88e2983a 	sll	r17,r17,r3
1000f43c:	10c6983a 	sll	r3,r2,r3
1000f440:	1210d83a 	srl	r8,r2,r8
1000f444:	8804c03a 	cmpne	r2,r17,zero
1000f448:	1906b03a 	or	r3,r3,r4
1000f44c:	18a2b03a 	or	r17,r3,r2
1000f450:	0021883a 	mov	r16,zero
1000f454:	003fa206 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f458:	1890b03a 	or	r8,r3,r2
1000f45c:	40017d26 	beq	r8,zero,1000fa54 <__adddf3+0x7f0>
1000f460:	1011883a 	mov	r8,r2
1000f464:	1823883a 	mov	r17,r3
1000f468:	888001cc 	andi	r2,r17,7
1000f46c:	103f9e1e 	bne	r2,zero,1000f2e8 <__alt_data_end+0xf800f2e8>
1000f470:	4004977a 	slli	r2,r8,29
1000f474:	8822d0fa 	srli	r17,r17,3
1000f478:	4010d0fa 	srli	r8,r8,3
1000f47c:	9007883a 	mov	r3,r18
1000f480:	1444b03a 	or	r2,r2,r17
1000f484:	0101ffc4 	movi	r4,2047
1000f488:	81002426 	beq	r16,r4,1000f51c <__adddf3+0x2b8>
1000f48c:	8120703a 	and	r16,r16,r4
1000f490:	01000434 	movhi	r4,16
1000f494:	213fffc4 	addi	r4,r4,-1
1000f498:	4110703a 	and	r8,r8,r4
1000f49c:	003fa806 	br	1000f340 <__alt_data_end+0xf800f340>
1000f4a0:	8089c83a 	sub	r4,r16,r2
1000f4a4:	01005e0e 	bge	zero,r4,1000f620 <__adddf3+0x3bc>
1000f4a8:	10002b26 	beq	r2,zero,1000f558 <__adddf3+0x2f4>
1000f4ac:	0081ffc4 	movi	r2,2047
1000f4b0:	80bf8b26 	beq	r16,r2,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f4b4:	4a402034 	orhi	r9,r9,128
1000f4b8:	00800e04 	movi	r2,56
1000f4bc:	1100a40e 	bge	r2,r4,1000f750 <__adddf3+0x4ec>
1000f4c0:	498cb03a 	or	r6,r9,r6
1000f4c4:	300ac03a 	cmpne	r5,r6,zero
1000f4c8:	0013883a 	mov	r9,zero
1000f4cc:	2c4b883a 	add	r5,r5,r17
1000f4d0:	2c63803a 	cmpltu	r17,r5,r17
1000f4d4:	4a11883a 	add	r8,r9,r8
1000f4d8:	8a11883a 	add	r8,r17,r8
1000f4dc:	2823883a 	mov	r17,r5
1000f4e0:	4080202c 	andhi	r2,r8,128
1000f4e4:	103fe026 	beq	r2,zero,1000f468 <__alt_data_end+0xf800f468>
1000f4e8:	84000044 	addi	r16,r16,1
1000f4ec:	0081ffc4 	movi	r2,2047
1000f4f0:	8080d226 	beq	r16,r2,1000f83c <__adddf3+0x5d8>
1000f4f4:	00bfe034 	movhi	r2,65408
1000f4f8:	10bfffc4 	addi	r2,r2,-1
1000f4fc:	4090703a 	and	r8,r8,r2
1000f500:	880ad07a 	srli	r5,r17,1
1000f504:	400897fa 	slli	r4,r8,31
1000f508:	88c0004c 	andi	r3,r17,1
1000f50c:	28e2b03a 	or	r17,r5,r3
1000f510:	4010d07a 	srli	r8,r8,1
1000f514:	2462b03a 	or	r17,r4,r17
1000f518:	003f7106 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f51c:	4088b03a 	or	r4,r8,r2
1000f520:	20014526 	beq	r4,zero,1000fa38 <__adddf3+0x7d4>
1000f524:	01000434 	movhi	r4,16
1000f528:	42000234 	orhi	r8,r8,8
1000f52c:	213fffc4 	addi	r4,r4,-1
1000f530:	4110703a 	and	r8,r8,r4
1000f534:	003f8206 	br	1000f340 <__alt_data_end+0xf800f340>
1000f538:	18ffffc4 	addi	r3,r3,-1
1000f53c:	1800491e 	bne	r3,zero,1000f664 <__adddf3+0x400>
1000f540:	898bc83a 	sub	r5,r17,r6
1000f544:	8963803a 	cmpltu	r17,r17,r5
1000f548:	4251c83a 	sub	r8,r8,r9
1000f54c:	4451c83a 	sub	r8,r8,r17
1000f550:	2823883a 	mov	r17,r5
1000f554:	003f9f06 	br	1000f3d4 <__alt_data_end+0xf800f3d4>
1000f558:	4984b03a 	or	r2,r9,r6
1000f55c:	103f6026 	beq	r2,zero,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f560:	213fffc4 	addi	r4,r4,-1
1000f564:	2000931e 	bne	r4,zero,1000f7b4 <__adddf3+0x550>
1000f568:	898d883a 	add	r6,r17,r6
1000f56c:	3463803a 	cmpltu	r17,r6,r17
1000f570:	4251883a 	add	r8,r8,r9
1000f574:	8a11883a 	add	r8,r17,r8
1000f578:	3023883a 	mov	r17,r6
1000f57c:	003fd806 	br	1000f4e0 <__alt_data_end+0xf800f4e0>
1000f580:	1800541e 	bne	r3,zero,1000f6d4 <__adddf3+0x470>
1000f584:	80800044 	addi	r2,r16,1
1000f588:	1081ffcc 	andi	r2,r2,2047
1000f58c:	00c00044 	movi	r3,1
1000f590:	1880a00e 	bge	r3,r2,1000f814 <__adddf3+0x5b0>
1000f594:	8989c83a 	sub	r4,r17,r6
1000f598:	8905803a 	cmpltu	r2,r17,r4
1000f59c:	4267c83a 	sub	r19,r8,r9
1000f5a0:	98a7c83a 	sub	r19,r19,r2
1000f5a4:	9880202c 	andhi	r2,r19,128
1000f5a8:	10006326 	beq	r2,zero,1000f738 <__adddf3+0x4d4>
1000f5ac:	3463c83a 	sub	r17,r6,r17
1000f5b0:	4a07c83a 	sub	r3,r9,r8
1000f5b4:	344d803a 	cmpltu	r6,r6,r17
1000f5b8:	19a7c83a 	sub	r19,r3,r6
1000f5bc:	3825883a 	mov	r18,r7
1000f5c0:	983f8a1e 	bne	r19,zero,1000f3ec <__alt_data_end+0xf800f3ec>
1000f5c4:	8809883a 	mov	r4,r17
1000f5c8:	0011aa40 	call	10011aa4 <__clzsi2>
1000f5cc:	10800804 	addi	r2,r2,32
1000f5d0:	10fffe04 	addi	r3,r2,-8
1000f5d4:	010007c4 	movi	r4,31
1000f5d8:	20ff890e 	bge	r4,r3,1000f400 <__alt_data_end+0xf800f400>
1000f5dc:	10bff604 	addi	r2,r2,-40
1000f5e0:	8884983a 	sll	r2,r17,r2
1000f5e4:	0023883a 	mov	r17,zero
1000f5e8:	1c3f8c0e 	bge	r3,r16,1000f41c <__alt_data_end+0xf800f41c>
1000f5ec:	023fe034 	movhi	r8,65408
1000f5f0:	423fffc4 	addi	r8,r8,-1
1000f5f4:	80e1c83a 	sub	r16,r16,r3
1000f5f8:	1210703a 	and	r8,r2,r8
1000f5fc:	003f3806 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f600:	9007883a 	mov	r3,r18
1000f604:	0011883a 	mov	r8,zero
1000f608:	0005883a 	mov	r2,zero
1000f60c:	003f4c06 	br	1000f340 <__alt_data_end+0xf800f340>
1000f610:	498cb03a 	or	r6,r9,r6
1000f614:	300cc03a 	cmpne	r6,r6,zero
1000f618:	0007883a 	mov	r3,zero
1000f61c:	003f6806 	br	1000f3c0 <__alt_data_end+0xf800f3c0>
1000f620:	20009c1e 	bne	r4,zero,1000f894 <__adddf3+0x630>
1000f624:	80800044 	addi	r2,r16,1
1000f628:	1141ffcc 	andi	r5,r2,2047
1000f62c:	01000044 	movi	r4,1
1000f630:	2140670e 	bge	r4,r5,1000f7d0 <__adddf3+0x56c>
1000f634:	0101ffc4 	movi	r4,2047
1000f638:	11007f26 	beq	r2,r4,1000f838 <__adddf3+0x5d4>
1000f63c:	898d883a 	add	r6,r17,r6
1000f640:	4247883a 	add	r3,r8,r9
1000f644:	3451803a 	cmpltu	r8,r6,r17
1000f648:	40d1883a 	add	r8,r8,r3
1000f64c:	402297fa 	slli	r17,r8,31
1000f650:	300cd07a 	srli	r6,r6,1
1000f654:	4010d07a 	srli	r8,r8,1
1000f658:	1021883a 	mov	r16,r2
1000f65c:	89a2b03a 	or	r17,r17,r6
1000f660:	003f1f06 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f664:	0081ffc4 	movi	r2,2047
1000f668:	80bf481e 	bne	r16,r2,1000f38c <__alt_data_end+0xf800f38c>
1000f66c:	003f1c06 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f670:	843ff844 	addi	r16,r16,-31
1000f674:	01000804 	movi	r4,32
1000f678:	1406d83a 	srl	r3,r2,r16
1000f67c:	41005026 	beq	r8,r4,1000f7c0 <__adddf3+0x55c>
1000f680:	01001004 	movi	r4,64
1000f684:	2211c83a 	sub	r8,r4,r8
1000f688:	1204983a 	sll	r2,r2,r8
1000f68c:	88a2b03a 	or	r17,r17,r2
1000f690:	8822c03a 	cmpne	r17,r17,zero
1000f694:	1c62b03a 	or	r17,r3,r17
1000f698:	0011883a 	mov	r8,zero
1000f69c:	0021883a 	mov	r16,zero
1000f6a0:	003f7106 	br	1000f468 <__alt_data_end+0xf800f468>
1000f6a4:	193ff804 	addi	r4,r3,-32
1000f6a8:	00800804 	movi	r2,32
1000f6ac:	4908d83a 	srl	r4,r9,r4
1000f6b0:	18804526 	beq	r3,r2,1000f7c8 <__adddf3+0x564>
1000f6b4:	00801004 	movi	r2,64
1000f6b8:	10c5c83a 	sub	r2,r2,r3
1000f6bc:	4886983a 	sll	r3,r9,r2
1000f6c0:	198cb03a 	or	r6,r3,r6
1000f6c4:	300cc03a 	cmpne	r6,r6,zero
1000f6c8:	218cb03a 	or	r6,r4,r6
1000f6cc:	0007883a 	mov	r3,zero
1000f6d0:	003f3b06 	br	1000f3c0 <__alt_data_end+0xf800f3c0>
1000f6d4:	80002a26 	beq	r16,zero,1000f780 <__adddf3+0x51c>
1000f6d8:	0101ffc4 	movi	r4,2047
1000f6dc:	11006826 	beq	r2,r4,1000f880 <__adddf3+0x61c>
1000f6e0:	00c7c83a 	sub	r3,zero,r3
1000f6e4:	42002034 	orhi	r8,r8,128
1000f6e8:	01000e04 	movi	r4,56
1000f6ec:	20c07c16 	blt	r4,r3,1000f8e0 <__adddf3+0x67c>
1000f6f0:	010007c4 	movi	r4,31
1000f6f4:	20c0da16 	blt	r4,r3,1000fa60 <__adddf3+0x7fc>
1000f6f8:	01000804 	movi	r4,32
1000f6fc:	20c9c83a 	sub	r4,r4,r3
1000f700:	4114983a 	sll	r10,r8,r4
1000f704:	88cad83a 	srl	r5,r17,r3
1000f708:	8908983a 	sll	r4,r17,r4
1000f70c:	40c6d83a 	srl	r3,r8,r3
1000f710:	5162b03a 	or	r17,r10,r5
1000f714:	2008c03a 	cmpne	r4,r4,zero
1000f718:	8922b03a 	or	r17,r17,r4
1000f71c:	3463c83a 	sub	r17,r6,r17
1000f720:	48c7c83a 	sub	r3,r9,r3
1000f724:	344d803a 	cmpltu	r6,r6,r17
1000f728:	1991c83a 	sub	r8,r3,r6
1000f72c:	1021883a 	mov	r16,r2
1000f730:	3825883a 	mov	r18,r7
1000f734:	003f2706 	br	1000f3d4 <__alt_data_end+0xf800f3d4>
1000f738:	24d0b03a 	or	r8,r4,r19
1000f73c:	40001b1e 	bne	r8,zero,1000f7ac <__adddf3+0x548>
1000f740:	0005883a 	mov	r2,zero
1000f744:	0007883a 	mov	r3,zero
1000f748:	0021883a 	mov	r16,zero
1000f74c:	003f4d06 	br	1000f484 <__alt_data_end+0xf800f484>
1000f750:	008007c4 	movi	r2,31
1000f754:	11003c16 	blt	r2,r4,1000f848 <__adddf3+0x5e4>
1000f758:	00800804 	movi	r2,32
1000f75c:	1105c83a 	sub	r2,r2,r4
1000f760:	488e983a 	sll	r7,r9,r2
1000f764:	310ad83a 	srl	r5,r6,r4
1000f768:	3084983a 	sll	r2,r6,r2
1000f76c:	4912d83a 	srl	r9,r9,r4
1000f770:	394ab03a 	or	r5,r7,r5
1000f774:	1004c03a 	cmpne	r2,r2,zero
1000f778:	288ab03a 	or	r5,r5,r2
1000f77c:	003f5306 	br	1000f4cc <__alt_data_end+0xf800f4cc>
1000f780:	4448b03a 	or	r4,r8,r17
1000f784:	20003e26 	beq	r4,zero,1000f880 <__adddf3+0x61c>
1000f788:	00c6303a 	nor	r3,zero,r3
1000f78c:	18003a1e 	bne	r3,zero,1000f878 <__adddf3+0x614>
1000f790:	3463c83a 	sub	r17,r6,r17
1000f794:	4a07c83a 	sub	r3,r9,r8
1000f798:	344d803a 	cmpltu	r6,r6,r17
1000f79c:	1991c83a 	sub	r8,r3,r6
1000f7a0:	1021883a 	mov	r16,r2
1000f7a4:	3825883a 	mov	r18,r7
1000f7a8:	003f0a06 	br	1000f3d4 <__alt_data_end+0xf800f3d4>
1000f7ac:	2023883a 	mov	r17,r4
1000f7b0:	003f0d06 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000f7b4:	0081ffc4 	movi	r2,2047
1000f7b8:	80bf3f1e 	bne	r16,r2,1000f4b8 <__alt_data_end+0xf800f4b8>
1000f7bc:	003ec806 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f7c0:	0005883a 	mov	r2,zero
1000f7c4:	003fb106 	br	1000f68c <__alt_data_end+0xf800f68c>
1000f7c8:	0007883a 	mov	r3,zero
1000f7cc:	003fbc06 	br	1000f6c0 <__alt_data_end+0xf800f6c0>
1000f7d0:	4444b03a 	or	r2,r8,r17
1000f7d4:	8000871e 	bne	r16,zero,1000f9f4 <__adddf3+0x790>
1000f7d8:	1000ba26 	beq	r2,zero,1000fac4 <__adddf3+0x860>
1000f7dc:	4984b03a 	or	r2,r9,r6
1000f7e0:	103ebf26 	beq	r2,zero,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f7e4:	8985883a 	add	r2,r17,r6
1000f7e8:	4247883a 	add	r3,r8,r9
1000f7ec:	1451803a 	cmpltu	r8,r2,r17
1000f7f0:	40d1883a 	add	r8,r8,r3
1000f7f4:	40c0202c 	andhi	r3,r8,128
1000f7f8:	1023883a 	mov	r17,r2
1000f7fc:	183f1a26 	beq	r3,zero,1000f468 <__alt_data_end+0xf800f468>
1000f800:	00bfe034 	movhi	r2,65408
1000f804:	10bfffc4 	addi	r2,r2,-1
1000f808:	2021883a 	mov	r16,r4
1000f80c:	4090703a 	and	r8,r8,r2
1000f810:	003eb306 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f814:	4444b03a 	or	r2,r8,r17
1000f818:	8000291e 	bne	r16,zero,1000f8c0 <__adddf3+0x65c>
1000f81c:	10004b1e 	bne	r2,zero,1000f94c <__adddf3+0x6e8>
1000f820:	4990b03a 	or	r8,r9,r6
1000f824:	40008b26 	beq	r8,zero,1000fa54 <__adddf3+0x7f0>
1000f828:	4811883a 	mov	r8,r9
1000f82c:	3023883a 	mov	r17,r6
1000f830:	3825883a 	mov	r18,r7
1000f834:	003eaa06 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f838:	1021883a 	mov	r16,r2
1000f83c:	0011883a 	mov	r8,zero
1000f840:	0005883a 	mov	r2,zero
1000f844:	003f0f06 	br	1000f484 <__alt_data_end+0xf800f484>
1000f848:	217ff804 	addi	r5,r4,-32
1000f84c:	00800804 	movi	r2,32
1000f850:	494ad83a 	srl	r5,r9,r5
1000f854:	20807d26 	beq	r4,r2,1000fa4c <__adddf3+0x7e8>
1000f858:	00801004 	movi	r2,64
1000f85c:	1109c83a 	sub	r4,r2,r4
1000f860:	4912983a 	sll	r9,r9,r4
1000f864:	498cb03a 	or	r6,r9,r6
1000f868:	300cc03a 	cmpne	r6,r6,zero
1000f86c:	298ab03a 	or	r5,r5,r6
1000f870:	0013883a 	mov	r9,zero
1000f874:	003f1506 	br	1000f4cc <__alt_data_end+0xf800f4cc>
1000f878:	0101ffc4 	movi	r4,2047
1000f87c:	113f9a1e 	bne	r2,r4,1000f6e8 <__alt_data_end+0xf800f6e8>
1000f880:	4811883a 	mov	r8,r9
1000f884:	3023883a 	mov	r17,r6
1000f888:	1021883a 	mov	r16,r2
1000f88c:	3825883a 	mov	r18,r7
1000f890:	003e9306 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f894:	8000161e 	bne	r16,zero,1000f8f0 <__adddf3+0x68c>
1000f898:	444ab03a 	or	r5,r8,r17
1000f89c:	28005126 	beq	r5,zero,1000f9e4 <__adddf3+0x780>
1000f8a0:	0108303a 	nor	r4,zero,r4
1000f8a4:	20004d1e 	bne	r4,zero,1000f9dc <__adddf3+0x778>
1000f8a8:	89a3883a 	add	r17,r17,r6
1000f8ac:	4253883a 	add	r9,r8,r9
1000f8b0:	898d803a 	cmpltu	r6,r17,r6
1000f8b4:	3251883a 	add	r8,r6,r9
1000f8b8:	1021883a 	mov	r16,r2
1000f8bc:	003f0806 	br	1000f4e0 <__alt_data_end+0xf800f4e0>
1000f8c0:	1000301e 	bne	r2,zero,1000f984 <__adddf3+0x720>
1000f8c4:	4984b03a 	or	r2,r9,r6
1000f8c8:	10007126 	beq	r2,zero,1000fa90 <__adddf3+0x82c>
1000f8cc:	4811883a 	mov	r8,r9
1000f8d0:	3023883a 	mov	r17,r6
1000f8d4:	3825883a 	mov	r18,r7
1000f8d8:	0401ffc4 	movi	r16,2047
1000f8dc:	003e8006 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f8e0:	4462b03a 	or	r17,r8,r17
1000f8e4:	8822c03a 	cmpne	r17,r17,zero
1000f8e8:	0007883a 	mov	r3,zero
1000f8ec:	003f8b06 	br	1000f71c <__alt_data_end+0xf800f71c>
1000f8f0:	0141ffc4 	movi	r5,2047
1000f8f4:	11403b26 	beq	r2,r5,1000f9e4 <__adddf3+0x780>
1000f8f8:	0109c83a 	sub	r4,zero,r4
1000f8fc:	42002034 	orhi	r8,r8,128
1000f900:	01400e04 	movi	r5,56
1000f904:	29006716 	blt	r5,r4,1000faa4 <__adddf3+0x840>
1000f908:	014007c4 	movi	r5,31
1000f90c:	29007016 	blt	r5,r4,1000fad0 <__adddf3+0x86c>
1000f910:	01400804 	movi	r5,32
1000f914:	290bc83a 	sub	r5,r5,r4
1000f918:	4154983a 	sll	r10,r8,r5
1000f91c:	890ed83a 	srl	r7,r17,r4
1000f920:	894a983a 	sll	r5,r17,r5
1000f924:	4108d83a 	srl	r4,r8,r4
1000f928:	51e2b03a 	or	r17,r10,r7
1000f92c:	280ac03a 	cmpne	r5,r5,zero
1000f930:	8962b03a 	or	r17,r17,r5
1000f934:	89a3883a 	add	r17,r17,r6
1000f938:	2253883a 	add	r9,r4,r9
1000f93c:	898d803a 	cmpltu	r6,r17,r6
1000f940:	3251883a 	add	r8,r6,r9
1000f944:	1021883a 	mov	r16,r2
1000f948:	003ee506 	br	1000f4e0 <__alt_data_end+0xf800f4e0>
1000f94c:	4984b03a 	or	r2,r9,r6
1000f950:	103e6326 	beq	r2,zero,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f954:	8987c83a 	sub	r3,r17,r6
1000f958:	88c9803a 	cmpltu	r4,r17,r3
1000f95c:	4245c83a 	sub	r2,r8,r9
1000f960:	1105c83a 	sub	r2,r2,r4
1000f964:	1100202c 	andhi	r4,r2,128
1000f968:	203ebb26 	beq	r4,zero,1000f458 <__alt_data_end+0xf800f458>
1000f96c:	3463c83a 	sub	r17,r6,r17
1000f970:	4a07c83a 	sub	r3,r9,r8
1000f974:	344d803a 	cmpltu	r6,r6,r17
1000f978:	1991c83a 	sub	r8,r3,r6
1000f97c:	3825883a 	mov	r18,r7
1000f980:	003e5706 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f984:	4984b03a 	or	r2,r9,r6
1000f988:	10002e26 	beq	r2,zero,1000fa44 <__adddf3+0x7e0>
1000f98c:	4004d0fa 	srli	r2,r8,3
1000f990:	8822d0fa 	srli	r17,r17,3
1000f994:	4010977a 	slli	r8,r8,29
1000f998:	10c0022c 	andhi	r3,r2,8
1000f99c:	4462b03a 	or	r17,r8,r17
1000f9a0:	18000826 	beq	r3,zero,1000f9c4 <__adddf3+0x760>
1000f9a4:	4808d0fa 	srli	r4,r9,3
1000f9a8:	20c0022c 	andhi	r3,r4,8
1000f9ac:	1800051e 	bne	r3,zero,1000f9c4 <__adddf3+0x760>
1000f9b0:	300cd0fa 	srli	r6,r6,3
1000f9b4:	4806977a 	slli	r3,r9,29
1000f9b8:	2005883a 	mov	r2,r4
1000f9bc:	3825883a 	mov	r18,r7
1000f9c0:	19a2b03a 	or	r17,r3,r6
1000f9c4:	8810d77a 	srli	r8,r17,29
1000f9c8:	100490fa 	slli	r2,r2,3
1000f9cc:	882290fa 	slli	r17,r17,3
1000f9d0:	0401ffc4 	movi	r16,2047
1000f9d4:	4090b03a 	or	r8,r8,r2
1000f9d8:	003e4106 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f9dc:	0141ffc4 	movi	r5,2047
1000f9e0:	117fc71e 	bne	r2,r5,1000f900 <__alt_data_end+0xf800f900>
1000f9e4:	4811883a 	mov	r8,r9
1000f9e8:	3023883a 	mov	r17,r6
1000f9ec:	1021883a 	mov	r16,r2
1000f9f0:	003e3b06 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000f9f4:	10002f26 	beq	r2,zero,1000fab4 <__adddf3+0x850>
1000f9f8:	4984b03a 	or	r2,r9,r6
1000f9fc:	10001126 	beq	r2,zero,1000fa44 <__adddf3+0x7e0>
1000fa00:	4004d0fa 	srli	r2,r8,3
1000fa04:	8822d0fa 	srli	r17,r17,3
1000fa08:	4010977a 	slli	r8,r8,29
1000fa0c:	10c0022c 	andhi	r3,r2,8
1000fa10:	4462b03a 	or	r17,r8,r17
1000fa14:	183feb26 	beq	r3,zero,1000f9c4 <__alt_data_end+0xf800f9c4>
1000fa18:	4808d0fa 	srli	r4,r9,3
1000fa1c:	20c0022c 	andhi	r3,r4,8
1000fa20:	183fe81e 	bne	r3,zero,1000f9c4 <__alt_data_end+0xf800f9c4>
1000fa24:	300cd0fa 	srli	r6,r6,3
1000fa28:	4806977a 	slli	r3,r9,29
1000fa2c:	2005883a 	mov	r2,r4
1000fa30:	19a2b03a 	or	r17,r3,r6
1000fa34:	003fe306 	br	1000f9c4 <__alt_data_end+0xf800f9c4>
1000fa38:	0011883a 	mov	r8,zero
1000fa3c:	0005883a 	mov	r2,zero
1000fa40:	003e3f06 	br	1000f340 <__alt_data_end+0xf800f340>
1000fa44:	0401ffc4 	movi	r16,2047
1000fa48:	003e2506 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000fa4c:	0013883a 	mov	r9,zero
1000fa50:	003f8406 	br	1000f864 <__alt_data_end+0xf800f864>
1000fa54:	0005883a 	mov	r2,zero
1000fa58:	0007883a 	mov	r3,zero
1000fa5c:	003e8906 	br	1000f484 <__alt_data_end+0xf800f484>
1000fa60:	197ff804 	addi	r5,r3,-32
1000fa64:	01000804 	movi	r4,32
1000fa68:	414ad83a 	srl	r5,r8,r5
1000fa6c:	19002426 	beq	r3,r4,1000fb00 <__adddf3+0x89c>
1000fa70:	01001004 	movi	r4,64
1000fa74:	20c7c83a 	sub	r3,r4,r3
1000fa78:	40c6983a 	sll	r3,r8,r3
1000fa7c:	1c46b03a 	or	r3,r3,r17
1000fa80:	1806c03a 	cmpne	r3,r3,zero
1000fa84:	28e2b03a 	or	r17,r5,r3
1000fa88:	0007883a 	mov	r3,zero
1000fa8c:	003f2306 	br	1000f71c <__alt_data_end+0xf800f71c>
1000fa90:	0007883a 	mov	r3,zero
1000fa94:	5811883a 	mov	r8,r11
1000fa98:	00bfffc4 	movi	r2,-1
1000fa9c:	0401ffc4 	movi	r16,2047
1000faa0:	003e7806 	br	1000f484 <__alt_data_end+0xf800f484>
1000faa4:	4462b03a 	or	r17,r8,r17
1000faa8:	8822c03a 	cmpne	r17,r17,zero
1000faac:	0009883a 	mov	r4,zero
1000fab0:	003fa006 	br	1000f934 <__alt_data_end+0xf800f934>
1000fab4:	4811883a 	mov	r8,r9
1000fab8:	3023883a 	mov	r17,r6
1000fabc:	0401ffc4 	movi	r16,2047
1000fac0:	003e0706 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000fac4:	4811883a 	mov	r8,r9
1000fac8:	3023883a 	mov	r17,r6
1000facc:	003e0406 	br	1000f2e0 <__alt_data_end+0xf800f2e0>
1000fad0:	21fff804 	addi	r7,r4,-32
1000fad4:	01400804 	movi	r5,32
1000fad8:	41ced83a 	srl	r7,r8,r7
1000fadc:	21400a26 	beq	r4,r5,1000fb08 <__adddf3+0x8a4>
1000fae0:	01401004 	movi	r5,64
1000fae4:	2909c83a 	sub	r4,r5,r4
1000fae8:	4108983a 	sll	r4,r8,r4
1000faec:	2448b03a 	or	r4,r4,r17
1000faf0:	2008c03a 	cmpne	r4,r4,zero
1000faf4:	3922b03a 	or	r17,r7,r4
1000faf8:	0009883a 	mov	r4,zero
1000fafc:	003f8d06 	br	1000f934 <__alt_data_end+0xf800f934>
1000fb00:	0007883a 	mov	r3,zero
1000fb04:	003fdd06 	br	1000fa7c <__alt_data_end+0xf800fa7c>
1000fb08:	0009883a 	mov	r4,zero
1000fb0c:	003ff706 	br	1000faec <__alt_data_end+0xf800faec>

1000fb10 <__divdf3>:
1000fb10:	defff004 	addi	sp,sp,-64
1000fb14:	dc800815 	stw	r18,32(sp)
1000fb18:	2824d53a 	srli	r18,r5,20
1000fb1c:	dd800c15 	stw	r22,48(sp)
1000fb20:	282cd7fa 	srli	r22,r5,31
1000fb24:	dc000615 	stw	r16,24(sp)
1000fb28:	04000434 	movhi	r16,16
1000fb2c:	843fffc4 	addi	r16,r16,-1
1000fb30:	dfc00f15 	stw	ra,60(sp)
1000fb34:	df000e15 	stw	fp,56(sp)
1000fb38:	ddc00d15 	stw	r23,52(sp)
1000fb3c:	dd400b15 	stw	r21,44(sp)
1000fb40:	dd000a15 	stw	r20,40(sp)
1000fb44:	dcc00915 	stw	r19,36(sp)
1000fb48:	dc400715 	stw	r17,28(sp)
1000fb4c:	9481ffcc 	andi	r18,r18,2047
1000fb50:	2c20703a 	and	r16,r5,r16
1000fb54:	b2003fcc 	andi	r8,r22,255
1000fb58:	90006126 	beq	r18,zero,1000fce0 <__divdf3+0x1d0>
1000fb5c:	0081ffc4 	movi	r2,2047
1000fb60:	202b883a 	mov	r21,r4
1000fb64:	90803726 	beq	r18,r2,1000fc44 <__divdf3+0x134>
1000fb68:	80800434 	orhi	r2,r16,16
1000fb6c:	100490fa 	slli	r2,r2,3
1000fb70:	2020d77a 	srli	r16,r4,29
1000fb74:	202a90fa 	slli	r21,r4,3
1000fb78:	94bf0044 	addi	r18,r18,-1023
1000fb7c:	80a0b03a 	or	r16,r16,r2
1000fb80:	0013883a 	mov	r9,zero
1000fb84:	000b883a 	mov	r5,zero
1000fb88:	3806d53a 	srli	r3,r7,20
1000fb8c:	382ed7fa 	srli	r23,r7,31
1000fb90:	04400434 	movhi	r17,16
1000fb94:	8c7fffc4 	addi	r17,r17,-1
1000fb98:	18c1ffcc 	andi	r3,r3,2047
1000fb9c:	3029883a 	mov	r20,r6
1000fba0:	3c62703a 	and	r17,r7,r17
1000fba4:	bf003fcc 	andi	fp,r23,255
1000fba8:	18006e26 	beq	r3,zero,1000fd64 <__divdf3+0x254>
1000fbac:	0081ffc4 	movi	r2,2047
1000fbb0:	18806626 	beq	r3,r2,1000fd4c <__divdf3+0x23c>
1000fbb4:	88800434 	orhi	r2,r17,16
1000fbb8:	100490fa 	slli	r2,r2,3
1000fbbc:	3022d77a 	srli	r17,r6,29
1000fbc0:	302890fa 	slli	r20,r6,3
1000fbc4:	18ff0044 	addi	r3,r3,-1023
1000fbc8:	88a2b03a 	or	r17,r17,r2
1000fbcc:	000f883a 	mov	r7,zero
1000fbd0:	b5e6f03a 	xor	r19,r22,r23
1000fbd4:	3a4cb03a 	or	r6,r7,r9
1000fbd8:	008003c4 	movi	r2,15
1000fbdc:	9809883a 	mov	r4,r19
1000fbe0:	90c7c83a 	sub	r3,r18,r3
1000fbe4:	9cc03fcc 	andi	r19,r19,255
1000fbe8:	11809636 	bltu	r2,r6,1000fe44 <__divdf3+0x334>
1000fbec:	300c90ba 	slli	r6,r6,2
1000fbf0:	00840074 	movhi	r2,4097
1000fbf4:	10bf0104 	addi	r2,r2,-1020
1000fbf8:	308d883a 	add	r6,r6,r2
1000fbfc:	30800017 	ldw	r2,0(r6)
1000fc00:	1000683a 	jmp	r2
1000fc04:	1000fe44 	addi	zero,r2,1017
1000fc08:	1000fc7c 	xorhi	zero,r2,1009
1000fc0c:	1000fe34 	orhi	zero,r2,1016
1000fc10:	1000fc70 	cmpltui	zero,r2,1009
1000fc14:	1000fe34 	orhi	zero,r2,1016
1000fc18:	1000fe08 	cmpgei	zero,r2,1016
1000fc1c:	1000fe34 	orhi	zero,r2,1016
1000fc20:	1000fc70 	cmpltui	zero,r2,1009
1000fc24:	1000fc7c 	xorhi	zero,r2,1009
1000fc28:	1000fc7c 	xorhi	zero,r2,1009
1000fc2c:	1000fe08 	cmpgei	zero,r2,1016
1000fc30:	1000fc70 	cmpltui	zero,r2,1009
1000fc34:	1000fc60 	cmpeqi	zero,r2,1009
1000fc38:	1000fc60 	cmpeqi	zero,r2,1009
1000fc3c:	1000fc60 	cmpeqi	zero,r2,1009
1000fc40:	100101cc 	andi	zero,r2,1031
1000fc44:	2404b03a 	or	r2,r4,r16
1000fc48:	10006c1e 	bne	r2,zero,1000fdfc <__divdf3+0x2ec>
1000fc4c:	02400204 	movi	r9,8
1000fc50:	0021883a 	mov	r16,zero
1000fc54:	002b883a 	mov	r21,zero
1000fc58:	01400084 	movi	r5,2
1000fc5c:	003fca06 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fc60:	8023883a 	mov	r17,r16
1000fc64:	a829883a 	mov	r20,r21
1000fc68:	4039883a 	mov	fp,r8
1000fc6c:	280f883a 	mov	r7,r5
1000fc70:	00800084 	movi	r2,2
1000fc74:	3881601e 	bne	r7,r2,100101f8 <__divdf3+0x6e8>
1000fc78:	e027883a 	mov	r19,fp
1000fc7c:	9900004c 	andi	r4,r19,1
1000fc80:	0081ffc4 	movi	r2,2047
1000fc84:	0021883a 	mov	r16,zero
1000fc88:	002b883a 	mov	r21,zero
1000fc8c:	1004953a 	slli	r2,r2,20
1000fc90:	20c03fcc 	andi	r3,r4,255
1000fc94:	01400434 	movhi	r5,16
1000fc98:	297fffc4 	addi	r5,r5,-1
1000fc9c:	180697fa 	slli	r3,r3,31
1000fca0:	8160703a 	and	r16,r16,r5
1000fca4:	80a0b03a 	or	r16,r16,r2
1000fca8:	80c6b03a 	or	r3,r16,r3
1000fcac:	a805883a 	mov	r2,r21
1000fcb0:	dfc00f17 	ldw	ra,60(sp)
1000fcb4:	df000e17 	ldw	fp,56(sp)
1000fcb8:	ddc00d17 	ldw	r23,52(sp)
1000fcbc:	dd800c17 	ldw	r22,48(sp)
1000fcc0:	dd400b17 	ldw	r21,44(sp)
1000fcc4:	dd000a17 	ldw	r20,40(sp)
1000fcc8:	dcc00917 	ldw	r19,36(sp)
1000fccc:	dc800817 	ldw	r18,32(sp)
1000fcd0:	dc400717 	ldw	r17,28(sp)
1000fcd4:	dc000617 	ldw	r16,24(sp)
1000fcd8:	dec01004 	addi	sp,sp,64
1000fcdc:	f800283a 	ret
1000fce0:	2404b03a 	or	r2,r4,r16
1000fce4:	2023883a 	mov	r17,r4
1000fce8:	10003f26 	beq	r2,zero,1000fde8 <__divdf3+0x2d8>
1000fcec:	80015e26 	beq	r16,zero,10010268 <__divdf3+0x758>
1000fcf0:	8009883a 	mov	r4,r16
1000fcf4:	d9800215 	stw	r6,8(sp)
1000fcf8:	d9c00515 	stw	r7,20(sp)
1000fcfc:	da000415 	stw	r8,16(sp)
1000fd00:	0011aa40 	call	10011aa4 <__clzsi2>
1000fd04:	d9800217 	ldw	r6,8(sp)
1000fd08:	d9c00517 	ldw	r7,20(sp)
1000fd0c:	da000417 	ldw	r8,16(sp)
1000fd10:	113ffd44 	addi	r4,r2,-11
1000fd14:	00c00704 	movi	r3,28
1000fd18:	19014f16 	blt	r3,r4,10010258 <__divdf3+0x748>
1000fd1c:	00c00744 	movi	r3,29
1000fd20:	157ffe04 	addi	r21,r2,-8
1000fd24:	1907c83a 	sub	r3,r3,r4
1000fd28:	8560983a 	sll	r16,r16,r21
1000fd2c:	88c6d83a 	srl	r3,r17,r3
1000fd30:	8d6a983a 	sll	r21,r17,r21
1000fd34:	1c20b03a 	or	r16,r3,r16
1000fd38:	1080fcc4 	addi	r2,r2,1011
1000fd3c:	00a5c83a 	sub	r18,zero,r2
1000fd40:	0013883a 	mov	r9,zero
1000fd44:	000b883a 	mov	r5,zero
1000fd48:	003f8f06 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fd4c:	3444b03a 	or	r2,r6,r17
1000fd50:	1000231e 	bne	r2,zero,1000fde0 <__divdf3+0x2d0>
1000fd54:	0023883a 	mov	r17,zero
1000fd58:	0029883a 	mov	r20,zero
1000fd5c:	01c00084 	movi	r7,2
1000fd60:	003f9b06 	br	1000fbd0 <__alt_data_end+0xf800fbd0>
1000fd64:	3444b03a 	or	r2,r6,r17
1000fd68:	10001926 	beq	r2,zero,1000fdd0 <__divdf3+0x2c0>
1000fd6c:	88014b26 	beq	r17,zero,1001029c <__divdf3+0x78c>
1000fd70:	8809883a 	mov	r4,r17
1000fd74:	d9400115 	stw	r5,4(sp)
1000fd78:	d9800215 	stw	r6,8(sp)
1000fd7c:	da000415 	stw	r8,16(sp)
1000fd80:	da400315 	stw	r9,12(sp)
1000fd84:	0011aa40 	call	10011aa4 <__clzsi2>
1000fd88:	d9400117 	ldw	r5,4(sp)
1000fd8c:	d9800217 	ldw	r6,8(sp)
1000fd90:	da000417 	ldw	r8,16(sp)
1000fd94:	da400317 	ldw	r9,12(sp)
1000fd98:	113ffd44 	addi	r4,r2,-11
1000fd9c:	00c00704 	movi	r3,28
1000fda0:	19013a16 	blt	r3,r4,1001028c <__divdf3+0x77c>
1000fda4:	00c00744 	movi	r3,29
1000fda8:	153ffe04 	addi	r20,r2,-8
1000fdac:	1907c83a 	sub	r3,r3,r4
1000fdb0:	8d22983a 	sll	r17,r17,r20
1000fdb4:	30c6d83a 	srl	r3,r6,r3
1000fdb8:	3528983a 	sll	r20,r6,r20
1000fdbc:	1c62b03a 	or	r17,r3,r17
1000fdc0:	1080fcc4 	addi	r2,r2,1011
1000fdc4:	0087c83a 	sub	r3,zero,r2
1000fdc8:	000f883a 	mov	r7,zero
1000fdcc:	003f8006 	br	1000fbd0 <__alt_data_end+0xf800fbd0>
1000fdd0:	0023883a 	mov	r17,zero
1000fdd4:	0029883a 	mov	r20,zero
1000fdd8:	01c00044 	movi	r7,1
1000fddc:	003f7c06 	br	1000fbd0 <__alt_data_end+0xf800fbd0>
1000fde0:	01c000c4 	movi	r7,3
1000fde4:	003f7a06 	br	1000fbd0 <__alt_data_end+0xf800fbd0>
1000fde8:	02400104 	movi	r9,4
1000fdec:	0021883a 	mov	r16,zero
1000fdf0:	002b883a 	mov	r21,zero
1000fdf4:	01400044 	movi	r5,1
1000fdf8:	003f6306 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fdfc:	02400304 	movi	r9,12
1000fe00:	014000c4 	movi	r5,3
1000fe04:	003f6006 	br	1000fb88 <__alt_data_end+0xf800fb88>
1000fe08:	04000434 	movhi	r16,16
1000fe0c:	0009883a 	mov	r4,zero
1000fe10:	843fffc4 	addi	r16,r16,-1
1000fe14:	057fffc4 	movi	r21,-1
1000fe18:	0081ffc4 	movi	r2,2047
1000fe1c:	003f9b06 	br	1000fc8c <__alt_data_end+0xf800fc8c>
1000fe20:	00c00044 	movi	r3,1
1000fe24:	1887c83a 	sub	r3,r3,r2
1000fe28:	01000e04 	movi	r4,56
1000fe2c:	20c1530e 	bge	r4,r3,1001037c <__divdf3+0x86c>
1000fe30:	9900004c 	andi	r4,r19,1
1000fe34:	0005883a 	mov	r2,zero
1000fe38:	0021883a 	mov	r16,zero
1000fe3c:	002b883a 	mov	r21,zero
1000fe40:	003f9206 	br	1000fc8c <__alt_data_end+0xf800fc8c>
1000fe44:	8c012e36 	bltu	r17,r16,10010300 <__divdf3+0x7f0>
1000fe48:	84412c26 	beq	r16,r17,100102fc <__divdf3+0x7ec>
1000fe4c:	a82f883a 	mov	r23,r21
1000fe50:	18ffffc4 	addi	r3,r3,-1
1000fe54:	002b883a 	mov	r21,zero
1000fe58:	a004d63a 	srli	r2,r20,24
1000fe5c:	8822923a 	slli	r17,r17,8
1000fe60:	a028923a 	slli	r20,r20,8
1000fe64:	8009883a 	mov	r4,r16
1000fe68:	88acb03a 	or	r22,r17,r2
1000fe6c:	dd000015 	stw	r20,0(sp)
1000fe70:	b028d43a 	srli	r20,r22,16
1000fe74:	d8c00215 	stw	r3,8(sp)
1000fe78:	b4bfffcc 	andi	r18,r22,65535
1000fe7c:	a00b883a 	mov	r5,r20
1000fe80:	000f1a80 	call	1000f1a8 <__udivsi3>
1000fe84:	100b883a 	mov	r5,r2
1000fe88:	9009883a 	mov	r4,r18
1000fe8c:	1023883a 	mov	r17,r2
1000fe90:	0004bc80 	call	10004bc8 <__mulsi3>
1000fe94:	8009883a 	mov	r4,r16
1000fe98:	a00b883a 	mov	r5,r20
1000fe9c:	1039883a 	mov	fp,r2
1000fea0:	000f20c0 	call	1000f20c <__umodsi3>
1000fea4:	1004943a 	slli	r2,r2,16
1000fea8:	b808d43a 	srli	r4,r23,16
1000feac:	d8c00217 	ldw	r3,8(sp)
1000feb0:	2084b03a 	or	r2,r4,r2
1000feb4:	1700062e 	bgeu	r2,fp,1000fed0 <__divdf3+0x3c0>
1000feb8:	1585883a 	add	r2,r2,r22
1000febc:	893fffc4 	addi	r4,r17,-1
1000fec0:	15811d36 	bltu	r2,r22,10010338 <__divdf3+0x828>
1000fec4:	17011c2e 	bgeu	r2,fp,10010338 <__divdf3+0x828>
1000fec8:	8c7fff84 	addi	r17,r17,-2
1000fecc:	1585883a 	add	r2,r2,r22
1000fed0:	1739c83a 	sub	fp,r2,fp
1000fed4:	a00b883a 	mov	r5,r20
1000fed8:	e009883a 	mov	r4,fp
1000fedc:	d8c00215 	stw	r3,8(sp)
1000fee0:	000f1a80 	call	1000f1a8 <__udivsi3>
1000fee4:	100b883a 	mov	r5,r2
1000fee8:	9009883a 	mov	r4,r18
1000feec:	1021883a 	mov	r16,r2
1000fef0:	0004bc80 	call	10004bc8 <__mulsi3>
1000fef4:	a00b883a 	mov	r5,r20
1000fef8:	e009883a 	mov	r4,fp
1000fefc:	d8800415 	stw	r2,16(sp)
1000ff00:	000f20c0 	call	1000f20c <__umodsi3>
1000ff04:	1004943a 	slli	r2,r2,16
1000ff08:	da000417 	ldw	r8,16(sp)
1000ff0c:	bdffffcc 	andi	r23,r23,65535
1000ff10:	b884b03a 	or	r2,r23,r2
1000ff14:	d8c00217 	ldw	r3,8(sp)
1000ff18:	1200062e 	bgeu	r2,r8,1000ff34 <__divdf3+0x424>
1000ff1c:	1585883a 	add	r2,r2,r22
1000ff20:	813fffc4 	addi	r4,r16,-1
1000ff24:	15810236 	bltu	r2,r22,10010330 <__divdf3+0x820>
1000ff28:	1201012e 	bgeu	r2,r8,10010330 <__divdf3+0x820>
1000ff2c:	843fff84 	addi	r16,r16,-2
1000ff30:	1585883a 	add	r2,r2,r22
1000ff34:	8822943a 	slli	r17,r17,16
1000ff38:	d9800017 	ldw	r6,0(sp)
1000ff3c:	1211c83a 	sub	r8,r2,r8
1000ff40:	8c22b03a 	or	r17,r17,r16
1000ff44:	373fffcc 	andi	fp,r6,65535
1000ff48:	8abfffcc 	andi	r10,r17,65535
1000ff4c:	8820d43a 	srli	r16,r17,16
1000ff50:	5009883a 	mov	r4,r10
1000ff54:	e00b883a 	mov	r5,fp
1000ff58:	302ed43a 	srli	r23,r6,16
1000ff5c:	d8c00215 	stw	r3,8(sp)
1000ff60:	da000415 	stw	r8,16(sp)
1000ff64:	da800115 	stw	r10,4(sp)
1000ff68:	0004bc80 	call	10004bc8 <__mulsi3>
1000ff6c:	800b883a 	mov	r5,r16
1000ff70:	e009883a 	mov	r4,fp
1000ff74:	d8800515 	stw	r2,20(sp)
1000ff78:	0004bc80 	call	10004bc8 <__mulsi3>
1000ff7c:	8009883a 	mov	r4,r16
1000ff80:	b80b883a 	mov	r5,r23
1000ff84:	d8800315 	stw	r2,12(sp)
1000ff88:	0004bc80 	call	10004bc8 <__mulsi3>
1000ff8c:	da800117 	ldw	r10,4(sp)
1000ff90:	b80b883a 	mov	r5,r23
1000ff94:	1021883a 	mov	r16,r2
1000ff98:	5009883a 	mov	r4,r10
1000ff9c:	0004bc80 	call	10004bc8 <__mulsi3>
1000ffa0:	d9c00517 	ldw	r7,20(sp)
1000ffa4:	da400317 	ldw	r9,12(sp)
1000ffa8:	d8c00217 	ldw	r3,8(sp)
1000ffac:	3808d43a 	srli	r4,r7,16
1000ffb0:	1245883a 	add	r2,r2,r9
1000ffb4:	da000417 	ldw	r8,16(sp)
1000ffb8:	2085883a 	add	r2,r4,r2
1000ffbc:	1240022e 	bgeu	r2,r9,1000ffc8 <__divdf3+0x4b8>
1000ffc0:	01000074 	movhi	r4,1
1000ffc4:	8121883a 	add	r16,r16,r4
1000ffc8:	1008d43a 	srli	r4,r2,16
1000ffcc:	1004943a 	slli	r2,r2,16
1000ffd0:	39ffffcc 	andi	r7,r7,65535
1000ffd4:	2409883a 	add	r4,r4,r16
1000ffd8:	11c5883a 	add	r2,r2,r7
1000ffdc:	4100bb36 	bltu	r8,r4,100102cc <__divdf3+0x7bc>
1000ffe0:	4100d726 	beq	r8,r4,10010340 <__divdf3+0x830>
1000ffe4:	4109c83a 	sub	r4,r8,r4
1000ffe8:	a8a1c83a 	sub	r16,r21,r2
1000ffec:	ac2b803a 	cmpltu	r21,r21,r16
1000fff0:	256bc83a 	sub	r21,r4,r21
1000fff4:	b540d926 	beq	r22,r21,1001035c <__divdf3+0x84c>
1000fff8:	a00b883a 	mov	r5,r20
1000fffc:	a809883a 	mov	r4,r21
10010000:	d8c00215 	stw	r3,8(sp)
10010004:	000f1a80 	call	1000f1a8 <__udivsi3>
10010008:	100b883a 	mov	r5,r2
1001000c:	9009883a 	mov	r4,r18
10010010:	d8800515 	stw	r2,20(sp)
10010014:	0004bc80 	call	10004bc8 <__mulsi3>
10010018:	a809883a 	mov	r4,r21
1001001c:	a00b883a 	mov	r5,r20
10010020:	d8800415 	stw	r2,16(sp)
10010024:	000f20c0 	call	1000f20c <__umodsi3>
10010028:	1004943a 	slli	r2,r2,16
1001002c:	8008d43a 	srli	r4,r16,16
10010030:	da000417 	ldw	r8,16(sp)
10010034:	d8c00217 	ldw	r3,8(sp)
10010038:	2084b03a 	or	r2,r4,r2
1001003c:	d9c00517 	ldw	r7,20(sp)
10010040:	1200062e 	bgeu	r2,r8,1001005c <__divdf3+0x54c>
10010044:	1585883a 	add	r2,r2,r22
10010048:	393fffc4 	addi	r4,r7,-1
1001004c:	1580c536 	bltu	r2,r22,10010364 <__divdf3+0x854>
10010050:	1200c42e 	bgeu	r2,r8,10010364 <__divdf3+0x854>
10010054:	39ffff84 	addi	r7,r7,-2
10010058:	1585883a 	add	r2,r2,r22
1001005c:	122bc83a 	sub	r21,r2,r8
10010060:	a00b883a 	mov	r5,r20
10010064:	a809883a 	mov	r4,r21
10010068:	d8c00215 	stw	r3,8(sp)
1001006c:	d9c00515 	stw	r7,20(sp)
10010070:	000f1a80 	call	1000f1a8 <__udivsi3>
10010074:	9009883a 	mov	r4,r18
10010078:	100b883a 	mov	r5,r2
1001007c:	d8800415 	stw	r2,16(sp)
10010080:	0004bc80 	call	10004bc8 <__mulsi3>
10010084:	a809883a 	mov	r4,r21
10010088:	a00b883a 	mov	r5,r20
1001008c:	1025883a 	mov	r18,r2
10010090:	000f20c0 	call	1000f20c <__umodsi3>
10010094:	1004943a 	slli	r2,r2,16
10010098:	813fffcc 	andi	r4,r16,65535
1001009c:	d8c00217 	ldw	r3,8(sp)
100100a0:	20a0b03a 	or	r16,r4,r2
100100a4:	d9c00517 	ldw	r7,20(sp)
100100a8:	da000417 	ldw	r8,16(sp)
100100ac:	8480062e 	bgeu	r16,r18,100100c8 <__divdf3+0x5b8>
100100b0:	85a1883a 	add	r16,r16,r22
100100b4:	40bfffc4 	addi	r2,r8,-1
100100b8:	8580ac36 	bltu	r16,r22,1001036c <__divdf3+0x85c>
100100bc:	8480ab2e 	bgeu	r16,r18,1001036c <__divdf3+0x85c>
100100c0:	423fff84 	addi	r8,r8,-2
100100c4:	85a1883a 	add	r16,r16,r22
100100c8:	3804943a 	slli	r2,r7,16
100100cc:	84a1c83a 	sub	r16,r16,r18
100100d0:	e009883a 	mov	r4,fp
100100d4:	1228b03a 	or	r20,r2,r8
100100d8:	a1ffffcc 	andi	r7,r20,65535
100100dc:	a024d43a 	srli	r18,r20,16
100100e0:	380b883a 	mov	r5,r7
100100e4:	d8c00215 	stw	r3,8(sp)
100100e8:	d9c00515 	stw	r7,20(sp)
100100ec:	0004bc80 	call	10004bc8 <__mulsi3>
100100f0:	900b883a 	mov	r5,r18
100100f4:	e009883a 	mov	r4,fp
100100f8:	102b883a 	mov	r21,r2
100100fc:	0004bc80 	call	10004bc8 <__mulsi3>
10010100:	900b883a 	mov	r5,r18
10010104:	b809883a 	mov	r4,r23
10010108:	1039883a 	mov	fp,r2
1001010c:	0004bc80 	call	10004bc8 <__mulsi3>
10010110:	d9c00517 	ldw	r7,20(sp)
10010114:	b80b883a 	mov	r5,r23
10010118:	1025883a 	mov	r18,r2
1001011c:	3809883a 	mov	r4,r7
10010120:	0004bc80 	call	10004bc8 <__mulsi3>
10010124:	a808d43a 	srli	r4,r21,16
10010128:	1705883a 	add	r2,r2,fp
1001012c:	d8c00217 	ldw	r3,8(sp)
10010130:	2085883a 	add	r2,r4,r2
10010134:	1700022e 	bgeu	r2,fp,10010140 <__divdf3+0x630>
10010138:	01000074 	movhi	r4,1
1001013c:	9125883a 	add	r18,r18,r4
10010140:	1008d43a 	srli	r4,r2,16
10010144:	1004943a 	slli	r2,r2,16
10010148:	ad7fffcc 	andi	r21,r21,65535
1001014c:	2489883a 	add	r4,r4,r18
10010150:	1545883a 	add	r2,r2,r21
10010154:	81003836 	bltu	r16,r4,10010238 <__divdf3+0x728>
10010158:	81003626 	beq	r16,r4,10010234 <__divdf3+0x724>
1001015c:	a5000054 	ori	r20,r20,1
10010160:	1880ffc4 	addi	r2,r3,1023
10010164:	00bf2e0e 	bge	zero,r2,1000fe20 <__alt_data_end+0xf800fe20>
10010168:	a10001cc 	andi	r4,r20,7
1001016c:	20000726 	beq	r4,zero,1001018c <__divdf3+0x67c>
10010170:	a10003cc 	andi	r4,r20,15
10010174:	01400104 	movi	r5,4
10010178:	21400426 	beq	r4,r5,1001018c <__divdf3+0x67c>
1001017c:	a149883a 	add	r4,r20,r5
10010180:	2529803a 	cmpltu	r20,r4,r20
10010184:	8d23883a 	add	r17,r17,r20
10010188:	2029883a 	mov	r20,r4
1001018c:	8900402c 	andhi	r4,r17,256
10010190:	20000426 	beq	r4,zero,100101a4 <__divdf3+0x694>
10010194:	18810004 	addi	r2,r3,1024
10010198:	00ffc034 	movhi	r3,65280
1001019c:	18ffffc4 	addi	r3,r3,-1
100101a0:	88e2703a 	and	r17,r17,r3
100101a4:	00c1ff84 	movi	r3,2046
100101a8:	18beb416 	blt	r3,r2,1000fc7c <__alt_data_end+0xf800fc7c>
100101ac:	a028d0fa 	srli	r20,r20,3
100101b0:	882a977a 	slli	r21,r17,29
100101b4:	8820927a 	slli	r16,r17,9
100101b8:	1081ffcc 	andi	r2,r2,2047
100101bc:	ad2ab03a 	or	r21,r21,r20
100101c0:	8020d33a 	srli	r16,r16,12
100101c4:	9900004c 	andi	r4,r19,1
100101c8:	003eb006 	br	1000fc8c <__alt_data_end+0xf800fc8c>
100101cc:	8080022c 	andhi	r2,r16,8
100101d0:	10001226 	beq	r2,zero,1001021c <__divdf3+0x70c>
100101d4:	8880022c 	andhi	r2,r17,8
100101d8:	1000101e 	bne	r2,zero,1001021c <__divdf3+0x70c>
100101dc:	00800434 	movhi	r2,16
100101e0:	8c000234 	orhi	r16,r17,8
100101e4:	10bfffc4 	addi	r2,r2,-1
100101e8:	b809883a 	mov	r4,r23
100101ec:	80a0703a 	and	r16,r16,r2
100101f0:	a02b883a 	mov	r21,r20
100101f4:	003f0806 	br	1000fe18 <__alt_data_end+0xf800fe18>
100101f8:	008000c4 	movi	r2,3
100101fc:	3880b126 	beq	r7,r2,100104c4 <__divdf3+0x9b4>
10010200:	00800044 	movi	r2,1
10010204:	38805b1e 	bne	r7,r2,10010374 <__divdf3+0x864>
10010208:	e009883a 	mov	r4,fp
1001020c:	0005883a 	mov	r2,zero
10010210:	0021883a 	mov	r16,zero
10010214:	002b883a 	mov	r21,zero
10010218:	003e9c06 	br	1000fc8c <__alt_data_end+0xf800fc8c>
1001021c:	00800434 	movhi	r2,16
10010220:	84000234 	orhi	r16,r16,8
10010224:	10bfffc4 	addi	r2,r2,-1
10010228:	b009883a 	mov	r4,r22
1001022c:	80a0703a 	and	r16,r16,r2
10010230:	003ef906 	br	1000fe18 <__alt_data_end+0xf800fe18>
10010234:	103fca26 	beq	r2,zero,10010160 <__alt_data_end+0xf8010160>
10010238:	b421883a 	add	r16,r22,r16
1001023c:	a17fffc4 	addi	r5,r20,-1
10010240:	8580422e 	bgeu	r16,r22,1001034c <__divdf3+0x83c>
10010244:	2829883a 	mov	r20,r5
10010248:	813fc41e 	bne	r16,r4,1001015c <__alt_data_end+0xf801015c>
1001024c:	d9800017 	ldw	r6,0(sp)
10010250:	30bfc21e 	bne	r6,r2,1001015c <__alt_data_end+0xf801015c>
10010254:	003fc206 	br	10010160 <__alt_data_end+0xf8010160>
10010258:	143ff604 	addi	r16,r2,-40
1001025c:	8c20983a 	sll	r16,r17,r16
10010260:	002b883a 	mov	r21,zero
10010264:	003eb406 	br	1000fd38 <__alt_data_end+0xf800fd38>
10010268:	d9800215 	stw	r6,8(sp)
1001026c:	d9c00515 	stw	r7,20(sp)
10010270:	da000415 	stw	r8,16(sp)
10010274:	0011aa40 	call	10011aa4 <__clzsi2>
10010278:	10800804 	addi	r2,r2,32
1001027c:	da000417 	ldw	r8,16(sp)
10010280:	d9c00517 	ldw	r7,20(sp)
10010284:	d9800217 	ldw	r6,8(sp)
10010288:	003ea106 	br	1000fd10 <__alt_data_end+0xf800fd10>
1001028c:	147ff604 	addi	r17,r2,-40
10010290:	3462983a 	sll	r17,r6,r17
10010294:	0029883a 	mov	r20,zero
10010298:	003ec906 	br	1000fdc0 <__alt_data_end+0xf800fdc0>
1001029c:	3009883a 	mov	r4,r6
100102a0:	d9400115 	stw	r5,4(sp)
100102a4:	d9800215 	stw	r6,8(sp)
100102a8:	da000415 	stw	r8,16(sp)
100102ac:	da400315 	stw	r9,12(sp)
100102b0:	0011aa40 	call	10011aa4 <__clzsi2>
100102b4:	10800804 	addi	r2,r2,32
100102b8:	da400317 	ldw	r9,12(sp)
100102bc:	da000417 	ldw	r8,16(sp)
100102c0:	d9800217 	ldw	r6,8(sp)
100102c4:	d9400117 	ldw	r5,4(sp)
100102c8:	003eb306 	br	1000fd98 <__alt_data_end+0xf800fd98>
100102cc:	d9800017 	ldw	r6,0(sp)
100102d0:	a9ab883a 	add	r21,r21,r6
100102d4:	a98b803a 	cmpltu	r5,r21,r6
100102d8:	2d8b883a 	add	r5,r5,r22
100102dc:	2a11883a 	add	r8,r5,r8
100102e0:	897fffc4 	addi	r5,r17,-1
100102e4:	b2000c2e 	bgeu	r22,r8,10010318 <__divdf3+0x808>
100102e8:	41003f36 	bltu	r8,r4,100103e8 <__divdf3+0x8d8>
100102ec:	22006c26 	beq	r4,r8,100104a0 <__divdf3+0x990>
100102f0:	4109c83a 	sub	r4,r8,r4
100102f4:	2823883a 	mov	r17,r5
100102f8:	003f3b06 	br	1000ffe8 <__alt_data_end+0xf800ffe8>
100102fc:	ad3ed336 	bltu	r21,r20,1000fe4c <__alt_data_end+0xf800fe4c>
10010300:	a804d07a 	srli	r2,r21,1
10010304:	802e97fa 	slli	r23,r16,31
10010308:	a82a97fa 	slli	r21,r21,31
1001030c:	8020d07a 	srli	r16,r16,1
10010310:	b8aeb03a 	or	r23,r23,r2
10010314:	003ed006 	br	1000fe58 <__alt_data_end+0xf800fe58>
10010318:	b23ff51e 	bne	r22,r8,100102f0 <__alt_data_end+0xf80102f0>
1001031c:	d9800017 	ldw	r6,0(sp)
10010320:	a9bff12e 	bgeu	r21,r6,100102e8 <__alt_data_end+0xf80102e8>
10010324:	b109c83a 	sub	r4,r22,r4
10010328:	2823883a 	mov	r17,r5
1001032c:	003f2e06 	br	1000ffe8 <__alt_data_end+0xf800ffe8>
10010330:	2021883a 	mov	r16,r4
10010334:	003eff06 	br	1000ff34 <__alt_data_end+0xf800ff34>
10010338:	2023883a 	mov	r17,r4
1001033c:	003ee406 	br	1000fed0 <__alt_data_end+0xf800fed0>
10010340:	a8bfe236 	bltu	r21,r2,100102cc <__alt_data_end+0xf80102cc>
10010344:	0009883a 	mov	r4,zero
10010348:	003f2706 	br	1000ffe8 <__alt_data_end+0xf800ffe8>
1001034c:	81002d36 	bltu	r16,r4,10010404 <__divdf3+0x8f4>
10010350:	24005626 	beq	r4,r16,100104ac <__divdf3+0x99c>
10010354:	2829883a 	mov	r20,r5
10010358:	003f8006 	br	1001015c <__alt_data_end+0xf801015c>
1001035c:	053fffc4 	movi	r20,-1
10010360:	003f7f06 	br	10010160 <__alt_data_end+0xf8010160>
10010364:	200f883a 	mov	r7,r4
10010368:	003f3c06 	br	1001005c <__alt_data_end+0xf801005c>
1001036c:	1011883a 	mov	r8,r2
10010370:	003f5506 	br	100100c8 <__alt_data_end+0xf80100c8>
10010374:	e027883a 	mov	r19,fp
10010378:	003f7906 	br	10010160 <__alt_data_end+0xf8010160>
1001037c:	010007c4 	movi	r4,31
10010380:	20c02816 	blt	r4,r3,10010424 <__divdf3+0x914>
10010384:	00800804 	movi	r2,32
10010388:	10c5c83a 	sub	r2,r2,r3
1001038c:	888a983a 	sll	r5,r17,r2
10010390:	a0c8d83a 	srl	r4,r20,r3
10010394:	a084983a 	sll	r2,r20,r2
10010398:	88e2d83a 	srl	r17,r17,r3
1001039c:	2906b03a 	or	r3,r5,r4
100103a0:	1004c03a 	cmpne	r2,r2,zero
100103a4:	1886b03a 	or	r3,r3,r2
100103a8:	188001cc 	andi	r2,r3,7
100103ac:	10000726 	beq	r2,zero,100103cc <__divdf3+0x8bc>
100103b0:	188003cc 	andi	r2,r3,15
100103b4:	01000104 	movi	r4,4
100103b8:	11000426 	beq	r2,r4,100103cc <__divdf3+0x8bc>
100103bc:	1805883a 	mov	r2,r3
100103c0:	10c00104 	addi	r3,r2,4
100103c4:	1885803a 	cmpltu	r2,r3,r2
100103c8:	88a3883a 	add	r17,r17,r2
100103cc:	8880202c 	andhi	r2,r17,128
100103d0:	10002926 	beq	r2,zero,10010478 <__divdf3+0x968>
100103d4:	9900004c 	andi	r4,r19,1
100103d8:	00800044 	movi	r2,1
100103dc:	0021883a 	mov	r16,zero
100103e0:	002b883a 	mov	r21,zero
100103e4:	003e2906 	br	1000fc8c <__alt_data_end+0xf800fc8c>
100103e8:	d9800017 	ldw	r6,0(sp)
100103ec:	8c7fff84 	addi	r17,r17,-2
100103f0:	a9ab883a 	add	r21,r21,r6
100103f4:	a98b803a 	cmpltu	r5,r21,r6
100103f8:	2d8b883a 	add	r5,r5,r22
100103fc:	2a11883a 	add	r8,r5,r8
10010400:	003ef806 	br	1000ffe4 <__alt_data_end+0xf800ffe4>
10010404:	d9800017 	ldw	r6,0(sp)
10010408:	318f883a 	add	r7,r6,r6
1001040c:	398b803a 	cmpltu	r5,r7,r6
10010410:	2d8d883a 	add	r6,r5,r22
10010414:	81a1883a 	add	r16,r16,r6
10010418:	a17fff84 	addi	r5,r20,-2
1001041c:	d9c00015 	stw	r7,0(sp)
10010420:	003f8806 	br	10010244 <__alt_data_end+0xf8010244>
10010424:	013ff844 	movi	r4,-31
10010428:	2085c83a 	sub	r2,r4,r2
1001042c:	8888d83a 	srl	r4,r17,r2
10010430:	00800804 	movi	r2,32
10010434:	18802126 	beq	r3,r2,100104bc <__divdf3+0x9ac>
10010438:	04001004 	movi	r16,64
1001043c:	80c7c83a 	sub	r3,r16,r3
10010440:	88e0983a 	sll	r16,r17,r3
10010444:	8504b03a 	or	r2,r16,r20
10010448:	1004c03a 	cmpne	r2,r2,zero
1001044c:	2084b03a 	or	r2,r4,r2
10010450:	144001cc 	andi	r17,r2,7
10010454:	88000d1e 	bne	r17,zero,1001048c <__divdf3+0x97c>
10010458:	0021883a 	mov	r16,zero
1001045c:	102ad0fa 	srli	r21,r2,3
10010460:	9900004c 	andi	r4,r19,1
10010464:	0005883a 	mov	r2,zero
10010468:	ac6ab03a 	or	r21,r21,r17
1001046c:	003e0706 	br	1000fc8c <__alt_data_end+0xf800fc8c>
10010470:	1007883a 	mov	r3,r2
10010474:	0023883a 	mov	r17,zero
10010478:	8820927a 	slli	r16,r17,9
1001047c:	1805883a 	mov	r2,r3
10010480:	8822977a 	slli	r17,r17,29
10010484:	8020d33a 	srli	r16,r16,12
10010488:	003ff406 	br	1001045c <__alt_data_end+0xf801045c>
1001048c:	10c003cc 	andi	r3,r2,15
10010490:	01000104 	movi	r4,4
10010494:	193ff626 	beq	r3,r4,10010470 <__alt_data_end+0xf8010470>
10010498:	0023883a 	mov	r17,zero
1001049c:	003fc806 	br	100103c0 <__alt_data_end+0xf80103c0>
100104a0:	a8bfd136 	bltu	r21,r2,100103e8 <__alt_data_end+0xf80103e8>
100104a4:	2823883a 	mov	r17,r5
100104a8:	003fa606 	br	10010344 <__alt_data_end+0xf8010344>
100104ac:	d9800017 	ldw	r6,0(sp)
100104b0:	30bfd436 	bltu	r6,r2,10010404 <__alt_data_end+0xf8010404>
100104b4:	2829883a 	mov	r20,r5
100104b8:	003f6406 	br	1001024c <__alt_data_end+0xf801024c>
100104bc:	0021883a 	mov	r16,zero
100104c0:	003fe006 	br	10010444 <__alt_data_end+0xf8010444>
100104c4:	00800434 	movhi	r2,16
100104c8:	8c000234 	orhi	r16,r17,8
100104cc:	10bfffc4 	addi	r2,r2,-1
100104d0:	e009883a 	mov	r4,fp
100104d4:	80a0703a 	and	r16,r16,r2
100104d8:	a02b883a 	mov	r21,r20
100104dc:	003e4e06 	br	1000fe18 <__alt_data_end+0xf800fe18>

100104e0 <__eqdf2>:
100104e0:	2804d53a 	srli	r2,r5,20
100104e4:	3806d53a 	srli	r3,r7,20
100104e8:	02000434 	movhi	r8,16
100104ec:	423fffc4 	addi	r8,r8,-1
100104f0:	1081ffcc 	andi	r2,r2,2047
100104f4:	0281ffc4 	movi	r10,2047
100104f8:	2a12703a 	and	r9,r5,r8
100104fc:	18c1ffcc 	andi	r3,r3,2047
10010500:	3a10703a 	and	r8,r7,r8
10010504:	280ad7fa 	srli	r5,r5,31
10010508:	380ed7fa 	srli	r7,r7,31
1001050c:	12801026 	beq	r2,r10,10010550 <__eqdf2+0x70>
10010510:	0281ffc4 	movi	r10,2047
10010514:	1a800a26 	beq	r3,r10,10010540 <__eqdf2+0x60>
10010518:	10c00226 	beq	r2,r3,10010524 <__eqdf2+0x44>
1001051c:	00800044 	movi	r2,1
10010520:	f800283a 	ret
10010524:	4a3ffd1e 	bne	r9,r8,1001051c <__alt_data_end+0xf801051c>
10010528:	21bffc1e 	bne	r4,r6,1001051c <__alt_data_end+0xf801051c>
1001052c:	29c00c26 	beq	r5,r7,10010560 <__eqdf2+0x80>
10010530:	103ffa1e 	bne	r2,zero,1001051c <__alt_data_end+0xf801051c>
10010534:	2244b03a 	or	r2,r4,r9
10010538:	1004c03a 	cmpne	r2,r2,zero
1001053c:	f800283a 	ret
10010540:	3214b03a 	or	r10,r6,r8
10010544:	503ff426 	beq	r10,zero,10010518 <__alt_data_end+0xf8010518>
10010548:	00800044 	movi	r2,1
1001054c:	f800283a 	ret
10010550:	2254b03a 	or	r10,r4,r9
10010554:	503fee26 	beq	r10,zero,10010510 <__alt_data_end+0xf8010510>
10010558:	00800044 	movi	r2,1
1001055c:	f800283a 	ret
10010560:	0005883a 	mov	r2,zero
10010564:	f800283a 	ret

10010568 <__gedf2>:
10010568:	2804d53a 	srli	r2,r5,20
1001056c:	3806d53a 	srli	r3,r7,20
10010570:	02000434 	movhi	r8,16
10010574:	423fffc4 	addi	r8,r8,-1
10010578:	1081ffcc 	andi	r2,r2,2047
1001057c:	0241ffc4 	movi	r9,2047
10010580:	2a14703a 	and	r10,r5,r8
10010584:	18c1ffcc 	andi	r3,r3,2047
10010588:	3a10703a 	and	r8,r7,r8
1001058c:	280ad7fa 	srli	r5,r5,31
10010590:	380ed7fa 	srli	r7,r7,31
10010594:	12401d26 	beq	r2,r9,1001060c <__gedf2+0xa4>
10010598:	0241ffc4 	movi	r9,2047
1001059c:	1a401226 	beq	r3,r9,100105e8 <__gedf2+0x80>
100105a0:	1000081e 	bne	r2,zero,100105c4 <__gedf2+0x5c>
100105a4:	2296b03a 	or	r11,r4,r10
100105a8:	5813003a 	cmpeq	r9,r11,zero
100105ac:	1800091e 	bne	r3,zero,100105d4 <__gedf2+0x6c>
100105b0:	3218b03a 	or	r12,r6,r8
100105b4:	6000071e 	bne	r12,zero,100105d4 <__gedf2+0x6c>
100105b8:	0005883a 	mov	r2,zero
100105bc:	5800101e 	bne	r11,zero,10010600 <__gedf2+0x98>
100105c0:	f800283a 	ret
100105c4:	18000c1e 	bne	r3,zero,100105f8 <__gedf2+0x90>
100105c8:	3212b03a 	or	r9,r6,r8
100105cc:	48000c26 	beq	r9,zero,10010600 <__gedf2+0x98>
100105d0:	0013883a 	mov	r9,zero
100105d4:	39c03fcc 	andi	r7,r7,255
100105d8:	48000826 	beq	r9,zero,100105fc <__gedf2+0x94>
100105dc:	38000926 	beq	r7,zero,10010604 <__gedf2+0x9c>
100105e0:	00800044 	movi	r2,1
100105e4:	f800283a 	ret
100105e8:	3212b03a 	or	r9,r6,r8
100105ec:	483fec26 	beq	r9,zero,100105a0 <__alt_data_end+0xf80105a0>
100105f0:	00bfff84 	movi	r2,-2
100105f4:	f800283a 	ret
100105f8:	39c03fcc 	andi	r7,r7,255
100105fc:	29c00626 	beq	r5,r7,10010618 <__gedf2+0xb0>
10010600:	283ff726 	beq	r5,zero,100105e0 <__alt_data_end+0xf80105e0>
10010604:	00bfffc4 	movi	r2,-1
10010608:	f800283a 	ret
1001060c:	2292b03a 	or	r9,r4,r10
10010610:	483fe126 	beq	r9,zero,10010598 <__alt_data_end+0xf8010598>
10010614:	003ff606 	br	100105f0 <__alt_data_end+0xf80105f0>
10010618:	18bff916 	blt	r3,r2,10010600 <__alt_data_end+0xf8010600>
1001061c:	10c00316 	blt	r2,r3,1001062c <__gedf2+0xc4>
10010620:	42bff736 	bltu	r8,r10,10010600 <__alt_data_end+0xf8010600>
10010624:	52000326 	beq	r10,r8,10010634 <__gedf2+0xcc>
10010628:	5200042e 	bgeu	r10,r8,1001063c <__gedf2+0xd4>
1001062c:	283fec1e 	bne	r5,zero,100105e0 <__alt_data_end+0xf80105e0>
10010630:	003ff406 	br	10010604 <__alt_data_end+0xf8010604>
10010634:	313ff236 	bltu	r6,r4,10010600 <__alt_data_end+0xf8010600>
10010638:	21bffc36 	bltu	r4,r6,1001062c <__alt_data_end+0xf801062c>
1001063c:	0005883a 	mov	r2,zero
10010640:	f800283a 	ret

10010644 <__ledf2>:
10010644:	2804d53a 	srli	r2,r5,20
10010648:	3810d53a 	srli	r8,r7,20
1001064c:	00c00434 	movhi	r3,16
10010650:	18ffffc4 	addi	r3,r3,-1
10010654:	1081ffcc 	andi	r2,r2,2047
10010658:	0241ffc4 	movi	r9,2047
1001065c:	28d4703a 	and	r10,r5,r3
10010660:	4201ffcc 	andi	r8,r8,2047
10010664:	38c6703a 	and	r3,r7,r3
10010668:	280ad7fa 	srli	r5,r5,31
1001066c:	380ed7fa 	srli	r7,r7,31
10010670:	12401f26 	beq	r2,r9,100106f0 <__ledf2+0xac>
10010674:	0241ffc4 	movi	r9,2047
10010678:	42401426 	beq	r8,r9,100106cc <__ledf2+0x88>
1001067c:	1000091e 	bne	r2,zero,100106a4 <__ledf2+0x60>
10010680:	2296b03a 	or	r11,r4,r10
10010684:	5813003a 	cmpeq	r9,r11,zero
10010688:	29403fcc 	andi	r5,r5,255
1001068c:	40000a1e 	bne	r8,zero,100106b8 <__ledf2+0x74>
10010690:	30d8b03a 	or	r12,r6,r3
10010694:	6000081e 	bne	r12,zero,100106b8 <__ledf2+0x74>
10010698:	0005883a 	mov	r2,zero
1001069c:	5800111e 	bne	r11,zero,100106e4 <__ledf2+0xa0>
100106a0:	f800283a 	ret
100106a4:	29403fcc 	andi	r5,r5,255
100106a8:	40000c1e 	bne	r8,zero,100106dc <__ledf2+0x98>
100106ac:	30d2b03a 	or	r9,r6,r3
100106b0:	48000c26 	beq	r9,zero,100106e4 <__ledf2+0xa0>
100106b4:	0013883a 	mov	r9,zero
100106b8:	39c03fcc 	andi	r7,r7,255
100106bc:	48000826 	beq	r9,zero,100106e0 <__ledf2+0x9c>
100106c0:	38001126 	beq	r7,zero,10010708 <__ledf2+0xc4>
100106c4:	00800044 	movi	r2,1
100106c8:	f800283a 	ret
100106cc:	30d2b03a 	or	r9,r6,r3
100106d0:	483fea26 	beq	r9,zero,1001067c <__alt_data_end+0xf801067c>
100106d4:	00800084 	movi	r2,2
100106d8:	f800283a 	ret
100106dc:	39c03fcc 	andi	r7,r7,255
100106e0:	39400726 	beq	r7,r5,10010700 <__ledf2+0xbc>
100106e4:	2800081e 	bne	r5,zero,10010708 <__ledf2+0xc4>
100106e8:	00800044 	movi	r2,1
100106ec:	f800283a 	ret
100106f0:	2292b03a 	or	r9,r4,r10
100106f4:	483fdf26 	beq	r9,zero,10010674 <__alt_data_end+0xf8010674>
100106f8:	00800084 	movi	r2,2
100106fc:	f800283a 	ret
10010700:	4080030e 	bge	r8,r2,10010710 <__ledf2+0xcc>
10010704:	383fef26 	beq	r7,zero,100106c4 <__alt_data_end+0xf80106c4>
10010708:	00bfffc4 	movi	r2,-1
1001070c:	f800283a 	ret
10010710:	123feb16 	blt	r2,r8,100106c0 <__alt_data_end+0xf80106c0>
10010714:	1abff336 	bltu	r3,r10,100106e4 <__alt_data_end+0xf80106e4>
10010718:	50c00326 	beq	r10,r3,10010728 <__ledf2+0xe4>
1001071c:	50c0042e 	bgeu	r10,r3,10010730 <__ledf2+0xec>
10010720:	283fe81e 	bne	r5,zero,100106c4 <__alt_data_end+0xf80106c4>
10010724:	003ff806 	br	10010708 <__alt_data_end+0xf8010708>
10010728:	313fee36 	bltu	r6,r4,100106e4 <__alt_data_end+0xf80106e4>
1001072c:	21bffc36 	bltu	r4,r6,10010720 <__alt_data_end+0xf8010720>
10010730:	0005883a 	mov	r2,zero
10010734:	f800283a 	ret

10010738 <__muldf3>:
10010738:	deffee04 	addi	sp,sp,-72
1001073c:	dd000c15 	stw	r20,48(sp)
10010740:	2828d53a 	srli	r20,r5,20
10010744:	ddc00f15 	stw	r23,60(sp)
10010748:	282ed7fa 	srli	r23,r5,31
1001074c:	dc000815 	stw	r16,32(sp)
10010750:	04000434 	movhi	r16,16
10010754:	dcc00b15 	stw	r19,44(sp)
10010758:	843fffc4 	addi	r16,r16,-1
1001075c:	dfc01115 	stw	ra,68(sp)
10010760:	df001015 	stw	fp,64(sp)
10010764:	dd800e15 	stw	r22,56(sp)
10010768:	dd400d15 	stw	r21,52(sp)
1001076c:	dc800a15 	stw	r18,40(sp)
10010770:	dc400915 	stw	r17,36(sp)
10010774:	a501ffcc 	andi	r20,r20,2047
10010778:	2c20703a 	and	r16,r5,r16
1001077c:	b827883a 	mov	r19,r23
10010780:	ba403fcc 	andi	r9,r23,255
10010784:	a0006026 	beq	r20,zero,10010908 <__muldf3+0x1d0>
10010788:	0081ffc4 	movi	r2,2047
1001078c:	202d883a 	mov	r22,r4
10010790:	a0803626 	beq	r20,r2,1001086c <__muldf3+0x134>
10010794:	84000434 	orhi	r16,r16,16
10010798:	200ad77a 	srli	r5,r4,29
1001079c:	800490fa 	slli	r2,r16,3
100107a0:	202c90fa 	slli	r22,r4,3
100107a4:	a53f0044 	addi	r20,r20,-1023
100107a8:	28a0b03a 	or	r16,r5,r2
100107ac:	002b883a 	mov	r21,zero
100107b0:	000b883a 	mov	r5,zero
100107b4:	3804d53a 	srli	r2,r7,20
100107b8:	3838d7fa 	srli	fp,r7,31
100107bc:	04400434 	movhi	r17,16
100107c0:	8c7fffc4 	addi	r17,r17,-1
100107c4:	1081ffcc 	andi	r2,r2,2047
100107c8:	3025883a 	mov	r18,r6
100107cc:	3c62703a 	and	r17,r7,r17
100107d0:	e2803fcc 	andi	r10,fp,255
100107d4:	10006d26 	beq	r2,zero,1001098c <__muldf3+0x254>
100107d8:	00c1ffc4 	movi	r3,2047
100107dc:	10c06526 	beq	r2,r3,10010974 <__muldf3+0x23c>
100107e0:	8c400434 	orhi	r17,r17,16
100107e4:	300ed77a 	srli	r7,r6,29
100107e8:	880690fa 	slli	r3,r17,3
100107ec:	302490fa 	slli	r18,r6,3
100107f0:	10bf0044 	addi	r2,r2,-1023
100107f4:	38e2b03a 	or	r17,r7,r3
100107f8:	000f883a 	mov	r7,zero
100107fc:	a087883a 	add	r3,r20,r2
10010800:	010003c4 	movi	r4,15
10010804:	3d44b03a 	or	r2,r7,r21
10010808:	e5ccf03a 	xor	r6,fp,r23
1001080c:	1a000044 	addi	r8,r3,1
10010810:	20809b36 	bltu	r4,r2,10010a80 <__muldf3+0x348>
10010814:	100490ba 	slli	r2,r2,2
10010818:	01040074 	movhi	r4,4097
1001081c:	21020b04 	addi	r4,r4,2092
10010820:	1105883a 	add	r2,r2,r4
10010824:	10800017 	ldw	r2,0(r2)
10010828:	1000683a 	jmp	r2
1001082c:	10010a80 	call	110010a8 <_gp+0xfe17b0>
10010830:	1001088c 	andi	zero,r2,1058
10010834:	1001088c 	andi	zero,r2,1058
10010838:	10010888 	cmpgei	zero,r2,1058
1001083c:	10010a5c 	xori	zero,r2,1065
10010840:	10010a5c 	xori	zero,r2,1065
10010844:	10010a44 	addi	zero,r2,1065
10010848:	10010888 	cmpgei	zero,r2,1058
1001084c:	10010a5c 	xori	zero,r2,1065
10010850:	10010a44 	addi	zero,r2,1065
10010854:	10010a5c 	xori	zero,r2,1065
10010858:	10010888 	cmpgei	zero,r2,1058
1001085c:	10010a6c 	andhi	zero,r2,1065
10010860:	10010a6c 	andhi	zero,r2,1065
10010864:	10010a6c 	andhi	zero,r2,1065
10010868:	10010dcc 	andi	zero,r2,1079
1001086c:	2404b03a 	or	r2,r4,r16
10010870:	1000711e 	bne	r2,zero,10010a38 <__muldf3+0x300>
10010874:	05400204 	movi	r21,8
10010878:	0021883a 	mov	r16,zero
1001087c:	002d883a 	mov	r22,zero
10010880:	01400084 	movi	r5,2
10010884:	003fcb06 	br	100107b4 <__alt_data_end+0xf80107b4>
10010888:	500d883a 	mov	r6,r10
1001088c:	00800084 	movi	r2,2
10010890:	38805926 	beq	r7,r2,100109f8 <__muldf3+0x2c0>
10010894:	008000c4 	movi	r2,3
10010898:	3881bb26 	beq	r7,r2,10010f88 <__muldf3+0x850>
1001089c:	00800044 	movi	r2,1
100108a0:	3881961e 	bne	r7,r2,10010efc <__muldf3+0x7c4>
100108a4:	3027883a 	mov	r19,r6
100108a8:	0005883a 	mov	r2,zero
100108ac:	0021883a 	mov	r16,zero
100108b0:	002d883a 	mov	r22,zero
100108b4:	1004953a 	slli	r2,r2,20
100108b8:	98c03fcc 	andi	r3,r19,255
100108bc:	04400434 	movhi	r17,16
100108c0:	8c7fffc4 	addi	r17,r17,-1
100108c4:	180697fa 	slli	r3,r3,31
100108c8:	8460703a 	and	r16,r16,r17
100108cc:	80a0b03a 	or	r16,r16,r2
100108d0:	80c6b03a 	or	r3,r16,r3
100108d4:	b005883a 	mov	r2,r22
100108d8:	dfc01117 	ldw	ra,68(sp)
100108dc:	df001017 	ldw	fp,64(sp)
100108e0:	ddc00f17 	ldw	r23,60(sp)
100108e4:	dd800e17 	ldw	r22,56(sp)
100108e8:	dd400d17 	ldw	r21,52(sp)
100108ec:	dd000c17 	ldw	r20,48(sp)
100108f0:	dcc00b17 	ldw	r19,44(sp)
100108f4:	dc800a17 	ldw	r18,40(sp)
100108f8:	dc400917 	ldw	r17,36(sp)
100108fc:	dc000817 	ldw	r16,32(sp)
10010900:	dec01204 	addi	sp,sp,72
10010904:	f800283a 	ret
10010908:	2404b03a 	or	r2,r4,r16
1001090c:	202b883a 	mov	r21,r4
10010910:	10004426 	beq	r2,zero,10010a24 <__muldf3+0x2ec>
10010914:	80015126 	beq	r16,zero,10010e5c <__muldf3+0x724>
10010918:	8009883a 	mov	r4,r16
1001091c:	d9800715 	stw	r6,28(sp)
10010920:	d9c00215 	stw	r7,8(sp)
10010924:	da400415 	stw	r9,16(sp)
10010928:	0011aa40 	call	10011aa4 <__clzsi2>
1001092c:	d9800717 	ldw	r6,28(sp)
10010930:	d9c00217 	ldw	r7,8(sp)
10010934:	da400417 	ldw	r9,16(sp)
10010938:	113ffd44 	addi	r4,r2,-11
1001093c:	00c00704 	movi	r3,28
10010940:	19014216 	blt	r3,r4,10010e4c <__muldf3+0x714>
10010944:	00c00744 	movi	r3,29
10010948:	15bffe04 	addi	r22,r2,-8
1001094c:	1907c83a 	sub	r3,r3,r4
10010950:	85a0983a 	sll	r16,r16,r22
10010954:	a8c6d83a 	srl	r3,r21,r3
10010958:	adac983a 	sll	r22,r21,r22
1001095c:	1c20b03a 	or	r16,r3,r16
10010960:	1080fcc4 	addi	r2,r2,1011
10010964:	00a9c83a 	sub	r20,zero,r2
10010968:	002b883a 	mov	r21,zero
1001096c:	000b883a 	mov	r5,zero
10010970:	003f9006 	br	100107b4 <__alt_data_end+0xf80107b4>
10010974:	3446b03a 	or	r3,r6,r17
10010978:	1800281e 	bne	r3,zero,10010a1c <__muldf3+0x2e4>
1001097c:	0023883a 	mov	r17,zero
10010980:	0025883a 	mov	r18,zero
10010984:	01c00084 	movi	r7,2
10010988:	003f9c06 	br	100107fc <__alt_data_end+0xf80107fc>
1001098c:	3446b03a 	or	r3,r6,r17
10010990:	18001e26 	beq	r3,zero,10010a0c <__muldf3+0x2d4>
10010994:	88012126 	beq	r17,zero,10010e1c <__muldf3+0x6e4>
10010998:	8809883a 	mov	r4,r17
1001099c:	d9400215 	stw	r5,8(sp)
100109a0:	d9800715 	stw	r6,28(sp)
100109a4:	da400415 	stw	r9,16(sp)
100109a8:	da800315 	stw	r10,12(sp)
100109ac:	0011aa40 	call	10011aa4 <__clzsi2>
100109b0:	d9400217 	ldw	r5,8(sp)
100109b4:	d9800717 	ldw	r6,28(sp)
100109b8:	da400417 	ldw	r9,16(sp)
100109bc:	da800317 	ldw	r10,12(sp)
100109c0:	113ffd44 	addi	r4,r2,-11
100109c4:	00c00704 	movi	r3,28
100109c8:	19011016 	blt	r3,r4,10010e0c <__muldf3+0x6d4>
100109cc:	00c00744 	movi	r3,29
100109d0:	14bffe04 	addi	r18,r2,-8
100109d4:	1907c83a 	sub	r3,r3,r4
100109d8:	8ca2983a 	sll	r17,r17,r18
100109dc:	30c6d83a 	srl	r3,r6,r3
100109e0:	34a4983a 	sll	r18,r6,r18
100109e4:	1c62b03a 	or	r17,r3,r17
100109e8:	1080fcc4 	addi	r2,r2,1011
100109ec:	0085c83a 	sub	r2,zero,r2
100109f0:	000f883a 	mov	r7,zero
100109f4:	003f8106 	br	100107fc <__alt_data_end+0xf80107fc>
100109f8:	3027883a 	mov	r19,r6
100109fc:	0081ffc4 	movi	r2,2047
10010a00:	0021883a 	mov	r16,zero
10010a04:	002d883a 	mov	r22,zero
10010a08:	003faa06 	br	100108b4 <__alt_data_end+0xf80108b4>
10010a0c:	0023883a 	mov	r17,zero
10010a10:	0025883a 	mov	r18,zero
10010a14:	01c00044 	movi	r7,1
10010a18:	003f7806 	br	100107fc <__alt_data_end+0xf80107fc>
10010a1c:	01c000c4 	movi	r7,3
10010a20:	003f7606 	br	100107fc <__alt_data_end+0xf80107fc>
10010a24:	05400104 	movi	r21,4
10010a28:	0021883a 	mov	r16,zero
10010a2c:	002d883a 	mov	r22,zero
10010a30:	01400044 	movi	r5,1
10010a34:	003f5f06 	br	100107b4 <__alt_data_end+0xf80107b4>
10010a38:	05400304 	movi	r21,12
10010a3c:	014000c4 	movi	r5,3
10010a40:	003f5c06 	br	100107b4 <__alt_data_end+0xf80107b4>
10010a44:	04000434 	movhi	r16,16
10010a48:	0027883a 	mov	r19,zero
10010a4c:	843fffc4 	addi	r16,r16,-1
10010a50:	05bfffc4 	movi	r22,-1
10010a54:	0081ffc4 	movi	r2,2047
10010a58:	003f9606 	br	100108b4 <__alt_data_end+0xf80108b4>
10010a5c:	8023883a 	mov	r17,r16
10010a60:	b025883a 	mov	r18,r22
10010a64:	280f883a 	mov	r7,r5
10010a68:	003f8806 	br	1001088c <__alt_data_end+0xf801088c>
10010a6c:	8023883a 	mov	r17,r16
10010a70:	b025883a 	mov	r18,r22
10010a74:	480d883a 	mov	r6,r9
10010a78:	280f883a 	mov	r7,r5
10010a7c:	003f8306 	br	1001088c <__alt_data_end+0xf801088c>
10010a80:	b026d43a 	srli	r19,r22,16
10010a84:	902ed43a 	srli	r23,r18,16
10010a88:	b5bfffcc 	andi	r22,r22,65535
10010a8c:	94bfffcc 	andi	r18,r18,65535
10010a90:	b00b883a 	mov	r5,r22
10010a94:	9009883a 	mov	r4,r18
10010a98:	d8c00515 	stw	r3,20(sp)
10010a9c:	d9800715 	stw	r6,28(sp)
10010aa0:	da000615 	stw	r8,24(sp)
10010aa4:	0004bc80 	call	10004bc8 <__mulsi3>
10010aa8:	980b883a 	mov	r5,r19
10010aac:	9009883a 	mov	r4,r18
10010ab0:	1029883a 	mov	r20,r2
10010ab4:	0004bc80 	call	10004bc8 <__mulsi3>
10010ab8:	b80b883a 	mov	r5,r23
10010abc:	9809883a 	mov	r4,r19
10010ac0:	102b883a 	mov	r21,r2
10010ac4:	0004bc80 	call	10004bc8 <__mulsi3>
10010ac8:	b809883a 	mov	r4,r23
10010acc:	b00b883a 	mov	r5,r22
10010ad0:	1039883a 	mov	fp,r2
10010ad4:	0004bc80 	call	10004bc8 <__mulsi3>
10010ad8:	a008d43a 	srli	r4,r20,16
10010adc:	1545883a 	add	r2,r2,r21
10010ae0:	d8c00517 	ldw	r3,20(sp)
10010ae4:	2085883a 	add	r2,r4,r2
10010ae8:	d9800717 	ldw	r6,28(sp)
10010aec:	da000617 	ldw	r8,24(sp)
10010af0:	1540022e 	bgeu	r2,r21,10010afc <__muldf3+0x3c4>
10010af4:	01000074 	movhi	r4,1
10010af8:	e139883a 	add	fp,fp,r4
10010afc:	100e943a 	slli	r7,r2,16
10010b00:	1004d43a 	srli	r2,r2,16
10010b04:	882ad43a 	srli	r21,r17,16
10010b08:	a53fffcc 	andi	r20,r20,65535
10010b0c:	8c7fffcc 	andi	r17,r17,65535
10010b10:	3d29883a 	add	r20,r7,r20
10010b14:	b00b883a 	mov	r5,r22
10010b18:	8809883a 	mov	r4,r17
10010b1c:	d8c00515 	stw	r3,20(sp)
10010b20:	d9800715 	stw	r6,28(sp)
10010b24:	da000615 	stw	r8,24(sp)
10010b28:	dd000115 	stw	r20,4(sp)
10010b2c:	d8800015 	stw	r2,0(sp)
10010b30:	0004bc80 	call	10004bc8 <__mulsi3>
10010b34:	980b883a 	mov	r5,r19
10010b38:	8809883a 	mov	r4,r17
10010b3c:	d8800215 	stw	r2,8(sp)
10010b40:	0004bc80 	call	10004bc8 <__mulsi3>
10010b44:	9809883a 	mov	r4,r19
10010b48:	a80b883a 	mov	r5,r21
10010b4c:	1029883a 	mov	r20,r2
10010b50:	0004bc80 	call	10004bc8 <__mulsi3>
10010b54:	b00b883a 	mov	r5,r22
10010b58:	a809883a 	mov	r4,r21
10010b5c:	d8800415 	stw	r2,16(sp)
10010b60:	0004bc80 	call	10004bc8 <__mulsi3>
10010b64:	d9c00217 	ldw	r7,8(sp)
10010b68:	1505883a 	add	r2,r2,r20
10010b6c:	d8c00517 	ldw	r3,20(sp)
10010b70:	3826d43a 	srli	r19,r7,16
10010b74:	d9800717 	ldw	r6,28(sp)
10010b78:	da000617 	ldw	r8,24(sp)
10010b7c:	9885883a 	add	r2,r19,r2
10010b80:	da400417 	ldw	r9,16(sp)
10010b84:	1500022e 	bgeu	r2,r20,10010b90 <__muldf3+0x458>
10010b88:	01000074 	movhi	r4,1
10010b8c:	4913883a 	add	r9,r9,r4
10010b90:	1028d43a 	srli	r20,r2,16
10010b94:	1004943a 	slli	r2,r2,16
10010b98:	802cd43a 	srli	r22,r16,16
10010b9c:	843fffcc 	andi	r16,r16,65535
10010ba0:	3cffffcc 	andi	r19,r7,65535
10010ba4:	9009883a 	mov	r4,r18
10010ba8:	800b883a 	mov	r5,r16
10010bac:	a269883a 	add	r20,r20,r9
10010bb0:	d8c00515 	stw	r3,20(sp)
10010bb4:	d9800715 	stw	r6,28(sp)
10010bb8:	da000615 	stw	r8,24(sp)
10010bbc:	14e7883a 	add	r19,r2,r19
10010bc0:	0004bc80 	call	10004bc8 <__mulsi3>
10010bc4:	9009883a 	mov	r4,r18
10010bc8:	b00b883a 	mov	r5,r22
10010bcc:	d8800315 	stw	r2,12(sp)
10010bd0:	0004bc80 	call	10004bc8 <__mulsi3>
10010bd4:	b809883a 	mov	r4,r23
10010bd8:	b00b883a 	mov	r5,r22
10010bdc:	d8800215 	stw	r2,8(sp)
10010be0:	0004bc80 	call	10004bc8 <__mulsi3>
10010be4:	b80b883a 	mov	r5,r23
10010be8:	8009883a 	mov	r4,r16
10010bec:	d8800415 	stw	r2,16(sp)
10010bf0:	0004bc80 	call	10004bc8 <__mulsi3>
10010bf4:	da800317 	ldw	r10,12(sp)
10010bf8:	d9c00217 	ldw	r7,8(sp)
10010bfc:	d9000017 	ldw	r4,0(sp)
10010c00:	502ed43a 	srli	r23,r10,16
10010c04:	11c5883a 	add	r2,r2,r7
10010c08:	24e5883a 	add	r18,r4,r19
10010c0c:	b885883a 	add	r2,r23,r2
10010c10:	d8c00517 	ldw	r3,20(sp)
10010c14:	d9800717 	ldw	r6,28(sp)
10010c18:	da000617 	ldw	r8,24(sp)
10010c1c:	da400417 	ldw	r9,16(sp)
10010c20:	11c0022e 	bgeu	r2,r7,10010c2c <__muldf3+0x4f4>
10010c24:	01000074 	movhi	r4,1
10010c28:	4913883a 	add	r9,r9,r4
10010c2c:	100ed43a 	srli	r7,r2,16
10010c30:	1004943a 	slli	r2,r2,16
10010c34:	55ffffcc 	andi	r23,r10,65535
10010c38:	3a53883a 	add	r9,r7,r9
10010c3c:	8809883a 	mov	r4,r17
10010c40:	800b883a 	mov	r5,r16
10010c44:	d8c00515 	stw	r3,20(sp)
10010c48:	d9800715 	stw	r6,28(sp)
10010c4c:	da000615 	stw	r8,24(sp)
10010c50:	da400415 	stw	r9,16(sp)
10010c54:	15ef883a 	add	r23,r2,r23
10010c58:	0004bc80 	call	10004bc8 <__mulsi3>
10010c5c:	8809883a 	mov	r4,r17
10010c60:	b00b883a 	mov	r5,r22
10010c64:	d8800215 	stw	r2,8(sp)
10010c68:	0004bc80 	call	10004bc8 <__mulsi3>
10010c6c:	b00b883a 	mov	r5,r22
10010c70:	a809883a 	mov	r4,r21
10010c74:	d8800315 	stw	r2,12(sp)
10010c78:	0004bc80 	call	10004bc8 <__mulsi3>
10010c7c:	8009883a 	mov	r4,r16
10010c80:	a80b883a 	mov	r5,r21
10010c84:	1023883a 	mov	r17,r2
10010c88:	0004bc80 	call	10004bc8 <__mulsi3>
10010c8c:	d9c00217 	ldw	r7,8(sp)
10010c90:	da800317 	ldw	r10,12(sp)
10010c94:	d8c00517 	ldw	r3,20(sp)
10010c98:	3808d43a 	srli	r4,r7,16
10010c9c:	1285883a 	add	r2,r2,r10
10010ca0:	d9800717 	ldw	r6,28(sp)
10010ca4:	2085883a 	add	r2,r4,r2
10010ca8:	da000617 	ldw	r8,24(sp)
10010cac:	da400417 	ldw	r9,16(sp)
10010cb0:	1280022e 	bgeu	r2,r10,10010cbc <__muldf3+0x584>
10010cb4:	01000074 	movhi	r4,1
10010cb8:	8923883a 	add	r17,r17,r4
10010cbc:	1008943a 	slli	r4,r2,16
10010cc0:	39ffffcc 	andi	r7,r7,65535
10010cc4:	e4b9883a 	add	fp,fp,r18
10010cc8:	21cf883a 	add	r7,r4,r7
10010ccc:	e4e7803a 	cmpltu	r19,fp,r19
10010cd0:	3d0f883a 	add	r7,r7,r20
10010cd4:	bf39883a 	add	fp,r23,fp
10010cd8:	99c9883a 	add	r4,r19,r7
10010cdc:	e5ef803a 	cmpltu	r23,fp,r23
10010ce0:	490b883a 	add	r5,r9,r4
10010ce4:	1004d43a 	srli	r2,r2,16
10010ce8:	b965883a 	add	r18,r23,r5
10010cec:	24c9803a 	cmpltu	r4,r4,r19
10010cf0:	3d29803a 	cmpltu	r20,r7,r20
10010cf4:	a128b03a 	or	r20,r20,r4
10010cf8:	95ef803a 	cmpltu	r23,r18,r23
10010cfc:	2a53803a 	cmpltu	r9,r5,r9
10010d00:	a0a9883a 	add	r20,r20,r2
10010d04:	4deeb03a 	or	r23,r9,r23
10010d08:	a5ef883a 	add	r23,r20,r23
10010d0c:	bc63883a 	add	r17,r23,r17
10010d10:	e004927a 	slli	r2,fp,9
10010d14:	d9000117 	ldw	r4,4(sp)
10010d18:	882e927a 	slli	r23,r17,9
10010d1c:	9022d5fa 	srli	r17,r18,23
10010d20:	e038d5fa 	srli	fp,fp,23
10010d24:	1104b03a 	or	r2,r2,r4
10010d28:	9024927a 	slli	r18,r18,9
10010d2c:	1004c03a 	cmpne	r2,r2,zero
10010d30:	bc62b03a 	or	r17,r23,r17
10010d34:	1738b03a 	or	fp,r2,fp
10010d38:	8880402c 	andhi	r2,r17,256
10010d3c:	e4a4b03a 	or	r18,fp,r18
10010d40:	10000726 	beq	r2,zero,10010d60 <__muldf3+0x628>
10010d44:	9006d07a 	srli	r3,r18,1
10010d48:	880497fa 	slli	r2,r17,31
10010d4c:	9480004c 	andi	r18,r18,1
10010d50:	8822d07a 	srli	r17,r17,1
10010d54:	1ca4b03a 	or	r18,r3,r18
10010d58:	14a4b03a 	or	r18,r2,r18
10010d5c:	4007883a 	mov	r3,r8
10010d60:	1880ffc4 	addi	r2,r3,1023
10010d64:	0080460e 	bge	zero,r2,10010e80 <__muldf3+0x748>
10010d68:	910001cc 	andi	r4,r18,7
10010d6c:	20000726 	beq	r4,zero,10010d8c <__muldf3+0x654>
10010d70:	910003cc 	andi	r4,r18,15
10010d74:	01400104 	movi	r5,4
10010d78:	21400426 	beq	r4,r5,10010d8c <__muldf3+0x654>
10010d7c:	9149883a 	add	r4,r18,r5
10010d80:	24a5803a 	cmpltu	r18,r4,r18
10010d84:	8ca3883a 	add	r17,r17,r18
10010d88:	2025883a 	mov	r18,r4
10010d8c:	8900402c 	andhi	r4,r17,256
10010d90:	20000426 	beq	r4,zero,10010da4 <__muldf3+0x66c>
10010d94:	18810004 	addi	r2,r3,1024
10010d98:	00ffc034 	movhi	r3,65280
10010d9c:	18ffffc4 	addi	r3,r3,-1
10010da0:	88e2703a 	and	r17,r17,r3
10010da4:	00c1ff84 	movi	r3,2046
10010da8:	18bf1316 	blt	r3,r2,100109f8 <__alt_data_end+0xf80109f8>
10010dac:	882c977a 	slli	r22,r17,29
10010db0:	9024d0fa 	srli	r18,r18,3
10010db4:	8822927a 	slli	r17,r17,9
10010db8:	1081ffcc 	andi	r2,r2,2047
10010dbc:	b4acb03a 	or	r22,r22,r18
10010dc0:	8820d33a 	srli	r16,r17,12
10010dc4:	3027883a 	mov	r19,r6
10010dc8:	003eba06 	br	100108b4 <__alt_data_end+0xf80108b4>
10010dcc:	8080022c 	andhi	r2,r16,8
10010dd0:	10000926 	beq	r2,zero,10010df8 <__muldf3+0x6c0>
10010dd4:	8880022c 	andhi	r2,r17,8
10010dd8:	1000071e 	bne	r2,zero,10010df8 <__muldf3+0x6c0>
10010ddc:	00800434 	movhi	r2,16
10010de0:	8c000234 	orhi	r16,r17,8
10010de4:	10bfffc4 	addi	r2,r2,-1
10010de8:	e027883a 	mov	r19,fp
10010dec:	80a0703a 	and	r16,r16,r2
10010df0:	902d883a 	mov	r22,r18
10010df4:	003f1706 	br	10010a54 <__alt_data_end+0xf8010a54>
10010df8:	00800434 	movhi	r2,16
10010dfc:	84000234 	orhi	r16,r16,8
10010e00:	10bfffc4 	addi	r2,r2,-1
10010e04:	80a0703a 	and	r16,r16,r2
10010e08:	003f1206 	br	10010a54 <__alt_data_end+0xf8010a54>
10010e0c:	147ff604 	addi	r17,r2,-40
10010e10:	3462983a 	sll	r17,r6,r17
10010e14:	0025883a 	mov	r18,zero
10010e18:	003ef306 	br	100109e8 <__alt_data_end+0xf80109e8>
10010e1c:	3009883a 	mov	r4,r6
10010e20:	d9400215 	stw	r5,8(sp)
10010e24:	d9800715 	stw	r6,28(sp)
10010e28:	da400415 	stw	r9,16(sp)
10010e2c:	da800315 	stw	r10,12(sp)
10010e30:	0011aa40 	call	10011aa4 <__clzsi2>
10010e34:	10800804 	addi	r2,r2,32
10010e38:	da800317 	ldw	r10,12(sp)
10010e3c:	da400417 	ldw	r9,16(sp)
10010e40:	d9800717 	ldw	r6,28(sp)
10010e44:	d9400217 	ldw	r5,8(sp)
10010e48:	003edd06 	br	100109c0 <__alt_data_end+0xf80109c0>
10010e4c:	143ff604 	addi	r16,r2,-40
10010e50:	ac20983a 	sll	r16,r21,r16
10010e54:	002d883a 	mov	r22,zero
10010e58:	003ec106 	br	10010960 <__alt_data_end+0xf8010960>
10010e5c:	d9800715 	stw	r6,28(sp)
10010e60:	d9c00215 	stw	r7,8(sp)
10010e64:	da400415 	stw	r9,16(sp)
10010e68:	0011aa40 	call	10011aa4 <__clzsi2>
10010e6c:	10800804 	addi	r2,r2,32
10010e70:	da400417 	ldw	r9,16(sp)
10010e74:	d9c00217 	ldw	r7,8(sp)
10010e78:	d9800717 	ldw	r6,28(sp)
10010e7c:	003eae06 	br	10010938 <__alt_data_end+0xf8010938>
10010e80:	00c00044 	movi	r3,1
10010e84:	1887c83a 	sub	r3,r3,r2
10010e88:	01000e04 	movi	r4,56
10010e8c:	20fe8516 	blt	r4,r3,100108a4 <__alt_data_end+0xf80108a4>
10010e90:	010007c4 	movi	r4,31
10010e94:	20c01b16 	blt	r4,r3,10010f04 <__muldf3+0x7cc>
10010e98:	00800804 	movi	r2,32
10010e9c:	10c5c83a 	sub	r2,r2,r3
10010ea0:	888a983a 	sll	r5,r17,r2
10010ea4:	90c8d83a 	srl	r4,r18,r3
10010ea8:	9084983a 	sll	r2,r18,r2
10010eac:	88e2d83a 	srl	r17,r17,r3
10010eb0:	2906b03a 	or	r3,r5,r4
10010eb4:	1004c03a 	cmpne	r2,r2,zero
10010eb8:	1886b03a 	or	r3,r3,r2
10010ebc:	188001cc 	andi	r2,r3,7
10010ec0:	10000726 	beq	r2,zero,10010ee0 <__muldf3+0x7a8>
10010ec4:	188003cc 	andi	r2,r3,15
10010ec8:	01000104 	movi	r4,4
10010ecc:	11000426 	beq	r2,r4,10010ee0 <__muldf3+0x7a8>
10010ed0:	1805883a 	mov	r2,r3
10010ed4:	10c00104 	addi	r3,r2,4
10010ed8:	1885803a 	cmpltu	r2,r3,r2
10010edc:	88a3883a 	add	r17,r17,r2
10010ee0:	8880202c 	andhi	r2,r17,128
10010ee4:	10001c26 	beq	r2,zero,10010f58 <__muldf3+0x820>
10010ee8:	3027883a 	mov	r19,r6
10010eec:	00800044 	movi	r2,1
10010ef0:	0021883a 	mov	r16,zero
10010ef4:	002d883a 	mov	r22,zero
10010ef8:	003e6e06 	br	100108b4 <__alt_data_end+0xf80108b4>
10010efc:	4007883a 	mov	r3,r8
10010f00:	003f9706 	br	10010d60 <__alt_data_end+0xf8010d60>
10010f04:	017ff844 	movi	r5,-31
10010f08:	2885c83a 	sub	r2,r5,r2
10010f0c:	888ad83a 	srl	r5,r17,r2
10010f10:	00800804 	movi	r2,32
10010f14:	18801a26 	beq	r3,r2,10010f80 <__muldf3+0x848>
10010f18:	01001004 	movi	r4,64
10010f1c:	20c7c83a 	sub	r3,r4,r3
10010f20:	88e2983a 	sll	r17,r17,r3
10010f24:	8ca4b03a 	or	r18,r17,r18
10010f28:	9004c03a 	cmpne	r2,r18,zero
10010f2c:	2884b03a 	or	r2,r5,r2
10010f30:	144001cc 	andi	r17,r2,7
10010f34:	88000d1e 	bne	r17,zero,10010f6c <__muldf3+0x834>
10010f38:	0021883a 	mov	r16,zero
10010f3c:	102cd0fa 	srli	r22,r2,3
10010f40:	3027883a 	mov	r19,r6
10010f44:	0005883a 	mov	r2,zero
10010f48:	b46cb03a 	or	r22,r22,r17
10010f4c:	003e5906 	br	100108b4 <__alt_data_end+0xf80108b4>
10010f50:	1007883a 	mov	r3,r2
10010f54:	0023883a 	mov	r17,zero
10010f58:	8820927a 	slli	r16,r17,9
10010f5c:	1805883a 	mov	r2,r3
10010f60:	8822977a 	slli	r17,r17,29
10010f64:	8020d33a 	srli	r16,r16,12
10010f68:	003ff406 	br	10010f3c <__alt_data_end+0xf8010f3c>
10010f6c:	10c003cc 	andi	r3,r2,15
10010f70:	01000104 	movi	r4,4
10010f74:	193ff626 	beq	r3,r4,10010f50 <__alt_data_end+0xf8010f50>
10010f78:	0023883a 	mov	r17,zero
10010f7c:	003fd506 	br	10010ed4 <__alt_data_end+0xf8010ed4>
10010f80:	0023883a 	mov	r17,zero
10010f84:	003fe706 	br	10010f24 <__alt_data_end+0xf8010f24>
10010f88:	00800434 	movhi	r2,16
10010f8c:	8c000234 	orhi	r16,r17,8
10010f90:	10bfffc4 	addi	r2,r2,-1
10010f94:	3027883a 	mov	r19,r6
10010f98:	80a0703a 	and	r16,r16,r2
10010f9c:	902d883a 	mov	r22,r18
10010fa0:	003eac06 	br	10010a54 <__alt_data_end+0xf8010a54>

10010fa4 <__subdf3>:
10010fa4:	02000434 	movhi	r8,16
10010fa8:	423fffc4 	addi	r8,r8,-1
10010fac:	defffb04 	addi	sp,sp,-20
10010fb0:	2a14703a 	and	r10,r5,r8
10010fb4:	3812d53a 	srli	r9,r7,20
10010fb8:	3a10703a 	and	r8,r7,r8
10010fbc:	2006d77a 	srli	r3,r4,29
10010fc0:	3004d77a 	srli	r2,r6,29
10010fc4:	dc000015 	stw	r16,0(sp)
10010fc8:	501490fa 	slli	r10,r10,3
10010fcc:	2820d53a 	srli	r16,r5,20
10010fd0:	401090fa 	slli	r8,r8,3
10010fd4:	dc800215 	stw	r18,8(sp)
10010fd8:	dc400115 	stw	r17,4(sp)
10010fdc:	dfc00415 	stw	ra,16(sp)
10010fe0:	202290fa 	slli	r17,r4,3
10010fe4:	dcc00315 	stw	r19,12(sp)
10010fe8:	4a41ffcc 	andi	r9,r9,2047
10010fec:	0101ffc4 	movi	r4,2047
10010ff0:	2824d7fa 	srli	r18,r5,31
10010ff4:	8401ffcc 	andi	r16,r16,2047
10010ff8:	50c6b03a 	or	r3,r10,r3
10010ffc:	380ed7fa 	srli	r7,r7,31
10011000:	408ab03a 	or	r5,r8,r2
10011004:	300c90fa 	slli	r6,r6,3
10011008:	49009626 	beq	r9,r4,10011264 <__subdf3+0x2c0>
1001100c:	39c0005c 	xori	r7,r7,1
10011010:	8245c83a 	sub	r2,r16,r9
10011014:	3c807426 	beq	r7,r18,100111e8 <__subdf3+0x244>
10011018:	0080af0e 	bge	zero,r2,100112d8 <__subdf3+0x334>
1001101c:	48002a1e 	bne	r9,zero,100110c8 <__subdf3+0x124>
10011020:	2988b03a 	or	r4,r5,r6
10011024:	20009a1e 	bne	r4,zero,10011290 <__subdf3+0x2ec>
10011028:	888001cc 	andi	r2,r17,7
1001102c:	10000726 	beq	r2,zero,1001104c <__subdf3+0xa8>
10011030:	888003cc 	andi	r2,r17,15
10011034:	01000104 	movi	r4,4
10011038:	11000426 	beq	r2,r4,1001104c <__subdf3+0xa8>
1001103c:	890b883a 	add	r5,r17,r4
10011040:	2c63803a 	cmpltu	r17,r5,r17
10011044:	1c47883a 	add	r3,r3,r17
10011048:	2823883a 	mov	r17,r5
1001104c:	1880202c 	andhi	r2,r3,128
10011050:	10005926 	beq	r2,zero,100111b8 <__subdf3+0x214>
10011054:	84000044 	addi	r16,r16,1
10011058:	0081ffc4 	movi	r2,2047
1001105c:	8080be26 	beq	r16,r2,10011358 <__subdf3+0x3b4>
10011060:	017fe034 	movhi	r5,65408
10011064:	297fffc4 	addi	r5,r5,-1
10011068:	1946703a 	and	r3,r3,r5
1001106c:	1804977a 	slli	r2,r3,29
10011070:	1806927a 	slli	r3,r3,9
10011074:	8822d0fa 	srli	r17,r17,3
10011078:	8401ffcc 	andi	r16,r16,2047
1001107c:	180ad33a 	srli	r5,r3,12
10011080:	9100004c 	andi	r4,r18,1
10011084:	1444b03a 	or	r2,r2,r17
10011088:	80c1ffcc 	andi	r3,r16,2047
1001108c:	1820953a 	slli	r16,r3,20
10011090:	20c03fcc 	andi	r3,r4,255
10011094:	180897fa 	slli	r4,r3,31
10011098:	00c00434 	movhi	r3,16
1001109c:	18ffffc4 	addi	r3,r3,-1
100110a0:	28c6703a 	and	r3,r5,r3
100110a4:	1c06b03a 	or	r3,r3,r16
100110a8:	1906b03a 	or	r3,r3,r4
100110ac:	dfc00417 	ldw	ra,16(sp)
100110b0:	dcc00317 	ldw	r19,12(sp)
100110b4:	dc800217 	ldw	r18,8(sp)
100110b8:	dc400117 	ldw	r17,4(sp)
100110bc:	dc000017 	ldw	r16,0(sp)
100110c0:	dec00504 	addi	sp,sp,20
100110c4:	f800283a 	ret
100110c8:	0101ffc4 	movi	r4,2047
100110cc:	813fd626 	beq	r16,r4,10011028 <__alt_data_end+0xf8011028>
100110d0:	29402034 	orhi	r5,r5,128
100110d4:	01000e04 	movi	r4,56
100110d8:	2080a316 	blt	r4,r2,10011368 <__subdf3+0x3c4>
100110dc:	010007c4 	movi	r4,31
100110e0:	2080c616 	blt	r4,r2,100113fc <__subdf3+0x458>
100110e4:	01000804 	movi	r4,32
100110e8:	2089c83a 	sub	r4,r4,r2
100110ec:	2910983a 	sll	r8,r5,r4
100110f0:	308ed83a 	srl	r7,r6,r2
100110f4:	3108983a 	sll	r4,r6,r4
100110f8:	2884d83a 	srl	r2,r5,r2
100110fc:	41ccb03a 	or	r6,r8,r7
10011100:	2008c03a 	cmpne	r4,r4,zero
10011104:	310cb03a 	or	r6,r6,r4
10011108:	898dc83a 	sub	r6,r17,r6
1001110c:	89a3803a 	cmpltu	r17,r17,r6
10011110:	1887c83a 	sub	r3,r3,r2
10011114:	1c47c83a 	sub	r3,r3,r17
10011118:	3023883a 	mov	r17,r6
1001111c:	1880202c 	andhi	r2,r3,128
10011120:	10002326 	beq	r2,zero,100111b0 <__subdf3+0x20c>
10011124:	04c02034 	movhi	r19,128
10011128:	9cffffc4 	addi	r19,r19,-1
1001112c:	1ce6703a 	and	r19,r3,r19
10011130:	98007a26 	beq	r19,zero,1001131c <__subdf3+0x378>
10011134:	9809883a 	mov	r4,r19
10011138:	0011aa40 	call	10011aa4 <__clzsi2>
1001113c:	113ffe04 	addi	r4,r2,-8
10011140:	00c007c4 	movi	r3,31
10011144:	19007b16 	blt	r3,r4,10011334 <__subdf3+0x390>
10011148:	00800804 	movi	r2,32
1001114c:	1105c83a 	sub	r2,r2,r4
10011150:	8884d83a 	srl	r2,r17,r2
10011154:	9906983a 	sll	r3,r19,r4
10011158:	8922983a 	sll	r17,r17,r4
1001115c:	10c4b03a 	or	r2,r2,r3
10011160:	24007816 	blt	r4,r16,10011344 <__subdf3+0x3a0>
10011164:	2421c83a 	sub	r16,r4,r16
10011168:	80c00044 	addi	r3,r16,1
1001116c:	010007c4 	movi	r4,31
10011170:	20c09516 	blt	r4,r3,100113c8 <__subdf3+0x424>
10011174:	01400804 	movi	r5,32
10011178:	28cbc83a 	sub	r5,r5,r3
1001117c:	88c8d83a 	srl	r4,r17,r3
10011180:	8962983a 	sll	r17,r17,r5
10011184:	114a983a 	sll	r5,r2,r5
10011188:	10c6d83a 	srl	r3,r2,r3
1001118c:	8804c03a 	cmpne	r2,r17,zero
10011190:	290ab03a 	or	r5,r5,r4
10011194:	28a2b03a 	or	r17,r5,r2
10011198:	0021883a 	mov	r16,zero
1001119c:	003fa206 	br	10011028 <__alt_data_end+0xf8011028>
100111a0:	2090b03a 	or	r8,r4,r2
100111a4:	40018e26 	beq	r8,zero,100117e0 <__subdf3+0x83c>
100111a8:	1007883a 	mov	r3,r2
100111ac:	2023883a 	mov	r17,r4
100111b0:	888001cc 	andi	r2,r17,7
100111b4:	103f9e1e 	bne	r2,zero,10011030 <__alt_data_end+0xf8011030>
100111b8:	1804977a 	slli	r2,r3,29
100111bc:	8822d0fa 	srli	r17,r17,3
100111c0:	1810d0fa 	srli	r8,r3,3
100111c4:	9100004c 	andi	r4,r18,1
100111c8:	1444b03a 	or	r2,r2,r17
100111cc:	00c1ffc4 	movi	r3,2047
100111d0:	80c02826 	beq	r16,r3,10011274 <__subdf3+0x2d0>
100111d4:	01400434 	movhi	r5,16
100111d8:	297fffc4 	addi	r5,r5,-1
100111dc:	80e0703a 	and	r16,r16,r3
100111e0:	414a703a 	and	r5,r8,r5
100111e4:	003fa806 	br	10011088 <__alt_data_end+0xf8011088>
100111e8:	0080630e 	bge	zero,r2,10011378 <__subdf3+0x3d4>
100111ec:	48003026 	beq	r9,zero,100112b0 <__subdf3+0x30c>
100111f0:	0101ffc4 	movi	r4,2047
100111f4:	813f8c26 	beq	r16,r4,10011028 <__alt_data_end+0xf8011028>
100111f8:	29402034 	orhi	r5,r5,128
100111fc:	01000e04 	movi	r4,56
10011200:	2080a90e 	bge	r4,r2,100114a8 <__subdf3+0x504>
10011204:	298cb03a 	or	r6,r5,r6
10011208:	3012c03a 	cmpne	r9,r6,zero
1001120c:	0005883a 	mov	r2,zero
10011210:	4c53883a 	add	r9,r9,r17
10011214:	4c63803a 	cmpltu	r17,r9,r17
10011218:	10c7883a 	add	r3,r2,r3
1001121c:	88c7883a 	add	r3,r17,r3
10011220:	4823883a 	mov	r17,r9
10011224:	1880202c 	andhi	r2,r3,128
10011228:	1000d026 	beq	r2,zero,1001156c <__subdf3+0x5c8>
1001122c:	84000044 	addi	r16,r16,1
10011230:	0081ffc4 	movi	r2,2047
10011234:	8080fe26 	beq	r16,r2,10011630 <__subdf3+0x68c>
10011238:	00bfe034 	movhi	r2,65408
1001123c:	10bfffc4 	addi	r2,r2,-1
10011240:	1886703a 	and	r3,r3,r2
10011244:	880ad07a 	srli	r5,r17,1
10011248:	180497fa 	slli	r2,r3,31
1001124c:	8900004c 	andi	r4,r17,1
10011250:	2922b03a 	or	r17,r5,r4
10011254:	1806d07a 	srli	r3,r3,1
10011258:	1462b03a 	or	r17,r2,r17
1001125c:	3825883a 	mov	r18,r7
10011260:	003f7106 	br	10011028 <__alt_data_end+0xf8011028>
10011264:	2984b03a 	or	r2,r5,r6
10011268:	103f6826 	beq	r2,zero,1001100c <__alt_data_end+0xf801100c>
1001126c:	39c03fcc 	andi	r7,r7,255
10011270:	003f6706 	br	10011010 <__alt_data_end+0xf8011010>
10011274:	4086b03a 	or	r3,r8,r2
10011278:	18015226 	beq	r3,zero,100117c4 <__subdf3+0x820>
1001127c:	00c00434 	movhi	r3,16
10011280:	41400234 	orhi	r5,r8,8
10011284:	18ffffc4 	addi	r3,r3,-1
10011288:	28ca703a 	and	r5,r5,r3
1001128c:	003f7e06 	br	10011088 <__alt_data_end+0xf8011088>
10011290:	10bfffc4 	addi	r2,r2,-1
10011294:	1000491e 	bne	r2,zero,100113bc <__subdf3+0x418>
10011298:	898fc83a 	sub	r7,r17,r6
1001129c:	89e3803a 	cmpltu	r17,r17,r7
100112a0:	1947c83a 	sub	r3,r3,r5
100112a4:	1c47c83a 	sub	r3,r3,r17
100112a8:	3823883a 	mov	r17,r7
100112ac:	003f9b06 	br	1001111c <__alt_data_end+0xf801111c>
100112b0:	2988b03a 	or	r4,r5,r6
100112b4:	203f5c26 	beq	r4,zero,10011028 <__alt_data_end+0xf8011028>
100112b8:	10bfffc4 	addi	r2,r2,-1
100112bc:	1000931e 	bne	r2,zero,1001150c <__subdf3+0x568>
100112c0:	898d883a 	add	r6,r17,r6
100112c4:	3463803a 	cmpltu	r17,r6,r17
100112c8:	1947883a 	add	r3,r3,r5
100112cc:	88c7883a 	add	r3,r17,r3
100112d0:	3023883a 	mov	r17,r6
100112d4:	003fd306 	br	10011224 <__alt_data_end+0xf8011224>
100112d8:	1000541e 	bne	r2,zero,1001142c <__subdf3+0x488>
100112dc:	80800044 	addi	r2,r16,1
100112e0:	1081ffcc 	andi	r2,r2,2047
100112e4:	01000044 	movi	r4,1
100112e8:	2080a20e 	bge	r4,r2,10011574 <__subdf3+0x5d0>
100112ec:	8989c83a 	sub	r4,r17,r6
100112f0:	8905803a 	cmpltu	r2,r17,r4
100112f4:	1967c83a 	sub	r19,r3,r5
100112f8:	98a7c83a 	sub	r19,r19,r2
100112fc:	9880202c 	andhi	r2,r19,128
10011300:	10006326 	beq	r2,zero,10011490 <__subdf3+0x4ec>
10011304:	3463c83a 	sub	r17,r6,r17
10011308:	28c7c83a 	sub	r3,r5,r3
1001130c:	344d803a 	cmpltu	r6,r6,r17
10011310:	19a7c83a 	sub	r19,r3,r6
10011314:	3825883a 	mov	r18,r7
10011318:	983f861e 	bne	r19,zero,10011134 <__alt_data_end+0xf8011134>
1001131c:	8809883a 	mov	r4,r17
10011320:	0011aa40 	call	10011aa4 <__clzsi2>
10011324:	10800804 	addi	r2,r2,32
10011328:	113ffe04 	addi	r4,r2,-8
1001132c:	00c007c4 	movi	r3,31
10011330:	193f850e 	bge	r3,r4,10011148 <__alt_data_end+0xf8011148>
10011334:	10bff604 	addi	r2,r2,-40
10011338:	8884983a 	sll	r2,r17,r2
1001133c:	0023883a 	mov	r17,zero
10011340:	243f880e 	bge	r4,r16,10011164 <__alt_data_end+0xf8011164>
10011344:	00ffe034 	movhi	r3,65408
10011348:	18ffffc4 	addi	r3,r3,-1
1001134c:	8121c83a 	sub	r16,r16,r4
10011350:	10c6703a 	and	r3,r2,r3
10011354:	003f3406 	br	10011028 <__alt_data_end+0xf8011028>
10011358:	9100004c 	andi	r4,r18,1
1001135c:	000b883a 	mov	r5,zero
10011360:	0005883a 	mov	r2,zero
10011364:	003f4806 	br	10011088 <__alt_data_end+0xf8011088>
10011368:	298cb03a 	or	r6,r5,r6
1001136c:	300cc03a 	cmpne	r6,r6,zero
10011370:	0005883a 	mov	r2,zero
10011374:	003f6406 	br	10011108 <__alt_data_end+0xf8011108>
10011378:	10009a1e 	bne	r2,zero,100115e4 <__subdf3+0x640>
1001137c:	82400044 	addi	r9,r16,1
10011380:	4881ffcc 	andi	r2,r9,2047
10011384:	02800044 	movi	r10,1
10011388:	5080670e 	bge	r10,r2,10011528 <__subdf3+0x584>
1001138c:	0081ffc4 	movi	r2,2047
10011390:	4880af26 	beq	r9,r2,10011650 <__subdf3+0x6ac>
10011394:	898d883a 	add	r6,r17,r6
10011398:	1945883a 	add	r2,r3,r5
1001139c:	3447803a 	cmpltu	r3,r6,r17
100113a0:	1887883a 	add	r3,r3,r2
100113a4:	182297fa 	slli	r17,r3,31
100113a8:	300cd07a 	srli	r6,r6,1
100113ac:	1806d07a 	srli	r3,r3,1
100113b0:	4821883a 	mov	r16,r9
100113b4:	89a2b03a 	or	r17,r17,r6
100113b8:	003f1b06 	br	10011028 <__alt_data_end+0xf8011028>
100113bc:	0101ffc4 	movi	r4,2047
100113c0:	813f441e 	bne	r16,r4,100110d4 <__alt_data_end+0xf80110d4>
100113c4:	003f1806 	br	10011028 <__alt_data_end+0xf8011028>
100113c8:	843ff844 	addi	r16,r16,-31
100113cc:	01400804 	movi	r5,32
100113d0:	1408d83a 	srl	r4,r2,r16
100113d4:	19405026 	beq	r3,r5,10011518 <__subdf3+0x574>
100113d8:	01401004 	movi	r5,64
100113dc:	28c7c83a 	sub	r3,r5,r3
100113e0:	10c4983a 	sll	r2,r2,r3
100113e4:	88a2b03a 	or	r17,r17,r2
100113e8:	8822c03a 	cmpne	r17,r17,zero
100113ec:	2462b03a 	or	r17,r4,r17
100113f0:	0007883a 	mov	r3,zero
100113f4:	0021883a 	mov	r16,zero
100113f8:	003f6d06 	br	100111b0 <__alt_data_end+0xf80111b0>
100113fc:	11fff804 	addi	r7,r2,-32
10011400:	01000804 	movi	r4,32
10011404:	29ced83a 	srl	r7,r5,r7
10011408:	11004526 	beq	r2,r4,10011520 <__subdf3+0x57c>
1001140c:	01001004 	movi	r4,64
10011410:	2089c83a 	sub	r4,r4,r2
10011414:	2904983a 	sll	r2,r5,r4
10011418:	118cb03a 	or	r6,r2,r6
1001141c:	300cc03a 	cmpne	r6,r6,zero
10011420:	398cb03a 	or	r6,r7,r6
10011424:	0005883a 	mov	r2,zero
10011428:	003f3706 	br	10011108 <__alt_data_end+0xf8011108>
1001142c:	80002a26 	beq	r16,zero,100114d8 <__subdf3+0x534>
10011430:	0101ffc4 	movi	r4,2047
10011434:	49006626 	beq	r9,r4,100115d0 <__subdf3+0x62c>
10011438:	0085c83a 	sub	r2,zero,r2
1001143c:	18c02034 	orhi	r3,r3,128
10011440:	01000e04 	movi	r4,56
10011444:	20807e16 	blt	r4,r2,10011640 <__subdf3+0x69c>
10011448:	010007c4 	movi	r4,31
1001144c:	2080e716 	blt	r4,r2,100117ec <__subdf3+0x848>
10011450:	01000804 	movi	r4,32
10011454:	2089c83a 	sub	r4,r4,r2
10011458:	1914983a 	sll	r10,r3,r4
1001145c:	8890d83a 	srl	r8,r17,r2
10011460:	8908983a 	sll	r4,r17,r4
10011464:	1884d83a 	srl	r2,r3,r2
10011468:	5222b03a 	or	r17,r10,r8
1001146c:	2006c03a 	cmpne	r3,r4,zero
10011470:	88e2b03a 	or	r17,r17,r3
10011474:	3463c83a 	sub	r17,r6,r17
10011478:	2885c83a 	sub	r2,r5,r2
1001147c:	344d803a 	cmpltu	r6,r6,r17
10011480:	1187c83a 	sub	r3,r2,r6
10011484:	4821883a 	mov	r16,r9
10011488:	3825883a 	mov	r18,r7
1001148c:	003f2306 	br	1001111c <__alt_data_end+0xf801111c>
10011490:	24d0b03a 	or	r8,r4,r19
10011494:	40001b1e 	bne	r8,zero,10011504 <__subdf3+0x560>
10011498:	0005883a 	mov	r2,zero
1001149c:	0009883a 	mov	r4,zero
100114a0:	0021883a 	mov	r16,zero
100114a4:	003f4906 	br	100111cc <__alt_data_end+0xf80111cc>
100114a8:	010007c4 	movi	r4,31
100114ac:	20803a16 	blt	r4,r2,10011598 <__subdf3+0x5f4>
100114b0:	01000804 	movi	r4,32
100114b4:	2089c83a 	sub	r4,r4,r2
100114b8:	2912983a 	sll	r9,r5,r4
100114bc:	3090d83a 	srl	r8,r6,r2
100114c0:	3108983a 	sll	r4,r6,r4
100114c4:	2884d83a 	srl	r2,r5,r2
100114c8:	4a12b03a 	or	r9,r9,r8
100114cc:	2008c03a 	cmpne	r4,r4,zero
100114d0:	4912b03a 	or	r9,r9,r4
100114d4:	003f4e06 	br	10011210 <__alt_data_end+0xf8011210>
100114d8:	1c48b03a 	or	r4,r3,r17
100114dc:	20003c26 	beq	r4,zero,100115d0 <__subdf3+0x62c>
100114e0:	0084303a 	nor	r2,zero,r2
100114e4:	1000381e 	bne	r2,zero,100115c8 <__subdf3+0x624>
100114e8:	3463c83a 	sub	r17,r6,r17
100114ec:	28c5c83a 	sub	r2,r5,r3
100114f0:	344d803a 	cmpltu	r6,r6,r17
100114f4:	1187c83a 	sub	r3,r2,r6
100114f8:	4821883a 	mov	r16,r9
100114fc:	3825883a 	mov	r18,r7
10011500:	003f0606 	br	1001111c <__alt_data_end+0xf801111c>
10011504:	2023883a 	mov	r17,r4
10011508:	003f0906 	br	10011130 <__alt_data_end+0xf8011130>
1001150c:	0101ffc4 	movi	r4,2047
10011510:	813f3a1e 	bne	r16,r4,100111fc <__alt_data_end+0xf80111fc>
10011514:	003ec406 	br	10011028 <__alt_data_end+0xf8011028>
10011518:	0005883a 	mov	r2,zero
1001151c:	003fb106 	br	100113e4 <__alt_data_end+0xf80113e4>
10011520:	0005883a 	mov	r2,zero
10011524:	003fbc06 	br	10011418 <__alt_data_end+0xf8011418>
10011528:	1c44b03a 	or	r2,r3,r17
1001152c:	80008e1e 	bne	r16,zero,10011768 <__subdf3+0x7c4>
10011530:	1000c826 	beq	r2,zero,10011854 <__subdf3+0x8b0>
10011534:	2984b03a 	or	r2,r5,r6
10011538:	103ebb26 	beq	r2,zero,10011028 <__alt_data_end+0xf8011028>
1001153c:	8989883a 	add	r4,r17,r6
10011540:	1945883a 	add	r2,r3,r5
10011544:	2447803a 	cmpltu	r3,r4,r17
10011548:	1887883a 	add	r3,r3,r2
1001154c:	1880202c 	andhi	r2,r3,128
10011550:	2023883a 	mov	r17,r4
10011554:	103f1626 	beq	r2,zero,100111b0 <__alt_data_end+0xf80111b0>
10011558:	00bfe034 	movhi	r2,65408
1001155c:	10bfffc4 	addi	r2,r2,-1
10011560:	5021883a 	mov	r16,r10
10011564:	1886703a 	and	r3,r3,r2
10011568:	003eaf06 	br	10011028 <__alt_data_end+0xf8011028>
1001156c:	3825883a 	mov	r18,r7
10011570:	003f0f06 	br	100111b0 <__alt_data_end+0xf80111b0>
10011574:	1c44b03a 	or	r2,r3,r17
10011578:	8000251e 	bne	r16,zero,10011610 <__subdf3+0x66c>
1001157c:	1000661e 	bne	r2,zero,10011718 <__subdf3+0x774>
10011580:	2990b03a 	or	r8,r5,r6
10011584:	40009626 	beq	r8,zero,100117e0 <__subdf3+0x83c>
10011588:	2807883a 	mov	r3,r5
1001158c:	3023883a 	mov	r17,r6
10011590:	3825883a 	mov	r18,r7
10011594:	003ea406 	br	10011028 <__alt_data_end+0xf8011028>
10011598:	127ff804 	addi	r9,r2,-32
1001159c:	01000804 	movi	r4,32
100115a0:	2a52d83a 	srl	r9,r5,r9
100115a4:	11008c26 	beq	r2,r4,100117d8 <__subdf3+0x834>
100115a8:	01001004 	movi	r4,64
100115ac:	2085c83a 	sub	r2,r4,r2
100115b0:	2884983a 	sll	r2,r5,r2
100115b4:	118cb03a 	or	r6,r2,r6
100115b8:	300cc03a 	cmpne	r6,r6,zero
100115bc:	4992b03a 	or	r9,r9,r6
100115c0:	0005883a 	mov	r2,zero
100115c4:	003f1206 	br	10011210 <__alt_data_end+0xf8011210>
100115c8:	0101ffc4 	movi	r4,2047
100115cc:	493f9c1e 	bne	r9,r4,10011440 <__alt_data_end+0xf8011440>
100115d0:	2807883a 	mov	r3,r5
100115d4:	3023883a 	mov	r17,r6
100115d8:	4821883a 	mov	r16,r9
100115dc:	3825883a 	mov	r18,r7
100115e0:	003e9106 	br	10011028 <__alt_data_end+0xf8011028>
100115e4:	80001f1e 	bne	r16,zero,10011664 <__subdf3+0x6c0>
100115e8:	1c48b03a 	or	r4,r3,r17
100115ec:	20005a26 	beq	r4,zero,10011758 <__subdf3+0x7b4>
100115f0:	0084303a 	nor	r2,zero,r2
100115f4:	1000561e 	bne	r2,zero,10011750 <__subdf3+0x7ac>
100115f8:	89a3883a 	add	r17,r17,r6
100115fc:	1945883a 	add	r2,r3,r5
10011600:	898d803a 	cmpltu	r6,r17,r6
10011604:	3087883a 	add	r3,r6,r2
10011608:	4821883a 	mov	r16,r9
1001160c:	003f0506 	br	10011224 <__alt_data_end+0xf8011224>
10011610:	10002b1e 	bne	r2,zero,100116c0 <__subdf3+0x71c>
10011614:	2984b03a 	or	r2,r5,r6
10011618:	10008026 	beq	r2,zero,1001181c <__subdf3+0x878>
1001161c:	2807883a 	mov	r3,r5
10011620:	3023883a 	mov	r17,r6
10011624:	3825883a 	mov	r18,r7
10011628:	0401ffc4 	movi	r16,2047
1001162c:	003e7e06 	br	10011028 <__alt_data_end+0xf8011028>
10011630:	3809883a 	mov	r4,r7
10011634:	0011883a 	mov	r8,zero
10011638:	0005883a 	mov	r2,zero
1001163c:	003ee306 	br	100111cc <__alt_data_end+0xf80111cc>
10011640:	1c62b03a 	or	r17,r3,r17
10011644:	8822c03a 	cmpne	r17,r17,zero
10011648:	0005883a 	mov	r2,zero
1001164c:	003f8906 	br	10011474 <__alt_data_end+0xf8011474>
10011650:	3809883a 	mov	r4,r7
10011654:	4821883a 	mov	r16,r9
10011658:	0011883a 	mov	r8,zero
1001165c:	0005883a 	mov	r2,zero
10011660:	003eda06 	br	100111cc <__alt_data_end+0xf80111cc>
10011664:	0101ffc4 	movi	r4,2047
10011668:	49003b26 	beq	r9,r4,10011758 <__subdf3+0x7b4>
1001166c:	0085c83a 	sub	r2,zero,r2
10011670:	18c02034 	orhi	r3,r3,128
10011674:	01000e04 	movi	r4,56
10011678:	20806e16 	blt	r4,r2,10011834 <__subdf3+0x890>
1001167c:	010007c4 	movi	r4,31
10011680:	20807716 	blt	r4,r2,10011860 <__subdf3+0x8bc>
10011684:	01000804 	movi	r4,32
10011688:	2089c83a 	sub	r4,r4,r2
1001168c:	1914983a 	sll	r10,r3,r4
10011690:	8890d83a 	srl	r8,r17,r2
10011694:	8908983a 	sll	r4,r17,r4
10011698:	1884d83a 	srl	r2,r3,r2
1001169c:	5222b03a 	or	r17,r10,r8
100116a0:	2006c03a 	cmpne	r3,r4,zero
100116a4:	88e2b03a 	or	r17,r17,r3
100116a8:	89a3883a 	add	r17,r17,r6
100116ac:	1145883a 	add	r2,r2,r5
100116b0:	898d803a 	cmpltu	r6,r17,r6
100116b4:	3087883a 	add	r3,r6,r2
100116b8:	4821883a 	mov	r16,r9
100116bc:	003ed906 	br	10011224 <__alt_data_end+0xf8011224>
100116c0:	2984b03a 	or	r2,r5,r6
100116c4:	10004226 	beq	r2,zero,100117d0 <__subdf3+0x82c>
100116c8:	1808d0fa 	srli	r4,r3,3
100116cc:	8822d0fa 	srli	r17,r17,3
100116d0:	1806977a 	slli	r3,r3,29
100116d4:	2080022c 	andhi	r2,r4,8
100116d8:	1c62b03a 	or	r17,r3,r17
100116dc:	10000826 	beq	r2,zero,10011700 <__subdf3+0x75c>
100116e0:	2812d0fa 	srli	r9,r5,3
100116e4:	4880022c 	andhi	r2,r9,8
100116e8:	1000051e 	bne	r2,zero,10011700 <__subdf3+0x75c>
100116ec:	300cd0fa 	srli	r6,r6,3
100116f0:	2804977a 	slli	r2,r5,29
100116f4:	4809883a 	mov	r4,r9
100116f8:	3825883a 	mov	r18,r7
100116fc:	11a2b03a 	or	r17,r2,r6
10011700:	8806d77a 	srli	r3,r17,29
10011704:	200890fa 	slli	r4,r4,3
10011708:	882290fa 	slli	r17,r17,3
1001170c:	0401ffc4 	movi	r16,2047
10011710:	1906b03a 	or	r3,r3,r4
10011714:	003e4406 	br	10011028 <__alt_data_end+0xf8011028>
10011718:	2984b03a 	or	r2,r5,r6
1001171c:	103e4226 	beq	r2,zero,10011028 <__alt_data_end+0xf8011028>
10011720:	8989c83a 	sub	r4,r17,r6
10011724:	8911803a 	cmpltu	r8,r17,r4
10011728:	1945c83a 	sub	r2,r3,r5
1001172c:	1205c83a 	sub	r2,r2,r8
10011730:	1200202c 	andhi	r8,r2,128
10011734:	403e9a26 	beq	r8,zero,100111a0 <__alt_data_end+0xf80111a0>
10011738:	3463c83a 	sub	r17,r6,r17
1001173c:	28c5c83a 	sub	r2,r5,r3
10011740:	344d803a 	cmpltu	r6,r6,r17
10011744:	1187c83a 	sub	r3,r2,r6
10011748:	3825883a 	mov	r18,r7
1001174c:	003e3606 	br	10011028 <__alt_data_end+0xf8011028>
10011750:	0101ffc4 	movi	r4,2047
10011754:	493fc71e 	bne	r9,r4,10011674 <__alt_data_end+0xf8011674>
10011758:	2807883a 	mov	r3,r5
1001175c:	3023883a 	mov	r17,r6
10011760:	4821883a 	mov	r16,r9
10011764:	003e3006 	br	10011028 <__alt_data_end+0xf8011028>
10011768:	10003626 	beq	r2,zero,10011844 <__subdf3+0x8a0>
1001176c:	2984b03a 	or	r2,r5,r6
10011770:	10001726 	beq	r2,zero,100117d0 <__subdf3+0x82c>
10011774:	1808d0fa 	srli	r4,r3,3
10011778:	8822d0fa 	srli	r17,r17,3
1001177c:	1806977a 	slli	r3,r3,29
10011780:	2080022c 	andhi	r2,r4,8
10011784:	1c62b03a 	or	r17,r3,r17
10011788:	10000726 	beq	r2,zero,100117a8 <__subdf3+0x804>
1001178c:	2812d0fa 	srli	r9,r5,3
10011790:	4880022c 	andhi	r2,r9,8
10011794:	1000041e 	bne	r2,zero,100117a8 <__subdf3+0x804>
10011798:	300cd0fa 	srli	r6,r6,3
1001179c:	2804977a 	slli	r2,r5,29
100117a0:	4809883a 	mov	r4,r9
100117a4:	11a2b03a 	or	r17,r2,r6
100117a8:	8806d77a 	srli	r3,r17,29
100117ac:	200890fa 	slli	r4,r4,3
100117b0:	882290fa 	slli	r17,r17,3
100117b4:	3825883a 	mov	r18,r7
100117b8:	1906b03a 	or	r3,r3,r4
100117bc:	0401ffc4 	movi	r16,2047
100117c0:	003e1906 	br	10011028 <__alt_data_end+0xf8011028>
100117c4:	000b883a 	mov	r5,zero
100117c8:	0005883a 	mov	r2,zero
100117cc:	003e2e06 	br	10011088 <__alt_data_end+0xf8011088>
100117d0:	0401ffc4 	movi	r16,2047
100117d4:	003e1406 	br	10011028 <__alt_data_end+0xf8011028>
100117d8:	0005883a 	mov	r2,zero
100117dc:	003f7506 	br	100115b4 <__alt_data_end+0xf80115b4>
100117e0:	0005883a 	mov	r2,zero
100117e4:	0009883a 	mov	r4,zero
100117e8:	003e7806 	br	100111cc <__alt_data_end+0xf80111cc>
100117ec:	123ff804 	addi	r8,r2,-32
100117f0:	01000804 	movi	r4,32
100117f4:	1a10d83a 	srl	r8,r3,r8
100117f8:	11002526 	beq	r2,r4,10011890 <__subdf3+0x8ec>
100117fc:	01001004 	movi	r4,64
10011800:	2085c83a 	sub	r2,r4,r2
10011804:	1884983a 	sll	r2,r3,r2
10011808:	1444b03a 	or	r2,r2,r17
1001180c:	1004c03a 	cmpne	r2,r2,zero
10011810:	40a2b03a 	or	r17,r8,r2
10011814:	0005883a 	mov	r2,zero
10011818:	003f1606 	br	10011474 <__alt_data_end+0xf8011474>
1001181c:	02000434 	movhi	r8,16
10011820:	0009883a 	mov	r4,zero
10011824:	423fffc4 	addi	r8,r8,-1
10011828:	00bfffc4 	movi	r2,-1
1001182c:	0401ffc4 	movi	r16,2047
10011830:	003e6606 	br	100111cc <__alt_data_end+0xf80111cc>
10011834:	1c62b03a 	or	r17,r3,r17
10011838:	8822c03a 	cmpne	r17,r17,zero
1001183c:	0005883a 	mov	r2,zero
10011840:	003f9906 	br	100116a8 <__alt_data_end+0xf80116a8>
10011844:	2807883a 	mov	r3,r5
10011848:	3023883a 	mov	r17,r6
1001184c:	0401ffc4 	movi	r16,2047
10011850:	003df506 	br	10011028 <__alt_data_end+0xf8011028>
10011854:	2807883a 	mov	r3,r5
10011858:	3023883a 	mov	r17,r6
1001185c:	003df206 	br	10011028 <__alt_data_end+0xf8011028>
10011860:	123ff804 	addi	r8,r2,-32
10011864:	01000804 	movi	r4,32
10011868:	1a10d83a 	srl	r8,r3,r8
1001186c:	11000a26 	beq	r2,r4,10011898 <__subdf3+0x8f4>
10011870:	01001004 	movi	r4,64
10011874:	2085c83a 	sub	r2,r4,r2
10011878:	1884983a 	sll	r2,r3,r2
1001187c:	1444b03a 	or	r2,r2,r17
10011880:	1004c03a 	cmpne	r2,r2,zero
10011884:	40a2b03a 	or	r17,r8,r2
10011888:	0005883a 	mov	r2,zero
1001188c:	003f8606 	br	100116a8 <__alt_data_end+0xf80116a8>
10011890:	0005883a 	mov	r2,zero
10011894:	003fdc06 	br	10011808 <__alt_data_end+0xf8011808>
10011898:	0005883a 	mov	r2,zero
1001189c:	003ff706 	br	1001187c <__alt_data_end+0xf801187c>

100118a0 <__fixdfsi>:
100118a0:	280cd53a 	srli	r6,r5,20
100118a4:	00c00434 	movhi	r3,16
100118a8:	18ffffc4 	addi	r3,r3,-1
100118ac:	3181ffcc 	andi	r6,r6,2047
100118b0:	01c0ff84 	movi	r7,1022
100118b4:	28c6703a 	and	r3,r5,r3
100118b8:	280ad7fa 	srli	r5,r5,31
100118bc:	3980120e 	bge	r7,r6,10011908 <__fixdfsi+0x68>
100118c0:	00810744 	movi	r2,1053
100118c4:	11800c16 	blt	r2,r6,100118f8 <__fixdfsi+0x58>
100118c8:	00810cc4 	movi	r2,1075
100118cc:	1185c83a 	sub	r2,r2,r6
100118d0:	01c007c4 	movi	r7,31
100118d4:	18c00434 	orhi	r3,r3,16
100118d8:	38800d16 	blt	r7,r2,10011910 <__fixdfsi+0x70>
100118dc:	31befb44 	addi	r6,r6,-1043
100118e0:	2084d83a 	srl	r2,r4,r2
100118e4:	1986983a 	sll	r3,r3,r6
100118e8:	1884b03a 	or	r2,r3,r2
100118ec:	28000726 	beq	r5,zero,1001190c <__fixdfsi+0x6c>
100118f0:	0085c83a 	sub	r2,zero,r2
100118f4:	f800283a 	ret
100118f8:	00a00034 	movhi	r2,32768
100118fc:	10bfffc4 	addi	r2,r2,-1
10011900:	2885883a 	add	r2,r5,r2
10011904:	f800283a 	ret
10011908:	0005883a 	mov	r2,zero
1001190c:	f800283a 	ret
10011910:	008104c4 	movi	r2,1043
10011914:	1185c83a 	sub	r2,r2,r6
10011918:	1884d83a 	srl	r2,r3,r2
1001191c:	003ff306 	br	100118ec <__alt_data_end+0xf80118ec>

10011920 <__floatsidf>:
10011920:	defffd04 	addi	sp,sp,-12
10011924:	dfc00215 	stw	ra,8(sp)
10011928:	dc400115 	stw	r17,4(sp)
1001192c:	dc000015 	stw	r16,0(sp)
10011930:	20002b26 	beq	r4,zero,100119e0 <__floatsidf+0xc0>
10011934:	2023883a 	mov	r17,r4
10011938:	2020d7fa 	srli	r16,r4,31
1001193c:	20002d16 	blt	r4,zero,100119f4 <__floatsidf+0xd4>
10011940:	8809883a 	mov	r4,r17
10011944:	0011aa40 	call	10011aa4 <__clzsi2>
10011948:	01410784 	movi	r5,1054
1001194c:	288bc83a 	sub	r5,r5,r2
10011950:	01010cc4 	movi	r4,1075
10011954:	2149c83a 	sub	r4,r4,r5
10011958:	00c007c4 	movi	r3,31
1001195c:	1900160e 	bge	r3,r4,100119b8 <__floatsidf+0x98>
10011960:	00c104c4 	movi	r3,1043
10011964:	1947c83a 	sub	r3,r3,r5
10011968:	88c6983a 	sll	r3,r17,r3
1001196c:	00800434 	movhi	r2,16
10011970:	10bfffc4 	addi	r2,r2,-1
10011974:	1886703a 	and	r3,r3,r2
10011978:	2941ffcc 	andi	r5,r5,2047
1001197c:	800d883a 	mov	r6,r16
10011980:	0005883a 	mov	r2,zero
10011984:	280a953a 	slli	r5,r5,20
10011988:	31803fcc 	andi	r6,r6,255
1001198c:	01000434 	movhi	r4,16
10011990:	300c97fa 	slli	r6,r6,31
10011994:	213fffc4 	addi	r4,r4,-1
10011998:	1906703a 	and	r3,r3,r4
1001199c:	1946b03a 	or	r3,r3,r5
100119a0:	1986b03a 	or	r3,r3,r6
100119a4:	dfc00217 	ldw	ra,8(sp)
100119a8:	dc400117 	ldw	r17,4(sp)
100119ac:	dc000017 	ldw	r16,0(sp)
100119b0:	dec00304 	addi	sp,sp,12
100119b4:	f800283a 	ret
100119b8:	00c002c4 	movi	r3,11
100119bc:	1887c83a 	sub	r3,r3,r2
100119c0:	88c6d83a 	srl	r3,r17,r3
100119c4:	8904983a 	sll	r2,r17,r4
100119c8:	01000434 	movhi	r4,16
100119cc:	213fffc4 	addi	r4,r4,-1
100119d0:	2941ffcc 	andi	r5,r5,2047
100119d4:	1906703a 	and	r3,r3,r4
100119d8:	800d883a 	mov	r6,r16
100119dc:	003fe906 	br	10011984 <__alt_data_end+0xf8011984>
100119e0:	000d883a 	mov	r6,zero
100119e4:	000b883a 	mov	r5,zero
100119e8:	0007883a 	mov	r3,zero
100119ec:	0005883a 	mov	r2,zero
100119f0:	003fe406 	br	10011984 <__alt_data_end+0xf8011984>
100119f4:	0123c83a 	sub	r17,zero,r4
100119f8:	003fd106 	br	10011940 <__alt_data_end+0xf8011940>

100119fc <__floatunsidf>:
100119fc:	defffe04 	addi	sp,sp,-8
10011a00:	dc000015 	stw	r16,0(sp)
10011a04:	dfc00115 	stw	ra,4(sp)
10011a08:	2021883a 	mov	r16,r4
10011a0c:	20002226 	beq	r4,zero,10011a98 <__floatunsidf+0x9c>
10011a10:	0011aa40 	call	10011aa4 <__clzsi2>
10011a14:	01010784 	movi	r4,1054
10011a18:	2089c83a 	sub	r4,r4,r2
10011a1c:	01810cc4 	movi	r6,1075
10011a20:	310dc83a 	sub	r6,r6,r4
10011a24:	00c007c4 	movi	r3,31
10011a28:	1980120e 	bge	r3,r6,10011a74 <__floatunsidf+0x78>
10011a2c:	00c104c4 	movi	r3,1043
10011a30:	1907c83a 	sub	r3,r3,r4
10011a34:	80ca983a 	sll	r5,r16,r3
10011a38:	00800434 	movhi	r2,16
10011a3c:	10bfffc4 	addi	r2,r2,-1
10011a40:	2101ffcc 	andi	r4,r4,2047
10011a44:	0021883a 	mov	r16,zero
10011a48:	288a703a 	and	r5,r5,r2
10011a4c:	2008953a 	slli	r4,r4,20
10011a50:	00c00434 	movhi	r3,16
10011a54:	18ffffc4 	addi	r3,r3,-1
10011a58:	28c6703a 	and	r3,r5,r3
10011a5c:	8005883a 	mov	r2,r16
10011a60:	1906b03a 	or	r3,r3,r4
10011a64:	dfc00117 	ldw	ra,4(sp)
10011a68:	dc000017 	ldw	r16,0(sp)
10011a6c:	dec00204 	addi	sp,sp,8
10011a70:	f800283a 	ret
10011a74:	00c002c4 	movi	r3,11
10011a78:	188bc83a 	sub	r5,r3,r2
10011a7c:	814ad83a 	srl	r5,r16,r5
10011a80:	00c00434 	movhi	r3,16
10011a84:	18ffffc4 	addi	r3,r3,-1
10011a88:	81a0983a 	sll	r16,r16,r6
10011a8c:	2101ffcc 	andi	r4,r4,2047
10011a90:	28ca703a 	and	r5,r5,r3
10011a94:	003fed06 	br	10011a4c <__alt_data_end+0xf8011a4c>
10011a98:	0009883a 	mov	r4,zero
10011a9c:	000b883a 	mov	r5,zero
10011aa0:	003fea06 	br	10011a4c <__alt_data_end+0xf8011a4c>

10011aa4 <__clzsi2>:
10011aa4:	00bfffd4 	movui	r2,65535
10011aa8:	11000536 	bltu	r2,r4,10011ac0 <__clzsi2+0x1c>
10011aac:	00803fc4 	movi	r2,255
10011ab0:	11000f36 	bltu	r2,r4,10011af0 <__clzsi2+0x4c>
10011ab4:	00800804 	movi	r2,32
10011ab8:	0007883a 	mov	r3,zero
10011abc:	00000506 	br	10011ad4 <__clzsi2+0x30>
10011ac0:	00804034 	movhi	r2,256
10011ac4:	10bfffc4 	addi	r2,r2,-1
10011ac8:	11000c2e 	bgeu	r2,r4,10011afc <__clzsi2+0x58>
10011acc:	00800204 	movi	r2,8
10011ad0:	00c00604 	movi	r3,24
10011ad4:	20c8d83a 	srl	r4,r4,r3
10011ad8:	00c40074 	movhi	r3,4097
10011adc:	18d39604 	addi	r3,r3,20056
10011ae0:	1909883a 	add	r4,r3,r4
10011ae4:	20c00003 	ldbu	r3,0(r4)
10011ae8:	10c5c83a 	sub	r2,r2,r3
10011aec:	f800283a 	ret
10011af0:	00800604 	movi	r2,24
10011af4:	00c00204 	movi	r3,8
10011af8:	003ff606 	br	10011ad4 <__alt_data_end+0xf8011ad4>
10011afc:	00800404 	movi	r2,16
10011b00:	1007883a 	mov	r3,r2
10011b04:	003ff306 	br	10011ad4 <__alt_data_end+0xf8011ad4>

10011b08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011b08:	defffe04 	addi	sp,sp,-8
10011b0c:	dfc00115 	stw	ra,4(sp)
10011b10:	df000015 	stw	fp,0(sp)
10011b14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011b18:	d0a00e17 	ldw	r2,-32712(gp)
10011b1c:	10000326 	beq	r2,zero,10011b2c <alt_get_errno+0x24>
10011b20:	d0a00e17 	ldw	r2,-32712(gp)
10011b24:	103ee83a 	callr	r2
10011b28:	00000106 	br	10011b30 <alt_get_errno+0x28>
10011b2c:	d0aa9004 	addi	r2,gp,-21952
}
10011b30:	e037883a 	mov	sp,fp
10011b34:	dfc00117 	ldw	ra,4(sp)
10011b38:	df000017 	ldw	fp,0(sp)
10011b3c:	dec00204 	addi	sp,sp,8
10011b40:	f800283a 	ret

10011b44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011b44:	defffb04 	addi	sp,sp,-20
10011b48:	dfc00415 	stw	ra,16(sp)
10011b4c:	df000315 	stw	fp,12(sp)
10011b50:	df000304 	addi	fp,sp,12
10011b54:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011b58:	e0bfff17 	ldw	r2,-4(fp)
10011b5c:	10000816 	blt	r2,zero,10011b80 <close+0x3c>
10011b60:	01400304 	movi	r5,12
10011b64:	e13fff17 	ldw	r4,-4(fp)
10011b68:	0004bc80 	call	10004bc8 <__mulsi3>
10011b6c:	1007883a 	mov	r3,r2
10011b70:	00840074 	movhi	r2,4097
10011b74:	1099c604 	addi	r2,r2,26392
10011b78:	1885883a 	add	r2,r3,r2
10011b7c:	00000106 	br	10011b84 <close+0x40>
10011b80:	0005883a 	mov	r2,zero
10011b84:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011b88:	e0bffd17 	ldw	r2,-12(fp)
10011b8c:	10001926 	beq	r2,zero,10011bf4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011b90:	e0bffd17 	ldw	r2,-12(fp)
10011b94:	10800017 	ldw	r2,0(r2)
10011b98:	10800417 	ldw	r2,16(r2)
10011b9c:	10000626 	beq	r2,zero,10011bb8 <close+0x74>
10011ba0:	e0bffd17 	ldw	r2,-12(fp)
10011ba4:	10800017 	ldw	r2,0(r2)
10011ba8:	10800417 	ldw	r2,16(r2)
10011bac:	e13ffd17 	ldw	r4,-12(fp)
10011bb0:	103ee83a 	callr	r2
10011bb4:	00000106 	br	10011bbc <close+0x78>
10011bb8:	0005883a 	mov	r2,zero
10011bbc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011bc0:	e13fff17 	ldw	r4,-4(fp)
10011bc4:	001222c0 	call	1001222c <alt_release_fd>
    if (rval < 0)
10011bc8:	e0bffe17 	ldw	r2,-8(fp)
10011bcc:	1000070e 	bge	r2,zero,10011bec <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011bd0:	0011b080 	call	10011b08 <alt_get_errno>
10011bd4:	1007883a 	mov	r3,r2
10011bd8:	e0bffe17 	ldw	r2,-8(fp)
10011bdc:	0085c83a 	sub	r2,zero,r2
10011be0:	18800015 	stw	r2,0(r3)
      return -1;
10011be4:	00bfffc4 	movi	r2,-1
10011be8:	00000706 	br	10011c08 <close+0xc4>
    }
    return 0;
10011bec:	0005883a 	mov	r2,zero
10011bf0:	00000506 	br	10011c08 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011bf4:	0011b080 	call	10011b08 <alt_get_errno>
10011bf8:	1007883a 	mov	r3,r2
10011bfc:	00801444 	movi	r2,81
10011c00:	18800015 	stw	r2,0(r3)
    return -1;
10011c04:	00bfffc4 	movi	r2,-1
  }
}
10011c08:	e037883a 	mov	sp,fp
10011c0c:	dfc00117 	ldw	ra,4(sp)
10011c10:	df000017 	ldw	fp,0(sp)
10011c14:	dec00204 	addi	sp,sp,8
10011c18:	f800283a 	ret

10011c1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011c1c:	defffc04 	addi	sp,sp,-16
10011c20:	df000315 	stw	fp,12(sp)
10011c24:	df000304 	addi	fp,sp,12
10011c28:	e13ffd15 	stw	r4,-12(fp)
10011c2c:	e17ffe15 	stw	r5,-8(fp)
10011c30:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011c34:	e0bfff17 	ldw	r2,-4(fp)
}
10011c38:	e037883a 	mov	sp,fp
10011c3c:	df000017 	ldw	fp,0(sp)
10011c40:	dec00104 	addi	sp,sp,4
10011c44:	f800283a 	ret

10011c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011c48:	defffe04 	addi	sp,sp,-8
10011c4c:	dfc00115 	stw	ra,4(sp)
10011c50:	df000015 	stw	fp,0(sp)
10011c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011c58:	d0a00e17 	ldw	r2,-32712(gp)
10011c5c:	10000326 	beq	r2,zero,10011c6c <alt_get_errno+0x24>
10011c60:	d0a00e17 	ldw	r2,-32712(gp)
10011c64:	103ee83a 	callr	r2
10011c68:	00000106 	br	10011c70 <alt_get_errno+0x28>
10011c6c:	d0aa9004 	addi	r2,gp,-21952
}
10011c70:	e037883a 	mov	sp,fp
10011c74:	dfc00117 	ldw	ra,4(sp)
10011c78:	df000017 	ldw	fp,0(sp)
10011c7c:	dec00204 	addi	sp,sp,8
10011c80:	f800283a 	ret

10011c84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011c84:	defffb04 	addi	sp,sp,-20
10011c88:	dfc00415 	stw	ra,16(sp)
10011c8c:	df000315 	stw	fp,12(sp)
10011c90:	df000304 	addi	fp,sp,12
10011c94:	e13ffe15 	stw	r4,-8(fp)
10011c98:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011c9c:	e0bffe17 	ldw	r2,-8(fp)
10011ca0:	10000816 	blt	r2,zero,10011cc4 <fstat+0x40>
10011ca4:	01400304 	movi	r5,12
10011ca8:	e13ffe17 	ldw	r4,-8(fp)
10011cac:	0004bc80 	call	10004bc8 <__mulsi3>
10011cb0:	1007883a 	mov	r3,r2
10011cb4:	00840074 	movhi	r2,4097
10011cb8:	1099c604 	addi	r2,r2,26392
10011cbc:	1885883a 	add	r2,r3,r2
10011cc0:	00000106 	br	10011cc8 <fstat+0x44>
10011cc4:	0005883a 	mov	r2,zero
10011cc8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011ccc:	e0bffd17 	ldw	r2,-12(fp)
10011cd0:	10001026 	beq	r2,zero,10011d14 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011cd4:	e0bffd17 	ldw	r2,-12(fp)
10011cd8:	10800017 	ldw	r2,0(r2)
10011cdc:	10800817 	ldw	r2,32(r2)
10011ce0:	10000726 	beq	r2,zero,10011d00 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011ce4:	e0bffd17 	ldw	r2,-12(fp)
10011ce8:	10800017 	ldw	r2,0(r2)
10011cec:	10800817 	ldw	r2,32(r2)
10011cf0:	e17fff17 	ldw	r5,-4(fp)
10011cf4:	e13ffd17 	ldw	r4,-12(fp)
10011cf8:	103ee83a 	callr	r2
10011cfc:	00000a06 	br	10011d28 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011d00:	e0bfff17 	ldw	r2,-4(fp)
10011d04:	00c80004 	movi	r3,8192
10011d08:	10c00115 	stw	r3,4(r2)
      return 0;
10011d0c:	0005883a 	mov	r2,zero
10011d10:	00000506 	br	10011d28 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011d14:	0011c480 	call	10011c48 <alt_get_errno>
10011d18:	1007883a 	mov	r3,r2
10011d1c:	00801444 	movi	r2,81
10011d20:	18800015 	stw	r2,0(r3)
    return -1;
10011d24:	00bfffc4 	movi	r2,-1
  }
}
10011d28:	e037883a 	mov	sp,fp
10011d2c:	dfc00117 	ldw	ra,4(sp)
10011d30:	df000017 	ldw	fp,0(sp)
10011d34:	dec00204 	addi	sp,sp,8
10011d38:	f800283a 	ret

10011d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011d3c:	defffe04 	addi	sp,sp,-8
10011d40:	dfc00115 	stw	ra,4(sp)
10011d44:	df000015 	stw	fp,0(sp)
10011d48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011d4c:	d0a00e17 	ldw	r2,-32712(gp)
10011d50:	10000326 	beq	r2,zero,10011d60 <alt_get_errno+0x24>
10011d54:	d0a00e17 	ldw	r2,-32712(gp)
10011d58:	103ee83a 	callr	r2
10011d5c:	00000106 	br	10011d64 <alt_get_errno+0x28>
10011d60:	d0aa9004 	addi	r2,gp,-21952
}
10011d64:	e037883a 	mov	sp,fp
10011d68:	dfc00117 	ldw	ra,4(sp)
10011d6c:	df000017 	ldw	fp,0(sp)
10011d70:	dec00204 	addi	sp,sp,8
10011d74:	f800283a 	ret

10011d78 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011d78:	deffed04 	addi	sp,sp,-76
10011d7c:	dfc01215 	stw	ra,72(sp)
10011d80:	df001115 	stw	fp,68(sp)
10011d84:	df001104 	addi	fp,sp,68
10011d88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011d8c:	e0bfff17 	ldw	r2,-4(fp)
10011d90:	10000816 	blt	r2,zero,10011db4 <isatty+0x3c>
10011d94:	01400304 	movi	r5,12
10011d98:	e13fff17 	ldw	r4,-4(fp)
10011d9c:	0004bc80 	call	10004bc8 <__mulsi3>
10011da0:	1007883a 	mov	r3,r2
10011da4:	00840074 	movhi	r2,4097
10011da8:	1099c604 	addi	r2,r2,26392
10011dac:	1885883a 	add	r2,r3,r2
10011db0:	00000106 	br	10011db8 <isatty+0x40>
10011db4:	0005883a 	mov	r2,zero
10011db8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011dbc:	e0bfef17 	ldw	r2,-68(fp)
10011dc0:	10000e26 	beq	r2,zero,10011dfc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10011dc4:	e0bfef17 	ldw	r2,-68(fp)
10011dc8:	10800017 	ldw	r2,0(r2)
10011dcc:	10800817 	ldw	r2,32(r2)
10011dd0:	1000021e 	bne	r2,zero,10011ddc <isatty+0x64>
    {
      return 1;
10011dd4:	00800044 	movi	r2,1
10011dd8:	00000d06 	br	10011e10 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011ddc:	e0bff004 	addi	r2,fp,-64
10011de0:	100b883a 	mov	r5,r2
10011de4:	e13fff17 	ldw	r4,-4(fp)
10011de8:	0011c840 	call	10011c84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10011dec:	e0bff117 	ldw	r2,-60(fp)
10011df0:	10880020 	cmpeqi	r2,r2,8192
10011df4:	10803fcc 	andi	r2,r2,255
10011df8:	00000506 	br	10011e10 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011dfc:	0011d3c0 	call	10011d3c <alt_get_errno>
10011e00:	1007883a 	mov	r3,r2
10011e04:	00801444 	movi	r2,81
10011e08:	18800015 	stw	r2,0(r3)
    return 0;
10011e0c:	0005883a 	mov	r2,zero
  }
}
10011e10:	e037883a 	mov	sp,fp
10011e14:	dfc00117 	ldw	ra,4(sp)
10011e18:	df000017 	ldw	fp,0(sp)
10011e1c:	dec00204 	addi	sp,sp,8
10011e20:	f800283a 	ret

10011e24 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10011e24:	defffc04 	addi	sp,sp,-16
10011e28:	df000315 	stw	fp,12(sp)
10011e2c:	df000304 	addi	fp,sp,12
10011e30:	e13ffd15 	stw	r4,-12(fp)
10011e34:	e17ffe15 	stw	r5,-8(fp)
10011e38:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10011e3c:	e0fffe17 	ldw	r3,-8(fp)
10011e40:	e0bffd17 	ldw	r2,-12(fp)
10011e44:	18800c26 	beq	r3,r2,10011e78 <alt_load_section+0x54>
  {
    while( to != end )
10011e48:	00000806 	br	10011e6c <alt_load_section+0x48>
    {
      *to++ = *from++;
10011e4c:	e0bffe17 	ldw	r2,-8(fp)
10011e50:	10c00104 	addi	r3,r2,4
10011e54:	e0fffe15 	stw	r3,-8(fp)
10011e58:	e0fffd17 	ldw	r3,-12(fp)
10011e5c:	19000104 	addi	r4,r3,4
10011e60:	e13ffd15 	stw	r4,-12(fp)
10011e64:	18c00017 	ldw	r3,0(r3)
10011e68:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10011e6c:	e0fffe17 	ldw	r3,-8(fp)
10011e70:	e0bfff17 	ldw	r2,-4(fp)
10011e74:	18bff51e 	bne	r3,r2,10011e4c <__alt_data_end+0xf8011e4c>
    {
      *to++ = *from++;
    }
  }
}
10011e78:	0001883a 	nop
10011e7c:	e037883a 	mov	sp,fp
10011e80:	df000017 	ldw	fp,0(sp)
10011e84:	dec00104 	addi	sp,sp,4
10011e88:	f800283a 	ret

10011e8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10011e8c:	defffe04 	addi	sp,sp,-8
10011e90:	dfc00115 	stw	ra,4(sp)
10011e94:	df000015 	stw	fp,0(sp)
10011e98:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10011e9c:	01840074 	movhi	r6,4097
10011ea0:	319e5104 	addi	r6,r6,31044
10011ea4:	01440074 	movhi	r5,4097
10011ea8:	2953e304 	addi	r5,r5,20364
10011eac:	01040074 	movhi	r4,4097
10011eb0:	211e5104 	addi	r4,r4,31044
10011eb4:	0011e240 	call	10011e24 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10011eb8:	01840034 	movhi	r6,4096
10011ebc:	31808c04 	addi	r6,r6,560
10011ec0:	01440034 	movhi	r5,4096
10011ec4:	29400804 	addi	r5,r5,32
10011ec8:	01040034 	movhi	r4,4096
10011ecc:	21000804 	addi	r4,r4,32
10011ed0:	0011e240 	call	10011e24 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10011ed4:	01840074 	movhi	r6,4097
10011ed8:	3193e304 	addi	r6,r6,20364
10011edc:	01440074 	movhi	r5,4097
10011ee0:	2950ca04 	addi	r5,r5,17192
10011ee4:	01040074 	movhi	r4,4097
10011ee8:	2110ca04 	addi	r4,r4,17192
10011eec:	0011e240 	call	10011e24 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10011ef0:	00132700 	call	10013270 <alt_dcache_flush_all>
  alt_icache_flush_all();
10011ef4:	00134300 	call	10013430 <alt_icache_flush_all>
}
10011ef8:	0001883a 	nop
10011efc:	e037883a 	mov	sp,fp
10011f00:	dfc00117 	ldw	ra,4(sp)
10011f04:	df000017 	ldw	fp,0(sp)
10011f08:	dec00204 	addi	sp,sp,8
10011f0c:	f800283a 	ret

10011f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011f10:	defffe04 	addi	sp,sp,-8
10011f14:	dfc00115 	stw	ra,4(sp)
10011f18:	df000015 	stw	fp,0(sp)
10011f1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011f20:	d0a00e17 	ldw	r2,-32712(gp)
10011f24:	10000326 	beq	r2,zero,10011f34 <alt_get_errno+0x24>
10011f28:	d0a00e17 	ldw	r2,-32712(gp)
10011f2c:	103ee83a 	callr	r2
10011f30:	00000106 	br	10011f38 <alt_get_errno+0x28>
10011f34:	d0aa9004 	addi	r2,gp,-21952
}
10011f38:	e037883a 	mov	sp,fp
10011f3c:	dfc00117 	ldw	ra,4(sp)
10011f40:	df000017 	ldw	fp,0(sp)
10011f44:	dec00204 	addi	sp,sp,8
10011f48:	f800283a 	ret

10011f4c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10011f4c:	defff904 	addi	sp,sp,-28
10011f50:	dfc00615 	stw	ra,24(sp)
10011f54:	df000515 	stw	fp,20(sp)
10011f58:	df000504 	addi	fp,sp,20
10011f5c:	e13ffd15 	stw	r4,-12(fp)
10011f60:	e17ffe15 	stw	r5,-8(fp)
10011f64:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10011f68:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011f6c:	e0bffd17 	ldw	r2,-12(fp)
10011f70:	10000816 	blt	r2,zero,10011f94 <lseek+0x48>
10011f74:	01400304 	movi	r5,12
10011f78:	e13ffd17 	ldw	r4,-12(fp)
10011f7c:	0004bc80 	call	10004bc8 <__mulsi3>
10011f80:	1007883a 	mov	r3,r2
10011f84:	00840074 	movhi	r2,4097
10011f88:	1099c604 	addi	r2,r2,26392
10011f8c:	1885883a 	add	r2,r3,r2
10011f90:	00000106 	br	10011f98 <lseek+0x4c>
10011f94:	0005883a 	mov	r2,zero
10011f98:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10011f9c:	e0bffc17 	ldw	r2,-16(fp)
10011fa0:	10001026 	beq	r2,zero,10011fe4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10011fa4:	e0bffc17 	ldw	r2,-16(fp)
10011fa8:	10800017 	ldw	r2,0(r2)
10011fac:	10800717 	ldw	r2,28(r2)
10011fb0:	10000926 	beq	r2,zero,10011fd8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10011fb4:	e0bffc17 	ldw	r2,-16(fp)
10011fb8:	10800017 	ldw	r2,0(r2)
10011fbc:	10800717 	ldw	r2,28(r2)
10011fc0:	e1bfff17 	ldw	r6,-4(fp)
10011fc4:	e17ffe17 	ldw	r5,-8(fp)
10011fc8:	e13ffc17 	ldw	r4,-16(fp)
10011fcc:	103ee83a 	callr	r2
10011fd0:	e0bffb15 	stw	r2,-20(fp)
10011fd4:	00000506 	br	10011fec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10011fd8:	00bfde84 	movi	r2,-134
10011fdc:	e0bffb15 	stw	r2,-20(fp)
10011fe0:	00000206 	br	10011fec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10011fe4:	00bfebc4 	movi	r2,-81
10011fe8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10011fec:	e0bffb17 	ldw	r2,-20(fp)
10011ff0:	1000070e 	bge	r2,zero,10012010 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10011ff4:	0011f100 	call	10011f10 <alt_get_errno>
10011ff8:	1007883a 	mov	r3,r2
10011ffc:	e0bffb17 	ldw	r2,-20(fp)
10012000:	0085c83a 	sub	r2,zero,r2
10012004:	18800015 	stw	r2,0(r3)
    rc = -1;
10012008:	00bfffc4 	movi	r2,-1
1001200c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10012010:	e0bffb17 	ldw	r2,-20(fp)
}
10012014:	e037883a 	mov	sp,fp
10012018:	dfc00117 	ldw	ra,4(sp)
1001201c:	df000017 	ldw	fp,0(sp)
10012020:	dec00204 	addi	sp,sp,8
10012024:	f800283a 	ret

10012028 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10012028:	defffd04 	addi	sp,sp,-12
1001202c:	dfc00215 	stw	ra,8(sp)
10012030:	df000115 	stw	fp,4(sp)
10012034:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10012038:	0009883a 	mov	r4,zero
1001203c:	00125000 	call	10012500 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10012040:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10012044:	00125380 	call	10012538 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10012048:	01840074 	movhi	r6,4097
1001204c:	3193d904 	addi	r6,r6,20324
10012050:	01440074 	movhi	r5,4097
10012054:	2953d904 	addi	r5,r5,20324
10012058:	01040074 	movhi	r4,4097
1001205c:	2113d904 	addi	r4,r4,20324
10012060:	00137d40 	call	100137d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10012064:	00133700 	call	10013370 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10012068:	01040074 	movhi	r4,4097
1001206c:	210cf404 	addi	r4,r4,13264
10012070:	0013f940 	call	10013f94 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10012074:	d0aa9117 	ldw	r2,-21948(gp)
10012078:	d0ea9217 	ldw	r3,-21944(gp)
1001207c:	d12a9317 	ldw	r4,-21940(gp)
10012080:	200d883a 	mov	r6,r4
10012084:	180b883a 	mov	r5,r3
10012088:	1009883a 	mov	r4,r2
1001208c:	00049500 	call	10004950 <main>
10012090:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10012094:	01000044 	movi	r4,1
10012098:	0011b440 	call	10011b44 <close>
  exit (result);
1001209c:	e13fff17 	ldw	r4,-4(fp)
100120a0:	0013fa80 	call	10013fa8 <exit>

100120a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
100120a4:	defffe04 	addi	sp,sp,-8
100120a8:	df000115 	stw	fp,4(sp)
100120ac:	df000104 	addi	fp,sp,4
100120b0:	e13fff15 	stw	r4,-4(fp)
}
100120b4:	0001883a 	nop
100120b8:	e037883a 	mov	sp,fp
100120bc:	df000017 	ldw	fp,0(sp)
100120c0:	dec00104 	addi	sp,sp,4
100120c4:	f800283a 	ret

100120c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
100120c8:	defffe04 	addi	sp,sp,-8
100120cc:	df000115 	stw	fp,4(sp)
100120d0:	df000104 	addi	fp,sp,4
100120d4:	e13fff15 	stw	r4,-4(fp)
}
100120d8:	0001883a 	nop
100120dc:	e037883a 	mov	sp,fp
100120e0:	df000017 	ldw	fp,0(sp)
100120e4:	dec00104 	addi	sp,sp,4
100120e8:	f800283a 	ret

100120ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100120ec:	defffe04 	addi	sp,sp,-8
100120f0:	dfc00115 	stw	ra,4(sp)
100120f4:	df000015 	stw	fp,0(sp)
100120f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100120fc:	d0a00e17 	ldw	r2,-32712(gp)
10012100:	10000326 	beq	r2,zero,10012110 <alt_get_errno+0x24>
10012104:	d0a00e17 	ldw	r2,-32712(gp)
10012108:	103ee83a 	callr	r2
1001210c:	00000106 	br	10012114 <alt_get_errno+0x28>
10012110:	d0aa9004 	addi	r2,gp,-21952
}
10012114:	e037883a 	mov	sp,fp
10012118:	dfc00117 	ldw	ra,4(sp)
1001211c:	df000017 	ldw	fp,0(sp)
10012120:	dec00204 	addi	sp,sp,8
10012124:	f800283a 	ret

10012128 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10012128:	defff904 	addi	sp,sp,-28
1001212c:	dfc00615 	stw	ra,24(sp)
10012130:	df000515 	stw	fp,20(sp)
10012134:	df000504 	addi	fp,sp,20
10012138:	e13ffd15 	stw	r4,-12(fp)
1001213c:	e17ffe15 	stw	r5,-8(fp)
10012140:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012144:	e0bffd17 	ldw	r2,-12(fp)
10012148:	10000816 	blt	r2,zero,1001216c <read+0x44>
1001214c:	01400304 	movi	r5,12
10012150:	e13ffd17 	ldw	r4,-12(fp)
10012154:	0004bc80 	call	10004bc8 <__mulsi3>
10012158:	1007883a 	mov	r3,r2
1001215c:	00840074 	movhi	r2,4097
10012160:	1099c604 	addi	r2,r2,26392
10012164:	1885883a 	add	r2,r3,r2
10012168:	00000106 	br	10012170 <read+0x48>
1001216c:	0005883a 	mov	r2,zero
10012170:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10012174:	e0bffb17 	ldw	r2,-20(fp)
10012178:	10002226 	beq	r2,zero,10012204 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001217c:	e0bffb17 	ldw	r2,-20(fp)
10012180:	10800217 	ldw	r2,8(r2)
10012184:	108000cc 	andi	r2,r2,3
10012188:	10800060 	cmpeqi	r2,r2,1
1001218c:	1000181e 	bne	r2,zero,100121f0 <read+0xc8>
        (fd->dev->read))
10012190:	e0bffb17 	ldw	r2,-20(fp)
10012194:	10800017 	ldw	r2,0(r2)
10012198:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001219c:	10001426 	beq	r2,zero,100121f0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100121a0:	e0bffb17 	ldw	r2,-20(fp)
100121a4:	10800017 	ldw	r2,0(r2)
100121a8:	10800517 	ldw	r2,20(r2)
100121ac:	e0ffff17 	ldw	r3,-4(fp)
100121b0:	180d883a 	mov	r6,r3
100121b4:	e17ffe17 	ldw	r5,-8(fp)
100121b8:	e13ffb17 	ldw	r4,-20(fp)
100121bc:	103ee83a 	callr	r2
100121c0:	e0bffc15 	stw	r2,-16(fp)
100121c4:	e0bffc17 	ldw	r2,-16(fp)
100121c8:	1000070e 	bge	r2,zero,100121e8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100121cc:	00120ec0 	call	100120ec <alt_get_errno>
100121d0:	1007883a 	mov	r3,r2
100121d4:	e0bffc17 	ldw	r2,-16(fp)
100121d8:	0085c83a 	sub	r2,zero,r2
100121dc:	18800015 	stw	r2,0(r3)
          return -1;
100121e0:	00bfffc4 	movi	r2,-1
100121e4:	00000c06 	br	10012218 <read+0xf0>
        }
        return rval;
100121e8:	e0bffc17 	ldw	r2,-16(fp)
100121ec:	00000a06 	br	10012218 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100121f0:	00120ec0 	call	100120ec <alt_get_errno>
100121f4:	1007883a 	mov	r3,r2
100121f8:	00800344 	movi	r2,13
100121fc:	18800015 	stw	r2,0(r3)
10012200:	00000406 	br	10012214 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10012204:	00120ec0 	call	100120ec <alt_get_errno>
10012208:	1007883a 	mov	r3,r2
1001220c:	00801444 	movi	r2,81
10012210:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012214:	00bfffc4 	movi	r2,-1
}
10012218:	e037883a 	mov	sp,fp
1001221c:	dfc00117 	ldw	ra,4(sp)
10012220:	df000017 	ldw	fp,0(sp)
10012224:	dec00204 	addi	sp,sp,8
10012228:	f800283a 	ret

1001222c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001222c:	defffc04 	addi	sp,sp,-16
10012230:	dfc00315 	stw	ra,12(sp)
10012234:	df000215 	stw	fp,8(sp)
10012238:	dc000115 	stw	r16,4(sp)
1001223c:	df000204 	addi	fp,sp,8
10012240:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10012244:	e0bffe17 	ldw	r2,-8(fp)
10012248:	108000d0 	cmplti	r2,r2,3
1001224c:	1000111e 	bne	r2,zero,10012294 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10012250:	04040074 	movhi	r16,4097
10012254:	8419c604 	addi	r16,r16,26392
10012258:	e0bffe17 	ldw	r2,-8(fp)
1001225c:	01400304 	movi	r5,12
10012260:	1009883a 	mov	r4,r2
10012264:	0004bc80 	call	10004bc8 <__mulsi3>
10012268:	8085883a 	add	r2,r16,r2
1001226c:	10800204 	addi	r2,r2,8
10012270:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10012274:	04040074 	movhi	r16,4097
10012278:	8419c604 	addi	r16,r16,26392
1001227c:	e0bffe17 	ldw	r2,-8(fp)
10012280:	01400304 	movi	r5,12
10012284:	1009883a 	mov	r4,r2
10012288:	0004bc80 	call	10004bc8 <__mulsi3>
1001228c:	8085883a 	add	r2,r16,r2
10012290:	10000015 	stw	zero,0(r2)
  }
}
10012294:	0001883a 	nop
10012298:	e6ffff04 	addi	sp,fp,-4
1001229c:	dfc00217 	ldw	ra,8(sp)
100122a0:	df000117 	ldw	fp,4(sp)
100122a4:	dc000017 	ldw	r16,0(sp)
100122a8:	dec00304 	addi	sp,sp,12
100122ac:	f800283a 	ret

100122b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100122b0:	defff904 	addi	sp,sp,-28
100122b4:	df000615 	stw	fp,24(sp)
100122b8:	df000604 	addi	fp,sp,24
100122bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100122c0:	0005303a 	rdctl	r2,status
100122c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100122c8:	e0fffe17 	ldw	r3,-8(fp)
100122cc:	00bfff84 	movi	r2,-2
100122d0:	1884703a 	and	r2,r3,r2
100122d4:	1001703a 	wrctl	status,r2
  
  return context;
100122d8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100122dc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100122e0:	d0a00f17 	ldw	r2,-32708(gp)
100122e4:	10c000c4 	addi	r3,r2,3
100122e8:	00bfff04 	movi	r2,-4
100122ec:	1884703a 	and	r2,r3,r2
100122f0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100122f4:	d0e00f17 	ldw	r3,-32708(gp)
100122f8:	e0bfff17 	ldw	r2,-4(fp)
100122fc:	1887883a 	add	r3,r3,r2
10012300:	00860034 	movhi	r2,6144
10012304:	10800004 	addi	r2,r2,0
10012308:	10c0062e 	bgeu	r2,r3,10012324 <sbrk+0x74>
1001230c:	e0bffb17 	ldw	r2,-20(fp)
10012310:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012314:	e0bffa17 	ldw	r2,-24(fp)
10012318:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001231c:	00bfffc4 	movi	r2,-1
10012320:	00000b06 	br	10012350 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10012324:	d0a00f17 	ldw	r2,-32708(gp)
10012328:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001232c:	d0e00f17 	ldw	r3,-32708(gp)
10012330:	e0bfff17 	ldw	r2,-4(fp)
10012334:	1885883a 	add	r2,r3,r2
10012338:	d0a00f15 	stw	r2,-32708(gp)
1001233c:	e0bffb17 	ldw	r2,-20(fp)
10012340:	e0bffc15 	stw	r2,-16(fp)
10012344:	e0bffc17 	ldw	r2,-16(fp)
10012348:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001234c:	e0bffd17 	ldw	r2,-12(fp)
} 
10012350:	e037883a 	mov	sp,fp
10012354:	df000017 	ldw	fp,0(sp)
10012358:	dec00104 	addi	sp,sp,4
1001235c:	f800283a 	ret

10012360 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10012360:	defffd04 	addi	sp,sp,-12
10012364:	dfc00215 	stw	ra,8(sp)
10012368:	df000115 	stw	fp,4(sp)
1001236c:	df000104 	addi	fp,sp,4
10012370:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10012374:	e13fff17 	ldw	r4,-4(fp)
10012378:	00131180 	call	10013118 <alt_busy_sleep>
}
1001237c:	e037883a 	mov	sp,fp
10012380:	dfc00117 	ldw	ra,4(sp)
10012384:	df000017 	ldw	fp,0(sp)
10012388:	dec00204 	addi	sp,sp,8
1001238c:	f800283a 	ret

10012390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012390:	defffe04 	addi	sp,sp,-8
10012394:	dfc00115 	stw	ra,4(sp)
10012398:	df000015 	stw	fp,0(sp)
1001239c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100123a0:	d0a00e17 	ldw	r2,-32712(gp)
100123a4:	10000326 	beq	r2,zero,100123b4 <alt_get_errno+0x24>
100123a8:	d0a00e17 	ldw	r2,-32712(gp)
100123ac:	103ee83a 	callr	r2
100123b0:	00000106 	br	100123b8 <alt_get_errno+0x28>
100123b4:	d0aa9004 	addi	r2,gp,-21952
}
100123b8:	e037883a 	mov	sp,fp
100123bc:	dfc00117 	ldw	ra,4(sp)
100123c0:	df000017 	ldw	fp,0(sp)
100123c4:	dec00204 	addi	sp,sp,8
100123c8:	f800283a 	ret

100123cc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
100123cc:	defff904 	addi	sp,sp,-28
100123d0:	dfc00615 	stw	ra,24(sp)
100123d4:	df000515 	stw	fp,20(sp)
100123d8:	df000504 	addi	fp,sp,20
100123dc:	e13ffd15 	stw	r4,-12(fp)
100123e0:	e17ffe15 	stw	r5,-8(fp)
100123e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100123e8:	e0bffd17 	ldw	r2,-12(fp)
100123ec:	10000816 	blt	r2,zero,10012410 <write+0x44>
100123f0:	01400304 	movi	r5,12
100123f4:	e13ffd17 	ldw	r4,-12(fp)
100123f8:	0004bc80 	call	10004bc8 <__mulsi3>
100123fc:	1007883a 	mov	r3,r2
10012400:	00840074 	movhi	r2,4097
10012404:	1099c604 	addi	r2,r2,26392
10012408:	1885883a 	add	r2,r3,r2
1001240c:	00000106 	br	10012414 <write+0x48>
10012410:	0005883a 	mov	r2,zero
10012414:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10012418:	e0bffb17 	ldw	r2,-20(fp)
1001241c:	10002126 	beq	r2,zero,100124a4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10012420:	e0bffb17 	ldw	r2,-20(fp)
10012424:	10800217 	ldw	r2,8(r2)
10012428:	108000cc 	andi	r2,r2,3
1001242c:	10001826 	beq	r2,zero,10012490 <write+0xc4>
10012430:	e0bffb17 	ldw	r2,-20(fp)
10012434:	10800017 	ldw	r2,0(r2)
10012438:	10800617 	ldw	r2,24(r2)
1001243c:	10001426 	beq	r2,zero,10012490 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10012440:	e0bffb17 	ldw	r2,-20(fp)
10012444:	10800017 	ldw	r2,0(r2)
10012448:	10800617 	ldw	r2,24(r2)
1001244c:	e0ffff17 	ldw	r3,-4(fp)
10012450:	180d883a 	mov	r6,r3
10012454:	e17ffe17 	ldw	r5,-8(fp)
10012458:	e13ffb17 	ldw	r4,-20(fp)
1001245c:	103ee83a 	callr	r2
10012460:	e0bffc15 	stw	r2,-16(fp)
10012464:	e0bffc17 	ldw	r2,-16(fp)
10012468:	1000070e 	bge	r2,zero,10012488 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1001246c:	00123900 	call	10012390 <alt_get_errno>
10012470:	1007883a 	mov	r3,r2
10012474:	e0bffc17 	ldw	r2,-16(fp)
10012478:	0085c83a 	sub	r2,zero,r2
1001247c:	18800015 	stw	r2,0(r3)
        return -1;
10012480:	00bfffc4 	movi	r2,-1
10012484:	00000c06 	br	100124b8 <write+0xec>
      }
      return rval;
10012488:	e0bffc17 	ldw	r2,-16(fp)
1001248c:	00000a06 	br	100124b8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10012490:	00123900 	call	10012390 <alt_get_errno>
10012494:	1007883a 	mov	r3,r2
10012498:	00800344 	movi	r2,13
1001249c:	18800015 	stw	r2,0(r3)
100124a0:	00000406 	br	100124b4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100124a4:	00123900 	call	10012390 <alt_get_errno>
100124a8:	1007883a 	mov	r3,r2
100124ac:	00801444 	movi	r2,81
100124b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100124b4:	00bfffc4 	movi	r2,-1
}
100124b8:	e037883a 	mov	sp,fp
100124bc:	dfc00117 	ldw	ra,4(sp)
100124c0:	df000017 	ldw	fp,0(sp)
100124c4:	dec00204 	addi	sp,sp,8
100124c8:	f800283a 	ret

100124cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
100124cc:	defffd04 	addi	sp,sp,-12
100124d0:	dfc00215 	stw	ra,8(sp)
100124d4:	df000115 	stw	fp,4(sp)
100124d8:	df000104 	addi	fp,sp,4
100124dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
100124e0:	d1600b04 	addi	r5,gp,-32724
100124e4:	e13fff17 	ldw	r4,-4(fp)
100124e8:	00132cc0 	call	100132cc <alt_dev_llist_insert>
}
100124ec:	e037883a 	mov	sp,fp
100124f0:	dfc00117 	ldw	ra,4(sp)
100124f4:	df000017 	ldw	fp,0(sp)
100124f8:	dec00204 	addi	sp,sp,8
100124fc:	f800283a 	ret

10012500 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012500:	defffd04 	addi	sp,sp,-12
10012504:	dfc00215 	stw	ra,8(sp)
10012508:	df000115 	stw	fp,4(sp)
1001250c:	df000104 	addi	fp,sp,4
10012510:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10012514:	0013c780 	call	10013c78 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10012518:	00800044 	movi	r2,1
1001251c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10012520:	0001883a 	nop
10012524:	e037883a 	mov	sp,fp
10012528:	dfc00117 	ldw	ra,4(sp)
1001252c:	df000017 	ldw	fp,0(sp)
10012530:	dec00204 	addi	sp,sp,8
10012534:	f800283a 	ret

10012538 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012538:	defffe04 	addi	sp,sp,-8
1001253c:	dfc00115 	stw	ra,4(sp)
10012540:	df000015 	stw	fp,0(sp)
10012544:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10012548:	01800144 	movi	r6,5
1001254c:	000b883a 	mov	r5,zero
10012550:	01040074 	movhi	r4,4097
10012554:	211a3004 	addi	r4,r4,26816
10012558:	00126e80 	call	100126e8 <altera_avalon_jtag_uart_init>
1001255c:	01040074 	movhi	r4,4097
10012560:	211a2604 	addi	r4,r4,26776
10012564:	00124cc0 	call	100124cc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10012568:	0001883a 	nop
}
1001256c:	0001883a 	nop
10012570:	e037883a 	mov	sp,fp
10012574:	dfc00117 	ldw	ra,4(sp)
10012578:	df000017 	ldw	fp,0(sp)
1001257c:	dec00204 	addi	sp,sp,8
10012580:	f800283a 	ret

10012584 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10012584:	defffa04 	addi	sp,sp,-24
10012588:	dfc00515 	stw	ra,20(sp)
1001258c:	df000415 	stw	fp,16(sp)
10012590:	df000404 	addi	fp,sp,16
10012594:	e13ffd15 	stw	r4,-12(fp)
10012598:	e17ffe15 	stw	r5,-8(fp)
1001259c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100125a0:	e0bffd17 	ldw	r2,-12(fp)
100125a4:	10800017 	ldw	r2,0(r2)
100125a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100125ac:	e0bffc17 	ldw	r2,-16(fp)
100125b0:	10c00a04 	addi	r3,r2,40
100125b4:	e0bffd17 	ldw	r2,-12(fp)
100125b8:	10800217 	ldw	r2,8(r2)
100125bc:	100f883a 	mov	r7,r2
100125c0:	e1bfff17 	ldw	r6,-4(fp)
100125c4:	e17ffe17 	ldw	r5,-8(fp)
100125c8:	1809883a 	mov	r4,r3
100125cc:	0012bac0 	call	10012bac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100125d0:	e037883a 	mov	sp,fp
100125d4:	dfc00117 	ldw	ra,4(sp)
100125d8:	df000017 	ldw	fp,0(sp)
100125dc:	dec00204 	addi	sp,sp,8
100125e0:	f800283a 	ret

100125e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100125e4:	defffa04 	addi	sp,sp,-24
100125e8:	dfc00515 	stw	ra,20(sp)
100125ec:	df000415 	stw	fp,16(sp)
100125f0:	df000404 	addi	fp,sp,16
100125f4:	e13ffd15 	stw	r4,-12(fp)
100125f8:	e17ffe15 	stw	r5,-8(fp)
100125fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012600:	e0bffd17 	ldw	r2,-12(fp)
10012604:	10800017 	ldw	r2,0(r2)
10012608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001260c:	e0bffc17 	ldw	r2,-16(fp)
10012610:	10c00a04 	addi	r3,r2,40
10012614:	e0bffd17 	ldw	r2,-12(fp)
10012618:	10800217 	ldw	r2,8(r2)
1001261c:	100f883a 	mov	r7,r2
10012620:	e1bfff17 	ldw	r6,-4(fp)
10012624:	e17ffe17 	ldw	r5,-8(fp)
10012628:	1809883a 	mov	r4,r3
1001262c:	0012dc80 	call	10012dc8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012630:	e037883a 	mov	sp,fp
10012634:	dfc00117 	ldw	ra,4(sp)
10012638:	df000017 	ldw	fp,0(sp)
1001263c:	dec00204 	addi	sp,sp,8
10012640:	f800283a 	ret

10012644 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10012644:	defffc04 	addi	sp,sp,-16
10012648:	dfc00315 	stw	ra,12(sp)
1001264c:	df000215 	stw	fp,8(sp)
10012650:	df000204 	addi	fp,sp,8
10012654:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012658:	e0bfff17 	ldw	r2,-4(fp)
1001265c:	10800017 	ldw	r2,0(r2)
10012660:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10012664:	e0bffe17 	ldw	r2,-8(fp)
10012668:	10c00a04 	addi	r3,r2,40
1001266c:	e0bfff17 	ldw	r2,-4(fp)
10012670:	10800217 	ldw	r2,8(r2)
10012674:	100b883a 	mov	r5,r2
10012678:	1809883a 	mov	r4,r3
1001267c:	0012a540 	call	10012a54 <altera_avalon_jtag_uart_close>
}
10012680:	e037883a 	mov	sp,fp
10012684:	dfc00117 	ldw	ra,4(sp)
10012688:	df000017 	ldw	fp,0(sp)
1001268c:	dec00204 	addi	sp,sp,8
10012690:	f800283a 	ret

10012694 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10012694:	defffa04 	addi	sp,sp,-24
10012698:	dfc00515 	stw	ra,20(sp)
1001269c:	df000415 	stw	fp,16(sp)
100126a0:	df000404 	addi	fp,sp,16
100126a4:	e13ffd15 	stw	r4,-12(fp)
100126a8:	e17ffe15 	stw	r5,-8(fp)
100126ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100126b0:	e0bffd17 	ldw	r2,-12(fp)
100126b4:	10800017 	ldw	r2,0(r2)
100126b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100126bc:	e0bffc17 	ldw	r2,-16(fp)
100126c0:	10800a04 	addi	r2,r2,40
100126c4:	e1bfff17 	ldw	r6,-4(fp)
100126c8:	e17ffe17 	ldw	r5,-8(fp)
100126cc:	1009883a 	mov	r4,r2
100126d0:	0012abc0 	call	10012abc <altera_avalon_jtag_uart_ioctl>
}
100126d4:	e037883a 	mov	sp,fp
100126d8:	dfc00117 	ldw	ra,4(sp)
100126dc:	df000017 	ldw	fp,0(sp)
100126e0:	dec00204 	addi	sp,sp,8
100126e4:	f800283a 	ret

100126e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100126e8:	defffa04 	addi	sp,sp,-24
100126ec:	dfc00515 	stw	ra,20(sp)
100126f0:	df000415 	stw	fp,16(sp)
100126f4:	df000404 	addi	fp,sp,16
100126f8:	e13ffd15 	stw	r4,-12(fp)
100126fc:	e17ffe15 	stw	r5,-8(fp)
10012700:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012704:	e0bffd17 	ldw	r2,-12(fp)
10012708:	00c00044 	movi	r3,1
1001270c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012710:	e0bffd17 	ldw	r2,-12(fp)
10012714:	10800017 	ldw	r2,0(r2)
10012718:	10800104 	addi	r2,r2,4
1001271c:	1007883a 	mov	r3,r2
10012720:	e0bffd17 	ldw	r2,-12(fp)
10012724:	10800817 	ldw	r2,32(r2)
10012728:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001272c:	e0bffe17 	ldw	r2,-8(fp)
10012730:	e0ffff17 	ldw	r3,-4(fp)
10012734:	d8000015 	stw	zero,0(sp)
10012738:	e1fffd17 	ldw	r7,-12(fp)
1001273c:	01840074 	movhi	r6,4097
10012740:	3189ea04 	addi	r6,r6,10152
10012744:	180b883a 	mov	r5,r3
10012748:	1009883a 	mov	r4,r2
1001274c:	00134500 	call	10013450 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10012750:	e0bffd17 	ldw	r2,-12(fp)
10012754:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10012758:	e0bffd17 	ldw	r2,-12(fp)
1001275c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10012760:	d0ea9517 	ldw	r3,-21932(gp)
10012764:	e1fffd17 	ldw	r7,-12(fp)
10012768:	01840074 	movhi	r6,4097
1001276c:	318a6d04 	addi	r6,r6,10676
10012770:	180b883a 	mov	r5,r3
10012774:	1009883a 	mov	r4,r2
10012778:	0012fec0 	call	10012fec <alt_alarm_start>
1001277c:	1000040e 	bge	r2,zero,10012790 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10012780:	e0fffd17 	ldw	r3,-12(fp)
10012784:	00a00034 	movhi	r2,32768
10012788:	10bfffc4 	addi	r2,r2,-1
1001278c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10012790:	0001883a 	nop
10012794:	e037883a 	mov	sp,fp
10012798:	dfc00117 	ldw	ra,4(sp)
1001279c:	df000017 	ldw	fp,0(sp)
100127a0:	dec00204 	addi	sp,sp,8
100127a4:	f800283a 	ret

100127a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100127a8:	defff804 	addi	sp,sp,-32
100127ac:	df000715 	stw	fp,28(sp)
100127b0:	df000704 	addi	fp,sp,28
100127b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100127b8:	e0bfff17 	ldw	r2,-4(fp)
100127bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100127c0:	e0bffb17 	ldw	r2,-20(fp)
100127c4:	10800017 	ldw	r2,0(r2)
100127c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100127cc:	e0bffc17 	ldw	r2,-16(fp)
100127d0:	10800104 	addi	r2,r2,4
100127d4:	10800037 	ldwio	r2,0(r2)
100127d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100127dc:	e0bffd17 	ldw	r2,-12(fp)
100127e0:	1080c00c 	andi	r2,r2,768
100127e4:	10006d26 	beq	r2,zero,1001299c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100127e8:	e0bffd17 	ldw	r2,-12(fp)
100127ec:	1080400c 	andi	r2,r2,256
100127f0:	10003526 	beq	r2,zero,100128c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100127f4:	00800074 	movhi	r2,1
100127f8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100127fc:	e0bffb17 	ldw	r2,-20(fp)
10012800:	10800a17 	ldw	r2,40(r2)
10012804:	10800044 	addi	r2,r2,1
10012808:	1081ffcc 	andi	r2,r2,2047
1001280c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012810:	e0bffb17 	ldw	r2,-20(fp)
10012814:	10c00b17 	ldw	r3,44(r2)
10012818:	e0bffe17 	ldw	r2,-8(fp)
1001281c:	18801526 	beq	r3,r2,10012874 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012820:	e0bffc17 	ldw	r2,-16(fp)
10012824:	10800037 	ldwio	r2,0(r2)
10012828:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001282c:	e0bff917 	ldw	r2,-28(fp)
10012830:	10a0000c 	andi	r2,r2,32768
10012834:	10001126 	beq	r2,zero,1001287c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012838:	e0bffb17 	ldw	r2,-20(fp)
1001283c:	10800a17 	ldw	r2,40(r2)
10012840:	e0fff917 	ldw	r3,-28(fp)
10012844:	1809883a 	mov	r4,r3
10012848:	e0fffb17 	ldw	r3,-20(fp)
1001284c:	1885883a 	add	r2,r3,r2
10012850:	10800e04 	addi	r2,r2,56
10012854:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012858:	e0bffb17 	ldw	r2,-20(fp)
1001285c:	10800a17 	ldw	r2,40(r2)
10012860:	10800044 	addi	r2,r2,1
10012864:	10c1ffcc 	andi	r3,r2,2047
10012868:	e0bffb17 	ldw	r2,-20(fp)
1001286c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10012870:	003fe206 	br	100127fc <__alt_data_end+0xf80127fc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10012874:	0001883a 	nop
10012878:	00000106 	br	10012880 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1001287c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10012880:	e0bff917 	ldw	r2,-28(fp)
10012884:	10bfffec 	andhi	r2,r2,65535
10012888:	10000f26 	beq	r2,zero,100128c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001288c:	e0bffb17 	ldw	r2,-20(fp)
10012890:	10c00817 	ldw	r3,32(r2)
10012894:	00bfff84 	movi	r2,-2
10012898:	1886703a 	and	r3,r3,r2
1001289c:	e0bffb17 	ldw	r2,-20(fp)
100128a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100128a4:	e0bffc17 	ldw	r2,-16(fp)
100128a8:	10800104 	addi	r2,r2,4
100128ac:	1007883a 	mov	r3,r2
100128b0:	e0bffb17 	ldw	r2,-20(fp)
100128b4:	10800817 	ldw	r2,32(r2)
100128b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100128bc:	e0bffc17 	ldw	r2,-16(fp)
100128c0:	10800104 	addi	r2,r2,4
100128c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100128c8:	e0bffd17 	ldw	r2,-12(fp)
100128cc:	1080800c 	andi	r2,r2,512
100128d0:	103fbe26 	beq	r2,zero,100127cc <__alt_data_end+0xf80127cc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100128d4:	e0bffd17 	ldw	r2,-12(fp)
100128d8:	1004d43a 	srli	r2,r2,16
100128dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100128e0:	00001406 	br	10012934 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100128e4:	e0bffc17 	ldw	r2,-16(fp)
100128e8:	e0fffb17 	ldw	r3,-20(fp)
100128ec:	18c00d17 	ldw	r3,52(r3)
100128f0:	e13ffb17 	ldw	r4,-20(fp)
100128f4:	20c7883a 	add	r3,r4,r3
100128f8:	18c20e04 	addi	r3,r3,2104
100128fc:	18c00003 	ldbu	r3,0(r3)
10012900:	18c03fcc 	andi	r3,r3,255
10012904:	18c0201c 	xori	r3,r3,128
10012908:	18ffe004 	addi	r3,r3,-128
1001290c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012910:	e0bffb17 	ldw	r2,-20(fp)
10012914:	10800d17 	ldw	r2,52(r2)
10012918:	10800044 	addi	r2,r2,1
1001291c:	10c1ffcc 	andi	r3,r2,2047
10012920:	e0bffb17 	ldw	r2,-20(fp)
10012924:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012928:	e0bffa17 	ldw	r2,-24(fp)
1001292c:	10bfffc4 	addi	r2,r2,-1
10012930:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012934:	e0bffa17 	ldw	r2,-24(fp)
10012938:	10000526 	beq	r2,zero,10012950 <altera_avalon_jtag_uart_irq+0x1a8>
1001293c:	e0bffb17 	ldw	r2,-20(fp)
10012940:	10c00d17 	ldw	r3,52(r2)
10012944:	e0bffb17 	ldw	r2,-20(fp)
10012948:	10800c17 	ldw	r2,48(r2)
1001294c:	18bfe51e 	bne	r3,r2,100128e4 <__alt_data_end+0xf80128e4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10012950:	e0bffa17 	ldw	r2,-24(fp)
10012954:	103f9d26 	beq	r2,zero,100127cc <__alt_data_end+0xf80127cc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012958:	e0bffb17 	ldw	r2,-20(fp)
1001295c:	10c00817 	ldw	r3,32(r2)
10012960:	00bfff44 	movi	r2,-3
10012964:	1886703a 	and	r3,r3,r2
10012968:	e0bffb17 	ldw	r2,-20(fp)
1001296c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012970:	e0bffb17 	ldw	r2,-20(fp)
10012974:	10800017 	ldw	r2,0(r2)
10012978:	10800104 	addi	r2,r2,4
1001297c:	1007883a 	mov	r3,r2
10012980:	e0bffb17 	ldw	r2,-20(fp)
10012984:	10800817 	ldw	r2,32(r2)
10012988:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001298c:	e0bffc17 	ldw	r2,-16(fp)
10012990:	10800104 	addi	r2,r2,4
10012994:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10012998:	003f8c06 	br	100127cc <__alt_data_end+0xf80127cc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1001299c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100129a0:	0001883a 	nop
100129a4:	e037883a 	mov	sp,fp
100129a8:	df000017 	ldw	fp,0(sp)
100129ac:	dec00104 	addi	sp,sp,4
100129b0:	f800283a 	ret

100129b4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100129b4:	defff804 	addi	sp,sp,-32
100129b8:	df000715 	stw	fp,28(sp)
100129bc:	df000704 	addi	fp,sp,28
100129c0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100129c4:	e0bffb17 	ldw	r2,-20(fp)
100129c8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100129cc:	e0bff917 	ldw	r2,-28(fp)
100129d0:	10800017 	ldw	r2,0(r2)
100129d4:	10800104 	addi	r2,r2,4
100129d8:	10800037 	ldwio	r2,0(r2)
100129dc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100129e0:	e0bffa17 	ldw	r2,-24(fp)
100129e4:	1081000c 	andi	r2,r2,1024
100129e8:	10000b26 	beq	r2,zero,10012a18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100129ec:	e0bff917 	ldw	r2,-28(fp)
100129f0:	10800017 	ldw	r2,0(r2)
100129f4:	10800104 	addi	r2,r2,4
100129f8:	1007883a 	mov	r3,r2
100129fc:	e0bff917 	ldw	r2,-28(fp)
10012a00:	10800817 	ldw	r2,32(r2)
10012a04:	10810014 	ori	r2,r2,1024
10012a08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10012a0c:	e0bff917 	ldw	r2,-28(fp)
10012a10:	10000915 	stw	zero,36(r2)
10012a14:	00000a06 	br	10012a40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012a18:	e0bff917 	ldw	r2,-28(fp)
10012a1c:	10c00917 	ldw	r3,36(r2)
10012a20:	00a00034 	movhi	r2,32768
10012a24:	10bfff04 	addi	r2,r2,-4
10012a28:	10c00536 	bltu	r2,r3,10012a40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10012a2c:	e0bff917 	ldw	r2,-28(fp)
10012a30:	10800917 	ldw	r2,36(r2)
10012a34:	10c00044 	addi	r3,r2,1
10012a38:	e0bff917 	ldw	r2,-28(fp)
10012a3c:	10c00915 	stw	r3,36(r2)
10012a40:	d0aa9517 	ldw	r2,-21932(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10012a44:	e037883a 	mov	sp,fp
10012a48:	df000017 	ldw	fp,0(sp)
10012a4c:	dec00104 	addi	sp,sp,4
10012a50:	f800283a 	ret

10012a54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10012a54:	defffd04 	addi	sp,sp,-12
10012a58:	df000215 	stw	fp,8(sp)
10012a5c:	df000204 	addi	fp,sp,8
10012a60:	e13ffe15 	stw	r4,-8(fp)
10012a64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012a68:	00000506 	br	10012a80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10012a6c:	e0bfff17 	ldw	r2,-4(fp)
10012a70:	1090000c 	andi	r2,r2,16384
10012a74:	10000226 	beq	r2,zero,10012a80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10012a78:	00bffd44 	movi	r2,-11
10012a7c:	00000b06 	br	10012aac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10012a80:	e0bffe17 	ldw	r2,-8(fp)
10012a84:	10c00d17 	ldw	r3,52(r2)
10012a88:	e0bffe17 	ldw	r2,-8(fp)
10012a8c:	10800c17 	ldw	r2,48(r2)
10012a90:	18800526 	beq	r3,r2,10012aa8 <altera_avalon_jtag_uart_close+0x54>
10012a94:	e0bffe17 	ldw	r2,-8(fp)
10012a98:	10c00917 	ldw	r3,36(r2)
10012a9c:	e0bffe17 	ldw	r2,-8(fp)
10012aa0:	10800117 	ldw	r2,4(r2)
10012aa4:	18bff136 	bltu	r3,r2,10012a6c <__alt_data_end+0xf8012a6c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012aa8:	0005883a 	mov	r2,zero
}
10012aac:	e037883a 	mov	sp,fp
10012ab0:	df000017 	ldw	fp,0(sp)
10012ab4:	dec00104 	addi	sp,sp,4
10012ab8:	f800283a 	ret

10012abc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012abc:	defffa04 	addi	sp,sp,-24
10012ac0:	df000515 	stw	fp,20(sp)
10012ac4:	df000504 	addi	fp,sp,20
10012ac8:	e13ffd15 	stw	r4,-12(fp)
10012acc:	e17ffe15 	stw	r5,-8(fp)
10012ad0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012ad4:	00bff9c4 	movi	r2,-25
10012ad8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012adc:	e0bffe17 	ldw	r2,-8(fp)
10012ae0:	10da8060 	cmpeqi	r3,r2,27137
10012ae4:	1800031e 	bne	r3,zero,10012af4 <altera_avalon_jtag_uart_ioctl+0x38>
10012ae8:	109a80a0 	cmpeqi	r2,r2,27138
10012aec:	1000181e 	bne	r2,zero,10012b50 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012af0:	00002906 	br	10012b98 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012af4:	e0bffd17 	ldw	r2,-12(fp)
10012af8:	10c00117 	ldw	r3,4(r2)
10012afc:	00a00034 	movhi	r2,32768
10012b00:	10bfffc4 	addi	r2,r2,-1
10012b04:	18802126 	beq	r3,r2,10012b8c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012b08:	e0bfff17 	ldw	r2,-4(fp)
10012b0c:	10800017 	ldw	r2,0(r2)
10012b10:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012b14:	e0bffc17 	ldw	r2,-16(fp)
10012b18:	10800090 	cmplti	r2,r2,2
10012b1c:	1000061e 	bne	r2,zero,10012b38 <altera_avalon_jtag_uart_ioctl+0x7c>
10012b20:	e0fffc17 	ldw	r3,-16(fp)
10012b24:	00a00034 	movhi	r2,32768
10012b28:	10bfffc4 	addi	r2,r2,-1
10012b2c:	18800226 	beq	r3,r2,10012b38 <altera_avalon_jtag_uart_ioctl+0x7c>
10012b30:	e0bffc17 	ldw	r2,-16(fp)
10012b34:	00000206 	br	10012b40 <altera_avalon_jtag_uart_ioctl+0x84>
10012b38:	00a00034 	movhi	r2,32768
10012b3c:	10bfff84 	addi	r2,r2,-2
10012b40:	e0fffd17 	ldw	r3,-12(fp)
10012b44:	18800115 	stw	r2,4(r3)
      rc = 0;
10012b48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012b4c:	00000f06 	br	10012b8c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012b50:	e0bffd17 	ldw	r2,-12(fp)
10012b54:	10c00117 	ldw	r3,4(r2)
10012b58:	00a00034 	movhi	r2,32768
10012b5c:	10bfffc4 	addi	r2,r2,-1
10012b60:	18800c26 	beq	r3,r2,10012b94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012b64:	e0bffd17 	ldw	r2,-12(fp)
10012b68:	10c00917 	ldw	r3,36(r2)
10012b6c:	e0bffd17 	ldw	r2,-12(fp)
10012b70:	10800117 	ldw	r2,4(r2)
10012b74:	1885803a 	cmpltu	r2,r3,r2
10012b78:	10c03fcc 	andi	r3,r2,255
10012b7c:	e0bfff17 	ldw	r2,-4(fp)
10012b80:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012b84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012b88:	00000206 	br	10012b94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012b8c:	0001883a 	nop
10012b90:	00000106 	br	10012b98 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10012b94:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012b98:	e0bffb17 	ldw	r2,-20(fp)
}
10012b9c:	e037883a 	mov	sp,fp
10012ba0:	df000017 	ldw	fp,0(sp)
10012ba4:	dec00104 	addi	sp,sp,4
10012ba8:	f800283a 	ret

10012bac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012bac:	defff304 	addi	sp,sp,-52
10012bb0:	dfc00c15 	stw	ra,48(sp)
10012bb4:	df000b15 	stw	fp,44(sp)
10012bb8:	df000b04 	addi	fp,sp,44
10012bbc:	e13ffc15 	stw	r4,-16(fp)
10012bc0:	e17ffd15 	stw	r5,-12(fp)
10012bc4:	e1bffe15 	stw	r6,-8(fp)
10012bc8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012bcc:	e0bffd17 	ldw	r2,-12(fp)
10012bd0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012bd4:	00004706 	br	10012cf4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012bd8:	e0bffc17 	ldw	r2,-16(fp)
10012bdc:	10800a17 	ldw	r2,40(r2)
10012be0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012be4:	e0bffc17 	ldw	r2,-16(fp)
10012be8:	10800b17 	ldw	r2,44(r2)
10012bec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012bf0:	e0fff717 	ldw	r3,-36(fp)
10012bf4:	e0bff817 	ldw	r2,-32(fp)
10012bf8:	18800536 	bltu	r3,r2,10012c10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012bfc:	e0fff717 	ldw	r3,-36(fp)
10012c00:	e0bff817 	ldw	r2,-32(fp)
10012c04:	1885c83a 	sub	r2,r3,r2
10012c08:	e0bff615 	stw	r2,-40(fp)
10012c0c:	00000406 	br	10012c20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012c10:	00c20004 	movi	r3,2048
10012c14:	e0bff817 	ldw	r2,-32(fp)
10012c18:	1885c83a 	sub	r2,r3,r2
10012c1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012c20:	e0bff617 	ldw	r2,-40(fp)
10012c24:	10001e26 	beq	r2,zero,10012ca0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012c28:	e0fffe17 	ldw	r3,-8(fp)
10012c2c:	e0bff617 	ldw	r2,-40(fp)
10012c30:	1880022e 	bgeu	r3,r2,10012c3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10012c34:	e0bffe17 	ldw	r2,-8(fp)
10012c38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012c3c:	e0bffc17 	ldw	r2,-16(fp)
10012c40:	10c00e04 	addi	r3,r2,56
10012c44:	e0bff817 	ldw	r2,-32(fp)
10012c48:	1885883a 	add	r2,r3,r2
10012c4c:	e1bff617 	ldw	r6,-40(fp)
10012c50:	100b883a 	mov	r5,r2
10012c54:	e13ff517 	ldw	r4,-44(fp)
10012c58:	000a7e40 	call	1000a7e4 <memcpy>
      ptr   += n;
10012c5c:	e0fff517 	ldw	r3,-44(fp)
10012c60:	e0bff617 	ldw	r2,-40(fp)
10012c64:	1885883a 	add	r2,r3,r2
10012c68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012c6c:	e0fffe17 	ldw	r3,-8(fp)
10012c70:	e0bff617 	ldw	r2,-40(fp)
10012c74:	1885c83a 	sub	r2,r3,r2
10012c78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012c7c:	e0fff817 	ldw	r3,-32(fp)
10012c80:	e0bff617 	ldw	r2,-40(fp)
10012c84:	1885883a 	add	r2,r3,r2
10012c88:	10c1ffcc 	andi	r3,r2,2047
10012c8c:	e0bffc17 	ldw	r2,-16(fp)
10012c90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012c94:	e0bffe17 	ldw	r2,-8(fp)
10012c98:	00bfcf16 	blt	zero,r2,10012bd8 <__alt_data_end+0xf8012bd8>
10012c9c:	00000106 	br	10012ca4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012ca0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10012ca4:	e0fff517 	ldw	r3,-44(fp)
10012ca8:	e0bffd17 	ldw	r2,-12(fp)
10012cac:	1880141e 	bne	r3,r2,10012d00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012cb0:	e0bfff17 	ldw	r2,-4(fp)
10012cb4:	1090000c 	andi	r2,r2,16384
10012cb8:	1000131e 	bne	r2,zero,10012d08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012cbc:	0001883a 	nop
10012cc0:	e0bffc17 	ldw	r2,-16(fp)
10012cc4:	10c00a17 	ldw	r3,40(r2)
10012cc8:	e0bff717 	ldw	r2,-36(fp)
10012ccc:	1880051e 	bne	r3,r2,10012ce4 <altera_avalon_jtag_uart_read+0x138>
10012cd0:	e0bffc17 	ldw	r2,-16(fp)
10012cd4:	10c00917 	ldw	r3,36(r2)
10012cd8:	e0bffc17 	ldw	r2,-16(fp)
10012cdc:	10800117 	ldw	r2,4(r2)
10012ce0:	18bff736 	bltu	r3,r2,10012cc0 <__alt_data_end+0xf8012cc0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012ce4:	e0bffc17 	ldw	r2,-16(fp)
10012ce8:	10c00a17 	ldw	r3,40(r2)
10012cec:	e0bff717 	ldw	r2,-36(fp)
10012cf0:	18800726 	beq	r3,r2,10012d10 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012cf4:	e0bffe17 	ldw	r2,-8(fp)
10012cf8:	00bfb716 	blt	zero,r2,10012bd8 <__alt_data_end+0xf8012bd8>
10012cfc:	00000506 	br	10012d14 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012d00:	0001883a 	nop
10012d04:	00000306 	br	10012d14 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012d08:	0001883a 	nop
10012d0c:	00000106 	br	10012d14 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012d10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012d14:	e0fff517 	ldw	r3,-44(fp)
10012d18:	e0bffd17 	ldw	r2,-12(fp)
10012d1c:	18801826 	beq	r3,r2,10012d80 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012d20:	0005303a 	rdctl	r2,status
10012d24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012d28:	e0fffb17 	ldw	r3,-20(fp)
10012d2c:	00bfff84 	movi	r2,-2
10012d30:	1884703a 	and	r2,r3,r2
10012d34:	1001703a 	wrctl	status,r2
  
  return context;
10012d38:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012d3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012d40:	e0bffc17 	ldw	r2,-16(fp)
10012d44:	10800817 	ldw	r2,32(r2)
10012d48:	10c00054 	ori	r3,r2,1
10012d4c:	e0bffc17 	ldw	r2,-16(fp)
10012d50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012d54:	e0bffc17 	ldw	r2,-16(fp)
10012d58:	10800017 	ldw	r2,0(r2)
10012d5c:	10800104 	addi	r2,r2,4
10012d60:	1007883a 	mov	r3,r2
10012d64:	e0bffc17 	ldw	r2,-16(fp)
10012d68:	10800817 	ldw	r2,32(r2)
10012d6c:	18800035 	stwio	r2,0(r3)
10012d70:	e0bffa17 	ldw	r2,-24(fp)
10012d74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012d78:	e0bff917 	ldw	r2,-28(fp)
10012d7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012d80:	e0fff517 	ldw	r3,-44(fp)
10012d84:	e0bffd17 	ldw	r2,-12(fp)
10012d88:	18800426 	beq	r3,r2,10012d9c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012d8c:	e0fff517 	ldw	r3,-44(fp)
10012d90:	e0bffd17 	ldw	r2,-12(fp)
10012d94:	1885c83a 	sub	r2,r3,r2
10012d98:	00000606 	br	10012db4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012d9c:	e0bfff17 	ldw	r2,-4(fp)
10012da0:	1090000c 	andi	r2,r2,16384
10012da4:	10000226 	beq	r2,zero,10012db0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012da8:	00bffd44 	movi	r2,-11
10012dac:	00000106 	br	10012db4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10012db0:	00bffec4 	movi	r2,-5
}
10012db4:	e037883a 	mov	sp,fp
10012db8:	dfc00117 	ldw	ra,4(sp)
10012dbc:	df000017 	ldw	fp,0(sp)
10012dc0:	dec00204 	addi	sp,sp,8
10012dc4:	f800283a 	ret

10012dc8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012dc8:	defff304 	addi	sp,sp,-52
10012dcc:	dfc00c15 	stw	ra,48(sp)
10012dd0:	df000b15 	stw	fp,44(sp)
10012dd4:	df000b04 	addi	fp,sp,44
10012dd8:	e13ffc15 	stw	r4,-16(fp)
10012ddc:	e17ffd15 	stw	r5,-12(fp)
10012de0:	e1bffe15 	stw	r6,-8(fp)
10012de4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012de8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012dec:	e0bffd17 	ldw	r2,-12(fp)
10012df0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012df4:	00003706 	br	10012ed4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012df8:	e0bffc17 	ldw	r2,-16(fp)
10012dfc:	10800c17 	ldw	r2,48(r2)
10012e00:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10012e04:	e0bffc17 	ldw	r2,-16(fp)
10012e08:	10800d17 	ldw	r2,52(r2)
10012e0c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10012e10:	e0fff917 	ldw	r3,-28(fp)
10012e14:	e0bff517 	ldw	r2,-44(fp)
10012e18:	1880062e 	bgeu	r3,r2,10012e34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10012e1c:	e0fff517 	ldw	r3,-44(fp)
10012e20:	e0bff917 	ldw	r2,-28(fp)
10012e24:	1885c83a 	sub	r2,r3,r2
10012e28:	10bfffc4 	addi	r2,r2,-1
10012e2c:	e0bff615 	stw	r2,-40(fp)
10012e30:	00000b06 	br	10012e60 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10012e34:	e0bff517 	ldw	r2,-44(fp)
10012e38:	10000526 	beq	r2,zero,10012e50 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10012e3c:	00c20004 	movi	r3,2048
10012e40:	e0bff917 	ldw	r2,-28(fp)
10012e44:	1885c83a 	sub	r2,r3,r2
10012e48:	e0bff615 	stw	r2,-40(fp)
10012e4c:	00000406 	br	10012e60 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10012e50:	00c1ffc4 	movi	r3,2047
10012e54:	e0bff917 	ldw	r2,-28(fp)
10012e58:	1885c83a 	sub	r2,r3,r2
10012e5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012e60:	e0bff617 	ldw	r2,-40(fp)
10012e64:	10001e26 	beq	r2,zero,10012ee0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012e68:	e0fffe17 	ldw	r3,-8(fp)
10012e6c:	e0bff617 	ldw	r2,-40(fp)
10012e70:	1880022e 	bgeu	r3,r2,10012e7c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10012e74:	e0bffe17 	ldw	r2,-8(fp)
10012e78:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10012e7c:	e0bffc17 	ldw	r2,-16(fp)
10012e80:	10c20e04 	addi	r3,r2,2104
10012e84:	e0bff917 	ldw	r2,-28(fp)
10012e88:	1885883a 	add	r2,r3,r2
10012e8c:	e1bff617 	ldw	r6,-40(fp)
10012e90:	e17ffd17 	ldw	r5,-12(fp)
10012e94:	1009883a 	mov	r4,r2
10012e98:	000a7e40 	call	1000a7e4 <memcpy>
      ptr   += n;
10012e9c:	e0fffd17 	ldw	r3,-12(fp)
10012ea0:	e0bff617 	ldw	r2,-40(fp)
10012ea4:	1885883a 	add	r2,r3,r2
10012ea8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10012eac:	e0fffe17 	ldw	r3,-8(fp)
10012eb0:	e0bff617 	ldw	r2,-40(fp)
10012eb4:	1885c83a 	sub	r2,r3,r2
10012eb8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012ebc:	e0fff917 	ldw	r3,-28(fp)
10012ec0:	e0bff617 	ldw	r2,-40(fp)
10012ec4:	1885883a 	add	r2,r3,r2
10012ec8:	10c1ffcc 	andi	r3,r2,2047
10012ecc:	e0bffc17 	ldw	r2,-16(fp)
10012ed0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012ed4:	e0bffe17 	ldw	r2,-8(fp)
10012ed8:	00bfc716 	blt	zero,r2,10012df8 <__alt_data_end+0xf8012df8>
10012edc:	00000106 	br	10012ee4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10012ee0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012ee4:	0005303a 	rdctl	r2,status
10012ee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012eec:	e0fffb17 	ldw	r3,-20(fp)
10012ef0:	00bfff84 	movi	r2,-2
10012ef4:	1884703a 	and	r2,r3,r2
10012ef8:	1001703a 	wrctl	status,r2
  
  return context;
10012efc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012f00:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012f04:	e0bffc17 	ldw	r2,-16(fp)
10012f08:	10800817 	ldw	r2,32(r2)
10012f0c:	10c00094 	ori	r3,r2,2
10012f10:	e0bffc17 	ldw	r2,-16(fp)
10012f14:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012f18:	e0bffc17 	ldw	r2,-16(fp)
10012f1c:	10800017 	ldw	r2,0(r2)
10012f20:	10800104 	addi	r2,r2,4
10012f24:	1007883a 	mov	r3,r2
10012f28:	e0bffc17 	ldw	r2,-16(fp)
10012f2c:	10800817 	ldw	r2,32(r2)
10012f30:	18800035 	stwio	r2,0(r3)
10012f34:	e0bffa17 	ldw	r2,-24(fp)
10012f38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012f3c:	e0bff817 	ldw	r2,-32(fp)
10012f40:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10012f44:	e0bffe17 	ldw	r2,-8(fp)
10012f48:	0080100e 	bge	zero,r2,10012f8c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10012f4c:	e0bfff17 	ldw	r2,-4(fp)
10012f50:	1090000c 	andi	r2,r2,16384
10012f54:	1000101e 	bne	r2,zero,10012f98 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10012f58:	0001883a 	nop
10012f5c:	e0bffc17 	ldw	r2,-16(fp)
10012f60:	10c00d17 	ldw	r3,52(r2)
10012f64:	e0bff517 	ldw	r2,-44(fp)
10012f68:	1880051e 	bne	r3,r2,10012f80 <altera_avalon_jtag_uart_write+0x1b8>
10012f6c:	e0bffc17 	ldw	r2,-16(fp)
10012f70:	10c00917 	ldw	r3,36(r2)
10012f74:	e0bffc17 	ldw	r2,-16(fp)
10012f78:	10800117 	ldw	r2,4(r2)
10012f7c:	18bff736 	bltu	r3,r2,10012f5c <__alt_data_end+0xf8012f5c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012f80:	e0bffc17 	ldw	r2,-16(fp)
10012f84:	10800917 	ldw	r2,36(r2)
10012f88:	1000051e 	bne	r2,zero,10012fa0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012f8c:	e0bffe17 	ldw	r2,-8(fp)
10012f90:	00bfd016 	blt	zero,r2,10012ed4 <__alt_data_end+0xf8012ed4>
10012f94:	00000306 	br	10012fa4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012f98:	0001883a 	nop
10012f9c:	00000106 	br	10012fa4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012fa0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012fa4:	e0fffd17 	ldw	r3,-12(fp)
10012fa8:	e0bff717 	ldw	r2,-36(fp)
10012fac:	18800426 	beq	r3,r2,10012fc0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10012fb0:	e0fffd17 	ldw	r3,-12(fp)
10012fb4:	e0bff717 	ldw	r2,-36(fp)
10012fb8:	1885c83a 	sub	r2,r3,r2
10012fbc:	00000606 	br	10012fd8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012fc0:	e0bfff17 	ldw	r2,-4(fp)
10012fc4:	1090000c 	andi	r2,r2,16384
10012fc8:	10000226 	beq	r2,zero,10012fd4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012fcc:	00bffd44 	movi	r2,-11
10012fd0:	00000106 	br	10012fd8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012fd4:	00bffec4 	movi	r2,-5
}
10012fd8:	e037883a 	mov	sp,fp
10012fdc:	dfc00117 	ldw	ra,4(sp)
10012fe0:	df000017 	ldw	fp,0(sp)
10012fe4:	dec00204 	addi	sp,sp,8
10012fe8:	f800283a 	ret

10012fec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012fec:	defff504 	addi	sp,sp,-44
10012ff0:	df000a15 	stw	fp,40(sp)
10012ff4:	df000a04 	addi	fp,sp,40
10012ff8:	e13ffc15 	stw	r4,-16(fp)
10012ffc:	e17ffd15 	stw	r5,-12(fp)
10013000:	e1bffe15 	stw	r6,-8(fp)
10013004:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10013008:	e03ff615 	stw	zero,-40(fp)
1001300c:	d0aa9517 	ldw	r2,-21932(gp)
  
  if (alt_ticks_per_second ())
10013010:	10003c26 	beq	r2,zero,10013104 <alt_alarm_start+0x118>
  {
    if (alarm)
10013014:	e0bffc17 	ldw	r2,-16(fp)
10013018:	10003826 	beq	r2,zero,100130fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1001301c:	e0bffc17 	ldw	r2,-16(fp)
10013020:	e0fffe17 	ldw	r3,-8(fp)
10013024:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10013028:	e0bffc17 	ldw	r2,-16(fp)
1001302c:	e0ffff17 	ldw	r3,-4(fp)
10013030:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013034:	0005303a 	rdctl	r2,status
10013038:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001303c:	e0fff917 	ldw	r3,-28(fp)
10013040:	00bfff84 	movi	r2,-2
10013044:	1884703a 	and	r2,r3,r2
10013048:	1001703a 	wrctl	status,r2
  
  return context;
1001304c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10013050:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10013054:	d0aa9617 	ldw	r2,-21928(gp)
      
      current_nticks = alt_nticks();
10013058:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1001305c:	e0fffd17 	ldw	r3,-12(fp)
10013060:	e0bff617 	ldw	r2,-40(fp)
10013064:	1885883a 	add	r2,r3,r2
10013068:	10c00044 	addi	r3,r2,1
1001306c:	e0bffc17 	ldw	r2,-16(fp)
10013070:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10013074:	e0bffc17 	ldw	r2,-16(fp)
10013078:	10c00217 	ldw	r3,8(r2)
1001307c:	e0bff617 	ldw	r2,-40(fp)
10013080:	1880042e 	bgeu	r3,r2,10013094 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10013084:	e0bffc17 	ldw	r2,-16(fp)
10013088:	00c00044 	movi	r3,1
1001308c:	10c00405 	stb	r3,16(r2)
10013090:	00000206 	br	1001309c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10013094:	e0bffc17 	ldw	r2,-16(fp)
10013098:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1001309c:	e0bffc17 	ldw	r2,-16(fp)
100130a0:	d0e01104 	addi	r3,gp,-32700
100130a4:	e0fffa15 	stw	r3,-24(fp)
100130a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100130ac:	e0bffb17 	ldw	r2,-20(fp)
100130b0:	e0fffa17 	ldw	r3,-24(fp)
100130b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100130b8:	e0bffa17 	ldw	r2,-24(fp)
100130bc:	10c00017 	ldw	r3,0(r2)
100130c0:	e0bffb17 	ldw	r2,-20(fp)
100130c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100130c8:	e0bffa17 	ldw	r2,-24(fp)
100130cc:	10800017 	ldw	r2,0(r2)
100130d0:	e0fffb17 	ldw	r3,-20(fp)
100130d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100130d8:	e0bffa17 	ldw	r2,-24(fp)
100130dc:	e0fffb17 	ldw	r3,-20(fp)
100130e0:	10c00015 	stw	r3,0(r2)
100130e4:	e0bff817 	ldw	r2,-32(fp)
100130e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100130ec:	e0bff717 	ldw	r2,-36(fp)
100130f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100130f4:	0005883a 	mov	r2,zero
100130f8:	00000306 	br	10013108 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
100130fc:	00bffa84 	movi	r2,-22
10013100:	00000106 	br	10013108 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10013104:	00bfde84 	movi	r2,-134
  }
}
10013108:	e037883a 	mov	sp,fp
1001310c:	df000017 	ldw	fp,0(sp)
10013110:	dec00104 	addi	sp,sp,4
10013114:	f800283a 	ret

10013118 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10013118:	defffa04 	addi	sp,sp,-24
1001311c:	dfc00515 	stw	ra,20(sp)
10013120:	df000415 	stw	fp,16(sp)
10013124:	df000404 	addi	fp,sp,16
10013128:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001312c:	00800244 	movi	r2,9
10013130:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10013134:	014003f4 	movhi	r5,15
10013138:	29509004 	addi	r5,r5,16960
1001313c:	e13ffd17 	ldw	r4,-12(fp)
10013140:	0004bc80 	call	10004bc8 <__mulsi3>
10013144:	100b883a 	mov	r5,r2
10013148:	0100bef4 	movhi	r4,763
1001314c:	213c2004 	addi	r4,r4,-3968
10013150:	000f1a80 	call	1000f1a8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10013154:	100b883a 	mov	r5,r2
10013158:	01200034 	movhi	r4,32768
1001315c:	213fffc4 	addi	r4,r4,-1
10013160:	000f1a80 	call	1000f1a8 <__udivsi3>
10013164:	100b883a 	mov	r5,r2
10013168:	e13fff17 	ldw	r4,-4(fp)
1001316c:	000f1a80 	call	1000f1a8 <__udivsi3>
10013170:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10013174:	e0bffe17 	ldw	r2,-8(fp)
10013178:	10002a26 	beq	r2,zero,10013224 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001317c:	e03ffc15 	stw	zero,-16(fp)
10013180:	00001706 	br	100131e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10013184:	00a00034 	movhi	r2,32768
10013188:	10bfffc4 	addi	r2,r2,-1
1001318c:	10bfffc4 	addi	r2,r2,-1
10013190:	103ffe1e 	bne	r2,zero,1001318c <__alt_data_end+0xf801318c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10013194:	014003f4 	movhi	r5,15
10013198:	29509004 	addi	r5,r5,16960
1001319c:	e13ffd17 	ldw	r4,-12(fp)
100131a0:	0004bc80 	call	10004bc8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100131a4:	100b883a 	mov	r5,r2
100131a8:	0100bef4 	movhi	r4,763
100131ac:	213c2004 	addi	r4,r4,-3968
100131b0:	000f1a80 	call	1000f1a8 <__udivsi3>
100131b4:	100b883a 	mov	r5,r2
100131b8:	01200034 	movhi	r4,32768
100131bc:	213fffc4 	addi	r4,r4,-1
100131c0:	000f1a80 	call	1000f1a8 <__udivsi3>
100131c4:	1007883a 	mov	r3,r2
100131c8:	e0bfff17 	ldw	r2,-4(fp)
100131cc:	10c5c83a 	sub	r2,r2,r3
100131d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100131d4:	e0bffc17 	ldw	r2,-16(fp)
100131d8:	10800044 	addi	r2,r2,1
100131dc:	e0bffc15 	stw	r2,-16(fp)
100131e0:	e0fffc17 	ldw	r3,-16(fp)
100131e4:	e0bffe17 	ldw	r2,-8(fp)
100131e8:	18bfe616 	blt	r3,r2,10013184 <__alt_data_end+0xf8013184>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100131ec:	014003f4 	movhi	r5,15
100131f0:	29509004 	addi	r5,r5,16960
100131f4:	e13ffd17 	ldw	r4,-12(fp)
100131f8:	0004bc80 	call	10004bc8 <__mulsi3>
100131fc:	100b883a 	mov	r5,r2
10013200:	0100bef4 	movhi	r4,763
10013204:	213c2004 	addi	r4,r4,-3968
10013208:	000f1a80 	call	1000f1a8 <__udivsi3>
1001320c:	e17fff17 	ldw	r5,-4(fp)
10013210:	1009883a 	mov	r4,r2
10013214:	0004bc80 	call	10004bc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013218:	10bfffc4 	addi	r2,r2,-1
1001321c:	103ffe1e 	bne	r2,zero,10013218 <__alt_data_end+0xf8013218>
10013220:	00000d06 	br	10013258 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10013224:	014003f4 	movhi	r5,15
10013228:	29509004 	addi	r5,r5,16960
1001322c:	e13ffd17 	ldw	r4,-12(fp)
10013230:	0004bc80 	call	10004bc8 <__mulsi3>
10013234:	100b883a 	mov	r5,r2
10013238:	0100bef4 	movhi	r4,763
1001323c:	213c2004 	addi	r4,r4,-3968
10013240:	000f1a80 	call	1000f1a8 <__udivsi3>
10013244:	e17fff17 	ldw	r5,-4(fp)
10013248:	1009883a 	mov	r4,r2
1001324c:	0004bc80 	call	10004bc8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013250:	10bfffc4 	addi	r2,r2,-1
10013254:	00bffe16 	blt	zero,r2,10013250 <__alt_data_end+0xf8013250>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10013258:	0005883a 	mov	r2,zero
}
1001325c:	e037883a 	mov	sp,fp
10013260:	dfc00117 	ldw	ra,4(sp)
10013264:	df000017 	ldw	fp,0(sp)
10013268:	dec00204 	addi	sp,sp,8
1001326c:	f800283a 	ret

10013270 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10013270:	deffff04 	addi	sp,sp,-4
10013274:	df000015 	stw	fp,0(sp)
10013278:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001327c:	0001883a 	nop
10013280:	e037883a 	mov	sp,fp
10013284:	df000017 	ldw	fp,0(sp)
10013288:	dec00104 	addi	sp,sp,4
1001328c:	f800283a 	ret

10013290 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013290:	defffe04 	addi	sp,sp,-8
10013294:	dfc00115 	stw	ra,4(sp)
10013298:	df000015 	stw	fp,0(sp)
1001329c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100132a0:	d0a00e17 	ldw	r2,-32712(gp)
100132a4:	10000326 	beq	r2,zero,100132b4 <alt_get_errno+0x24>
100132a8:	d0a00e17 	ldw	r2,-32712(gp)
100132ac:	103ee83a 	callr	r2
100132b0:	00000106 	br	100132b8 <alt_get_errno+0x28>
100132b4:	d0aa9004 	addi	r2,gp,-21952
}
100132b8:	e037883a 	mov	sp,fp
100132bc:	dfc00117 	ldw	ra,4(sp)
100132c0:	df000017 	ldw	fp,0(sp)
100132c4:	dec00204 	addi	sp,sp,8
100132c8:	f800283a 	ret

100132cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100132cc:	defffa04 	addi	sp,sp,-24
100132d0:	dfc00515 	stw	ra,20(sp)
100132d4:	df000415 	stw	fp,16(sp)
100132d8:	df000404 	addi	fp,sp,16
100132dc:	e13ffe15 	stw	r4,-8(fp)
100132e0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100132e4:	e0bffe17 	ldw	r2,-8(fp)
100132e8:	10000326 	beq	r2,zero,100132f8 <alt_dev_llist_insert+0x2c>
100132ec:	e0bffe17 	ldw	r2,-8(fp)
100132f0:	10800217 	ldw	r2,8(r2)
100132f4:	1000061e 	bne	r2,zero,10013310 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100132f8:	00132900 	call	10013290 <alt_get_errno>
100132fc:	1007883a 	mov	r3,r2
10013300:	00800584 	movi	r2,22
10013304:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10013308:	00bffa84 	movi	r2,-22
1001330c:	00001306 	br	1001335c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10013310:	e0bffe17 	ldw	r2,-8(fp)
10013314:	e0ffff17 	ldw	r3,-4(fp)
10013318:	e0fffc15 	stw	r3,-16(fp)
1001331c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013320:	e0bffd17 	ldw	r2,-12(fp)
10013324:	e0fffc17 	ldw	r3,-16(fp)
10013328:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001332c:	e0bffc17 	ldw	r2,-16(fp)
10013330:	10c00017 	ldw	r3,0(r2)
10013334:	e0bffd17 	ldw	r2,-12(fp)
10013338:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001333c:	e0bffc17 	ldw	r2,-16(fp)
10013340:	10800017 	ldw	r2,0(r2)
10013344:	e0fffd17 	ldw	r3,-12(fp)
10013348:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001334c:	e0bffc17 	ldw	r2,-16(fp)
10013350:	e0fffd17 	ldw	r3,-12(fp)
10013354:	10c00015 	stw	r3,0(r2)

  return 0;  
10013358:	0005883a 	mov	r2,zero
}
1001335c:	e037883a 	mov	sp,fp
10013360:	dfc00117 	ldw	ra,4(sp)
10013364:	df000017 	ldw	fp,0(sp)
10013368:	dec00204 	addi	sp,sp,8
1001336c:	f800283a 	ret

10013370 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10013370:	defffd04 	addi	sp,sp,-12
10013374:	dfc00215 	stw	ra,8(sp)
10013378:	df000115 	stw	fp,4(sp)
1001337c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10013380:	00840074 	movhi	r2,4097
10013384:	1090c904 	addi	r2,r2,17188
10013388:	e0bfff15 	stw	r2,-4(fp)
1001338c:	00000606 	br	100133a8 <_do_ctors+0x38>
        (*ctor) (); 
10013390:	e0bfff17 	ldw	r2,-4(fp)
10013394:	10800017 	ldw	r2,0(r2)
10013398:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001339c:	e0bfff17 	ldw	r2,-4(fp)
100133a0:	10bfff04 	addi	r2,r2,-4
100133a4:	e0bfff15 	stw	r2,-4(fp)
100133a8:	e0ffff17 	ldw	r3,-4(fp)
100133ac:	00840074 	movhi	r2,4097
100133b0:	1090ca04 	addi	r2,r2,17192
100133b4:	18bff62e 	bgeu	r3,r2,10013390 <__alt_data_end+0xf8013390>
        (*ctor) (); 
}
100133b8:	0001883a 	nop
100133bc:	e037883a 	mov	sp,fp
100133c0:	dfc00117 	ldw	ra,4(sp)
100133c4:	df000017 	ldw	fp,0(sp)
100133c8:	dec00204 	addi	sp,sp,8
100133cc:	f800283a 	ret

100133d0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100133d0:	defffd04 	addi	sp,sp,-12
100133d4:	dfc00215 	stw	ra,8(sp)
100133d8:	df000115 	stw	fp,4(sp)
100133dc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100133e0:	00840074 	movhi	r2,4097
100133e4:	1090c904 	addi	r2,r2,17188
100133e8:	e0bfff15 	stw	r2,-4(fp)
100133ec:	00000606 	br	10013408 <_do_dtors+0x38>
        (*dtor) (); 
100133f0:	e0bfff17 	ldw	r2,-4(fp)
100133f4:	10800017 	ldw	r2,0(r2)
100133f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100133fc:	e0bfff17 	ldw	r2,-4(fp)
10013400:	10bfff04 	addi	r2,r2,-4
10013404:	e0bfff15 	stw	r2,-4(fp)
10013408:	e0ffff17 	ldw	r3,-4(fp)
1001340c:	00840074 	movhi	r2,4097
10013410:	1090ca04 	addi	r2,r2,17192
10013414:	18bff62e 	bgeu	r3,r2,100133f0 <__alt_data_end+0xf80133f0>
        (*dtor) (); 
}
10013418:	0001883a 	nop
1001341c:	e037883a 	mov	sp,fp
10013420:	dfc00117 	ldw	ra,4(sp)
10013424:	df000017 	ldw	fp,0(sp)
10013428:	dec00204 	addi	sp,sp,8
1001342c:	f800283a 	ret

10013430 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013430:	deffff04 	addi	sp,sp,-4
10013434:	df000015 	stw	fp,0(sp)
10013438:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001343c:	0001883a 	nop
10013440:	e037883a 	mov	sp,fp
10013444:	df000017 	ldw	fp,0(sp)
10013448:	dec00104 	addi	sp,sp,4
1001344c:	f800283a 	ret

10013450 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013450:	defff904 	addi	sp,sp,-28
10013454:	dfc00615 	stw	ra,24(sp)
10013458:	df000515 	stw	fp,20(sp)
1001345c:	df000504 	addi	fp,sp,20
10013460:	e13ffc15 	stw	r4,-16(fp)
10013464:	e17ffd15 	stw	r5,-12(fp)
10013468:	e1bffe15 	stw	r6,-8(fp)
1001346c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10013470:	e0800217 	ldw	r2,8(fp)
10013474:	d8800015 	stw	r2,0(sp)
10013478:	e1ffff17 	ldw	r7,-4(fp)
1001347c:	e1bffe17 	ldw	r6,-8(fp)
10013480:	e17ffd17 	ldw	r5,-12(fp)
10013484:	e13ffc17 	ldw	r4,-16(fp)
10013488:	00136000 	call	10013600 <alt_iic_isr_register>
}  
1001348c:	e037883a 	mov	sp,fp
10013490:	dfc00117 	ldw	ra,4(sp)
10013494:	df000017 	ldw	fp,0(sp)
10013498:	dec00204 	addi	sp,sp,8
1001349c:	f800283a 	ret

100134a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100134a0:	defff904 	addi	sp,sp,-28
100134a4:	df000615 	stw	fp,24(sp)
100134a8:	df000604 	addi	fp,sp,24
100134ac:	e13ffe15 	stw	r4,-8(fp)
100134b0:	e17fff15 	stw	r5,-4(fp)
100134b4:	e0bfff17 	ldw	r2,-4(fp)
100134b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100134bc:	0005303a 	rdctl	r2,status
100134c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100134c4:	e0fffb17 	ldw	r3,-20(fp)
100134c8:	00bfff84 	movi	r2,-2
100134cc:	1884703a 	and	r2,r3,r2
100134d0:	1001703a 	wrctl	status,r2
  
  return context;
100134d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100134d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100134dc:	00c00044 	movi	r3,1
100134e0:	e0bffa17 	ldw	r2,-24(fp)
100134e4:	1884983a 	sll	r2,r3,r2
100134e8:	1007883a 	mov	r3,r2
100134ec:	d0aa9417 	ldw	r2,-21936(gp)
100134f0:	1884b03a 	or	r2,r3,r2
100134f4:	d0aa9415 	stw	r2,-21936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100134f8:	d0aa9417 	ldw	r2,-21936(gp)
100134fc:	100170fa 	wrctl	ienable,r2
10013500:	e0bffc17 	ldw	r2,-16(fp)
10013504:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013508:	e0bffd17 	ldw	r2,-12(fp)
1001350c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013510:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10013514:	0001883a 	nop
}
10013518:	e037883a 	mov	sp,fp
1001351c:	df000017 	ldw	fp,0(sp)
10013520:	dec00104 	addi	sp,sp,4
10013524:	f800283a 	ret

10013528 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013528:	defff904 	addi	sp,sp,-28
1001352c:	df000615 	stw	fp,24(sp)
10013530:	df000604 	addi	fp,sp,24
10013534:	e13ffe15 	stw	r4,-8(fp)
10013538:	e17fff15 	stw	r5,-4(fp)
1001353c:	e0bfff17 	ldw	r2,-4(fp)
10013540:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013544:	0005303a 	rdctl	r2,status
10013548:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001354c:	e0fffb17 	ldw	r3,-20(fp)
10013550:	00bfff84 	movi	r2,-2
10013554:	1884703a 	and	r2,r3,r2
10013558:	1001703a 	wrctl	status,r2
  
  return context;
1001355c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013560:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10013564:	00c00044 	movi	r3,1
10013568:	e0bffa17 	ldw	r2,-24(fp)
1001356c:	1884983a 	sll	r2,r3,r2
10013570:	0084303a 	nor	r2,zero,r2
10013574:	1007883a 	mov	r3,r2
10013578:	d0aa9417 	ldw	r2,-21936(gp)
1001357c:	1884703a 	and	r2,r3,r2
10013580:	d0aa9415 	stw	r2,-21936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013584:	d0aa9417 	ldw	r2,-21936(gp)
10013588:	100170fa 	wrctl	ienable,r2
1001358c:	e0bffc17 	ldw	r2,-16(fp)
10013590:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013594:	e0bffd17 	ldw	r2,-12(fp)
10013598:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001359c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100135a0:	0001883a 	nop
}
100135a4:	e037883a 	mov	sp,fp
100135a8:	df000017 	ldw	fp,0(sp)
100135ac:	dec00104 	addi	sp,sp,4
100135b0:	f800283a 	ret

100135b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100135b4:	defffc04 	addi	sp,sp,-16
100135b8:	df000315 	stw	fp,12(sp)
100135bc:	df000304 	addi	fp,sp,12
100135c0:	e13ffe15 	stw	r4,-8(fp)
100135c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100135c8:	000530fa 	rdctl	r2,ienable
100135cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100135d0:	00c00044 	movi	r3,1
100135d4:	e0bfff17 	ldw	r2,-4(fp)
100135d8:	1884983a 	sll	r2,r3,r2
100135dc:	1007883a 	mov	r3,r2
100135e0:	e0bffd17 	ldw	r2,-12(fp)
100135e4:	1884703a 	and	r2,r3,r2
100135e8:	1004c03a 	cmpne	r2,r2,zero
100135ec:	10803fcc 	andi	r2,r2,255
}
100135f0:	e037883a 	mov	sp,fp
100135f4:	df000017 	ldw	fp,0(sp)
100135f8:	dec00104 	addi	sp,sp,4
100135fc:	f800283a 	ret

10013600 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013600:	defff504 	addi	sp,sp,-44
10013604:	dfc00a15 	stw	ra,40(sp)
10013608:	df000915 	stw	fp,36(sp)
1001360c:	df000904 	addi	fp,sp,36
10013610:	e13ffc15 	stw	r4,-16(fp)
10013614:	e17ffd15 	stw	r5,-12(fp)
10013618:	e1bffe15 	stw	r6,-8(fp)
1001361c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013620:	00bffa84 	movi	r2,-22
10013624:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013628:	e0bffd17 	ldw	r2,-12(fp)
1001362c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013630:	e0bff817 	ldw	r2,-32(fp)
10013634:	10800808 	cmpgei	r2,r2,32
10013638:	1000271e 	bne	r2,zero,100136d8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001363c:	0005303a 	rdctl	r2,status
10013640:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013644:	e0fffb17 	ldw	r3,-20(fp)
10013648:	00bfff84 	movi	r2,-2
1001364c:	1884703a 	and	r2,r3,r2
10013650:	1001703a 	wrctl	status,r2
  
  return context;
10013654:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10013658:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1001365c:	008400b4 	movhi	r2,4098
10013660:	10aa7c04 	addi	r2,r2,-22032
10013664:	e0fff817 	ldw	r3,-32(fp)
10013668:	180690fa 	slli	r3,r3,3
1001366c:	10c5883a 	add	r2,r2,r3
10013670:	e0fffe17 	ldw	r3,-8(fp)
10013674:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10013678:	008400b4 	movhi	r2,4098
1001367c:	10aa7c04 	addi	r2,r2,-22032
10013680:	e0fff817 	ldw	r3,-32(fp)
10013684:	180690fa 	slli	r3,r3,3
10013688:	10c5883a 	add	r2,r2,r3
1001368c:	10800104 	addi	r2,r2,4
10013690:	e0ffff17 	ldw	r3,-4(fp)
10013694:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10013698:	e0bffe17 	ldw	r2,-8(fp)
1001369c:	10000526 	beq	r2,zero,100136b4 <alt_iic_isr_register+0xb4>
100136a0:	e0bff817 	ldw	r2,-32(fp)
100136a4:	100b883a 	mov	r5,r2
100136a8:	e13ffc17 	ldw	r4,-16(fp)
100136ac:	00134a00 	call	100134a0 <alt_ic_irq_enable>
100136b0:	00000406 	br	100136c4 <alt_iic_isr_register+0xc4>
100136b4:	e0bff817 	ldw	r2,-32(fp)
100136b8:	100b883a 	mov	r5,r2
100136bc:	e13ffc17 	ldw	r4,-16(fp)
100136c0:	00135280 	call	10013528 <alt_ic_irq_disable>
100136c4:	e0bff715 	stw	r2,-36(fp)
100136c8:	e0bffa17 	ldw	r2,-24(fp)
100136cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100136d0:	e0bff917 	ldw	r2,-28(fp)
100136d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100136d8:	e0bff717 	ldw	r2,-36(fp)
}
100136dc:	e037883a 	mov	sp,fp
100136e0:	dfc00117 	ldw	ra,4(sp)
100136e4:	df000017 	ldw	fp,0(sp)
100136e8:	dec00204 	addi	sp,sp,8
100136ec:	f800283a 	ret

100136f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100136f0:	defff804 	addi	sp,sp,-32
100136f4:	dfc00715 	stw	ra,28(sp)
100136f8:	df000615 	stw	fp,24(sp)
100136fc:	dc000515 	stw	r16,20(sp)
10013700:	df000604 	addi	fp,sp,24
10013704:	e13ffb15 	stw	r4,-20(fp)
10013708:	e17ffc15 	stw	r5,-16(fp)
1001370c:	e1bffd15 	stw	r6,-12(fp)
10013710:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10013714:	e1bffe17 	ldw	r6,-8(fp)
10013718:	e17ffd17 	ldw	r5,-12(fp)
1001371c:	e13ffc17 	ldw	r4,-16(fp)
10013720:	00139780 	call	10013978 <open>
10013724:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013728:	e0bffa17 	ldw	r2,-24(fp)
1001372c:	10002216 	blt	r2,zero,100137b8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013730:	04040074 	movhi	r16,4097
10013734:	8419c604 	addi	r16,r16,26392
10013738:	e0bffa17 	ldw	r2,-24(fp)
1001373c:	01400304 	movi	r5,12
10013740:	1009883a 	mov	r4,r2
10013744:	0004bc80 	call	10004bc8 <__mulsi3>
10013748:	8085883a 	add	r2,r16,r2
1001374c:	10c00017 	ldw	r3,0(r2)
10013750:	e0bffb17 	ldw	r2,-20(fp)
10013754:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10013758:	04040074 	movhi	r16,4097
1001375c:	8419c604 	addi	r16,r16,26392
10013760:	e0bffa17 	ldw	r2,-24(fp)
10013764:	01400304 	movi	r5,12
10013768:	1009883a 	mov	r4,r2
1001376c:	0004bc80 	call	10004bc8 <__mulsi3>
10013770:	8085883a 	add	r2,r16,r2
10013774:	10800104 	addi	r2,r2,4
10013778:	10c00017 	ldw	r3,0(r2)
1001377c:	e0bffb17 	ldw	r2,-20(fp)
10013780:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10013784:	04040074 	movhi	r16,4097
10013788:	8419c604 	addi	r16,r16,26392
1001378c:	e0bffa17 	ldw	r2,-24(fp)
10013790:	01400304 	movi	r5,12
10013794:	1009883a 	mov	r4,r2
10013798:	0004bc80 	call	10004bc8 <__mulsi3>
1001379c:	8085883a 	add	r2,r16,r2
100137a0:	10800204 	addi	r2,r2,8
100137a4:	10c00017 	ldw	r3,0(r2)
100137a8:	e0bffb17 	ldw	r2,-20(fp)
100137ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100137b0:	e13ffa17 	ldw	r4,-24(fp)
100137b4:	001222c0 	call	1001222c <alt_release_fd>
  }
} 
100137b8:	0001883a 	nop
100137bc:	e6ffff04 	addi	sp,fp,-4
100137c0:	dfc00217 	ldw	ra,8(sp)
100137c4:	df000117 	ldw	fp,4(sp)
100137c8:	dc000017 	ldw	r16,0(sp)
100137cc:	dec00304 	addi	sp,sp,12
100137d0:	f800283a 	ret

100137d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100137d4:	defffb04 	addi	sp,sp,-20
100137d8:	dfc00415 	stw	ra,16(sp)
100137dc:	df000315 	stw	fp,12(sp)
100137e0:	df000304 	addi	fp,sp,12
100137e4:	e13ffd15 	stw	r4,-12(fp)
100137e8:	e17ffe15 	stw	r5,-8(fp)
100137ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100137f0:	01c07fc4 	movi	r7,511
100137f4:	01800044 	movi	r6,1
100137f8:	e17ffd17 	ldw	r5,-12(fp)
100137fc:	01040074 	movhi	r4,4097
10013800:	2119c904 	addi	r4,r4,26404
10013804:	00136f00 	call	100136f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013808:	01c07fc4 	movi	r7,511
1001380c:	000d883a 	mov	r6,zero
10013810:	e17ffe17 	ldw	r5,-8(fp)
10013814:	01040074 	movhi	r4,4097
10013818:	2119c604 	addi	r4,r4,26392
1001381c:	00136f00 	call	100136f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013820:	01c07fc4 	movi	r7,511
10013824:	01800044 	movi	r6,1
10013828:	e17fff17 	ldw	r5,-4(fp)
1001382c:	01040074 	movhi	r4,4097
10013830:	2119cc04 	addi	r4,r4,26416
10013834:	00136f00 	call	100136f0 <alt_open_fd>
}  
10013838:	0001883a 	nop
1001383c:	e037883a 	mov	sp,fp
10013840:	dfc00117 	ldw	ra,4(sp)
10013844:	df000017 	ldw	fp,0(sp)
10013848:	dec00204 	addi	sp,sp,8
1001384c:	f800283a 	ret

10013850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013850:	defffe04 	addi	sp,sp,-8
10013854:	dfc00115 	stw	ra,4(sp)
10013858:	df000015 	stw	fp,0(sp)
1001385c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013860:	d0a00e17 	ldw	r2,-32712(gp)
10013864:	10000326 	beq	r2,zero,10013874 <alt_get_errno+0x24>
10013868:	d0a00e17 	ldw	r2,-32712(gp)
1001386c:	103ee83a 	callr	r2
10013870:	00000106 	br	10013878 <alt_get_errno+0x28>
10013874:	d0aa9004 	addi	r2,gp,-21952
}
10013878:	e037883a 	mov	sp,fp
1001387c:	dfc00117 	ldw	ra,4(sp)
10013880:	df000017 	ldw	fp,0(sp)
10013884:	dec00204 	addi	sp,sp,8
10013888:	f800283a 	ret

1001388c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001388c:	defffb04 	addi	sp,sp,-20
10013890:	dfc00415 	stw	ra,16(sp)
10013894:	df000315 	stw	fp,12(sp)
10013898:	dc000215 	stw	r16,8(sp)
1001389c:	df000304 	addi	fp,sp,12
100138a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100138a4:	e0bffe17 	ldw	r2,-8(fp)
100138a8:	10800217 	ldw	r2,8(r2)
100138ac:	10d00034 	orhi	r3,r2,16384
100138b0:	e0bffe17 	ldw	r2,-8(fp)
100138b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100138b8:	e03ffd15 	stw	zero,-12(fp)
100138bc:	00002306 	br	1001394c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100138c0:	04040074 	movhi	r16,4097
100138c4:	8419c604 	addi	r16,r16,26392
100138c8:	e0bffd17 	ldw	r2,-12(fp)
100138cc:	01400304 	movi	r5,12
100138d0:	1009883a 	mov	r4,r2
100138d4:	0004bc80 	call	10004bc8 <__mulsi3>
100138d8:	8085883a 	add	r2,r16,r2
100138dc:	10c00017 	ldw	r3,0(r2)
100138e0:	e0bffe17 	ldw	r2,-8(fp)
100138e4:	10800017 	ldw	r2,0(r2)
100138e8:	1880151e 	bne	r3,r2,10013940 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100138ec:	04040074 	movhi	r16,4097
100138f0:	8419c604 	addi	r16,r16,26392
100138f4:	e0bffd17 	ldw	r2,-12(fp)
100138f8:	01400304 	movi	r5,12
100138fc:	1009883a 	mov	r4,r2
10013900:	0004bc80 	call	10004bc8 <__mulsi3>
10013904:	8085883a 	add	r2,r16,r2
10013908:	10800204 	addi	r2,r2,8
1001390c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013910:	10000b0e 	bge	r2,zero,10013940 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013914:	01400304 	movi	r5,12
10013918:	e13ffd17 	ldw	r4,-12(fp)
1001391c:	0004bc80 	call	10004bc8 <__mulsi3>
10013920:	1007883a 	mov	r3,r2
10013924:	00840074 	movhi	r2,4097
10013928:	1099c604 	addi	r2,r2,26392
1001392c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013930:	e0bffe17 	ldw	r2,-8(fp)
10013934:	18800226 	beq	r3,r2,10013940 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013938:	00bffcc4 	movi	r2,-13
1001393c:	00000806 	br	10013960 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013940:	e0bffd17 	ldw	r2,-12(fp)
10013944:	10800044 	addi	r2,r2,1
10013948:	e0bffd15 	stw	r2,-12(fp)
1001394c:	d0a00d17 	ldw	r2,-32716(gp)
10013950:	1007883a 	mov	r3,r2
10013954:	e0bffd17 	ldw	r2,-12(fp)
10013958:	18bfd92e 	bgeu	r3,r2,100138c0 <__alt_data_end+0xf80138c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001395c:	0005883a 	mov	r2,zero
}
10013960:	e6ffff04 	addi	sp,fp,-4
10013964:	dfc00217 	ldw	ra,8(sp)
10013968:	df000117 	ldw	fp,4(sp)
1001396c:	dc000017 	ldw	r16,0(sp)
10013970:	dec00304 	addi	sp,sp,12
10013974:	f800283a 	ret

10013978 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10013978:	defff604 	addi	sp,sp,-40
1001397c:	dfc00915 	stw	ra,36(sp)
10013980:	df000815 	stw	fp,32(sp)
10013984:	df000804 	addi	fp,sp,32
10013988:	e13ffd15 	stw	r4,-12(fp)
1001398c:	e17ffe15 	stw	r5,-8(fp)
10013990:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10013994:	00bfffc4 	movi	r2,-1
10013998:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1001399c:	00bffb44 	movi	r2,-19
100139a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100139a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100139a8:	d1600b04 	addi	r5,gp,-32724
100139ac:	e13ffd17 	ldw	r4,-12(fp)
100139b0:	0013c9c0 	call	10013c9c <alt_find_dev>
100139b4:	e0bff815 	stw	r2,-32(fp)
100139b8:	e0bff817 	ldw	r2,-32(fp)
100139bc:	1000051e 	bne	r2,zero,100139d4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100139c0:	e13ffd17 	ldw	r4,-12(fp)
100139c4:	0013d2c0 	call	10013d2c <alt_find_file>
100139c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100139cc:	00800044 	movi	r2,1
100139d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100139d4:	e0bff817 	ldw	r2,-32(fp)
100139d8:	10002b26 	beq	r2,zero,10013a88 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
100139dc:	e13ff817 	ldw	r4,-32(fp)
100139e0:	0013e340 	call	10013e34 <alt_get_fd>
100139e4:	e0bff915 	stw	r2,-28(fp)
100139e8:	e0bff917 	ldw	r2,-28(fp)
100139ec:	1000030e 	bge	r2,zero,100139fc <open+0x84>
    {
      status = index;
100139f0:	e0bff917 	ldw	r2,-28(fp)
100139f4:	e0bffa15 	stw	r2,-24(fp)
100139f8:	00002506 	br	10013a90 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
100139fc:	01400304 	movi	r5,12
10013a00:	e13ff917 	ldw	r4,-28(fp)
10013a04:	0004bc80 	call	10004bc8 <__mulsi3>
10013a08:	1007883a 	mov	r3,r2
10013a0c:	00840074 	movhi	r2,4097
10013a10:	1099c604 	addi	r2,r2,26392
10013a14:	1885883a 	add	r2,r3,r2
10013a18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10013a1c:	e0fffe17 	ldw	r3,-8(fp)
10013a20:	00900034 	movhi	r2,16384
10013a24:	10bfffc4 	addi	r2,r2,-1
10013a28:	1886703a 	and	r3,r3,r2
10013a2c:	e0bffc17 	ldw	r2,-16(fp)
10013a30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013a34:	e0bffb17 	ldw	r2,-20(fp)
10013a38:	1000051e 	bne	r2,zero,10013a50 <open+0xd8>
10013a3c:	e13ffc17 	ldw	r4,-16(fp)
10013a40:	001388c0 	call	1001388c <alt_file_locked>
10013a44:	e0bffa15 	stw	r2,-24(fp)
10013a48:	e0bffa17 	ldw	r2,-24(fp)
10013a4c:	10001016 	blt	r2,zero,10013a90 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10013a50:	e0bff817 	ldw	r2,-32(fp)
10013a54:	10800317 	ldw	r2,12(r2)
10013a58:	10000826 	beq	r2,zero,10013a7c <open+0x104>
10013a5c:	e0bff817 	ldw	r2,-32(fp)
10013a60:	10800317 	ldw	r2,12(r2)
10013a64:	e1ffff17 	ldw	r7,-4(fp)
10013a68:	e1bffe17 	ldw	r6,-8(fp)
10013a6c:	e17ffd17 	ldw	r5,-12(fp)
10013a70:	e13ffc17 	ldw	r4,-16(fp)
10013a74:	103ee83a 	callr	r2
10013a78:	00000106 	br	10013a80 <open+0x108>
10013a7c:	0005883a 	mov	r2,zero
10013a80:	e0bffa15 	stw	r2,-24(fp)
10013a84:	00000206 	br	10013a90 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10013a88:	00bffb44 	movi	r2,-19
10013a8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10013a90:	e0bffa17 	ldw	r2,-24(fp)
10013a94:	1000090e 	bge	r2,zero,10013abc <open+0x144>
  {
    alt_release_fd (index);  
10013a98:	e13ff917 	ldw	r4,-28(fp)
10013a9c:	001222c0 	call	1001222c <alt_release_fd>
    ALT_ERRNO = -status;
10013aa0:	00138500 	call	10013850 <alt_get_errno>
10013aa4:	1007883a 	mov	r3,r2
10013aa8:	e0bffa17 	ldw	r2,-24(fp)
10013aac:	0085c83a 	sub	r2,zero,r2
10013ab0:	18800015 	stw	r2,0(r3)
    return -1;
10013ab4:	00bfffc4 	movi	r2,-1
10013ab8:	00000106 	br	10013ac0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013abc:	e0bff917 	ldw	r2,-28(fp)
}
10013ac0:	e037883a 	mov	sp,fp
10013ac4:	dfc00117 	ldw	ra,4(sp)
10013ac8:	df000017 	ldw	fp,0(sp)
10013acc:	dec00204 	addi	sp,sp,8
10013ad0:	f800283a 	ret

10013ad4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10013ad4:	defffa04 	addi	sp,sp,-24
10013ad8:	df000515 	stw	fp,20(sp)
10013adc:	df000504 	addi	fp,sp,20
10013ae0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013ae4:	0005303a 	rdctl	r2,status
10013ae8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013aec:	e0fffc17 	ldw	r3,-16(fp)
10013af0:	00bfff84 	movi	r2,-2
10013af4:	1884703a 	and	r2,r3,r2
10013af8:	1001703a 	wrctl	status,r2
  
  return context;
10013afc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013b00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10013b04:	e0bfff17 	ldw	r2,-4(fp)
10013b08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013b0c:	e0bffd17 	ldw	r2,-12(fp)
10013b10:	10800017 	ldw	r2,0(r2)
10013b14:	e0fffd17 	ldw	r3,-12(fp)
10013b18:	18c00117 	ldw	r3,4(r3)
10013b1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013b20:	e0bffd17 	ldw	r2,-12(fp)
10013b24:	10800117 	ldw	r2,4(r2)
10013b28:	e0fffd17 	ldw	r3,-12(fp)
10013b2c:	18c00017 	ldw	r3,0(r3)
10013b30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10013b34:	e0bffd17 	ldw	r2,-12(fp)
10013b38:	e0fffd17 	ldw	r3,-12(fp)
10013b3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013b40:	e0bffd17 	ldw	r2,-12(fp)
10013b44:	e0fffd17 	ldw	r3,-12(fp)
10013b48:	10c00015 	stw	r3,0(r2)
10013b4c:	e0bffb17 	ldw	r2,-20(fp)
10013b50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013b54:	e0bffe17 	ldw	r2,-8(fp)
10013b58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013b5c:	0001883a 	nop
10013b60:	e037883a 	mov	sp,fp
10013b64:	df000017 	ldw	fp,0(sp)
10013b68:	dec00104 	addi	sp,sp,4
10013b6c:	f800283a 	ret

10013b70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013b70:	defffb04 	addi	sp,sp,-20
10013b74:	dfc00415 	stw	ra,16(sp)
10013b78:	df000315 	stw	fp,12(sp)
10013b7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013b80:	d0a01117 	ldw	r2,-32700(gp)
10013b84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013b88:	d0aa9617 	ldw	r2,-21928(gp)
10013b8c:	10800044 	addi	r2,r2,1
10013b90:	d0aa9615 	stw	r2,-21928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013b94:	00002e06 	br	10013c50 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013b98:	e0bffd17 	ldw	r2,-12(fp)
10013b9c:	10800017 	ldw	r2,0(r2)
10013ba0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10013ba4:	e0bffd17 	ldw	r2,-12(fp)
10013ba8:	10800403 	ldbu	r2,16(r2)
10013bac:	10803fcc 	andi	r2,r2,255
10013bb0:	10000426 	beq	r2,zero,10013bc4 <alt_tick+0x54>
10013bb4:	d0aa9617 	ldw	r2,-21928(gp)
10013bb8:	1000021e 	bne	r2,zero,10013bc4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013bbc:	e0bffd17 	ldw	r2,-12(fp)
10013bc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10013bc4:	e0bffd17 	ldw	r2,-12(fp)
10013bc8:	10800217 	ldw	r2,8(r2)
10013bcc:	d0ea9617 	ldw	r3,-21928(gp)
10013bd0:	18801d36 	bltu	r3,r2,10013c48 <alt_tick+0xd8>
10013bd4:	e0bffd17 	ldw	r2,-12(fp)
10013bd8:	10800403 	ldbu	r2,16(r2)
10013bdc:	10803fcc 	andi	r2,r2,255
10013be0:	1000191e 	bne	r2,zero,10013c48 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10013be4:	e0bffd17 	ldw	r2,-12(fp)
10013be8:	10800317 	ldw	r2,12(r2)
10013bec:	e0fffd17 	ldw	r3,-12(fp)
10013bf0:	18c00517 	ldw	r3,20(r3)
10013bf4:	1809883a 	mov	r4,r3
10013bf8:	103ee83a 	callr	r2
10013bfc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013c00:	e0bfff17 	ldw	r2,-4(fp)
10013c04:	1000031e 	bne	r2,zero,10013c14 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013c08:	e13ffd17 	ldw	r4,-12(fp)
10013c0c:	0013ad40 	call	10013ad4 <alt_alarm_stop>
10013c10:	00000d06 	br	10013c48 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013c14:	e0bffd17 	ldw	r2,-12(fp)
10013c18:	10c00217 	ldw	r3,8(r2)
10013c1c:	e0bfff17 	ldw	r2,-4(fp)
10013c20:	1887883a 	add	r3,r3,r2
10013c24:	e0bffd17 	ldw	r2,-12(fp)
10013c28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013c2c:	e0bffd17 	ldw	r2,-12(fp)
10013c30:	10c00217 	ldw	r3,8(r2)
10013c34:	d0aa9617 	ldw	r2,-21928(gp)
10013c38:	1880032e 	bgeu	r3,r2,10013c48 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013c3c:	e0bffd17 	ldw	r2,-12(fp)
10013c40:	00c00044 	movi	r3,1
10013c44:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013c48:	e0bffe17 	ldw	r2,-8(fp)
10013c4c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013c50:	e0fffd17 	ldw	r3,-12(fp)
10013c54:	d0a01104 	addi	r2,gp,-32700
10013c58:	18bfcf1e 	bne	r3,r2,10013b98 <__alt_data_end+0xf8013b98>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013c5c:	0001883a 	nop
}
10013c60:	0001883a 	nop
10013c64:	e037883a 	mov	sp,fp
10013c68:	dfc00117 	ldw	ra,4(sp)
10013c6c:	df000017 	ldw	fp,0(sp)
10013c70:	dec00204 	addi	sp,sp,8
10013c74:	f800283a 	ret

10013c78 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013c78:	deffff04 	addi	sp,sp,-4
10013c7c:	df000015 	stw	fp,0(sp)
10013c80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10013c84:	000170fa 	wrctl	ienable,zero
}
10013c88:	0001883a 	nop
10013c8c:	e037883a 	mov	sp,fp
10013c90:	df000017 	ldw	fp,0(sp)
10013c94:	dec00104 	addi	sp,sp,4
10013c98:	f800283a 	ret

10013c9c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013c9c:	defffa04 	addi	sp,sp,-24
10013ca0:	dfc00515 	stw	ra,20(sp)
10013ca4:	df000415 	stw	fp,16(sp)
10013ca8:	df000404 	addi	fp,sp,16
10013cac:	e13ffe15 	stw	r4,-8(fp)
10013cb0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10013cb4:	e0bfff17 	ldw	r2,-4(fp)
10013cb8:	10800017 	ldw	r2,0(r2)
10013cbc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013cc0:	e13ffe17 	ldw	r4,-8(fp)
10013cc4:	0004d300 	call	10004d30 <strlen>
10013cc8:	10800044 	addi	r2,r2,1
10013ccc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013cd0:	00000d06 	br	10013d08 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10013cd4:	e0bffc17 	ldw	r2,-16(fp)
10013cd8:	10800217 	ldw	r2,8(r2)
10013cdc:	e0fffd17 	ldw	r3,-12(fp)
10013ce0:	180d883a 	mov	r6,r3
10013ce4:	e17ffe17 	ldw	r5,-8(fp)
10013ce8:	1009883a 	mov	r4,r2
10013cec:	0013fe00 	call	10013fe0 <memcmp>
10013cf0:	1000021e 	bne	r2,zero,10013cfc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10013cf4:	e0bffc17 	ldw	r2,-16(fp)
10013cf8:	00000706 	br	10013d18 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013cfc:	e0bffc17 	ldw	r2,-16(fp)
10013d00:	10800017 	ldw	r2,0(r2)
10013d04:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013d08:	e0fffc17 	ldw	r3,-16(fp)
10013d0c:	e0bfff17 	ldw	r2,-4(fp)
10013d10:	18bff01e 	bne	r3,r2,10013cd4 <__alt_data_end+0xf8013cd4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10013d14:	0005883a 	mov	r2,zero
}
10013d18:	e037883a 	mov	sp,fp
10013d1c:	dfc00117 	ldw	ra,4(sp)
10013d20:	df000017 	ldw	fp,0(sp)
10013d24:	dec00204 	addi	sp,sp,8
10013d28:	f800283a 	ret

10013d2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013d2c:	defffb04 	addi	sp,sp,-20
10013d30:	dfc00415 	stw	ra,16(sp)
10013d34:	df000315 	stw	fp,12(sp)
10013d38:	df000304 	addi	fp,sp,12
10013d3c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013d40:	d0a00917 	ldw	r2,-32732(gp)
10013d44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013d48:	00003106 	br	10013e10 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10013d4c:	e0bffd17 	ldw	r2,-12(fp)
10013d50:	10800217 	ldw	r2,8(r2)
10013d54:	1009883a 	mov	r4,r2
10013d58:	0004d300 	call	10004d30 <strlen>
10013d5c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013d60:	e0bffd17 	ldw	r2,-12(fp)
10013d64:	10c00217 	ldw	r3,8(r2)
10013d68:	e0bffe17 	ldw	r2,-8(fp)
10013d6c:	10bfffc4 	addi	r2,r2,-1
10013d70:	1885883a 	add	r2,r3,r2
10013d74:	10800003 	ldbu	r2,0(r2)
10013d78:	10803fcc 	andi	r2,r2,255
10013d7c:	1080201c 	xori	r2,r2,128
10013d80:	10bfe004 	addi	r2,r2,-128
10013d84:	10800bd8 	cmpnei	r2,r2,47
10013d88:	1000031e 	bne	r2,zero,10013d98 <alt_find_file+0x6c>
    {
      len -= 1;
10013d8c:	e0bffe17 	ldw	r2,-8(fp)
10013d90:	10bfffc4 	addi	r2,r2,-1
10013d94:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013d98:	e0bffe17 	ldw	r2,-8(fp)
10013d9c:	e0ffff17 	ldw	r3,-4(fp)
10013da0:	1885883a 	add	r2,r3,r2
10013da4:	10800003 	ldbu	r2,0(r2)
10013da8:	10803fcc 	andi	r2,r2,255
10013dac:	1080201c 	xori	r2,r2,128
10013db0:	10bfe004 	addi	r2,r2,-128
10013db4:	10800be0 	cmpeqi	r2,r2,47
10013db8:	1000081e 	bne	r2,zero,10013ddc <alt_find_file+0xb0>
10013dbc:	e0bffe17 	ldw	r2,-8(fp)
10013dc0:	e0ffff17 	ldw	r3,-4(fp)
10013dc4:	1885883a 	add	r2,r3,r2
10013dc8:	10800003 	ldbu	r2,0(r2)
10013dcc:	10803fcc 	andi	r2,r2,255
10013dd0:	1080201c 	xori	r2,r2,128
10013dd4:	10bfe004 	addi	r2,r2,-128
10013dd8:	10000a1e 	bne	r2,zero,10013e04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013ddc:	e0bffd17 	ldw	r2,-12(fp)
10013de0:	10800217 	ldw	r2,8(r2)
10013de4:	e0fffe17 	ldw	r3,-8(fp)
10013de8:	180d883a 	mov	r6,r3
10013dec:	e17fff17 	ldw	r5,-4(fp)
10013df0:	1009883a 	mov	r4,r2
10013df4:	0013fe00 	call	10013fe0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013df8:	1000021e 	bne	r2,zero,10013e04 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013dfc:	e0bffd17 	ldw	r2,-12(fp)
10013e00:	00000706 	br	10013e20 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10013e04:	e0bffd17 	ldw	r2,-12(fp)
10013e08:	10800017 	ldw	r2,0(r2)
10013e0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013e10:	e0fffd17 	ldw	r3,-12(fp)
10013e14:	d0a00904 	addi	r2,gp,-32732
10013e18:	18bfcc1e 	bne	r3,r2,10013d4c <__alt_data_end+0xf8013d4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10013e1c:	0005883a 	mov	r2,zero
}
10013e20:	e037883a 	mov	sp,fp
10013e24:	dfc00117 	ldw	ra,4(sp)
10013e28:	df000017 	ldw	fp,0(sp)
10013e2c:	dec00204 	addi	sp,sp,8
10013e30:	f800283a 	ret

10013e34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10013e34:	defffa04 	addi	sp,sp,-24
10013e38:	dfc00515 	stw	ra,20(sp)
10013e3c:	df000415 	stw	fp,16(sp)
10013e40:	dc000315 	stw	r16,12(sp)
10013e44:	df000404 	addi	fp,sp,16
10013e48:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10013e4c:	00bffa04 	movi	r2,-24
10013e50:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013e54:	e03ffc15 	stw	zero,-16(fp)
10013e58:	00001d06 	br	10013ed0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10013e5c:	04040074 	movhi	r16,4097
10013e60:	8419c604 	addi	r16,r16,26392
10013e64:	e0bffc17 	ldw	r2,-16(fp)
10013e68:	01400304 	movi	r5,12
10013e6c:	1009883a 	mov	r4,r2
10013e70:	0004bc80 	call	10004bc8 <__mulsi3>
10013e74:	8085883a 	add	r2,r16,r2
10013e78:	10800017 	ldw	r2,0(r2)
10013e7c:	1000111e 	bne	r2,zero,10013ec4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013e80:	04040074 	movhi	r16,4097
10013e84:	8419c604 	addi	r16,r16,26392
10013e88:	e0bffc17 	ldw	r2,-16(fp)
10013e8c:	01400304 	movi	r5,12
10013e90:	1009883a 	mov	r4,r2
10013e94:	0004bc80 	call	10004bc8 <__mulsi3>
10013e98:	8085883a 	add	r2,r16,r2
10013e9c:	e0fffe17 	ldw	r3,-8(fp)
10013ea0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10013ea4:	d0e00d17 	ldw	r3,-32716(gp)
10013ea8:	e0bffc17 	ldw	r2,-16(fp)
10013eac:	1880020e 	bge	r3,r2,10013eb8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10013eb0:	e0bffc17 	ldw	r2,-16(fp)
10013eb4:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
10013eb8:	e0bffc17 	ldw	r2,-16(fp)
10013ebc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10013ec0:	00000606 	br	10013edc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013ec4:	e0bffc17 	ldw	r2,-16(fp)
10013ec8:	10800044 	addi	r2,r2,1
10013ecc:	e0bffc15 	stw	r2,-16(fp)
10013ed0:	e0bffc17 	ldw	r2,-16(fp)
10013ed4:	10800810 	cmplti	r2,r2,32
10013ed8:	103fe01e 	bne	r2,zero,10013e5c <__alt_data_end+0xf8013e5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10013edc:	e0bffd17 	ldw	r2,-12(fp)
}
10013ee0:	e6ffff04 	addi	sp,fp,-4
10013ee4:	dfc00217 	ldw	ra,8(sp)
10013ee8:	df000117 	ldw	fp,4(sp)
10013eec:	dc000017 	ldw	r16,0(sp)
10013ef0:	dec00304 	addi	sp,sp,12
10013ef4:	f800283a 	ret

10013ef8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013ef8:	defffe04 	addi	sp,sp,-8
10013efc:	df000115 	stw	fp,4(sp)
10013f00:	df000104 	addi	fp,sp,4
10013f04:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10013f08:	e0bfff17 	ldw	r2,-4(fp)
10013f0c:	10bffe84 	addi	r2,r2,-6
10013f10:	10c00428 	cmpgeui	r3,r2,16
10013f14:	18001a1e 	bne	r3,zero,10013f80 <alt_exception_cause_generated_bad_addr+0x88>
10013f18:	100690ba 	slli	r3,r2,2
10013f1c:	00840074 	movhi	r2,4097
10013f20:	108fcc04 	addi	r2,r2,16176
10013f24:	1885883a 	add	r2,r3,r2
10013f28:	10800017 	ldw	r2,0(r2)
10013f2c:	1000683a 	jmp	r2
10013f30:	10013f70 	cmpltui	zero,r2,1277
10013f34:	10013f70 	cmpltui	zero,r2,1277
10013f38:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f3c:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f40:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f44:	10013f70 	cmpltui	zero,r2,1277
10013f48:	10013f78 	rdprs	zero,r2,1277
10013f4c:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f50:	10013f70 	cmpltui	zero,r2,1277
10013f54:	10013f70 	cmpltui	zero,r2,1277
10013f58:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f5c:	10013f70 	cmpltui	zero,r2,1277
10013f60:	10013f78 	rdprs	zero,r2,1277
10013f64:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f68:	10013f80 	call	110013f8 <_gp+0xfe1b00>
10013f6c:	10013f70 	cmpltui	zero,r2,1277
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013f70:	00800044 	movi	r2,1
10013f74:	00000306 	br	10013f84 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013f78:	0005883a 	mov	r2,zero
10013f7c:	00000106 	br	10013f84 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013f80:	0005883a 	mov	r2,zero
  }
}
10013f84:	e037883a 	mov	sp,fp
10013f88:	df000017 	ldw	fp,0(sp)
10013f8c:	dec00104 	addi	sp,sp,4
10013f90:	f800283a 	ret

10013f94 <atexit>:
10013f94:	200b883a 	mov	r5,r4
10013f98:	000f883a 	mov	r7,zero
10013f9c:	000d883a 	mov	r6,zero
10013fa0:	0009883a 	mov	r4,zero
10013fa4:	001405c1 	jmpi	1001405c <__register_exitproc>

10013fa8 <exit>:
10013fa8:	defffe04 	addi	sp,sp,-8
10013fac:	000b883a 	mov	r5,zero
10013fb0:	dc000015 	stw	r16,0(sp)
10013fb4:	dfc00115 	stw	ra,4(sp)
10013fb8:	2021883a 	mov	r16,r4
10013fbc:	00141740 	call	10014174 <__call_exitprocs>
10013fc0:	00840074 	movhi	r2,4097
10013fc4:	109e4104 	addi	r2,r2,30980
10013fc8:	11000017 	ldw	r4,0(r2)
10013fcc:	20800f17 	ldw	r2,60(r4)
10013fd0:	10000126 	beq	r2,zero,10013fd8 <exit+0x30>
10013fd4:	103ee83a 	callr	r2
10013fd8:	8009883a 	mov	r4,r16
10013fdc:	00142f40 	call	100142f4 <_exit>

10013fe0 <memcmp>:
10013fe0:	01c000c4 	movi	r7,3
10013fe4:	3980192e 	bgeu	r7,r6,1001404c <memcmp+0x6c>
10013fe8:	2144b03a 	or	r2,r4,r5
10013fec:	11c4703a 	and	r2,r2,r7
10013ff0:	10000f26 	beq	r2,zero,10014030 <memcmp+0x50>
10013ff4:	20800003 	ldbu	r2,0(r4)
10013ff8:	28c00003 	ldbu	r3,0(r5)
10013ffc:	10c0151e 	bne	r2,r3,10014054 <memcmp+0x74>
10014000:	31bfff84 	addi	r6,r6,-2
10014004:	01ffffc4 	movi	r7,-1
10014008:	00000406 	br	1001401c <memcmp+0x3c>
1001400c:	20800003 	ldbu	r2,0(r4)
10014010:	28c00003 	ldbu	r3,0(r5)
10014014:	31bfffc4 	addi	r6,r6,-1
10014018:	10c00e1e 	bne	r2,r3,10014054 <memcmp+0x74>
1001401c:	21000044 	addi	r4,r4,1
10014020:	29400044 	addi	r5,r5,1
10014024:	31fff91e 	bne	r6,r7,1001400c <__alt_data_end+0xf801400c>
10014028:	0005883a 	mov	r2,zero
1001402c:	f800283a 	ret
10014030:	20c00017 	ldw	r3,0(r4)
10014034:	28800017 	ldw	r2,0(r5)
10014038:	18bfee1e 	bne	r3,r2,10013ff4 <__alt_data_end+0xf8013ff4>
1001403c:	31bfff04 	addi	r6,r6,-4
10014040:	21000104 	addi	r4,r4,4
10014044:	29400104 	addi	r5,r5,4
10014048:	39bff936 	bltu	r7,r6,10014030 <__alt_data_end+0xf8014030>
1001404c:	303fe91e 	bne	r6,zero,10013ff4 <__alt_data_end+0xf8013ff4>
10014050:	003ff506 	br	10014028 <__alt_data_end+0xf8014028>
10014054:	10c5c83a 	sub	r2,r2,r3
10014058:	f800283a 	ret

1001405c <__register_exitproc>:
1001405c:	defffa04 	addi	sp,sp,-24
10014060:	dc000315 	stw	r16,12(sp)
10014064:	04040074 	movhi	r16,4097
10014068:	841e4104 	addi	r16,r16,30980
1001406c:	80c00017 	ldw	r3,0(r16)
10014070:	dc400415 	stw	r17,16(sp)
10014074:	dfc00515 	stw	ra,20(sp)
10014078:	18805217 	ldw	r2,328(r3)
1001407c:	2023883a 	mov	r17,r4
10014080:	10003726 	beq	r2,zero,10014160 <__register_exitproc+0x104>
10014084:	10c00117 	ldw	r3,4(r2)
10014088:	010007c4 	movi	r4,31
1001408c:	20c00e16 	blt	r4,r3,100140c8 <__register_exitproc+0x6c>
10014090:	1a000044 	addi	r8,r3,1
10014094:	8800221e 	bne	r17,zero,10014120 <__register_exitproc+0xc4>
10014098:	18c00084 	addi	r3,r3,2
1001409c:	18c7883a 	add	r3,r3,r3
100140a0:	18c7883a 	add	r3,r3,r3
100140a4:	12000115 	stw	r8,4(r2)
100140a8:	10c7883a 	add	r3,r2,r3
100140ac:	19400015 	stw	r5,0(r3)
100140b0:	0005883a 	mov	r2,zero
100140b4:	dfc00517 	ldw	ra,20(sp)
100140b8:	dc400417 	ldw	r17,16(sp)
100140bc:	dc000317 	ldw	r16,12(sp)
100140c0:	dec00604 	addi	sp,sp,24
100140c4:	f800283a 	ret
100140c8:	00800034 	movhi	r2,0
100140cc:	10800004 	addi	r2,r2,0
100140d0:	10002626 	beq	r2,zero,1001416c <__register_exitproc+0x110>
100140d4:	01006404 	movi	r4,400
100140d8:	d9400015 	stw	r5,0(sp)
100140dc:	d9800115 	stw	r6,4(sp)
100140e0:	d9c00215 	stw	r7,8(sp)
100140e4:	00000000 	call	10000000 <__reset>
100140e8:	d9400017 	ldw	r5,0(sp)
100140ec:	d9800117 	ldw	r6,4(sp)
100140f0:	d9c00217 	ldw	r7,8(sp)
100140f4:	10001d26 	beq	r2,zero,1001416c <__register_exitproc+0x110>
100140f8:	81000017 	ldw	r4,0(r16)
100140fc:	10000115 	stw	zero,4(r2)
10014100:	02000044 	movi	r8,1
10014104:	22405217 	ldw	r9,328(r4)
10014108:	0007883a 	mov	r3,zero
1001410c:	12400015 	stw	r9,0(r2)
10014110:	20805215 	stw	r2,328(r4)
10014114:	10006215 	stw	zero,392(r2)
10014118:	10006315 	stw	zero,396(r2)
1001411c:	883fde26 	beq	r17,zero,10014098 <__alt_data_end+0xf8014098>
10014120:	18c9883a 	add	r4,r3,r3
10014124:	2109883a 	add	r4,r4,r4
10014128:	1109883a 	add	r4,r2,r4
1001412c:	21802215 	stw	r6,136(r4)
10014130:	01800044 	movi	r6,1
10014134:	12406217 	ldw	r9,392(r2)
10014138:	30cc983a 	sll	r6,r6,r3
1001413c:	4992b03a 	or	r9,r9,r6
10014140:	12406215 	stw	r9,392(r2)
10014144:	21c04215 	stw	r7,264(r4)
10014148:	01000084 	movi	r4,2
1001414c:	893fd21e 	bne	r17,r4,10014098 <__alt_data_end+0xf8014098>
10014150:	11006317 	ldw	r4,396(r2)
10014154:	218cb03a 	or	r6,r4,r6
10014158:	11806315 	stw	r6,396(r2)
1001415c:	003fce06 	br	10014098 <__alt_data_end+0xf8014098>
10014160:	18805304 	addi	r2,r3,332
10014164:	18805215 	stw	r2,328(r3)
10014168:	003fc606 	br	10014084 <__alt_data_end+0xf8014084>
1001416c:	00bfffc4 	movi	r2,-1
10014170:	003fd006 	br	100140b4 <__alt_data_end+0xf80140b4>

10014174 <__call_exitprocs>:
10014174:	defff504 	addi	sp,sp,-44
10014178:	df000915 	stw	fp,36(sp)
1001417c:	dd400615 	stw	r21,24(sp)
10014180:	dc800315 	stw	r18,12(sp)
10014184:	dfc00a15 	stw	ra,40(sp)
10014188:	ddc00815 	stw	r23,32(sp)
1001418c:	dd800715 	stw	r22,28(sp)
10014190:	dd000515 	stw	r20,20(sp)
10014194:	dcc00415 	stw	r19,16(sp)
10014198:	dc400215 	stw	r17,8(sp)
1001419c:	dc000115 	stw	r16,4(sp)
100141a0:	d9000015 	stw	r4,0(sp)
100141a4:	2839883a 	mov	fp,r5
100141a8:	04800044 	movi	r18,1
100141ac:	057fffc4 	movi	r21,-1
100141b0:	00840074 	movhi	r2,4097
100141b4:	109e4104 	addi	r2,r2,30980
100141b8:	12000017 	ldw	r8,0(r2)
100141bc:	45005217 	ldw	r20,328(r8)
100141c0:	44c05204 	addi	r19,r8,328
100141c4:	a0001c26 	beq	r20,zero,10014238 <__call_exitprocs+0xc4>
100141c8:	a0800117 	ldw	r2,4(r20)
100141cc:	15ffffc4 	addi	r23,r2,-1
100141d0:	b8000d16 	blt	r23,zero,10014208 <__call_exitprocs+0x94>
100141d4:	14000044 	addi	r16,r2,1
100141d8:	8421883a 	add	r16,r16,r16
100141dc:	8421883a 	add	r16,r16,r16
100141e0:	84402004 	addi	r17,r16,128
100141e4:	a463883a 	add	r17,r20,r17
100141e8:	a421883a 	add	r16,r20,r16
100141ec:	e0001e26 	beq	fp,zero,10014268 <__call_exitprocs+0xf4>
100141f0:	80804017 	ldw	r2,256(r16)
100141f4:	e0801c26 	beq	fp,r2,10014268 <__call_exitprocs+0xf4>
100141f8:	bdffffc4 	addi	r23,r23,-1
100141fc:	843fff04 	addi	r16,r16,-4
10014200:	8c7fff04 	addi	r17,r17,-4
10014204:	bd7ff91e 	bne	r23,r21,100141ec <__alt_data_end+0xf80141ec>
10014208:	00800034 	movhi	r2,0
1001420c:	10800004 	addi	r2,r2,0
10014210:	10000926 	beq	r2,zero,10014238 <__call_exitprocs+0xc4>
10014214:	a0800117 	ldw	r2,4(r20)
10014218:	1000301e 	bne	r2,zero,100142dc <__call_exitprocs+0x168>
1001421c:	a0800017 	ldw	r2,0(r20)
10014220:	10003226 	beq	r2,zero,100142ec <__call_exitprocs+0x178>
10014224:	a009883a 	mov	r4,r20
10014228:	98800015 	stw	r2,0(r19)
1001422c:	00000000 	call	10000000 <__reset>
10014230:	9d000017 	ldw	r20,0(r19)
10014234:	a03fe41e 	bne	r20,zero,100141c8 <__alt_data_end+0xf80141c8>
10014238:	dfc00a17 	ldw	ra,40(sp)
1001423c:	df000917 	ldw	fp,36(sp)
10014240:	ddc00817 	ldw	r23,32(sp)
10014244:	dd800717 	ldw	r22,28(sp)
10014248:	dd400617 	ldw	r21,24(sp)
1001424c:	dd000517 	ldw	r20,20(sp)
10014250:	dcc00417 	ldw	r19,16(sp)
10014254:	dc800317 	ldw	r18,12(sp)
10014258:	dc400217 	ldw	r17,8(sp)
1001425c:	dc000117 	ldw	r16,4(sp)
10014260:	dec00b04 	addi	sp,sp,44
10014264:	f800283a 	ret
10014268:	a0800117 	ldw	r2,4(r20)
1001426c:	80c00017 	ldw	r3,0(r16)
10014270:	10bfffc4 	addi	r2,r2,-1
10014274:	15c01426 	beq	r2,r23,100142c8 <__call_exitprocs+0x154>
10014278:	80000015 	stw	zero,0(r16)
1001427c:	183fde26 	beq	r3,zero,100141f8 <__alt_data_end+0xf80141f8>
10014280:	95c8983a 	sll	r4,r18,r23
10014284:	a0806217 	ldw	r2,392(r20)
10014288:	a5800117 	ldw	r22,4(r20)
1001428c:	2084703a 	and	r2,r4,r2
10014290:	10000b26 	beq	r2,zero,100142c0 <__call_exitprocs+0x14c>
10014294:	a0806317 	ldw	r2,396(r20)
10014298:	2088703a 	and	r4,r4,r2
1001429c:	20000c1e 	bne	r4,zero,100142d0 <__call_exitprocs+0x15c>
100142a0:	89400017 	ldw	r5,0(r17)
100142a4:	d9000017 	ldw	r4,0(sp)
100142a8:	183ee83a 	callr	r3
100142ac:	a0800117 	ldw	r2,4(r20)
100142b0:	15bfbf1e 	bne	r2,r22,100141b0 <__alt_data_end+0xf80141b0>
100142b4:	98800017 	ldw	r2,0(r19)
100142b8:	153fcf26 	beq	r2,r20,100141f8 <__alt_data_end+0xf80141f8>
100142bc:	003fbc06 	br	100141b0 <__alt_data_end+0xf80141b0>
100142c0:	183ee83a 	callr	r3
100142c4:	003ff906 	br	100142ac <__alt_data_end+0xf80142ac>
100142c8:	a5c00115 	stw	r23,4(r20)
100142cc:	003feb06 	br	1001427c <__alt_data_end+0xf801427c>
100142d0:	89000017 	ldw	r4,0(r17)
100142d4:	183ee83a 	callr	r3
100142d8:	003ff406 	br	100142ac <__alt_data_end+0xf80142ac>
100142dc:	a0800017 	ldw	r2,0(r20)
100142e0:	a027883a 	mov	r19,r20
100142e4:	1029883a 	mov	r20,r2
100142e8:	003fb606 	br	100141c4 <__alt_data_end+0xf80141c4>
100142ec:	0005883a 	mov	r2,zero
100142f0:	003ffb06 	br	100142e0 <__alt_data_end+0xf80142e0>

100142f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100142f4:	defffd04 	addi	sp,sp,-12
100142f8:	df000215 	stw	fp,8(sp)
100142fc:	df000204 	addi	fp,sp,8
10014300:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10014304:	0001883a 	nop
10014308:	e0bfff17 	ldw	r2,-4(fp)
1001430c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10014310:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10014314:	10000226 	beq	r2,zero,10014320 <_exit+0x2c>
    ALT_SIM_FAIL();
10014318:	002af070 	cmpltui	zero,zero,43969
1001431c:	00000106 	br	10014324 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10014320:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10014324:	003fff06 	br	10014324 <__alt_data_end+0xf8014324>
