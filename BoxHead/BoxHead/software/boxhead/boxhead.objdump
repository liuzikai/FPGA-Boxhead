
boxhead.elf:     file format elf32-littlenios2
boxhead.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014ecc memsz 0x00014ecc flags r-x
    LOAD off    0x00015eec vaddr 0x10014eec paddr 0x100178a4 align 2**12
         filesz 0x000029b8 memsz 0x000029b8 flags rw-
    LOAD off    0x0001925c vaddr 0x1001a25c paddr 0x1001a25c align 2**12
         filesz 0x00000000 memsz 0x0000172c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014058  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c64  10014288  10014288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000029b8  10014eec  100178a4  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000172c  1001a25c  1001a25c  0001925c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000188a4  2**0
                  CONTENTS
  7 .sdram        00000000  1001b988  1001b988  000188a4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000188a4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f78  00000000  00000000  000188c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002459a  00000000  00000000  00019840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000948d  00000000  00000000  0003ddda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be6a  00000000  00000000  00047267  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000026ec  00000000  00000000  000530d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003ff6  00000000  00000000  000557c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  000597b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00071024  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001900  00000000  00000000  00071068  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007661e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00076621  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007662d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007662e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007662f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00076633  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00076637  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007663b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00076646  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00076651  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007665c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000012  00000000  00000000  00076667  2**0
                  CONTENTS, READONLY
 30 .jdi          0000554d  00000000  00000000  00076679  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083402  00000000  00000000  0007bbc6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10014288 l    d  .rodata	00000000 .rodata
10014eec l    d  .rwdata	00000000 .rwdata
1001a25c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001b988 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../boxhead_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 game_logic.c
10014eec l     O .rwdata	00000020 ZOMBIE_WALK_WIDTH
10014f0c l     O .rwdata	00000020 ZOMBIE_WALK_HEIGHT
10014f2c l     O .rwdata	00000020 ZOMBIE_WALK_FLIP_X
10014f4c l     O .rwdata	00000200 ZOMBIE_WALK_OFFSET
1001514c l     O .rwdata	00000020 ZOMBIE_HIT_FRONT_WIDTH
1001516c l     O .rwdata	00000020 ZOMBIE_HIT_FRONT_HEIGHT
1001518c l     O .rwdata	00000020 ZOMBIE_HIT_FRONT_FLIP_X
100151ac l     O .rwdata	00000160 ZOMBIE_HIT_FRONT_OFFSET
1001530c l     O .rwdata	00000020 ZOMBIE_DIE_WIDTH
1001532c l     O .rwdata	00000020 ZOMBIE_DIE_HEIGHT
1001534c l     O .rwdata	00000020 ZOMBIE_DIE_FLIP_X
1001536c l     O .rwdata	00000200 ZOMBIE_DIE_OFFSET
1001556c l     O .rwdata	00000020 ZOMBIE_ATTACK_WIDTH
1001558c l     O .rwdata	00000020 ZOMBIE_ATTACK_HEIGHT
100155ac l     O .rwdata	00000020 ZOMBIE_ATTACK_FLIP_X
100155cc l     O .rwdata	00000180 ZOMBIE_ATTACK_OFFSET
1001574c l     O .rwdata	00000020 PLAYER_WALK_WIDTH
1001576c l     O .rwdata	00000020 PLAYER_WALK_HEIGHT
1001a2b8 l     O .bss	00000020 PLAYER_WALK_FLIP_X
1001578c l     O .rwdata	00000200 PLAYER_WALK_OFFSET
1001598c l     O .rwdata	00000020 PLAYER_HIT_FRONT_WIDTH
100159ac l     O .rwdata	00000020 PLAYER_HIT_FRONT_HEIGHT
100159cc l     O .rwdata	00000020 PLAYER_HIT_FRONT_FLIP_X
100159ec l     O .rwdata	00000160 PLAYER_HIT_FRONT_OFFSET
10015b4c l     O .rwdata	00000020 PLAYER_DIE_WIDTH
10015b6c l     O .rwdata	00000020 PLAYER_DIE_HEIGHT
10015b8c l     O .rwdata	00000020 PLAYER_DIE_FLIP_X
10015bac l     O .rwdata	00000200 PLAYER_DIE_OFFSET
1001a2d8 l     O .bss	000012c0 grid
1001b598 l     O .bss	00000280 zombie
1001b818 l     O .bss	00000024 player_1
1001b83c l     O .bss	00000024 player_2
1001a25c l     O .bss	00000004 zombie_appear_counter
1001a260 l     O .bss	00000004 cur_zombie_counter
10014288 l     O .rodata	00000020 DX
100142a8 l     O .rodata	00000020 DY
100142c8 l     O .rodata	0000002c ZOMBIE_HIT_FRAME_MOVEMENT
100142f4 l     O .rodata	0000002c PLAYER_HIT_FRAME_MOVEMENT
1001a264 l     O .bss	00000004 add_zombie_counter.3199
00000000 l    df *ABS*	00000000 graphic_engine.c
1001a268 l     O .bss	00000004 current_frame.1610
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 keyboard.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 main.c
1001785c l     O .rwdata	00000004 DKEY_KEYCODE_1
10017860 l     O .rwdata	00000004 DKEY_KEYCODE_2
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014c32 l     O .rodata	00000010 zeroes.4404
10007020 l     F .text	000000bc __sbprintf
10014c42 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10007230 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008d88 l     F .text	00000008 __fp_unlock
10008d9c l     F .text	0000019c __sinit.part.1
10008f38 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10015dac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100161f0 l     O .rwdata	00000020 lc_ctype_charset
100161d0 l     O .rwdata	00000020 lc_message_charset
10016210 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014c74 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000c40c l     F .text	000000fc __sprint_r.part.0
10014d98 l     O .rodata	00000010 zeroes.4349
1000da48 l     F .text	000000bc __sbprintf
10014da8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10011a68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10011b7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10011ba8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10011c9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10011d84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10011e70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1001204c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10017894 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100122f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1001242c l     F .text	00000034 alt_dev_reg
100167f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10012708 l     F .text	0000020c altera_avalon_jtag_uart_irq
10012914 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100131f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10013650 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100137b0 l     F .text	0000003c alt_get_errno
100137ec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1001a2b4 g     O .bss	00000004 alt_instruction_exception_handler
1000ba50 g     F .text	00000074 _mprec_log10
1000bb3c g     F .text	0000008c __any_on
1000dffc g     F .text	00000054 _isatty_r
10014c80 g     O .rodata	00000028 __mprec_tinytens
10011f88 g     F .text	0000007c alt_main
10004bbc g     F .text	000000c0 _puts_r
1001b888 g     O .bss	00000100 alt_irq
1000e050 g     F .text	00000060 _lseek_r
100178a4 g       *ABS*	00000000 __flash_rwdata_start
10010440 g     F .text	00000088 .hidden __eqdf2
1001b988 g       *ABS*	00000000 __alt_heap_start
10004b80 g     F .text	0000003c printf
1000e268 g     F .text	0000009c _wcrtomb_r
1001a274 g     O .bss	00000002 usb_ctl_val
1000c2cc g     F .text	0000005c __sseek
100090e8 g     F .text	00000010 __sinit
1000e110 g     F .text	00000140 __swbuf_r
10009bbc g     F .text	0000007c _setlocale_r
10008f40 g     F .text	00000078 __sfmoreglue
10012028 g     F .text	00000024 __malloc_unlock
1000a88c g     F .text	0000015c memmove
100090d0 g     F .text	00000018 _cleanup
1000ab10 g     F .text	000000a8 _Balloc
100104c8 g     F .text	000000dc .hidden __gtdf2
10013bd8 g     F .text	00000024 altera_nios2_gen2_irq_init
100046e4 g     F .text	00000080 usb_print_mem
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000dfa0 g     F .text	0000005c _fstat_r
10004764 g     F .text	00000148 keys_to_direction
1001a298 g     O .bss	00000004 errno
1000c248 g     F .text	00000008 __seofread
1001a2a0 g     O .bss	00000004 alt_argv
1001f858 g       *ABS*	00000000 _gp
100122c0 g     F .text	00000030 usleep
10002778 g     F .text	00000088 io_init
10016678 g     O .rwdata	00000180 alt_fd_list
10013bfc g     F .text	00000090 alt_find_dev
1000a744 g     F .text	00000148 memcpy
10003988 g     F .text	000001d8 usb_get_device_desc2
10008d90 g     F .text	0000000c _cleanup_r
10011880 g     F .text	000000dc .hidden __floatsidf
10013734 g     F .text	0000007c alt_io_redirect
1001a276 g     O .bss	00000001 data_size
100105a4 g     F .text	000000f4 .hidden __ltdf2
10014288 g       *ABS*	00000000 __DTOR_END__
10004c7c g     F .text	00000014 puts
10013e58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000c12c g     F .text	00000074 __fpclassifyd
1000b9ac g     F .text	000000a4 __ratio
1000da2c g     F .text	0000001c __vfiprintf_internal
10012b0c g     F .text	0000021c altera_avalon_jtag_uart_read
10004b50 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000f108 g     F .text	00000064 .hidden __udivsi3
100028d8 g     F .text	00000b00 keyboard_init
10011cd8 g     F .text	000000ac isatty
10014cd0 g     O .rodata	000000c8 __mprec_tens
10009c38 g     F .text	0000000c __locale_charset
1001a294 g     O .bss	00000004 __malloc_top_pad
1001786c g     O .rwdata	00000004 __mb_cur_max
10009c68 g     F .text	0000000c _localeconv_r
100006e8 g     F .text	0000027c try_move_zombie
1000af44 g     F .text	0000003c __i2b
1000956c g     F .text	000004c8 __sfvwrite_r
1001a278 g     O .bss	00000002 intStat
1000c1a0 g     F .text	00000054 _sbrk_r
1000368c g     F .text	000000b4 usb_soft_reset
1000e0b0 g     F .text	00000060 _read_r
1001788c g     O .rwdata	00000004 alt_max_fd
1000dc94 g     F .text	000000f0 _fclose_r
10008d58 g     F .text	00000030 fflush
1001a290 g     O .bss	00000004 __malloc_max_sbrked_mem
10004664 g     F .text	00000080 usb_get_retry_cnt
1000f1c4 g     F .text	000008ac .hidden __adddf3
1000b754 g     F .text	0000010c __b2d
1000ea4c g     F .text	000005c4 .hidden __umoddi3
10011eac g     F .text	000000dc lseek
10000ec4 g     F .text	00000248 try_move_player
10017864 g     O .rwdata	00000004 _global_impure_ptr
1000bbc8 g     F .text	00000564 _realloc_r
1001b988 g       *ABS*	00000000 __bss_end
10013560 g     F .text	000000f0 alt_iic_isr_register
10013ad0 g     F .text	00000108 alt_tick
1000e450 g     F .text	000005fc .hidden __udivdi3
1000defc g     F .text	00000024 _fputwc_r
10014ca8 g     O .rodata	00000028 __mprec_bigtens
1000ad28 g     F .text	00000104 __s2b
1001195c g     F .text	000000a8 .hidden __floatunsidf
1000b494 g     F .text	00000060 __mcmp
100004d4 g     F .text	00000214 check_no_interference
10009108 g     F .text	00000018 __fp_lock_all
10013514 g     F .text	0000004c alt_ic_irq_enabled
10013a34 g     F .text	0000009c alt_alarm_stop
1001a2a8 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10016650 g     O .rwdata	00000028 alt_dev_null
100019d4 g     F .text	000005cc draw_zombie
100131d0 g     F .text	00000020 alt_dcache_flush_all
1000ae2c g     F .text	00000068 __hi0bits
10011800 g     F .text	00000080 .hidden __fixdfsi
100178a4 g       *ABS*	00000000 __ram_rwdata_end
10017884 g     O .rwdata	00000008 alt_dev_list
1001232c g     F .text	00000100 write
10017858 g     O .rwdata	00000004 ENGINE_REGS
10014eec g       *ABS*	00000000 __ram_rodata_end
10011be4 g     F .text	000000b8 fstat
10002800 g     F .text	00000070 io_write
100105a4 g     F .text	000000f4 .hidden __ledf2
1000b20c g     F .text	00000140 __pow5mult
1000c520 g     F .text	0000150c ___vfiprintf_internal_r
1001a288 g     O .bss	00000004 __nlocale_changed
1000f16c g     F .text	00000058 .hidden __umodsi3
1001b988 g       *ABS*	00000000 end
1001a26c g     O .bss	00000002 ctl_reg
10012648 g     F .text	000000c0 altera_avalon_jtag_uart_init
100018b4 g     F .text	00000120 try_add_zombie
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10014288 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10011a04 g     F .text	00000064 .hidden __clzsi2
10012d28 g     F .text	00000224 altera_avalon_jtag_uart_write
1000270c g     F .text	0000006c wait_for_next_frame
100090f8 g     F .text	00000004 __sfp_lock_acquire
1000a660 g     F .text	000000e4 memchr
10004d28 g     F .text	000022dc ___vfprintf_internal_r
1000925c g     F .text	00000310 _free_r
10009c44 g     F .text	00000010 __locale_mb_cur_max
100140d4 g     F .text	00000180 __call_exitprocs
1001a284 g     O .bss	00000004 __mlocale_changed
10017870 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10003558 g     F .text	00000098 keyboard_hot_plugged
1001a2ac g     O .bss	00000004 _alt_tick_rate
1000b34c g     F .text	00000148 __lshift
1001a2b0 g     O .bss	00000004 _alt_nticks
10012088 g     F .text	00000104 read
10012498 g     F .text	0000004c alt_sys_init
10013fbc g     F .text	00000118 __register_exitproc
1000af80 g     F .text	0000028c __multiply
100129b4 g     F .text	00000068 altera_avalon_jtag_uart_close
10004b28 g     F .text	00000028 .hidden __mulsi3
10014eec g       *ABS*	00000000 __ram_rwdata_start
10014288 g       *ABS*	00000000 __ram_rodata_start
1001b860 g     O .bss	00000028 __malloc_current_mallinfo
1000b860 g     F .text	0000014c __d2b
100124e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10013d94 g     F .text	000000c4 alt_get_fd
10013078 g     F .text	00000158 alt_busy_sleep
1000db64 g     F .text	00000054 _close_r
10013f40 g     F .text	0000007c memcmp
100125a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001b988 g       *ABS*	00000000 __alt_stack_base
100125f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004158 g     F .text	00000148 usb_get_hid_desc
100070dc g     F .text	00000154 __swsetup_r
1000fa70 g     F .text	000009d0 .hidden __divdf3
10008fb8 g     F .text	00000118 __sfp
1000bac4 g     F .text	00000078 __copybits
10016248 g     O .rwdata	00000408 __malloc_av_
10009104 g     F .text	00000004 __sinit_lock_release
10010698 g     F .text	0000086c .hidden __muldf3
1000c1f4 g     F .text	00000054 __sread
10013c8c g     F .text	00000108 alt_find_file
1001322c g     F .text	000000a4 alt_dev_llist_insert
10012004 g     F .text	00000024 __malloc_lock
10012210 g     F .text	000000b0 sbrk
10008cfc g     F .text	0000005c _fflush_r
1000dbb8 g     F .text	000000dc _calloc_r
1001a27a g     O .bss	00000001 hot_plug_count
1001a25c g       *ABS*	00000000 __bss_start
10000964 g     F .text	00000560 update_zombie
1000a9e8 g     F .text	00000128 memset
100048ac g     F .text	0000027c main
1001a2a4 g     O .bss	00000004 alt_envp
1001a28c g     O .bss	00000004 __malloc_max_total_mem
10012544 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000e250 g     F .text	00000018 __swbuf
1000c328 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000dd84 g     F .text	00000014 fclose
10007458 g     F .text	00001688 _dtoa_r
10009e54 g     F .text	0000080c _malloc_r
1000e3c4 g     F .text	00000030 __ascii_wctomb
10017890 g     O .rwdata	00000004 alt_errno
10003b60 g     F .text	00000190 usb_get_config_desc1
10009a34 g     F .text	000000c4 _fwalk
1000f010 g     F .text	00000084 .hidden __divsi3
10009138 g     F .text	00000124 _malloc_trim_r
10014288 g       *ABS*	00000000 __CTOR_END__
100033d8 g     F .text	00000180 keyboard_fetch
1000c330 g     F .text	000000dc strcmp
100042a0 g     F .text	00000340 usb_get_report_desc
10014288 g       *ABS*	00000000 __flash_rodata_start
10014288 g       *ABS*	00000000 __DTOR_LIST__
10002380 g     F .text	00000240 refresh
10010440 g     F .text	00000088 .hidden __nedf2
10012460 g     F .text	00000038 alt_irq_init
1001218c g     F .text	00000084 alt_release_fd
10014db8 g     O .rodata	00000100 .hidden __clz_tab
1001a280 g     O .bss	00000004 _PathLocale
10013ef4 g     F .text	00000014 atexit
1000db04 g     F .text	00000060 _write_r
100025c0 g     F .text	00000044 graphic_engine_reset
10009c74 g     F .text	00000018 setlocale
10017868 g     O .rwdata	00000004 _impure_ptr
100045e0 g     F .text	00000084 usb_wait_td_list_done
1001a29c g     O .bss	00000004 alt_argc
10008ae0 g     F .text	0000021c __sflush_r
10013330 g     F .text	00000060 _do_dtors
10009c60 g     F .text	00000008 __locale_cjk_lang
10003cf0 g     F .text	00000268 usb_get_config_desc2
10002870 g     F .text	00000068 io_read
10001fa0 g     F .text	000003e0 draw_player
10000020 g       .exceptions	00000000 alt_irq_entry
1000b6f0 g     F .text	00000064 __ulp
10009120 g     F .text	00000018 __fp_unlock_all
1001787c g     O .rwdata	00000008 alt_fs_list
10004058 g     F .text	00000100 usb_class_request
10000020 g       *ABS*	00000000 __ram_exceptions_start
10009c8c g     F .text	0000000c localeconv
100133b0 g     F .text	00000050 alt_ic_isr_register
1000110c g     F .text	000004e0 update_player
100178a4 g       *ABS*	00000000 _edata
1001b988 g       *ABS*	00000000 _end
100015ec g     F .text	000002c8 init_game
1000dd98 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10012a1c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1001a27c g     O .bss	00000002 code
1001a272 g     O .bss	00000001 fetch_toggle
10013488 g     F .text	0000008c alt_ic_irq_disable
1000c250 g     F .text	0000007c __swrite
10017874 g     O .rwdata	00000004 __malloc_trim_threshold
10003840 g     F .text	00000148 usb_get_device_desc1
10009c54 g     F .text	0000000c __locale_msgcharset
1001a270 g     O .bss	00000002 fs_device
10013f08 g     F .text	00000038 exit
10009af8 g     F .text	000000c4 _fwalk_reent
1000b4f4 g     F .text	000001fc __mdiff
1000f094 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100090fc g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100035f0 g     F .text	00000058 usb_write
10003740 g     F .text	00000100 usb_set_address
10002604 g     F .text	00000108 draw
10014254 g     F .text	00000034 _exit
10012f4c g     F .text	0000012c alt_alarm_start
1000026c g     F .text	00000268 calc_zombie_direction
10009c98 g     F .text	000001bc __smakebuf_r
10004c90 g     F .text	00000098 strlen
100138d8 g     F .text	0000015c open
100104c8 g     F .text	000000dc .hidden __gedf2
10003f58 g     F .text	00000100 usb_set_config
10017878 g     O .rwdata	00000004 __wctomb
1000c508 g     F .text	00000018 __sprint_r
10013390 g     F .text	00000020 alt_icache_flush_all
10017898 g     O .rwdata	00000004 alt_priority_mask
10013400 g     F .text	00000088 alt_ic_irq_enable
10007004 g     F .text	0000001c __vfprintf_internal
1000e3f4 g     F .text	0000005c _wctomb_r
10003648 g     F .text	00000044 usb_read
10010f04 g     F .text	000008fc .hidden __subdf3
1000ae94 g     F .text	000000b0 __lo0bits
1001789c g     O .rwdata	00000008 alt_alarm_list
100132d0 g     F .text	00000060 _do_ctors
1001a26e g     O .bss	00000002 no_device
1000e304 g     F .text	000000c0 wcrtomb
10011aa4 g     F .text	000000d8 close
10011dec g     F .text	00000084 alt_load
1000df20 g     F .text	00000080 fputwc
10009100 g     F .text	00000004 __sinit_lock_acquire
1000abe0 g     F .text	00000148 __multadd
1000abb8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400b4 	movhi	r2,4098
10000140:	10ae2204 	addi	r2,r2,-18296
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400b4 	movhi	r2,4098
10000158:	10ae2204 	addi	r2,r2,-18296
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0aa9717 	ldw	r2,-21924(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0aa9717 	ldw	r2,-21924(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6be1614 	ori	gp,gp,63576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10a89714 	ori	r2,r2,41564

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18ee6214 	ori	r3,r3,47496

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0011dec0 	call	10011dec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0011f880 	call	10011f88 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <calc_zombie_direction>:
};
static const int PLAYER_HIT_FRAME_MOVEMENT[PLAYER_HIT_FRONT_FRAME_COUNT] = {
        8, 6, 4, 4, 3, 3, 2, 2, 1, 1, 1
};

int calc_zombie_direction(zombie_t *z) {
1000026c:	defff404 	addi	sp,sp,-48
10000270:	dfc00b15 	stw	ra,44(sp)
10000274:	df000a15 	stw	fp,40(sp)
10000278:	dc400915 	stw	r17,36(sp)
1000027c:	dc000815 	stw	r16,32(sp)
10000280:	df000a04 	addi	fp,sp,40
10000284:	e13ffd15 	stw	r4,-12(fp)
    int delta_x, delta_y;
    int delta_x1, delta_y1, delta_x2, delta_y2;
    int closer;

    if (player_1.enable == 0) {
10000288:	008400b4 	movhi	r2,4098
1000028c:	10ae0604 	addi	r2,r2,-18408
10000290:	10800417 	ldw	r2,16(r2)
10000294:	1000031e 	bne	r2,zero,100002a4 <calc_zombie_direction+0x38>
        closer = 2;
10000298:	00800084 	movi	r2,2
1000029c:	e0bffc15 	stw	r2,-16(fp)
100002a0:	00005506 	br	100003f8 <calc_zombie_direction+0x18c>
    } else if (player_2.enable == 0) {
100002a4:	008400b4 	movhi	r2,4098
100002a8:	10ae0f04 	addi	r2,r2,-18372
100002ac:	10800417 	ldw	r2,16(r2)
100002b0:	1000031e 	bne	r2,zero,100002c0 <calc_zombie_direction+0x54>
        closer = 1;
100002b4:	00800044 	movi	r2,1
100002b8:	e0bffc15 	stw	r2,-16(fp)
100002bc:	00004e06 	br	100003f8 <calc_zombie_direction+0x18c>
    } else {
        delta_x1 = TO_GRID(player_1.x) - TO_GRID(z->x);
100002c0:	008400b4 	movhi	r2,4098
100002c4:	10ae0604 	addi	r2,r2,-18408
100002c8:	10800017 	ldw	r2,0(r2)
100002cc:	1000010e 	bge	r2,zero,100002d4 <calc_zombie_direction+0x68>
100002d0:	108003c4 	addi	r2,r2,15
100002d4:	1005d13a 	srai	r2,r2,4
100002d8:	1007883a 	mov	r3,r2
100002dc:	e0bffd17 	ldw	r2,-12(fp)
100002e0:	10800117 	ldw	r2,4(r2)
100002e4:	1000010e 	bge	r2,zero,100002ec <calc_zombie_direction+0x80>
100002e8:	108003c4 	addi	r2,r2,15
100002ec:	1005d13a 	srai	r2,r2,4
100002f0:	1885c83a 	sub	r2,r3,r2
100002f4:	e0bff815 	stw	r2,-32(fp)
        delta_y1 = TO_GRID(player_1.y) - TO_GRID(z->y);
100002f8:	008400b4 	movhi	r2,4098
100002fc:	10ae0604 	addi	r2,r2,-18408
10000300:	10800117 	ldw	r2,4(r2)
10000304:	1000010e 	bge	r2,zero,1000030c <calc_zombie_direction+0xa0>
10000308:	108003c4 	addi	r2,r2,15
1000030c:	1005d13a 	srai	r2,r2,4
10000310:	1007883a 	mov	r3,r2
10000314:	e0bffd17 	ldw	r2,-12(fp)
10000318:	10800217 	ldw	r2,8(r2)
1000031c:	1000010e 	bge	r2,zero,10000324 <calc_zombie_direction+0xb8>
10000320:	108003c4 	addi	r2,r2,15
10000324:	1005d13a 	srai	r2,r2,4
10000328:	1885c83a 	sub	r2,r3,r2
1000032c:	e0bff915 	stw	r2,-28(fp)
        delta_x2 = TO_GRID(player_2.x) - TO_GRID(z->x);
10000330:	008400b4 	movhi	r2,4098
10000334:	10ae0f04 	addi	r2,r2,-18372
10000338:	10800017 	ldw	r2,0(r2)
1000033c:	1000010e 	bge	r2,zero,10000344 <calc_zombie_direction+0xd8>
10000340:	108003c4 	addi	r2,r2,15
10000344:	1005d13a 	srai	r2,r2,4
10000348:	1007883a 	mov	r3,r2
1000034c:	e0bffd17 	ldw	r2,-12(fp)
10000350:	10800117 	ldw	r2,4(r2)
10000354:	1000010e 	bge	r2,zero,1000035c <calc_zombie_direction+0xf0>
10000358:	108003c4 	addi	r2,r2,15
1000035c:	1005d13a 	srai	r2,r2,4
10000360:	1885c83a 	sub	r2,r3,r2
10000364:	e0bffa15 	stw	r2,-24(fp)
        delta_y2 = TO_GRID(player_2.y) - TO_GRID(z->y);
10000368:	008400b4 	movhi	r2,4098
1000036c:	10ae0f04 	addi	r2,r2,-18372
10000370:	10800117 	ldw	r2,4(r2)
10000374:	1000010e 	bge	r2,zero,1000037c <calc_zombie_direction+0x110>
10000378:	108003c4 	addi	r2,r2,15
1000037c:	1005d13a 	srai	r2,r2,4
10000380:	1007883a 	mov	r3,r2
10000384:	e0bffd17 	ldw	r2,-12(fp)
10000388:	10800217 	ldw	r2,8(r2)
1000038c:	1000010e 	bge	r2,zero,10000394 <calc_zombie_direction+0x128>
10000390:	108003c4 	addi	r2,r2,15
10000394:	1005d13a 	srai	r2,r2,4
10000398:	1885c83a 	sub	r2,r3,r2
1000039c:	e0bffb15 	stw	r2,-20(fp)
        if (delta_x1 * delta_x1 + delta_y1 * delta_y1 < delta_x2 * delta_x2 + delta_y2 * delta_y2) {
100003a0:	e17ff817 	ldw	r5,-32(fp)
100003a4:	e13ff817 	ldw	r4,-32(fp)
100003a8:	0004b280 	call	10004b28 <__mulsi3>
100003ac:	1021883a 	mov	r16,r2
100003b0:	e17ff917 	ldw	r5,-28(fp)
100003b4:	e13ff917 	ldw	r4,-28(fp)
100003b8:	0004b280 	call	10004b28 <__mulsi3>
100003bc:	80a1883a 	add	r16,r16,r2
100003c0:	e17ffa17 	ldw	r5,-24(fp)
100003c4:	e13ffa17 	ldw	r4,-24(fp)
100003c8:	0004b280 	call	10004b28 <__mulsi3>
100003cc:	1023883a 	mov	r17,r2
100003d0:	e17ffb17 	ldw	r5,-20(fp)
100003d4:	e13ffb17 	ldw	r4,-20(fp)
100003d8:	0004b280 	call	10004b28 <__mulsi3>
100003dc:	8885883a 	add	r2,r17,r2
100003e0:	8080030e 	bge	r16,r2,100003f0 <calc_zombie_direction+0x184>
            closer = 1;
100003e4:	00800044 	movi	r2,1
100003e8:	e0bffc15 	stw	r2,-16(fp)
100003ec:	00000206 	br	100003f8 <calc_zombie_direction+0x18c>
        } else {
            closer = 2;
100003f0:	00800084 	movi	r2,2
100003f4:	e0bffc15 	stw	r2,-16(fp)
        }
    }

    if (closer == 1) {
100003f8:	e0bffc17 	ldw	r2,-16(fp)
100003fc:	10800058 	cmpnei	r2,r2,1
10000400:	1000051e 	bne	r2,zero,10000418 <calc_zombie_direction+0x1ac>
        delta_x = delta_x1;
10000404:	e0bff817 	ldw	r2,-32(fp)
10000408:	e0bff615 	stw	r2,-40(fp)
        delta_y = delta_y1;
1000040c:	e0bff917 	ldw	r2,-28(fp)
10000410:	e0bff715 	stw	r2,-36(fp)
10000414:	00000406 	br	10000428 <calc_zombie_direction+0x1bc>
    } else {
        delta_x = delta_x2;
10000418:	e0bffa17 	ldw	r2,-24(fp)
1000041c:	e0bff615 	stw	r2,-40(fp)
        delta_y = delta_y2;
10000420:	e0bffb17 	ldw	r2,-20(fp)
10000424:	e0bff715 	stw	r2,-36(fp)
    }

    if (delta_x > 0) {
10000428:	e0bff617 	ldw	r2,-40(fp)
1000042c:	00800a0e 	bge	zero,r2,10000458 <calc_zombie_direction+0x1ec>
        if (delta_y > 0) return 3;
10000430:	e0bff717 	ldw	r2,-36(fp)
10000434:	0080020e 	bge	zero,r2,10000440 <calc_zombie_direction+0x1d4>
10000438:	008000c4 	movi	r2,3
1000043c:	00001e06 	br	100004b8 <calc_zombie_direction+0x24c>
        else if (delta_y < 0) return 1;
10000440:	e0bff717 	ldw	r2,-36(fp)
10000444:	1000020e 	bge	r2,zero,10000450 <calc_zombie_direction+0x1e4>
10000448:	00800044 	movi	r2,1
1000044c:	00001a06 	br	100004b8 <calc_zombie_direction+0x24c>
        else return 2;
10000450:	00800084 	movi	r2,2
10000454:	00001806 	br	100004b8 <calc_zombie_direction+0x24c>
    } else if (delta_x < 0) {
10000458:	e0bff617 	ldw	r2,-40(fp)
1000045c:	10000a0e 	bge	r2,zero,10000488 <calc_zombie_direction+0x21c>
        if (delta_y > 0) return 5;
10000460:	e0bff717 	ldw	r2,-36(fp)
10000464:	0080020e 	bge	zero,r2,10000470 <calc_zombie_direction+0x204>
10000468:	00800144 	movi	r2,5
1000046c:	00001206 	br	100004b8 <calc_zombie_direction+0x24c>
        else if (delta_y < 0) return 7;
10000470:	e0bff717 	ldw	r2,-36(fp)
10000474:	1000020e 	bge	r2,zero,10000480 <calc_zombie_direction+0x214>
10000478:	008001c4 	movi	r2,7
1000047c:	00000e06 	br	100004b8 <calc_zombie_direction+0x24c>
        else return 6;
10000480:	00800184 	movi	r2,6
10000484:	00000c06 	br	100004b8 <calc_zombie_direction+0x24c>
    } else {
        if (delta_y > 0) return 4;
10000488:	e0bff717 	ldw	r2,-36(fp)
1000048c:	0080020e 	bge	zero,r2,10000498 <calc_zombie_direction+0x22c>
10000490:	00800104 	movi	r2,4
10000494:	00000806 	br	100004b8 <calc_zombie_direction+0x24c>
        else if (delta_y < 0) return 0;
10000498:	e0bff717 	ldw	r2,-36(fp)
1000049c:	1000020e 	bge	r2,zero,100004a8 <calc_zombie_direction+0x23c>
100004a0:	0005883a 	mov	r2,zero
100004a4:	00000406 	br	100004b8 <calc_zombie_direction+0x24c>
        else {
            printf("CENTERED DIRECTION!\n");
100004a8:	01040074 	movhi	r4,4097
100004ac:	2110c804 	addi	r4,r4,17184
100004b0:	0004c7c0 	call	10004c7c <puts>
            return 0;
100004b4:	0005883a 	mov	r2,zero
        }
    }
}
100004b8:	e6fffe04 	addi	sp,fp,-8
100004bc:	dfc00317 	ldw	ra,12(sp)
100004c0:	df000217 	ldw	fp,8(sp)
100004c4:	dc400117 	ldw	r17,4(sp)
100004c8:	dc000017 	ldw	r16,0(sp)
100004cc:	dec00404 	addi	sp,sp,16
100004d0:	f800283a 	ret

100004d4 <check_no_interference>:

int check_no_interference(int new_x, int new_y, int grid_x, int grid_y) {
100004d4:	defff304 	addi	sp,sp,-52
100004d8:	dfc00c15 	stw	ra,48(sp)
100004dc:	df000b15 	stw	fp,44(sp)
100004e0:	dc000a15 	stw	r16,40(sp)
100004e4:	df000b04 	addi	fp,sp,44
100004e8:	e13ffb15 	stw	r4,-20(fp)
100004ec:	e17ffc15 	stw	r5,-16(fp)
100004f0:	e1bffd15 	stw	r6,-12(fp)
100004f4:	e1fffe15 	stw	r7,-8(fp)
    int gx, gy;
    int target_x, target_y;
    int id;

    for (int d = 0; d < 8; d++) {
100004f8:	e03ff715 	stw	zero,-36(fp)
100004fc:	00007006 	br	100006c0 <check_no_interference+0x1ec>
        gx = grid_x + DX[d];
10000500:	00840074 	movhi	r2,4097
10000504:	1090a204 	addi	r2,r2,17032
10000508:	e0fff717 	ldw	r3,-36(fp)
1000050c:	18c7883a 	add	r3,r3,r3
10000510:	18c7883a 	add	r3,r3,r3
10000514:	10c5883a 	add	r2,r2,r3
10000518:	10c00017 	ldw	r3,0(r2)
1000051c:	e0bffd17 	ldw	r2,-12(fp)
10000520:	1885883a 	add	r2,r3,r2
10000524:	e0bff815 	stw	r2,-32(fp)
        gy = grid_y + DY[d];
10000528:	00840074 	movhi	r2,4097
1000052c:	1090aa04 	addi	r2,r2,17064
10000530:	e0fff717 	ldw	r3,-36(fp)
10000534:	18c7883a 	add	r3,r3,r3
10000538:	18c7883a 	add	r3,r3,r3
1000053c:	10c5883a 	add	r2,r2,r3
10000540:	10c00017 	ldw	r3,0(r2)
10000544:	e0bffe17 	ldw	r2,-8(fp)
10000548:	1885883a 	add	r2,r3,r2
1000054c:	e0bff915 	stw	r2,-28(fp)
        if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
10000550:	e0bff817 	ldw	r2,-32(fp)
10000554:	10005716 	blt	r2,zero,100006b4 <check_no_interference+0x1e0>
10000558:	e0bff817 	ldw	r2,-32(fp)
1000055c:	10800a08 	cmpgei	r2,r2,40
10000560:	1000541e 	bne	r2,zero,100006b4 <check_no_interference+0x1e0>
10000564:	e0bff917 	ldw	r2,-28(fp)
10000568:	10005216 	blt	r2,zero,100006b4 <check_no_interference+0x1e0>
1000056c:	e0bff917 	ldw	r2,-28(fp)
10000570:	10800788 	cmpgei	r2,r2,30
10000574:	10004f1e 	bne	r2,zero,100006b4 <check_no_interference+0x1e0>
            id = grid[gx][gy];
10000578:	040400b4 	movhi	r16,4098
1000057c:	8428b604 	addi	r16,r16,-23848
10000580:	e0bff817 	ldw	r2,-32(fp)
10000584:	01400784 	movi	r5,30
10000588:	1009883a 	mov	r4,r2
1000058c:	0004b280 	call	10004b28 <__mulsi3>
10000590:	1007883a 	mov	r3,r2
10000594:	e0bff917 	ldw	r2,-28(fp)
10000598:	1885883a 	add	r2,r3,r2
1000059c:	1085883a 	add	r2,r2,r2
100005a0:	1085883a 	add	r2,r2,r2
100005a4:	8085883a 	add	r2,r16,r2
100005a8:	10800017 	ldw	r2,0(r2)
100005ac:	e0bffa15 	stw	r2,-24(fp)
            if (id == INDEX_NOTHING) continue;
100005b0:	e0bffa17 	ldw	r2,-24(fp)
100005b4:	10803fd8 	cmpnei	r2,r2,255
100005b8:	10003d26 	beq	r2,zero,100006b0 <check_no_interference+0x1dc>
            else if (id > 0) {
100005bc:	e0bffa17 	ldw	r2,-24(fp)
100005c0:	0080110e 	bge	zero,r2,10000608 <check_no_interference+0x134>
                target_x = zombie[id].x;
100005c4:	008400b4 	movhi	r2,4098
100005c8:	10ad6604 	addi	r2,r2,-19048
100005cc:	e0fffa17 	ldw	r3,-24(fp)
100005d0:	1806917a 	slli	r3,r3,5
100005d4:	10c5883a 	add	r2,r2,r3
100005d8:	10800104 	addi	r2,r2,4
100005dc:	10800017 	ldw	r2,0(r2)
100005e0:	e0bff515 	stw	r2,-44(fp)
                target_y = zombie[id].y;
100005e4:	008400b4 	movhi	r2,4098
100005e8:	10ad6604 	addi	r2,r2,-19048
100005ec:	e0fffa17 	ldw	r3,-24(fp)
100005f0:	1806917a 	slli	r3,r3,5
100005f4:	10c5883a 	add	r2,r2,r3
100005f8:	10800204 	addi	r2,r2,8
100005fc:	10800017 	ldw	r2,0(r2)
10000600:	e0bff615 	stw	r2,-40(fp)
10000604:	00001406 	br	10000658 <check_no_interference+0x184>
            } else if (id == INDEX_PLAYER_1) {
10000608:	e0bffa17 	ldw	r2,-24(fp)
1000060c:	10bfffd8 	cmpnei	r2,r2,-1
10000610:	1000091e 	bne	r2,zero,10000638 <check_no_interference+0x164>
                target_x = player_1.x;
10000614:	008400b4 	movhi	r2,4098
10000618:	10ae0604 	addi	r2,r2,-18408
1000061c:	10800017 	ldw	r2,0(r2)
10000620:	e0bff515 	stw	r2,-44(fp)
                target_y = player_1.y;
10000624:	008400b4 	movhi	r2,4098
10000628:	10ae0604 	addi	r2,r2,-18408
1000062c:	10800117 	ldw	r2,4(r2)
10000630:	e0bff615 	stw	r2,-40(fp)
10000634:	00000806 	br	10000658 <check_no_interference+0x184>
            } else {
                target_x = player_2.x;
10000638:	008400b4 	movhi	r2,4098
1000063c:	10ae0f04 	addi	r2,r2,-18372
10000640:	10800017 	ldw	r2,0(r2)
10000644:	e0bff515 	stw	r2,-44(fp)
                target_y = player_2.y;
10000648:	008400b4 	movhi	r2,4098
1000064c:	10ae0f04 	addi	r2,r2,-18372
10000650:	10800117 	ldw	r2,4(r2)
10000654:	e0bff615 	stw	r2,-40(fp)
            }
            if (abs(target_x - new_x) < 20 || abs(target_y - new_y) < 20) return 1;
10000658:	e0fff517 	ldw	r3,-44(fp)
1000065c:	e0bffb17 	ldw	r2,-20(fp)
10000660:	1885c83a 	sub	r2,r3,r2
10000664:	10bffb50 	cmplti	r2,r2,-19
10000668:	1000051e 	bne	r2,zero,10000680 <check_no_interference+0x1ac>
1000066c:	e0fff517 	ldw	r3,-44(fp)
10000670:	e0bffb17 	ldw	r2,-20(fp)
10000674:	1885c83a 	sub	r2,r3,r2
10000678:	10800510 	cmplti	r2,r2,20
1000067c:	10000a1e 	bne	r2,zero,100006a8 <check_no_interference+0x1d4>
10000680:	e0fff617 	ldw	r3,-40(fp)
10000684:	e0bffc17 	ldw	r2,-16(fp)
10000688:	1885c83a 	sub	r2,r3,r2
1000068c:	10bffb50 	cmplti	r2,r2,-19
10000690:	1000081e 	bne	r2,zero,100006b4 <check_no_interference+0x1e0>
10000694:	e0fff617 	ldw	r3,-40(fp)
10000698:	e0bffc17 	ldw	r2,-16(fp)
1000069c:	1885c83a 	sub	r2,r3,r2
100006a0:	10800508 	cmpgei	r2,r2,20
100006a4:	1000031e 	bne	r2,zero,100006b4 <check_no_interference+0x1e0>
100006a8:	00800044 	movi	r2,1
100006ac:	00000806 	br	100006d0 <check_no_interference+0x1fc>
    for (int d = 0; d < 8; d++) {
        gx = grid_x + DX[d];
        gy = grid_y + DY[d];
        if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
            id = grid[gx][gy];
            if (id == INDEX_NOTHING) continue;
100006b0:	0001883a 	nop
int check_no_interference(int new_x, int new_y, int grid_x, int grid_y) {
    int gx, gy;
    int target_x, target_y;
    int id;

    for (int d = 0; d < 8; d++) {
100006b4:	e0bff717 	ldw	r2,-36(fp)
100006b8:	10800044 	addi	r2,r2,1
100006bc:	e0bff715 	stw	r2,-36(fp)
100006c0:	e0bff717 	ldw	r2,-36(fp)
100006c4:	10800210 	cmplti	r2,r2,8
100006c8:	103f8d1e 	bne	r2,zero,10000500 <__alt_data_end+0xf8000500>
            }
            if (abs(target_x - new_x) < 20 || abs(target_y - new_y) < 20) return 1;
        } 
    }

    return 0;
100006cc:	0005883a 	mov	r2,zero
}
100006d0:	e6ffff04 	addi	sp,fp,-4
100006d4:	dfc00217 	ldw	ra,8(sp)
100006d8:	df000117 	ldw	fp,4(sp)
100006dc:	dc000017 	ldw	r16,0(sp)
100006e0:	dec00304 	addi	sp,sp,12
100006e4:	f800283a 	ret

100006e8 <try_move_zombie>:

void try_move_zombie(zombie_t *z, int new_x, int new_y) {
100006e8:	defff304 	addi	sp,sp,-52
100006ec:	dfc00c15 	stw	ra,48(sp)
100006f0:	df000b15 	stw	fp,44(sp)
100006f4:	dc400a15 	stw	r17,40(sp)
100006f8:	dc000915 	stw	r16,36(sp)
100006fc:	df000b04 	addi	fp,sp,44
10000700:	e13ffb15 	stw	r4,-20(fp)
10000704:	e17ffc15 	stw	r5,-16(fp)
10000708:	e1bffd15 	stw	r6,-12(fp)
    int dx = DX[z->direction], dy = DY[z->direction];
1000070c:	e0bffb17 	ldw	r2,-20(fp)
10000710:	10c00617 	ldw	r3,24(r2)
10000714:	00840074 	movhi	r2,4097
10000718:	1090a204 	addi	r2,r2,17032
1000071c:	18c7883a 	add	r3,r3,r3
10000720:	18c7883a 	add	r3,r3,r3
10000724:	10c5883a 	add	r2,r2,r3
10000728:	10800017 	ldw	r2,0(r2)
1000072c:	e0bff515 	stw	r2,-44(fp)
10000730:	e0bffb17 	ldw	r2,-20(fp)
10000734:	10c00617 	ldw	r3,24(r2)
10000738:	00840074 	movhi	r2,4097
1000073c:	1090aa04 	addi	r2,r2,17064
10000740:	18c7883a 	add	r3,r3,r3
10000744:	18c7883a 	add	r3,r3,r3
10000748:	10c5883a 	add	r2,r2,r3
1000074c:	10800017 	ldw	r2,0(r2)
10000750:	e0bff615 	stw	r2,-40(fp)
    int grid_x = TO_GRID(z->x), grid_y = TO_GRID(z->y);
10000754:	e0bffb17 	ldw	r2,-20(fp)
10000758:	10800117 	ldw	r2,4(r2)
1000075c:	1000010e 	bge	r2,zero,10000764 <try_move_zombie+0x7c>
10000760:	108003c4 	addi	r2,r2,15
10000764:	1005d13a 	srai	r2,r2,4
10000768:	e0bff715 	stw	r2,-36(fp)
1000076c:	e0bffb17 	ldw	r2,-20(fp)
10000770:	10800217 	ldw	r2,8(r2)
10000774:	1000010e 	bge	r2,zero,1000077c <try_move_zombie+0x94>
10000778:	108003c4 	addi	r2,r2,15
1000077c:	1005d13a 	srai	r2,r2,4
10000780:	e0bff815 	stw	r2,-32(fp)

    if (new_x >= MAX_X) {
10000784:	e0bffc17 	ldw	r2,-16(fp)
10000788:	10809010 	cmplti	r2,r2,576
1000078c:	1000031e 	bne	r2,zero,1000079c <try_move_zombie+0xb4>
        new_x = MAX_X - 1;
10000790:	00808fc4 	movi	r2,575
10000794:	e0bffc15 	stw	r2,-16(fp)
10000798:	00000506 	br	100007b0 <try_move_zombie+0xc8>
    } else if (new_x < MIN_X) {
1000079c:	e0bffc17 	ldw	r2,-16(fp)
100007a0:	10801008 	cmpgei	r2,r2,64
100007a4:	1000021e 	bne	r2,zero,100007b0 <try_move_zombie+0xc8>
        new_x = MIN_X;
100007a8:	00801004 	movi	r2,64
100007ac:	e0bffc15 	stw	r2,-16(fp)
    }

    if (new_y >= MAX_Y) {
100007b0:	e0bffd17 	ldw	r2,-12(fp)
100007b4:	10806810 	cmplti	r2,r2,416
100007b8:	1000031e 	bne	r2,zero,100007c8 <try_move_zombie+0xe0>
        new_y = MAX_Y - 1;
100007bc:	008067c4 	movi	r2,415
100007c0:	e0bffd15 	stw	r2,-12(fp)
100007c4:	00000506 	br	100007dc <try_move_zombie+0xf4>
    } else if (new_y < MIN_Y) {
100007c8:	e0bffd17 	ldw	r2,-12(fp)
100007cc:	10801008 	cmpgei	r2,r2,64
100007d0:	1000021e 	bne	r2,zero,100007dc <try_move_zombie+0xf4>
        new_y = MIN_Y;
100007d4:	00801004 	movi	r2,64
100007d8:	e0bffd15 	stw	r2,-12(fp)
    }

    int new_grid_x = TO_GRID(new_x), new_grid_y = TO_GRID(new_y);
100007dc:	e0bffc17 	ldw	r2,-16(fp)
100007e0:	1000010e 	bge	r2,zero,100007e8 <try_move_zombie+0x100>
100007e4:	108003c4 	addi	r2,r2,15
100007e8:	1005d13a 	srai	r2,r2,4
100007ec:	e0bff915 	stw	r2,-28(fp)
100007f0:	e0bffd17 	ldw	r2,-12(fp)
100007f4:	1000010e 	bge	r2,zero,100007fc <try_move_zombie+0x114>
100007f8:	108003c4 	addi	r2,r2,15
100007fc:	1005d13a 	srai	r2,r2,4
10000800:	e0bffa15 	stw	r2,-24(fp)

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
10000804:	e0fff717 	ldw	r3,-36(fp)
10000808:	e0bff917 	ldw	r2,-28(fp)
1000080c:	1880031e 	bne	r3,r2,1000081c <try_move_zombie+0x134>
10000810:	e0fff817 	ldw	r3,-32(fp)
10000814:	e0bffa17 	ldw	r2,-24(fp)
10000818:	18800f26 	beq	r3,r2,10000858 <try_move_zombie+0x170>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
1000081c:	040400b4 	movhi	r16,4098
10000820:	8428b604 	addi	r16,r16,-23848
10000824:	e0bff917 	ldw	r2,-28(fp)
10000828:	01400784 	movi	r5,30
1000082c:	1009883a 	mov	r4,r2
10000830:	0004b280 	call	10004b28 <__mulsi3>
10000834:	1007883a 	mov	r3,r2
10000838:	e0bffa17 	ldw	r2,-24(fp)
1000083c:	1885883a 	add	r2,r3,r2
10000840:	1085883a 	add	r2,r2,r2
10000844:	1085883a 	add	r2,r2,r2
10000848:	8085883a 	add	r2,r16,r2
1000084c:	10800017 	ldw	r2,0(r2)
10000850:	10803fe0 	cmpeqi	r2,r2,255
10000854:	10003926 	beq	r2,zero,1000093c <try_move_zombie+0x254>
    } else {
        // Collision
        return;
    }

    if (check_no_interference(new_x, new_y, grid_x, grid_y) != 0) {
10000858:	e1fff817 	ldw	r7,-32(fp)
1000085c:	e1bff717 	ldw	r6,-36(fp)
10000860:	e17ffd17 	ldw	r5,-12(fp)
10000864:	e13ffc17 	ldw	r4,-16(fp)
10000868:	00004d40 	call	100004d4 <check_no_interference>
1000086c:	1000351e 	bne	r2,zero,10000944 <try_move_zombie+0x25c>
        // Do not move
        return;
    }

    z->x = new_x;
10000870:	e0bffb17 	ldw	r2,-20(fp)
10000874:	e0fffc17 	ldw	r3,-16(fp)
10000878:	10c00115 	stw	r3,4(r2)
    z->y = new_y;
1000087c:	e0bffb17 	ldw	r2,-20(fp)
10000880:	e0fffd17 	ldw	r3,-12(fp)
10000884:	10c00215 	stw	r3,8(r2)

    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000888:	040400b4 	movhi	r16,4098
1000088c:	8428b604 	addi	r16,r16,-23848
10000890:	e0bff917 	ldw	r2,-28(fp)
10000894:	01400784 	movi	r5,30
10000898:	1009883a 	mov	r4,r2
1000089c:	0004b280 	call	10004b28 <__mulsi3>
100008a0:	1007883a 	mov	r3,r2
100008a4:	e0bffa17 	ldw	r2,-24(fp)
100008a8:	1885883a 	add	r2,r3,r2
100008ac:	1085883a 	add	r2,r2,r2
100008b0:	1085883a 	add	r2,r2,r2
100008b4:	8085883a 	add	r2,r16,r2
100008b8:	10800017 	ldw	r2,0(r2)
100008bc:	10803fd8 	cmpnei	r2,r2,255
100008c0:	1000211e 	bne	r2,zero,10000948 <try_move_zombie+0x260>
        // Move to new grid, no collision
        grid[grid_x][grid_y] = INDEX_NOTHING;
100008c4:	040400b4 	movhi	r16,4098
100008c8:	8428b604 	addi	r16,r16,-23848
100008cc:	e0bff717 	ldw	r2,-36(fp)
100008d0:	01400784 	movi	r5,30
100008d4:	1009883a 	mov	r4,r2
100008d8:	0004b280 	call	10004b28 <__mulsi3>
100008dc:	1007883a 	mov	r3,r2
100008e0:	e0bff817 	ldw	r2,-32(fp)
100008e4:	1885883a 	add	r2,r3,r2
100008e8:	1085883a 	add	r2,r2,r2
100008ec:	1085883a 	add	r2,r2,r2
100008f0:	8085883a 	add	r2,r16,r2
100008f4:	00c03fc4 	movi	r3,255
100008f8:	10c00015 	stw	r3,0(r2)
        grid[new_grid_x][new_grid_y] = z->index;
100008fc:	e0bffb17 	ldw	r2,-20(fp)
10000900:	14400017 	ldw	r17,0(r2)
10000904:	040400b4 	movhi	r16,4098
10000908:	8428b604 	addi	r16,r16,-23848
1000090c:	e0bff917 	ldw	r2,-28(fp)
10000910:	01400784 	movi	r5,30
10000914:	1009883a 	mov	r4,r2
10000918:	0004b280 	call	10004b28 <__mulsi3>
1000091c:	1007883a 	mov	r3,r2
10000920:	e0bffa17 	ldw	r2,-24(fp)
10000924:	1885883a 	add	r2,r3,r2
10000928:	1085883a 	add	r2,r2,r2
1000092c:	1085883a 	add	r2,r2,r2
10000930:	8085883a 	add	r2,r16,r2
10000934:	14400015 	stw	r17,0(r2)
10000938:	00000306 	br	10000948 <try_move_zombie+0x260>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
    } else {
        // Collision
        return;
1000093c:	0001883a 	nop
10000940:	00000106 	br	10000948 <try_move_zombie+0x260>
    }

    if (check_no_interference(new_x, new_y, grid_x, grid_y) != 0) {
        // Do not move
        return;
10000944:	0001883a 	nop
    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
        grid[grid_x][grid_y] = INDEX_NOTHING;
        grid[new_grid_x][new_grid_y] = z->index;
    }
}
10000948:	e6fffe04 	addi	sp,fp,-8
1000094c:	dfc00317 	ldw	ra,12(sp)
10000950:	df000217 	ldw	fp,8(sp)
10000954:	dc400117 	ldw	r17,4(sp)
10000958:	dc000017 	ldw	r16,0(sp)
1000095c:	dec00404 	addi	sp,sp,16
10000960:	f800283a 	ret

10000964 <update_zombie>:

void update_zombie(zombie_t *z) {
10000964:	defff104 	addi	sp,sp,-60
10000968:	dfc00e15 	stw	ra,56(sp)
1000096c:	df000d15 	stw	fp,52(sp)
10000970:	dc400c15 	stw	r17,48(sp)
10000974:	dc000b15 	stw	r16,44(sp)
10000978:	df000d04 	addi	fp,sp,52
1000097c:	e13ffd15 	stw	r4,-12(fp)
    int dx = DX[z->direction], dy = DY[z->direction];
10000980:	e0bffd17 	ldw	r2,-12(fp)
10000984:	10c00617 	ldw	r3,24(r2)
10000988:	00840074 	movhi	r2,4097
1000098c:	1090a204 	addi	r2,r2,17032
10000990:	18c7883a 	add	r3,r3,r3
10000994:	18c7883a 	add	r3,r3,r3
10000998:	10c5883a 	add	r2,r2,r3
1000099c:	10800017 	ldw	r2,0(r2)
100009a0:	e0bff415 	stw	r2,-48(fp)
100009a4:	e0bffd17 	ldw	r2,-12(fp)
100009a8:	10c00617 	ldw	r3,24(r2)
100009ac:	00840074 	movhi	r2,4097
100009b0:	1090aa04 	addi	r2,r2,17064
100009b4:	18c7883a 	add	r3,r3,r3
100009b8:	18c7883a 	add	r3,r3,r3
100009bc:	10c5883a 	add	r2,r2,r3
100009c0:	10800017 	ldw	r2,0(r2)
100009c4:	e0bff515 	stw	r2,-44(fp)
    int grid_x = TO_GRID(z->x), grid_y = TO_GRID(z->y);
100009c8:	e0bffd17 	ldw	r2,-12(fp)
100009cc:	10800117 	ldw	r2,4(r2)
100009d0:	1000010e 	bge	r2,zero,100009d8 <update_zombie+0x74>
100009d4:	108003c4 	addi	r2,r2,15
100009d8:	1005d13a 	srai	r2,r2,4
100009dc:	e0bff615 	stw	r2,-40(fp)
100009e0:	e0bffd17 	ldw	r2,-12(fp)
100009e4:	10800217 	ldw	r2,8(r2)
100009e8:	1000010e 	bge	r2,zero,100009f0 <update_zombie+0x8c>
100009ec:	108003c4 	addi	r2,r2,15
100009f0:	1005d13a 	srai	r2,r2,4
100009f4:	e0bff715 	stw	r2,-36(fp)
    int face_grid_x = grid_x + dx, face_grid_y = grid_y + dy;
100009f8:	e0fff617 	ldw	r3,-40(fp)
100009fc:	e0bff417 	ldw	r2,-48(fp)
10000a00:	1885883a 	add	r2,r3,r2
10000a04:	e0bff815 	stw	r2,-32(fp)
10000a08:	e0fff717 	ldw	r3,-36(fp)
10000a0c:	e0bff517 	ldw	r2,-44(fp)
10000a10:	1885883a 	add	r2,r3,r2
10000a14:	e0bff915 	stw	r2,-28(fp)

    switch (z->action) {
10000a18:	e0bffd17 	ldw	r2,-12(fp)
10000a1c:	10800517 	ldw	r2,20(r2)
10000a20:	10c00168 	cmpgeui	r3,r2,5
10000a24:	1801201e 	bne	r3,zero,10000ea8 <update_zombie+0x544>
10000a28:	100690ba 	slli	r3,r2,2
10000a2c:	00840034 	movhi	r2,4096
10000a30:	10829004 	addi	r2,r2,2624
10000a34:	1885883a 	add	r2,r3,r2
10000a38:	10800017 	ldw	r2,0(r2)
10000a3c:	1000683a 	jmp	r2
10000a40:	10000a54 	ori	zero,r2,41
10000a44:	10000b6c 	andhi	zero,r2,45
10000a48:	10000bb8 	rdprs	zero,r2,46
10000a4c:	10000d34 	orhi	zero,r2,52
10000a50:	10000e10 	cmplti	zero,r2,56
        case WALK:

            // Initiate attack if player is at the front
            if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
10000a54:	e0bff817 	ldw	r2,-32(fp)
10000a58:	10001c16 	blt	r2,zero,10000acc <update_zombie+0x168>
10000a5c:	e0bff817 	ldw	r2,-32(fp)
10000a60:	10800a08 	cmpgei	r2,r2,40
10000a64:	1000191e 	bne	r2,zero,10000acc <update_zombie+0x168>
10000a68:	e0bff917 	ldw	r2,-28(fp)
10000a6c:	10001716 	blt	r2,zero,10000acc <update_zombie+0x168>
                face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000a70:	e0bff917 	ldw	r2,-28(fp)
10000a74:	10800788 	cmpgei	r2,r2,30
10000a78:	1000141e 	bne	r2,zero,10000acc <update_zombie+0x168>
                grid[face_grid_x][face_grid_y] < 0) {
10000a7c:	040400b4 	movhi	r16,4098
10000a80:	8428b604 	addi	r16,r16,-23848
10000a84:	e0bff817 	ldw	r2,-32(fp)
10000a88:	01400784 	movi	r5,30
10000a8c:	1009883a 	mov	r4,r2
10000a90:	0004b280 	call	10004b28 <__mulsi3>
10000a94:	1007883a 	mov	r3,r2
10000a98:	e0bff917 	ldw	r2,-28(fp)
10000a9c:	1885883a 	add	r2,r3,r2
10000aa0:	1085883a 	add	r2,r2,r2
10000aa4:	1085883a 	add	r2,r2,r2
10000aa8:	8085883a 	add	r2,r16,r2
10000aac:	10800017 	ldw	r2,0(r2)
    switch (z->action) {
        case WALK:

            // Initiate attack if player is at the front
            if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
                face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000ab0:	1000060e 	bge	r2,zero,10000acc <update_zombie+0x168>
                grid[face_grid_x][face_grid_y] < 0) {

                z->action = ATTACK;
10000ab4:	e0bffd17 	ldw	r2,-12(fp)
10000ab8:	00c00084 	movi	r3,2
10000abc:	10c00515 	stw	r3,20(r2)
                z->frame = 0;
10000ac0:	e0bffd17 	ldw	r2,-12(fp)
10000ac4:	10000715 	stw	zero,28(r2)
                return;
10000ac8:	0000f706 	br	10000ea8 <update_zombie+0x544>
            }

            int new_direction = calc_zombie_direction(z);
10000acc:	e13ffd17 	ldw	r4,-12(fp)
10000ad0:	000026c0 	call	1000026c <calc_zombie_direction>
10000ad4:	e0bffa15 	stw	r2,-24(fp)
            if (new_direction == z->direction) {
10000ad8:	e0bffd17 	ldw	r2,-12(fp)
10000adc:	10c00617 	ldw	r3,24(r2)
10000ae0:	e0bffa17 	ldw	r2,-24(fp)
10000ae4:	1880181e 	bne	r3,r2,10000b48 <update_zombie+0x1e4>
                // Do not need to rotate, move
                int new_x = z->x + dx * ZOMBIE_MOVE;
10000ae8:	e0bffd17 	ldw	r2,-12(fp)
10000aec:	10c00117 	ldw	r3,4(r2)
10000af0:	e0bff417 	ldw	r2,-48(fp)
10000af4:	1885883a 	add	r2,r3,r2
10000af8:	e0bffb15 	stw	r2,-20(fp)
                int new_y = z->y + dy * ZOMBIE_MOVE;
10000afc:	e0bffd17 	ldw	r2,-12(fp)
10000b00:	10c00217 	ldw	r3,8(r2)
10000b04:	e0bff517 	ldw	r2,-44(fp)
10000b08:	1885883a 	add	r2,r3,r2
10000b0c:	e0bffc15 	stw	r2,-16(fp)
                try_move_zombie(z, new_x, new_y);
10000b10:	e1bffc17 	ldw	r6,-16(fp)
10000b14:	e17ffb17 	ldw	r5,-20(fp)
10000b18:	e13ffd17 	ldw	r4,-12(fp)
10000b1c:	00006e80 	call	100006e8 <try_move_zombie>
                z->action = ROTATE;
                z->frame = 0;
                return;
            }

            z->frame++;
10000b20:	e0bffd17 	ldw	r2,-12(fp)
10000b24:	10800717 	ldw	r2,28(r2)
10000b28:	10c00044 	addi	r3,r2,1
10000b2c:	e0bffd17 	ldw	r2,-12(fp)
10000b30:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;
10000b34:	e0bffd17 	ldw	r2,-12(fp)
10000b38:	10800717 	ldw	r2,28(r2)
10000b3c:	10800410 	cmplti	r2,r2,16
10000b40:	1000d01e 	bne	r2,zero,10000e84 <update_zombie+0x520>
10000b44:	00000606 	br	10000b60 <update_zombie+0x1fc>
                int new_x = z->x + dx * ZOMBIE_MOVE;
                int new_y = z->y + dy * ZOMBIE_MOVE;
                try_move_zombie(z, new_x, new_y);
            } else {
                // Need to rotate
                z->action = ROTATE;
10000b48:	e0bffd17 	ldw	r2,-12(fp)
10000b4c:	00c00044 	movi	r3,1
10000b50:	10c00515 	stw	r3,20(r2)
                z->frame = 0;
10000b54:	e0bffd17 	ldw	r2,-12(fp)
10000b58:	10000715 	stw	zero,28(r2)
                return;
10000b5c:	0000d206 	br	10000ea8 <update_zombie+0x544>
            }

            z->frame++;
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;
10000b60:	e0bffd17 	ldw	r2,-12(fp)
10000b64:	10000715 	stw	zero,28(r2)

            break;
10000b68:	0000c606 	br	10000e84 <update_zombie+0x520>
        case ROTATE:
            z->frame++;
10000b6c:	e0bffd17 	ldw	r2,-12(fp)
10000b70:	10800717 	ldw	r2,28(r2)
10000b74:	10c00044 	addi	r3,r2,1
10000b78:	e0bffd17 	ldw	r2,-12(fp)
10000b7c:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_ROTATE_FRAME_COUNT) {
10000b80:	e0bffd17 	ldw	r2,-12(fp)
10000b84:	10800717 	ldw	r2,28(r2)
10000b88:	10800210 	cmplti	r2,r2,8
10000b8c:	1000bf1e 	bne	r2,zero,10000e8c <update_zombie+0x528>
                // Change the direction
                z->direction = calc_zombie_direction(z);
10000b90:	e13ffd17 	ldw	r4,-12(fp)
10000b94:	000026c0 	call	1000026c <calc_zombie_direction>
10000b98:	1007883a 	mov	r3,r2
10000b9c:	e0bffd17 	ldw	r2,-12(fp)
10000ba0:	10c00615 	stw	r3,24(r2)
                z->action = WALK;
10000ba4:	e0bffd17 	ldw	r2,-12(fp)
10000ba8:	10000515 	stw	zero,20(r2)
                z->frame = 0;
10000bac:	e0bffd17 	ldw	r2,-12(fp)
10000bb0:	10000715 	stw	zero,28(r2)
                return;
10000bb4:	0000bc06 	br	10000ea8 <update_zombie+0x544>
            }
            break;
        case ATTACK:
            z->frame++;
10000bb8:	e0bffd17 	ldw	r2,-12(fp)
10000bbc:	10800717 	ldw	r2,28(r2)
10000bc0:	10c00044 	addi	r3,r2,1
10000bc4:	e0bffd17 	ldw	r2,-12(fp)
10000bc8:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
10000bcc:	e0bffd17 	ldw	r2,-12(fp)
10000bd0:	10800717 	ldw	r2,28(r2)
10000bd4:	10800310 	cmplti	r2,r2,12
10000bd8:	1000ae1e 	bne	r2,zero,10000e94 <update_zombie+0x530>
                // Check whether there is still a player at the facing grid
                if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
10000bdc:	e0bff817 	ldw	r2,-32(fp)
10000be0:	10004f16 	blt	r2,zero,10000d20 <update_zombie+0x3bc>
10000be4:	e0bff817 	ldw	r2,-32(fp)
10000be8:	10800a08 	cmpgei	r2,r2,40
10000bec:	10004c1e 	bne	r2,zero,10000d20 <update_zombie+0x3bc>
10000bf0:	e0bff917 	ldw	r2,-28(fp)
10000bf4:	10004a16 	blt	r2,zero,10000d20 <update_zombie+0x3bc>
                    face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000bf8:	e0bff917 	ldw	r2,-28(fp)
10000bfc:	10800788 	cmpgei	r2,r2,30
10000c00:	1000471e 	bne	r2,zero,10000d20 <update_zombie+0x3bc>
                    grid[face_grid_x][face_grid_y] < 0) {
10000c04:	040400b4 	movhi	r16,4098
10000c08:	8428b604 	addi	r16,r16,-23848
10000c0c:	e0bff817 	ldw	r2,-32(fp)
10000c10:	01400784 	movi	r5,30
10000c14:	1009883a 	mov	r4,r2
10000c18:	0004b280 	call	10004b28 <__mulsi3>
10000c1c:	1007883a 	mov	r3,r2
10000c20:	e0bff917 	ldw	r2,-28(fp)
10000c24:	1885883a 	add	r2,r3,r2
10000c28:	1085883a 	add	r2,r2,r2
10000c2c:	1085883a 	add	r2,r2,r2
10000c30:	8085883a 	add	r2,r16,r2
10000c34:	10800017 	ldw	r2,0(r2)
        case ATTACK:
            z->frame++;
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
                // Check whether there is still a player at the facing grid
                if (face_grid_x >= 0 && face_grid_x < GRID_X_COUNT &&
                    face_grid_y >= 0 && face_grid_y < GRID_Y_COUNT &&
10000c38:	1000390e 	bge	r2,zero,10000d20 <update_zombie+0x3bc>
                    grid[face_grid_x][face_grid_y] < 0) {

                    player_t *target;

                    if (grid[face_grid_x][face_grid_y] == INDEX_PLAYER_1) {
10000c3c:	040400b4 	movhi	r16,4098
10000c40:	8428b604 	addi	r16,r16,-23848
10000c44:	e0bff817 	ldw	r2,-32(fp)
10000c48:	01400784 	movi	r5,30
10000c4c:	1009883a 	mov	r4,r2
10000c50:	0004b280 	call	10004b28 <__mulsi3>
10000c54:	1007883a 	mov	r3,r2
10000c58:	e0bff917 	ldw	r2,-28(fp)
10000c5c:	1885883a 	add	r2,r3,r2
10000c60:	1085883a 	add	r2,r2,r2
10000c64:	1085883a 	add	r2,r2,r2
10000c68:	8085883a 	add	r2,r16,r2
10000c6c:	10800017 	ldw	r2,0(r2)
10000c70:	10bfffd8 	cmpnei	r2,r2,-1
10000c74:	1000041e 	bne	r2,zero,10000c88 <update_zombie+0x324>
                        target = &player_1;
10000c78:	008400b4 	movhi	r2,4098
10000c7c:	10ae0604 	addi	r2,r2,-18408
10000c80:	e0bff315 	stw	r2,-52(fp)
10000c84:	00000306 	br	10000c94 <update_zombie+0x330>
                    } else {
                        target = &player_2;
10000c88:	008400b4 	movhi	r2,4098
10000c8c:	10ae0f04 	addi	r2,r2,-18372
10000c90:	e0bff315 	stw	r2,-52(fp)
                    }

                    if (target->action != DIE) {
10000c94:	e0bff317 	ldw	r2,-52(fp)
10000c98:	10800617 	ldw	r2,24(r2)
10000c9c:	10800120 	cmpeqi	r2,r2,4
10000ca0:	10001f1e 	bne	r2,zero,10000d20 <update_zombie+0x3bc>
                        target->blood -= ZOMBIE_ATTACK;
10000ca4:	e0bff317 	ldw	r2,-52(fp)
10000ca8:	10800217 	ldw	r2,8(r2)
10000cac:	10fffd84 	addi	r3,r2,-10
10000cb0:	e0bff317 	ldw	r2,-52(fp)
10000cb4:	10c00215 	stw	r3,8(r2)
                        if (target->blood > 0) {
10000cb8:	e0bff317 	ldw	r2,-52(fp)
10000cbc:	10800217 	ldw	r2,8(r2)
10000cc0:	0080120e 	bge	zero,r2,10000d0c <update_zombie+0x3a8>
                            target->action = HIT;
10000cc4:	e0bff317 	ldw	r2,-52(fp)
10000cc8:	00c000c4 	movi	r3,3
10000ccc:	10c00615 	stw	r3,24(r2)
                            target->direction = (z->direction + 4) % 8;  // opposite
10000cd0:	e0bffd17 	ldw	r2,-12(fp)
10000cd4:	10800617 	ldw	r2,24(r2)
10000cd8:	10c00104 	addi	r3,r2,4
10000cdc:	00a00034 	movhi	r2,32768
10000ce0:	108001c4 	addi	r2,r2,7
10000ce4:	1884703a 	and	r2,r3,r2
10000ce8:	1000040e 	bge	r2,zero,10000cfc <update_zombie+0x398>
10000cec:	10bfffc4 	addi	r2,r2,-1
10000cf0:	00fffe04 	movi	r3,-8
10000cf4:	10c4b03a 	or	r2,r2,r3
10000cf8:	10800044 	addi	r2,r2,1
10000cfc:	1007883a 	mov	r3,r2
10000d00:	e0bff317 	ldw	r2,-52(fp)
10000d04:	10c00315 	stw	r3,12(r2)
10000d08:	00000306 	br	10000d18 <update_zombie+0x3b4>
                        } else {
                            target->action = DIE;
10000d0c:	e0bff317 	ldw	r2,-52(fp)
10000d10:	00c00104 	movi	r3,4
10000d14:	10c00615 	stw	r3,24(r2)
                        }
                        target->frame = 0;
10000d18:	e0bff317 	ldw	r2,-52(fp)
10000d1c:	10000715 	stw	zero,28(r2)
                    }
                }
                z->action = WALK;
10000d20:	e0bffd17 	ldw	r2,-12(fp)
10000d24:	10000515 	stw	zero,20(r2)
                z->frame = 0;
10000d28:	e0bffd17 	ldw	r2,-12(fp)
10000d2c:	10000715 	stw	zero,28(r2)
                return;
10000d30:	00005d06 	br	10000ea8 <update_zombie+0x544>
            }
            break;
        case HIT:
            try_move_zombie(z,
                            z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
10000d34:	e0bffd17 	ldw	r2,-12(fp)
10000d38:	14000117 	ldw	r16,4(r2)
10000d3c:	e0bffd17 	ldw	r2,-12(fp)
10000d40:	10c00717 	ldw	r3,28(r2)
10000d44:	00840074 	movhi	r2,4097
10000d48:	1090b204 	addi	r2,r2,17096
10000d4c:	18c7883a 	add	r3,r3,r3
10000d50:	18c7883a 	add	r3,r3,r3
10000d54:	10c5883a 	add	r2,r2,r3
10000d58:	10800017 	ldw	r2,0(r2)
10000d5c:	e17ff417 	ldw	r5,-48(fp)
10000d60:	1009883a 	mov	r4,r2
10000d64:	0004b280 	call	10004b28 <__mulsi3>
                z->frame = 0;
                return;
            }
            break;
        case HIT:
            try_move_zombie(z,
10000d68:	80a3c83a 	sub	r17,r16,r2
                            z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
                            z->y - dy * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame]);
10000d6c:	e0bffd17 	ldw	r2,-12(fp)
10000d70:	14000217 	ldw	r16,8(r2)
10000d74:	e0bffd17 	ldw	r2,-12(fp)
10000d78:	10c00717 	ldw	r3,28(r2)
10000d7c:	00840074 	movhi	r2,4097
10000d80:	1090b204 	addi	r2,r2,17096
10000d84:	18c7883a 	add	r3,r3,r3
10000d88:	18c7883a 	add	r3,r3,r3
10000d8c:	10c5883a 	add	r2,r2,r3
10000d90:	10800017 	ldw	r2,0(r2)
10000d94:	e17ff517 	ldw	r5,-44(fp)
10000d98:	1009883a 	mov	r4,r2
10000d9c:	0004b280 	call	10004b28 <__mulsi3>
                z->frame = 0;
                return;
            }
            break;
        case HIT:
            try_move_zombie(z,
10000da0:	8085c83a 	sub	r2,r16,r2
10000da4:	100d883a 	mov	r6,r2
10000da8:	880b883a 	mov	r5,r17
10000dac:	e13ffd17 	ldw	r4,-12(fp)
10000db0:	00006e80 	call	100006e8 <try_move_zombie>
                            z->x - dx * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame],
                            z->y - dy * ZOMBIE_HIT_FRAME_MOVEMENT[z->frame]);
            z->frame++;
10000db4:	e0bffd17 	ldw	r2,-12(fp)
10000db8:	10800717 	ldw	r2,28(r2)
10000dbc:	10c00044 	addi	r3,r2,1
10000dc0:	e0bffd17 	ldw	r2,-12(fp)
10000dc4:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
10000dc8:	e0bffd17 	ldw	r2,-12(fp)
10000dcc:	10800717 	ldw	r2,28(r2)
10000dd0:	108002d0 	cmplti	r2,r2,11
10000dd4:	1000311e 	bne	r2,zero,10000e9c <update_zombie+0x538>
                if (z->blood > 0) {
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	10800317 	ldw	r2,12(r2)
10000de0:	0080050e 	bge	zero,r2,10000df8 <update_zombie+0x494>
                    z->action = WALK;
10000de4:	e0bffd17 	ldw	r2,-12(fp)
10000de8:	10000515 	stw	zero,20(r2)
                    z->frame = 0;
10000dec:	e0bffd17 	ldw	r2,-12(fp)
10000df0:	10000715 	stw	zero,28(r2)
                    return;
10000df4:	00002c06 	br	10000ea8 <update_zombie+0x544>
                } else {
                    z->action = DIE;
10000df8:	e0bffd17 	ldw	r2,-12(fp)
10000dfc:	00c00104 	movi	r3,4
10000e00:	10c00515 	stw	r3,20(r2)
                    z->frame = 0;
10000e04:	e0bffd17 	ldw	r2,-12(fp)
10000e08:	10000715 	stw	zero,28(r2)
                    return;
10000e0c:	00002606 	br	10000ea8 <update_zombie+0x544>
                }
            }
            break;
        case DIE:

            z->frame++;
10000e10:	e0bffd17 	ldw	r2,-12(fp)
10000e14:	10800717 	ldw	r2,28(r2)
10000e18:	10c00044 	addi	r3,r2,1
10000e1c:	e0bffd17 	ldw	r2,-12(fp)
10000e20:	10c00715 	stw	r3,28(r2)
            if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
10000e24:	e0bffd17 	ldw	r2,-12(fp)
10000e28:	10800717 	ldw	r2,28(r2)
10000e2c:	10800410 	cmplti	r2,r2,16
10000e30:	10001c1e 	bne	r2,zero,10000ea4 <update_zombie+0x540>
                z->enable = 0;
10000e34:	e0bffd17 	ldw	r2,-12(fp)
10000e38:	10000415 	stw	zero,16(r2)
                grid[grid_x][grid_y] = INDEX_NOTHING;
10000e3c:	040400b4 	movhi	r16,4098
10000e40:	8428b604 	addi	r16,r16,-23848
10000e44:	e0bff617 	ldw	r2,-40(fp)
10000e48:	01400784 	movi	r5,30
10000e4c:	1009883a 	mov	r4,r2
10000e50:	0004b280 	call	10004b28 <__mulsi3>
10000e54:	1007883a 	mov	r3,r2
10000e58:	e0bff717 	ldw	r2,-36(fp)
10000e5c:	1885883a 	add	r2,r3,r2
10000e60:	1085883a 	add	r2,r2,r2
10000e64:	1085883a 	add	r2,r2,r2
10000e68:	8085883a 	add	r2,r16,r2
10000e6c:	00c03fc4 	movi	r3,255
10000e70:	10c00015 	stw	r3,0(r2)
                cur_zombie_counter--;
10000e74:	d0aa8217 	ldw	r2,-22008(gp)
10000e78:	10bfffc4 	addi	r2,r2,-1
10000e7c:	d0aa8215 	stw	r2,-22008(gp)
                return;
10000e80:	00000906 	br	10000ea8 <update_zombie+0x544>
            }

            z->frame++;
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) z->frame = 0;

            break;
10000e84:	0001883a 	nop
10000e88:	00000706 	br	10000ea8 <update_zombie+0x544>
                z->direction = calc_zombie_direction(z);
                z->action = WALK;
                z->frame = 0;
                return;
            }
            break;
10000e8c:	0001883a 	nop
10000e90:	00000506 	br	10000ea8 <update_zombie+0x544>
                }
                z->action = WALK;
                z->frame = 0;
                return;
            }
            break;
10000e94:	0001883a 	nop
10000e98:	00000306 	br	10000ea8 <update_zombie+0x544>
                    z->action = DIE;
                    z->frame = 0;
                    return;
                }
            }
            break;
10000e9c:	0001883a 	nop
10000ea0:	00000106 	br	10000ea8 <update_zombie+0x544>
                z->enable = 0;
                grid[grid_x][grid_y] = INDEX_NOTHING;
                cur_zombie_counter--;
                return;
            }
            break;
10000ea4:	0001883a 	nop
    }
}
10000ea8:	e6fffe04 	addi	sp,fp,-8
10000eac:	dfc00317 	ldw	ra,12(sp)
10000eb0:	df000217 	ldw	fp,8(sp)
10000eb4:	dc400117 	ldw	r17,4(sp)
10000eb8:	dc000017 	ldw	r16,0(sp)
10000ebc:	dec00404 	addi	sp,sp,16
10000ec0:	f800283a 	ret

10000ec4 <try_move_player>:

void try_move_player(player_t *p, int new_x, int new_y) {
10000ec4:	defff504 	addi	sp,sp,-44
10000ec8:	dfc00a15 	stw	ra,40(sp)
10000ecc:	df000915 	stw	fp,36(sp)
10000ed0:	dc400815 	stw	r17,32(sp)
10000ed4:	dc000715 	stw	r16,28(sp)
10000ed8:	df000904 	addi	fp,sp,36
10000edc:	e13ffb15 	stw	r4,-20(fp)
10000ee0:	e17ffc15 	stw	r5,-16(fp)
10000ee4:	e1bffd15 	stw	r6,-12(fp)
    int grid_x = TO_GRID(p->x), grid_y = TO_GRID(p->y);
10000ee8:	e0bffb17 	ldw	r2,-20(fp)
10000eec:	10800017 	ldw	r2,0(r2)
10000ef0:	1000010e 	bge	r2,zero,10000ef8 <try_move_player+0x34>
10000ef4:	108003c4 	addi	r2,r2,15
10000ef8:	1005d13a 	srai	r2,r2,4
10000efc:	e0bff715 	stw	r2,-36(fp)
10000f00:	e0bffb17 	ldw	r2,-20(fp)
10000f04:	10800117 	ldw	r2,4(r2)
10000f08:	1000010e 	bge	r2,zero,10000f10 <try_move_player+0x4c>
10000f0c:	108003c4 	addi	r2,r2,15
10000f10:	1005d13a 	srai	r2,r2,4
10000f14:	e0bff815 	stw	r2,-32(fp)

    if (new_x >= MAX_X) {
10000f18:	e0bffc17 	ldw	r2,-16(fp)
10000f1c:	10809010 	cmplti	r2,r2,576
10000f20:	1000031e 	bne	r2,zero,10000f30 <try_move_player+0x6c>
        new_x = MAX_X - 1;
10000f24:	00808fc4 	movi	r2,575
10000f28:	e0bffc15 	stw	r2,-16(fp)
10000f2c:	00000506 	br	10000f44 <try_move_player+0x80>
    } else if (new_x < MIN_X) {
10000f30:	e0bffc17 	ldw	r2,-16(fp)
10000f34:	10801008 	cmpgei	r2,r2,64
10000f38:	1000021e 	bne	r2,zero,10000f44 <try_move_player+0x80>
        new_x = MIN_X;
10000f3c:	00801004 	movi	r2,64
10000f40:	e0bffc15 	stw	r2,-16(fp)
    }

    if (new_y >= MAX_Y) {
10000f44:	e0bffd17 	ldw	r2,-12(fp)
10000f48:	10806810 	cmplti	r2,r2,416
10000f4c:	1000031e 	bne	r2,zero,10000f5c <try_move_player+0x98>
        new_y = MAX_Y - 1;
10000f50:	008067c4 	movi	r2,415
10000f54:	e0bffd15 	stw	r2,-12(fp)
10000f58:	00000506 	br	10000f70 <try_move_player+0xac>
    } else if (new_y < MIN_Y) {
10000f5c:	e0bffd17 	ldw	r2,-12(fp)
10000f60:	10801008 	cmpgei	r2,r2,64
10000f64:	1000021e 	bne	r2,zero,10000f70 <try_move_player+0xac>
        new_y = MIN_Y;
10000f68:	00801004 	movi	r2,64
10000f6c:	e0bffd15 	stw	r2,-12(fp)
    }

    int new_grid_x = TO_GRID(new_x), new_grid_y = TO_GRID(new_y);
10000f70:	e0bffc17 	ldw	r2,-16(fp)
10000f74:	1000010e 	bge	r2,zero,10000f7c <try_move_player+0xb8>
10000f78:	108003c4 	addi	r2,r2,15
10000f7c:	1005d13a 	srai	r2,r2,4
10000f80:	e0bff915 	stw	r2,-28(fp)
10000f84:	e0bffd17 	ldw	r2,-12(fp)
10000f88:	1000010e 	bge	r2,zero,10000f90 <try_move_player+0xcc>
10000f8c:	108003c4 	addi	r2,r2,15
10000f90:	1005d13a 	srai	r2,r2,4
10000f94:	e0bffa15 	stw	r2,-24(fp)

    if (grid_x == new_grid_x && grid_y == new_grid_y) {
10000f98:	e0fff717 	ldw	r3,-36(fp)
10000f9c:	e0bff917 	ldw	r2,-28(fp)
10000fa0:	1880031e 	bne	r3,r2,10000fb0 <try_move_player+0xec>
10000fa4:	e0fff817 	ldw	r3,-32(fp)
10000fa8:	e0bffa17 	ldw	r2,-24(fp)
10000fac:	18800f26 	beq	r3,r2,10000fec <try_move_player+0x128>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
10000fb0:	040400b4 	movhi	r16,4098
10000fb4:	8428b604 	addi	r16,r16,-23848
10000fb8:	e0bff917 	ldw	r2,-28(fp)
10000fbc:	01400784 	movi	r5,30
10000fc0:	1009883a 	mov	r4,r2
10000fc4:	0004b280 	call	10004b28 <__mulsi3>
10000fc8:	1007883a 	mov	r3,r2
10000fcc:	e0bffa17 	ldw	r2,-24(fp)
10000fd0:	1885883a 	add	r2,r3,r2
10000fd4:	1085883a 	add	r2,r2,r2
10000fd8:	1085883a 	add	r2,r2,r2
10000fdc:	8085883a 	add	r2,r16,r2
10000fe0:	10800017 	ldw	r2,0(r2)
10000fe4:	10803fe0 	cmpeqi	r2,r2,255
10000fe8:	10003e26 	beq	r2,zero,100010e4 <try_move_player+0x220>
    }  else {
        // Collision, do not move
        return;
    }

    if (check_no_interference(new_x, new_y, grid_x, grid_y) != 0) {
10000fec:	e1fff817 	ldw	r7,-32(fp)
10000ff0:	e1bff717 	ldw	r6,-36(fp)
10000ff4:	e17ffd17 	ldw	r5,-12(fp)
10000ff8:	e13ffc17 	ldw	r4,-16(fp)
10000ffc:	00004d40 	call	100004d4 <check_no_interference>
10001000:	10003a1e 	bne	r2,zero,100010ec <try_move_player+0x228>
        // Do not move
        return;
    }

    p->x = new_x;
10001004:	e0bffb17 	ldw	r2,-20(fp)
10001008:	e0fffc17 	ldw	r3,-16(fp)
1000100c:	10c00015 	stw	r3,0(r2)
    p->y = new_y;
10001010:	e0bffb17 	ldw	r2,-20(fp)
10001014:	e0fffd17 	ldw	r3,-12(fp)
10001018:	10c00115 	stw	r3,4(r2)

    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
1000101c:	040400b4 	movhi	r16,4098
10001020:	8428b604 	addi	r16,r16,-23848
10001024:	e0bff917 	ldw	r2,-28(fp)
10001028:	01400784 	movi	r5,30
1000102c:	1009883a 	mov	r4,r2
10001030:	0004b280 	call	10004b28 <__mulsi3>
10001034:	1007883a 	mov	r3,r2
10001038:	e0bffa17 	ldw	r2,-24(fp)
1000103c:	1885883a 	add	r2,r3,r2
10001040:	1085883a 	add	r2,r2,r2
10001044:	1085883a 	add	r2,r2,r2
10001048:	8085883a 	add	r2,r16,r2
1000104c:	10800017 	ldw	r2,0(r2)
10001050:	10803fd8 	cmpnei	r2,r2,255
10001054:	1000261e 	bne	r2,zero,100010f0 <try_move_player+0x22c>
        grid[grid_x][grid_y] = INDEX_NOTHING;
10001058:	040400b4 	movhi	r16,4098
1000105c:	8428b604 	addi	r16,r16,-23848
10001060:	e0bff717 	ldw	r2,-36(fp)
10001064:	01400784 	movi	r5,30
10001068:	1009883a 	mov	r4,r2
1000106c:	0004b280 	call	10004b28 <__mulsi3>
10001070:	1007883a 	mov	r3,r2
10001074:	e0bff817 	ldw	r2,-32(fp)
10001078:	1885883a 	add	r2,r3,r2
1000107c:	1085883a 	add	r2,r2,r2
10001080:	1085883a 	add	r2,r2,r2
10001084:	8085883a 	add	r2,r16,r2
10001088:	00c03fc4 	movi	r3,255
1000108c:	10c00015 	stw	r3,0(r2)
        grid[new_grid_x][new_grid_y] = (p == &player_1 ? INDEX_PLAYER_1 : INDEX_PLAYER_2);
10001090:	e0fffb17 	ldw	r3,-20(fp)
10001094:	008400b4 	movhi	r2,4098
10001098:	10ae0604 	addi	r2,r2,-18408
1000109c:	1880021e 	bne	r3,r2,100010a8 <try_move_player+0x1e4>
100010a0:	047fffc4 	movi	r17,-1
100010a4:	00000106 	br	100010ac <try_move_player+0x1e8>
100010a8:	047fff84 	movi	r17,-2
100010ac:	040400b4 	movhi	r16,4098
100010b0:	8428b604 	addi	r16,r16,-23848
100010b4:	e0bff917 	ldw	r2,-28(fp)
100010b8:	01400784 	movi	r5,30
100010bc:	1009883a 	mov	r4,r2
100010c0:	0004b280 	call	10004b28 <__mulsi3>
100010c4:	1007883a 	mov	r3,r2
100010c8:	e0bffa17 	ldw	r2,-24(fp)
100010cc:	1885883a 	add	r2,r3,r2
100010d0:	1085883a 	add	r2,r2,r2
100010d4:	1085883a 	add	r2,r2,r2
100010d8:	8085883a 	add	r2,r16,r2
100010dc:	14400015 	stw	r17,0(r2)
100010e0:	00000306 	br	100010f0 <try_move_player+0x22c>
        // Stay in the same grid
    } else if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        // Move to new grid, no collision
    }  else {
        // Collision, do not move
        return;
100010e4:	0001883a 	nop
100010e8:	00000106 	br	100010f0 <try_move_player+0x22c>
    }

    if (check_no_interference(new_x, new_y, grid_x, grid_y) != 0) {
        // Do not move
        return;
100010ec:	0001883a 	nop
    if (grid[new_grid_x][new_grid_y] == INDEX_NOTHING) {
        grid[grid_x][grid_y] = INDEX_NOTHING;
        grid[new_grid_x][new_grid_y] = (p == &player_1 ? INDEX_PLAYER_1 : INDEX_PLAYER_2);
        
    }
}
100010f0:	e6fffe04 	addi	sp,fp,-8
100010f4:	dfc00317 	ldw	ra,12(sp)
100010f8:	df000217 	ldw	fp,8(sp)
100010fc:	dc400117 	ldw	r17,4(sp)
10001100:	dc000017 	ldw	r16,0(sp)
10001104:	dec00404 	addi	sp,sp,16
10001108:	f800283a 	ret

1000110c <update_player>:

void update_player(player_t *p, int direction, int attack) {
1000110c:	deffee04 	addi	sp,sp,-72
10001110:	dfc01115 	stw	ra,68(sp)
10001114:	df001015 	stw	fp,64(sp)
10001118:	dc400f15 	stw	r17,60(sp)
1000111c:	dc000e15 	stw	r16,56(sp)
10001120:	df001004 	addi	fp,sp,64
10001124:	e13ffb15 	stw	r4,-20(fp)
10001128:	e17ffc15 	stw	r5,-16(fp)
1000112c:	e1bffd15 	stw	r6,-12(fp)

    int dx = DX[p->direction], dy = DY[p->direction];
10001130:	e0bffb17 	ldw	r2,-20(fp)
10001134:	10c00317 	ldw	r3,12(r2)
10001138:	00840074 	movhi	r2,4097
1000113c:	1090a204 	addi	r2,r2,17032
10001140:	18c7883a 	add	r3,r3,r3
10001144:	18c7883a 	add	r3,r3,r3
10001148:	10c5883a 	add	r2,r2,r3
1000114c:	10800017 	ldw	r2,0(r2)
10001150:	e0bff115 	stw	r2,-60(fp)
10001154:	e0bffb17 	ldw	r2,-20(fp)
10001158:	10c00317 	ldw	r3,12(r2)
1000115c:	00840074 	movhi	r2,4097
10001160:	1090aa04 	addi	r2,r2,17064
10001164:	18c7883a 	add	r3,r3,r3
10001168:	18c7883a 	add	r3,r3,r3
1000116c:	10c5883a 	add	r2,r2,r3
10001170:	10800017 	ldw	r2,0(r2)
10001174:	e0bff215 	stw	r2,-56(fp)
    int grid_x = TO_GRID(p->x), grid_y = TO_GRID(p->y);
10001178:	e0bffb17 	ldw	r2,-20(fp)
1000117c:	10800017 	ldw	r2,0(r2)
10001180:	1000010e 	bge	r2,zero,10001188 <update_player+0x7c>
10001184:	108003c4 	addi	r2,r2,15
10001188:	1005d13a 	srai	r2,r2,4
1000118c:	e0bff315 	stw	r2,-52(fp)
10001190:	e0bffb17 	ldw	r2,-20(fp)
10001194:	10800117 	ldw	r2,4(r2)
10001198:	1000010e 	bge	r2,zero,100011a0 <update_player+0x94>
1000119c:	108003c4 	addi	r2,r2,15
100011a0:	1005d13a 	srai	r2,r2,4
100011a4:	e0bff415 	stw	r2,-48(fp)

    if (p->fire_interval > 0) --p->fire_interval;
100011a8:	e0bffb17 	ldw	r2,-20(fp)
100011ac:	10800817 	ldw	r2,32(r2)
100011b0:	0080050e 	bge	zero,r2,100011c8 <update_player+0xbc>
100011b4:	e0bffb17 	ldw	r2,-20(fp)
100011b8:	10800817 	ldw	r2,32(r2)
100011bc:	10ffffc4 	addi	r3,r2,-1
100011c0:	e0bffb17 	ldw	r2,-20(fp)
100011c4:	10c00815 	stw	r3,32(r2)

    switch (p->action) {
100011c8:	e0bffb17 	ldw	r2,-20(fp)
100011cc:	10800617 	ldw	r2,24(r2)
100011d0:	10c000e0 	cmpeqi	r3,r2,3
100011d4:	1800a31e 	bne	r3,zero,10001464 <update_player+0x358>
100011d8:	10c00120 	cmpeqi	r3,r2,4
100011dc:	1800d81e 	bne	r3,zero,10001540 <update_player+0x434>
100011e0:	1000f11e 	bne	r2,zero,100015a8 <update_player+0x49c>
        case WALK:

            if (direction != -1) {
100011e4:	e0bffc17 	ldw	r2,-16(fp)
100011e8:	10bfffe0 	cmpeqi	r2,r2,-1
100011ec:	10002b1e 	bne	r2,zero,1000129c <update_player+0x190>
                if (direction == p->direction) {
100011f0:	e0bffb17 	ldw	r2,-20(fp)
100011f4:	10c00317 	ldw	r3,12(r2)
100011f8:	e0bffc17 	ldw	r2,-16(fp)
100011fc:	18801c1e 	bne	r3,r2,10001270 <update_player+0x164>
                    // Do not need to rotate, move
                    int new_x = p->x + dx * PLAYER_MOVE, new_y = p->y + dy * PLAYER_MOVE;
10001200:	e0bffb17 	ldw	r2,-20(fp)
10001204:	14000017 	ldw	r16,0(r2)
10001208:	01400184 	movi	r5,6
1000120c:	e13ff117 	ldw	r4,-60(fp)
10001210:	0004b280 	call	10004b28 <__mulsi3>
10001214:	8085883a 	add	r2,r16,r2
10001218:	e0bff515 	stw	r2,-44(fp)
1000121c:	e0bffb17 	ldw	r2,-20(fp)
10001220:	14000117 	ldw	r16,4(r2)
10001224:	01400184 	movi	r5,6
10001228:	e13ff217 	ldw	r4,-56(fp)
1000122c:	0004b280 	call	10004b28 <__mulsi3>
10001230:	8085883a 	add	r2,r16,r2
10001234:	e0bff615 	stw	r2,-40(fp)
                    try_move_player(p, new_x, new_y);
10001238:	e1bff617 	ldw	r6,-40(fp)
1000123c:	e17ff517 	ldw	r5,-44(fp)
10001240:	e13ffb17 	ldw	r4,-20(fp)
10001244:	0000ec40 	call	10000ec4 <try_move_player>
                    p->direction = direction;
                    p->action = WALK;
                    p->frame = 0;
                    return;
                }
                p->frame++;
10001248:	e0bffb17 	ldw	r2,-20(fp)
1000124c:	10800717 	ldw	r2,28(r2)
10001250:	10c00044 	addi	r3,r2,1
10001254:	e0bffb17 	ldw	r2,-20(fp)
10001258:	10c00715 	stw	r3,28(r2)
                if (p->frame >= PLAYER_WALK_FRAME_COUNT) p->frame = 0;
1000125c:	e0bffb17 	ldw	r2,-20(fp)
10001260:	10800717 	ldw	r2,28(r2)
10001264:	10800410 	cmplti	r2,r2,16
10001268:	10000f1e 	bne	r2,zero,100012a8 <update_player+0x19c>
1000126c:	00000806 	br	10001290 <update_player+0x184>
                    // Do not need to rotate, move
                    int new_x = p->x + dx * PLAYER_MOVE, new_y = p->y + dy * PLAYER_MOVE;
                    try_move_player(p, new_x, new_y);
                } else {
                    // Need to rotate, rotate immediately
                    p->direction = direction;
10001270:	e0bffb17 	ldw	r2,-20(fp)
10001274:	e0fffc17 	ldw	r3,-16(fp)
10001278:	10c00315 	stw	r3,12(r2)
                    p->action = WALK;
1000127c:	e0bffb17 	ldw	r2,-20(fp)
10001280:	10000615 	stw	zero,24(r2)
                    p->frame = 0;
10001284:	e0bffb17 	ldw	r2,-20(fp)
10001288:	10000715 	stw	zero,28(r2)
                    return;
1000128c:	0000d006 	br	100015d0 <update_player+0x4c4>
                }
                p->frame++;
                if (p->frame >= PLAYER_WALK_FRAME_COUNT) p->frame = 0;
10001290:	e0bffb17 	ldw	r2,-20(fp)
10001294:	10000715 	stw	zero,28(r2)
10001298:	00000306 	br	100012a8 <update_player+0x19c>
            } else {
                p->frame = PLAYER_WALK_FRAME_COUNT - 1;
1000129c:	e0bffb17 	ldw	r2,-20(fp)
100012a0:	00c003c4 	movi	r3,15
100012a4:	10c00715 	stw	r3,28(r2)
            }

            if (attack == 1 && p->fire_interval == 0) {
100012a8:	e0bffd17 	ldw	r2,-12(fp)
100012ac:	10800058 	cmpnei	r2,r2,1
100012b0:	1000c21e 	bne	r2,zero,100015bc <update_player+0x4b0>
100012b4:	e0bffb17 	ldw	r2,-20(fp)
100012b8:	10800817 	ldw	r2,32(r2)
100012bc:	1000bf1e 	bne	r2,zero,100015bc <update_player+0x4b0>
                for (int i = 1; i <= PLAYER_FIRE_RANGE_IN_GRID; ++i) {
100012c0:	00800044 	movi	r2,1
100012c4:	e0bff015 	stw	r2,-64(fp)
100012c8:	00005d06 	br	10001440 <update_player+0x334>
                    int gx = grid_x + dx * i;
100012cc:	e17ff017 	ldw	r5,-64(fp)
100012d0:	e13ff117 	ldw	r4,-60(fp)
100012d4:	0004b280 	call	10004b28 <__mulsi3>
100012d8:	1007883a 	mov	r3,r2
100012dc:	e0bff317 	ldw	r2,-52(fp)
100012e0:	1885883a 	add	r2,r3,r2
100012e4:	e0bff715 	stw	r2,-36(fp)
                    int gy = grid_y + dy * i;
100012e8:	e17ff017 	ldw	r5,-64(fp)
100012ec:	e13ff217 	ldw	r4,-56(fp)
100012f0:	0004b280 	call	10004b28 <__mulsi3>
100012f4:	1007883a 	mov	r3,r2
100012f8:	e0bff417 	ldw	r2,-48(fp)
100012fc:	1885883a 	add	r2,r3,r2
10001300:	e0bff815 	stw	r2,-32(fp)
                    if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
10001304:	e0bff717 	ldw	r2,-36(fp)
10001308:	10004a16 	blt	r2,zero,10001434 <update_player+0x328>
1000130c:	e0bff717 	ldw	r2,-36(fp)
10001310:	10800a08 	cmpgei	r2,r2,40
10001314:	1000471e 	bne	r2,zero,10001434 <update_player+0x328>
10001318:	e0bff817 	ldw	r2,-32(fp)
1000131c:	10004516 	blt	r2,zero,10001434 <update_player+0x328>
10001320:	e0bff817 	ldw	r2,-32(fp)
10001324:	10800788 	cmpgei	r2,r2,30
10001328:	1000421e 	bne	r2,zero,10001434 <update_player+0x328>
                        int id = grid[gx][gy];
1000132c:	040400b4 	movhi	r16,4098
10001330:	8428b604 	addi	r16,r16,-23848
10001334:	e0bff717 	ldw	r2,-36(fp)
10001338:	01400784 	movi	r5,30
1000133c:	1009883a 	mov	r4,r2
10001340:	0004b280 	call	10004b28 <__mulsi3>
10001344:	1007883a 	mov	r3,r2
10001348:	e0bff817 	ldw	r2,-32(fp)
1000134c:	1885883a 	add	r2,r3,r2
10001350:	1085883a 	add	r2,r2,r2
10001354:	1085883a 	add	r2,r2,r2
10001358:	8085883a 	add	r2,r16,r2
1000135c:	10800017 	ldw	r2,0(r2)
10001360:	e0bff915 	stw	r2,-28(fp)
                        if (id != INDEX_NOTHING) {
10001364:	e0bff917 	ldw	r2,-28(fp)
10001368:	10803fe0 	cmpeqi	r2,r2,255
1000136c:	1000311e 	bne	r2,zero,10001434 <update_player+0x328>
                            if (id < 0) {  
10001370:	e0bff917 	ldw	r2,-28(fp)
10001374:	10003616 	blt	r2,zero,10001450 <update_player+0x344>
                                // Fiend fire
                                break;  // if not break, it's raygun
                            } else {
                                // Attack zombie
                                if (zombie[id].action != DIE) {
10001378:	008400b4 	movhi	r2,4098
1000137c:	10ad6604 	addi	r2,r2,-19048
10001380:	e0fff917 	ldw	r3,-28(fp)
10001384:	1806917a 	slli	r3,r3,5
10001388:	10c5883a 	add	r2,r2,r3
1000138c:	10800504 	addi	r2,r2,20
10001390:	10800017 	ldw	r2,0(r2)
10001394:	10800120 	cmpeqi	r2,r2,4
10001398:	1000261e 	bne	r2,zero,10001434 <update_player+0x328>
                                    zombie_t *z = &zombie[id];
1000139c:	e0bff917 	ldw	r2,-28(fp)
100013a0:	1006917a 	slli	r3,r2,5
100013a4:	008400b4 	movhi	r2,4098
100013a8:	10ad6604 	addi	r2,r2,-19048
100013ac:	1885883a 	add	r2,r3,r2
100013b0:	e0bffa15 	stw	r2,-24(fp)
                                    z->blood -= PLAYER_ATTACK;
100013b4:	e0bffa17 	ldw	r2,-24(fp)
100013b8:	10800317 	ldw	r2,12(r2)
100013bc:	10fff9c4 	addi	r3,r2,-25
100013c0:	e0bffa17 	ldw	r2,-24(fp)
100013c4:	10c00315 	stw	r3,12(r2)
                                    if (z->blood > 0) {
100013c8:	e0bffa17 	ldw	r2,-24(fp)
100013cc:	10800317 	ldw	r2,12(r2)
100013d0:	0080120e 	bge	zero,r2,1000141c <update_player+0x310>
                                        z->action = HIT;
100013d4:	e0bffa17 	ldw	r2,-24(fp)
100013d8:	00c000c4 	movi	r3,3
100013dc:	10c00515 	stw	r3,20(r2)
                                        z->direction = (p->direction + 4) % 8;  // opposite
100013e0:	e0bffb17 	ldw	r2,-20(fp)
100013e4:	10800317 	ldw	r2,12(r2)
100013e8:	10c00104 	addi	r3,r2,4
100013ec:	00a00034 	movhi	r2,32768
100013f0:	108001c4 	addi	r2,r2,7
100013f4:	1884703a 	and	r2,r3,r2
100013f8:	1000040e 	bge	r2,zero,1000140c <update_player+0x300>
100013fc:	10bfffc4 	addi	r2,r2,-1
10001400:	00fffe04 	movi	r3,-8
10001404:	10c4b03a 	or	r2,r2,r3
10001408:	10800044 	addi	r2,r2,1
1000140c:	1007883a 	mov	r3,r2
10001410:	e0bffa17 	ldw	r2,-24(fp)
10001414:	10c00615 	stw	r3,24(r2)
10001418:	00000306 	br	10001428 <update_player+0x31c>
                                    } else {
                                        z->action = DIE;
1000141c:	e0bffa17 	ldw	r2,-24(fp)
10001420:	00c00104 	movi	r3,4
10001424:	10c00515 	stw	r3,20(r2)
                                    }
                                    z->frame = 0;
10001428:	e0bffa17 	ldw	r2,-24(fp)
1000142c:	10000715 	stw	zero,28(r2)
                                    break;  // if not break, it's raygun
10001430:	00000806 	br	10001454 <update_player+0x348>
            } else {
                p->frame = PLAYER_WALK_FRAME_COUNT - 1;
            }

            if (attack == 1 && p->fire_interval == 0) {
                for (int i = 1; i <= PLAYER_FIRE_RANGE_IN_GRID; ++i) {
10001434:	e0bff017 	ldw	r2,-64(fp)
10001438:	10800044 	addi	r2,r2,1
1000143c:	e0bff015 	stw	r2,-64(fp)
10001440:	e0bff017 	ldw	r2,-64(fp)
10001444:	10800410 	cmplti	r2,r2,16
10001448:	103fa01e 	bne	r2,zero,100012cc <__alt_data_end+0xf80012cc>
1000144c:	00000106 	br	10001454 <update_player+0x348>
                    if (gx >= 0 && gx < GRID_X_COUNT && gy >= 0 && gy < GRID_Y_COUNT) {
                        int id = grid[gx][gy];
                        if (id != INDEX_NOTHING) {
                            if (id < 0) {  
                                // Fiend fire
                                break;  // if not break, it's raygun
10001450:	0001883a 	nop
                                }
                            }
                        }
                    }
                }
                p->fire_interval = PLAYER_FIRE_INTERVAL;
10001454:	e0bffb17 	ldw	r2,-20(fp)
10001458:	00c00284 	movi	r3,10
1000145c:	10c00815 	stw	r3,32(r2)
            }

            break;
10001460:	00005606 	br	100015bc <update_player+0x4b0>
        case HIT:
            try_move_player(p,
                            p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
10001464:	e0bffb17 	ldw	r2,-20(fp)
10001468:	14000017 	ldw	r16,0(r2)
1000146c:	e0bffb17 	ldw	r2,-20(fp)
10001470:	10c00717 	ldw	r3,28(r2)
10001474:	00840074 	movhi	r2,4097
10001478:	1090bd04 	addi	r2,r2,17140
1000147c:	18c7883a 	add	r3,r3,r3
10001480:	18c7883a 	add	r3,r3,r3
10001484:	10c5883a 	add	r2,r2,r3
10001488:	10800017 	ldw	r2,0(r2)
1000148c:	e17ff117 	ldw	r5,-60(fp)
10001490:	1009883a 	mov	r4,r2
10001494:	0004b280 	call	10004b28 <__mulsi3>
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
        case HIT:
            try_move_player(p,
10001498:	80a3c83a 	sub	r17,r16,r2
                            p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
                            p->y - dy * PLAYER_HIT_FRAME_MOVEMENT[p->frame]);
1000149c:	e0bffb17 	ldw	r2,-20(fp)
100014a0:	14000117 	ldw	r16,4(r2)
100014a4:	e0bffb17 	ldw	r2,-20(fp)
100014a8:	10c00717 	ldw	r3,28(r2)
100014ac:	00840074 	movhi	r2,4097
100014b0:	1090bd04 	addi	r2,r2,17140
100014b4:	18c7883a 	add	r3,r3,r3
100014b8:	18c7883a 	add	r3,r3,r3
100014bc:	10c5883a 	add	r2,r2,r3
100014c0:	10800017 	ldw	r2,0(r2)
100014c4:	e17ff217 	ldw	r5,-56(fp)
100014c8:	1009883a 	mov	r4,r2
100014cc:	0004b280 	call	10004b28 <__mulsi3>
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
        case HIT:
            try_move_player(p,
100014d0:	8085c83a 	sub	r2,r16,r2
100014d4:	100d883a 	mov	r6,r2
100014d8:	880b883a 	mov	r5,r17
100014dc:	e13ffb17 	ldw	r4,-20(fp)
100014e0:	0000ec40 	call	10000ec4 <try_move_player>
                            p->x - dx * PLAYER_HIT_FRAME_MOVEMENT[p->frame],
                            p->y - dy * PLAYER_HIT_FRAME_MOVEMENT[p->frame]);
            p->frame++;
100014e4:	e0bffb17 	ldw	r2,-20(fp)
100014e8:	10800717 	ldw	r2,28(r2)
100014ec:	10c00044 	addi	r3,r2,1
100014f0:	e0bffb17 	ldw	r2,-20(fp)
100014f4:	10c00715 	stw	r3,28(r2)
            if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
100014f8:	e0bffb17 	ldw	r2,-20(fp)
100014fc:	10800717 	ldw	r2,28(r2)
10001500:	108002d0 	cmplti	r2,r2,11
10001504:	10002f1e 	bne	r2,zero,100015c4 <update_player+0x4b8>
                if (p->blood > 0) {
10001508:	e0bffb17 	ldw	r2,-20(fp)
1000150c:	10800217 	ldw	r2,8(r2)
10001510:	0080050e 	bge	zero,r2,10001528 <update_player+0x41c>
                    p->action = WALK;
10001514:	e0bffb17 	ldw	r2,-20(fp)
10001518:	10000615 	stw	zero,24(r2)
                    p->frame = 0;
1000151c:	e0bffb17 	ldw	r2,-20(fp)
10001520:	10000715 	stw	zero,28(r2)
                    return;
10001524:	00002a06 	br	100015d0 <update_player+0x4c4>
                } else {
                    p->action = DIE;
10001528:	e0bffb17 	ldw	r2,-20(fp)
1000152c:	00c00104 	movi	r3,4
10001530:	10c00615 	stw	r3,24(r2)
                    p->frame = 0;
10001534:	e0bffb17 	ldw	r2,-20(fp)
10001538:	10000715 	stw	zero,28(r2)
                    return;
1000153c:	00002406 	br	100015d0 <update_player+0x4c4>
                }
            }
            break;
        case DIE:
            p->frame++;
10001540:	e0bffb17 	ldw	r2,-20(fp)
10001544:	10800717 	ldw	r2,28(r2)
10001548:	10c00044 	addi	r3,r2,1
1000154c:	e0bffb17 	ldw	r2,-20(fp)
10001550:	10c00715 	stw	r3,28(r2)
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
10001554:	e0bffb17 	ldw	r2,-20(fp)
10001558:	10800717 	ldw	r2,28(r2)
1000155c:	10800410 	cmplti	r2,r2,16
10001560:	10001a1e 	bne	r2,zero,100015cc <update_player+0x4c0>
                p->enable = 0;
10001564:	e0bffb17 	ldw	r2,-20(fp)
10001568:	10000415 	stw	zero,16(r2)
                grid[grid_x][grid_y] = INDEX_NOTHING;
1000156c:	040400b4 	movhi	r16,4098
10001570:	8428b604 	addi	r16,r16,-23848
10001574:	e0bff317 	ldw	r2,-52(fp)
10001578:	01400784 	movi	r5,30
1000157c:	1009883a 	mov	r4,r2
10001580:	0004b280 	call	10004b28 <__mulsi3>
10001584:	1007883a 	mov	r3,r2
10001588:	e0bff417 	ldw	r2,-48(fp)
1000158c:	1885883a 	add	r2,r3,r2
10001590:	1085883a 	add	r2,r2,r2
10001594:	1085883a 	add	r2,r2,r2
10001598:	8085883a 	add	r2,r16,r2
1000159c:	00c03fc4 	movi	r3,255
100015a0:	10c00015 	stw	r3,0(r2)
                return;
100015a4:	00000a06 	br	100015d0 <update_player+0x4c4>
            }
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
100015a8:	01040074 	movhi	r4,4097
100015ac:	2110cd04 	addi	r4,r4,17204
100015b0:	0004c7c0 	call	10004c7c <puts>
            break;
100015b4:	0001883a 	nop
100015b8:	00000506 	br	100015d0 <update_player+0x4c4>
                    }
                }
                p->fire_interval = PLAYER_FIRE_INTERVAL;
            }

            break;
100015bc:	0001883a 	nop
100015c0:	00000306 	br	100015d0 <update_player+0x4c4>
                    p->action = DIE;
                    p->frame = 0;
                    return;
                }
            }
            break;
100015c4:	0001883a 	nop
100015c8:	00000106 	br	100015d0 <update_player+0x4c4>
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
                p->enable = 0;
                grid[grid_x][grid_y] = INDEX_NOTHING;
                return;
            }
            break;
100015cc:	0001883a 	nop
        default:
            printf("INVALID PLAYER STATE!\n");
            break;
    }
}
100015d0:	e6fffe04 	addi	sp,fp,-8
100015d4:	dfc00317 	ldw	ra,12(sp)
100015d8:	df000217 	ldw	fp,8(sp)
100015dc:	dc400117 	ldw	r17,4(sp)
100015e0:	dc000017 	ldw	r16,0(sp)
100015e4:	dec00404 	addi	sp,sp,16
100015e8:	f800283a 	ret

100015ec <init_game>:

void init_game() {
100015ec:	defffa04 	addi	sp,sp,-24
100015f0:	dfc00515 	stw	ra,20(sp)
100015f4:	df000415 	stw	fp,16(sp)
100015f8:	dc400315 	stw	r17,12(sp)
100015fc:	dc000215 	stw	r16,8(sp)
10001600:	df000404 	addi	fp,sp,16
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
10001604:	e03ffc15 	stw	zero,-16(fp)
10001608:	00001906 	br	10001670 <init_game+0x84>
        for (j = 0; j < GRID_Y_COUNT; j++) {
1000160c:	e03ffd15 	stw	zero,-12(fp)
10001610:	00001106 	br	10001658 <init_game+0x6c>
            grid[i][j] = INDEX_NOTHING;
10001614:	040400b4 	movhi	r16,4098
10001618:	8428b604 	addi	r16,r16,-23848
1000161c:	e0bffc17 	ldw	r2,-16(fp)
10001620:	01400784 	movi	r5,30
10001624:	1009883a 	mov	r4,r2
10001628:	0004b280 	call	10004b28 <__mulsi3>
1000162c:	1007883a 	mov	r3,r2
10001630:	e0bffd17 	ldw	r2,-12(fp)
10001634:	1885883a 	add	r2,r3,r2
10001638:	1085883a 	add	r2,r2,r2
1000163c:	1085883a 	add	r2,r2,r2
10001640:	8085883a 	add	r2,r16,r2
10001644:	00c03fc4 	movi	r3,255
10001648:	10c00015 	stw	r3,0(r2)
}

void init_game() {
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
        for (j = 0; j < GRID_Y_COUNT; j++) {
1000164c:	e0bffd17 	ldw	r2,-12(fp)
10001650:	10800044 	addi	r2,r2,1
10001654:	e0bffd15 	stw	r2,-12(fp)
10001658:	e0bffd17 	ldw	r2,-12(fp)
1000165c:	10800790 	cmplti	r2,r2,30
10001660:	103fec1e 	bne	r2,zero,10001614 <__alt_data_end+0xf8001614>
    }
}

void init_game() {
    int i, j;
    for (i = 0; i < GRID_X_COUNT; i++) {
10001664:	e0bffc17 	ldw	r2,-16(fp)
10001668:	10800044 	addi	r2,r2,1
1000166c:	e0bffc15 	stw	r2,-16(fp)
10001670:	e0bffc17 	ldw	r2,-16(fp)
10001674:	10800a10 	cmplti	r2,r2,40
10001678:	103fe41e 	bne	r2,zero,1000160c <__alt_data_end+0xf800160c>
        for (j = 0; j < GRID_Y_COUNT; j++) {
            grid[i][j] = INDEX_NOTHING;
        }
    }

    player_1.x = PLAYER_1_BORN_X;
1000167c:	008400b4 	movhi	r2,4098
10001680:	10ae0604 	addi	r2,r2,-18408
10001684:	00c03544 	movi	r3,213
10001688:	10c00015 	stw	r3,0(r2)
    player_1.y = PLAYER_1_BORN_Y;
1000168c:	008400b4 	movhi	r2,4098
10001690:	10ae0604 	addi	r2,r2,-18408
10001694:	00c03c04 	movi	r3,240
10001698:	10c00115 	stw	r3,4(r2)
    player_1.blood = 100;
1000169c:	008400b4 	movhi	r2,4098
100016a0:	10ae0604 	addi	r2,r2,-18408
100016a4:	00c01904 	movi	r3,100
100016a8:	10c00215 	stw	r3,8(r2)
    grid[TO_GRID(player_1.x)][TO_GRID(player_1.y)] = INDEX_PLAYER_1;
100016ac:	008400b4 	movhi	r2,4098
100016b0:	10ae0604 	addi	r2,r2,-18408
100016b4:	10800017 	ldw	r2,0(r2)
100016b8:	1000010e 	bge	r2,zero,100016c0 <init_game+0xd4>
100016bc:	108003c4 	addi	r2,r2,15
100016c0:	1005d13a 	srai	r2,r2,4
100016c4:	1007883a 	mov	r3,r2
100016c8:	008400b4 	movhi	r2,4098
100016cc:	10ae0604 	addi	r2,r2,-18408
100016d0:	10800117 	ldw	r2,4(r2)
100016d4:	1000010e 	bge	r2,zero,100016dc <init_game+0xf0>
100016d8:	108003c4 	addi	r2,r2,15
100016dc:	1005d13a 	srai	r2,r2,4
100016e0:	1023883a 	mov	r17,r2
100016e4:	040400b4 	movhi	r16,4098
100016e8:	8428b604 	addi	r16,r16,-23848
100016ec:	01400784 	movi	r5,30
100016f0:	1809883a 	mov	r4,r3
100016f4:	0004b280 	call	10004b28 <__mulsi3>
100016f8:	1445883a 	add	r2,r2,r17
100016fc:	1085883a 	add	r2,r2,r2
10001700:	1085883a 	add	r2,r2,r2
10001704:	8085883a 	add	r2,r16,r2
10001708:	00ffffc4 	movi	r3,-1
1000170c:	10c00015 	stw	r3,0(r2)
    player_1.enable = 1;
10001710:	008400b4 	movhi	r2,4098
10001714:	10ae0604 	addi	r2,r2,-18408
10001718:	00c00044 	movi	r3,1
1000171c:	10c00415 	stw	r3,16(r2)
    player_1.credit = 0;
10001720:	008400b4 	movhi	r2,4098
10001724:	10ae0604 	addi	r2,r2,-18408
10001728:	10000515 	stw	zero,20(r2)
    player_1.action = WALK;
1000172c:	008400b4 	movhi	r2,4098
10001730:	10ae0604 	addi	r2,r2,-18408
10001734:	10000615 	stw	zero,24(r2)
    player_1.direction = 0;
10001738:	008400b4 	movhi	r2,4098
1000173c:	10ae0604 	addi	r2,r2,-18408
10001740:	10000315 	stw	zero,12(r2)
    player_1.frame = 0;
10001744:	008400b4 	movhi	r2,4098
10001748:	10ae0604 	addi	r2,r2,-18408
1000174c:	10000715 	stw	zero,28(r2)
    player_1.fire_interval = 0;
10001750:	008400b4 	movhi	r2,4098
10001754:	10ae0604 	addi	r2,r2,-18408
10001758:	10000815 	stw	zero,32(r2)

    player_2.x = PLAYER_2_BORN_X;
1000175c:	008400b4 	movhi	r2,4098
10001760:	10ae0f04 	addi	r2,r2,-18372
10001764:	00c06a84 	movi	r3,426
10001768:	10c00015 	stw	r3,0(r2)
    player_2.y = PLAYER_2_BORN_Y;
1000176c:	008400b4 	movhi	r2,4098
10001770:	10ae0f04 	addi	r2,r2,-18372
10001774:	00c03c04 	movi	r3,240
10001778:	10c00115 	stw	r3,4(r2)
    player_2.blood = 100;
1000177c:	008400b4 	movhi	r2,4098
10001780:	10ae0f04 	addi	r2,r2,-18372
10001784:	00c01904 	movi	r3,100
10001788:	10c00215 	stw	r3,8(r2)
    grid[TO_GRID(player_2.x)][TO_GRID(player_2.y)] = INDEX_PLAYER_2;
1000178c:	008400b4 	movhi	r2,4098
10001790:	10ae0f04 	addi	r2,r2,-18372
10001794:	10800017 	ldw	r2,0(r2)
10001798:	1000010e 	bge	r2,zero,100017a0 <init_game+0x1b4>
1000179c:	108003c4 	addi	r2,r2,15
100017a0:	1005d13a 	srai	r2,r2,4
100017a4:	1007883a 	mov	r3,r2
100017a8:	008400b4 	movhi	r2,4098
100017ac:	10ae0f04 	addi	r2,r2,-18372
100017b0:	10800117 	ldw	r2,4(r2)
100017b4:	1000010e 	bge	r2,zero,100017bc <init_game+0x1d0>
100017b8:	108003c4 	addi	r2,r2,15
100017bc:	1005d13a 	srai	r2,r2,4
100017c0:	1023883a 	mov	r17,r2
100017c4:	040400b4 	movhi	r16,4098
100017c8:	8428b604 	addi	r16,r16,-23848
100017cc:	01400784 	movi	r5,30
100017d0:	1809883a 	mov	r4,r3
100017d4:	0004b280 	call	10004b28 <__mulsi3>
100017d8:	1445883a 	add	r2,r2,r17
100017dc:	1085883a 	add	r2,r2,r2
100017e0:	1085883a 	add	r2,r2,r2
100017e4:	8085883a 	add	r2,r16,r2
100017e8:	00ffff84 	movi	r3,-2
100017ec:	10c00015 	stw	r3,0(r2)
    player_2.enable = 1;
100017f0:	008400b4 	movhi	r2,4098
100017f4:	10ae0f04 	addi	r2,r2,-18372
100017f8:	00c00044 	movi	r3,1
100017fc:	10c00415 	stw	r3,16(r2)
    player_2.credit = 0;
10001800:	008400b4 	movhi	r2,4098
10001804:	10ae0f04 	addi	r2,r2,-18372
10001808:	10000515 	stw	zero,20(r2)
    player_2.action = WALK;
1000180c:	008400b4 	movhi	r2,4098
10001810:	10ae0f04 	addi	r2,r2,-18372
10001814:	10000615 	stw	zero,24(r2)
    player_2.direction = 0;
10001818:	008400b4 	movhi	r2,4098
1000181c:	10ae0f04 	addi	r2,r2,-18372
10001820:	10000315 	stw	zero,12(r2)
    player_2.frame = 0;
10001824:	008400b4 	movhi	r2,4098
10001828:	10ae0f04 	addi	r2,r2,-18372
1000182c:	10000715 	stw	zero,28(r2)
    player_2.fire_interval = 0;
10001830:	008400b4 	movhi	r2,4098
10001834:	10ae0f04 	addi	r2,r2,-18372
10001838:	10000815 	stw	zero,32(r2)

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
1000183c:	e03ffc15 	stw	zero,-16(fp)
10001840:	00001106 	br	10001888 <init_game+0x29c>
        zombie[i].index = i;
10001844:	008400b4 	movhi	r2,4098
10001848:	10ad6604 	addi	r2,r2,-19048
1000184c:	e0fffc17 	ldw	r3,-16(fp)
10001850:	1806917a 	slli	r3,r3,5
10001854:	10c5883a 	add	r2,r2,r3
10001858:	e0fffc17 	ldw	r3,-16(fp)
1000185c:	10c00015 	stw	r3,0(r2)
        zombie[i].enable = 0;
10001860:	008400b4 	movhi	r2,4098
10001864:	10ad6604 	addi	r2,r2,-19048
10001868:	e0fffc17 	ldw	r3,-16(fp)
1000186c:	1806917a 	slli	r3,r3,5
10001870:	10c5883a 	add	r2,r2,r3
10001874:	10800404 	addi	r2,r2,16
10001878:	10000015 	stw	zero,0(r2)
    player_2.action = WALK;
    player_2.direction = 0;
    player_2.frame = 0;
    player_2.fire_interval = 0;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
1000187c:	e0bffc17 	ldw	r2,-16(fp)
10001880:	10800044 	addi	r2,r2,1
10001884:	e0bffc15 	stw	r2,-16(fp)
10001888:	e0bffc17 	ldw	r2,-16(fp)
1000188c:	10800510 	cmplti	r2,r2,20
10001890:	103fec1e 	bne	r2,zero,10001844 <__alt_data_end+0xf8001844>
        zombie[i].index = i;
        zombie[i].enable = 0;
    }
}
10001894:	0001883a 	nop
10001898:	e6fffe04 	addi	sp,fp,-8
1000189c:	dfc00317 	ldw	ra,12(sp)
100018a0:	df000217 	ldw	fp,8(sp)
100018a4:	dc400117 	ldw	r17,4(sp)
100018a8:	dc000017 	ldw	r16,0(sp)
100018ac:	dec00404 	addi	sp,sp,16
100018b0:	f800283a 	ret

100018b4 <try_add_zombie>:

int try_add_zombie(zombie_t *z) {
100018b4:	defffa04 	addi	sp,sp,-24
100018b8:	dfc00515 	stw	ra,20(sp)
100018bc:	df000415 	stw	fp,16(sp)
100018c0:	dc800315 	stw	r18,12(sp)
100018c4:	dc400215 	stw	r17,8(sp)
100018c8:	dc000115 	stw	r16,4(sp)
100018cc:	df000404 	addi	fp,sp,16
100018d0:	e13ffc15 	stw	r4,-16(fp)
    if (z->enable != 0) return 1;
100018d4:	e0bffc17 	ldw	r2,-16(fp)
100018d8:	10800417 	ldw	r2,16(r2)
100018dc:	10000226 	beq	r2,zero,100018e8 <try_add_zombie+0x34>
100018e0:	00800044 	movi	r2,1
100018e4:	00003306 	br	100019b4 <try_add_zombie+0x100>

    // Check whether there is zombie at the born place
    if (grid[TO_GRID(ZOMBIE_BORN_X)][TO_GRID(ZOMBIE_BORN_Y)] != INDEX_NOTHING) {
100018e8:	008400b4 	movhi	r2,4098
100018ec:	10a8b604 	addi	r2,r2,-23848
100018f0:	10825c17 	ldw	r2,2416(r2)
100018f4:	10803fe0 	cmpeqi	r2,r2,255
100018f8:	1000021e 	bne	r2,zero,10001904 <try_add_zombie+0x50>
        return 1;
100018fc:	00800044 	movi	r2,1
10001900:	00002c06 	br	100019b4 <try_add_zombie+0x100>
    } else {
        z->x = ZOMBIE_BORN_X;
10001904:	e0bffc17 	ldw	r2,-16(fp)
10001908:	00c05004 	movi	r3,320
1000190c:	10c00115 	stw	r3,4(r2)
        z->y = ZOMBIE_BORN_Y;
10001910:	e0bffc17 	ldw	r2,-16(fp)
10001914:	00c01004 	movi	r3,64
10001918:	10c00215 	stw	r3,8(r2)
        z->enable = 1;
1000191c:	e0bffc17 	ldw	r2,-16(fp)
10001920:	00c00044 	movi	r3,1
10001924:	10c00415 	stw	r3,16(r2)
        z->blood = 100;
10001928:	e0bffc17 	ldw	r2,-16(fp)
1000192c:	00c01904 	movi	r3,100
10001930:	10c00315 	stw	r3,12(r2)
        z->direction = 4;
10001934:	e0bffc17 	ldw	r2,-16(fp)
10001938:	00c00104 	movi	r3,4
1000193c:	10c00615 	stw	r3,24(r2)
        z->action = WALK;
10001940:	e0bffc17 	ldw	r2,-16(fp)
10001944:	10000515 	stw	zero,20(r2)
        z->frame = 0;
10001948:	e0bffc17 	ldw	r2,-16(fp)
1000194c:	10000715 	stw	zero,28(r2)
        grid[TO_GRID(z->x)][TO_GRID(z->y)] = z->index;
10001950:	e0bffc17 	ldw	r2,-16(fp)
10001954:	10800117 	ldw	r2,4(r2)
10001958:	1000010e 	bge	r2,zero,10001960 <try_add_zombie+0xac>
1000195c:	108003c4 	addi	r2,r2,15
10001960:	1005d13a 	srai	r2,r2,4
10001964:	1007883a 	mov	r3,r2
10001968:	e0bffc17 	ldw	r2,-16(fp)
1000196c:	10800217 	ldw	r2,8(r2)
10001970:	1000010e 	bge	r2,zero,10001978 <try_add_zombie+0xc4>
10001974:	108003c4 	addi	r2,r2,15
10001978:	1005d13a 	srai	r2,r2,4
1000197c:	1025883a 	mov	r18,r2
10001980:	e0bffc17 	ldw	r2,-16(fp)
10001984:	14400017 	ldw	r17,0(r2)
10001988:	040400b4 	movhi	r16,4098
1000198c:	8428b604 	addi	r16,r16,-23848
10001990:	01400784 	movi	r5,30
10001994:	1809883a 	mov	r4,r3
10001998:	0004b280 	call	10004b28 <__mulsi3>
1000199c:	1485883a 	add	r2,r2,r18
100019a0:	1085883a 	add	r2,r2,r2
100019a4:	1085883a 	add	r2,r2,r2
100019a8:	8085883a 	add	r2,r16,r2
100019ac:	14400015 	stw	r17,0(r2)
        return 0;
100019b0:	0005883a 	mov	r2,zero
    }
}
100019b4:	e6fffd04 	addi	sp,fp,-12
100019b8:	dfc00417 	ldw	ra,16(sp)
100019bc:	df000317 	ldw	fp,12(sp)
100019c0:	dc800217 	ldw	r18,8(sp)
100019c4:	dc400117 	ldw	r17,4(sp)
100019c8:	dc000017 	ldw	r16,0(sp)
100019cc:	dec00504 	addi	sp,sp,20
100019d0:	f800283a 	ret

100019d4 <draw_zombie>:

void draw_zombie(const zombie_t *z) {
100019d4:	deffef04 	addi	sp,sp,-68
100019d8:	dfc01015 	stw	ra,64(sp)
100019dc:	df000f15 	stw	fp,60(sp)
100019e0:	dc400e15 	stw	r17,56(sp)
100019e4:	dc000d15 	stw	r16,52(sp)
100019e8:	df000f04 	addi	fp,sp,60
100019ec:	e13ffd15 	stw	r4,-12(fp)
    int width, height, flip_x, half_width, half_height;
    switch (z->action) {
100019f0:	e0bffd17 	ldw	r2,-12(fp)
100019f4:	10800517 	ldw	r2,20(r2)
100019f8:	10c00168 	cmpgeui	r3,r2,5
100019fc:	1800b31e 	bne	r3,zero,10001ccc <draw_zombie+0x2f8>
10001a00:	100690ba 	slli	r3,r2,2
10001a04:	00840034 	movhi	r2,4096
10001a08:	10868604 	addi	r2,r2,6680
10001a0c:	1885883a 	add	r2,r3,r2
10001a10:	10800017 	ldw	r2,0(r2)
10001a14:	1000683a 	jmp	r2
10001a18:	10001a2c 	andhi	zero,r2,104
10001a1c:	10001ab8 	rdprs	zero,r2,106
10001a20:	10001b28 	cmpgeui	zero,r2,108
10001a24:	10001bb4 	orhi	zero,r2,110
10001a28:	10001c40 	call	110001c4 <_gp+0xfe096c>
        case WALK:
            width = ZOMBIE_WALK_WIDTH[z->direction];
10001a2c:	e0bffd17 	ldw	r2,-12(fp)
10001a30:	10c00617 	ldw	r3,24(r2)
10001a34:	00840074 	movhi	r2,4097
10001a38:	1093bb04 	addi	r2,r2,20204
10001a3c:	18c7883a 	add	r3,r3,r3
10001a40:	18c7883a 	add	r3,r3,r3
10001a44:	10c5883a 	add	r2,r2,r3
10001a48:	10800017 	ldw	r2,0(r2)
10001a4c:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_WALK_HEIGHT[z->direction];
10001a50:	e0bffd17 	ldw	r2,-12(fp)
10001a54:	10c00617 	ldw	r3,24(r2)
10001a58:	00840074 	movhi	r2,4097
10001a5c:	1093c304 	addi	r2,r2,20236
10001a60:	18c7883a 	add	r3,r3,r3
10001a64:	18c7883a 	add	r3,r3,r3
10001a68:	10c5883a 	add	r2,r2,r3
10001a6c:	10800017 	ldw	r2,0(r2)
10001a70:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_WALK_FLIP_X[z->direction];
10001a74:	e0bffd17 	ldw	r2,-12(fp)
10001a78:	10c00617 	ldw	r3,24(r2)
10001a7c:	00840074 	movhi	r2,4097
10001a80:	1093cb04 	addi	r2,r2,20268
10001a84:	18c7883a 	add	r3,r3,r3
10001a88:	18c7883a 	add	r3,r3,r3
10001a8c:	10c5883a 	add	r2,r2,r3
10001a90:	10800017 	ldw	r2,0(r2)
10001a94:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) {
10001a98:	e0bffd17 	ldw	r2,-12(fp)
10001a9c:	10800717 	ldw	r2,28(r2)
10001aa0:	10800410 	cmplti	r2,r2,16
10001aa4:	10008d1e 	bne	r2,zero,10001cdc <draw_zombie+0x308>
                printf("EXCEED ZOMBIE_WALK_FRAME_COUNT!\n");
10001aa8:	01040074 	movhi	r4,4097
10001aac:	2110d304 	addi	r4,r4,17228
10001ab0:	0004c7c0 	call	10004c7c <puts>
                return;
10001ab4:	00013306 	br	10001f84 <draw_zombie+0x5b0>
            }
            break;
        case ROTATE:
            width = ZOMBIE_WALK_WIDTH[z->direction];
10001ab8:	e0bffd17 	ldw	r2,-12(fp)
10001abc:	10c00617 	ldw	r3,24(r2)
10001ac0:	00840074 	movhi	r2,4097
10001ac4:	1093bb04 	addi	r2,r2,20204
10001ac8:	18c7883a 	add	r3,r3,r3
10001acc:	18c7883a 	add	r3,r3,r3
10001ad0:	10c5883a 	add	r2,r2,r3
10001ad4:	10800017 	ldw	r2,0(r2)
10001ad8:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_WALK_HEIGHT[z->direction];
10001adc:	e0bffd17 	ldw	r2,-12(fp)
10001ae0:	10c00617 	ldw	r3,24(r2)
10001ae4:	00840074 	movhi	r2,4097
10001ae8:	1093c304 	addi	r2,r2,20236
10001aec:	18c7883a 	add	r3,r3,r3
10001af0:	18c7883a 	add	r3,r3,r3
10001af4:	10c5883a 	add	r2,r2,r3
10001af8:	10800017 	ldw	r2,0(r2)
10001afc:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_WALK_FLIP_X[z->direction];
10001b00:	e0bffd17 	ldw	r2,-12(fp)
10001b04:	10c00617 	ldw	r3,24(r2)
10001b08:	00840074 	movhi	r2,4097
10001b0c:	1093cb04 	addi	r2,r2,20268
10001b10:	18c7883a 	add	r3,r3,r3
10001b14:	18c7883a 	add	r3,r3,r3
10001b18:	10c5883a 	add	r2,r2,r3
10001b1c:	10800017 	ldw	r2,0(r2)
10001b20:	e0bff615 	stw	r2,-40(fp)
            break;
10001b24:	00007406 	br	10001cf8 <draw_zombie+0x324>
        case ATTACK:
            width = ZOMBIE_ATTACK_WIDTH[z->direction];
10001b28:	e0bffd17 	ldw	r2,-12(fp)
10001b2c:	10c00617 	ldw	r3,24(r2)
10001b30:	00840074 	movhi	r2,4097
10001b34:	10955b04 	addi	r2,r2,21868
10001b38:	18c7883a 	add	r3,r3,r3
10001b3c:	18c7883a 	add	r3,r3,r3
10001b40:	10c5883a 	add	r2,r2,r3
10001b44:	10800017 	ldw	r2,0(r2)
10001b48:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_ATTACK_HEIGHT[z->direction];
10001b4c:	e0bffd17 	ldw	r2,-12(fp)
10001b50:	10c00617 	ldw	r3,24(r2)
10001b54:	00840074 	movhi	r2,4097
10001b58:	10956304 	addi	r2,r2,21900
10001b5c:	18c7883a 	add	r3,r3,r3
10001b60:	18c7883a 	add	r3,r3,r3
10001b64:	10c5883a 	add	r2,r2,r3
10001b68:	10800017 	ldw	r2,0(r2)
10001b6c:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_ATTACK_FLIP_X[z->direction];
10001b70:	e0bffd17 	ldw	r2,-12(fp)
10001b74:	10c00617 	ldw	r3,24(r2)
10001b78:	00840074 	movhi	r2,4097
10001b7c:	10956b04 	addi	r2,r2,21932
10001b80:	18c7883a 	add	r3,r3,r3
10001b84:	18c7883a 	add	r3,r3,r3
10001b88:	10c5883a 	add	r2,r2,r3
10001b8c:	10800017 	ldw	r2,0(r2)
10001b90:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
10001b94:	e0bffd17 	ldw	r2,-12(fp)
10001b98:	10800717 	ldw	r2,28(r2)
10001b9c:	10800310 	cmplti	r2,r2,12
10001ba0:	1000501e 	bne	r2,zero,10001ce4 <draw_zombie+0x310>
                printf("EXCEED ZOMBIE_ATTACK_FRAME_COUNT!\n");
10001ba4:	01040074 	movhi	r4,4097
10001ba8:	2110db04 	addi	r4,r4,17260
10001bac:	0004c7c0 	call	10004c7c <puts>
                return;
10001bb0:	0000f406 	br	10001f84 <draw_zombie+0x5b0>
            }
            break;
        case HIT:
            width = ZOMBIE_HIT_FRONT_WIDTH[z->direction];
10001bb4:	e0bffd17 	ldw	r2,-12(fp)
10001bb8:	10c00617 	ldw	r3,24(r2)
10001bbc:	00840074 	movhi	r2,4097
10001bc0:	10945304 	addi	r2,r2,20812
10001bc4:	18c7883a 	add	r3,r3,r3
10001bc8:	18c7883a 	add	r3,r3,r3
10001bcc:	10c5883a 	add	r2,r2,r3
10001bd0:	10800017 	ldw	r2,0(r2)
10001bd4:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_HIT_FRONT_HEIGHT[z->direction];
10001bd8:	e0bffd17 	ldw	r2,-12(fp)
10001bdc:	10c00617 	ldw	r3,24(r2)
10001be0:	00840074 	movhi	r2,4097
10001be4:	10945b04 	addi	r2,r2,20844
10001be8:	18c7883a 	add	r3,r3,r3
10001bec:	18c7883a 	add	r3,r3,r3
10001bf0:	10c5883a 	add	r2,r2,r3
10001bf4:	10800017 	ldw	r2,0(r2)
10001bf8:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_HIT_FRONT_FLIP_X[z->direction];
10001bfc:	e0bffd17 	ldw	r2,-12(fp)
10001c00:	10c00617 	ldw	r3,24(r2)
10001c04:	00840074 	movhi	r2,4097
10001c08:	10946304 	addi	r2,r2,20876
10001c0c:	18c7883a 	add	r3,r3,r3
10001c10:	18c7883a 	add	r3,r3,r3
10001c14:	10c5883a 	add	r2,r2,r3
10001c18:	10800017 	ldw	r2,0(r2)
10001c1c:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
10001c20:	e0bffd17 	ldw	r2,-12(fp)
10001c24:	10800717 	ldw	r2,28(r2)
10001c28:	108002d0 	cmplti	r2,r2,11
10001c2c:	10002f1e 	bne	r2,zero,10001cec <draw_zombie+0x318>
                printf("EXCEED ZOMBIE_HIT_FRONT_FRAME_COUNT!\n");
10001c30:	01040074 	movhi	r4,4097
10001c34:	2110e404 	addi	r4,r4,17296
10001c38:	0004c7c0 	call	10004c7c <puts>
                return;
10001c3c:	0000d106 	br	10001f84 <draw_zombie+0x5b0>
            }
            break;
        case DIE:
            width = ZOMBIE_DIE_WIDTH[z->direction];
10001c40:	e0bffd17 	ldw	r2,-12(fp)
10001c44:	10c00617 	ldw	r3,24(r2)
10001c48:	00840074 	movhi	r2,4097
10001c4c:	1094c304 	addi	r2,r2,21260
10001c50:	18c7883a 	add	r3,r3,r3
10001c54:	18c7883a 	add	r3,r3,r3
10001c58:	10c5883a 	add	r2,r2,r3
10001c5c:	10800017 	ldw	r2,0(r2)
10001c60:	e0bff415 	stw	r2,-48(fp)
            height = ZOMBIE_DIE_HEIGHT[z->direction];
10001c64:	e0bffd17 	ldw	r2,-12(fp)
10001c68:	10c00617 	ldw	r3,24(r2)
10001c6c:	00840074 	movhi	r2,4097
10001c70:	1094cb04 	addi	r2,r2,21292
10001c74:	18c7883a 	add	r3,r3,r3
10001c78:	18c7883a 	add	r3,r3,r3
10001c7c:	10c5883a 	add	r2,r2,r3
10001c80:	10800017 	ldw	r2,0(r2)
10001c84:	e0bff515 	stw	r2,-44(fp)
            flip_x = ZOMBIE_DIE_FLIP_X[z->direction];
10001c88:	e0bffd17 	ldw	r2,-12(fp)
10001c8c:	10c00617 	ldw	r3,24(r2)
10001c90:	00840074 	movhi	r2,4097
10001c94:	1094d304 	addi	r2,r2,21324
10001c98:	18c7883a 	add	r3,r3,r3
10001c9c:	18c7883a 	add	r3,r3,r3
10001ca0:	10c5883a 	add	r2,r2,r3
10001ca4:	10800017 	ldw	r2,0(r2)
10001ca8:	e0bff615 	stw	r2,-40(fp)
            if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
10001cac:	e0bffd17 	ldw	r2,-12(fp)
10001cb0:	10800717 	ldw	r2,28(r2)
10001cb4:	10800410 	cmplti	r2,r2,16
10001cb8:	10000e1e 	bne	r2,zero,10001cf4 <draw_zombie+0x320>
                printf("EXCEED ZOMBIE_DIE_FRAME_COUNT!\n");
10001cbc:	01040074 	movhi	r4,4097
10001cc0:	2110ee04 	addi	r4,r4,17336
10001cc4:	0004c7c0 	call	10004c7c <puts>
                return;
10001cc8:	0000ae06 	br	10001f84 <draw_zombie+0x5b0>
            }
            break;
        default:
            printf("INVALID ZOMBIE STATE!\n");
10001ccc:	01040074 	movhi	r4,4097
10001cd0:	2110f604 	addi	r4,r4,17368
10001cd4:	0004c7c0 	call	10004c7c <puts>
            return;
10001cd8:	0000aa06 	br	10001f84 <draw_zombie+0x5b0>
            flip_x = ZOMBIE_WALK_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_WALK_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_WALK_FRAME_COUNT!\n");
                return;
            }
            break;
10001cdc:	0001883a 	nop
10001ce0:	00000506 	br	10001cf8 <draw_zombie+0x324>
            flip_x = ZOMBIE_ATTACK_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_ATTACK_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_ATTACK_FRAME_COUNT!\n");
                return;
            }
            break;
10001ce4:	0001883a 	nop
10001ce8:	00000306 	br	10001cf8 <draw_zombie+0x324>
            flip_x = ZOMBIE_HIT_FRONT_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_HIT_FRONT_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_HIT_FRONT_FRAME_COUNT!\n");
                return;
            }
            break;
10001cec:	0001883a 	nop
10001cf0:	00000106 	br	10001cf8 <draw_zombie+0x324>
            flip_x = ZOMBIE_DIE_FLIP_X[z->direction];
            if (z->frame >= ZOMBIE_DIE_FRAME_COUNT) {
                printf("EXCEED ZOMBIE_DIE_FRAME_COUNT!\n");
                return;
            }
            break;
10001cf4:	0001883a 	nop
        default:
            printf("INVALID ZOMBIE STATE!\n");
            return;
    }

    half_width = width / 2;
10001cf8:	e0bff417 	ldw	r2,-48(fp)
10001cfc:	1006d7fa 	srli	r3,r2,31
10001d00:	1885883a 	add	r2,r3,r2
10001d04:	1005d07a 	srai	r2,r2,1
10001d08:	e0bff715 	stw	r2,-36(fp)
    half_height = height / 2;
10001d0c:	e0bff517 	ldw	r2,-44(fp)
10001d10:	1006d7fa 	srli	r3,r2,31
10001d14:	1885883a 	add	r2,r3,r2
10001d18:	1005d07a 	srai	r2,r2,1
10001d1c:	e0bff815 	stw	r2,-32(fp)

    int start_x = z->x - half_width;
10001d20:	e0bffd17 	ldw	r2,-12(fp)
10001d24:	10c00117 	ldw	r3,4(r2)
10001d28:	e0bff717 	ldw	r2,-36(fp)
10001d2c:	1885c83a 	sub	r2,r3,r2
10001d30:	e0bff915 	stw	r2,-28(fp)
    int end_x = z->x + (width - half_width);
10001d34:	e0bffd17 	ldw	r2,-12(fp)
10001d38:	10c00117 	ldw	r3,4(r2)
10001d3c:	e13ff417 	ldw	r4,-48(fp)
10001d40:	e0bff717 	ldw	r2,-36(fp)
10001d44:	2085c83a 	sub	r2,r4,r2
10001d48:	1885883a 	add	r2,r3,r2
10001d4c:	e0bffa15 	stw	r2,-24(fp)
    int start_y = z->y - half_height;
10001d50:	e0bffd17 	ldw	r2,-12(fp)
10001d54:	10c00217 	ldw	r3,8(r2)
10001d58:	e0bff817 	ldw	r2,-32(fp)
10001d5c:	1885c83a 	sub	r2,r3,r2
10001d60:	e0bffb15 	stw	r2,-20(fp)
    int end_y = z->y + (height - half_height);
10001d64:	e0bffd17 	ldw	r2,-12(fp)
10001d68:	10c00217 	ldw	r3,8(r2)
10001d6c:	e13ff517 	ldw	r4,-44(fp)
10001d70:	e0bff817 	ldw	r2,-32(fp)
10001d74:	2085c83a 	sub	r2,r4,r2
10001d78:	1885883a 	add	r2,r3,r2
10001d7c:	e0bffc15 	stw	r2,-16(fp)

    switch (z->action) {
10001d80:	e0bffd17 	ldw	r2,-12(fp)
10001d84:	10800517 	ldw	r2,20(r2)
10001d88:	10c00168 	cmpgeui	r3,r2,5
10001d8c:	1800791e 	bne	r3,zero,10001f74 <draw_zombie+0x5a0>
10001d90:	100690ba 	slli	r3,r2,2
10001d94:	00840034 	movhi	r2,4096
10001d98:	10876a04 	addi	r2,r2,7592
10001d9c:	1885883a 	add	r2,r3,r2
10001da0:	10800017 	ldw	r2,0(r2)
10001da4:	1000683a 	jmp	r2
10001da8:	10001dbc 	xorhi	zero,r2,118
10001dac:	10001e14 	ori	zero,r2,120
10001db0:	10001e5c 	xori	zero,r2,121
10001db4:	10001ebc 	xorhi	zero,r2,122
10001db8:	10001f1c 	xori	zero,r2,124
        case WALK:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_WALK_OFFSET[z->direction][z->frame], 0, flip_x);
10001dbc:	e0bffd17 	ldw	r2,-12(fp)
10001dc0:	11000617 	ldw	r4,24(r2)
10001dc4:	e0bffd17 	ldw	r2,-12(fp)
10001dc8:	10c00717 	ldw	r3,28(r2)
10001dcc:	00840074 	movhi	r2,4097
10001dd0:	1093d304 	addi	r2,r2,20300
10001dd4:	2008913a 	slli	r4,r4,4
10001dd8:	20c7883a 	add	r3,r4,r3
10001ddc:	18c7883a 	add	r3,r3,r3
10001de0:	18c7883a 	add	r3,r3,r3
10001de4:	10c5883a 	add	r2,r2,r3
10001de8:	10800017 	ldw	r2,0(r2)
10001dec:	e0fff617 	ldw	r3,-40(fp)
10001df0:	d8c00215 	stw	r3,8(sp)
10001df4:	d8000115 	stw	zero,4(sp)
10001df8:	d8800015 	stw	r2,0(sp)
10001dfc:	e1fffc17 	ldw	r7,-16(fp)
10001e00:	e1bffb17 	ldw	r6,-20(fp)
10001e04:	e17ffa17 	ldw	r5,-24(fp)
10001e08:	e13ff917 	ldw	r4,-28(fp)
10001e0c:	00026040 	call	10002604 <draw>
            break;
10001e10:	00005c06 	br	10001f84 <draw_zombie+0x5b0>
        case ROTATE:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_WALK_OFFSET[z->direction][8], 0, flip_x);
10001e14:	e0bffd17 	ldw	r2,-12(fp)
10001e18:	10c00617 	ldw	r3,24(r2)
10001e1c:	00840074 	movhi	r2,4097
10001e20:	1093d304 	addi	r2,r2,20300
10001e24:	180691ba 	slli	r3,r3,6
10001e28:	10c5883a 	add	r2,r2,r3
10001e2c:	10800804 	addi	r2,r2,32
10001e30:	10800017 	ldw	r2,0(r2)
10001e34:	e0fff617 	ldw	r3,-40(fp)
10001e38:	d8c00215 	stw	r3,8(sp)
10001e3c:	d8000115 	stw	zero,4(sp)
10001e40:	d8800015 	stw	r2,0(sp)
10001e44:	e1fffc17 	ldw	r7,-16(fp)
10001e48:	e1bffb17 	ldw	r6,-20(fp)
10001e4c:	e17ffa17 	ldw	r5,-24(fp)
10001e50:	e13ff917 	ldw	r4,-28(fp)
10001e54:	00026040 	call	10002604 <draw>
            break;
10001e58:	00004a06 	br	10001f84 <draw_zombie+0x5b0>
        case ATTACK:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_ATTACK_OFFSET[z->direction][z->frame], 0, flip_x);
10001e5c:	e0bffd17 	ldw	r2,-12(fp)
10001e60:	10c00617 	ldw	r3,24(r2)
10001e64:	e0bffd17 	ldw	r2,-12(fp)
10001e68:	14400717 	ldw	r17,28(r2)
10001e6c:	04040074 	movhi	r16,4097
10001e70:	84157304 	addi	r16,r16,21964
10001e74:	01400304 	movi	r5,12
10001e78:	1809883a 	mov	r4,r3
10001e7c:	0004b280 	call	10004b28 <__mulsi3>
10001e80:	1445883a 	add	r2,r2,r17
10001e84:	1085883a 	add	r2,r2,r2
10001e88:	1085883a 	add	r2,r2,r2
10001e8c:	8085883a 	add	r2,r16,r2
10001e90:	10800017 	ldw	r2,0(r2)
10001e94:	e0fff617 	ldw	r3,-40(fp)
10001e98:	d8c00215 	stw	r3,8(sp)
10001e9c:	d8000115 	stw	zero,4(sp)
10001ea0:	d8800015 	stw	r2,0(sp)
10001ea4:	e1fffc17 	ldw	r7,-16(fp)
10001ea8:	e1bffb17 	ldw	r6,-20(fp)
10001eac:	e17ffa17 	ldw	r5,-24(fp)
10001eb0:	e13ff917 	ldw	r4,-28(fp)
10001eb4:	00026040 	call	10002604 <draw>
            break;
10001eb8:	00003206 	br	10001f84 <draw_zombie+0x5b0>
        case HIT:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_HIT_FRONT_OFFSET[z->direction][z->frame], 0, flip_x);
10001ebc:	e0bffd17 	ldw	r2,-12(fp)
10001ec0:	10c00617 	ldw	r3,24(r2)
10001ec4:	e0bffd17 	ldw	r2,-12(fp)
10001ec8:	14400717 	ldw	r17,28(r2)
10001ecc:	04040074 	movhi	r16,4097
10001ed0:	84146b04 	addi	r16,r16,20908
10001ed4:	014002c4 	movi	r5,11
10001ed8:	1809883a 	mov	r4,r3
10001edc:	0004b280 	call	10004b28 <__mulsi3>
10001ee0:	1445883a 	add	r2,r2,r17
10001ee4:	1085883a 	add	r2,r2,r2
10001ee8:	1085883a 	add	r2,r2,r2
10001eec:	8085883a 	add	r2,r16,r2
10001ef0:	10800017 	ldw	r2,0(r2)
10001ef4:	e0fff617 	ldw	r3,-40(fp)
10001ef8:	d8c00215 	stw	r3,8(sp)
10001efc:	d8000115 	stw	zero,4(sp)
10001f00:	d8800015 	stw	r2,0(sp)
10001f04:	e1fffc17 	ldw	r7,-16(fp)
10001f08:	e1bffb17 	ldw	r6,-20(fp)
10001f0c:	e17ffa17 	ldw	r5,-24(fp)
10001f10:	e13ff917 	ldw	r4,-28(fp)
10001f14:	00026040 	call	10002604 <draw>
            break;
10001f18:	00001a06 	br	10001f84 <draw_zombie+0x5b0>
        case DIE:
            draw(start_x, end_x, start_y, end_y, ZOMBIE_DIE_OFFSET[z->direction][z->frame], 0, flip_x);
10001f1c:	e0bffd17 	ldw	r2,-12(fp)
10001f20:	11000617 	ldw	r4,24(r2)
10001f24:	e0bffd17 	ldw	r2,-12(fp)
10001f28:	10c00717 	ldw	r3,28(r2)
10001f2c:	00840074 	movhi	r2,4097
10001f30:	1094db04 	addi	r2,r2,21356
10001f34:	2008913a 	slli	r4,r4,4
10001f38:	20c7883a 	add	r3,r4,r3
10001f3c:	18c7883a 	add	r3,r3,r3
10001f40:	18c7883a 	add	r3,r3,r3
10001f44:	10c5883a 	add	r2,r2,r3
10001f48:	10800017 	ldw	r2,0(r2)
10001f4c:	e0fff617 	ldw	r3,-40(fp)
10001f50:	d8c00215 	stw	r3,8(sp)
10001f54:	d8000115 	stw	zero,4(sp)
10001f58:	d8800015 	stw	r2,0(sp)
10001f5c:	e1fffc17 	ldw	r7,-16(fp)
10001f60:	e1bffb17 	ldw	r6,-20(fp)
10001f64:	e17ffa17 	ldw	r5,-24(fp)
10001f68:	e13ff917 	ldw	r4,-28(fp)
10001f6c:	00026040 	call	10002604 <draw>
            break;
10001f70:	00000406 	br	10001f84 <draw_zombie+0x5b0>
        default:
            printf("INVALID ZOMBIE STATE!\n");
10001f74:	01040074 	movhi	r4,4097
10001f78:	2110f604 	addi	r4,r4,17368
10001f7c:	0004c7c0 	call	10004c7c <puts>
            return;
10001f80:	0001883a 	nop
    }
}
10001f84:	e6fffe04 	addi	sp,fp,-8
10001f88:	dfc00317 	ldw	ra,12(sp)
10001f8c:	df000217 	ldw	fp,8(sp)
10001f90:	dc400117 	ldw	r17,4(sp)
10001f94:	dc000017 	ldw	r16,0(sp)
10001f98:	dec00404 	addi	sp,sp,16
10001f9c:	f800283a 	ret

10001fa0 <draw_player>:

void draw_player(const player_t *p) {
10001fa0:	deffef04 	addi	sp,sp,-68
10001fa4:	dfc01015 	stw	ra,64(sp)
10001fa8:	df000f15 	stw	fp,60(sp)
10001fac:	dc400e15 	stw	r17,56(sp)
10001fb0:	dc000d15 	stw	r16,52(sp)
10001fb4:	df000f04 	addi	fp,sp,60
10001fb8:	e13ffd15 	stw	r4,-12(fp)
    int width, height, flip_x, half_width, half_height;
    switch (p->action) {
10001fbc:	e0bffd17 	ldw	r2,-12(fp)
10001fc0:	10800617 	ldw	r2,24(r2)
10001fc4:	10c000e0 	cmpeqi	r3,r2,3
10001fc8:	1800261e 	bne	r3,zero,10002064 <draw_player+0xc4>
10001fcc:	10c00120 	cmpeqi	r3,r2,4
10001fd0:	1800471e 	bne	r3,zero,100020f0 <draw_player+0x150>
10001fd4:	1000691e 	bne	r2,zero,1000217c <draw_player+0x1dc>
        case WALK:
            width = PLAYER_WALK_WIDTH[p->direction];
10001fd8:	e0bffd17 	ldw	r2,-12(fp)
10001fdc:	10c00317 	ldw	r3,12(r2)
10001fe0:	00840074 	movhi	r2,4097
10001fe4:	1095d304 	addi	r2,r2,22348
10001fe8:	18c7883a 	add	r3,r3,r3
10001fec:	18c7883a 	add	r3,r3,r3
10001ff0:	10c5883a 	add	r2,r2,r3
10001ff4:	10800017 	ldw	r2,0(r2)
10001ff8:	e0bff415 	stw	r2,-48(fp)
            height = PLAYER_WALK_HEIGHT[p->direction];
10001ffc:	e0bffd17 	ldw	r2,-12(fp)
10002000:	10c00317 	ldw	r3,12(r2)
10002004:	00840074 	movhi	r2,4097
10002008:	1095db04 	addi	r2,r2,22380
1000200c:	18c7883a 	add	r3,r3,r3
10002010:	18c7883a 	add	r3,r3,r3
10002014:	10c5883a 	add	r2,r2,r3
10002018:	10800017 	ldw	r2,0(r2)
1000201c:	e0bff515 	stw	r2,-44(fp)
            flip_x = PLAYER_WALK_FLIP_X[p->direction];
10002020:	e0bffd17 	ldw	r2,-12(fp)
10002024:	10c00317 	ldw	r3,12(r2)
10002028:	008400b4 	movhi	r2,4098
1000202c:	10a8ae04 	addi	r2,r2,-23880
10002030:	18c7883a 	add	r3,r3,r3
10002034:	18c7883a 	add	r3,r3,r3
10002038:	10c5883a 	add	r2,r2,r3
1000203c:	10800017 	ldw	r2,0(r2)
10002040:	e0bff615 	stw	r2,-40(fp)
            if (p->frame >= PLAYER_WALK_FRAME_COUNT) {
10002044:	e0bffd17 	ldw	r2,-12(fp)
10002048:	10800717 	ldw	r2,28(r2)
1000204c:	10800410 	cmplti	r2,r2,16
10002050:	10004e1e 	bne	r2,zero,1000218c <draw_player+0x1ec>
                printf("EXCEED PLAYER_WALK_FRAME_COUNT!\n");
10002054:	01040074 	movhi	r4,4097
10002058:	2110fc04 	addi	r4,r4,17392
1000205c:	0004c7c0 	call	10004c7c <puts>
                return;
10002060:	0000c006 	br	10002364 <draw_player+0x3c4>
            }
            break;
        case HIT:
            width = PLAYER_HIT_FRONT_WIDTH[p->direction];
10002064:	e0bffd17 	ldw	r2,-12(fp)
10002068:	10c00317 	ldw	r3,12(r2)
1000206c:	00840074 	movhi	r2,4097
10002070:	10966304 	addi	r2,r2,22924
10002074:	18c7883a 	add	r3,r3,r3
10002078:	18c7883a 	add	r3,r3,r3
1000207c:	10c5883a 	add	r2,r2,r3
10002080:	10800017 	ldw	r2,0(r2)
10002084:	e0bff415 	stw	r2,-48(fp)
            height = PLAYER_HIT_FRONT_HEIGHT[p->direction];
10002088:	e0bffd17 	ldw	r2,-12(fp)
1000208c:	10c00317 	ldw	r3,12(r2)
10002090:	00840074 	movhi	r2,4097
10002094:	10966b04 	addi	r2,r2,22956
10002098:	18c7883a 	add	r3,r3,r3
1000209c:	18c7883a 	add	r3,r3,r3
100020a0:	10c5883a 	add	r2,r2,r3
100020a4:	10800017 	ldw	r2,0(r2)
100020a8:	e0bff515 	stw	r2,-44(fp)
            flip_x = PLAYER_HIT_FRONT_FLIP_X[p->direction];
100020ac:	e0bffd17 	ldw	r2,-12(fp)
100020b0:	10c00317 	ldw	r3,12(r2)
100020b4:	00840074 	movhi	r2,4097
100020b8:	10967304 	addi	r2,r2,22988
100020bc:	18c7883a 	add	r3,r3,r3
100020c0:	18c7883a 	add	r3,r3,r3
100020c4:	10c5883a 	add	r2,r2,r3
100020c8:	10800017 	ldw	r2,0(r2)
100020cc:	e0bff615 	stw	r2,-40(fp)
            if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
100020d0:	e0bffd17 	ldw	r2,-12(fp)
100020d4:	10800717 	ldw	r2,28(r2)
100020d8:	108002d0 	cmplti	r2,r2,11
100020dc:	10002d1e 	bne	r2,zero,10002194 <draw_player+0x1f4>
                printf("EXCEED PLAYER_HIT_FRONT_FRAME_COUNT!\n");
100020e0:	01040074 	movhi	r4,4097
100020e4:	21110404 	addi	r4,r4,17424
100020e8:	0004c7c0 	call	10004c7c <puts>
                return;
100020ec:	00009d06 	br	10002364 <draw_player+0x3c4>
            }
            break;
        case DIE:
            width = PLAYER_DIE_WIDTH[p->direction];
100020f0:	e0bffd17 	ldw	r2,-12(fp)
100020f4:	10c00317 	ldw	r3,12(r2)
100020f8:	00840074 	movhi	r2,4097
100020fc:	1096d304 	addi	r2,r2,23372
10002100:	18c7883a 	add	r3,r3,r3
10002104:	18c7883a 	add	r3,r3,r3
10002108:	10c5883a 	add	r2,r2,r3
1000210c:	10800017 	ldw	r2,0(r2)
10002110:	e0bff415 	stw	r2,-48(fp)
            height = PLAYER_DIE_HEIGHT[p->direction];
10002114:	e0bffd17 	ldw	r2,-12(fp)
10002118:	10c00317 	ldw	r3,12(r2)
1000211c:	00840074 	movhi	r2,4097
10002120:	1096db04 	addi	r2,r2,23404
10002124:	18c7883a 	add	r3,r3,r3
10002128:	18c7883a 	add	r3,r3,r3
1000212c:	10c5883a 	add	r2,r2,r3
10002130:	10800017 	ldw	r2,0(r2)
10002134:	e0bff515 	stw	r2,-44(fp)
            flip_x = PLAYER_DIE_FLIP_X[p->direction];
10002138:	e0bffd17 	ldw	r2,-12(fp)
1000213c:	10c00317 	ldw	r3,12(r2)
10002140:	00840074 	movhi	r2,4097
10002144:	1096e304 	addi	r2,r2,23436
10002148:	18c7883a 	add	r3,r3,r3
1000214c:	18c7883a 	add	r3,r3,r3
10002150:	10c5883a 	add	r2,r2,r3
10002154:	10800017 	ldw	r2,0(r2)
10002158:	e0bff615 	stw	r2,-40(fp)
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
1000215c:	e0bffd17 	ldw	r2,-12(fp)
10002160:	10800717 	ldw	r2,28(r2)
10002164:	10800410 	cmplti	r2,r2,16
10002168:	10000c1e 	bne	r2,zero,1000219c <draw_player+0x1fc>
                printf("EXCEED PLAYER_DIE_FRAME_COUNT!\n");
1000216c:	01040074 	movhi	r4,4097
10002170:	21110e04 	addi	r4,r4,17464
10002174:	0004c7c0 	call	10004c7c <puts>
                return;
10002178:	00007a06 	br	10002364 <draw_player+0x3c4>
            }
            break;
        default:
            printf("INVALID PLAYER STATE!\n");
1000217c:	01040074 	movhi	r4,4097
10002180:	2110cd04 	addi	r4,r4,17204
10002184:	0004c7c0 	call	10004c7c <puts>
            return;
10002188:	00007606 	br	10002364 <draw_player+0x3c4>
            flip_x = PLAYER_WALK_FLIP_X[p->direction];
            if (p->frame >= PLAYER_WALK_FRAME_COUNT) {
                printf("EXCEED PLAYER_WALK_FRAME_COUNT!\n");
                return;
            }
            break;
1000218c:	0001883a 	nop
10002190:	00000306 	br	100021a0 <draw_player+0x200>
            flip_x = PLAYER_HIT_FRONT_FLIP_X[p->direction];
            if (p->frame >= PLAYER_HIT_FRONT_FRAME_COUNT) {
                printf("EXCEED PLAYER_HIT_FRONT_FRAME_COUNT!\n");
                return;
            }
            break;
10002194:	0001883a 	nop
10002198:	00000106 	br	100021a0 <draw_player+0x200>
            flip_x = PLAYER_DIE_FLIP_X[p->direction];
            if (p->frame >= PLAYER_DIE_FRAME_COUNT) {
                printf("EXCEED PLAYER_DIE_FRAME_COUNT!\n");
                return;
            }
            break;
1000219c:	0001883a 	nop
        default:
            printf("INVALID PLAYER STATE!\n");
            return;
    }

    half_width = width / 2;
100021a0:	e0bff417 	ldw	r2,-48(fp)
100021a4:	1006d7fa 	srli	r3,r2,31
100021a8:	1885883a 	add	r2,r3,r2
100021ac:	1005d07a 	srai	r2,r2,1
100021b0:	e0bff715 	stw	r2,-36(fp)
    half_height = height / 2;
100021b4:	e0bff517 	ldw	r2,-44(fp)
100021b8:	1006d7fa 	srli	r3,r2,31
100021bc:	1885883a 	add	r2,r3,r2
100021c0:	1005d07a 	srai	r2,r2,1
100021c4:	e0bff815 	stw	r2,-32(fp)

    int start_x = p->x - half_width;
100021c8:	e0bffd17 	ldw	r2,-12(fp)
100021cc:	10c00017 	ldw	r3,0(r2)
100021d0:	e0bff717 	ldw	r2,-36(fp)
100021d4:	1885c83a 	sub	r2,r3,r2
100021d8:	e0bff915 	stw	r2,-28(fp)
    int end_x = p->x + (width - half_width);
100021dc:	e0bffd17 	ldw	r2,-12(fp)
100021e0:	10c00017 	ldw	r3,0(r2)
100021e4:	e13ff417 	ldw	r4,-48(fp)
100021e8:	e0bff717 	ldw	r2,-36(fp)
100021ec:	2085c83a 	sub	r2,r4,r2
100021f0:	1885883a 	add	r2,r3,r2
100021f4:	e0bffa15 	stw	r2,-24(fp)
    int start_y = p->y - half_height;
100021f8:	e0bffd17 	ldw	r2,-12(fp)
100021fc:	10c00117 	ldw	r3,4(r2)
10002200:	e0bff817 	ldw	r2,-32(fp)
10002204:	1885c83a 	sub	r2,r3,r2
10002208:	e0bffb15 	stw	r2,-20(fp)
    int end_y = p->y + (height - half_height);
1000220c:	e0bffd17 	ldw	r2,-12(fp)
10002210:	10c00117 	ldw	r3,4(r2)
10002214:	e13ff517 	ldw	r4,-44(fp)
10002218:	e0bff817 	ldw	r2,-32(fp)
1000221c:	2085c83a 	sub	r2,r4,r2
10002220:	1885883a 	add	r2,r3,r2
10002224:	e0bffc15 	stw	r2,-16(fp)

    switch (p->action) {
10002228:	e0bffd17 	ldw	r2,-12(fp)
1000222c:	10800617 	ldw	r2,24(r2)
10002230:	10c000e0 	cmpeqi	r3,r2,3
10002234:	1800191e 	bne	r3,zero,1000229c <draw_player+0x2fc>
10002238:	10c00120 	cmpeqi	r3,r2,4
1000223c:	18002f1e 	bne	r3,zero,100022fc <draw_player+0x35c>
10002240:	1000441e 	bne	r2,zero,10002354 <draw_player+0x3b4>
        case WALK:
            draw(start_x, end_x, start_y, end_y, PLAYER_WALK_OFFSET[p->direction][p->frame], 0, flip_x);
10002244:	e0bffd17 	ldw	r2,-12(fp)
10002248:	11000317 	ldw	r4,12(r2)
1000224c:	e0bffd17 	ldw	r2,-12(fp)
10002250:	10c00717 	ldw	r3,28(r2)
10002254:	00840074 	movhi	r2,4097
10002258:	1095e304 	addi	r2,r2,22412
1000225c:	2008913a 	slli	r4,r4,4
10002260:	20c7883a 	add	r3,r4,r3
10002264:	18c7883a 	add	r3,r3,r3
10002268:	18c7883a 	add	r3,r3,r3
1000226c:	10c5883a 	add	r2,r2,r3
10002270:	10800017 	ldw	r2,0(r2)
10002274:	e0fff617 	ldw	r3,-40(fp)
10002278:	d8c00215 	stw	r3,8(sp)
1000227c:	d8000115 	stw	zero,4(sp)
10002280:	d8800015 	stw	r2,0(sp)
10002284:	e1fffc17 	ldw	r7,-16(fp)
10002288:	e1bffb17 	ldw	r6,-20(fp)
1000228c:	e17ffa17 	ldw	r5,-24(fp)
10002290:	e13ff917 	ldw	r4,-28(fp)
10002294:	00026040 	call	10002604 <draw>
            break;
10002298:	00003206 	br	10002364 <draw_player+0x3c4>
        case HIT:
            draw(start_x, end_x, start_y, end_y, PLAYER_HIT_FRONT_OFFSET[p->direction][p->frame], 0, flip_x);
1000229c:	e0bffd17 	ldw	r2,-12(fp)
100022a0:	10c00317 	ldw	r3,12(r2)
100022a4:	e0bffd17 	ldw	r2,-12(fp)
100022a8:	14400717 	ldw	r17,28(r2)
100022ac:	04040074 	movhi	r16,4097
100022b0:	84167b04 	addi	r16,r16,23020
100022b4:	014002c4 	movi	r5,11
100022b8:	1809883a 	mov	r4,r3
100022bc:	0004b280 	call	10004b28 <__mulsi3>
100022c0:	1445883a 	add	r2,r2,r17
100022c4:	1085883a 	add	r2,r2,r2
100022c8:	1085883a 	add	r2,r2,r2
100022cc:	8085883a 	add	r2,r16,r2
100022d0:	10800017 	ldw	r2,0(r2)
100022d4:	e0fff617 	ldw	r3,-40(fp)
100022d8:	d8c00215 	stw	r3,8(sp)
100022dc:	d8000115 	stw	zero,4(sp)
100022e0:	d8800015 	stw	r2,0(sp)
100022e4:	e1fffc17 	ldw	r7,-16(fp)
100022e8:	e1bffb17 	ldw	r6,-20(fp)
100022ec:	e17ffa17 	ldw	r5,-24(fp)
100022f0:	e13ff917 	ldw	r4,-28(fp)
100022f4:	00026040 	call	10002604 <draw>
            break;
100022f8:	00001a06 	br	10002364 <draw_player+0x3c4>
        case DIE:
            draw(start_x, end_x, start_y, end_y, PLAYER_DIE_OFFSET[p->direction][p->frame], 0, flip_x);
100022fc:	e0bffd17 	ldw	r2,-12(fp)
10002300:	11000317 	ldw	r4,12(r2)
10002304:	e0bffd17 	ldw	r2,-12(fp)
10002308:	10c00717 	ldw	r3,28(r2)
1000230c:	00840074 	movhi	r2,4097
10002310:	1096eb04 	addi	r2,r2,23468
10002314:	2008913a 	slli	r4,r4,4
10002318:	20c7883a 	add	r3,r4,r3
1000231c:	18c7883a 	add	r3,r3,r3
10002320:	18c7883a 	add	r3,r3,r3
10002324:	10c5883a 	add	r2,r2,r3
10002328:	10800017 	ldw	r2,0(r2)
1000232c:	e0fff617 	ldw	r3,-40(fp)
10002330:	d8c00215 	stw	r3,8(sp)
10002334:	d8000115 	stw	zero,4(sp)
10002338:	d8800015 	stw	r2,0(sp)
1000233c:	e1fffc17 	ldw	r7,-16(fp)
10002340:	e1bffb17 	ldw	r6,-20(fp)
10002344:	e17ffa17 	ldw	r5,-24(fp)
10002348:	e13ff917 	ldw	r4,-28(fp)
1000234c:	00026040 	call	10002604 <draw>
            break;
10002350:	00000406 	br	10002364 <draw_player+0x3c4>
        default:
            printf("INVALID PLAYER STATE!\n");
10002354:	01040074 	movhi	r4,4097
10002358:	2110cd04 	addi	r4,r4,17204
1000235c:	0004c7c0 	call	10004c7c <puts>
            return;
10002360:	0001883a 	nop
    }
}
10002364:	e6fffe04 	addi	sp,fp,-8
10002368:	dfc00317 	ldw	ra,12(sp)
1000236c:	df000217 	ldw	fp,8(sp)
10002370:	dc400117 	ldw	r17,4(sp)
10002374:	dc000017 	ldw	r16,0(sp)
10002378:	dec00404 	addi	sp,sp,16
1000237c:	f800283a 	ret

10002380 <refresh>:

void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {
10002380:	defff804 	addi	sp,sp,-32
10002384:	dfc00715 	stw	ra,28(sp)
10002388:	df000615 	stw	fp,24(sp)
1000238c:	df000604 	addi	fp,sp,24
10002390:	e13ffc15 	stw	r4,-16(fp)
10002394:	e17ffd15 	stw	r5,-12(fp)
10002398:	e1bffe15 	stw	r6,-8(fp)
1000239c:	e1ffff15 	stw	r7,-4(fp)

    static int add_zombie_counter = 0;
    int i, gx, gy, id;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; ++i) {
100023a0:	e03ffa15 	stw	zero,-24(fp)
100023a4:	00001c06 	br	10002418 <refresh+0x98>
        if (zombie[i].enable == 1) {
100023a8:	008400b4 	movhi	r2,4098
100023ac:	10ad6604 	addi	r2,r2,-19048
100023b0:	e0fffa17 	ldw	r3,-24(fp)
100023b4:	1806917a 	slli	r3,r3,5
100023b8:	10c5883a 	add	r2,r2,r3
100023bc:	10800404 	addi	r2,r2,16
100023c0:	10800017 	ldw	r2,0(r2)
100023c4:	10800058 	cmpnei	r2,r2,1
100023c8:	1000101e 	bne	r2,zero,1000240c <refresh+0x8c>
            if (should_update) update_zombie(&zombie[id]);
100023cc:	e0bffc17 	ldw	r2,-16(fp)
100023d0:	10000726 	beq	r2,zero,100023f0 <refresh+0x70>
100023d4:	e0bffb17 	ldw	r2,-20(fp)
100023d8:	1006917a 	slli	r3,r2,5
100023dc:	008400b4 	movhi	r2,4098
100023e0:	10ad6604 	addi	r2,r2,-19048
100023e4:	1885883a 	add	r2,r3,r2
100023e8:	1009883a 	mov	r4,r2
100023ec:	00009640 	call	10000964 <update_zombie>
            draw_zombie(&zombie[i]);
100023f0:	e0bffa17 	ldw	r2,-24(fp)
100023f4:	1006917a 	slli	r3,r2,5
100023f8:	008400b4 	movhi	r2,4098
100023fc:	10ad6604 	addi	r2,r2,-19048
10002400:	1885883a 	add	r2,r3,r2
10002404:	1009883a 	mov	r4,r2
10002408:	00019d40 	call	100019d4 <draw_zombie>
void refresh(int should_update, int direction_1, int direction_2, int attack_1, int attack_2) {

    static int add_zombie_counter = 0;
    int i, gx, gy, id;

    for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; ++i) {
1000240c:	e0bffa17 	ldw	r2,-24(fp)
10002410:	10800044 	addi	r2,r2,1
10002414:	e0bffa15 	stw	r2,-24(fp)
10002418:	e0bffa17 	ldw	r2,-24(fp)
1000241c:	10800510 	cmplti	r2,r2,20
10002420:	103fe11e 	bne	r2,zero,100023a8 <__alt_data_end+0xf80023a8>
        if (zombie[i].enable == 1) {
            if (should_update) update_zombie(&zombie[id]);
            draw_zombie(&zombie[i]);
        }
    }
    if (should_update) update_player(&player_1, direction_1, attack_1);
10002424:	e0bffc17 	ldw	r2,-16(fp)
10002428:	10000526 	beq	r2,zero,10002440 <refresh+0xc0>
1000242c:	e1bfff17 	ldw	r6,-4(fp)
10002430:	e17ffd17 	ldw	r5,-12(fp)
10002434:	010400b4 	movhi	r4,4098
10002438:	212e0604 	addi	r4,r4,-18408
1000243c:	000110c0 	call	1000110c <update_player>
    draw_player(&player_1);
10002440:	010400b4 	movhi	r4,4098
10002444:	212e0604 	addi	r4,r4,-18408
10002448:	0001fa00 	call	10001fa0 <draw_player>
    if (should_update) update_player(&player_2, direction_2, attack_2);
1000244c:	e0bffc17 	ldw	r2,-16(fp)
10002450:	10000526 	beq	r2,zero,10002468 <refresh+0xe8>
10002454:	e1800217 	ldw	r6,8(fp)
10002458:	e17ffe17 	ldw	r5,-8(fp)
1000245c:	010400b4 	movhi	r4,4098
10002460:	212e0f04 	addi	r4,r4,-18372
10002464:	000110c0 	call	1000110c <update_player>
    draw_player(&player_2);
10002468:	010400b4 	movhi	r4,4098
1000246c:	212e0f04 	addi	r4,r4,-18372
10002470:	0001fa00 	call	10001fa0 <draw_player>
    //             }
    //         }
    //     }
    // }

    if (should_update) {
10002474:	e0bffc17 	ldw	r2,-16(fp)
10002478:	10004b26 	beq	r2,zero,100025a8 <refresh+0x228>
        add_zombie_counter++;
1000247c:	d0aa8317 	ldw	r2,-22004(gp)
10002480:	10800044 	addi	r2,r2,1
10002484:	d0aa8315 	stw	r2,-22004(gp)
        if (add_zombie_counter >= ADD_ZOMBIE_INTERVAL) {
10002488:	d0aa8317 	ldw	r2,-22004(gp)
1000248c:	10800c90 	cmplti	r2,r2,50
10002490:	1000301e 	bne	r2,zero,10002554 <refresh+0x1d4>
            if ((zombie_appear_counter < MAX_TOTAL_ZOMBIES) && (cur_zombie_counter < MAX_ZOMBIES_ON_SCREEN)) {
10002494:	d0aa8117 	ldw	r2,-22012(gp)
10002498:	10801908 	cmpgei	r2,r2,100
1000249c:	10002c1e 	bne	r2,zero,10002550 <refresh+0x1d0>
100024a0:	d0aa8217 	ldw	r2,-22008(gp)
100024a4:	10800508 	cmpgei	r2,r2,20
100024a8:	1000291e 	bne	r2,zero,10002550 <refresh+0x1d0>
                for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
100024ac:	e03ffa15 	stw	zero,-24(fp)
100024b0:	00002206 	br	1000253c <refresh+0x1bc>
                    if (zombie[i].enable == 0) {
100024b4:	008400b4 	movhi	r2,4098
100024b8:	10ad6604 	addi	r2,r2,-19048
100024bc:	e0fffa17 	ldw	r3,-24(fp)
100024c0:	1806917a 	slli	r3,r3,5
100024c4:	10c5883a 	add	r2,r2,r3
100024c8:	10800404 	addi	r2,r2,16
100024cc:	10800017 	ldw	r2,0(r2)
100024d0:	1000171e 	bne	r2,zero,10002530 <refresh+0x1b0>
                        zombie[i].blood = 100;
100024d4:	008400b4 	movhi	r2,4098
100024d8:	10ad6604 	addi	r2,r2,-19048
100024dc:	e0fffa17 	ldw	r3,-24(fp)
100024e0:	1806917a 	slli	r3,r3,5
100024e4:	10c5883a 	add	r2,r2,r3
100024e8:	10800304 	addi	r2,r2,12
100024ec:	00c01904 	movi	r3,100
100024f0:	10c00015 	stw	r3,0(r2)
                        if (try_add_zombie(&zombie[i]) == 0) {
100024f4:	e0bffa17 	ldw	r2,-24(fp)
100024f8:	1006917a 	slli	r3,r2,5
100024fc:	008400b4 	movhi	r2,4098
10002500:	10ad6604 	addi	r2,r2,-19048
10002504:	1885883a 	add	r2,r3,r2
10002508:	1009883a 	mov	r4,r2
1000250c:	00018b40 	call	100018b4 <try_add_zombie>
10002510:	10000e1e 	bne	r2,zero,1000254c <refresh+0x1cc>
                            cur_zombie_counter++;
10002514:	d0aa8217 	ldw	r2,-22008(gp)
10002518:	10800044 	addi	r2,r2,1
1000251c:	d0aa8215 	stw	r2,-22008(gp)
                            zombie_appear_counter++;
10002520:	d0aa8117 	ldw	r2,-22012(gp)
10002524:	10800044 	addi	r2,r2,1
10002528:	d0aa8115 	stw	r2,-22012(gp)
                        }
                        break;
1000252c:	00000706 	br	1000254c <refresh+0x1cc>

    if (should_update) {
        add_zombie_counter++;
        if (add_zombie_counter >= ADD_ZOMBIE_INTERVAL) {
            if ((zombie_appear_counter < MAX_TOTAL_ZOMBIES) && (cur_zombie_counter < MAX_ZOMBIES_ON_SCREEN)) {
                for (i = 0; i < MAX_ZOMBIES_ON_SCREEN; i++) {
10002530:	e0bffa17 	ldw	r2,-24(fp)
10002534:	10800044 	addi	r2,r2,1
10002538:	e0bffa15 	stw	r2,-24(fp)
1000253c:	e0bffa17 	ldw	r2,-24(fp)
10002540:	10800510 	cmplti	r2,r2,20
10002544:	103fdb1e 	bne	r2,zero,100024b4 <__alt_data_end+0xf80024b4>
10002548:	00000106 	br	10002550 <refresh+0x1d0>
                        zombie[i].blood = 100;
                        if (try_add_zombie(&zombie[i]) == 0) {
                            cur_zombie_counter++;
                            zombie_appear_counter++;
                        }
                        break;
1000254c:	0001883a 	nop
                    }
                }
            }
            add_zombie_counter = 0;
10002550:	d02a8315 	stw	zero,-22004(gp)
        }

        if ((player_1.enable == 0) && (player_2.enable == 0)) {
10002554:	008400b4 	movhi	r2,4098
10002558:	10ae0604 	addi	r2,r2,-18408
1000255c:	10800417 	ldw	r2,16(r2)
10002560:	1000081e 	bne	r2,zero,10002584 <refresh+0x204>
10002564:	008400b4 	movhi	r2,4098
10002568:	10ae0f04 	addi	r2,r2,-18372
1000256c:	10800417 	ldw	r2,16(r2)
10002570:	1000041e 	bne	r2,zero,10002584 <refresh+0x204>
            printf("You are all dead, please restart the game!");
10002574:	01040074 	movhi	r4,4097
10002578:	21111604 	addi	r4,r4,17496
1000257c:	0004b800 	call	10004b80 <printf>
            while (1) {}
10002580:	003fff06 	br	10002580 <__alt_data_end+0xf8002580>
        }
        if ((cur_zombie_counter == 0) && (zombie_appear_counter == MAX_TOTAL_ZOMBIES)) {
10002584:	d0aa8217 	ldw	r2,-22008(gp)
10002588:	1000071e 	bne	r2,zero,100025a8 <refresh+0x228>
1000258c:	d0aa8117 	ldw	r2,-22012(gp)
10002590:	10801918 	cmpnei	r2,r2,100
10002594:	1000041e 	bne	r2,zero,100025a8 <refresh+0x228>
            printf("Congratulations, you have killed all the zombies!");
10002598:	01040074 	movhi	r4,4097
1000259c:	21112104 	addi	r4,r4,17540
100025a0:	0004b800 	call	10004b80 <printf>
            while (1) {}
100025a4:	003fff06 	br	100025a4 <__alt_data_end+0xf80025a4>
        }
    }
}
100025a8:	0001883a 	nop
100025ac:	e037883a 	mov	sp,fp
100025b0:	dfc00117 	ldw	ra,4(sp)
100025b4:	df000017 	ldw	fp,0(sp)
100025b8:	dec00204 	addi	sp,sp,8
100025bc:	f800283a 	ret

100025c0 <graphic_engine_reset>:

#include "system.h"

volatile unsigned int *ENGINE_REGS = (unsigned int *) COPY_ENGINE_CORE_BASE;

void graphic_engine_reset() {
100025c0:	deffff04 	addi	sp,sp,-4
100025c4:	df000015 	stw	fp,0(sp)
100025c8:	d839883a 	mov	fp,sp
	ENGINE_REGS[7] = 0;
100025cc:	d0a00017 	ldw	r2,-32768(gp)
100025d0:	10800704 	addi	r2,r2,28
100025d4:	10000015 	stw	zero,0(r2)
	while ((ENGINE_REGS[15] & 0x1) != 0) {}  // wait for reset
100025d8:	0001883a 	nop
100025dc:	d0a00017 	ldw	r2,-32768(gp)
100025e0:	10800f04 	addi	r2,r2,60
100025e4:	10800017 	ldw	r2,0(r2)
100025e8:	1080004c 	andi	r2,r2,1
100025ec:	103ffb1e 	bne	r2,zero,100025dc <__alt_data_end+0xf80025dc>
}
100025f0:	0001883a 	nop
100025f4:	e037883a 	mov	sp,fp
100025f8:	df000017 	ldw	fp,0(sp)
100025fc:	dec00104 	addi	sp,sp,4
10002600:	f800283a 	ret

10002604 <draw>:

void draw(int start_x, int end_x, int start_y, int end_y, int src_offset, int palette, int flip_x) {
10002604:	defffb04 	addi	sp,sp,-20
10002608:	df000415 	stw	fp,16(sp)
1000260c:	df000404 	addi	fp,sp,16
10002610:	e13ffc15 	stw	r4,-16(fp)
10002614:	e17ffd15 	stw	r5,-12(fp)
10002618:	e1bffe15 	stw	r6,-8(fp)
1000261c:	e1ffff15 	stw	r7,-4(fp)

    // Wait for the copy engine to finish last task
//	printf("Start waiting for graphic engine...\n");
	if (ENGINE_REGS[7] == 1) {
10002620:	d0a00017 	ldw	r2,-32768(gp)
10002624:	10800704 	addi	r2,r2,28
10002628:	10800017 	ldw	r2,0(r2)
1000262c:	10800058 	cmpnei	r2,r2,1
10002630:	1000121e 	bne	r2,zero,1000267c <draw+0x78>
		while ((ENGINE_REGS[15] & 0x1) == 0) {}
10002634:	0001883a 	nop
10002638:	d0a00017 	ldw	r2,-32768(gp)
1000263c:	10800f04 	addi	r2,r2,60
10002640:	10800017 	ldw	r2,0(r2)
10002644:	1080004c 	andi	r2,r2,1
10002648:	103ffb26 	beq	r2,zero,10002638 <__alt_data_end+0xf8002638>

		// Clear Execute
		ENGINE_REGS[7] = 0;
1000264c:	d0a00017 	ldw	r2,-32768(gp)
10002650:	10800704 	addi	r2,r2,28
10002654:	10000015 	stw	zero,0(r2)
        ENGINE_REGS[7] = 0;
10002658:	d0a00017 	ldw	r2,-32768(gp)
1000265c:	10800704 	addi	r2,r2,28
10002660:	10000015 	stw	zero,0(r2)
		while ((ENGINE_REGS[15] & 0x1) != 0) {}  // wait for reset
10002664:	0001883a 	nop
10002668:	d0a00017 	ldw	r2,-32768(gp)
1000266c:	10800f04 	addi	r2,r2,60
10002670:	10800017 	ldw	r2,0(r2)
10002674:	1080004c 	andi	r2,r2,1
10002678:	103ffb1e 	bne	r2,zero,10002668 <__alt_data_end+0xf8002668>
	}
//    printf("Graphic engine done!\n");

    ENGINE_REGS[0] = start_x;
1000267c:	d0a00017 	ldw	r2,-32768(gp)
10002680:	e0fffc17 	ldw	r3,-16(fp)
10002684:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[1] = end_x;
10002688:	d0a00017 	ldw	r2,-32768(gp)
1000268c:	10800104 	addi	r2,r2,4
10002690:	e0fffd17 	ldw	r3,-12(fp)
10002694:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[2] = start_y;
10002698:	d0a00017 	ldw	r2,-32768(gp)
1000269c:	10800204 	addi	r2,r2,8
100026a0:	e0fffe17 	ldw	r3,-8(fp)
100026a4:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[3] = end_y;
100026a8:	d0a00017 	ldw	r2,-32768(gp)
100026ac:	10800304 	addi	r2,r2,12
100026b0:	e0ffff17 	ldw	r3,-4(fp)
100026b4:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[4] = src_offset;
100026b8:	d0a00017 	ldw	r2,-32768(gp)
100026bc:	10800404 	addi	r2,r2,16
100026c0:	e0c00117 	ldw	r3,4(fp)
100026c4:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[5] = palette;
100026c8:	d0a00017 	ldw	r2,-32768(gp)
100026cc:	10800504 	addi	r2,r2,20
100026d0:	e0c00217 	ldw	r3,8(fp)
100026d4:	10c00015 	stw	r3,0(r2)
    ENGINE_REGS[6] = flip_x;
100026d8:	d0a00017 	ldw	r2,-32768(gp)
100026dc:	10800604 	addi	r2,r2,24
100026e0:	e0c00317 	ldw	r3,12(fp)
100026e4:	10c00015 	stw	r3,0(r2)

    // Execute
    ENGINE_REGS[7] = 1;
100026e8:	d0a00017 	ldw	r2,-32768(gp)
100026ec:	10800704 	addi	r2,r2,28
100026f0:	00c00044 	movi	r3,1
100026f4:	10c00015 	stw	r3,0(r2)

    // Let the engine run and C program can do other things
}
100026f8:	0001883a 	nop
100026fc:	e037883a 	mov	sp,fp
10002700:	df000017 	ldw	fp,0(sp)
10002704:	dec00104 	addi	sp,sp,4
10002708:	f800283a 	ret

1000270c <wait_for_next_frame>:

void wait_for_next_frame() {
1000270c:	defffe04 	addi	sp,sp,-8
10002710:	dfc00115 	stw	ra,4(sp)
10002714:	df000015 	stw	fp,0(sp)
10002718:	d839883a 	mov	fp,sp

    static unsigned int current_frame = 0;

    if (current_frame != ENGINE_REGS[14]) {
1000271c:	d0a00017 	ldw	r2,-32768(gp)
10002720:	10800e04 	addi	r2,r2,56
10002724:	10c00017 	ldw	r3,0(r2)
10002728:	d0aa8417 	ldw	r2,-22000(gp)
1000272c:	18800426 	beq	r3,r2,10002740 <wait_for_next_frame+0x34>
        printf("SKIPPED FRAME!\n");
10002730:	01040074 	movhi	r4,4097
10002734:	21112e04 	addi	r4,r4,17592
10002738:	0004c7c0 	call	10004c7c <puts>
        return;
1000273c:	00000906 	br	10002764 <wait_for_next_frame+0x58>
    }
    // Wait for switch to next frame
    while (current_frame == ENGINE_REGS[14]) {}
10002740:	0001883a 	nop
10002744:	d0a00017 	ldw	r2,-32768(gp)
10002748:	10800e04 	addi	r2,r2,56
1000274c:	10c00017 	ldw	r3,0(r2)
10002750:	d0aa8417 	ldw	r2,-22000(gp)
10002754:	18bffb26 	beq	r3,r2,10002744 <__alt_data_end+0xf8002744>
    current_frame = ENGINE_REGS[14];
10002758:	d0a00017 	ldw	r2,-32768(gp)
1000275c:	10800e17 	ldw	r2,56(r2)
10002760:	d0aa8415 	stw	r2,-22000(gp)
}
10002764:	e037883a 	mov	sp,fp
10002768:	dfc00117 	ldw	ra,4(sp)
1000276c:	df000017 	ldw	fp,0(sp)
10002770:	dec00204 	addi	sp,sp,8
10002774:	f800283a 	ret

10002778 <io_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void io_init(void)
{
10002778:	deffff04 	addi	sp,sp,-4
1000277c:	df000015 	stw	fp,0(sp)
10002780:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10002784:	00802004 	movi	r2,128
10002788:	00c00044 	movi	r3,1
1000278c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10002790:	00802404 	movi	r2,144
10002794:	00c00044 	movi	r3,1
10002798:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
1000279c:	00802c04 	movi	r2,176
100027a0:	00c00044 	movi	r3,1
100027a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100027a8:	00802804 	movi	r2,160
100027ac:	00c00044 	movi	r3,1
100027b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100027b4:	00803404 	movi	r2,208
100027b8:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100027bc:	00803004 	movi	r2,192
100027c0:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100027c4:	00802404 	movi	r2,144
100027c8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100027cc:	00802004 	movi	r2,128
100027d0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100027d4:	00802004 	movi	r2,128
100027d8:	00c00044 	movi	r3,1
100027dc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100027e0:	00802404 	movi	r2,144
100027e4:	00c00044 	movi	r3,1
100027e8:	10c00005 	stb	r3,0(r2)
}
100027ec:	0001883a 	nop
100027f0:	e037883a 	mov	sp,fp
100027f4:	df000017 	ldw	fp,0(sp)
100027f8:	dec00104 	addi	sp,sp,4
100027fc:	f800283a 	ret

10002800 <io_write>:
 *
 * @note     None
 *
 ******************************************************************************/
void io_write(alt_u8 Address, alt_u16 Data)
{
10002800:	defffd04 	addi	sp,sp,-12
10002804:	df000215 	stw	fp,8(sp)
10002808:	df000204 	addi	fp,sp,8
1000280c:	2007883a 	mov	r3,r4
10002810:	2805883a 	mov	r2,r5
10002814:	e0fffe05 	stb	r3,-8(fp)
10002818:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
1000281c:	00803404 	movi	r2,208
10002820:	e0fffe03 	ldbu	r3,-8(fp)
10002824:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
10002828:	00802404 	movi	r2,144
1000282c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10002830:	00802804 	movi	r2,160
10002834:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10002838:	00803004 	movi	r2,192
1000283c:	e0ffff0b 	ldhu	r3,-4(fp)
10002840:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10002844:	00802804 	movi	r2,160
10002848:	00c00044 	movi	r3,1
1000284c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10002850:	00802404 	movi	r2,144
10002854:	00c00044 	movi	r3,1
10002858:	10c00005 	stb	r3,0(r2)
}
1000285c:	0001883a 	nop
10002860:	e037883a 	mov	sp,fp
10002864:	df000017 	ldw	fp,0(sp)
10002868:	dec00104 	addi	sp,sp,4
1000286c:	f800283a 	ret

10002870 <io_read>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 io_read(alt_u8 Address)
{
10002870:	defffd04 	addi	sp,sp,-12
10002874:	df000215 	stw	fp,8(sp)
10002878:	df000204 	addi	fp,sp,8
1000287c:	2005883a 	mov	r2,r4
10002880:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
10002884:	00803404 	movi	r2,208
10002888:	e0ffff03 	ldbu	r3,-4(fp)
1000288c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0; // Set chip select
10002890:	00802404 	movi	r2,144
10002894:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10002898:	00802c04 	movi	r2,176
1000289c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100028a0:	00803004 	movi	r2,192
100028a4:	10800017 	ldw	r2,0(r2)
100028a8:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1; // Set the read signal back to 1 after reading
100028ac:	00802c04 	movi	r2,176
100028b0:	00c00044 	movi	r3,1
100028b4:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	*otg_hpi_cs = 1;
100028b8:	00802404 	movi	r2,144
100028bc:	00c00044 	movi	r3,1
100028c0:	10c00005 	stb	r3,0(r2)
	return temp;
100028c4:	e0bffe0b 	ldhu	r2,-8(fp)
}
100028c8:	e037883a 	mov	sp,fp
100028cc:	df000017 	ldw	fp,0(sp)
100028d0:	dec00104 	addi	sp,sp,4
100028d4:	f800283a 	ret

100028d8 <keyboard_init>:
alt_u8 data_size;
alt_u8 hot_plug_count;
alt_u16 code;
alt_u8 fetch_toggle = 0;

void keyboard_init() {
100028d8:	defffe04 	addi	sp,sp,-8
100028dc:	dfc00115 	stw	ra,4(sp)
100028e0:	df000015 	stw	fp,0(sp)
100028e4:	d839883a 	mov	fp,sp
    io_init();
100028e8:	00027780 	call	10002778 <io_init>
        // usb_write(0xc008,0x000f);
        // usb_read(0xc008);
        usleep(10*10000);
    } */

    printf("USB keyboard setup...\n\n");
100028ec:	01040074 	movhi	r4,4097
100028f0:	21113204 	addi	r4,r4,17608
100028f4:	0004c7c0 	call	10004c7c <puts>

    // ---------------------------------------- SIE1 initial ---------------------------------------------------//
    USB_HOT_PLUG:
    usb_soft_reset();
100028f8:	000368c0 	call	1000368c <usb_soft_reset>

    // STEP 1a:
    usb_write(HPI_SIE1_MSG_ADR, 0);
100028fc:	000b883a 	mov	r5,zero
10002900:	01005104 	movi	r4,324
10002904:	00035f00 	call	100035f0 <usb_write>
    usb_write(HOST1_STAT_REG, 0xFFFF);
10002908:	017fffd4 	movui	r5,65535
1000290c:	01302414 	movui	r4,49296
10002910:	00035f00 	call	100035f0 <usb_write>

    /* Set HUSB_pEOT time */
    usb_write(HUSB_pEOT, 600);  // adjust the according to your USB device speed
10002914:	01409604 	movi	r5,600
10002918:	01006d04 	movi	r4,436
1000291c:	00035f00 	call	100035f0 <usb_write>

    usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;  // | SOFEOP1_TO_HPI_EN;
10002920:	00811004 	movi	r2,1088
10002924:	d0aa870d 	sth	r2,-21988(gp)
    usb_write(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10002928:	d0aa870b 	ldhu	r2,-21988(gp)
1000292c:	10bfffcc 	andi	r2,r2,65535
10002930:	100b883a 	mov	r5,r2
10002934:	01005084 	movi	r4,322
10002938:	00035f00 	call	100035f0 <usb_write>

    intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN;
1000293c:	00808404 	movi	r2,528
10002940:	d0aa880d 	sth	r2,-21984(gp)
    usb_write(HOST1_IRQ_EN_REG, intStat);
10002944:	d0aa880b 	ldhu	r2,-21984(gp)
10002948:	10bfffcc 	andi	r2,r2,65535
1000294c:	100b883a 	mov	r5,r2
10002950:	01302314 	movui	r4,49292
10002954:	00035f00 	call	100035f0 <usb_write>
    // STEP 1a end

    // STEP 1b begin
    usb_write(COMM_R0, 0x0000);  // reset time
10002958:	000b883a 	mov	r5,zero
1000295c:	01007104 	movi	r4,452
10002960:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
10002964:	000b883a 	mov	r5,zero
10002968:	01007184 	movi	r4,454
1000296c:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
10002970:	000b883a 	mov	r5,zero
10002974:	01007204 	movi	r4,456
10002978:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
1000297c:	000b883a 	mov	r5,zero
10002980:	01007284 	movi	r4,458
10002984:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
10002988:	000b883a 	mov	r5,zero
1000298c:	01007304 	movi	r4,460
10002990:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
10002994:	000b883a 	mov	r5,zero
10002998:	01007384 	movi	r4,462
1000299c:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
100029a0:	000b883a 	mov	r5,zero
100029a4:	01007404 	movi	r4,464
100029a8:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
100029ac:	000b883a 	mov	r5,zero
100029b0:	01007484 	movi	r4,466
100029b4:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
100029b8:	000b883a 	mov	r5,zero
100029bc:	01007504 	movi	r4,468
100029c0:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
100029c4:	000b883a 	mov	r5,zero
100029c8:	01007584 	movi	r4,470
100029cc:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
100029d0:	000b883a 	mov	r5,zero
100029d4:	01007604 	movi	r4,472
100029d8:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
100029dc:	000b883a 	mov	r5,zero
100029e0:	01007684 	movi	r4,474
100029e4:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
100029e8:	000b883a 	mov	r5,zero
100029ec:	01007704 	movi	r4,476
100029f0:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
100029f4:	000b883a 	mov	r5,zero
100029f8:	01007784 	movi	r4,478
100029fc:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT);  // HUSB_SIE1_INIT_INT
10002a00:	01401c84 	movi	r5,114
10002a04:	01007084 	movi	r4,450
10002a08:	00035f00 	call	100035f0 <usb_write>
    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10002a0c:	01738054 	movui	r5,52737
10002a10:	01000044 	movi	r4,1
10002a14:	00028000 	call	10002800 <io_write>

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
10002a18:	0001883a 	nop
10002a1c:	010000c4 	movi	r4,3
10002a20:	00028700 	call	10002870 <io_read>
10002a24:	10bfffcc 	andi	r2,r2,65535
10002a28:	103ffc26 	beq	r2,zero,10002a1c <__alt_data_end+0xf8002a1c>
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002a2c:	00000806 	br	10002a50 <keyboard_init+0x178>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
10002a30:	01000044 	movi	r4,1
10002a34:	00028700 	call	10002870 <io_read>
10002a38:	10bfffcc 	andi	r2,r2,65535
10002a3c:	100b883a 	mov	r5,r2
10002a40:	01040074 	movhi	r4,4097
10002a44:	21113804 	addi	r4,r4,17632
10002a48:	0004b800 	call	10004b80 <printf>
        goto USB_HOT_PLUG;
10002a4c:	003faa06 	br	100028f8 <__alt_data_end+0xf80028f8>
    usb_write(COMM_R13, 0x0000);  // r1
    usb_write(COMM_INT_NUM, HUSB_SIE1_INIT_INT);  // HUSB_SIE1_INIT_INT
    io_write(HPI_MAILBOX, COMM_EXEC_INT);

    while (!(io_read(HPI_STATUS) & 0xFFFF)) {} // read sie1 msg register
    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002a50:	01000044 	movi	r4,1
10002a54:	00028700 	call	10002870 <io_read>
10002a58:	10bfffcc 	andi	r2,r2,65535
10002a5c:	1083fb58 	cmpnei	r2,r2,4077
10002a60:	103ff31e 	bne	r2,zero,10002a30 <__alt_data_end+0xf8002a30>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
        goto USB_HOT_PLUG;
    }
    // STEP 1b end

    printf("STEP 1 Complete");
10002a64:	01040074 	movhi	r4,4097
10002a68:	21114104 	addi	r4,r4,17668
10002a6c:	0004b800 	call	10004b80 <printf>
    // STEP 2 begin
    usb_write(COMM_INT_NUM, HUSB_RESET_INT);  // husb reset
10002a70:	01401d04 	movi	r5,116
10002a74:	01007084 	movi	r4,450
10002a78:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R0, 0x003c);  // reset time
10002a7c:	01400f04 	movi	r5,60
10002a80:	01007104 	movi	r4,452
10002a84:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R1, 0x0000);  // port number
10002a88:	000b883a 	mov	r5,zero
10002a8c:	01007184 	movi	r4,454
10002a90:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R2, 0x0000);  // r1
10002a94:	000b883a 	mov	r5,zero
10002a98:	01007204 	movi	r4,456
10002a9c:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R3, 0x0000);  // r1
10002aa0:	000b883a 	mov	r5,zero
10002aa4:	01007284 	movi	r4,458
10002aa8:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R4, 0x0000);  // r1
10002aac:	000b883a 	mov	r5,zero
10002ab0:	01007304 	movi	r4,460
10002ab4:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R5, 0x0000);  // r1
10002ab8:	000b883a 	mov	r5,zero
10002abc:	01007384 	movi	r4,462
10002ac0:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R6, 0x0000);  // r1
10002ac4:	000b883a 	mov	r5,zero
10002ac8:	01007404 	movi	r4,464
10002acc:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R7, 0x0000);  // r1
10002ad0:	000b883a 	mov	r5,zero
10002ad4:	01007484 	movi	r4,466
10002ad8:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R8, 0x0000);  // r1
10002adc:	000b883a 	mov	r5,zero
10002ae0:	01007504 	movi	r4,468
10002ae4:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R9, 0x0000);  // r1
10002ae8:	000b883a 	mov	r5,zero
10002aec:	01007584 	movi	r4,470
10002af0:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R10, 0x0000);  // r1
10002af4:	000b883a 	mov	r5,zero
10002af8:	01007604 	movi	r4,472
10002afc:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R11, 0x0000);  // r1
10002b00:	000b883a 	mov	r5,zero
10002b04:	01007684 	movi	r4,474
10002b08:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R12, 0x0000);  // r1
10002b0c:	000b883a 	mov	r5,zero
10002b10:	01007704 	movi	r4,476
10002b14:	00035f00 	call	100035f0 <usb_write>
    usb_write(COMM_R13, 0x0000);  // r1
10002b18:	000b883a 	mov	r5,zero
10002b1c:	01007784 	movi	r4,478
10002b20:	00035f00 	call	100035f0 <usb_write>

    io_write(HPI_MAILBOX, COMM_EXEC_INT);
10002b24:	01738054 	movui	r5,52737
10002b28:	01000044 	movi	r4,1
10002b2c:	00028000 	call	10002800 <io_write>

    while (io_read(HPI_MAILBOX) != COMM_ACK) {
10002b30:	0001883a 	nop
10002b34:	01000044 	movi	r4,1
10002b38:	00028700 	call	10002870 <io_read>
10002b3c:	10bfffcc 	andi	r2,r2,65535
10002b40:	1083fb58 	cmpnei	r2,r2,4077
10002b44:	10000826 	beq	r2,zero,10002b68 <keyboard_init+0x290>
        printf("[ERROR]:routine mailbox data is %x\n", io_read(HPI_MAILBOX));
10002b48:	01000044 	movi	r4,1
10002b4c:	00028700 	call	10002870 <io_read>
10002b50:	10bfffcc 	andi	r2,r2,65535
10002b54:	100b883a 	mov	r5,r2
10002b58:	01040074 	movhi	r4,4097
10002b5c:	21113804 	addi	r4,r4,17632
10002b60:	0004b800 	call	10004b80 <printf>
        goto USB_HOT_PLUG;
10002b64:	003f6406 	br	100028f8 <__alt_data_end+0xf80028f8>
    }
    // STEP 2 end

    ctl_reg = USB1_CTL_REG;
10002b68:	00b02284 	movi	r2,-16246
10002b6c:	d0aa850d 	sth	r2,-21996(gp)
    no_device = (A_DP_STAT | A_DM_STAT);
10002b70:	008c0004 	movi	r2,12288
10002b74:	d0aa858d 	sth	r2,-21994(gp)
    fs_device = A_DP_STAT;
10002b78:	00880004 	movi	r2,8192
10002b7c:	d0aa860d 	sth	r2,-21992(gp)
    usb_ctl_val = usb_read(ctl_reg);
10002b80:	d0aa850b 	ldhu	r2,-21996(gp)
10002b84:	10bfffcc 	andi	r2,r2,65535
10002b88:	1009883a 	mov	r4,r2
10002b8c:	00036480 	call	10003648 <usb_read>
10002b90:	d0aa870d 	sth	r2,-21988(gp)

    if (!(usb_ctl_val & no_device)) {
10002b94:	d0ea870b 	ldhu	r3,-21988(gp)
10002b98:	d0aa858b 	ldhu	r2,-21994(gp)
10002b9c:	1884703a 	and	r2,r3,r2
10002ba0:	10bfffcc 	andi	r2,r2,65535
10002ba4:	1000361e 	bne	r2,zero,10002c80 <keyboard_init+0x3a8>
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
10002ba8:	d02a8885 	stb	zero,-21982(gp)
10002bac:	00000f06 	br	10002bec <keyboard_init+0x314>
            usleep(5 * 1000);
10002bb0:	0104e204 	movi	r4,5000
10002bb4:	00122c00 	call	100122c0 <usleep>
            usb_ctl_val = usb_read(ctl_reg);
10002bb8:	d0aa850b 	ldhu	r2,-21996(gp)
10002bbc:	10bfffcc 	andi	r2,r2,65535
10002bc0:	1009883a 	mov	r4,r2
10002bc4:	00036480 	call	10003648 <usb_read>
10002bc8:	d0aa870d 	sth	r2,-21988(gp)
            if (usb_ctl_val & no_device) break;
10002bcc:	d0ea870b 	ldhu	r3,-21988(gp)
10002bd0:	d0aa858b 	ldhu	r2,-21994(gp)
10002bd4:	1884703a 	and	r2,r3,r2
10002bd8:	10bfffcc 	andi	r2,r2,65535
10002bdc:	1000081e 	bne	r2,zero,10002c00 <keyboard_init+0x328>
    no_device = (A_DP_STAT | A_DM_STAT);
    fs_device = A_DP_STAT;
    usb_ctl_val = usb_read(ctl_reg);

    if (!(usb_ctl_val & no_device)) {
        for (hot_plug_count = 0; hot_plug_count < 5; hot_plug_count++) {
10002be0:	d0aa8883 	ldbu	r2,-21982(gp)
10002be4:	10800044 	addi	r2,r2,1
10002be8:	d0aa8885 	stb	r2,-21982(gp)
10002bec:	d0aa8883 	ldbu	r2,-21982(gp)
10002bf0:	10803fcc 	andi	r2,r2,255
10002bf4:	10800170 	cmpltui	r2,r2,5
10002bf8:	103fed1e 	bne	r2,zero,10002bb0 <__alt_data_end+0xf8002bb0>
10002bfc:	00000106 	br	10002c04 <keyboard_init+0x32c>
            usleep(5 * 1000);
            usb_ctl_val = usb_read(ctl_reg);
            if (usb_ctl_val & no_device) break;
10002c00:	0001883a 	nop
        }
        if (!(usb_ctl_val & no_device)) {
10002c04:	d0ea870b 	ldhu	r3,-21988(gp)
10002c08:	d0aa858b 	ldhu	r2,-21994(gp)
10002c0c:	1884703a 	and	r2,r3,r2
10002c10:	10bfffcc 	andi	r2,r2,65535
10002c14:	1000261e 	bne	r2,zero,10002cb0 <keyboard_init+0x3d8>
            printf("\n[INFO]: no device is present in SIE1!\n");
10002c18:	01040074 	movhi	r4,4097
10002c1c:	21114504 	addi	r4,r4,17684
10002c20:	0004c7c0 	call	10004c7c <puts>
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10002c24:	01040074 	movhi	r4,4097
10002c28:	21114f04 	addi	r4,r4,17724
10002c2c:	0004c7c0 	call	10004c7c <puts>
            while (!(usb_ctl_val & no_device)) {
10002c30:	00000d06 	br	10002c68 <keyboard_init+0x390>
                usb_ctl_val = usb_read(ctl_reg);
10002c34:	d0aa850b 	ldhu	r2,-21996(gp)
10002c38:	10bfffcc 	andi	r2,r2,65535
10002c3c:	1009883a 	mov	r4,r2
10002c40:	00036480 	call	10003648 <usb_read>
10002c44:	d0aa870d 	sth	r2,-21988(gp)
                if (usb_ctl_val & no_device)
10002c48:	d0ea870b 	ldhu	r3,-21988(gp)
10002c4c:	d0aa858b 	ldhu	r2,-21994(gp)
10002c50:	1884703a 	and	r2,r3,r2
10002c54:	10bfffcc 	andi	r2,r2,65535
10002c58:	10000126 	beq	r2,zero,10002c60 <keyboard_init+0x388>
                    goto USB_HOT_PLUG;
10002c5c:	003f2606 	br	100028f8 <__alt_data_end+0xf80028f8>

                usleep(2000);
10002c60:	0101f404 	movi	r4,2000
10002c64:	00122c00 	call	100122c0 <usleep>
            if (usb_ctl_val & no_device) break;
        }
        if (!(usb_ctl_val & no_device)) {
            printf("\n[INFO]: no device is present in SIE1!\n");
            printf("[INFO]: please insert a USB keyboard in SIE1!\n");
            while (!(usb_ctl_val & no_device)) {
10002c68:	d0ea870b 	ldhu	r3,-21988(gp)
10002c6c:	d0aa858b 	ldhu	r2,-21994(gp)
10002c70:	1884703a 	and	r2,r3,r2
10002c74:	10bfffcc 	andi	r2,r2,65535
10002c78:	103fee26 	beq	r2,zero,10002c34 <__alt_data_end+0xf8002c34>
10002c7c:	00000c06 	br	10002cb0 <keyboard_init+0x3d8>
                usleep(2000);
            }
        }
    } else {
        /* check for low speed or full speed by reading D+ and D- lines */
        if (usb_ctl_val & fs_device) {
10002c80:	d0ea870b 	ldhu	r3,-21988(gp)
10002c84:	d0aa860b 	ldhu	r2,-21992(gp)
10002c88:	1884703a 	and	r2,r3,r2
10002c8c:	10bfffcc 	andi	r2,r2,65535
10002c90:	10000426 	beq	r2,zero,10002ca4 <keyboard_init+0x3cc>
            printf("[INFO]: full speed device\n");
10002c94:	01040074 	movhi	r4,4097
10002c98:	21115b04 	addi	r4,r4,17772
10002c9c:	0004c7c0 	call	10004c7c <puts>
10002ca0:	00000306 	br	10002cb0 <keyboard_init+0x3d8>
        } else {
            printf("[INFO]: low speed device\n");
10002ca4:	01040074 	movhi	r4,4097
10002ca8:	21116204 	addi	r4,r4,17800
10002cac:	0004c7c0 	call	10004c7c <puts>
        }
    }

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();
10002cb0:	00037400 	call	10003740 <usb_set_address>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002cb4:	00000306 	br	10002cc4 <keyboard_init+0x3ec>
    {
        usb_set_address();
10002cb8:	00037400 	call	10003740 <usb_set_address>
        usleep(10 * 1000);
10002cbc:	0109c404 	movi	r4,10000
10002cc0:	00122c00 	call	100122c0 <usleep>

    // STEP 3 begin
    // ----------------------------------------------- set address ---------------------------------------------------
    usb_set_address();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002cc4:	010000c4 	movi	r4,3
10002cc8:	00028700 	call	10002870 <io_read>
10002ccc:	10bfffcc 	andi	r2,r2,65535
10002cd0:	1080040c 	andi	r2,r2,16
10002cd4:	103ff826 	beq	r2,zero,10002cb8 <__alt_data_end+0xf8002cb8>
    {
        usb_set_address();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002cd8:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);  // i
10002cdc:	01414184 	movi	r5,1286
10002ce0:	01000084 	movi	r4,2
10002ce4:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n", io_read(HPI_DATA));
10002ce8:	0009883a 	mov	r4,zero
10002cec:	00028700 	call	10002870 <io_read>
10002cf0:	10bfffcc 	andi	r2,r2,65535
10002cf4:	100b883a 	mov	r5,r2
10002cf8:	01040074 	movhi	r4,4097
10002cfc:	21116904 	addi	r4,r4,17828
10002d00:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);  // n
10002d04:	01414204 	movi	r5,1288
10002d08:	01000084 	movi	r4,2
10002d0c:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002d10:	0009883a 	mov	r4,zero
10002d14:	00028700 	call	10002870 <io_read>
10002d18:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n", usb_ctl_val);
10002d1c:	d0aa870b 	ldhu	r2,-21988(gp)
10002d20:	10bfffcc 	andi	r2,r2,65535
10002d24:	100b883a 	mov	r5,r2
10002d28:	01040074 	movhi	r4,4097
10002d2c:	21117404 	addi	r4,r4,17872
10002d30:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) // retries occurred
10002d34:	0001883a 	nop
10002d38:	d0aa870b 	ldhu	r2,-21988(gp)
10002d3c:	10bfffcc 	andi	r2,r2,65535
10002d40:	108000d8 	cmpnei	r2,r2,3
10002d44:	10000326 	beq	r2,zero,10002d54 <keyboard_init+0x47c>
    {
        usb_ctl_val = usb_get_retry_cnt();
10002d48:	00046640 	call	10004664 <usb_get_retry_cnt>
10002d4c:	d0aa870d 	sth	r2,-21988(gp)

        goto USB_HOT_PLUG;
10002d50:	003ee906 	br	100028f8 <__alt_data_end+0xf80028f8>
    }

    printf("------------[ENUM PROCESS]:set address done!---------------\n");
10002d54:	01040074 	movhi	r4,4097
10002d58:	21118004 	addi	r4,r4,17920
10002d5c:	0004c7c0 	call	10004c7c <puts>

    // STEP 4 begin
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1
10002d60:	00038400 	call	10003840 <usb_get_device_desc1>

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002d64:	00000306 	br	10002d74 <keyboard_init+0x49c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
10002d68:	00038400 	call	10003840 <usb_get_device_desc1>
        usleep(10 * 1000);
10002d6c:	0109c404 	movi	r4,10000
10002d70:	00122c00 	call	100122c0 <usleep>
    // ------------------------------- get device descriptor-1 ----------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc1();    // Get Device Descriptor -1

    // usleep(10*1000);
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002d74:	010000c4 	movi	r4,3
10002d78:	00028700 	call	10002870 <io_read>
10002d7c:	10bfffcc 	andi	r2,r2,65535
10002d80:	1080040c 	andi	r2,r2,16
10002d84:	103ff826 	beq	r2,zero,10002d68 <__alt_data_end+0xf8002d68>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002d88:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002d8c:	01414184 	movi	r5,1286
10002d90:	01000084 	movi	r4,2
10002d94:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
10002d98:	0009883a 	mov	r4,zero
10002d9c:	00028700 	call	10002870 <io_read>
10002da0:	10bfffcc 	andi	r2,r2,65535
10002da4:	100b883a 	mov	r5,r2
10002da8:	01040074 	movhi	r4,4097
10002dac:	21118f04 	addi	r4,r4,17980
10002db0:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
10002db4:	01414204 	movi	r5,1288
10002db8:	01000084 	movi	r4,2
10002dbc:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	00028700 	call	10002870 <io_read>
10002dc8:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10002dcc:	d0aa870b 	ldhu	r2,-21988(gp)
10002dd0:	10bfffcc 	andi	r2,r2,65535
10002dd4:	100b883a 	mov	r5,r2
10002dd8:	01040074 	movhi	r4,4097
10002ddc:	21119a04 	addi	r4,r4,18024
10002de0:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
10002de4:	00000206 	br	10002df0 <keyboard_init+0x518>
        usb_ctl_val = usb_get_retry_cnt();
10002de8:	00046640 	call	10004664 <usb_get_retry_cnt>
10002dec:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002df0:	d0aa870b 	ldhu	r2,-21988(gp)
10002df4:	10bfffcc 	andi	r2,r2,65535
10002df8:	108000d8 	cmpnei	r2,r2,3
10002dfc:	103ffa1e 	bne	r2,zero,10002de8 <__alt_data_end+0xf8002de8>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10002e00:	01040074 	movhi	r4,4097
10002e04:	2111a604 	addi	r4,r4,18072
10002e08:	0004c7c0 	call	10004c7c <puts>


    //--------------------------------get device descriptor-2---------------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2
10002e0c:	00039880 	call	10003988 <usb_get_device_desc2>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002e10:	00000306 	br	10002e20 <keyboard_init+0x548>
    {
        // resend the get device descriptor
        // get device descriptor
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
10002e14:	00039880 	call	10003988 <usb_get_device_desc2>
        usleep(10 * 1000);
10002e18:	0109c404 	movi	r4,10000
10002e1c:	00122c00 	call	100122c0 <usleep>
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_device_desc2();    // Get Device Descriptor -2

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002e20:	010000c4 	movi	r4,3
10002e24:	00028700 	call	10002870 <io_read>
10002e28:	10bfffcc 	andi	r2,r2,65535
10002e2c:	1080040c 	andi	r2,r2,16
10002e30:	103ff826 	beq	r2,zero,10002e14 <__alt_data_end+0xf8002e14>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_device_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002e34:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002e38:	01414184 	movi	r5,1286
10002e3c:	01000084 	movi	r4,2
10002e40:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));
10002e44:	0009883a 	mov	r4,zero
10002e48:	00028700 	call	10002870 <io_read>
10002e4c:	10bfffcc 	andi	r2,r2,65535
10002e50:	100b883a 	mov	r5,r2
10002e54:	01040074 	movhi	r4,4097
10002e58:	21118f04 	addi	r4,r4,17980
10002e5c:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
10002e60:	01414204 	movi	r5,1288
10002e64:	01000084 	movi	r4,2
10002e68:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002e6c:	0009883a 	mov	r4,zero
10002e70:	00028700 	call	10002870 <io_read>
10002e74:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
10002e78:	d0aa870b 	ldhu	r2,-21988(gp)
10002e7c:	10bfffcc 	andi	r2,r2,65535
10002e80:	100b883a 	mov	r5,r2
10002e84:	01040074 	movhi	r4,4097
10002e88:	21119a04 	addi	r4,r4,18024
10002e8c:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
10002e90:	00000206 	br	10002e9c <keyboard_init+0x5c4>
        usb_ctl_val = usb_get_retry_cnt();
10002e94:	00046640 	call	10004664 <usb_get_retry_cnt>
10002e98:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002e9c:	d0aa870b 	ldhu	r2,-21988(gp)
10002ea0:	10bfffcc 	andi	r2,r2,65535
10002ea4:	108000d8 	cmpnei	r2,r2,3
10002ea8:	103ffa1e 	bne	r2,zero,10002e94 <__alt_data_end+0xf8002e94>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10002eac:	01040074 	movhi	r4,4097
10002eb0:	2111ba04 	addi	r4,r4,18152
10002eb4:	0004c7c0 	call	10004c7c <puts>


    // STEP 5 begin
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1
10002eb8:	0003b600 	call	10003b60 <usb_get_config_desc1>

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002ebc:	00000306 	br	10002ecc <keyboard_init+0x5f4>
    {
        // resend the get device descriptor
        // get device descriptor

        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
10002ec0:	0003b600 	call	10003b60 <usb_get_config_desc1>
        usleep(10 * 1000);
10002ec4:	0109c404 	movi	r4,10000
10002ec8:	00122c00 	call	100122c0 <usleep>
    // ----------------------------------- get configuration descriptor -1 ----------------------------------//
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc1();    // Get Configuration Descriptor -1

    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002ecc:	010000c4 	movi	r4,3
10002ed0:	00028700 	call	10002870 <io_read>
10002ed4:	10bfffcc 	andi	r2,r2,65535
10002ed8:	1080040c 	andi	r2,r2,16
10002edc:	103ff826 	beq	r2,zero,10002ec0 <__alt_data_end+0xf8002ec0>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc1();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002ee0:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002ee4:	01414184 	movi	r5,1286
10002ee8:	01000084 	movi	r4,2
10002eec:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));
10002ef0:	0009883a 	mov	r4,zero
10002ef4:	00028700 	call	10002870 <io_read>
10002ef8:	10bfffcc 	andi	r2,r2,65535
10002efc:	100b883a 	mov	r5,r2
10002f00:	01040074 	movhi	r4,4097
10002f04:	2111cc04 	addi	r4,r4,18224
10002f08:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
10002f0c:	01414204 	movi	r5,1288
10002f10:	01000084 	movi	r4,2
10002f14:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002f18:	0009883a 	mov	r4,zero
10002f1c:	00028700 	call	10002870 <io_read>
10002f20:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
10002f24:	d0aa870b 	ldhu	r2,-21988(gp)
10002f28:	10bfffcc 	andi	r2,r2,65535
10002f2c:	100b883a 	mov	r5,r2
10002f30:	01040074 	movhi	r4,4097
10002f34:	2111d704 	addi	r4,r4,18268
10002f38:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
10002f3c:	00000206 	br	10002f48 <keyboard_init+0x670>
        usb_ctl_val = usb_get_retry_cnt();
10002f40:	00046640 	call	10004664 <usb_get_retry_cnt>
10002f44:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10002f48:	d0aa870b 	ldhu	r2,-21988(gp)
10002f4c:	10bfffcc 	andi	r2,r2,65535
10002f50:	108000d8 	cmpnei	r2,r2,3
10002f54:	103ffa1e 	bne	r2,zero,10002f40 <__alt_data_end+0xf8002f40>
        usb_ctl_val = usb_get_retry_cnt();
    }
    printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10002f58:	01040074 	movhi	r4,4097
10002f5c:	2111e304 	addi	r4,r4,18316
10002f60:	0004c7c0 	call	10004c7c <puts>

    // STEP 6 begin
    //-----------------------------------get configuration descriptor-2------------------------------------//
    // get device descriptor
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2
10002f64:	0003cf00 	call	10003cf0 <usb_get_config_desc2>

    usleep(100 * 1000);
10002f68:	010000b4 	movhi	r4,2
10002f6c:	2121a804 	addi	r4,r4,-31072
10002f70:	00122c00 	call	100122c0 <usleep>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002f74:	00000306 	br	10002f84 <keyboard_init+0x6ac>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
10002f78:	0003cf00 	call	10003cf0 <usb_get_config_desc2>
        usleep(10 * 1000);
10002f7c:	0109c404 	movi	r4,10000
10002f80:	00122c00 	call	100122c0 <usleep>
    // TASK: Call the appropriate function for this step.
    usb_get_config_desc2();    // Get Configuration Descriptor -2

    usleep(100 * 1000);
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10002f84:	010000c4 	movi	r4,3
10002f88:	00028700 	call	10002870 <io_read>
10002f8c:	10bfffcc 	andi	r2,r2,65535
10002f90:	1080040c 	andi	r2,r2,16
10002f94:	103ff826 	beq	r2,zero,10002f78 <__alt_data_end+0xf8002f78>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_config_desc2();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10002f98:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10002f9c:	01414184 	movi	r5,1286
10002fa0:	01000084 	movi	r4,2
10002fa4:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));
10002fa8:	0009883a 	mov	r4,zero
10002fac:	00028700 	call	10002870 <io_read>
10002fb0:	10bfffcc 	andi	r2,r2,65535
10002fb4:	100b883a 	mov	r5,r2
10002fb8:	01040074 	movhi	r4,4097
10002fbc:	2111f604 	addi	r4,r4,18392
10002fc0:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
10002fc4:	01414204 	movi	r5,1288
10002fc8:	01000084 	movi	r4,2
10002fcc:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10002fd0:	0009883a 	mov	r4,zero
10002fd4:	00028700 	call	10002870 <io_read>
10002fd8:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
10002fdc:	d0aa870b 	ldhu	r2,-21988(gp)
10002fe0:	10bfffcc 	andi	r2,r2,65535
10002fe4:	100b883a 	mov	r5,r2
10002fe8:	01040074 	movhi	r4,4097
10002fec:	21120104 	addi	r4,r4,18436
10002ff0:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
10002ff4:	00000206 	br	10003000 <keyboard_init+0x728>
        usb_ctl_val = usb_get_retry_cnt();
10002ff8:	00046640 	call	10004664 <usb_get_retry_cnt>
10002ffc:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10003000:	d0aa870b 	ldhu	r2,-21988(gp)
10003004:	10bfffcc 	andi	r2,r2,65535
10003008:	108000d8 	cmpnei	r2,r2,3
1000300c:	103ffa1e 	bne	r2,zero,10002ff8 <__alt_data_end+0xf8002ff8>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10003010:	01040074 	movhi	r4,4097
10003014:	21120d04 	addi	r4,r4,18484
10003018:	0004c7c0 	call	10004c7c <puts>


    // --------------------------------- get device info --------------------------------------------- //

    // TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
    io_write(HPI_ADDR, 0x056c);
1000301c:	01415b04 	movi	r5,1388
10003020:	01000084 	movi	r4,2
10003024:	00028000 	call	10002800 <io_write>
    code = io_read(HPI_DATA);
10003028:	0009883a 	mov	r4,zero
1000302c:	00028700 	call	10002870 <io_read>
10003030:	d0aa890d 	sth	r2,-21980(gp)
    code = code & 0x003;
10003034:	d0aa890b 	ldhu	r2,-21980(gp)
10003038:	108000cc 	andi	r2,r2,3
1000303c:	d0aa890d 	sth	r2,-21980(gp)
    printf("\ncode = %x\n", code);
10003040:	d0aa890b 	ldhu	r2,-21980(gp)
10003044:	10bfffcc 	andi	r2,r2,65535
10003048:	100b883a 	mov	r5,r2
1000304c:	01040074 	movhi	r4,4097
10003050:	21122004 	addi	r4,r4,18560
10003054:	0004b800 	call	10004b80 <printf>

    if (code == 0x01) {
10003058:	d0aa890b 	ldhu	r2,-21980(gp)
1000305c:	10bfffcc 	andi	r2,r2,65535
10003060:	10800058 	cmpnei	r2,r2,1
10003064:	1000041e 	bne	r2,zero,10003078 <keyboard_init+0x7a0>
        printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10003068:	01040074 	movhi	r4,4097
1000306c:	21122304 	addi	r4,r4,18572
10003070:	0004c7c0 	call	10004c7c <puts>
10003074:	00000306 	br	10003084 <keyboard_init+0x7ac>
    } else {
        printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10003078:	01040074 	movhi	r4,4097
1000307c:	21123204 	addi	r4,r4,18632
10003080:	0004c7c0 	call	10004c7c <puts>
    }

    // TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

    io_write(HPI_ADDR, 0x0576);
10003084:	01415d84 	movi	r5,1398
10003088:	01000084 	movi	r4,2
1000308c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x073F);
10003090:	0141cfc4 	movi	r5,1855
10003094:	0009883a 	mov	r4,zero
10003098:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x8105);
1000309c:	01604154 	movui	r5,33029
100030a0:	0009883a 	mov	r4,zero
100030a4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0003);
100030a8:	014000c4 	movi	r5,3
100030ac:	0009883a 	mov	r4,zero
100030b0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);
100030b4:	01400204 	movi	r5,8
100030b8:	0009883a 	mov	r4,zero
100030bc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0xAC0A);
100030c0:	016b0294 	movui	r5,44042
100030c4:	0009883a 	mov	r4,zero
100030c8:	00028000 	call	10002800 <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0576);  // HUSB_SIE1_pCurrentTDPtr
100030cc:	01415d84 	movi	r5,1398
100030d0:	01006c04 	movi	r4,432
100030d4:	00035f00 	call	100035f0 <usb_write>

    // data_size = (io_read(HPI_DATA)>>8)&0x0ff;
    // data_size = 0x08;  //(io_read(HPI_DATA))&0x0ff;
    // usb_print_mem();
    io_write(HPI_ADDR, 0x057c);
100030d8:	01415f04 	movi	r5,1404
100030dc:	01000084 	movi	r4,2
100030e0:	00028000 	call	10002800 <io_write>
    data_size = (io_read(HPI_DATA)) & 0x0ff;
100030e4:	0009883a 	mov	r4,zero
100030e8:	00028700 	call	10002870 <io_read>
100030ec:	d0aa8785 	stb	r2,-21986(gp)
    printf("[ENUM PROCESS]:data packet size is %d\n", data_size);
100030f0:	d0aa8783 	ldbu	r2,-21986(gp)
100030f4:	10803fcc 	andi	r2,r2,255
100030f8:	100b883a 	mov	r5,r2
100030fc:	01040074 	movhi	r4,4097
10003100:	21123b04 	addi	r4,r4,18668
10003104:	0004b800 	call	10004b80 <printf>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration
10003108:	0003f580 	call	10003f58 <usb_set_config>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
1000310c:	00000306 	br	1000311c <keyboard_init+0x844>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
10003110:	0003f580 	call	10003f58 <usb_set_config>
        usleep(10 * 1000);
10003114:	0109c404 	movi	r4,10000
10003118:	00122c00 	call	100122c0 <usleep>
    // STEP 7 begin
    // ------------------------------------ set configuration ----------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_set_config();        // Set Configuration

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
1000311c:	010000c4 	movi	r4,3
10003120:	00028700 	call	10002870 <io_read>
10003124:	10bfffcc 	andi	r2,r2,65535
10003128:	1080040c 	andi	r2,r2,16
1000312c:	103ff826 	beq	r2,zero,10003110 <__alt_data_end+0xf8003110>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_set_config();        // Set Configuration
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10003130:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10003134:	01414184 	movi	r5,1286
10003138:	01000084 	movi	r4,2
1000313c:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));
10003140:	0009883a 	mov	r4,zero
10003144:	00028700 	call	10002870 <io_read>
10003148:	10bfffcc 	andi	r2,r2,65535
1000314c:	100b883a 	mov	r5,r2
10003150:	01040074 	movhi	r4,4097
10003154:	21124504 	addi	r4,r4,18708
10003158:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
1000315c:	01414204 	movi	r5,1288
10003160:	01000084 	movi	r4,2
10003164:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10003168:	0009883a 	mov	r4,zero
1000316c:	00028700 	call	10002870 <io_read>
10003170:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
10003174:	d0aa870b 	ldhu	r2,-21988(gp)
10003178:	10bfffcc 	andi	r2,r2,65535
1000317c:	100b883a 	mov	r5,r2
10003180:	01040074 	movhi	r4,4097
10003184:	21125004 	addi	r4,r4,18752
10003188:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
1000318c:	00000206 	br	10003198 <keyboard_init+0x8c0>
        usb_ctl_val = usb_get_retry_cnt();
10003190:	00046640 	call	10004664 <usb_get_retry_cnt>
10003194:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10003198:	d0aa870b 	ldhu	r2,-21988(gp)
1000319c:	10bfffcc 	andi	r2,r2,65535
100031a0:	108000d8 	cmpnei	r2,r2,3
100031a4:	103ffa1e 	bne	r2,zero,10003190 <__alt_data_end+0xf8003190>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
100031a8:	01040074 	movhi	r4,4097
100031ac:	21125c04 	addi	r4,r4,18800
100031b0:	0004c7c0 	call	10004c7c <puts>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();
100031b4:	00040580 	call	10004058 <usb_class_request>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100031b8:	00000306 	br	100031c8 <keyboard_init+0x8f0>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
100031bc:	00040580 	call	10004058 <usb_class_request>
        usleep(10 * 1000);
100031c0:	0109c404 	movi	r4,10000
100031c4:	00122c00 	call	100122c0 <usleep>

    //---------------------------------------------- class request out ------------------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_class_request();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
100031c8:	010000c4 	movi	r4,3
100031cc:	00028700 	call	10002870 <io_read>
100031d0:	10bfffcc 	andi	r2,r2,65535
100031d4:	1080040c 	andi	r2,r2,16
100031d8:	103ff826 	beq	r2,zero,100031bc <__alt_data_end+0xf80031bc>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_class_request();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
100031dc:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
100031e0:	01414184 	movi	r5,1286
100031e4:	01000084 	movi	r4,2
100031e8:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
100031ec:	0009883a 	mov	r4,zero
100031f0:	00028700 	call	10002870 <io_read>
100031f4:	10bfffcc 	andi	r2,r2,65535
100031f8:	100b883a 	mov	r5,r2
100031fc:	01040074 	movhi	r4,4097
10003200:	21126e04 	addi	r4,r4,18872
10003204:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
10003208:	01414204 	movi	r5,1288
1000320c:	01000084 	movi	r4,2
10003210:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
10003214:	0009883a 	mov	r4,zero
10003218:	00028700 	call	10002870 <io_read>
1000321c:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
10003220:	d0aa870b 	ldhu	r2,-21988(gp)
10003224:	10bfffcc 	andi	r2,r2,65535
10003228:	100b883a 	mov	r5,r2
1000322c:	01040074 	movhi	r4,4097
10003230:	21127904 	addi	r4,r4,18916
10003234:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
10003238:	00000206 	br	10003244 <keyboard_init+0x96c>
        usb_ctl_val = usb_get_retry_cnt();
1000323c:	00046640 	call	10004664 <usb_get_retry_cnt>
10003240:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
10003244:	d0aa870b 	ldhu	r2,-21988(gp)
10003248:	10bfffcc 	andi	r2,r2,65535
1000324c:	108000d8 	cmpnei	r2,r2,3
10003250:	103ffa1e 	bne	r2,zero,1000323c <__alt_data_end+0xf800323c>
        usb_ctl_val = usb_get_retry_cnt();
    }


    printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10003254:	01040074 	movhi	r4,4097
10003258:	21128504 	addi	r4,r4,18964
1000325c:	0004c7c0 	call	10004c7c <puts>

    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();
10003260:	00041580 	call	10004158 <usb_get_hid_desc>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003264:	00000306 	br	10003274 <keyboard_init+0x99c>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
10003268:	00041580 	call	10004158 <usb_get_hid_desc>
        usleep(10 * 1000);
1000326c:	0109c404 	movi	r4,10000
10003270:	00122c00 	call	100122c0 <usleep>
    // STEP 8 begin
    // -------------------------------- get descriptor(class 0x21 = HID) request out ------------------------------ //
    // TASK: Call the appropriate function for this step.
    usb_get_hid_desc();

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003274:	010000c4 	movi	r4,3
10003278:	00028700 	call	10002870 <io_read>
1000327c:	10bfffcc 	andi	r2,r2,65535
10003280:	1080040c 	andi	r2,r2,16
10003284:	103ff826 	beq	r2,zero,10003268 <__alt_data_end+0xf8003268>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_hid_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10003288:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
1000328c:	01414184 	movi	r5,1286
10003290:	01000084 	movi	r4,2
10003294:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));
10003298:	0009883a 	mov	r4,zero
1000329c:	00028700 	call	10002870 <io_read>
100032a0:	10bfffcc 	andi	r2,r2,65535
100032a4:	100b883a 	mov	r5,r2
100032a8:	01040074 	movhi	r4,4097
100032ac:	21126e04 	addi	r4,r4,18872
100032b0:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
100032b4:	01414204 	movi	r5,1288
100032b8:	01000084 	movi	r4,2
100032bc:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
100032c0:	0009883a 	mov	r4,zero
100032c4:	00028700 	call	10002870 <io_read>
100032c8:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
100032cc:	d0aa870b 	ldhu	r2,-21988(gp)
100032d0:	10bfffcc 	andi	r2,r2,65535
100032d4:	100b883a 	mov	r5,r2
100032d8:	01040074 	movhi	r4,4097
100032dc:	21127904 	addi	r4,r4,18916
100032e0:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
100032e4:	00000206 	br	100032f0 <keyboard_init+0xa18>
        usb_ctl_val = usb_get_retry_cnt();
100032e8:	00046640 	call	10004664 <usb_get_retry_cnt>
100032ec:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
100032f0:	d0aa870b 	ldhu	r2,-21988(gp)
100032f4:	10bfffcc 	andi	r2,r2,65535
100032f8:	108000d8 	cmpnei	r2,r2,3
100032fc:	103ffa1e 	bne	r2,zero,100032e8 <__alt_data_end+0xf80032e8>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10003300:	01040074 	movhi	r4,4097
10003304:	21129704 	addi	r4,r4,19036
10003308:	0004c7c0 	call	10004c7c <puts>

    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
1000330c:	00042a00 	call	100042a0 <usb_get_report_desc>
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003310:	00000306 	br	10003320 <keyboard_init+0xa48>
    {
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
10003314:	00042a00 	call	100042a0 <usb_get_report_desc>
        usleep(10 * 1000);
10003318:	0109c404 	movi	r4,10000
1000331c:	00122c00 	call	100122c0 <usleep>
    // STEP 9 begin
    // ------------------------------- get descriptor (class 0x22 = report) ---------------------------------------- //
    // TASK: Call the appropriate function for this step.
    usb_get_report_desc();
    // if no message
    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003320:	010000c4 	movi	r4,3
10003324:	00028700 	call	10002870 <io_read>
10003328:	10bfffcc 	andi	r2,r2,65535
1000332c:	1080040c 	andi	r2,r2,16
10003330:	103ff826 	beq	r2,zero,10003314 <__alt_data_end+0xf8003314>
        // TASK: Call the appropriate function again if it wasn't processed successfully.
        usb_get_report_desc();
        usleep(10 * 1000);
    }

    usb_wait_td_list_done();
10003334:	00045e00 	call	100045e0 <usb_wait_td_list_done>

    io_write(HPI_ADDR, 0x0506);
10003338:	01414184 	movi	r5,1286
1000333c:	01000084 	movi	r4,2
10003340:	00028000 	call	10002800 <io_write>
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));
10003344:	0009883a 	mov	r4,zero
10003348:	00028700 	call	10002870 <io_read>
1000334c:	10bfffcc 	andi	r2,r2,65535
10003350:	100b883a 	mov	r5,r2
10003354:	01040074 	movhi	r4,4097
10003358:	2112ab04 	addi	r4,r4,19116
1000335c:	0004b800 	call	10004b80 <printf>

    io_write(HPI_ADDR, 0x0508);
10003360:	01414204 	movi	r5,1288
10003364:	01000084 	movi	r4,2
10003368:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
1000336c:	0009883a 	mov	r4,zero
10003370:	00028700 	call	10002870 <io_read>
10003374:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
10003378:	d0aa870b 	ldhu	r2,-21988(gp)
1000337c:	10bfffcc 	andi	r2,r2,65535
10003380:	100b883a 	mov	r5,r2
10003384:	01040074 	movhi	r4,4097
10003388:	2112b704 	addi	r4,r4,19164
1000338c:	0004b800 	call	10004b80 <printf>
    while (usb_ctl_val != 0x03) {
10003390:	00000206 	br	1000339c <keyboard_init+0xac4>
        usb_ctl_val = usb_get_retry_cnt();
10003394:	00046640 	call	10004664 <usb_get_retry_cnt>
10003398:	d0aa870d 	sth	r2,-21988(gp)
    printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n", io_read(HPI_DATA));

    io_write(HPI_ADDR, 0x0508);
    usb_ctl_val = io_read(HPI_DATA);
    printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n", usb_ctl_val);
    while (usb_ctl_val != 0x03) {
1000339c:	d0aa870b 	ldhu	r2,-21988(gp)
100033a0:	10bfffcc 	andi	r2,r2,65535
100033a4:	108000d8 	cmpnei	r2,r2,3
100033a8:	103ffa1e 	bne	r2,zero,10003394 <__alt_data_end+0xf8003394>
        usb_ctl_val = usb_get_retry_cnt();
    }

    printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
100033ac:	01040074 	movhi	r4,4097
100033b0:	2112c304 	addi	r4,r4,19212
100033b4:	0004c7c0 	call	10004c7c <puts>

    usleep(10000);
100033b8:	0109c404 	movi	r4,10000
100033bc:	00122c00 	call	100122c0 <usleep>
}
100033c0:	0001883a 	nop
100033c4:	e037883a 	mov	sp,fp
100033c8:	dfc00117 	ldw	ra,4(sp)
100033cc:	df000017 	ldw	fp,0(sp)
100033d0:	dec00204 	addi	sp,sp,8
100033d4:	f800283a 	ret

100033d8 <keyboard_fetch>:

int keyboard_fetch(alt_u16 *keycode_ptr) {
100033d8:	defffd04 	addi	sp,sp,-12
100033dc:	dfc00215 	stw	ra,8(sp)
100033e0:	df000115 	stw	fp,4(sp)
100033e4:	df000104 	addi	fp,sp,4
100033e8:	e13fff15 	stw	r4,-4(fp)

    fetch_toggle = 1 - fetch_toggle;
100033ec:	d0aa8683 	ldbu	r2,-21990(gp)
100033f0:	00c00044 	movi	r3,1
100033f4:	1885c83a 	sub	r2,r3,r2
100033f8:	d0aa8685 	stb	r2,-21990(gp)

    io_write(HPI_ADDR, 0x0500);  // the start address
100033fc:	01414004 	movi	r5,1280
10003400:	01000084 	movi	r4,2
10003404:	00028000 	call	10002800 <io_write>
    // data phase IN-1
    io_write(HPI_DATA, 0x051c);  // 500
10003408:	01414704 	movi	r5,1308
1000340c:	0009883a 	mov	r4,zero
10003410:	00028000 	call	10002800 <io_write>

    io_write(HPI_DATA, 0x000f & data_size);  // 2 data length
10003414:	d0aa8783 	ldbu	r2,-21986(gp)
10003418:	10803fcc 	andi	r2,r2,255
1000341c:	108003cc 	andi	r2,r2,15
10003420:	100b883a 	mov	r5,r2
10003424:	0009883a 	mov	r4,zero
10003428:	00028000 	call	10002800 <io_write>

    io_write(HPI_DATA, 0x0291);  // 4 // endpoint 1
1000342c:	0140a444 	movi	r5,657
10003430:	0009883a 	mov	r4,zero
10003434:	00028000 	call	10002800 <io_write>
    if (fetch_toggle) {
10003438:	d0aa8683 	ldbu	r2,-21990(gp)
1000343c:	10803fcc 	andi	r2,r2,255
10003440:	10000426 	beq	r2,zero,10003454 <keyboard_fetch+0x7c>
        io_write(HPI_DATA, 0x0001);  // 6 // data 1
10003444:	01400044 	movi	r5,1
10003448:	0009883a 	mov	r4,zero
1000344c:	00028000 	call	10002800 <io_write>
10003450:	00000306 	br	10003460 <keyboard_fetch+0x88>
    } else {
        io_write(HPI_DATA, 0x0041);  // 6 // data 1
10003454:	01401044 	movi	r5,65
10003458:	0009883a 	mov	r4,zero
1000345c:	00028000 	call	10002800 <io_write>
    }
    io_write(HPI_DATA, 0x0013);  // 8
10003460:	014004c4 	movi	r5,19
10003464:	0009883a 	mov	r4,zero
10003468:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);  // a
1000346c:	000b883a 	mov	r5,zero
10003470:	0009883a 	mov	r4,zero
10003474:	00028000 	call	10002800 <io_write>
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr
10003478:	01414004 	movi	r5,1280
1000347c:	01006c04 	movi	r4,432
10003480:	00035f00 	call	100035f0 <usb_write>

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003484:	00002206 	br	10003510 <keyboard_fetch+0x138>
    {
        io_write(HPI_ADDR, 0x0500);  // the start address
10003488:	01414004 	movi	r5,1280
1000348c:	01000084 	movi	r4,2
10003490:	00028000 	call	10002800 <io_write>
        // data phase IN-1
        io_write(HPI_DATA, 0x051c);  // 500
10003494:	01414704 	movi	r5,1308
10003498:	0009883a 	mov	r4,zero
1000349c:	00028000 	call	10002800 <io_write>

        io_write(HPI_DATA, 0x000f & data_size);  // 2 data length
100034a0:	d0aa8783 	ldbu	r2,-21986(gp)
100034a4:	10803fcc 	andi	r2,r2,255
100034a8:	108003cc 	andi	r2,r2,15
100034ac:	100b883a 	mov	r5,r2
100034b0:	0009883a 	mov	r4,zero
100034b4:	00028000 	call	10002800 <io_write>

        io_write(HPI_DATA, 0x0291);  // 4 // endpoint 1
100034b8:	0140a444 	movi	r5,657
100034bc:	0009883a 	mov	r4,zero
100034c0:	00028000 	call	10002800 <io_write>

        if (fetch_toggle) {
100034c4:	d0aa8683 	ldbu	r2,-21990(gp)
100034c8:	10803fcc 	andi	r2,r2,255
100034cc:	10000426 	beq	r2,zero,100034e0 <keyboard_fetch+0x108>
            io_write(HPI_DATA, 0x0001);  // 6 // data 1
100034d0:	01400044 	movi	r5,1
100034d4:	0009883a 	mov	r4,zero
100034d8:	00028000 	call	10002800 <io_write>
100034dc:	00000306 	br	100034ec <keyboard_fetch+0x114>
        } else {
            io_write(HPI_DATA, 0x0041);  // 6 // data 1
100034e0:	01401044 	movi	r5,65
100034e4:	0009883a 	mov	r4,zero
100034e8:	00028000 	call	10002800 <io_write>
        }

        io_write(HPI_DATA, 0x0013);  // 8
100034ec:	014004c4 	movi	r5,19
100034f0:	0009883a 	mov	r4,zero
100034f4:	00028000 	call	10002800 <io_write>
        io_write(HPI_DATA, 0x0000);  //
100034f8:	000b883a 	mov	r5,zero
100034fc:	0009883a 	mov	r4,zero
10003500:	00028000 	call	10002800 <io_write>
        usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr
10003504:	01414004 	movi	r5,1280
10003508:	01006c04 	movi	r4,432
1000350c:	00035f00 	call	100035f0 <usb_write>
    }
    io_write(HPI_DATA, 0x0013);  // 8
    io_write(HPI_DATA, 0x0000);  // a
    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500);  // HUSB_SIE1_pCurrentTDPtr

    while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  // read sie1 msg register
10003510:	010000c4 	movi	r4,3
10003514:	00028700 	call	10002870 <io_read>
10003518:	10bfffcc 	andi	r2,r2,65535
1000351c:	1080040c 	andi	r2,r2,16
10003520:	103fd926 	beq	r2,zero,10003488 <__alt_data_end+0xf8003488>

        // NOTE: [liuzikai] disable this sleep so that this procesure won't take too long
        // usleep(10 * 1000);
    }

    usb_ctl_val = usb_wait_td_list_done();
10003524:	00045e00 	call	100045e0 <usb_wait_td_list_done>
10003528:	d0aa870d 	sth	r2,-21988(gp)

    // The first two keycodes are stored in 0x051E. Other keycodes are in subsequent addresses.
    *keycode_ptr = usb_read(0x051e);
1000352c:	01014784 	movi	r4,1310
10003530:	00036480 	call	10003648 <usb_read>
10003534:	1007883a 	mov	r3,r2
10003538:	e0bfff17 	ldw	r2,-4(fp)
1000353c:	10c0000d 	sth	r3,0(r2)
            printf("[INFO]: please insert again!!! \n");
            return 1;
        }
    } */

    return 0;
10003540:	0005883a 	mov	r2,zero
}
10003544:	e037883a 	mov	sp,fp
10003548:	dfc00117 	ldw	ra,4(sp)
1000354c:	df000017 	ldw	fp,0(sp)
10003550:	dec00204 	addi	sp,sp,8
10003554:	f800283a 	ret

10003558 <keyboard_hot_plugged>:

int keyboard_hot_plugged() {
10003558:	defffe04 	addi	sp,sp,-8
1000355c:	dfc00115 	stw	ra,4(sp)
10003560:	df000015 	stw	fp,0(sp)
10003564:	d839883a 	mov	fp,sp
    usb_ctl_val = usb_read(ctl_reg);
10003568:	d0aa850b 	ldhu	r2,-21996(gp)
1000356c:	10bfffcc 	andi	r2,r2,65535
10003570:	1009883a 	mov	r4,r2
10003574:	00036480 	call	10003648 <usb_read>
10003578:	d0aa870d 	sth	r2,-21988(gp)
    usleep(5 * 1000);
1000357c:	0104e204 	movi	r4,5000
10003580:	00122c00 	call	100122c0 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
10003584:	d0aa850b 	ldhu	r2,-21996(gp)
10003588:	10bfffcc 	andi	r2,r2,65535
1000358c:	1009883a 	mov	r4,r2
10003590:	00036480 	call	10003648 <usb_read>
10003594:	d0aa870d 	sth	r2,-21988(gp)
    usleep(5 * 1000);
10003598:	0104e204 	movi	r4,5000
1000359c:	00122c00 	call	100122c0 <usleep>
    usb_ctl_val = usb_read(ctl_reg);
100035a0:	d0aa850b 	ldhu	r2,-21996(gp)
100035a4:	10bfffcc 	andi	r2,r2,65535
100035a8:	1009883a 	mov	r4,r2
100035ac:	00036480 	call	10003648 <usb_read>
100035b0:	d0aa870d 	sth	r2,-21988(gp)
    usleep(5 * 1000);
100035b4:	0104e204 	movi	r4,5000
100035b8:	00122c00 	call	100122c0 <usleep>

    if (usb_ctl_val & no_device) return 1;
100035bc:	d0ea870b 	ldhu	r3,-21988(gp)
100035c0:	d0aa858b 	ldhu	r2,-21994(gp)
100035c4:	1884703a 	and	r2,r3,r2
100035c8:	10bfffcc 	andi	r2,r2,65535
100035cc:	10000226 	beq	r2,zero,100035d8 <keyboard_hot_plugged+0x80>
100035d0:	00800044 	movi	r2,1
100035d4:	00000106 	br	100035dc <keyboard_hot_plugged+0x84>

    return 0;
100035d8:	0005883a 	mov	r2,zero
}
100035dc:	e037883a 	mov	sp,fp
100035e0:	dfc00117 	ldw	ra,4(sp)
100035e4:	df000017 	ldw	fp,0(sp)
100035e8:	dec00204 	addi	sp,sp,8
100035ec:	f800283a 	ret

100035f0 <usb_write>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_write(alt_u16 Address, alt_u16 Data) {
100035f0:	defffc04 	addi	sp,sp,-16
100035f4:	dfc00315 	stw	ra,12(sp)
100035f8:	df000215 	stw	fp,8(sp)
100035fc:	df000204 	addi	fp,sp,8
10003600:	2007883a 	mov	r3,r4
10003604:	2805883a 	mov	r2,r5
10003608:	e0fffe0d 	sth	r3,-8(fp)
1000360c:	e0bfff0d 	sth	r2,-4(fp)
    io_write(HPI_ADDR, Address);
10003610:	e0bffe0b 	ldhu	r2,-8(fp)
10003614:	100b883a 	mov	r5,r2
10003618:	01000084 	movi	r4,2
1000361c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, Data);
10003620:	e0bfff0b 	ldhu	r2,-4(fp)
10003624:	100b883a 	mov	r5,r2
10003628:	0009883a 	mov	r4,zero
1000362c:	00028000 	call	10002800 <io_write>
}
10003630:	0001883a 	nop
10003634:	e037883a 	mov	sp,fp
10003638:	dfc00117 	ldw	ra,4(sp)
1000363c:	df000017 	ldw	fp,0(sp)
10003640:	dec00204 	addi	sp,sp,8
10003644:	f800283a 	ret

10003648 <usb_read>:
 * @return   The data read from the specified address
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 usb_read(alt_u16 Address) {
10003648:	defffd04 	addi	sp,sp,-12
1000364c:	dfc00215 	stw	ra,8(sp)
10003650:	df000115 	stw	fp,4(sp)
10003654:	df000104 	addi	fp,sp,4
10003658:	2005883a 	mov	r2,r4
1000365c:	e0bfff0d 	sth	r2,-4(fp)
    // Write the address into HPI address port register
    io_write(HPI_ADDR, Address);
10003660:	e0bfff0b 	ldhu	r2,-4(fp)
10003664:	100b883a 	mov	r5,r2
10003668:	01000084 	movi	r4,2
1000366c:	00028000 	call	10002800 <io_write>
    return io_read(HPI_DATA);
10003670:	0009883a 	mov	r4,zero
10003674:	00028700 	call	10002870 <io_read>
}
10003678:	e037883a 	mov	sp,fp
1000367c:	dfc00117 	ldw	ra,4(sp)
10003680:	df000017 	ldw	fp,0(sp)
10003684:	dec00204 	addi	sp,sp,8
10003688:	f800283a 	ret

1000368c <usb_soft_reset>:
 * @return   None
 *
 * @note     None
 *
 ******************************************************************************/
void usb_soft_reset() {
1000368c:	defffe04 	addi	sp,sp,-8
10003690:	dfc00115 	stw	ra,4(sp)
10003694:	df000015 	stw	fp,0(sp)
10003698:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    io_write(HPI_MAILBOX, COMM_RESET); //COMM_JUMP2CODE
1000369c:	017e9414 	movui	r5,64080
100036a0:	01000044 	movi	r4,1
100036a4:	00028000 	call	10002800 <io_write>
    usleep(100000);
100036a8:	010000b4 	movhi	r4,2
100036ac:	2121a804 	addi	r4,r4,-31072
100036b0:	00122c00 	call	100122c0 <usleep>
    printf("[USB INIT]:reset finished!\n");
100036b4:	01040074 	movhi	r4,4097
100036b8:	2112d704 	addi	r4,r4,19292
100036bc:	0004c7c0 	call	10004c7c <puts>

    usleep(500000);
100036c0:	01000234 	movhi	r4,8
100036c4:	21284804 	addi	r4,r4,-24288
100036c8:	00122c00 	call	100122c0 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
100036cc:	01040074 	movhi	r4,4097
100036d0:	2112de04 	addi	r4,r4,19320
100036d4:	0004c7c0 	call	10004c7c <puts>
    io_read(HPI_MAILBOX);
100036d8:	01000044 	movi	r4,1
100036dc:	00028700 	call	10002870 <io_read>
    io_read(HPI_STATUS);
100036e0:	010000c4 	movi	r4,3
100036e4:	00028700 	call	10002870 <io_read>

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    usb_read(HPI_SIE1_MSG_ADR);
100036e8:	01005104 	movi	r4,324
100036ec:	00036480 	call	10003648 <usb_read>
    usb_write(HPI_SIE1_MSG_ADR, 0);
100036f0:	000b883a 	mov	r5,zero
100036f4:	01005104 	movi	r4,324
100036f8:	00035f00 	call	100035f0 <usb_write>
    usb_read(HPI_SIE2_MSG_ADR);
100036fc:	01005204 	movi	r4,328
10003700:	00036480 	call	10003648 <usb_read>
    usb_write(HPI_SIE2_MSG_ADR, 0);
10003704:	000b883a 	mov	r5,zero
10003708:	01005204 	movi	r4,328
1000370c:	00035f00 	call	100035f0 <usb_write>


    usb_write(HOST1_STAT_REG, 0xFFFF);
10003710:	017fffd4 	movui	r5,65535
10003714:	01302414 	movui	r4,49296
10003718:	00035f00 	call	100035f0 <usb_write>
    usb_write(HOST2_STAT_REG, 0xFFFF);
1000371c:	017fffd4 	movui	r5,65535
10003720:	01302c14 	movui	r4,49328
10003724:	00035f00 	call	100035f0 <usb_write>
}
10003728:	0001883a 	nop
1000372c:	e037883a 	mov	sp,fp
10003730:	dfc00117 	ldw	ra,4(sp)
10003734:	df000017 	ldw	fp,0(sp)
10003738:	dec00204 	addi	sp,sp,8
1000373c:	f800283a 	ret

10003740 <usb_set_address>:


void usb_set_address() {
10003740:	defffe04 	addi	sp,sp,-8
10003744:	dfc00115 	stw	ra,4(sp)
10003748:	df000015 	stw	fp,0(sp)
1000374c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003750:	01414004 	movi	r5,1280
10003754:	01000084 	movi	r4,2
10003758:	00028000 	call	10002800 <io_write>
    // TD #1: 6 writes
    io_write(HPI_DATA, 0x050C);
1000375c:	01414304 	movi	r5,1292
10003760:	0009883a 	mov	r4,zero
10003764:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003768:	01400204 	movi	r5,8
1000376c:	0009883a 	mov	r4,zero
10003770:	00028000 	call	10002800 <io_write>
    // TASK: Complete with 4 more IOWR functions
    io_write(HPI_DATA, 0x00D0);
10003774:	01403404 	movi	r5,208
10003778:	0009883a 	mov	r4,zero
1000377c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10003780:	01400044 	movi	r5,1
10003784:	0009883a 	mov	r4,zero
10003788:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
1000378c:	014004c4 	movi	r5,19
10003790:	0009883a 	mov	r4,zero
10003794:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
10003798:	01414504 	movi	r5,1300
1000379c:	0009883a 	mov	r4,zero
100037a0:	00028000 	call	10002800 <io_write>
    // TD #2: 4 writes
    // TASK: Complete with 4 IOWR functions
    io_write(HPI_DATA, 0x0500);
100037a4:	01414004 	movi	r5,1280
100037a8:	0009883a 	mov	r4,zero
100037ac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0002);
100037b0:	01400084 	movi	r5,2
100037b4:	0009883a 	mov	r4,zero
100037b8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
100037bc:	000b883a 	mov	r5,zero
100037c0:	0009883a 	mov	r4,zero
100037c4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
100037c8:	000b883a 	mov	r5,zero
100037cc:	0009883a 	mov	r4,zero
100037d0:	00028000 	call	10002800 <io_write>
    // TD #3: 6 writes
    // TASK: Complete with 6 IOWR functions
    io_write(HPI_DATA, 0x0000); //
100037d4:	000b883a 	mov	r5,zero
100037d8:	0009883a 	mov	r4,zero
100037dc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//
100037e0:	000b883a 	mov	r5,zero
100037e4:	0009883a 	mov	r4,zero
100037e8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0090);//
100037ec:	01402404 	movi	r5,144
100037f0:	0009883a 	mov	r4,zero
100037f4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);
100037f8:	01401044 	movi	r5,65
100037fc:	0009883a 	mov	r4,zero
10003800:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
10003804:	014004c4 	movi	r5,19
10003808:	0009883a 	mov	r4,zero
1000380c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
10003810:	000b883a 	mov	r5,zero
10003814:	0009883a 	mov	r4,zero
10003818:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000381c:	01414004 	movi	r5,1280
10003820:	01006c04 	movi	r4,432
10003824:	00035f00 	call	100035f0 <usb_write>
}
10003828:	0001883a 	nop
1000382c:	e037883a 	mov	sp,fp
10003830:	dfc00117 	ldw	ra,4(sp)
10003834:	df000017 	ldw	fp,0(sp)
10003838:	dec00204 	addi	sp,sp,8
1000383c:	f800283a 	ret

10003840 <usb_get_device_desc1>:


void usb_get_device_desc1() {
10003840:	defffe04 	addi	sp,sp,-8
10003844:	dfc00115 	stw	ra,4(sp)
10003848:	df000015 	stw	fp,0(sp)
1000384c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003850:	01414004 	movi	r5,1280
10003854:	01000084 	movi	r4,2
10003858:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
1000385c:	01414304 	movi	r5,1292
10003860:	0009883a 	mov	r4,zero
10003864:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003868:	01400204 	movi	r5,8
1000386c:	0009883a 	mov	r4,zero
10003870:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003874:	0140b404 	movi	r5,720
10003878:	0009883a 	mov	r4,zero
1000387c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10003880:	01400044 	movi	r5,1
10003884:	0009883a 	mov	r4,zero
10003888:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
1000388c:	014004c4 	movi	r5,19
10003890:	0009883a 	mov	r4,zero
10003894:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
10003898:	01414504 	movi	r5,1300
1000389c:	0009883a 	mov	r4,zero
100038a0:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
100038a4:	0141a004 	movi	r5,1664
100038a8:	0009883a 	mov	r4,zero
100038ac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0100); //device 0x01
100038b0:	01404004 	movi	r5,256
100038b4:	0009883a 	mov	r4,zero
100038b8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
100038bc:	000b883a 	mov	r5,zero
100038c0:	0009883a 	mov	r4,zero
100038c4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);
100038c8:	01400204 	movi	r5,8
100038cc:	0009883a 	mov	r4,zero
100038d0:	00028000 	call	10002800 <io_write>

    //data phase IN
    io_write(HPI_DATA, 0x052C); //
100038d4:	01414b04 	movi	r5,1324
100038d8:	0009883a 	mov	r4,zero
100038dc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//
100038e0:	01400204 	movi	r5,8
100038e4:	0009883a 	mov	r4,zero
100038e8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//
100038ec:	0140a404 	movi	r5,656
100038f0:	0009883a 	mov	r4,zero
100038f4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);
100038f8:	01401044 	movi	r5,65
100038fc:	0009883a 	mov	r4,zero
10003900:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
10003904:	014004c4 	movi	r5,19
10003908:	0009883a 	mov	r4,zero
1000390c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0520);
10003910:	01414804 	movi	r5,1312
10003914:	0009883a 	mov	r4,zero
10003918:	00028000 	call	10002800 <io_write>

    //    //status phase
    io_write(HPI_DATA, 0x0000); //don't care
1000391c:	000b883a 	mov	r5,zero
10003920:	0009883a 	mov	r4,zero
10003924:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//port number
10003928:	000b883a 	mov	r5,zero
1000392c:	0009883a 	mov	r4,zero
10003930:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0210);//device address
10003934:	01408404 	movi	r5,528
10003938:	0009883a 	mov	r4,zero
1000393c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);
10003940:	01401044 	movi	r5,65
10003944:	0009883a 	mov	r4,zero
10003948:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
1000394c:	014004c4 	movi	r5,19
10003950:	0009883a 	mov	r4,zero
10003954:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
10003958:	000b883a 	mov	r5,zero
1000395c:	0009883a 	mov	r4,zero
10003960:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003964:	01414004 	movi	r5,1280
10003968:	01006c04 	movi	r4,432
1000396c:	00035f00 	call	100035f0 <usb_write>
}
10003970:	0001883a 	nop
10003974:	e037883a 	mov	sp,fp
10003978:	dfc00117 	ldw	ra,4(sp)
1000397c:	df000017 	ldw	fp,0(sp)
10003980:	dec00204 	addi	sp,sp,8
10003984:	f800283a 	ret

10003988 <usb_get_device_desc2>:

void usb_get_device_desc2() {
10003988:	defffe04 	addi	sp,sp,-8
1000398c:	dfc00115 	stw	ra,4(sp)
10003990:	df000015 	stw	fp,0(sp)
10003994:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003998:	01414004 	movi	r5,1280
1000399c:	01000084 	movi	r4,2
100039a0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
100039a4:	01414304 	movi	r5,1292
100039a8:	0009883a 	mov	r4,zero
100039ac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100039b0:	01400204 	movi	r5,8
100039b4:	0009883a 	mov	r4,zero
100039b8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
100039bc:	0140b404 	movi	r5,720
100039c0:	0009883a 	mov	r4,zero
100039c4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
100039c8:	01400044 	movi	r5,1
100039cc:	0009883a 	mov	r4,zero
100039d0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
100039d4:	014004c4 	movi	r5,19
100039d8:	0009883a 	mov	r4,zero
100039dc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
100039e0:	01414504 	movi	r5,1300
100039e4:	0009883a 	mov	r4,zero
100039e8:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
100039ec:	0141a004 	movi	r5,1664
100039f0:	0009883a 	mov	r4,zero
100039f4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0100);//e //device 0x01
100039f8:	01404004 	movi	r5,256
100039fc:	0009883a 	mov	r4,zero
10003a00:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003a04:	000b883a 	mov	r5,zero
10003a08:	0009883a 	mov	r4,zero
10003a0c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0012);//2
10003a10:	01400484 	movi	r5,18
10003a14:	0009883a 	mov	r4,zero
10003a18:	00028000 	call	10002800 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10003a1c:	01415104 	movi	r5,1348
10003a20:	0009883a 	mov	r4,zero
10003a24:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003a28:	01400204 	movi	r5,8
10003a2c:	0009883a 	mov	r4,zero
10003a30:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003a34:	0140a404 	movi	r5,656
10003a38:	0009883a 	mov	r4,zero
10003a3c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003a40:	01401044 	movi	r5,65
10003a44:	0009883a 	mov	r4,zero
10003a48:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003a4c:	014004c4 	movi	r5,19
10003a50:	0009883a 	mov	r4,zero
10003a54:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003a58:	01414804 	movi	r5,1312
10003a5c:	0009883a 	mov	r4,zero
10003a60:	00028000 	call	10002800 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
10003a64:	01415304 	movi	r5,1356
10003a68:	0009883a 	mov	r4,zero
10003a6c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003a70:	01400204 	movi	r5,8
10003a74:	0009883a 	mov	r4,zero
10003a78:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003a7c:	0140a404 	movi	r5,656
10003a80:	0009883a 	mov	r4,zero
10003a84:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//6
10003a88:	01400044 	movi	r5,1
10003a8c:	0009883a 	mov	r4,zero
10003a90:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003a94:	014004c4 	movi	r5,19
10003a98:	0009883a 	mov	r4,zero
10003a9c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003aa0:	01414b04 	movi	r5,1324
10003aa4:	0009883a 	mov	r4,zero
10003aa8:	00028000 	call	10002800 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0554); //c
10003aac:	01415504 	movi	r5,1364
10003ab0:	0009883a 	mov	r4,zero
10003ab4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0002);//e
10003ab8:	01400084 	movi	r5,2
10003abc:	0009883a 	mov	r4,zero
10003ac0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10003ac4:	0140a404 	movi	r5,656
10003ac8:	0009883a 	mov	r4,zero
10003acc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003ad0:	01401044 	movi	r5,65
10003ad4:	0009883a 	mov	r4,zero
10003ad8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003adc:	014004c4 	movi	r5,19
10003ae0:	0009883a 	mov	r4,zero
10003ae4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10003ae8:	01414e04 	movi	r5,1336
10003aec:	0009883a 	mov	r4,zero
10003af0:	00028000 	call	10002800 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //538
10003af4:	000b883a 	mov	r5,zero
10003af8:	0009883a 	mov	r4,zero
10003afc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//a
10003b00:	000b883a 	mov	r5,zero
10003b04:	0009883a 	mov	r4,zero
10003b08:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0210);//c
10003b0c:	01408404 	movi	r5,528
10003b10:	0009883a 	mov	r4,zero
10003b14:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//e
10003b18:	01401044 	movi	r5,65
10003b1c:	0009883a 	mov	r4,zero
10003b20:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//540
10003b24:	014004c4 	movi	r5,19
10003b28:	0009883a 	mov	r4,zero
10003b2c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//2
10003b30:	000b883a 	mov	r5,zero
10003b34:	0009883a 	mov	r4,zero
10003b38:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003b3c:	01414004 	movi	r5,1280
10003b40:	01006c04 	movi	r4,432
10003b44:	00035f00 	call	100035f0 <usb_write>
}
10003b48:	0001883a 	nop
10003b4c:	e037883a 	mov	sp,fp
10003b50:	dfc00117 	ldw	ra,4(sp)
10003b54:	df000017 	ldw	fp,0(sp)
10003b58:	dec00204 	addi	sp,sp,8
10003b5c:	f800283a 	ret

10003b60 <usb_get_config_desc1>:


void usb_get_config_desc1() {
10003b60:	defffe04 	addi	sp,sp,-8
10003b64:	dfc00115 	stw	ra,4(sp)
10003b68:	df000015 	stw	fp,0(sp)
10003b6c:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003b70:	01414004 	movi	r5,1280
10003b74:	01000084 	movi	r4,2
10003b78:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
10003b7c:	01414304 	movi	r5,1292
10003b80:	0009883a 	mov	r4,zero
10003b84:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003b88:	01400204 	movi	r5,8
10003b8c:	0009883a 	mov	r4,zero
10003b90:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003b94:	0140b404 	movi	r5,720
10003b98:	0009883a 	mov	r4,zero
10003b9c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10003ba0:	01400044 	movi	r5,1
10003ba4:	0009883a 	mov	r4,zero
10003ba8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
10003bac:	014004c4 	movi	r5,19
10003bb0:	0009883a 	mov	r4,zero
10003bb4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
10003bb8:	01414504 	movi	r5,1300
10003bbc:	0009883a 	mov	r4,zero
10003bc0:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003bc4:	0141a004 	movi	r5,1664
10003bc8:	0009883a 	mov	r4,zero
10003bcc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10003bd0:	01408004 	movi	r5,512
10003bd4:	0009883a 	mov	r4,zero
10003bd8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003bdc:	000b883a 	mov	r5,zero
10003be0:	0009883a 	mov	r4,zero
10003be4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0009);//2
10003be8:	01400244 	movi	r5,9
10003bec:	0009883a 	mov	r4,zero
10003bf0:	00028000 	call	10002800 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
10003bf4:	01415104 	movi	r5,1348
10003bf8:	0009883a 	mov	r4,zero
10003bfc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003c00:	01400204 	movi	r5,8
10003c04:	0009883a 	mov	r4,zero
10003c08:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003c0c:	0140a404 	movi	r5,656
10003c10:	0009883a 	mov	r4,zero
10003c14:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003c18:	01401044 	movi	r5,65
10003c1c:	0009883a 	mov	r4,zero
10003c20:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003c24:	014004c4 	movi	r5,19
10003c28:	0009883a 	mov	r4,zero
10003c2c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003c30:	01414804 	movi	r5,1312
10003c34:	0009883a 	mov	r4,zero
10003c38:	00028000 	call	10002800 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x054c); //520
10003c3c:	01415304 	movi	r5,1356
10003c40:	0009883a 	mov	r4,zero
10003c44:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//2
10003c48:	01400044 	movi	r5,1
10003c4c:	0009883a 	mov	r4,zero
10003c50:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003c54:	0140a404 	movi	r5,656
10003c58:	0009883a 	mov	r4,zero
10003c5c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003c60:	01400044 	movi	r5,1
10003c64:	0009883a 	mov	r4,zero
10003c68:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003c6c:	014004c4 	movi	r5,19
10003c70:	0009883a 	mov	r4,zero
10003c74:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003c78:	01414b04 	movi	r5,1324
10003c7c:	0009883a 	mov	r4,zero
10003c80:	00028000 	call	10002800 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
10003c84:	000b883a 	mov	r5,zero
10003c88:	0009883a 	mov	r4,zero
10003c8c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//e
10003c90:	000b883a 	mov	r5,zero
10003c94:	0009883a 	mov	r4,zero
10003c98:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0210);//530
10003c9c:	01408404 	movi	r5,528
10003ca0:	0009883a 	mov	r4,zero
10003ca4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003ca8:	01401044 	movi	r5,65
10003cac:	0009883a 	mov	r4,zero
10003cb0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003cb4:	014004c4 	movi	r5,19
10003cb8:	0009883a 	mov	r4,zero
10003cbc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10003cc0:	000b883a 	mov	r5,zero
10003cc4:	0009883a 	mov	r4,zero
10003cc8:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003ccc:	01414004 	movi	r5,1280
10003cd0:	01006c04 	movi	r4,432
10003cd4:	00035f00 	call	100035f0 <usb_write>
}
10003cd8:	0001883a 	nop
10003cdc:	e037883a 	mov	sp,fp
10003ce0:	dfc00117 	ldw	ra,4(sp)
10003ce4:	df000017 	ldw	fp,0(sp)
10003ce8:	dec00204 	addi	sp,sp,8
10003cec:	f800283a 	ret

10003cf0 <usb_get_config_desc2>:


void usb_get_config_desc2() {
10003cf0:	defffe04 	addi	sp,sp,-8
10003cf4:	dfc00115 	stw	ra,4(sp)
10003cf8:	df000015 	stw	fp,0(sp)
10003cfc:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003d00:	01414004 	movi	r5,1280
10003d04:	01000084 	movi	r4,2
10003d08:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
10003d0c:	01414304 	movi	r5,1292
10003d10:	0009883a 	mov	r4,zero
10003d14:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003d18:	01400204 	movi	r5,8
10003d1c:	0009883a 	mov	r4,zero
10003d20:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
10003d24:	0140b404 	movi	r5,720
10003d28:	0009883a 	mov	r4,zero
10003d2c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10003d30:	01400044 	movi	r5,1
10003d34:	0009883a 	mov	r4,zero
10003d38:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
10003d3c:	014004c4 	movi	r5,19
10003d40:	0009883a 	mov	r4,zero
10003d44:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
10003d48:	01414504 	movi	r5,1300
10003d4c:	0009883a 	mov	r4,zero
10003d50:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0680);//c
10003d54:	0141a004 	movi	r5,1664
10003d58:	0009883a 	mov	r4,zero
10003d5c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0200);//e //config 0x02
10003d60:	01408004 	movi	r5,512
10003d64:	0009883a 	mov	r4,zero
10003d68:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//0
10003d6c:	000b883a 	mov	r5,zero
10003d70:	0009883a 	mov	r4,zero
10003d74:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x00FF);//2
10003d78:	01403fc4 	movi	r5,255
10003d7c:	0009883a 	mov	r4,zero
10003d80:	00028000 	call	10002800 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x055c); //514
10003d84:	01415704 	movi	r5,1372
10003d88:	0009883a 	mov	r4,zero
10003d8c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10003d90:	01400204 	movi	r5,8
10003d94:	0009883a 	mov	r4,zero
10003d98:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003d9c:	0140a404 	movi	r5,656
10003da0:	0009883a 	mov	r4,zero
10003da4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10003da8:	01401044 	movi	r5,65
10003dac:	0009883a 	mov	r4,zero
10003db0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003db4:	014004c4 	movi	r5,19
10003db8:	0009883a 	mov	r4,zero
10003dbc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10003dc0:	01414804 	movi	r5,1312
10003dc4:	0009883a 	mov	r4,zero
10003dc8:	00028000 	call	10002800 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0564); //520
10003dcc:	01415904 	movi	r5,1380
10003dd0:	0009883a 	mov	r4,zero
10003dd4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//2
10003dd8:	01400204 	movi	r5,8
10003ddc:	0009883a 	mov	r4,zero
10003de0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10003de4:	0140a404 	movi	r5,656
10003de8:	0009883a 	mov	r4,zero
10003dec:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
10003df0:	01400044 	movi	r5,1
10003df4:	0009883a 	mov	r4,zero
10003df8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003dfc:	014004c4 	movi	r5,19
10003e00:	0009883a 	mov	r4,zero
10003e04:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x052c);//a
10003e08:	01414b04 	movi	r5,1324
10003e0c:	0009883a 	mov	r4,zero
10003e10:	00028000 	call	10002800 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x056c); //52c
10003e14:	01415b04 	movi	r5,1388
10003e18:	0009883a 	mov	r4,zero
10003e1c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//e
10003e20:	01400204 	movi	r5,8
10003e24:	0009883a 	mov	r4,zero
10003e28:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//530
10003e2c:	0140a404 	movi	r5,656
10003e30:	0009883a 	mov	r4,zero
10003e34:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10003e38:	01401044 	movi	r5,65
10003e3c:	0009883a 	mov	r4,zero
10003e40:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10003e44:	014004c4 	movi	r5,19
10003e48:	0009883a 	mov	r4,zero
10003e4c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10003e50:	01414e04 	movi	r5,1336
10003e54:	0009883a 	mov	r4,zero
10003e58:	00028000 	call	10002800 <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0574); //538
10003e5c:	01415d04 	movi	r5,1396
10003e60:	0009883a 	mov	r4,zero
10003e64:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//a
10003e68:	01400204 	movi	r5,8
10003e6c:	0009883a 	mov	r4,zero
10003e70:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10003e74:	0140a404 	movi	r5,656
10003e78:	0009883a 	mov	r4,zero
10003e7c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10003e80:	01400044 	movi	r5,1
10003e84:	0009883a 	mov	r4,zero
10003e88:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//540
10003e8c:	014004c4 	movi	r5,19
10003e90:	0009883a 	mov	r4,zero
10003e94:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0544);//2
10003e98:	01415104 	movi	r5,1348
10003e9c:	0009883a 	mov	r4,zero
10003ea0:	00028000 	call	10002800 <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x057c); //544
10003ea4:	01415f04 	movi	r5,1404
10003ea8:	0009883a 	mov	r4,zero
10003eac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0002);//6
10003eb0:	01400084 	movi	r5,2
10003eb4:	0009883a 	mov	r4,zero
10003eb8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10003ebc:	0140a404 	movi	r5,656
10003ec0:	0009883a 	mov	r4,zero
10003ec4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
10003ec8:	01401044 	movi	r5,65
10003ecc:	0009883a 	mov	r4,zero
10003ed0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10003ed4:	014004c4 	movi	r5,19
10003ed8:	0009883a 	mov	r4,zero
10003edc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0550);//e
10003ee0:	01415404 	movi	r5,1360
10003ee4:	0009883a 	mov	r4,zero
10003ee8:	00028000 	call	10002800 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //550
10003eec:	000b883a 	mov	r5,zero
10003ef0:	0009883a 	mov	r4,zero
10003ef4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//2
10003ef8:	000b883a 	mov	r5,zero
10003efc:	0009883a 	mov	r4,zero
10003f00:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0210);//4
10003f04:	01408404 	movi	r5,528
10003f08:	0009883a 	mov	r4,zero
10003f0c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//6
10003f10:	01401044 	movi	r5,65
10003f14:	0009883a 	mov	r4,zero
10003f18:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//8
10003f1c:	014004c4 	movi	r5,19
10003f20:	0009883a 	mov	r4,zero
10003f24:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//a
10003f28:	000b883a 	mov	r5,zero
10003f2c:	0009883a 	mov	r4,zero
10003f30:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10003f34:	01414004 	movi	r5,1280
10003f38:	01006c04 	movi	r4,432
10003f3c:	00035f00 	call	100035f0 <usb_write>
}
10003f40:	0001883a 	nop
10003f44:	e037883a 	mov	sp,fp
10003f48:	dfc00117 	ldw	ra,4(sp)
10003f4c:	df000017 	ldw	fp,0(sp)
10003f50:	dec00204 	addi	sp,sp,8
10003f54:	f800283a 	ret

10003f58 <usb_set_config>:

void usb_set_config() {
10003f58:	defffe04 	addi	sp,sp,-8
10003f5c:	dfc00115 	stw	ra,4(sp)
10003f60:	df000015 	stw	fp,0(sp)
10003f64:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10003f68:	01414004 	movi	r5,1280
10003f6c:	01000084 	movi	r4,2
10003f70:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
10003f74:	01414304 	movi	r5,1292
10003f78:	0009883a 	mov	r4,zero
10003f7c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10003f80:	01400204 	movi	r5,8
10003f84:	0009883a 	mov	r4,zero
10003f88:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
10003f8c:	0140b404 	movi	r5,720
10003f90:	0009883a 	mov	r4,zero
10003f94:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10003f98:	01400044 	movi	r5,1
10003f9c:	0009883a 	mov	r4,zero
10003fa0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
10003fa4:	014004c4 	movi	r5,19
10003fa8:	0009883a 	mov	r4,zero
10003fac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
10003fb0:	01414504 	movi	r5,1300
10003fb4:	0009883a 	mov	r4,zero
10003fb8:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0900);
10003fbc:	01424004 	movi	r5,2304
10003fc0:	0009883a 	mov	r4,zero
10003fc4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//device address
10003fc8:	01400044 	movi	r5,1
10003fcc:	0009883a 	mov	r4,zero
10003fd0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
10003fd4:	000b883a 	mov	r5,zero
10003fd8:	0009883a 	mov	r4,zero
10003fdc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
10003fe0:	000b883a 	mov	r5,zero
10003fe4:	0009883a 	mov	r4,zero
10003fe8:	00028000 	call	10002800 <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
10003fec:	000b883a 	mov	r5,zero
10003ff0:	0009883a 	mov	r4,zero
10003ff4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//port number
10003ff8:	000b883a 	mov	r5,zero
10003ffc:	0009883a 	mov	r4,zero
10004000:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//device address
10004004:	0140a404 	movi	r5,656
10004008:	0009883a 	mov	r4,zero
1000400c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
10004010:	01401044 	movi	r5,65
10004014:	0009883a 	mov	r4,zero
10004018:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
1000401c:	014004c4 	movi	r5,19
10004020:	0009883a 	mov	r4,zero
10004024:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
10004028:	000b883a 	mov	r5,zero
1000402c:	0009883a 	mov	r4,zero
10004030:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10004034:	01414004 	movi	r5,1280
10004038:	01006c04 	movi	r4,432
1000403c:	00035f00 	call	100035f0 <usb_write>

}
10004040:	0001883a 	nop
10004044:	e037883a 	mov	sp,fp
10004048:	dfc00117 	ldw	ra,4(sp)
1000404c:	df000017 	ldw	fp,0(sp)
10004050:	dec00204 	addi	sp,sp,8
10004054:	f800283a 	ret

10004058 <usb_class_request>:

void usb_class_request() {
10004058:	defffe04 	addi	sp,sp,-8
1000405c:	dfc00115 	stw	ra,4(sp)
10004060:	df000015 	stw	fp,0(sp)
10004064:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10004068:	01414004 	movi	r5,1280
1000406c:	01000084 	movi	r4,2
10004070:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
10004074:	01414304 	movi	r5,1292
10004078:	0009883a 	mov	r4,zero
1000407c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10004080:	01400204 	movi	r5,8
10004084:	0009883a 	mov	r4,zero
10004088:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
1000408c:	0140b404 	movi	r5,720
10004090:	0009883a 	mov	r4,zero
10004094:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10004098:	01400044 	movi	r5,1
1000409c:	0009883a 	mov	r4,zero
100040a0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
100040a4:	014004c4 	movi	r5,19
100040a8:	0009883a 	mov	r4,zero
100040ac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
100040b0:	01414504 	movi	r5,1300
100040b4:	0009883a 	mov	r4,zero
100040b8:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0A21);
100040bc:	01428844 	movi	r5,2593
100040c0:	0009883a 	mov	r4,zero
100040c4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//device address
100040c8:	000b883a 	mov	r5,zero
100040cc:	0009883a 	mov	r4,zero
100040d0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
100040d4:	000b883a 	mov	r5,zero
100040d8:	0009883a 	mov	r4,zero
100040dc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
100040e0:	000b883a 	mov	r5,zero
100040e4:	0009883a 	mov	r4,zero
100040e8:	00028000 	call	10002800 <io_write>
    //in packet
    io_write(HPI_DATA, 0x0000); //don't care
100040ec:	000b883a 	mov	r5,zero
100040f0:	0009883a 	mov	r4,zero
100040f4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//port number /data length
100040f8:	000b883a 	mov	r5,zero
100040fc:	0009883a 	mov	r4,zero
10004100:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//device address
10004104:	0140a404 	movi	r5,656
10004108:	0009883a 	mov	r4,zero
1000410c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041); //data 1
10004110:	01401044 	movi	r5,65
10004114:	0009883a 	mov	r4,zero
10004118:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
1000411c:	014004c4 	movi	r5,19
10004120:	0009883a 	mov	r4,zero
10004124:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);
10004128:	000b883a 	mov	r5,zero
1000412c:	0009883a 	mov	r4,zero
10004130:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
10004134:	01414004 	movi	r5,1280
10004138:	01006c04 	movi	r4,432
1000413c:	00035f00 	call	100035f0 <usb_write>
}
10004140:	0001883a 	nop
10004144:	e037883a 	mov	sp,fp
10004148:	dfc00117 	ldw	ra,4(sp)
1000414c:	df000017 	ldw	fp,0(sp)
10004150:	dec00204 	addi	sp,sp,8
10004154:	f800283a 	ret

10004158 <usb_get_hid_desc>:


void usb_get_hid_desc() {
10004158:	defffe04 	addi	sp,sp,-8
1000415c:	dfc00115 	stw	ra,4(sp)
10004160:	df000015 	stw	fp,0(sp)
10004164:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
10004168:	01414004 	movi	r5,1280
1000416c:	01000084 	movi	r4,2
10004170:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
10004174:	01414304 	movi	r5,1292
10004178:	0009883a 	mov	r4,zero
1000417c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
10004180:	01400204 	movi	r5,8
10004184:	0009883a 	mov	r4,zero
10004188:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //port address
1000418c:	0140b404 	movi	r5,720
10004190:	0009883a 	mov	r4,zero
10004194:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
10004198:	01400044 	movi	r5,1
1000419c:	0009883a 	mov	r4,zero
100041a0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
100041a4:	014004c4 	movi	r5,19
100041a8:	0009883a 	mov	r4,zero
100041ac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
100041b0:	01414504 	movi	r5,1300
100041b4:	0009883a 	mov	r4,zero
100041b8:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
100041bc:	0141a044 	movi	r5,1665
100041c0:	0009883a 	mov	r4,zero
100041c4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x2100);//e //HID 0x21
100041c8:	01484004 	movi	r5,8448
100041cc:	0009883a 	mov	r4,zero
100041d0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//0
100041d4:	000b883a 	mov	r5,zero
100041d8:	0009883a 	mov	r4,zero
100041dc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x007B);//2
100041e0:	01401ec4 	movi	r5,123
100041e4:	0009883a 	mov	r4,zero
100041e8:	00028000 	call	10002800 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0544); //514
100041ec:	01415104 	movi	r5,1348
100041f0:	0009883a 	mov	r4,zero
100041f4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//6
100041f8:	01400204 	movi	r5,8
100041fc:	0009883a 	mov	r4,zero
10004200:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
10004204:	0140a404 	movi	r5,656
10004208:	0009883a 	mov	r4,zero
1000420c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10004210:	01401044 	movi	r5,65
10004214:	0009883a 	mov	r4,zero
10004218:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
1000421c:	014004c4 	movi	r5,19
10004220:	0009883a 	mov	r4,zero
10004224:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10004228:	01414804 	movi	r5,1312
1000422c:	0009883a 	mov	r4,zero
10004230:	00028000 	call	10002800 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //52c
10004234:	000b883a 	mov	r5,zero
10004238:	0009883a 	mov	r4,zero
1000423c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//e
10004240:	000b883a 	mov	r5,zero
10004244:	0009883a 	mov	r4,zero
10004248:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0210);//530
1000424c:	01408404 	movi	r5,528
10004250:	0009883a 	mov	r4,zero
10004254:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//2
10004258:	01401044 	movi	r5,65
1000425c:	0009883a 	mov	r4,zero
10004260:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10004264:	014004c4 	movi	r5,19
10004268:	0009883a 	mov	r4,zero
1000426c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10004270:	000b883a 	mov	r5,zero
10004274:	0009883a 	mov	r4,zero
10004278:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
1000427c:	01414004 	movi	r5,1280
10004280:	01006c04 	movi	r4,432
10004284:	00035f00 	call	100035f0 <usb_write>

}
10004288:	0001883a 	nop
1000428c:	e037883a 	mov	sp,fp
10004290:	dfc00117 	ldw	ra,4(sp)
10004294:	df000017 	ldw	fp,0(sp)
10004298:	dec00204 	addi	sp,sp,8
1000429c:	f800283a 	ret

100042a0 <usb_get_report_desc>:


void usb_get_report_desc() {
100042a0:	defffe04 	addi	sp,sp,-8
100042a4:	dfc00115 	stw	ra,4(sp)
100042a8:	df000015 	stw	fp,0(sp)
100042ac:	d839883a 	mov	fp,sp
    //the starting address
    io_write(HPI_ADDR, 0x0500); //the start address
100042b0:	01414004 	movi	r5,1280
100042b4:	01000084 	movi	r4,2
100042b8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x050C);
100042bc:	01414304 	movi	r5,1292
100042c0:	0009883a 	mov	r4,zero
100042c4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008); //4 port number
100042c8:	01400204 	movi	r5,8
100042cc:	0009883a 	mov	r4,zero
100042d0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x02D0); //device address
100042d4:	0140b404 	movi	r5,720
100042d8:	0009883a 	mov	r4,zero
100042dc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);
100042e0:	01400044 	movi	r5,1
100042e4:	0009883a 	mov	r4,zero
100042e8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);
100042ec:	014004c4 	movi	r5,19
100042f0:	0009883a 	mov	r4,zero
100042f4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0514);
100042f8:	01414504 	movi	r5,1300
100042fc:	0009883a 	mov	r4,zero
10004300:	00028000 	call	10002800 <io_write>

    //td content 4 bytes
    io_write(HPI_DATA, 0x0681);//c
10004304:	0141a044 	movi	r5,1665
10004308:	0009883a 	mov	r4,zero
1000430c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x2200);//e //report 0x22
10004310:	01488004 	movi	r5,8704
10004314:	0009883a 	mov	r4,zero
10004318:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//0
1000431c:	000b883a 	mov	r5,zero
10004320:	0009883a 	mov	r4,zero
10004324:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x007B);//2
10004328:	01401ec4 	movi	r5,123
1000432c:	0009883a 	mov	r4,zero
10004330:	00028000 	call	10002800 <io_write>

    //data phase IN-1
    io_write(HPI_DATA, 0x0580); //514
10004334:	01416004 	movi	r5,1408
10004338:	0009883a 	mov	r4,zero
1000433c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10004340:	01400204 	movi	r5,8
10004344:	0009883a 	mov	r4,zero
10004348:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
1000434c:	0140a404 	movi	r5,656
10004350:	0009883a 	mov	r4,zero
10004354:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10004358:	01401044 	movi	r5,65
1000435c:	0009883a 	mov	r4,zero
10004360:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004364:	014004c4 	movi	r5,19
10004368:	0009883a 	mov	r4,zero
1000436c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0520);//e
10004370:	01414804 	movi	r5,1312
10004374:	0009883a 	mov	r4,zero
10004378:	00028000 	call	10002800 <io_write>

    //data phase IN-2
    io_write(HPI_DATA, 0x0588); //520
1000437c:	01416204 	movi	r5,1416
10004380:	0009883a 	mov	r4,zero
10004384:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//2
10004388:	01400204 	movi	r5,8
1000438c:	0009883a 	mov	r4,zero
10004390:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//4
10004394:	0140a404 	movi	r5,656
10004398:	0009883a 	mov	r4,zero
1000439c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
100043a0:	01400044 	movi	r5,1
100043a4:	0009883a 	mov	r4,zero
100043a8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//8
100043ac:	014004c4 	movi	r5,19
100043b0:	0009883a 	mov	r4,zero
100043b4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x052c);//a
100043b8:	01414b04 	movi	r5,1324
100043bc:	0009883a 	mov	r4,zero
100043c0:	00028000 	call	10002800 <io_write>

    //data phase IN-3
    io_write(HPI_DATA, 0x0590); //52c
100043c4:	01416404 	movi	r5,1424
100043c8:	0009883a 	mov	r4,zero
100043cc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//e
100043d0:	01400204 	movi	r5,8
100043d4:	0009883a 	mov	r4,zero
100043d8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//530
100043dc:	0140a404 	movi	r5,656
100043e0:	0009883a 	mov	r4,zero
100043e4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//2
100043e8:	01401044 	movi	r5,65
100043ec:	0009883a 	mov	r4,zero
100043f0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//4
100043f4:	014004c4 	movi	r5,19
100043f8:	0009883a 	mov	r4,zero
100043fc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0538);//6
10004400:	01414e04 	movi	r5,1336
10004404:	0009883a 	mov	r4,zero
10004408:	00028000 	call	10002800 <io_write>

    //data phase IN-4
    io_write(HPI_DATA, 0x0598); //538
1000440c:	01416604 	movi	r5,1432
10004410:	0009883a 	mov	r4,zero
10004414:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//a
10004418:	01400204 	movi	r5,8
1000441c:	0009883a 	mov	r4,zero
10004420:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10004424:	0140a404 	movi	r5,656
10004428:	0009883a 	mov	r4,zero
1000442c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10004430:	01400044 	movi	r5,1
10004434:	0009883a 	mov	r4,zero
10004438:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//540
1000443c:	014004c4 	movi	r5,19
10004440:	0009883a 	mov	r4,zero
10004444:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0544);//2
10004448:	01415104 	movi	r5,1348
1000444c:	0009883a 	mov	r4,zero
10004450:	00028000 	call	10002800 <io_write>

    //data phase IN-5
    io_write(HPI_DATA, 0x05a0); //544
10004454:	01416804 	movi	r5,1440
10004458:	0009883a 	mov	r4,zero
1000445c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//6
10004460:	01400204 	movi	r5,8
10004464:	0009883a 	mov	r4,zero
10004468:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//8
1000446c:	0140a404 	movi	r5,656
10004470:	0009883a 	mov	r4,zero
10004474:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a //data1
10004478:	01401044 	movi	r5,65
1000447c:	0009883a 	mov	r4,zero
10004480:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
10004484:	014004c4 	movi	r5,19
10004488:	0009883a 	mov	r4,zero
1000448c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0550);//e
10004490:	01415404 	movi	r5,1360
10004494:	0009883a 	mov	r4,zero
10004498:	00028000 	call	10002800 <io_write>

    //data phase IN-6
    io_write(HPI_DATA, 0x05a8); //550
1000449c:	01416a04 	movi	r5,1448
100044a0:	0009883a 	mov	r4,zero
100044a4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//2
100044a8:	01400204 	movi	r5,8
100044ac:	0009883a 	mov	r4,zero
100044b0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//4
100044b4:	0140a404 	movi	r5,656
100044b8:	0009883a 	mov	r4,zero
100044bc:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//6 //data0
100044c0:	01400044 	movi	r5,1
100044c4:	0009883a 	mov	r4,zero
100044c8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//8
100044cc:	014004c4 	movi	r5,19
100044d0:	0009883a 	mov	r4,zero
100044d4:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x055c);//a
100044d8:	01415704 	movi	r5,1372
100044dc:	0009883a 	mov	r4,zero
100044e0:	00028000 	call	10002800 <io_write>

    //data phase IN-7
    io_write(HPI_DATA, 0x05b0); //c
100044e4:	01416c04 	movi	r5,1456
100044e8:	0009883a 	mov	r4,zero
100044ec:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0008);//e
100044f0:	01400204 	movi	r5,8
100044f4:	0009883a 	mov	r4,zero
100044f8:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//560
100044fc:	0140a404 	movi	r5,656
10004500:	0009883a 	mov	r4,zero
10004504:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//2 //data1
10004508:	01401044 	movi	r5,65
1000450c:	0009883a 	mov	r4,zero
10004510:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//4
10004514:	014004c4 	movi	r5,19
10004518:	0009883a 	mov	r4,zero
1000451c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0568);//6
10004520:	01415a04 	movi	r5,1384
10004524:	0009883a 	mov	r4,zero
10004528:	00028000 	call	10002800 <io_write>

    //data phase IN-8
    io_write(HPI_DATA, 0x05b8); //8
1000452c:	01416e04 	movi	r5,1464
10004530:	0009883a 	mov	r4,zero
10004534:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0003);//a
10004538:	014000c4 	movi	r5,3
1000453c:	0009883a 	mov	r4,zero
10004540:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0290);//c
10004544:	0140a404 	movi	r5,656
10004548:	0009883a 	mov	r4,zero
1000454c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0001);//e //data0
10004550:	01400044 	movi	r5,1
10004554:	0009883a 	mov	r4,zero
10004558:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//570
1000455c:	014004c4 	movi	r5,19
10004560:	0009883a 	mov	r4,zero
10004564:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0574);//2
10004568:	01415d04 	movi	r5,1396
1000456c:	0009883a 	mov	r4,zero
10004570:	00028000 	call	10002800 <io_write>

    //status phase
    io_write(HPI_DATA, 0x0000); //574
10004574:	000b883a 	mov	r5,zero
10004578:	0009883a 	mov	r4,zero
1000457c:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//6
10004580:	000b883a 	mov	r5,zero
10004584:	0009883a 	mov	r4,zero
10004588:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0210);//8
1000458c:	01408404 	movi	r5,528
10004590:	0009883a 	mov	r4,zero
10004594:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0041);//a
10004598:	01401044 	movi	r5,65
1000459c:	0009883a 	mov	r4,zero
100045a0:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0013);//c
100045a4:	014004c4 	movi	r5,19
100045a8:	0009883a 	mov	r4,zero
100045ac:	00028000 	call	10002800 <io_write>
    io_write(HPI_DATA, 0x0000);//e
100045b0:	000b883a 	mov	r5,zero
100045b4:	0009883a 	mov	r4,zero
100045b8:	00028000 	call	10002800 <io_write>

    usb_write(HUSB_SIE1_pCurrentTDPtr, 0x0500); //HUSB_SIE1_pCurrentTDPtr
100045bc:	01414004 	movi	r5,1280
100045c0:	01006c04 	movi	r4,432
100045c4:	00035f00 	call	100035f0 <usb_write>

}
100045c8:	0001883a 	nop
100045cc:	e037883a 	mov	sp,fp
100045d0:	dfc00117 	ldw	ra,4(sp)
100045d4:	df000017 	ldw	fp,0(sp)
100045d8:	dec00204 	addi	sp,sp,8
100045dc:	f800283a 	ret

100045e0 <usb_wait_td_list_done>:


alt_u16 usb_wait_td_list_done() {
100045e0:	defffd04 	addi	sp,sp,-12
100045e4:	dfc00215 	stw	ra,8(sp)
100045e8:	df000115 	stw	fp,4(sp)
100045ec:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
100045f0:	01005104 	movi	r4,324
100045f4:	00036480 	call	10003648 <usb_read>
100045f8:	e0bfff0d 	sth	r2,-4(fp)
    usb_write(HPI_SIE1_MSG_ADR, 0);
100045fc:	000b883a 	mov	r5,zero
10004600:	01005104 	movi	r4,324
10004604:	00035f00 	call	100035f0 <usb_write>
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10004608:	00000d06 	br	10004640 <usb_wait_td_list_done+0x60>
    {
        if (usb_ctl_val == 0x0000) {
1000460c:	e0bfff0b 	ldhu	r2,-4(fp)
10004610:	10000526 	beq	r2,zero,10004628 <usb_wait_td_list_done+0x48>
        } else {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n", usb_ctl_val);
10004614:	e0bfff0b 	ldhu	r2,-4(fp)
10004618:	100b883a 	mov	r5,r2
1000461c:	01040074 	movhi	r4,4097
10004620:	2112e704 	addi	r4,r4,19356
10004624:	0004b800 	call	10004b80 <printf>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
10004628:	01005104 	movi	r4,324
1000462c:	00036480 	call	10003648 <usb_read>
10004630:	e0bfff0d 	sth	r2,-4(fp)
        usb_write(HPI_SIE1_MSG_ADR, 0);
10004634:	000b883a 	mov	r5,zero
10004638:	01005104 	movi	r4,324
1000463c:	00035f00 	call	100035f0 <usb_write>
alt_u16 usb_wait_td_list_done() {
    alt_u16 usb_ctl_val;

    usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR); // STEP 3 j
    usb_write(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10004640:	e0bfff0b 	ldhu	r2,-4(fp)
10004644:	10840018 	cmpnei	r2,r2,4096
10004648:	103ff01e 	bne	r2,zero,1000460c <__alt_data_end+0xf800460c>
        }
        usb_ctl_val = usb_read(HPI_SIE1_MSG_ADR);
        usb_write(HPI_SIE1_MSG_ADR, 0);
    }

    return usb_ctl_val;
1000464c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10004650:	e037883a 	mov	sp,fp
10004654:	dfc00117 	ldw	ra,4(sp)
10004658:	df000017 	ldw	fp,0(sp)
1000465c:	dec00204 	addi	sp,sp,8
10004660:	f800283a 	ret

10004664 <usb_get_retry_cnt>:


alt_u16 usb_get_retry_cnt() {
10004664:	defffd04 	addi	sp,sp,-12
10004668:	dfc00215 	stw	ra,8(sp)
1000466c:	df000115 	stw	fp,4(sp)
10004670:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    io_read(HPI_STATUS);
10004674:	010000c4 	movi	r4,3
10004678:	00028700 	call	10002870 <io_read>
    if (usb_read(HPI_SIE1_MSG_ADR) == HUSB_TDListDone) {
1000467c:	01005104 	movi	r4,324
10004680:	00036480 	call	10003648 <usb_read>
10004684:	10bfffcc 	andi	r2,r2,65535
10004688:	10840018 	cmpnei	r2,r2,4096
1000468c:	1000091e 	bne	r2,zero,100046b4 <usb_get_retry_cnt+0x50>
        usb_write(HPI_SIE1_MSG_ADR, 0);
10004690:	000b883a 	mov	r5,zero
10004694:	01005104 	movi	r4,324
10004698:	00035f00 	call	100035f0 <usb_write>

        while (!(io_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG))  //read sie1 msg register
1000469c:	0001883a 	nop
100046a0:	010000c4 	movi	r4,3
100046a4:	00028700 	call	10002870 <io_read>
100046a8:	10bfffcc 	andi	r2,r2,65535
100046ac:	1080040c 	andi	r2,r2,16
100046b0:	103ffb26 	beq	r2,zero,100046a0 <__alt_data_end+0xf80046a0>
        {
        }
    }
    //usleep(1000);
    io_write(HPI_ADDR, 0x0508);
100046b4:	01414204 	movi	r5,1288
100046b8:	01000084 	movi	r4,2
100046bc:	00028000 	call	10002800 <io_write>
    usb_ctl_val = io_read(HPI_DATA);
100046c0:	0009883a 	mov	r4,zero
100046c4:	00028700 	call	10002870 <io_read>
100046c8:	e0bfff0d 	sth	r2,-4(fp)

    return usb_ctl_val;
100046cc:	e0bfff0b 	ldhu	r2,-4(fp)
}
100046d0:	e037883a 	mov	sp,fp
100046d4:	dfc00117 	ldw	ra,4(sp)
100046d8:	df000017 	ldw	fp,0(sp)
100046dc:	dec00204 	addi	sp,sp,8
100046e0:	f800283a 	ret

100046e4 <usb_print_mem>:


void usb_print_mem() {
100046e4:	defffc04 	addi	sp,sp,-16
100046e8:	dfc00315 	stw	ra,12(sp)
100046ec:	df000215 	stw	fp,8(sp)
100046f0:	df000204 	addi	fp,sp,8
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
100046f4:	01414004 	movi	r5,1280
100046f8:	01000084 	movi	r4,2
100046fc:	00028000 	call	10002800 <io_write>
    for (i = 0; i <= 200; i += 2) {
10004700:	e03ffe15 	stw	zero,-8(fp)
10004704:	00000e06 	br	10004740 <usb_print_mem+0x5c>
        code = io_read(HPI_DATA);
10004708:	0009883a 	mov	r4,zero
1000470c:	00028700 	call	10002870 <io_read>
10004710:	10bfffcc 	andi	r2,r2,65535
10004714:	e0bfff15 	stw	r2,-4(fp)
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
10004718:	e0bffe17 	ldw	r2,-8(fp)
1000471c:	10814004 	addi	r2,r2,1280
10004720:	e1bfff17 	ldw	r6,-4(fp)
10004724:	100b883a 	mov	r5,r2
10004728:	01040074 	movhi	r4,4097
1000472c:	2112ef04 	addi	r4,r4,19388
10004730:	0004b800 	call	10004b80 <printf>


void usb_print_mem() {
    int i, code;
    io_write(HPI_ADDR, 0x0500); //the start address
    for (i = 0; i <= 200; i += 2) {
10004734:	e0bffe17 	ldw	r2,-8(fp)
10004738:	10800084 	addi	r2,r2,2
1000473c:	e0bffe15 	stw	r2,-8(fp)
10004740:	e0bffe17 	ldw	r2,-8(fp)
10004744:	10803250 	cmplti	r2,r2,201
10004748:	103fef1e 	bne	r2,zero,10004708 <__alt_data_end+0xf8004708>
        code = io_read(HPI_DATA);
        printf("\naddr %x = %04x\n", 0x0500 + i, code);
    }
}
1000474c:	0001883a 	nop
10004750:	e037883a 	mov	sp,fp
10004754:	dfc00117 	ldw	ra,4(sp)
10004758:	df000017 	ldw	fp,0(sp)
1000475c:	dec00204 	addi	sp,sp,8
10004760:	f800283a 	ret

10004764 <keys_to_direction>:
        79,  // Right
        81,  // Down
        80   // Left
};

int keys_to_direction(const unsigned char dkey_pressed[]) {
10004764:	defffe04 	addi	sp,sp,-8
10004768:	df000115 	stw	fp,4(sp)
1000476c:	df000104 	addi	fp,sp,4
10004770:	e13fff15 	stw	r4,-4(fp)
    if (dkey_pressed[0] && dkey_pressed[1]) return 1;
10004774:	e0bfff17 	ldw	r2,-4(fp)
10004778:	10800003 	ldbu	r2,0(r2)
1000477c:	10803fcc 	andi	r2,r2,255
10004780:	10000726 	beq	r2,zero,100047a0 <keys_to_direction+0x3c>
10004784:	e0bfff17 	ldw	r2,-4(fp)
10004788:	10800044 	addi	r2,r2,1
1000478c:	10800003 	ldbu	r2,0(r2)
10004790:	10803fcc 	andi	r2,r2,255
10004794:	10000226 	beq	r2,zero,100047a0 <keys_to_direction+0x3c>
10004798:	00800044 	movi	r2,1
1000479c:	00003f06 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[1] && dkey_pressed[2]) return 3;
100047a0:	e0bfff17 	ldw	r2,-4(fp)
100047a4:	10800044 	addi	r2,r2,1
100047a8:	10800003 	ldbu	r2,0(r2)
100047ac:	10803fcc 	andi	r2,r2,255
100047b0:	10000726 	beq	r2,zero,100047d0 <keys_to_direction+0x6c>
100047b4:	e0bfff17 	ldw	r2,-4(fp)
100047b8:	10800084 	addi	r2,r2,2
100047bc:	10800003 	ldbu	r2,0(r2)
100047c0:	10803fcc 	andi	r2,r2,255
100047c4:	10000226 	beq	r2,zero,100047d0 <keys_to_direction+0x6c>
100047c8:	008000c4 	movi	r2,3
100047cc:	00003306 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[2] && dkey_pressed[3]) return 5;
100047d0:	e0bfff17 	ldw	r2,-4(fp)
100047d4:	10800084 	addi	r2,r2,2
100047d8:	10800003 	ldbu	r2,0(r2)
100047dc:	10803fcc 	andi	r2,r2,255
100047e0:	10000726 	beq	r2,zero,10004800 <keys_to_direction+0x9c>
100047e4:	e0bfff17 	ldw	r2,-4(fp)
100047e8:	108000c4 	addi	r2,r2,3
100047ec:	10800003 	ldbu	r2,0(r2)
100047f0:	10803fcc 	andi	r2,r2,255
100047f4:	10000226 	beq	r2,zero,10004800 <keys_to_direction+0x9c>
100047f8:	00800144 	movi	r2,5
100047fc:	00002706 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[3] && dkey_pressed[0]) return 7;
10004800:	e0bfff17 	ldw	r2,-4(fp)
10004804:	108000c4 	addi	r2,r2,3
10004808:	10800003 	ldbu	r2,0(r2)
1000480c:	10803fcc 	andi	r2,r2,255
10004810:	10000626 	beq	r2,zero,1000482c <keys_to_direction+0xc8>
10004814:	e0bfff17 	ldw	r2,-4(fp)
10004818:	10800003 	ldbu	r2,0(r2)
1000481c:	10803fcc 	andi	r2,r2,255
10004820:	10000226 	beq	r2,zero,1000482c <keys_to_direction+0xc8>
10004824:	008001c4 	movi	r2,7
10004828:	00001c06 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[0]) return 0;
1000482c:	e0bfff17 	ldw	r2,-4(fp)
10004830:	10800003 	ldbu	r2,0(r2)
10004834:	10803fcc 	andi	r2,r2,255
10004838:	10000226 	beq	r2,zero,10004844 <keys_to_direction+0xe0>
1000483c:	0005883a 	mov	r2,zero
10004840:	00001606 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[1]) return 2;
10004844:	e0bfff17 	ldw	r2,-4(fp)
10004848:	10800044 	addi	r2,r2,1
1000484c:	10800003 	ldbu	r2,0(r2)
10004850:	10803fcc 	andi	r2,r2,255
10004854:	10000226 	beq	r2,zero,10004860 <keys_to_direction+0xfc>
10004858:	00800084 	movi	r2,2
1000485c:	00000f06 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[2]) return 4;
10004860:	e0bfff17 	ldw	r2,-4(fp)
10004864:	10800084 	addi	r2,r2,2
10004868:	10800003 	ldbu	r2,0(r2)
1000486c:	10803fcc 	andi	r2,r2,255
10004870:	10000226 	beq	r2,zero,1000487c <keys_to_direction+0x118>
10004874:	00800104 	movi	r2,4
10004878:	00000806 	br	1000489c <keys_to_direction+0x138>
    if (dkey_pressed[3]) return 6;
1000487c:	e0bfff17 	ldw	r2,-4(fp)
10004880:	108000c4 	addi	r2,r2,3
10004884:	10800003 	ldbu	r2,0(r2)
10004888:	10803fcc 	andi	r2,r2,255
1000488c:	10000226 	beq	r2,zero,10004898 <keys_to_direction+0x134>
10004890:	00800184 	movi	r2,6
10004894:	00000106 	br	1000489c <keys_to_direction+0x138>
    return -1;
10004898:	00bfffc4 	movi	r2,-1
}
1000489c:	e037883a 	mov	sp,fp
100048a0:	df000017 	ldw	fp,0(sp)
100048a4:	dec00104 	addi	sp,sp,4
100048a8:	f800283a 	ret

100048ac <main>:

int main() {
100048ac:	defff004 	addi	sp,sp,-64
100048b0:	dfc00f15 	stw	ra,60(sp)
100048b4:	df000e15 	stw	fp,56(sp)
100048b8:	df000e04 	addi	fp,sp,56

    keyboard_init();
100048bc:	00028d80 	call	100028d8 <keyboard_init>
    graphic_engine_reset();
100048c0:	00025c00 	call	100025c0 <graphic_engine_reset>
    init_game();
100048c4:	00015ec0 	call	100015ec <init_game>

    unsigned char keycode[8];

    unsigned int frame_count = 0;
100048c8:	e03ff315 	stw	zero,-52(fp)

    unsigned char dkey_pressed_1[4];  // {W, D, S, A}
    unsigned char dkey_pressed_2[4];  // {up, right, down, left}

    int direction_1 = -1, direction_2 = -1;
100048cc:	00bfffc4 	movi	r2,-1
100048d0:	e0bff415 	stw	r2,-48(fp)
100048d4:	00bfffc4 	movi	r2,-1
100048d8:	e0bff515 	stw	r2,-44(fp)
    int attack_1 = 0, attack_2 = 0;
100048dc:	e03ff615 	stw	zero,-40(fp)
100048e0:	e03ff715 	stw	zero,-36(fp)

    while (1) {

       if (frame_count == 0) {
100048e4:	e0bff317 	ldw	r2,-52(fp)
100048e8:	1000741e 	bne	r2,zero,10004abc <main+0x210>
            // Fetch keycodes at frame 0
            if (keyboard_fetch((alt_u16 *) (&keycode)) != 0) {
100048ec:	e0bffc04 	addi	r2,fp,-16
100048f0:	1009883a 	mov	r4,r2
100048f4:	00033d80 	call	100033d8 <keyboard_fetch>
100048f8:	10000f26 	beq	r2,zero,10004938 <main+0x8c>
                // Failed to fetch keycode
                for (int i = 0; i < 8; i++) {
100048fc:	e03ff815 	stw	zero,-32(fp)
10004900:	00000706 	br	10004920 <main+0x74>
                    keycode[i] = 0;
10004904:	e0fffc04 	addi	r3,fp,-16
10004908:	e0bff817 	ldw	r2,-32(fp)
1000490c:	1885883a 	add	r2,r3,r2
10004910:	10000005 	stb	zero,0(r2)

       if (frame_count == 0) {
            // Fetch keycodes at frame 0
            if (keyboard_fetch((alt_u16 *) (&keycode)) != 0) {
                // Failed to fetch keycode
                for (int i = 0; i < 8; i++) {
10004914:	e0bff817 	ldw	r2,-32(fp)
10004918:	10800044 	addi	r2,r2,1
1000491c:	e0bff815 	stw	r2,-32(fp)
10004920:	e0bff817 	ldw	r2,-32(fp)
10004924:	10800210 	cmplti	r2,r2,8
10004928:	103ff61e 	bne	r2,zero,10004904 <__alt_data_end+0xf8004904>
                    keycode[i] = 0;
                }
                printf("FAILED TO FETCH KEYCODE!\n");
1000492c:	01040074 	movhi	r4,4097
10004930:	2112f404 	addi	r4,r4,19408
10004934:	0004c7c0 	call	10004c7c <puts>
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
10004938:	e03ff915 	stw	zero,-28(fp)
1000493c:	00003706 	br	10004a1c <main+0x170>
                dkey_pressed_1[key] = dkey_pressed_2[key] = 0;
10004940:	e0ffff04 	addi	r3,fp,-4
10004944:	e0bff917 	ldw	r2,-28(fp)
10004948:	1885883a 	add	r2,r3,r2
1000494c:	10000005 	stb	zero,0(r2)
10004950:	e0ffff04 	addi	r3,fp,-4
10004954:	e0bff917 	ldw	r2,-28(fp)
10004958:	1885883a 	add	r2,r3,r2
1000495c:	10c00003 	ldbu	r3,0(r2)
10004960:	e13ffe04 	addi	r4,fp,-8
10004964:	e0bff917 	ldw	r2,-28(fp)
10004968:	2085883a 	add	r2,r4,r2
1000496c:	10c00005 	stb	r3,0(r2)
                for (int i = 0; i < 8; i++) {
10004970:	e03ffa15 	stw	zero,-24(fp)
10004974:	00002306 	br	10004a04 <main+0x158>
                    if (keycode[i] == DKEY_KEYCODE_1[key]) {
10004978:	e0fffc04 	addi	r3,fp,-16
1000497c:	e0bffa17 	ldw	r2,-24(fp)
10004980:	1885883a 	add	r2,r3,r2
10004984:	11000003 	ldbu	r4,0(r2)
10004988:	e0fff917 	ldw	r3,-28(fp)
1000498c:	d0a00104 	addi	r2,gp,-32764
10004990:	1885883a 	add	r2,r3,r2
10004994:	10800003 	ldbu	r2,0(r2)
10004998:	20c03fcc 	andi	r3,r4,255
1000499c:	10803fcc 	andi	r2,r2,255
100049a0:	1880051e 	bne	r3,r2,100049b8 <main+0x10c>
                        dkey_pressed_1[key] = 1;
100049a4:	e0fffe04 	addi	r3,fp,-8
100049a8:	e0bff917 	ldw	r2,-28(fp)
100049ac:	1885883a 	add	r2,r3,r2
100049b0:	00c00044 	movi	r3,1
100049b4:	10c00005 	stb	r3,0(r2)
                    }
                    if (keycode[i] == DKEY_KEYCODE_2[key]) {
100049b8:	e0fffc04 	addi	r3,fp,-16
100049bc:	e0bffa17 	ldw	r2,-24(fp)
100049c0:	1885883a 	add	r2,r3,r2
100049c4:	11000003 	ldbu	r4,0(r2)
100049c8:	e0fff917 	ldw	r3,-28(fp)
100049cc:	d0a00204 	addi	r2,gp,-32760
100049d0:	1885883a 	add	r2,r3,r2
100049d4:	10800003 	ldbu	r2,0(r2)
100049d8:	20c03fcc 	andi	r3,r4,255
100049dc:	10803fcc 	andi	r2,r2,255
100049e0:	1880051e 	bne	r3,r2,100049f8 <main+0x14c>
                        dkey_pressed_2[key] = 1;
100049e4:	e0ffff04 	addi	r3,fp,-4
100049e8:	e0bff917 	ldw	r2,-28(fp)
100049ec:	1885883a 	add	r2,r3,r2
100049f0:	00c00044 	movi	r3,1
100049f4:	10c00005 	stb	r3,0(r2)
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
                dkey_pressed_1[key] = dkey_pressed_2[key] = 0;
                for (int i = 0; i < 8; i++) {
100049f8:	e0bffa17 	ldw	r2,-24(fp)
100049fc:	10800044 	addi	r2,r2,1
10004a00:	e0bffa15 	stw	r2,-24(fp)
10004a04:	e0bffa17 	ldw	r2,-24(fp)
10004a08:	10800210 	cmplti	r2,r2,8
10004a0c:	103fda1e 	bne	r2,zero,10004978 <__alt_data_end+0xf8004978>
                }
                printf("FAILED TO FETCH KEYCODE!\n");
            }

            // Extract keys
            for (int key = 0; key < 4; key++) {
10004a10:	e0bff917 	ldw	r2,-28(fp)
10004a14:	10800044 	addi	r2,r2,1
10004a18:	e0bff915 	stw	r2,-28(fp)
10004a1c:	e0bff917 	ldw	r2,-28(fp)
10004a20:	10800110 	cmplti	r2,r2,4
10004a24:	103fc61e 	bne	r2,zero,10004940 <__alt_data_end+0xf8004940>
                    if (keycode[i] == DKEY_KEYCODE_2[key]) {
                        dkey_pressed_2[key] = 1;
                    }
                }
            }
            direction_1 = keys_to_direction(dkey_pressed_1);
10004a28:	e0bffe04 	addi	r2,fp,-8
10004a2c:	1009883a 	mov	r4,r2
10004a30:	00047640 	call	10004764 <keys_to_direction>
10004a34:	e0bff415 	stw	r2,-48(fp)
            direction_2 = keys_to_direction(dkey_pressed_2);
10004a38:	e0bfff04 	addi	r2,fp,-4
10004a3c:	1009883a 	mov	r4,r2
10004a40:	00047640 	call	10004764 <keys_to_direction>
10004a44:	e0bff515 	stw	r2,-44(fp)

            attack_1 = attack_2 = 0;
10004a48:	e03ff715 	stw	zero,-36(fp)
10004a4c:	e0bff717 	ldw	r2,-36(fp)
10004a50:	e0bff615 	stw	r2,-40(fp)
            for (int i = 0; i < 8; i++) {
10004a54:	e03ffb15 	stw	zero,-20(fp)
10004a58:	00001506 	br	10004ab0 <main+0x204>
                if (keycode[i] == 44) {  // Space
10004a5c:	e0fffc04 	addi	r3,fp,-16
10004a60:	e0bffb17 	ldw	r2,-20(fp)
10004a64:	1885883a 	add	r2,r3,r2
10004a68:	10800003 	ldbu	r2,0(r2)
10004a6c:	10803fcc 	andi	r2,r2,255
10004a70:	10800b18 	cmpnei	r2,r2,44
10004a74:	1000021e 	bne	r2,zero,10004a80 <main+0x1d4>
                    attack_1 = 1;
10004a78:	00800044 	movi	r2,1
10004a7c:	e0bff615 	stw	r2,-40(fp)
                }
                if (keycode[i] == 40) {  // Enter
10004a80:	e0fffc04 	addi	r3,fp,-16
10004a84:	e0bffb17 	ldw	r2,-20(fp)
10004a88:	1885883a 	add	r2,r3,r2
10004a8c:	10800003 	ldbu	r2,0(r2)
10004a90:	10803fcc 	andi	r2,r2,255
10004a94:	10800a18 	cmpnei	r2,r2,40
10004a98:	1000021e 	bne	r2,zero,10004aa4 <main+0x1f8>
                    attack_2 = 1;
10004a9c:	00800044 	movi	r2,1
10004aa0:	e0bff715 	stw	r2,-36(fp)
            }
            direction_1 = keys_to_direction(dkey_pressed_1);
            direction_2 = keys_to_direction(dkey_pressed_2);

            attack_1 = attack_2 = 0;
            for (int i = 0; i < 8; i++) {
10004aa4:	e0bffb17 	ldw	r2,-20(fp)
10004aa8:	10800044 	addi	r2,r2,1
10004aac:	e0bffb15 	stw	r2,-20(fp)
10004ab0:	e0bffb17 	ldw	r2,-20(fp)
10004ab4:	10800210 	cmplti	r2,r2,8
10004ab8:	103fe81e 	bne	r2,zero,10004a5c <__alt_data_end+0xf8004a5c>
                    attack_2 = 1;
                }
            }
       }

       if (frame_count == 1) {
10004abc:	e0bff317 	ldw	r2,-52(fp)
10004ac0:	10800058 	cmpnei	r2,r2,1
10004ac4:	1000081e 	bne	r2,zero,10004ae8 <main+0x23c>
            // Update game state at frame 1
            refresh(1, direction_1, direction_2, attack_1, attack_2);
10004ac8:	e0bff717 	ldw	r2,-36(fp)
10004acc:	d8800015 	stw	r2,0(sp)
10004ad0:	e1fff617 	ldw	r7,-40(fp)
10004ad4:	e1bff517 	ldw	r6,-44(fp)
10004ad8:	e17ff417 	ldw	r5,-48(fp)
10004adc:	01000044 	movi	r4,1
10004ae0:	00023800 	call	10002380 <refresh>
10004ae4:	00000706 	br	10004b04 <main+0x258>
       } else {
            // For other frames, only draw
            refresh(0, direction_1, direction_2, attack_1, attack_2);
10004ae8:	e0bff717 	ldw	r2,-36(fp)
10004aec:	d8800015 	stw	r2,0(sp)
10004af0:	e1fff617 	ldw	r7,-40(fp)
10004af4:	e1bff517 	ldw	r6,-44(fp)
10004af8:	e17ff417 	ldw	r5,-48(fp)
10004afc:	0009883a 	mov	r4,zero
10004b00:	00023800 	call	10002380 <refresh>
       }

       frame_count++;
10004b04:	e0bff317 	ldw	r2,-52(fp)
10004b08:	10800044 	addi	r2,r2,1
10004b0c:	e0bff315 	stw	r2,-52(fp)
       if (frame_count == 2) {
10004b10:	e0bff317 	ldw	r2,-52(fp)
10004b14:	10800098 	cmpnei	r2,r2,2
10004b18:	1000011e 	bne	r2,zero,10004b20 <main+0x274>
           frame_count = 0;
10004b1c:	e03ff315 	stw	zero,-52(fp)
       }


        wait_for_next_frame();
10004b20:	000270c0 	call	1000270c <wait_for_next_frame>
    }
10004b24:	003f6f06 	br	100048e4 <__alt_data_end+0xf80048e4>

10004b28 <__mulsi3>:
10004b28:	0005883a 	mov	r2,zero
10004b2c:	20000726 	beq	r4,zero,10004b4c <__mulsi3+0x24>
10004b30:	20c0004c 	andi	r3,r4,1
10004b34:	2008d07a 	srli	r4,r4,1
10004b38:	18000126 	beq	r3,zero,10004b40 <__mulsi3+0x18>
10004b3c:	1145883a 	add	r2,r2,r5
10004b40:	294b883a 	add	r5,r5,r5
10004b44:	203ffa1e 	bne	r4,zero,10004b30 <__alt_data_end+0xf8004b30>
10004b48:	f800283a 	ret
10004b4c:	f800283a 	ret

10004b50 <_printf_r>:
10004b50:	defffd04 	addi	sp,sp,-12
10004b54:	2805883a 	mov	r2,r5
10004b58:	dfc00015 	stw	ra,0(sp)
10004b5c:	d9800115 	stw	r6,4(sp)
10004b60:	d9c00215 	stw	r7,8(sp)
10004b64:	21400217 	ldw	r5,8(r4)
10004b68:	d9c00104 	addi	r7,sp,4
10004b6c:	100d883a 	mov	r6,r2
10004b70:	0004d280 	call	10004d28 <___vfprintf_internal_r>
10004b74:	dfc00017 	ldw	ra,0(sp)
10004b78:	dec00304 	addi	sp,sp,12
10004b7c:	f800283a 	ret

10004b80 <printf>:
10004b80:	defffc04 	addi	sp,sp,-16
10004b84:	dfc00015 	stw	ra,0(sp)
10004b88:	d9400115 	stw	r5,4(sp)
10004b8c:	d9800215 	stw	r6,8(sp)
10004b90:	d9c00315 	stw	r7,12(sp)
10004b94:	00840074 	movhi	r2,4097
10004b98:	109e1a04 	addi	r2,r2,30824
10004b9c:	10800017 	ldw	r2,0(r2)
10004ba0:	200b883a 	mov	r5,r4
10004ba4:	d9800104 	addi	r6,sp,4
10004ba8:	11000217 	ldw	r4,8(r2)
10004bac:	00070040 	call	10007004 <__vfprintf_internal>
10004bb0:	dfc00017 	ldw	ra,0(sp)
10004bb4:	dec00404 	addi	sp,sp,16
10004bb8:	f800283a 	ret

10004bbc <_puts_r>:
10004bbc:	defff604 	addi	sp,sp,-40
10004bc0:	dc000715 	stw	r16,28(sp)
10004bc4:	2021883a 	mov	r16,r4
10004bc8:	2809883a 	mov	r4,r5
10004bcc:	dc400815 	stw	r17,32(sp)
10004bd0:	dfc00915 	stw	ra,36(sp)
10004bd4:	2823883a 	mov	r17,r5
10004bd8:	0004c900 	call	10004c90 <strlen>
10004bdc:	10c00044 	addi	r3,r2,1
10004be0:	d8800115 	stw	r2,4(sp)
10004be4:	00840074 	movhi	r2,4097
10004be8:	1092fb04 	addi	r2,r2,19436
10004bec:	d8800215 	stw	r2,8(sp)
10004bf0:	00800044 	movi	r2,1
10004bf4:	d8800315 	stw	r2,12(sp)
10004bf8:	00800084 	movi	r2,2
10004bfc:	dc400015 	stw	r17,0(sp)
10004c00:	d8c00615 	stw	r3,24(sp)
10004c04:	dec00415 	stw	sp,16(sp)
10004c08:	d8800515 	stw	r2,20(sp)
10004c0c:	80000226 	beq	r16,zero,10004c18 <_puts_r+0x5c>
10004c10:	80800e17 	ldw	r2,56(r16)
10004c14:	10001426 	beq	r2,zero,10004c68 <_puts_r+0xac>
10004c18:	81400217 	ldw	r5,8(r16)
10004c1c:	2880030b 	ldhu	r2,12(r5)
10004c20:	10c8000c 	andi	r3,r2,8192
10004c24:	1800061e 	bne	r3,zero,10004c40 <_puts_r+0x84>
10004c28:	29001917 	ldw	r4,100(r5)
10004c2c:	00f7ffc4 	movi	r3,-8193
10004c30:	10880014 	ori	r2,r2,8192
10004c34:	20c6703a 	and	r3,r4,r3
10004c38:	2880030d 	sth	r2,12(r5)
10004c3c:	28c01915 	stw	r3,100(r5)
10004c40:	d9800404 	addi	r6,sp,16
10004c44:	8009883a 	mov	r4,r16
10004c48:	000956c0 	call	1000956c <__sfvwrite_r>
10004c4c:	1000091e 	bne	r2,zero,10004c74 <_puts_r+0xb8>
10004c50:	00800284 	movi	r2,10
10004c54:	dfc00917 	ldw	ra,36(sp)
10004c58:	dc400817 	ldw	r17,32(sp)
10004c5c:	dc000717 	ldw	r16,28(sp)
10004c60:	dec00a04 	addi	sp,sp,40
10004c64:	f800283a 	ret
10004c68:	8009883a 	mov	r4,r16
10004c6c:	00090e80 	call	100090e8 <__sinit>
10004c70:	003fe906 	br	10004c18 <__alt_data_end+0xf8004c18>
10004c74:	00bfffc4 	movi	r2,-1
10004c78:	003ff606 	br	10004c54 <__alt_data_end+0xf8004c54>

10004c7c <puts>:
10004c7c:	00840074 	movhi	r2,4097
10004c80:	109e1a04 	addi	r2,r2,30824
10004c84:	200b883a 	mov	r5,r4
10004c88:	11000017 	ldw	r4,0(r2)
10004c8c:	0004bbc1 	jmpi	10004bbc <_puts_r>

10004c90 <strlen>:
10004c90:	208000cc 	andi	r2,r4,3
10004c94:	10002026 	beq	r2,zero,10004d18 <strlen+0x88>
10004c98:	20800007 	ldb	r2,0(r4)
10004c9c:	10002026 	beq	r2,zero,10004d20 <strlen+0x90>
10004ca0:	2005883a 	mov	r2,r4
10004ca4:	00000206 	br	10004cb0 <strlen+0x20>
10004ca8:	10c00007 	ldb	r3,0(r2)
10004cac:	18001826 	beq	r3,zero,10004d10 <strlen+0x80>
10004cb0:	10800044 	addi	r2,r2,1
10004cb4:	10c000cc 	andi	r3,r2,3
10004cb8:	183ffb1e 	bne	r3,zero,10004ca8 <__alt_data_end+0xf8004ca8>
10004cbc:	10c00017 	ldw	r3,0(r2)
10004cc0:	01ffbff4 	movhi	r7,65279
10004cc4:	39ffbfc4 	addi	r7,r7,-257
10004cc8:	00ca303a 	nor	r5,zero,r3
10004ccc:	01a02074 	movhi	r6,32897
10004cd0:	19c7883a 	add	r3,r3,r7
10004cd4:	31a02004 	addi	r6,r6,-32640
10004cd8:	1946703a 	and	r3,r3,r5
10004cdc:	1986703a 	and	r3,r3,r6
10004ce0:	1800091e 	bne	r3,zero,10004d08 <strlen+0x78>
10004ce4:	10800104 	addi	r2,r2,4
10004ce8:	10c00017 	ldw	r3,0(r2)
10004cec:	19cb883a 	add	r5,r3,r7
10004cf0:	00c6303a 	nor	r3,zero,r3
10004cf4:	28c6703a 	and	r3,r5,r3
10004cf8:	1986703a 	and	r3,r3,r6
10004cfc:	183ff926 	beq	r3,zero,10004ce4 <__alt_data_end+0xf8004ce4>
10004d00:	00000106 	br	10004d08 <strlen+0x78>
10004d04:	10800044 	addi	r2,r2,1
10004d08:	10c00007 	ldb	r3,0(r2)
10004d0c:	183ffd1e 	bne	r3,zero,10004d04 <__alt_data_end+0xf8004d04>
10004d10:	1105c83a 	sub	r2,r2,r4
10004d14:	f800283a 	ret
10004d18:	2005883a 	mov	r2,r4
10004d1c:	003fe706 	br	10004cbc <__alt_data_end+0xf8004cbc>
10004d20:	0005883a 	mov	r2,zero
10004d24:	f800283a 	ret

10004d28 <___vfprintf_internal_r>:
10004d28:	deffb804 	addi	sp,sp,-288
10004d2c:	dfc04715 	stw	ra,284(sp)
10004d30:	ddc04515 	stw	r23,276(sp)
10004d34:	dd404315 	stw	r21,268(sp)
10004d38:	d9002d15 	stw	r4,180(sp)
10004d3c:	282f883a 	mov	r23,r5
10004d40:	302b883a 	mov	r21,r6
10004d44:	d9c02e15 	stw	r7,184(sp)
10004d48:	df004615 	stw	fp,280(sp)
10004d4c:	dd804415 	stw	r22,272(sp)
10004d50:	dd004215 	stw	r20,264(sp)
10004d54:	dcc04115 	stw	r19,260(sp)
10004d58:	dc804015 	stw	r18,256(sp)
10004d5c:	dc403f15 	stw	r17,252(sp)
10004d60:	dc003e15 	stw	r16,248(sp)
10004d64:	0009c680 	call	10009c68 <_localeconv_r>
10004d68:	10800017 	ldw	r2,0(r2)
10004d6c:	1009883a 	mov	r4,r2
10004d70:	d8803415 	stw	r2,208(sp)
10004d74:	0004c900 	call	10004c90 <strlen>
10004d78:	d8803715 	stw	r2,220(sp)
10004d7c:	d8802d17 	ldw	r2,180(sp)
10004d80:	10000226 	beq	r2,zero,10004d8c <___vfprintf_internal_r+0x64>
10004d84:	10800e17 	ldw	r2,56(r2)
10004d88:	1000fb26 	beq	r2,zero,10005178 <___vfprintf_internal_r+0x450>
10004d8c:	b880030b 	ldhu	r2,12(r23)
10004d90:	10c8000c 	andi	r3,r2,8192
10004d94:	1800061e 	bne	r3,zero,10004db0 <___vfprintf_internal_r+0x88>
10004d98:	b9001917 	ldw	r4,100(r23)
10004d9c:	00f7ffc4 	movi	r3,-8193
10004da0:	10880014 	ori	r2,r2,8192
10004da4:	20c6703a 	and	r3,r4,r3
10004da8:	b880030d 	sth	r2,12(r23)
10004dac:	b8c01915 	stw	r3,100(r23)
10004db0:	10c0020c 	andi	r3,r2,8
10004db4:	1800c326 	beq	r3,zero,100050c4 <___vfprintf_internal_r+0x39c>
10004db8:	b8c00417 	ldw	r3,16(r23)
10004dbc:	1800c126 	beq	r3,zero,100050c4 <___vfprintf_internal_r+0x39c>
10004dc0:	1080068c 	andi	r2,r2,26
10004dc4:	00c00284 	movi	r3,10
10004dc8:	10c0c626 	beq	r2,r3,100050e4 <___vfprintf_internal_r+0x3bc>
10004dcc:	d8c00404 	addi	r3,sp,16
10004dd0:	05040074 	movhi	r20,4097
10004dd4:	d9001e04 	addi	r4,sp,120
10004dd8:	a5130c84 	addi	r20,r20,19506
10004ddc:	d8c01e15 	stw	r3,120(sp)
10004de0:	d8002015 	stw	zero,128(sp)
10004de4:	d8001f15 	stw	zero,124(sp)
10004de8:	d8003315 	stw	zero,204(sp)
10004dec:	d8003615 	stw	zero,216(sp)
10004df0:	d8003815 	stw	zero,224(sp)
10004df4:	1811883a 	mov	r8,r3
10004df8:	d8003915 	stw	zero,228(sp)
10004dfc:	d8003a15 	stw	zero,232(sp)
10004e00:	d8002f15 	stw	zero,188(sp)
10004e04:	d9002815 	stw	r4,160(sp)
10004e08:	a8800007 	ldb	r2,0(r21)
10004e0c:	10028b26 	beq	r2,zero,1000583c <___vfprintf_internal_r+0xb14>
10004e10:	00c00944 	movi	r3,37
10004e14:	a823883a 	mov	r17,r21
10004e18:	10c0021e 	bne	r2,r3,10004e24 <___vfprintf_internal_r+0xfc>
10004e1c:	00001406 	br	10004e70 <___vfprintf_internal_r+0x148>
10004e20:	10c00326 	beq	r2,r3,10004e30 <___vfprintf_internal_r+0x108>
10004e24:	8c400044 	addi	r17,r17,1
10004e28:	88800007 	ldb	r2,0(r17)
10004e2c:	103ffc1e 	bne	r2,zero,10004e20 <__alt_data_end+0xf8004e20>
10004e30:	8d61c83a 	sub	r16,r17,r21
10004e34:	80000e26 	beq	r16,zero,10004e70 <___vfprintf_internal_r+0x148>
10004e38:	d8c02017 	ldw	r3,128(sp)
10004e3c:	d8801f17 	ldw	r2,124(sp)
10004e40:	45400015 	stw	r21,0(r8)
10004e44:	1c07883a 	add	r3,r3,r16
10004e48:	10800044 	addi	r2,r2,1
10004e4c:	d8c02015 	stw	r3,128(sp)
10004e50:	44000115 	stw	r16,4(r8)
10004e54:	d8801f15 	stw	r2,124(sp)
10004e58:	00c001c4 	movi	r3,7
10004e5c:	1880a916 	blt	r3,r2,10005104 <___vfprintf_internal_r+0x3dc>
10004e60:	42000204 	addi	r8,r8,8
10004e64:	d9402f17 	ldw	r5,188(sp)
10004e68:	2c0b883a 	add	r5,r5,r16
10004e6c:	d9402f15 	stw	r5,188(sp)
10004e70:	88800007 	ldb	r2,0(r17)
10004e74:	1000aa26 	beq	r2,zero,10005120 <___vfprintf_internal_r+0x3f8>
10004e78:	8d400044 	addi	r21,r17,1
10004e7c:	8c400047 	ldb	r17,1(r17)
10004e80:	0021883a 	mov	r16,zero
10004e84:	00bfffc4 	movi	r2,-1
10004e88:	0025883a 	mov	r18,zero
10004e8c:	dc002905 	stb	r16,164(sp)
10004e90:	d8002785 	stb	zero,158(sp)
10004e94:	d8002b05 	stb	zero,172(sp)
10004e98:	d8802a15 	stw	r2,168(sp)
10004e9c:	d8003115 	stw	zero,196(sp)
10004ea0:	04c01604 	movi	r19,88
10004ea4:	05800244 	movi	r22,9
10004ea8:	9021883a 	mov	r16,r18
10004eac:	4039883a 	mov	fp,r8
10004eb0:	ad400044 	addi	r21,r21,1
10004eb4:	88bff804 	addi	r2,r17,-32
10004eb8:	98833236 	bltu	r19,r2,10005b84 <___vfprintf_internal_r+0xe5c>
10004ebc:	100490ba 	slli	r2,r2,2
10004ec0:	00c40034 	movhi	r3,4096
10004ec4:	18d3b504 	addi	r3,r3,20180
10004ec8:	10c5883a 	add	r2,r2,r3
10004ecc:	10800017 	ldw	r2,0(r2)
10004ed0:	1000683a 	jmp	r2
10004ed4:	10005a7c 	xorhi	zero,r2,361
10004ed8:	10005b84 	addi	zero,r2,366
10004edc:	10005b84 	addi	zero,r2,366
10004ee0:	10005a9c 	xori	zero,r2,362
10004ee4:	10005b84 	addi	zero,r2,366
10004ee8:	10005b84 	addi	zero,r2,366
10004eec:	10005b84 	addi	zero,r2,366
10004ef0:	10005b84 	addi	zero,r2,366
10004ef4:	10005b84 	addi	zero,r2,366
10004ef8:	10005b84 	addi	zero,r2,366
10004efc:	10005184 	addi	zero,r2,326
10004f00:	1000598c 	andi	zero,r2,358
10004f04:	10005b84 	addi	zero,r2,366
10004f08:	10005048 	cmpgei	zero,r2,321
10004f0c:	100051a8 	cmpgeui	zero,r2,326
10004f10:	10005b84 	addi	zero,r2,366
10004f14:	100051f8 	rdprs	zero,r2,327
10004f18:	10005204 	addi	zero,r2,328
10004f1c:	10005204 	addi	zero,r2,328
10004f20:	10005204 	addi	zero,r2,328
10004f24:	10005204 	addi	zero,r2,328
10004f28:	10005204 	addi	zero,r2,328
10004f2c:	10005204 	addi	zero,r2,328
10004f30:	10005204 	addi	zero,r2,328
10004f34:	10005204 	addi	zero,r2,328
10004f38:	10005204 	addi	zero,r2,328
10004f3c:	10005b84 	addi	zero,r2,366
10004f40:	10005b84 	addi	zero,r2,366
10004f44:	10005b84 	addi	zero,r2,366
10004f48:	10005b84 	addi	zero,r2,366
10004f4c:	10005b84 	addi	zero,r2,366
10004f50:	10005b84 	addi	zero,r2,366
10004f54:	10005b84 	addi	zero,r2,366
10004f58:	10005b84 	addi	zero,r2,366
10004f5c:	10005b84 	addi	zero,r2,366
10004f60:	10005b84 	addi	zero,r2,366
10004f64:	10005240 	call	11000524 <_gp+0xfe0ccc>
10004f68:	10005308 	cmpgei	zero,r2,332
10004f6c:	10005b84 	addi	zero,r2,366
10004f70:	10005308 	cmpgei	zero,r2,332
10004f74:	10005b84 	addi	zero,r2,366
10004f78:	10005b84 	addi	zero,r2,366
10004f7c:	10005b84 	addi	zero,r2,366
10004f80:	10005b84 	addi	zero,r2,366
10004f84:	100053b4 	orhi	zero,r2,334
10004f88:	10005b84 	addi	zero,r2,366
10004f8c:	10005b84 	addi	zero,r2,366
10004f90:	100053c0 	call	1100053c <_gp+0xfe0ce4>
10004f94:	10005b84 	addi	zero,r2,366
10004f98:	10005b84 	addi	zero,r2,366
10004f9c:	10005b84 	addi	zero,r2,366
10004fa0:	10005b84 	addi	zero,r2,366
10004fa4:	10005b84 	addi	zero,r2,366
10004fa8:	10005844 	addi	zero,r2,353
10004fac:	10005b84 	addi	zero,r2,366
10004fb0:	10005b84 	addi	zero,r2,366
10004fb4:	100058b0 	cmpltui	zero,r2,354
10004fb8:	10005b84 	addi	zero,r2,366
10004fbc:	10005b84 	addi	zero,r2,366
10004fc0:	10005b84 	addi	zero,r2,366
10004fc4:	10005b84 	addi	zero,r2,366
10004fc8:	10005b84 	addi	zero,r2,366
10004fcc:	10005b84 	addi	zero,r2,366
10004fd0:	10005b84 	addi	zero,r2,366
10004fd4:	10005b84 	addi	zero,r2,366
10004fd8:	10005b84 	addi	zero,r2,366
10004fdc:	10005b84 	addi	zero,r2,366
10004fe0:	10005b28 	cmpgeui	zero,r2,364
10004fe4:	10005aa8 	cmpgeui	zero,r2,362
10004fe8:	10005308 	cmpgei	zero,r2,332
10004fec:	10005308 	cmpgei	zero,r2,332
10004ff0:	10005308 	cmpgei	zero,r2,332
10004ff4:	10005ac8 	cmpgei	zero,r2,363
10004ff8:	10005aa8 	cmpgeui	zero,r2,362
10004ffc:	10005b84 	addi	zero,r2,366
10005000:	10005b84 	addi	zero,r2,366
10005004:	10005ad4 	ori	zero,r2,363
10005008:	10005b84 	addi	zero,r2,366
1000500c:	10005ae8 	cmpgeui	zero,r2,363
10005010:	1000596c 	andhi	zero,r2,357
10005014:	10005054 	ori	zero,r2,321
10005018:	100059a4 	muli	zero,r2,358
1000501c:	10005b84 	addi	zero,r2,366
10005020:	100059b0 	cmpltui	zero,r2,358
10005024:	10005b84 	addi	zero,r2,366
10005028:	10005a14 	ori	zero,r2,360
1000502c:	10005b84 	addi	zero,r2,366
10005030:	10005b84 	addi	zero,r2,366
10005034:	10005a34 	orhi	zero,r2,360
10005038:	d8c03117 	ldw	r3,196(sp)
1000503c:	d8802e15 	stw	r2,184(sp)
10005040:	00c7c83a 	sub	r3,zero,r3
10005044:	d8c03115 	stw	r3,196(sp)
10005048:	84000114 	ori	r16,r16,4
1000504c:	ac400007 	ldb	r17,0(r21)
10005050:	003f9706 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10005054:	00800c04 	movi	r2,48
10005058:	d8802705 	stb	r2,156(sp)
1000505c:	00801e04 	movi	r2,120
10005060:	d8802745 	stb	r2,157(sp)
10005064:	d9002a17 	ldw	r4,168(sp)
10005068:	d8802e17 	ldw	r2,184(sp)
1000506c:	d8002785 	stb	zero,158(sp)
10005070:	e011883a 	mov	r8,fp
10005074:	10c00104 	addi	r3,r2,4
10005078:	14c00017 	ldw	r19,0(r2)
1000507c:	002d883a 	mov	r22,zero
10005080:	80800094 	ori	r2,r16,2
10005084:	2002ca16 	blt	r4,zero,10005bb0 <___vfprintf_internal_r+0xe88>
10005088:	00bfdfc4 	movi	r2,-129
1000508c:	80a4703a 	and	r18,r16,r2
10005090:	d8c02e15 	stw	r3,184(sp)
10005094:	94800094 	ori	r18,r18,2
10005098:	9802b41e 	bne	r19,zero,10005b6c <___vfprintf_internal_r+0xe44>
1000509c:	01440074 	movhi	r5,4097
100050a0:	29530504 	addi	r5,r5,19476
100050a4:	d9403915 	stw	r5,228(sp)
100050a8:	04401e04 	movi	r17,120
100050ac:	d8802a17 	ldw	r2,168(sp)
100050b0:	0039883a 	mov	fp,zero
100050b4:	1001fa26 	beq	r2,zero,100058a0 <___vfprintf_internal_r+0xb78>
100050b8:	0027883a 	mov	r19,zero
100050bc:	002d883a 	mov	r22,zero
100050c0:	00021906 	br	10005928 <___vfprintf_internal_r+0xc00>
100050c4:	d9002d17 	ldw	r4,180(sp)
100050c8:	b80b883a 	mov	r5,r23
100050cc:	00070dc0 	call	100070dc <__swsetup_r>
100050d0:	1005dc1e 	bne	r2,zero,10006844 <___vfprintf_internal_r+0x1b1c>
100050d4:	b880030b 	ldhu	r2,12(r23)
100050d8:	00c00284 	movi	r3,10
100050dc:	1080068c 	andi	r2,r2,26
100050e0:	10ff3a1e 	bne	r2,r3,10004dcc <__alt_data_end+0xf8004dcc>
100050e4:	b880038f 	ldh	r2,14(r23)
100050e8:	103f3816 	blt	r2,zero,10004dcc <__alt_data_end+0xf8004dcc>
100050ec:	d9c02e17 	ldw	r7,184(sp)
100050f0:	d9002d17 	ldw	r4,180(sp)
100050f4:	a80d883a 	mov	r6,r21
100050f8:	b80b883a 	mov	r5,r23
100050fc:	00070200 	call	10007020 <__sbprintf>
10005100:	00001106 	br	10005148 <___vfprintf_internal_r+0x420>
10005104:	d9002d17 	ldw	r4,180(sp)
10005108:	d9801e04 	addi	r6,sp,120
1000510c:	b80b883a 	mov	r5,r23
10005110:	000c5080 	call	1000c508 <__sprint_r>
10005114:	1000081e 	bne	r2,zero,10005138 <___vfprintf_internal_r+0x410>
10005118:	da000404 	addi	r8,sp,16
1000511c:	003f5106 	br	10004e64 <__alt_data_end+0xf8004e64>
10005120:	d8802017 	ldw	r2,128(sp)
10005124:	10000426 	beq	r2,zero,10005138 <___vfprintf_internal_r+0x410>
10005128:	d9002d17 	ldw	r4,180(sp)
1000512c:	d9801e04 	addi	r6,sp,120
10005130:	b80b883a 	mov	r5,r23
10005134:	000c5080 	call	1000c508 <__sprint_r>
10005138:	b880030b 	ldhu	r2,12(r23)
1000513c:	1080100c 	andi	r2,r2,64
10005140:	1005c01e 	bne	r2,zero,10006844 <___vfprintf_internal_r+0x1b1c>
10005144:	d8802f17 	ldw	r2,188(sp)
10005148:	dfc04717 	ldw	ra,284(sp)
1000514c:	df004617 	ldw	fp,280(sp)
10005150:	ddc04517 	ldw	r23,276(sp)
10005154:	dd804417 	ldw	r22,272(sp)
10005158:	dd404317 	ldw	r21,268(sp)
1000515c:	dd004217 	ldw	r20,264(sp)
10005160:	dcc04117 	ldw	r19,260(sp)
10005164:	dc804017 	ldw	r18,256(sp)
10005168:	dc403f17 	ldw	r17,252(sp)
1000516c:	dc003e17 	ldw	r16,248(sp)
10005170:	dec04804 	addi	sp,sp,288
10005174:	f800283a 	ret
10005178:	d9002d17 	ldw	r4,180(sp)
1000517c:	00090e80 	call	100090e8 <__sinit>
10005180:	003f0206 	br	10004d8c <__alt_data_end+0xf8004d8c>
10005184:	d9002e17 	ldw	r4,184(sp)
10005188:	d9402e17 	ldw	r5,184(sp)
1000518c:	21000017 	ldw	r4,0(r4)
10005190:	28800104 	addi	r2,r5,4
10005194:	d9003115 	stw	r4,196(sp)
10005198:	203fa716 	blt	r4,zero,10005038 <__alt_data_end+0xf8005038>
1000519c:	d8802e15 	stw	r2,184(sp)
100051a0:	ac400007 	ldb	r17,0(r21)
100051a4:	003f4206 	br	10004eb0 <__alt_data_end+0xf8004eb0>
100051a8:	ac400007 	ldb	r17,0(r21)
100051ac:	01000a84 	movi	r4,42
100051b0:	a8c00044 	addi	r3,r21,1
100051b4:	89075826 	beq	r17,r4,10006f18 <___vfprintf_internal_r+0x21f0>
100051b8:	8cbff404 	addi	r18,r17,-48
100051bc:	b486ae36 	bltu	r22,r18,10006c78 <___vfprintf_internal_r+0x1f50>
100051c0:	0009883a 	mov	r4,zero
100051c4:	1823883a 	mov	r17,r3
100051c8:	01400284 	movi	r5,10
100051cc:	0004b280 	call	10004b28 <__mulsi3>
100051d0:	88c00007 	ldb	r3,0(r17)
100051d4:	1489883a 	add	r4,r2,r18
100051d8:	8d400044 	addi	r21,r17,1
100051dc:	1cbff404 	addi	r18,r3,-48
100051e0:	a823883a 	mov	r17,r21
100051e4:	b4bff82e 	bgeu	r22,r18,100051c8 <__alt_data_end+0xf80051c8>
100051e8:	1823883a 	mov	r17,r3
100051ec:	2005f616 	blt	r4,zero,100069c8 <___vfprintf_internal_r+0x1ca0>
100051f0:	d9002a15 	stw	r4,168(sp)
100051f4:	003f2f06 	br	10004eb4 <__alt_data_end+0xf8004eb4>
100051f8:	84002014 	ori	r16,r16,128
100051fc:	ac400007 	ldb	r17,0(r21)
10005200:	003f2b06 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10005204:	8cbff404 	addi	r18,r17,-48
10005208:	d8003115 	stw	zero,196(sp)
1000520c:	0009883a 	mov	r4,zero
10005210:	a823883a 	mov	r17,r21
10005214:	01400284 	movi	r5,10
10005218:	0004b280 	call	10004b28 <__mulsi3>
1000521c:	88c00007 	ldb	r3,0(r17)
10005220:	9089883a 	add	r4,r18,r2
10005224:	ad400044 	addi	r21,r21,1
10005228:	1cbff404 	addi	r18,r3,-48
1000522c:	a823883a 	mov	r17,r21
10005230:	b4bff82e 	bgeu	r22,r18,10005214 <__alt_data_end+0xf8005214>
10005234:	1823883a 	mov	r17,r3
10005238:	d9003115 	stw	r4,196(sp)
1000523c:	003f1d06 	br	10004eb4 <__alt_data_end+0xf8004eb4>
10005240:	8025883a 	mov	r18,r16
10005244:	dc002903 	ldbu	r16,164(sp)
10005248:	e011883a 	mov	r8,fp
1000524c:	84003fcc 	andi	r16,r16,255
10005250:	8007531e 	bne	r16,zero,10006fa0 <___vfprintf_internal_r+0x2278>
10005254:	94800414 	ori	r18,r18,16
10005258:	9080080c 	andi	r2,r18,32
1000525c:	1003a326 	beq	r2,zero,100060ec <___vfprintf_internal_r+0x13c4>
10005260:	d9002e17 	ldw	r4,184(sp)
10005264:	20800117 	ldw	r2,4(r4)
10005268:	24c00017 	ldw	r19,0(r4)
1000526c:	21000204 	addi	r4,r4,8
10005270:	d9002e15 	stw	r4,184(sp)
10005274:	102d883a 	mov	r22,r2
10005278:	10047316 	blt	r2,zero,10006448 <___vfprintf_internal_r+0x1720>
1000527c:	d9002a17 	ldw	r4,168(sp)
10005280:	df002783 	ldbu	fp,158(sp)
10005284:	2003e416 	blt	r4,zero,10006218 <___vfprintf_internal_r+0x14f0>
10005288:	00ffdfc4 	movi	r3,-129
1000528c:	9d84b03a 	or	r2,r19,r22
10005290:	90e4703a 	and	r18,r18,r3
10005294:	10018026 	beq	r2,zero,10005898 <___vfprintf_internal_r+0xb70>
10005298:	b003ab26 	beq	r22,zero,10006148 <___vfprintf_internal_r+0x1420>
1000529c:	dc402915 	stw	r17,164(sp)
100052a0:	dc001e04 	addi	r16,sp,120
100052a4:	b023883a 	mov	r17,r22
100052a8:	402d883a 	mov	r22,r8
100052ac:	9809883a 	mov	r4,r19
100052b0:	880b883a 	mov	r5,r17
100052b4:	01800284 	movi	r6,10
100052b8:	000f883a 	mov	r7,zero
100052bc:	000ea4c0 	call	1000ea4c <__umoddi3>
100052c0:	10800c04 	addi	r2,r2,48
100052c4:	843fffc4 	addi	r16,r16,-1
100052c8:	9809883a 	mov	r4,r19
100052cc:	880b883a 	mov	r5,r17
100052d0:	80800005 	stb	r2,0(r16)
100052d4:	01800284 	movi	r6,10
100052d8:	000f883a 	mov	r7,zero
100052dc:	000e4500 	call	1000e450 <__udivdi3>
100052e0:	1027883a 	mov	r19,r2
100052e4:	10c4b03a 	or	r2,r2,r3
100052e8:	1823883a 	mov	r17,r3
100052ec:	103fef1e 	bne	r2,zero,100052ac <__alt_data_end+0xf80052ac>
100052f0:	d8c02817 	ldw	r3,160(sp)
100052f4:	dc402917 	ldw	r17,164(sp)
100052f8:	b011883a 	mov	r8,r22
100052fc:	1c07c83a 	sub	r3,r3,r16
10005300:	d8c02b15 	stw	r3,172(sp)
10005304:	00005f06 	br	10005484 <___vfprintf_internal_r+0x75c>
10005308:	8025883a 	mov	r18,r16
1000530c:	dc002903 	ldbu	r16,164(sp)
10005310:	e011883a 	mov	r8,fp
10005314:	84003fcc 	andi	r16,r16,255
10005318:	80071e1e 	bne	r16,zero,10006f94 <___vfprintf_internal_r+0x226c>
1000531c:	9080020c 	andi	r2,r18,8
10005320:	1004af26 	beq	r2,zero,100065e0 <___vfprintf_internal_r+0x18b8>
10005324:	d9002e17 	ldw	r4,184(sp)
10005328:	d9402e17 	ldw	r5,184(sp)
1000532c:	d8802e17 	ldw	r2,184(sp)
10005330:	21000017 	ldw	r4,0(r4)
10005334:	29400117 	ldw	r5,4(r5)
10005338:	10800204 	addi	r2,r2,8
1000533c:	d9003615 	stw	r4,216(sp)
10005340:	d9403815 	stw	r5,224(sp)
10005344:	d8802e15 	stw	r2,184(sp)
10005348:	d9003617 	ldw	r4,216(sp)
1000534c:	d9403817 	ldw	r5,224(sp)
10005350:	da003d15 	stw	r8,244(sp)
10005354:	04000044 	movi	r16,1
10005358:	000c12c0 	call	1000c12c <__fpclassifyd>
1000535c:	da003d17 	ldw	r8,244(sp)
10005360:	1404441e 	bne	r2,r16,10006474 <___vfprintf_internal_r+0x174c>
10005364:	d9003617 	ldw	r4,216(sp)
10005368:	d9403817 	ldw	r5,224(sp)
1000536c:	000d883a 	mov	r6,zero
10005370:	000f883a 	mov	r7,zero
10005374:	00105a40 	call	100105a4 <__ledf2>
10005378:	da003d17 	ldw	r8,244(sp)
1000537c:	1005e316 	blt	r2,zero,10006b0c <___vfprintf_internal_r+0x1de4>
10005380:	df002783 	ldbu	fp,158(sp)
10005384:	008011c4 	movi	r2,71
10005388:	1445580e 	bge	r2,r17,100068ec <___vfprintf_internal_r+0x1bc4>
1000538c:	04040074 	movhi	r16,4097
10005390:	8412fd04 	addi	r16,r16,19444
10005394:	00c000c4 	movi	r3,3
10005398:	00bfdfc4 	movi	r2,-129
1000539c:	d8c02915 	stw	r3,164(sp)
100053a0:	90a4703a 	and	r18,r18,r2
100053a4:	d8c02b15 	stw	r3,172(sp)
100053a8:	d8002a15 	stw	zero,168(sp)
100053ac:	d8003215 	stw	zero,200(sp)
100053b0:	00003a06 	br	1000549c <___vfprintf_internal_r+0x774>
100053b4:	84000214 	ori	r16,r16,8
100053b8:	ac400007 	ldb	r17,0(r21)
100053bc:	003ebc06 	br	10004eb0 <__alt_data_end+0xf8004eb0>
100053c0:	8025883a 	mov	r18,r16
100053c4:	dc002903 	ldbu	r16,164(sp)
100053c8:	e011883a 	mov	r8,fp
100053cc:	84003fcc 	andi	r16,r16,255
100053d0:	8007001e 	bne	r16,zero,10006fd4 <___vfprintf_internal_r+0x22ac>
100053d4:	94800414 	ori	r18,r18,16
100053d8:	9080080c 	andi	r2,r18,32
100053dc:	1002fa26 	beq	r2,zero,10005fc8 <___vfprintf_internal_r+0x12a0>
100053e0:	d9002e17 	ldw	r4,184(sp)
100053e4:	d9402a17 	ldw	r5,168(sp)
100053e8:	d8002785 	stb	zero,158(sp)
100053ec:	20800204 	addi	r2,r4,8
100053f0:	24c00017 	ldw	r19,0(r4)
100053f4:	25800117 	ldw	r22,4(r4)
100053f8:	2804b116 	blt	r5,zero,100066c0 <___vfprintf_internal_r+0x1998>
100053fc:	013fdfc4 	movi	r4,-129
10005400:	9d86b03a 	or	r3,r19,r22
10005404:	d8802e15 	stw	r2,184(sp)
10005408:	9124703a 	and	r18,r18,r4
1000540c:	1802fb1e 	bne	r3,zero,10005ffc <___vfprintf_internal_r+0x12d4>
10005410:	d8c02a17 	ldw	r3,168(sp)
10005414:	0039883a 	mov	fp,zero
10005418:	1805e526 	beq	r3,zero,10006bb0 <___vfprintf_internal_r+0x1e88>
1000541c:	0027883a 	mov	r19,zero
10005420:	002d883a 	mov	r22,zero
10005424:	dc001e04 	addi	r16,sp,120
10005428:	9806d0fa 	srli	r3,r19,3
1000542c:	b008977a 	slli	r4,r22,29
10005430:	b02cd0fa 	srli	r22,r22,3
10005434:	9cc001cc 	andi	r19,r19,7
10005438:	98800c04 	addi	r2,r19,48
1000543c:	843fffc4 	addi	r16,r16,-1
10005440:	20e6b03a 	or	r19,r4,r3
10005444:	80800005 	stb	r2,0(r16)
10005448:	9d86b03a 	or	r3,r19,r22
1000544c:	183ff61e 	bne	r3,zero,10005428 <__alt_data_end+0xf8005428>
10005450:	90c0004c 	andi	r3,r18,1
10005454:	18014126 	beq	r3,zero,1000595c <___vfprintf_internal_r+0xc34>
10005458:	10803fcc 	andi	r2,r2,255
1000545c:	1080201c 	xori	r2,r2,128
10005460:	10bfe004 	addi	r2,r2,-128
10005464:	00c00c04 	movi	r3,48
10005468:	10c13c26 	beq	r2,r3,1000595c <___vfprintf_internal_r+0xc34>
1000546c:	80ffffc5 	stb	r3,-1(r16)
10005470:	d8c02817 	ldw	r3,160(sp)
10005474:	80bfffc4 	addi	r2,r16,-1
10005478:	1021883a 	mov	r16,r2
1000547c:	1887c83a 	sub	r3,r3,r2
10005480:	d8c02b15 	stw	r3,172(sp)
10005484:	d8802b17 	ldw	r2,172(sp)
10005488:	d9002a17 	ldw	r4,168(sp)
1000548c:	1100010e 	bge	r2,r4,10005494 <___vfprintf_internal_r+0x76c>
10005490:	2005883a 	mov	r2,r4
10005494:	d8802915 	stw	r2,164(sp)
10005498:	d8003215 	stw	zero,200(sp)
1000549c:	e7003fcc 	andi	fp,fp,255
100054a0:	e700201c 	xori	fp,fp,128
100054a4:	e73fe004 	addi	fp,fp,-128
100054a8:	e0000326 	beq	fp,zero,100054b8 <___vfprintf_internal_r+0x790>
100054ac:	d8c02917 	ldw	r3,164(sp)
100054b0:	18c00044 	addi	r3,r3,1
100054b4:	d8c02915 	stw	r3,164(sp)
100054b8:	90c0008c 	andi	r3,r18,2
100054bc:	d8c02c15 	stw	r3,176(sp)
100054c0:	18000326 	beq	r3,zero,100054d0 <___vfprintf_internal_r+0x7a8>
100054c4:	d8c02917 	ldw	r3,164(sp)
100054c8:	18c00084 	addi	r3,r3,2
100054cc:	d8c02915 	stw	r3,164(sp)
100054d0:	90c0210c 	andi	r3,r18,132
100054d4:	d8c03015 	stw	r3,192(sp)
100054d8:	1801c51e 	bne	r3,zero,10005bf0 <___vfprintf_internal_r+0xec8>
100054dc:	d9003117 	ldw	r4,196(sp)
100054e0:	d8c02917 	ldw	r3,164(sp)
100054e4:	20e7c83a 	sub	r19,r4,r3
100054e8:	04c1c10e 	bge	zero,r19,10005bf0 <___vfprintf_internal_r+0xec8>
100054ec:	02400404 	movi	r9,16
100054f0:	d8c02017 	ldw	r3,128(sp)
100054f4:	d8801f17 	ldw	r2,124(sp)
100054f8:	4cc52f0e 	bge	r9,r19,100069b8 <___vfprintf_internal_r+0x1c90>
100054fc:	01440074 	movhi	r5,4097
10005500:	29531084 	addi	r5,r5,19522
10005504:	dc403b15 	stw	r17,236(sp)
10005508:	d9403515 	stw	r5,212(sp)
1000550c:	9823883a 	mov	r17,r19
10005510:	482d883a 	mov	r22,r9
10005514:	9027883a 	mov	r19,r18
10005518:	070001c4 	movi	fp,7
1000551c:	8025883a 	mov	r18,r16
10005520:	dc002d17 	ldw	r16,180(sp)
10005524:	00000306 	br	10005534 <___vfprintf_internal_r+0x80c>
10005528:	8c7ffc04 	addi	r17,r17,-16
1000552c:	42000204 	addi	r8,r8,8
10005530:	b440130e 	bge	r22,r17,10005580 <___vfprintf_internal_r+0x858>
10005534:	01040074 	movhi	r4,4097
10005538:	18c00404 	addi	r3,r3,16
1000553c:	10800044 	addi	r2,r2,1
10005540:	21131084 	addi	r4,r4,19522
10005544:	41000015 	stw	r4,0(r8)
10005548:	45800115 	stw	r22,4(r8)
1000554c:	d8c02015 	stw	r3,128(sp)
10005550:	d8801f15 	stw	r2,124(sp)
10005554:	e0bff40e 	bge	fp,r2,10005528 <__alt_data_end+0xf8005528>
10005558:	d9801e04 	addi	r6,sp,120
1000555c:	b80b883a 	mov	r5,r23
10005560:	8009883a 	mov	r4,r16
10005564:	000c5080 	call	1000c508 <__sprint_r>
10005568:	103ef31e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
1000556c:	8c7ffc04 	addi	r17,r17,-16
10005570:	d8c02017 	ldw	r3,128(sp)
10005574:	d8801f17 	ldw	r2,124(sp)
10005578:	da000404 	addi	r8,sp,16
1000557c:	b47fed16 	blt	r22,r17,10005534 <__alt_data_end+0xf8005534>
10005580:	9021883a 	mov	r16,r18
10005584:	9825883a 	mov	r18,r19
10005588:	8827883a 	mov	r19,r17
1000558c:	dc403b17 	ldw	r17,236(sp)
10005590:	d9403517 	ldw	r5,212(sp)
10005594:	98c7883a 	add	r3,r19,r3
10005598:	10800044 	addi	r2,r2,1
1000559c:	41400015 	stw	r5,0(r8)
100055a0:	44c00115 	stw	r19,4(r8)
100055a4:	d8c02015 	stw	r3,128(sp)
100055a8:	d8801f15 	stw	r2,124(sp)
100055ac:	010001c4 	movi	r4,7
100055b0:	2082c516 	blt	r4,r2,100060c8 <___vfprintf_internal_r+0x13a0>
100055b4:	df002787 	ldb	fp,158(sp)
100055b8:	42000204 	addi	r8,r8,8
100055bc:	e0000c26 	beq	fp,zero,100055f0 <___vfprintf_internal_r+0x8c8>
100055c0:	d8801f17 	ldw	r2,124(sp)
100055c4:	d9002784 	addi	r4,sp,158
100055c8:	18c00044 	addi	r3,r3,1
100055cc:	10800044 	addi	r2,r2,1
100055d0:	41000015 	stw	r4,0(r8)
100055d4:	01000044 	movi	r4,1
100055d8:	41000115 	stw	r4,4(r8)
100055dc:	d8c02015 	stw	r3,128(sp)
100055e0:	d8801f15 	stw	r2,124(sp)
100055e4:	010001c4 	movi	r4,7
100055e8:	20825e16 	blt	r4,r2,10005f64 <___vfprintf_internal_r+0x123c>
100055ec:	42000204 	addi	r8,r8,8
100055f0:	d8802c17 	ldw	r2,176(sp)
100055f4:	10000c26 	beq	r2,zero,10005628 <___vfprintf_internal_r+0x900>
100055f8:	d8801f17 	ldw	r2,124(sp)
100055fc:	d9002704 	addi	r4,sp,156
10005600:	18c00084 	addi	r3,r3,2
10005604:	10800044 	addi	r2,r2,1
10005608:	41000015 	stw	r4,0(r8)
1000560c:	01000084 	movi	r4,2
10005610:	41000115 	stw	r4,4(r8)
10005614:	d8c02015 	stw	r3,128(sp)
10005618:	d8801f15 	stw	r2,124(sp)
1000561c:	010001c4 	movi	r4,7
10005620:	20825816 	blt	r4,r2,10005f84 <___vfprintf_internal_r+0x125c>
10005624:	42000204 	addi	r8,r8,8
10005628:	d9003017 	ldw	r4,192(sp)
1000562c:	00802004 	movi	r2,128
10005630:	2081bb26 	beq	r4,r2,10005d20 <___vfprintf_internal_r+0xff8>
10005634:	d9402a17 	ldw	r5,168(sp)
10005638:	d8802b17 	ldw	r2,172(sp)
1000563c:	28adc83a 	sub	r22,r5,r2
10005640:	0580310e 	bge	zero,r22,10005708 <___vfprintf_internal_r+0x9e0>
10005644:	07000404 	movi	fp,16
10005648:	d8801f17 	ldw	r2,124(sp)
1000564c:	e584360e 	bge	fp,r22,10006728 <___vfprintf_internal_r+0x1a00>
10005650:	01440074 	movhi	r5,4097
10005654:	29530c84 	addi	r5,r5,19506
10005658:	dc402a15 	stw	r17,168(sp)
1000565c:	d9402c15 	stw	r5,176(sp)
10005660:	b023883a 	mov	r17,r22
10005664:	04c001c4 	movi	r19,7
10005668:	a82d883a 	mov	r22,r21
1000566c:	902b883a 	mov	r21,r18
10005670:	8025883a 	mov	r18,r16
10005674:	dc002d17 	ldw	r16,180(sp)
10005678:	00000306 	br	10005688 <___vfprintf_internal_r+0x960>
1000567c:	8c7ffc04 	addi	r17,r17,-16
10005680:	42000204 	addi	r8,r8,8
10005684:	e440110e 	bge	fp,r17,100056cc <___vfprintf_internal_r+0x9a4>
10005688:	18c00404 	addi	r3,r3,16
1000568c:	10800044 	addi	r2,r2,1
10005690:	45000015 	stw	r20,0(r8)
10005694:	47000115 	stw	fp,4(r8)
10005698:	d8c02015 	stw	r3,128(sp)
1000569c:	d8801f15 	stw	r2,124(sp)
100056a0:	98bff60e 	bge	r19,r2,1000567c <__alt_data_end+0xf800567c>
100056a4:	d9801e04 	addi	r6,sp,120
100056a8:	b80b883a 	mov	r5,r23
100056ac:	8009883a 	mov	r4,r16
100056b0:	000c5080 	call	1000c508 <__sprint_r>
100056b4:	103ea01e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100056b8:	8c7ffc04 	addi	r17,r17,-16
100056bc:	d8c02017 	ldw	r3,128(sp)
100056c0:	d8801f17 	ldw	r2,124(sp)
100056c4:	da000404 	addi	r8,sp,16
100056c8:	e47fef16 	blt	fp,r17,10005688 <__alt_data_end+0xf8005688>
100056cc:	9021883a 	mov	r16,r18
100056d0:	a825883a 	mov	r18,r21
100056d4:	b02b883a 	mov	r21,r22
100056d8:	882d883a 	mov	r22,r17
100056dc:	dc402a17 	ldw	r17,168(sp)
100056e0:	d9002c17 	ldw	r4,176(sp)
100056e4:	1d87883a 	add	r3,r3,r22
100056e8:	10800044 	addi	r2,r2,1
100056ec:	41000015 	stw	r4,0(r8)
100056f0:	45800115 	stw	r22,4(r8)
100056f4:	d8c02015 	stw	r3,128(sp)
100056f8:	d8801f15 	stw	r2,124(sp)
100056fc:	010001c4 	movi	r4,7
10005700:	20821016 	blt	r4,r2,10005f44 <___vfprintf_internal_r+0x121c>
10005704:	42000204 	addi	r8,r8,8
10005708:	9080400c 	andi	r2,r18,256
1000570c:	10013a1e 	bne	r2,zero,10005bf8 <___vfprintf_internal_r+0xed0>
10005710:	d9402b17 	ldw	r5,172(sp)
10005714:	d8801f17 	ldw	r2,124(sp)
10005718:	44000015 	stw	r16,0(r8)
1000571c:	1947883a 	add	r3,r3,r5
10005720:	10800044 	addi	r2,r2,1
10005724:	41400115 	stw	r5,4(r8)
10005728:	d8c02015 	stw	r3,128(sp)
1000572c:	d8801f15 	stw	r2,124(sp)
10005730:	010001c4 	movi	r4,7
10005734:	2081f516 	blt	r4,r2,10005f0c <___vfprintf_internal_r+0x11e4>
10005738:	42000204 	addi	r8,r8,8
1000573c:	9480010c 	andi	r18,r18,4
10005740:	90003226 	beq	r18,zero,1000580c <___vfprintf_internal_r+0xae4>
10005744:	d9403117 	ldw	r5,196(sp)
10005748:	d8802917 	ldw	r2,164(sp)
1000574c:	28a1c83a 	sub	r16,r5,r2
10005750:	04002e0e 	bge	zero,r16,1000580c <___vfprintf_internal_r+0xae4>
10005754:	04400404 	movi	r17,16
10005758:	d8801f17 	ldw	r2,124(sp)
1000575c:	8c04c40e 	bge	r17,r16,10006a70 <___vfprintf_internal_r+0x1d48>
10005760:	01440074 	movhi	r5,4097
10005764:	29531084 	addi	r5,r5,19522
10005768:	d9403515 	stw	r5,212(sp)
1000576c:	048001c4 	movi	r18,7
10005770:	dcc02d17 	ldw	r19,180(sp)
10005774:	00000306 	br	10005784 <___vfprintf_internal_r+0xa5c>
10005778:	843ffc04 	addi	r16,r16,-16
1000577c:	42000204 	addi	r8,r8,8
10005780:	8c00130e 	bge	r17,r16,100057d0 <___vfprintf_internal_r+0xaa8>
10005784:	01040074 	movhi	r4,4097
10005788:	18c00404 	addi	r3,r3,16
1000578c:	10800044 	addi	r2,r2,1
10005790:	21131084 	addi	r4,r4,19522
10005794:	41000015 	stw	r4,0(r8)
10005798:	44400115 	stw	r17,4(r8)
1000579c:	d8c02015 	stw	r3,128(sp)
100057a0:	d8801f15 	stw	r2,124(sp)
100057a4:	90bff40e 	bge	r18,r2,10005778 <__alt_data_end+0xf8005778>
100057a8:	d9801e04 	addi	r6,sp,120
100057ac:	b80b883a 	mov	r5,r23
100057b0:	9809883a 	mov	r4,r19
100057b4:	000c5080 	call	1000c508 <__sprint_r>
100057b8:	103e5f1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100057bc:	843ffc04 	addi	r16,r16,-16
100057c0:	d8c02017 	ldw	r3,128(sp)
100057c4:	d8801f17 	ldw	r2,124(sp)
100057c8:	da000404 	addi	r8,sp,16
100057cc:	8c3fed16 	blt	r17,r16,10005784 <__alt_data_end+0xf8005784>
100057d0:	d9403517 	ldw	r5,212(sp)
100057d4:	1c07883a 	add	r3,r3,r16
100057d8:	10800044 	addi	r2,r2,1
100057dc:	41400015 	stw	r5,0(r8)
100057e0:	44000115 	stw	r16,4(r8)
100057e4:	d8c02015 	stw	r3,128(sp)
100057e8:	d8801f15 	stw	r2,124(sp)
100057ec:	010001c4 	movi	r4,7
100057f0:	2080060e 	bge	r4,r2,1000580c <___vfprintf_internal_r+0xae4>
100057f4:	d9002d17 	ldw	r4,180(sp)
100057f8:	d9801e04 	addi	r6,sp,120
100057fc:	b80b883a 	mov	r5,r23
10005800:	000c5080 	call	1000c508 <__sprint_r>
10005804:	103e4c1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005808:	d8c02017 	ldw	r3,128(sp)
1000580c:	d8803117 	ldw	r2,196(sp)
10005810:	d9002917 	ldw	r4,164(sp)
10005814:	1100010e 	bge	r2,r4,1000581c <___vfprintf_internal_r+0xaf4>
10005818:	2005883a 	mov	r2,r4
1000581c:	d9402f17 	ldw	r5,188(sp)
10005820:	288b883a 	add	r5,r5,r2
10005824:	d9402f15 	stw	r5,188(sp)
10005828:	1801c01e 	bne	r3,zero,10005f2c <___vfprintf_internal_r+0x1204>
1000582c:	a8800007 	ldb	r2,0(r21)
10005830:	d8001f15 	stw	zero,124(sp)
10005834:	da000404 	addi	r8,sp,16
10005838:	103d751e 	bne	r2,zero,10004e10 <__alt_data_end+0xf8004e10>
1000583c:	a823883a 	mov	r17,r21
10005840:	003d8b06 	br	10004e70 <__alt_data_end+0xf8004e70>
10005844:	8025883a 	mov	r18,r16
10005848:	dc002903 	ldbu	r16,164(sp)
1000584c:	e011883a 	mov	r8,fp
10005850:	84003fcc 	andi	r16,r16,255
10005854:	8005e51e 	bne	r16,zero,10006fec <___vfprintf_internal_r+0x22c4>
10005858:	94800414 	ori	r18,r18,16
1000585c:	9080080c 	andi	r2,r18,32
10005860:	10022b26 	beq	r2,zero,10006110 <___vfprintf_internal_r+0x13e8>
10005864:	d9002e17 	ldw	r4,184(sp)
10005868:	d9402a17 	ldw	r5,168(sp)
1000586c:	d8002785 	stb	zero,158(sp)
10005870:	20c00204 	addi	r3,r4,8
10005874:	24c00017 	ldw	r19,0(r4)
10005878:	25800117 	ldw	r22,4(r4)
1000587c:	28042e16 	blt	r5,zero,10006938 <___vfprintf_internal_r+0x1c10>
10005880:	013fdfc4 	movi	r4,-129
10005884:	9d84b03a 	or	r2,r19,r22
10005888:	d8c02e15 	stw	r3,184(sp)
1000588c:	9124703a 	and	r18,r18,r4
10005890:	0039883a 	mov	fp,zero
10005894:	103e801e 	bne	r2,zero,10005298 <__alt_data_end+0xf8005298>
10005898:	d9002a17 	ldw	r4,168(sp)
1000589c:	2002e01e 	bne	r4,zero,10006420 <___vfprintf_internal_r+0x16f8>
100058a0:	d8002a15 	stw	zero,168(sp)
100058a4:	d8002b15 	stw	zero,172(sp)
100058a8:	dc001e04 	addi	r16,sp,120
100058ac:	003ef506 	br	10005484 <__alt_data_end+0xf8005484>
100058b0:	8025883a 	mov	r18,r16
100058b4:	dc002903 	ldbu	r16,164(sp)
100058b8:	e011883a 	mov	r8,fp
100058bc:	84003fcc 	andi	r16,r16,255
100058c0:	8005ba1e 	bne	r16,zero,10006fac <___vfprintf_internal_r+0x2284>
100058c4:	01040074 	movhi	r4,4097
100058c8:	21130004 	addi	r4,r4,19456
100058cc:	d9003915 	stw	r4,228(sp)
100058d0:	9080080c 	andi	r2,r18,32
100058d4:	10006126 	beq	r2,zero,10005a5c <___vfprintf_internal_r+0xd34>
100058d8:	d9402e17 	ldw	r5,184(sp)
100058dc:	2cc00017 	ldw	r19,0(r5)
100058e0:	2d800117 	ldw	r22,4(r5)
100058e4:	29400204 	addi	r5,r5,8
100058e8:	d9402e15 	stw	r5,184(sp)
100058ec:	9080004c 	andi	r2,r18,1
100058f0:	1001ac26 	beq	r2,zero,10005fa4 <___vfprintf_internal_r+0x127c>
100058f4:	9d84b03a 	or	r2,r19,r22
100058f8:	10038526 	beq	r2,zero,10006710 <___vfprintf_internal_r+0x19e8>
100058fc:	d8c02a17 	ldw	r3,168(sp)
10005900:	00800c04 	movi	r2,48
10005904:	d8802705 	stb	r2,156(sp)
10005908:	dc402745 	stb	r17,157(sp)
1000590c:	d8002785 	stb	zero,158(sp)
10005910:	90800094 	ori	r2,r18,2
10005914:	18047916 	blt	r3,zero,10006afc <___vfprintf_internal_r+0x1dd4>
10005918:	00bfdfc4 	movi	r2,-129
1000591c:	90a4703a 	and	r18,r18,r2
10005920:	94800094 	ori	r18,r18,2
10005924:	0039883a 	mov	fp,zero
10005928:	d9003917 	ldw	r4,228(sp)
1000592c:	dc001e04 	addi	r16,sp,120
10005930:	988003cc 	andi	r2,r19,15
10005934:	b006973a 	slli	r3,r22,28
10005938:	2085883a 	add	r2,r4,r2
1000593c:	9826d13a 	srli	r19,r19,4
10005940:	10800003 	ldbu	r2,0(r2)
10005944:	b02cd13a 	srli	r22,r22,4
10005948:	843fffc4 	addi	r16,r16,-1
1000594c:	1ce6b03a 	or	r19,r3,r19
10005950:	80800005 	stb	r2,0(r16)
10005954:	9d84b03a 	or	r2,r19,r22
10005958:	103ff51e 	bne	r2,zero,10005930 <__alt_data_end+0xf8005930>
1000595c:	d8c02817 	ldw	r3,160(sp)
10005960:	1c07c83a 	sub	r3,r3,r16
10005964:	d8c02b15 	stw	r3,172(sp)
10005968:	003ec606 	br	10005484 <__alt_data_end+0xf8005484>
1000596c:	8025883a 	mov	r18,r16
10005970:	dc002903 	ldbu	r16,164(sp)
10005974:	e011883a 	mov	r8,fp
10005978:	84003fcc 	andi	r16,r16,255
1000597c:	803e9626 	beq	r16,zero,100053d8 <__alt_data_end+0xf80053d8>
10005980:	d8c02b03 	ldbu	r3,172(sp)
10005984:	d8c02785 	stb	r3,158(sp)
10005988:	003e9306 	br	100053d8 <__alt_data_end+0xf80053d8>
1000598c:	00c00044 	movi	r3,1
10005990:	d8c02905 	stb	r3,164(sp)
10005994:	00c00ac4 	movi	r3,43
10005998:	d8c02b05 	stb	r3,172(sp)
1000599c:	ac400007 	ldb	r17,0(r21)
100059a0:	003d4306 	br	10004eb0 <__alt_data_end+0xf8004eb0>
100059a4:	84000814 	ori	r16,r16,32
100059a8:	ac400007 	ldb	r17,0(r21)
100059ac:	003d4006 	br	10004eb0 <__alt_data_end+0xf8004eb0>
100059b0:	d8802e17 	ldw	r2,184(sp)
100059b4:	8025883a 	mov	r18,r16
100059b8:	d8002785 	stb	zero,158(sp)
100059bc:	14000017 	ldw	r16,0(r2)
100059c0:	e011883a 	mov	r8,fp
100059c4:	14c00104 	addi	r19,r2,4
100059c8:	80042d26 	beq	r16,zero,10006a80 <___vfprintf_internal_r+0x1d58>
100059cc:	d8c02a17 	ldw	r3,168(sp)
100059d0:	1803e416 	blt	r3,zero,10006964 <___vfprintf_internal_r+0x1c3c>
100059d4:	180d883a 	mov	r6,r3
100059d8:	000b883a 	mov	r5,zero
100059dc:	8009883a 	mov	r4,r16
100059e0:	df003d15 	stw	fp,244(sp)
100059e4:	000a6600 	call	1000a660 <memchr>
100059e8:	da003d17 	ldw	r8,244(sp)
100059ec:	10046826 	beq	r2,zero,10006b90 <___vfprintf_internal_r+0x1e68>
100059f0:	1405c83a 	sub	r2,r2,r16
100059f4:	d8802b15 	stw	r2,172(sp)
100059f8:	1003e016 	blt	r2,zero,1000697c <___vfprintf_internal_r+0x1c54>
100059fc:	df002783 	ldbu	fp,158(sp)
10005a00:	d8802915 	stw	r2,164(sp)
10005a04:	dcc02e15 	stw	r19,184(sp)
10005a08:	d8002a15 	stw	zero,168(sp)
10005a0c:	d8003215 	stw	zero,200(sp)
10005a10:	003ea206 	br	1000549c <__alt_data_end+0xf800549c>
10005a14:	8025883a 	mov	r18,r16
10005a18:	dc002903 	ldbu	r16,164(sp)
10005a1c:	e011883a 	mov	r8,fp
10005a20:	84003fcc 	andi	r16,r16,255
10005a24:	803f8d26 	beq	r16,zero,1000585c <__alt_data_end+0xf800585c>
10005a28:	d8c02b03 	ldbu	r3,172(sp)
10005a2c:	d8c02785 	stb	r3,158(sp)
10005a30:	003f8a06 	br	1000585c <__alt_data_end+0xf800585c>
10005a34:	8025883a 	mov	r18,r16
10005a38:	dc002903 	ldbu	r16,164(sp)
10005a3c:	e011883a 	mov	r8,fp
10005a40:	84003fcc 	andi	r16,r16,255
10005a44:	8005661e 	bne	r16,zero,10006fe0 <___vfprintf_internal_r+0x22b8>
10005a48:	01040074 	movhi	r4,4097
10005a4c:	21130504 	addi	r4,r4,19476
10005a50:	d9003915 	stw	r4,228(sp)
10005a54:	9080080c 	andi	r2,r18,32
10005a58:	103f9f1e 	bne	r2,zero,100058d8 <__alt_data_end+0xf80058d8>
10005a5c:	9080040c 	andi	r2,r18,16
10005a60:	1002eb26 	beq	r2,zero,10006610 <___vfprintf_internal_r+0x18e8>
10005a64:	d8802e17 	ldw	r2,184(sp)
10005a68:	002d883a 	mov	r22,zero
10005a6c:	14c00017 	ldw	r19,0(r2)
10005a70:	10800104 	addi	r2,r2,4
10005a74:	d8802e15 	stw	r2,184(sp)
10005a78:	003f9c06 	br	100058ec <__alt_data_end+0xf80058ec>
10005a7c:	d8802b07 	ldb	r2,172(sp)
10005a80:	1002e11e 	bne	r2,zero,10006608 <___vfprintf_internal_r+0x18e0>
10005a84:	00c00044 	movi	r3,1
10005a88:	d8c02905 	stb	r3,164(sp)
10005a8c:	00c00804 	movi	r3,32
10005a90:	d8c02b05 	stb	r3,172(sp)
10005a94:	ac400007 	ldb	r17,0(r21)
10005a98:	003d0506 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10005a9c:	84000054 	ori	r16,r16,1
10005aa0:	ac400007 	ldb	r17,0(r21)
10005aa4:	003d0206 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10005aa8:	8025883a 	mov	r18,r16
10005aac:	dc002903 	ldbu	r16,164(sp)
10005ab0:	e011883a 	mov	r8,fp
10005ab4:	84003fcc 	andi	r16,r16,255
10005ab8:	803de726 	beq	r16,zero,10005258 <__alt_data_end+0xf8005258>
10005abc:	d8c02b03 	ldbu	r3,172(sp)
10005ac0:	d8c02785 	stb	r3,158(sp)
10005ac4:	003de406 	br	10005258 <__alt_data_end+0xf8005258>
10005ac8:	84001014 	ori	r16,r16,64
10005acc:	ac400007 	ldb	r17,0(r21)
10005ad0:	003cf706 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10005ad4:	ac400007 	ldb	r17,0(r21)
10005ad8:	00801b04 	movi	r2,108
10005adc:	88838f26 	beq	r17,r2,1000691c <___vfprintf_internal_r+0x1bf4>
10005ae0:	84000414 	ori	r16,r16,16
10005ae4:	003cf206 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10005ae8:	8025883a 	mov	r18,r16
10005aec:	dc002903 	ldbu	r16,164(sp)
10005af0:	e011883a 	mov	r8,fp
10005af4:	84003fcc 	andi	r16,r16,255
10005af8:	80053f1e 	bne	r16,zero,10006ff8 <___vfprintf_internal_r+0x22d0>
10005afc:	9080080c 	andi	r2,r18,32
10005b00:	1002d226 	beq	r2,zero,1000664c <___vfprintf_internal_r+0x1924>
10005b04:	d9002e17 	ldw	r4,184(sp)
10005b08:	d9402f17 	ldw	r5,188(sp)
10005b0c:	20800017 	ldw	r2,0(r4)
10005b10:	2807d7fa 	srai	r3,r5,31
10005b14:	21000104 	addi	r4,r4,4
10005b18:	d9002e15 	stw	r4,184(sp)
10005b1c:	11400015 	stw	r5,0(r2)
10005b20:	10c00115 	stw	r3,4(r2)
10005b24:	003cb806 	br	10004e08 <__alt_data_end+0xf8004e08>
10005b28:	d8c02e17 	ldw	r3,184(sp)
10005b2c:	d9002e17 	ldw	r4,184(sp)
10005b30:	8025883a 	mov	r18,r16
10005b34:	18800017 	ldw	r2,0(r3)
10005b38:	21000104 	addi	r4,r4,4
10005b3c:	00c00044 	movi	r3,1
10005b40:	e011883a 	mov	r8,fp
10005b44:	d8c02915 	stw	r3,164(sp)
10005b48:	d8002785 	stb	zero,158(sp)
10005b4c:	d8801405 	stb	r2,80(sp)
10005b50:	d9002e15 	stw	r4,184(sp)
10005b54:	d8c02b15 	stw	r3,172(sp)
10005b58:	d8002a15 	stw	zero,168(sp)
10005b5c:	d8003215 	stw	zero,200(sp)
10005b60:	dc001404 	addi	r16,sp,80
10005b64:	0039883a 	mov	fp,zero
10005b68:	003e5306 	br	100054b8 <__alt_data_end+0xf80054b8>
10005b6c:	01040074 	movhi	r4,4097
10005b70:	21130504 	addi	r4,r4,19476
10005b74:	0039883a 	mov	fp,zero
10005b78:	d9003915 	stw	r4,228(sp)
10005b7c:	04401e04 	movi	r17,120
10005b80:	003f6906 	br	10005928 <__alt_data_end+0xf8005928>
10005b84:	8025883a 	mov	r18,r16
10005b88:	dc002903 	ldbu	r16,164(sp)
10005b8c:	e011883a 	mov	r8,fp
10005b90:	84003fcc 	andi	r16,r16,255
10005b94:	8005081e 	bne	r16,zero,10006fb8 <___vfprintf_internal_r+0x2290>
10005b98:	883d6126 	beq	r17,zero,10005120 <__alt_data_end+0xf8005120>
10005b9c:	00c00044 	movi	r3,1
10005ba0:	d8c02915 	stw	r3,164(sp)
10005ba4:	dc401405 	stb	r17,80(sp)
10005ba8:	d8002785 	stb	zero,158(sp)
10005bac:	003fe906 	br	10005b54 <__alt_data_end+0xf8005b54>
10005bb0:	01440074 	movhi	r5,4097
10005bb4:	29530504 	addi	r5,r5,19476
10005bb8:	d9403915 	stw	r5,228(sp)
10005bbc:	d8c02e15 	stw	r3,184(sp)
10005bc0:	1025883a 	mov	r18,r2
10005bc4:	04401e04 	movi	r17,120
10005bc8:	9d84b03a 	or	r2,r19,r22
10005bcc:	1000fc1e 	bne	r2,zero,10005fc0 <___vfprintf_internal_r+0x1298>
10005bd0:	0039883a 	mov	fp,zero
10005bd4:	00800084 	movi	r2,2
10005bd8:	10803fcc 	andi	r2,r2,255
10005bdc:	00c00044 	movi	r3,1
10005be0:	10c20f26 	beq	r2,r3,10006420 <___vfprintf_internal_r+0x16f8>
10005be4:	00c00084 	movi	r3,2
10005be8:	10fd3326 	beq	r2,r3,100050b8 <__alt_data_end+0xf80050b8>
10005bec:	003e0b06 	br	1000541c <__alt_data_end+0xf800541c>
10005bf0:	d8c02017 	ldw	r3,128(sp)
10005bf4:	003e7106 	br	100055bc <__alt_data_end+0xf80055bc>
10005bf8:	00801944 	movi	r2,101
10005bfc:	14407e0e 	bge	r2,r17,10005df8 <___vfprintf_internal_r+0x10d0>
10005c00:	d9003617 	ldw	r4,216(sp)
10005c04:	d9403817 	ldw	r5,224(sp)
10005c08:	000d883a 	mov	r6,zero
10005c0c:	000f883a 	mov	r7,zero
10005c10:	d8c03c15 	stw	r3,240(sp)
10005c14:	da003d15 	stw	r8,244(sp)
10005c18:	00104400 	call	10010440 <__eqdf2>
10005c1c:	d8c03c17 	ldw	r3,240(sp)
10005c20:	da003d17 	ldw	r8,244(sp)
10005c24:	1000f71e 	bne	r2,zero,10006004 <___vfprintf_internal_r+0x12dc>
10005c28:	d8801f17 	ldw	r2,124(sp)
10005c2c:	01040074 	movhi	r4,4097
10005c30:	21130c04 	addi	r4,r4,19504
10005c34:	18c00044 	addi	r3,r3,1
10005c38:	10800044 	addi	r2,r2,1
10005c3c:	41000015 	stw	r4,0(r8)
10005c40:	01000044 	movi	r4,1
10005c44:	41000115 	stw	r4,4(r8)
10005c48:	d8c02015 	stw	r3,128(sp)
10005c4c:	d8801f15 	stw	r2,124(sp)
10005c50:	010001c4 	movi	r4,7
10005c54:	2082b816 	blt	r4,r2,10006738 <___vfprintf_internal_r+0x1a10>
10005c58:	42000204 	addi	r8,r8,8
10005c5c:	d8802617 	ldw	r2,152(sp)
10005c60:	d9403317 	ldw	r5,204(sp)
10005c64:	11400216 	blt	r2,r5,10005c70 <___vfprintf_internal_r+0xf48>
10005c68:	9080004c 	andi	r2,r18,1
10005c6c:	103eb326 	beq	r2,zero,1000573c <__alt_data_end+0xf800573c>
10005c70:	d8803717 	ldw	r2,220(sp)
10005c74:	d9003417 	ldw	r4,208(sp)
10005c78:	d9403717 	ldw	r5,220(sp)
10005c7c:	1887883a 	add	r3,r3,r2
10005c80:	d8801f17 	ldw	r2,124(sp)
10005c84:	41000015 	stw	r4,0(r8)
10005c88:	41400115 	stw	r5,4(r8)
10005c8c:	10800044 	addi	r2,r2,1
10005c90:	d8c02015 	stw	r3,128(sp)
10005c94:	d8801f15 	stw	r2,124(sp)
10005c98:	010001c4 	movi	r4,7
10005c9c:	20832916 	blt	r4,r2,10006944 <___vfprintf_internal_r+0x1c1c>
10005ca0:	42000204 	addi	r8,r8,8
10005ca4:	d8803317 	ldw	r2,204(sp)
10005ca8:	143fffc4 	addi	r16,r2,-1
10005cac:	043ea30e 	bge	zero,r16,1000573c <__alt_data_end+0xf800573c>
10005cb0:	04400404 	movi	r17,16
10005cb4:	d8801f17 	ldw	r2,124(sp)
10005cb8:	8c00880e 	bge	r17,r16,10005edc <___vfprintf_internal_r+0x11b4>
10005cbc:	01440074 	movhi	r5,4097
10005cc0:	29530c84 	addi	r5,r5,19506
10005cc4:	d9402c15 	stw	r5,176(sp)
10005cc8:	058001c4 	movi	r22,7
10005ccc:	dcc02d17 	ldw	r19,180(sp)
10005cd0:	00000306 	br	10005ce0 <___vfprintf_internal_r+0xfb8>
10005cd4:	42000204 	addi	r8,r8,8
10005cd8:	843ffc04 	addi	r16,r16,-16
10005cdc:	8c00820e 	bge	r17,r16,10005ee8 <___vfprintf_internal_r+0x11c0>
10005ce0:	18c00404 	addi	r3,r3,16
10005ce4:	10800044 	addi	r2,r2,1
10005ce8:	45000015 	stw	r20,0(r8)
10005cec:	44400115 	stw	r17,4(r8)
10005cf0:	d8c02015 	stw	r3,128(sp)
10005cf4:	d8801f15 	stw	r2,124(sp)
10005cf8:	b0bff60e 	bge	r22,r2,10005cd4 <__alt_data_end+0xf8005cd4>
10005cfc:	d9801e04 	addi	r6,sp,120
10005d00:	b80b883a 	mov	r5,r23
10005d04:	9809883a 	mov	r4,r19
10005d08:	000c5080 	call	1000c508 <__sprint_r>
10005d0c:	103d0a1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005d10:	d8c02017 	ldw	r3,128(sp)
10005d14:	d8801f17 	ldw	r2,124(sp)
10005d18:	da000404 	addi	r8,sp,16
10005d1c:	003fee06 	br	10005cd8 <__alt_data_end+0xf8005cd8>
10005d20:	d9403117 	ldw	r5,196(sp)
10005d24:	d8802917 	ldw	r2,164(sp)
10005d28:	28adc83a 	sub	r22,r5,r2
10005d2c:	05be410e 	bge	zero,r22,10005634 <__alt_data_end+0xf8005634>
10005d30:	07000404 	movi	fp,16
10005d34:	d8801f17 	ldw	r2,124(sp)
10005d38:	e5838f0e 	bge	fp,r22,10006b78 <___vfprintf_internal_r+0x1e50>
10005d3c:	01440074 	movhi	r5,4097
10005d40:	29530c84 	addi	r5,r5,19506
10005d44:	dc403015 	stw	r17,192(sp)
10005d48:	d9402c15 	stw	r5,176(sp)
10005d4c:	b023883a 	mov	r17,r22
10005d50:	04c001c4 	movi	r19,7
10005d54:	a82d883a 	mov	r22,r21
10005d58:	902b883a 	mov	r21,r18
10005d5c:	8025883a 	mov	r18,r16
10005d60:	dc002d17 	ldw	r16,180(sp)
10005d64:	00000306 	br	10005d74 <___vfprintf_internal_r+0x104c>
10005d68:	8c7ffc04 	addi	r17,r17,-16
10005d6c:	42000204 	addi	r8,r8,8
10005d70:	e440110e 	bge	fp,r17,10005db8 <___vfprintf_internal_r+0x1090>
10005d74:	18c00404 	addi	r3,r3,16
10005d78:	10800044 	addi	r2,r2,1
10005d7c:	45000015 	stw	r20,0(r8)
10005d80:	47000115 	stw	fp,4(r8)
10005d84:	d8c02015 	stw	r3,128(sp)
10005d88:	d8801f15 	stw	r2,124(sp)
10005d8c:	98bff60e 	bge	r19,r2,10005d68 <__alt_data_end+0xf8005d68>
10005d90:	d9801e04 	addi	r6,sp,120
10005d94:	b80b883a 	mov	r5,r23
10005d98:	8009883a 	mov	r4,r16
10005d9c:	000c5080 	call	1000c508 <__sprint_r>
10005da0:	103ce51e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005da4:	8c7ffc04 	addi	r17,r17,-16
10005da8:	d8c02017 	ldw	r3,128(sp)
10005dac:	d8801f17 	ldw	r2,124(sp)
10005db0:	da000404 	addi	r8,sp,16
10005db4:	e47fef16 	blt	fp,r17,10005d74 <__alt_data_end+0xf8005d74>
10005db8:	9021883a 	mov	r16,r18
10005dbc:	a825883a 	mov	r18,r21
10005dc0:	b02b883a 	mov	r21,r22
10005dc4:	882d883a 	mov	r22,r17
10005dc8:	dc403017 	ldw	r17,192(sp)
10005dcc:	d9002c17 	ldw	r4,176(sp)
10005dd0:	1d87883a 	add	r3,r3,r22
10005dd4:	10800044 	addi	r2,r2,1
10005dd8:	41000015 	stw	r4,0(r8)
10005ddc:	45800115 	stw	r22,4(r8)
10005de0:	d8c02015 	stw	r3,128(sp)
10005de4:	d8801f15 	stw	r2,124(sp)
10005de8:	010001c4 	movi	r4,7
10005dec:	20818e16 	blt	r4,r2,10006428 <___vfprintf_internal_r+0x1700>
10005df0:	42000204 	addi	r8,r8,8
10005df4:	003e0f06 	br	10005634 <__alt_data_end+0xf8005634>
10005df8:	d9403317 	ldw	r5,204(sp)
10005dfc:	00800044 	movi	r2,1
10005e00:	18c00044 	addi	r3,r3,1
10005e04:	1141530e 	bge	r2,r5,10006354 <___vfprintf_internal_r+0x162c>
10005e08:	dc401f17 	ldw	r17,124(sp)
10005e0c:	00800044 	movi	r2,1
10005e10:	40800115 	stw	r2,4(r8)
10005e14:	8c400044 	addi	r17,r17,1
10005e18:	44000015 	stw	r16,0(r8)
10005e1c:	d8c02015 	stw	r3,128(sp)
10005e20:	dc401f15 	stw	r17,124(sp)
10005e24:	008001c4 	movi	r2,7
10005e28:	14416b16 	blt	r2,r17,100063d8 <___vfprintf_internal_r+0x16b0>
10005e2c:	42000204 	addi	r8,r8,8
10005e30:	d8803717 	ldw	r2,220(sp)
10005e34:	d9003417 	ldw	r4,208(sp)
10005e38:	8c400044 	addi	r17,r17,1
10005e3c:	10c7883a 	add	r3,r2,r3
10005e40:	40800115 	stw	r2,4(r8)
10005e44:	41000015 	stw	r4,0(r8)
10005e48:	d8c02015 	stw	r3,128(sp)
10005e4c:	dc401f15 	stw	r17,124(sp)
10005e50:	008001c4 	movi	r2,7
10005e54:	14416916 	blt	r2,r17,100063fc <___vfprintf_internal_r+0x16d4>
10005e58:	45800204 	addi	r22,r8,8
10005e5c:	d9003617 	ldw	r4,216(sp)
10005e60:	d9403817 	ldw	r5,224(sp)
10005e64:	000d883a 	mov	r6,zero
10005e68:	000f883a 	mov	r7,zero
10005e6c:	d8c03c15 	stw	r3,240(sp)
10005e70:	00104400 	call	10010440 <__eqdf2>
10005e74:	d8c03c17 	ldw	r3,240(sp)
10005e78:	1000bc26 	beq	r2,zero,1000616c <___vfprintf_internal_r+0x1444>
10005e7c:	d9403317 	ldw	r5,204(sp)
10005e80:	84000044 	addi	r16,r16,1
10005e84:	8c400044 	addi	r17,r17,1
10005e88:	28bfffc4 	addi	r2,r5,-1
10005e8c:	1887883a 	add	r3,r3,r2
10005e90:	b0800115 	stw	r2,4(r22)
10005e94:	b4000015 	stw	r16,0(r22)
10005e98:	d8c02015 	stw	r3,128(sp)
10005e9c:	dc401f15 	stw	r17,124(sp)
10005ea0:	008001c4 	movi	r2,7
10005ea4:	14414316 	blt	r2,r17,100063b4 <___vfprintf_internal_r+0x168c>
10005ea8:	b5800204 	addi	r22,r22,8
10005eac:	d9003a17 	ldw	r4,232(sp)
10005eb0:	df0022c4 	addi	fp,sp,139
10005eb4:	8c400044 	addi	r17,r17,1
10005eb8:	20c7883a 	add	r3,r4,r3
10005ebc:	b7000015 	stw	fp,0(r22)
10005ec0:	b1000115 	stw	r4,4(r22)
10005ec4:	d8c02015 	stw	r3,128(sp)
10005ec8:	dc401f15 	stw	r17,124(sp)
10005ecc:	008001c4 	movi	r2,7
10005ed0:	14400e16 	blt	r2,r17,10005f0c <___vfprintf_internal_r+0x11e4>
10005ed4:	b2000204 	addi	r8,r22,8
10005ed8:	003e1806 	br	1000573c <__alt_data_end+0xf800573c>
10005edc:	01040074 	movhi	r4,4097
10005ee0:	21130c84 	addi	r4,r4,19506
10005ee4:	d9002c15 	stw	r4,176(sp)
10005ee8:	d9002c17 	ldw	r4,176(sp)
10005eec:	1c07883a 	add	r3,r3,r16
10005ef0:	44000115 	stw	r16,4(r8)
10005ef4:	41000015 	stw	r4,0(r8)
10005ef8:	10800044 	addi	r2,r2,1
10005efc:	d8c02015 	stw	r3,128(sp)
10005f00:	d8801f15 	stw	r2,124(sp)
10005f04:	010001c4 	movi	r4,7
10005f08:	20be0b0e 	bge	r4,r2,10005738 <__alt_data_end+0xf8005738>
10005f0c:	d9002d17 	ldw	r4,180(sp)
10005f10:	d9801e04 	addi	r6,sp,120
10005f14:	b80b883a 	mov	r5,r23
10005f18:	000c5080 	call	1000c508 <__sprint_r>
10005f1c:	103c861e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005f20:	d8c02017 	ldw	r3,128(sp)
10005f24:	da000404 	addi	r8,sp,16
10005f28:	003e0406 	br	1000573c <__alt_data_end+0xf800573c>
10005f2c:	d9002d17 	ldw	r4,180(sp)
10005f30:	d9801e04 	addi	r6,sp,120
10005f34:	b80b883a 	mov	r5,r23
10005f38:	000c5080 	call	1000c508 <__sprint_r>
10005f3c:	103e3b26 	beq	r2,zero,1000582c <__alt_data_end+0xf800582c>
10005f40:	003c7d06 	br	10005138 <__alt_data_end+0xf8005138>
10005f44:	d9002d17 	ldw	r4,180(sp)
10005f48:	d9801e04 	addi	r6,sp,120
10005f4c:	b80b883a 	mov	r5,r23
10005f50:	000c5080 	call	1000c508 <__sprint_r>
10005f54:	103c781e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005f58:	d8c02017 	ldw	r3,128(sp)
10005f5c:	da000404 	addi	r8,sp,16
10005f60:	003de906 	br	10005708 <__alt_data_end+0xf8005708>
10005f64:	d9002d17 	ldw	r4,180(sp)
10005f68:	d9801e04 	addi	r6,sp,120
10005f6c:	b80b883a 	mov	r5,r23
10005f70:	000c5080 	call	1000c508 <__sprint_r>
10005f74:	103c701e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005f78:	d8c02017 	ldw	r3,128(sp)
10005f7c:	da000404 	addi	r8,sp,16
10005f80:	003d9b06 	br	100055f0 <__alt_data_end+0xf80055f0>
10005f84:	d9002d17 	ldw	r4,180(sp)
10005f88:	d9801e04 	addi	r6,sp,120
10005f8c:	b80b883a 	mov	r5,r23
10005f90:	000c5080 	call	1000c508 <__sprint_r>
10005f94:	103c681e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10005f98:	d8c02017 	ldw	r3,128(sp)
10005f9c:	da000404 	addi	r8,sp,16
10005fa0:	003da106 	br	10005628 <__alt_data_end+0xf8005628>
10005fa4:	d9402a17 	ldw	r5,168(sp)
10005fa8:	d8002785 	stb	zero,158(sp)
10005fac:	283f0616 	blt	r5,zero,10005bc8 <__alt_data_end+0xf8005bc8>
10005fb0:	00ffdfc4 	movi	r3,-129
10005fb4:	9d84b03a 	or	r2,r19,r22
10005fb8:	90e4703a 	and	r18,r18,r3
10005fbc:	103c3b26 	beq	r2,zero,100050ac <__alt_data_end+0xf80050ac>
10005fc0:	0039883a 	mov	fp,zero
10005fc4:	003e5806 	br	10005928 <__alt_data_end+0xf8005928>
10005fc8:	9080040c 	andi	r2,r18,16
10005fcc:	1001b326 	beq	r2,zero,1000669c <___vfprintf_internal_r+0x1974>
10005fd0:	d8c02e17 	ldw	r3,184(sp)
10005fd4:	d9002a17 	ldw	r4,168(sp)
10005fd8:	d8002785 	stb	zero,158(sp)
10005fdc:	18800104 	addi	r2,r3,4
10005fe0:	1cc00017 	ldw	r19,0(r3)
10005fe4:	002d883a 	mov	r22,zero
10005fe8:	2001b516 	blt	r4,zero,100066c0 <___vfprintf_internal_r+0x1998>
10005fec:	00ffdfc4 	movi	r3,-129
10005ff0:	d8802e15 	stw	r2,184(sp)
10005ff4:	90e4703a 	and	r18,r18,r3
10005ff8:	983d0526 	beq	r19,zero,10005410 <__alt_data_end+0xf8005410>
10005ffc:	0039883a 	mov	fp,zero
10006000:	003d0806 	br	10005424 <__alt_data_end+0xf8005424>
10006004:	dc402617 	ldw	r17,152(sp)
10006008:	0441d30e 	bge	zero,r17,10006758 <___vfprintf_internal_r+0x1a30>
1000600c:	dc403217 	ldw	r17,200(sp)
10006010:	d8803317 	ldw	r2,204(sp)
10006014:	1440010e 	bge	r2,r17,1000601c <___vfprintf_internal_r+0x12f4>
10006018:	1023883a 	mov	r17,r2
1000601c:	04400a0e 	bge	zero,r17,10006048 <___vfprintf_internal_r+0x1320>
10006020:	d8801f17 	ldw	r2,124(sp)
10006024:	1c47883a 	add	r3,r3,r17
10006028:	44000015 	stw	r16,0(r8)
1000602c:	10800044 	addi	r2,r2,1
10006030:	44400115 	stw	r17,4(r8)
10006034:	d8c02015 	stw	r3,128(sp)
10006038:	d8801f15 	stw	r2,124(sp)
1000603c:	010001c4 	movi	r4,7
10006040:	20826516 	blt	r4,r2,100069d8 <___vfprintf_internal_r+0x1cb0>
10006044:	42000204 	addi	r8,r8,8
10006048:	88026116 	blt	r17,zero,100069d0 <___vfprintf_internal_r+0x1ca8>
1000604c:	d9003217 	ldw	r4,200(sp)
10006050:	2463c83a 	sub	r17,r4,r17
10006054:	04407b0e 	bge	zero,r17,10006244 <___vfprintf_internal_r+0x151c>
10006058:	05800404 	movi	r22,16
1000605c:	d8801f17 	ldw	r2,124(sp)
10006060:	b4419d0e 	bge	r22,r17,100066d8 <___vfprintf_internal_r+0x19b0>
10006064:	01040074 	movhi	r4,4097
10006068:	21130c84 	addi	r4,r4,19506
1000606c:	d9002c15 	stw	r4,176(sp)
10006070:	070001c4 	movi	fp,7
10006074:	dcc02d17 	ldw	r19,180(sp)
10006078:	00000306 	br	10006088 <___vfprintf_internal_r+0x1360>
1000607c:	42000204 	addi	r8,r8,8
10006080:	8c7ffc04 	addi	r17,r17,-16
10006084:	b441970e 	bge	r22,r17,100066e4 <___vfprintf_internal_r+0x19bc>
10006088:	18c00404 	addi	r3,r3,16
1000608c:	10800044 	addi	r2,r2,1
10006090:	45000015 	stw	r20,0(r8)
10006094:	45800115 	stw	r22,4(r8)
10006098:	d8c02015 	stw	r3,128(sp)
1000609c:	d8801f15 	stw	r2,124(sp)
100060a0:	e0bff60e 	bge	fp,r2,1000607c <__alt_data_end+0xf800607c>
100060a4:	d9801e04 	addi	r6,sp,120
100060a8:	b80b883a 	mov	r5,r23
100060ac:	9809883a 	mov	r4,r19
100060b0:	000c5080 	call	1000c508 <__sprint_r>
100060b4:	103c201e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100060b8:	d8c02017 	ldw	r3,128(sp)
100060bc:	d8801f17 	ldw	r2,124(sp)
100060c0:	da000404 	addi	r8,sp,16
100060c4:	003fee06 	br	10006080 <__alt_data_end+0xf8006080>
100060c8:	d9002d17 	ldw	r4,180(sp)
100060cc:	d9801e04 	addi	r6,sp,120
100060d0:	b80b883a 	mov	r5,r23
100060d4:	000c5080 	call	1000c508 <__sprint_r>
100060d8:	103c171e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100060dc:	d8c02017 	ldw	r3,128(sp)
100060e0:	df002787 	ldb	fp,158(sp)
100060e4:	da000404 	addi	r8,sp,16
100060e8:	003d3406 	br	100055bc <__alt_data_end+0xf80055bc>
100060ec:	9080040c 	andi	r2,r18,16
100060f0:	10016126 	beq	r2,zero,10006678 <___vfprintf_internal_r+0x1950>
100060f4:	d9402e17 	ldw	r5,184(sp)
100060f8:	2cc00017 	ldw	r19,0(r5)
100060fc:	29400104 	addi	r5,r5,4
10006100:	d9402e15 	stw	r5,184(sp)
10006104:	982dd7fa 	srai	r22,r19,31
10006108:	b005883a 	mov	r2,r22
1000610c:	003c5a06 	br	10005278 <__alt_data_end+0xf8005278>
10006110:	9080040c 	andi	r2,r18,16
10006114:	10003526 	beq	r2,zero,100061ec <___vfprintf_internal_r+0x14c4>
10006118:	d8c02e17 	ldw	r3,184(sp)
1000611c:	d9002a17 	ldw	r4,168(sp)
10006120:	d8002785 	stb	zero,158(sp)
10006124:	18800104 	addi	r2,r3,4
10006128:	1cc00017 	ldw	r19,0(r3)
1000612c:	002d883a 	mov	r22,zero
10006130:	20003716 	blt	r4,zero,10006210 <___vfprintf_internal_r+0x14e8>
10006134:	00ffdfc4 	movi	r3,-129
10006138:	d8802e15 	stw	r2,184(sp)
1000613c:	90e4703a 	and	r18,r18,r3
10006140:	0039883a 	mov	fp,zero
10006144:	983dd426 	beq	r19,zero,10005898 <__alt_data_end+0xf8005898>
10006148:	00800244 	movi	r2,9
1000614c:	14fc5336 	bltu	r2,r19,1000529c <__alt_data_end+0xf800529c>
10006150:	d8c02817 	ldw	r3,160(sp)
10006154:	dc001dc4 	addi	r16,sp,119
10006158:	9cc00c04 	addi	r19,r19,48
1000615c:	1c07c83a 	sub	r3,r3,r16
10006160:	dcc01dc5 	stb	r19,119(sp)
10006164:	d8c02b15 	stw	r3,172(sp)
10006168:	003cc606 	br	10005484 <__alt_data_end+0xf8005484>
1000616c:	d8803317 	ldw	r2,204(sp)
10006170:	143fffc4 	addi	r16,r2,-1
10006174:	043f4d0e 	bge	zero,r16,10005eac <__alt_data_end+0xf8005eac>
10006178:	07000404 	movi	fp,16
1000617c:	e400810e 	bge	fp,r16,10006384 <___vfprintf_internal_r+0x165c>
10006180:	01440074 	movhi	r5,4097
10006184:	29530c84 	addi	r5,r5,19506
10006188:	d9402c15 	stw	r5,176(sp)
1000618c:	01c001c4 	movi	r7,7
10006190:	dcc02d17 	ldw	r19,180(sp)
10006194:	00000306 	br	100061a4 <___vfprintf_internal_r+0x147c>
10006198:	b5800204 	addi	r22,r22,8
1000619c:	843ffc04 	addi	r16,r16,-16
100061a0:	e4007b0e 	bge	fp,r16,10006390 <___vfprintf_internal_r+0x1668>
100061a4:	18c00404 	addi	r3,r3,16
100061a8:	8c400044 	addi	r17,r17,1
100061ac:	b5000015 	stw	r20,0(r22)
100061b0:	b7000115 	stw	fp,4(r22)
100061b4:	d8c02015 	stw	r3,128(sp)
100061b8:	dc401f15 	stw	r17,124(sp)
100061bc:	3c7ff60e 	bge	r7,r17,10006198 <__alt_data_end+0xf8006198>
100061c0:	d9801e04 	addi	r6,sp,120
100061c4:	b80b883a 	mov	r5,r23
100061c8:	9809883a 	mov	r4,r19
100061cc:	d9c03c15 	stw	r7,240(sp)
100061d0:	000c5080 	call	1000c508 <__sprint_r>
100061d4:	d9c03c17 	ldw	r7,240(sp)
100061d8:	103bd71e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100061dc:	d8c02017 	ldw	r3,128(sp)
100061e0:	dc401f17 	ldw	r17,124(sp)
100061e4:	dd800404 	addi	r22,sp,16
100061e8:	003fec06 	br	1000619c <__alt_data_end+0xf800619c>
100061ec:	9080100c 	andi	r2,r18,64
100061f0:	d8002785 	stb	zero,158(sp)
100061f4:	10010e26 	beq	r2,zero,10006630 <___vfprintf_internal_r+0x1908>
100061f8:	d9402e17 	ldw	r5,184(sp)
100061fc:	d8c02a17 	ldw	r3,168(sp)
10006200:	002d883a 	mov	r22,zero
10006204:	28800104 	addi	r2,r5,4
10006208:	2cc0000b 	ldhu	r19,0(r5)
1000620c:	183fc90e 	bge	r3,zero,10006134 <__alt_data_end+0xf8006134>
10006210:	d8802e15 	stw	r2,184(sp)
10006214:	0039883a 	mov	fp,zero
10006218:	9d84b03a 	or	r2,r19,r22
1000621c:	103c1e1e 	bne	r2,zero,10005298 <__alt_data_end+0xf8005298>
10006220:	00800044 	movi	r2,1
10006224:	003e6c06 	br	10005bd8 <__alt_data_end+0xf8005bd8>
10006228:	d9002d17 	ldw	r4,180(sp)
1000622c:	d9801e04 	addi	r6,sp,120
10006230:	b80b883a 	mov	r5,r23
10006234:	000c5080 	call	1000c508 <__sprint_r>
10006238:	103bbf1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
1000623c:	d8c02017 	ldw	r3,128(sp)
10006240:	da000404 	addi	r8,sp,16
10006244:	d9003217 	ldw	r4,200(sp)
10006248:	d8802617 	ldw	r2,152(sp)
1000624c:	d9403317 	ldw	r5,204(sp)
10006250:	8123883a 	add	r17,r16,r4
10006254:	11400216 	blt	r2,r5,10006260 <___vfprintf_internal_r+0x1538>
10006258:	9100004c 	andi	r4,r18,1
1000625c:	20000d26 	beq	r4,zero,10006294 <___vfprintf_internal_r+0x156c>
10006260:	d9003717 	ldw	r4,220(sp)
10006264:	d9403417 	ldw	r5,208(sp)
10006268:	1907883a 	add	r3,r3,r4
1000626c:	d9001f17 	ldw	r4,124(sp)
10006270:	41400015 	stw	r5,0(r8)
10006274:	d9403717 	ldw	r5,220(sp)
10006278:	21000044 	addi	r4,r4,1
1000627c:	d8c02015 	stw	r3,128(sp)
10006280:	41400115 	stw	r5,4(r8)
10006284:	d9001f15 	stw	r4,124(sp)
10006288:	014001c4 	movi	r5,7
1000628c:	2901e816 	blt	r5,r4,10006a30 <___vfprintf_internal_r+0x1d08>
10006290:	42000204 	addi	r8,r8,8
10006294:	d9003317 	ldw	r4,204(sp)
10006298:	8121883a 	add	r16,r16,r4
1000629c:	2085c83a 	sub	r2,r4,r2
100062a0:	8461c83a 	sub	r16,r16,r17
100062a4:	1400010e 	bge	r2,r16,100062ac <___vfprintf_internal_r+0x1584>
100062a8:	1021883a 	mov	r16,r2
100062ac:	04000a0e 	bge	zero,r16,100062d8 <___vfprintf_internal_r+0x15b0>
100062b0:	d9001f17 	ldw	r4,124(sp)
100062b4:	1c07883a 	add	r3,r3,r16
100062b8:	44400015 	stw	r17,0(r8)
100062bc:	21000044 	addi	r4,r4,1
100062c0:	44000115 	stw	r16,4(r8)
100062c4:	d8c02015 	stw	r3,128(sp)
100062c8:	d9001f15 	stw	r4,124(sp)
100062cc:	014001c4 	movi	r5,7
100062d0:	2901fb16 	blt	r5,r4,10006ac0 <___vfprintf_internal_r+0x1d98>
100062d4:	42000204 	addi	r8,r8,8
100062d8:	8001f716 	blt	r16,zero,10006ab8 <___vfprintf_internal_r+0x1d90>
100062dc:	1421c83a 	sub	r16,r2,r16
100062e0:	043d160e 	bge	zero,r16,1000573c <__alt_data_end+0xf800573c>
100062e4:	04400404 	movi	r17,16
100062e8:	d8801f17 	ldw	r2,124(sp)
100062ec:	8c3efb0e 	bge	r17,r16,10005edc <__alt_data_end+0xf8005edc>
100062f0:	01440074 	movhi	r5,4097
100062f4:	29530c84 	addi	r5,r5,19506
100062f8:	d9402c15 	stw	r5,176(sp)
100062fc:	058001c4 	movi	r22,7
10006300:	dcc02d17 	ldw	r19,180(sp)
10006304:	00000306 	br	10006314 <___vfprintf_internal_r+0x15ec>
10006308:	42000204 	addi	r8,r8,8
1000630c:	843ffc04 	addi	r16,r16,-16
10006310:	8c3ef50e 	bge	r17,r16,10005ee8 <__alt_data_end+0xf8005ee8>
10006314:	18c00404 	addi	r3,r3,16
10006318:	10800044 	addi	r2,r2,1
1000631c:	45000015 	stw	r20,0(r8)
10006320:	44400115 	stw	r17,4(r8)
10006324:	d8c02015 	stw	r3,128(sp)
10006328:	d8801f15 	stw	r2,124(sp)
1000632c:	b0bff60e 	bge	r22,r2,10006308 <__alt_data_end+0xf8006308>
10006330:	d9801e04 	addi	r6,sp,120
10006334:	b80b883a 	mov	r5,r23
10006338:	9809883a 	mov	r4,r19
1000633c:	000c5080 	call	1000c508 <__sprint_r>
10006340:	103b7d1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006344:	d8c02017 	ldw	r3,128(sp)
10006348:	d8801f17 	ldw	r2,124(sp)
1000634c:	da000404 	addi	r8,sp,16
10006350:	003fee06 	br	1000630c <__alt_data_end+0xf800630c>
10006354:	9088703a 	and	r4,r18,r2
10006358:	203eab1e 	bne	r4,zero,10005e08 <__alt_data_end+0xf8005e08>
1000635c:	dc401f17 	ldw	r17,124(sp)
10006360:	40800115 	stw	r2,4(r8)
10006364:	44000015 	stw	r16,0(r8)
10006368:	8c400044 	addi	r17,r17,1
1000636c:	d8c02015 	stw	r3,128(sp)
10006370:	dc401f15 	stw	r17,124(sp)
10006374:	008001c4 	movi	r2,7
10006378:	14400e16 	blt	r2,r17,100063b4 <___vfprintf_internal_r+0x168c>
1000637c:	45800204 	addi	r22,r8,8
10006380:	003eca06 	br	10005eac <__alt_data_end+0xf8005eac>
10006384:	01040074 	movhi	r4,4097
10006388:	21130c84 	addi	r4,r4,19506
1000638c:	d9002c15 	stw	r4,176(sp)
10006390:	d8802c17 	ldw	r2,176(sp)
10006394:	1c07883a 	add	r3,r3,r16
10006398:	8c400044 	addi	r17,r17,1
1000639c:	b0800015 	stw	r2,0(r22)
100063a0:	b4000115 	stw	r16,4(r22)
100063a4:	d8c02015 	stw	r3,128(sp)
100063a8:	dc401f15 	stw	r17,124(sp)
100063ac:	008001c4 	movi	r2,7
100063b0:	147ebd0e 	bge	r2,r17,10005ea8 <__alt_data_end+0xf8005ea8>
100063b4:	d9002d17 	ldw	r4,180(sp)
100063b8:	d9801e04 	addi	r6,sp,120
100063bc:	b80b883a 	mov	r5,r23
100063c0:	000c5080 	call	1000c508 <__sprint_r>
100063c4:	103b5c1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100063c8:	d8c02017 	ldw	r3,128(sp)
100063cc:	dc401f17 	ldw	r17,124(sp)
100063d0:	dd800404 	addi	r22,sp,16
100063d4:	003eb506 	br	10005eac <__alt_data_end+0xf8005eac>
100063d8:	d9002d17 	ldw	r4,180(sp)
100063dc:	d9801e04 	addi	r6,sp,120
100063e0:	b80b883a 	mov	r5,r23
100063e4:	000c5080 	call	1000c508 <__sprint_r>
100063e8:	103b531e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100063ec:	d8c02017 	ldw	r3,128(sp)
100063f0:	dc401f17 	ldw	r17,124(sp)
100063f4:	da000404 	addi	r8,sp,16
100063f8:	003e8d06 	br	10005e30 <__alt_data_end+0xf8005e30>
100063fc:	d9002d17 	ldw	r4,180(sp)
10006400:	d9801e04 	addi	r6,sp,120
10006404:	b80b883a 	mov	r5,r23
10006408:	000c5080 	call	1000c508 <__sprint_r>
1000640c:	103b4a1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006410:	d8c02017 	ldw	r3,128(sp)
10006414:	dc401f17 	ldw	r17,124(sp)
10006418:	dd800404 	addi	r22,sp,16
1000641c:	003e8f06 	br	10005e5c <__alt_data_end+0xf8005e5c>
10006420:	0027883a 	mov	r19,zero
10006424:	003f4a06 	br	10006150 <__alt_data_end+0xf8006150>
10006428:	d9002d17 	ldw	r4,180(sp)
1000642c:	d9801e04 	addi	r6,sp,120
10006430:	b80b883a 	mov	r5,r23
10006434:	000c5080 	call	1000c508 <__sprint_r>
10006438:	103b3f1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
1000643c:	d8c02017 	ldw	r3,128(sp)
10006440:	da000404 	addi	r8,sp,16
10006444:	003c7b06 	br	10005634 <__alt_data_end+0xf8005634>
10006448:	d9402a17 	ldw	r5,168(sp)
1000644c:	04e7c83a 	sub	r19,zero,r19
10006450:	07000b44 	movi	fp,45
10006454:	9804c03a 	cmpne	r2,r19,zero
10006458:	05adc83a 	sub	r22,zero,r22
1000645c:	df002785 	stb	fp,158(sp)
10006460:	b0adc83a 	sub	r22,r22,r2
10006464:	28017b16 	blt	r5,zero,10006a54 <___vfprintf_internal_r+0x1d2c>
10006468:	00bfdfc4 	movi	r2,-129
1000646c:	90a4703a 	and	r18,r18,r2
10006470:	003b8906 	br	10005298 <__alt_data_end+0xf8005298>
10006474:	d9003617 	ldw	r4,216(sp)
10006478:	d9403817 	ldw	r5,224(sp)
1000647c:	da003d15 	stw	r8,244(sp)
10006480:	000c12c0 	call	1000c12c <__fpclassifyd>
10006484:	da003d17 	ldw	r8,244(sp)
10006488:	1000f026 	beq	r2,zero,1000684c <___vfprintf_internal_r+0x1b24>
1000648c:	d9002a17 	ldw	r4,168(sp)
10006490:	05bff7c4 	movi	r22,-33
10006494:	00bfffc4 	movi	r2,-1
10006498:	8dac703a 	and	r22,r17,r22
1000649c:	20820026 	beq	r4,r2,10006ca0 <___vfprintf_internal_r+0x1f78>
100064a0:	008011c4 	movi	r2,71
100064a4:	b081f726 	beq	r22,r2,10006c84 <___vfprintf_internal_r+0x1f5c>
100064a8:	d9003817 	ldw	r4,224(sp)
100064ac:	90c04014 	ori	r3,r18,256
100064b0:	d8c02c15 	stw	r3,176(sp)
100064b4:	20021516 	blt	r4,zero,10006d0c <___vfprintf_internal_r+0x1fe4>
100064b8:	dcc03817 	ldw	r19,224(sp)
100064bc:	d8002905 	stb	zero,164(sp)
100064c0:	00801984 	movi	r2,102
100064c4:	8881f926 	beq	r17,r2,10006cac <___vfprintf_internal_r+0x1f84>
100064c8:	00801184 	movi	r2,70
100064cc:	88821c26 	beq	r17,r2,10006d40 <___vfprintf_internal_r+0x2018>
100064d0:	00801144 	movi	r2,69
100064d4:	b081ef26 	beq	r22,r2,10006c94 <___vfprintf_internal_r+0x1f6c>
100064d8:	d8c02a17 	ldw	r3,168(sp)
100064dc:	d8802104 	addi	r2,sp,132
100064e0:	d8800315 	stw	r2,12(sp)
100064e4:	d9403617 	ldw	r5,216(sp)
100064e8:	d8802504 	addi	r2,sp,148
100064ec:	d9002d17 	ldw	r4,180(sp)
100064f0:	d8800215 	stw	r2,8(sp)
100064f4:	d8802604 	addi	r2,sp,152
100064f8:	d8c00015 	stw	r3,0(sp)
100064fc:	d8800115 	stw	r2,4(sp)
10006500:	01c00084 	movi	r7,2
10006504:	980d883a 	mov	r6,r19
10006508:	d8c03c15 	stw	r3,240(sp)
1000650c:	da003d15 	stw	r8,244(sp)
10006510:	00074580 	call	10007458 <_dtoa_r>
10006514:	1021883a 	mov	r16,r2
10006518:	008019c4 	movi	r2,103
1000651c:	d8c03c17 	ldw	r3,240(sp)
10006520:	da003d17 	ldw	r8,244(sp)
10006524:	88817126 	beq	r17,r2,10006aec <___vfprintf_internal_r+0x1dc4>
10006528:	008011c4 	movi	r2,71
1000652c:	88829126 	beq	r17,r2,10006f74 <___vfprintf_internal_r+0x224c>
10006530:	80f9883a 	add	fp,r16,r3
10006534:	d9003617 	ldw	r4,216(sp)
10006538:	000d883a 	mov	r6,zero
1000653c:	000f883a 	mov	r7,zero
10006540:	980b883a 	mov	r5,r19
10006544:	da003d15 	stw	r8,244(sp)
10006548:	00104400 	call	10010440 <__eqdf2>
1000654c:	da003d17 	ldw	r8,244(sp)
10006550:	10018d26 	beq	r2,zero,10006b88 <___vfprintf_internal_r+0x1e60>
10006554:	d8802117 	ldw	r2,132(sp)
10006558:	1700062e 	bgeu	r2,fp,10006574 <___vfprintf_internal_r+0x184c>
1000655c:	01000c04 	movi	r4,48
10006560:	10c00044 	addi	r3,r2,1
10006564:	d8c02115 	stw	r3,132(sp)
10006568:	11000005 	stb	r4,0(r2)
1000656c:	d8802117 	ldw	r2,132(sp)
10006570:	173ffb36 	bltu	r2,fp,10006560 <__alt_data_end+0xf8006560>
10006574:	1405c83a 	sub	r2,r2,r16
10006578:	d8803315 	stw	r2,204(sp)
1000657c:	008011c4 	movi	r2,71
10006580:	b0817626 	beq	r22,r2,10006b5c <___vfprintf_internal_r+0x1e34>
10006584:	00801944 	movi	r2,101
10006588:	1442800e 	bge	r2,r17,10006f8c <___vfprintf_internal_r+0x2264>
1000658c:	d8c02617 	ldw	r3,152(sp)
10006590:	00801984 	movi	r2,102
10006594:	d8c03215 	stw	r3,200(sp)
10006598:	8881fe26 	beq	r17,r2,10006d94 <___vfprintf_internal_r+0x206c>
1000659c:	d8c03217 	ldw	r3,200(sp)
100065a0:	d9003317 	ldw	r4,204(sp)
100065a4:	1901dd16 	blt	r3,r4,10006d1c <___vfprintf_internal_r+0x1ff4>
100065a8:	9480004c 	andi	r18,r18,1
100065ac:	90022b1e 	bne	r18,zero,10006e5c <___vfprintf_internal_r+0x2134>
100065b0:	1805883a 	mov	r2,r3
100065b4:	18028316 	blt	r3,zero,10006fc4 <___vfprintf_internal_r+0x229c>
100065b8:	d8c03217 	ldw	r3,200(sp)
100065bc:	044019c4 	movi	r17,103
100065c0:	d8c02b15 	stw	r3,172(sp)
100065c4:	df002907 	ldb	fp,164(sp)
100065c8:	e001531e 	bne	fp,zero,10006b18 <___vfprintf_internal_r+0x1df0>
100065cc:	df002783 	ldbu	fp,158(sp)
100065d0:	d8802915 	stw	r2,164(sp)
100065d4:	dc802c17 	ldw	r18,176(sp)
100065d8:	d8002a15 	stw	zero,168(sp)
100065dc:	003baf06 	br	1000549c <__alt_data_end+0xf800549c>
100065e0:	d8c02e17 	ldw	r3,184(sp)
100065e4:	d9002e17 	ldw	r4,184(sp)
100065e8:	d9402e17 	ldw	r5,184(sp)
100065ec:	18c00017 	ldw	r3,0(r3)
100065f0:	21000117 	ldw	r4,4(r4)
100065f4:	29400204 	addi	r5,r5,8
100065f8:	d8c03615 	stw	r3,216(sp)
100065fc:	d9003815 	stw	r4,224(sp)
10006600:	d9402e15 	stw	r5,184(sp)
10006604:	003b5006 	br	10005348 <__alt_data_end+0xf8005348>
10006608:	ac400007 	ldb	r17,0(r21)
1000660c:	003a2806 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10006610:	9080100c 	andi	r2,r18,64
10006614:	1000a826 	beq	r2,zero,100068b8 <___vfprintf_internal_r+0x1b90>
10006618:	d8c02e17 	ldw	r3,184(sp)
1000661c:	002d883a 	mov	r22,zero
10006620:	1cc0000b 	ldhu	r19,0(r3)
10006624:	18c00104 	addi	r3,r3,4
10006628:	d8c02e15 	stw	r3,184(sp)
1000662c:	003caf06 	br	100058ec <__alt_data_end+0xf80058ec>
10006630:	d9002e17 	ldw	r4,184(sp)
10006634:	d9402a17 	ldw	r5,168(sp)
10006638:	002d883a 	mov	r22,zero
1000663c:	20800104 	addi	r2,r4,4
10006640:	24c00017 	ldw	r19,0(r4)
10006644:	283ebb0e 	bge	r5,zero,10006134 <__alt_data_end+0xf8006134>
10006648:	003ef106 	br	10006210 <__alt_data_end+0xf8006210>
1000664c:	9080040c 	andi	r2,r18,16
10006650:	1000921e 	bne	r2,zero,1000689c <___vfprintf_internal_r+0x1b74>
10006654:	9480100c 	andi	r18,r18,64
10006658:	90013926 	beq	r18,zero,10006b40 <___vfprintf_internal_r+0x1e18>
1000665c:	d9402e17 	ldw	r5,184(sp)
10006660:	d8c02f17 	ldw	r3,188(sp)
10006664:	28800017 	ldw	r2,0(r5)
10006668:	29400104 	addi	r5,r5,4
1000666c:	d9402e15 	stw	r5,184(sp)
10006670:	10c0000d 	sth	r3,0(r2)
10006674:	0039e406 	br	10004e08 <__alt_data_end+0xf8004e08>
10006678:	9080100c 	andi	r2,r18,64
1000667c:	10008026 	beq	r2,zero,10006880 <___vfprintf_internal_r+0x1b58>
10006680:	d8802e17 	ldw	r2,184(sp)
10006684:	14c0000f 	ldh	r19,0(r2)
10006688:	10800104 	addi	r2,r2,4
1000668c:	d8802e15 	stw	r2,184(sp)
10006690:	982dd7fa 	srai	r22,r19,31
10006694:	b005883a 	mov	r2,r22
10006698:	003af706 	br	10005278 <__alt_data_end+0xf8005278>
1000669c:	9080100c 	andi	r2,r18,64
100066a0:	d8002785 	stb	zero,158(sp)
100066a4:	10008a1e 	bne	r2,zero,100068d0 <___vfprintf_internal_r+0x1ba8>
100066a8:	d9002e17 	ldw	r4,184(sp)
100066ac:	d9402a17 	ldw	r5,168(sp)
100066b0:	002d883a 	mov	r22,zero
100066b4:	20800104 	addi	r2,r4,4
100066b8:	24c00017 	ldw	r19,0(r4)
100066bc:	283e4b0e 	bge	r5,zero,10005fec <__alt_data_end+0xf8005fec>
100066c0:	9d86b03a 	or	r3,r19,r22
100066c4:	d8802e15 	stw	r2,184(sp)
100066c8:	183e4c1e 	bne	r3,zero,10005ffc <__alt_data_end+0xf8005ffc>
100066cc:	0039883a 	mov	fp,zero
100066d0:	0005883a 	mov	r2,zero
100066d4:	003d4006 	br	10005bd8 <__alt_data_end+0xf8005bd8>
100066d8:	01440074 	movhi	r5,4097
100066dc:	29530c84 	addi	r5,r5,19506
100066e0:	d9402c15 	stw	r5,176(sp)
100066e4:	d9402c17 	ldw	r5,176(sp)
100066e8:	1c47883a 	add	r3,r3,r17
100066ec:	10800044 	addi	r2,r2,1
100066f0:	41400015 	stw	r5,0(r8)
100066f4:	44400115 	stw	r17,4(r8)
100066f8:	d8c02015 	stw	r3,128(sp)
100066fc:	d8801f15 	stw	r2,124(sp)
10006700:	010001c4 	movi	r4,7
10006704:	20bec816 	blt	r4,r2,10006228 <__alt_data_end+0xf8006228>
10006708:	42000204 	addi	r8,r8,8
1000670c:	003ecd06 	br	10006244 <__alt_data_end+0xf8006244>
10006710:	d9002a17 	ldw	r4,168(sp)
10006714:	d8002785 	stb	zero,158(sp)
10006718:	203d2d16 	blt	r4,zero,10005bd0 <__alt_data_end+0xf8005bd0>
1000671c:	00bfdfc4 	movi	r2,-129
10006720:	90a4703a 	and	r18,r18,r2
10006724:	003a6106 	br	100050ac <__alt_data_end+0xf80050ac>
10006728:	01040074 	movhi	r4,4097
1000672c:	21130c84 	addi	r4,r4,19506
10006730:	d9002c15 	stw	r4,176(sp)
10006734:	003bea06 	br	100056e0 <__alt_data_end+0xf80056e0>
10006738:	d9002d17 	ldw	r4,180(sp)
1000673c:	d9801e04 	addi	r6,sp,120
10006740:	b80b883a 	mov	r5,r23
10006744:	000c5080 	call	1000c508 <__sprint_r>
10006748:	103a7b1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
1000674c:	d8c02017 	ldw	r3,128(sp)
10006750:	da000404 	addi	r8,sp,16
10006754:	003d4106 	br	10005c5c <__alt_data_end+0xf8005c5c>
10006758:	d8801f17 	ldw	r2,124(sp)
1000675c:	01440074 	movhi	r5,4097
10006760:	01000044 	movi	r4,1
10006764:	18c00044 	addi	r3,r3,1
10006768:	10800044 	addi	r2,r2,1
1000676c:	29530c04 	addi	r5,r5,19504
10006770:	41000115 	stw	r4,4(r8)
10006774:	41400015 	stw	r5,0(r8)
10006778:	d8c02015 	stw	r3,128(sp)
1000677c:	d8801f15 	stw	r2,124(sp)
10006780:	010001c4 	movi	r4,7
10006784:	20805c16 	blt	r4,r2,100068f8 <___vfprintf_internal_r+0x1bd0>
10006788:	42000204 	addi	r8,r8,8
1000678c:	8800041e 	bne	r17,zero,100067a0 <___vfprintf_internal_r+0x1a78>
10006790:	d8803317 	ldw	r2,204(sp)
10006794:	1000021e 	bne	r2,zero,100067a0 <___vfprintf_internal_r+0x1a78>
10006798:	9080004c 	andi	r2,r18,1
1000679c:	103be726 	beq	r2,zero,1000573c <__alt_data_end+0xf800573c>
100067a0:	d9003717 	ldw	r4,220(sp)
100067a4:	d8801f17 	ldw	r2,124(sp)
100067a8:	d9403417 	ldw	r5,208(sp)
100067ac:	20c7883a 	add	r3,r4,r3
100067b0:	10800044 	addi	r2,r2,1
100067b4:	41000115 	stw	r4,4(r8)
100067b8:	41400015 	stw	r5,0(r8)
100067bc:	d8c02015 	stw	r3,128(sp)
100067c0:	d8801f15 	stw	r2,124(sp)
100067c4:	010001c4 	movi	r4,7
100067c8:	20812116 	blt	r4,r2,10006c50 <___vfprintf_internal_r+0x1f28>
100067cc:	42000204 	addi	r8,r8,8
100067d0:	0463c83a 	sub	r17,zero,r17
100067d4:	0440730e 	bge	zero,r17,100069a4 <___vfprintf_internal_r+0x1c7c>
100067d8:	05800404 	movi	r22,16
100067dc:	b440860e 	bge	r22,r17,100069f8 <___vfprintf_internal_r+0x1cd0>
100067e0:	01440074 	movhi	r5,4097
100067e4:	29530c84 	addi	r5,r5,19506
100067e8:	d9402c15 	stw	r5,176(sp)
100067ec:	070001c4 	movi	fp,7
100067f0:	dcc02d17 	ldw	r19,180(sp)
100067f4:	00000306 	br	10006804 <___vfprintf_internal_r+0x1adc>
100067f8:	42000204 	addi	r8,r8,8
100067fc:	8c7ffc04 	addi	r17,r17,-16
10006800:	b440800e 	bge	r22,r17,10006a04 <___vfprintf_internal_r+0x1cdc>
10006804:	18c00404 	addi	r3,r3,16
10006808:	10800044 	addi	r2,r2,1
1000680c:	45000015 	stw	r20,0(r8)
10006810:	45800115 	stw	r22,4(r8)
10006814:	d8c02015 	stw	r3,128(sp)
10006818:	d8801f15 	stw	r2,124(sp)
1000681c:	e0bff60e 	bge	fp,r2,100067f8 <__alt_data_end+0xf80067f8>
10006820:	d9801e04 	addi	r6,sp,120
10006824:	b80b883a 	mov	r5,r23
10006828:	9809883a 	mov	r4,r19
1000682c:	000c5080 	call	1000c508 <__sprint_r>
10006830:	103a411e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006834:	d8c02017 	ldw	r3,128(sp)
10006838:	d8801f17 	ldw	r2,124(sp)
1000683c:	da000404 	addi	r8,sp,16
10006840:	003fee06 	br	100067fc <__alt_data_end+0xf80067fc>
10006844:	00bfffc4 	movi	r2,-1
10006848:	003a3f06 	br	10005148 <__alt_data_end+0xf8005148>
1000684c:	008011c4 	movi	r2,71
10006850:	1440b816 	blt	r2,r17,10006b34 <___vfprintf_internal_r+0x1e0c>
10006854:	04040074 	movhi	r16,4097
10006858:	8412fe04 	addi	r16,r16,19448
1000685c:	00c000c4 	movi	r3,3
10006860:	00bfdfc4 	movi	r2,-129
10006864:	d8c02915 	stw	r3,164(sp)
10006868:	90a4703a 	and	r18,r18,r2
1000686c:	df002783 	ldbu	fp,158(sp)
10006870:	d8c02b15 	stw	r3,172(sp)
10006874:	d8002a15 	stw	zero,168(sp)
10006878:	d8003215 	stw	zero,200(sp)
1000687c:	003b0706 	br	1000549c <__alt_data_end+0xf800549c>
10006880:	d8c02e17 	ldw	r3,184(sp)
10006884:	1cc00017 	ldw	r19,0(r3)
10006888:	18c00104 	addi	r3,r3,4
1000688c:	d8c02e15 	stw	r3,184(sp)
10006890:	982dd7fa 	srai	r22,r19,31
10006894:	b005883a 	mov	r2,r22
10006898:	003a7706 	br	10005278 <__alt_data_end+0xf8005278>
1000689c:	d8c02e17 	ldw	r3,184(sp)
100068a0:	d9002f17 	ldw	r4,188(sp)
100068a4:	18800017 	ldw	r2,0(r3)
100068a8:	18c00104 	addi	r3,r3,4
100068ac:	d8c02e15 	stw	r3,184(sp)
100068b0:	11000015 	stw	r4,0(r2)
100068b4:	00395406 	br	10004e08 <__alt_data_end+0xf8004e08>
100068b8:	d9002e17 	ldw	r4,184(sp)
100068bc:	002d883a 	mov	r22,zero
100068c0:	24c00017 	ldw	r19,0(r4)
100068c4:	21000104 	addi	r4,r4,4
100068c8:	d9002e15 	stw	r4,184(sp)
100068cc:	003c0706 	br	100058ec <__alt_data_end+0xf80058ec>
100068d0:	d9402e17 	ldw	r5,184(sp)
100068d4:	d8c02a17 	ldw	r3,168(sp)
100068d8:	002d883a 	mov	r22,zero
100068dc:	28800104 	addi	r2,r5,4
100068e0:	2cc0000b 	ldhu	r19,0(r5)
100068e4:	183dc10e 	bge	r3,zero,10005fec <__alt_data_end+0xf8005fec>
100068e8:	003f7506 	br	100066c0 <__alt_data_end+0xf80066c0>
100068ec:	04040074 	movhi	r16,4097
100068f0:	8412fc04 	addi	r16,r16,19440
100068f4:	003aa706 	br	10005394 <__alt_data_end+0xf8005394>
100068f8:	d9002d17 	ldw	r4,180(sp)
100068fc:	d9801e04 	addi	r6,sp,120
10006900:	b80b883a 	mov	r5,r23
10006904:	000c5080 	call	1000c508 <__sprint_r>
10006908:	103a0b1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
1000690c:	dc402617 	ldw	r17,152(sp)
10006910:	d8c02017 	ldw	r3,128(sp)
10006914:	da000404 	addi	r8,sp,16
10006918:	003f9c06 	br	1000678c <__alt_data_end+0xf800678c>
1000691c:	ac400043 	ldbu	r17,1(r21)
10006920:	84000814 	ori	r16,r16,32
10006924:	ad400044 	addi	r21,r21,1
10006928:	8c403fcc 	andi	r17,r17,255
1000692c:	8c40201c 	xori	r17,r17,128
10006930:	8c7fe004 	addi	r17,r17,-128
10006934:	00395e06 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10006938:	d8c02e15 	stw	r3,184(sp)
1000693c:	0039883a 	mov	fp,zero
10006940:	003e3506 	br	10006218 <__alt_data_end+0xf8006218>
10006944:	d9002d17 	ldw	r4,180(sp)
10006948:	d9801e04 	addi	r6,sp,120
1000694c:	b80b883a 	mov	r5,r23
10006950:	000c5080 	call	1000c508 <__sprint_r>
10006954:	1039f81e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006958:	d8c02017 	ldw	r3,128(sp)
1000695c:	da000404 	addi	r8,sp,16
10006960:	003cd006 	br	10005ca4 <__alt_data_end+0xf8005ca4>
10006964:	8009883a 	mov	r4,r16
10006968:	df003d15 	stw	fp,244(sp)
1000696c:	0004c900 	call	10004c90 <strlen>
10006970:	d8802b15 	stw	r2,172(sp)
10006974:	da003d17 	ldw	r8,244(sp)
10006978:	103c200e 	bge	r2,zero,100059fc <__alt_data_end+0xf80059fc>
1000697c:	0005883a 	mov	r2,zero
10006980:	003c1e06 	br	100059fc <__alt_data_end+0xf80059fc>
10006984:	d9002d17 	ldw	r4,180(sp)
10006988:	d9801e04 	addi	r6,sp,120
1000698c:	b80b883a 	mov	r5,r23
10006990:	000c5080 	call	1000c508 <__sprint_r>
10006994:	1039e81e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006998:	d8c02017 	ldw	r3,128(sp)
1000699c:	d8801f17 	ldw	r2,124(sp)
100069a0:	da000404 	addi	r8,sp,16
100069a4:	d9403317 	ldw	r5,204(sp)
100069a8:	10800044 	addi	r2,r2,1
100069ac:	44000015 	stw	r16,0(r8)
100069b0:	28c7883a 	add	r3,r5,r3
100069b4:	003b5b06 	br	10005724 <__alt_data_end+0xf8005724>
100069b8:	01040074 	movhi	r4,4097
100069bc:	21131084 	addi	r4,r4,19522
100069c0:	d9003515 	stw	r4,212(sp)
100069c4:	003af206 	br	10005590 <__alt_data_end+0xf8005590>
100069c8:	013fffc4 	movi	r4,-1
100069cc:	003a0806 	br	100051f0 <__alt_data_end+0xf80051f0>
100069d0:	0023883a 	mov	r17,zero
100069d4:	003d9d06 	br	1000604c <__alt_data_end+0xf800604c>
100069d8:	d9002d17 	ldw	r4,180(sp)
100069dc:	d9801e04 	addi	r6,sp,120
100069e0:	b80b883a 	mov	r5,r23
100069e4:	000c5080 	call	1000c508 <__sprint_r>
100069e8:	1039d31e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
100069ec:	d8c02017 	ldw	r3,128(sp)
100069f0:	da000404 	addi	r8,sp,16
100069f4:	003d9406 	br	10006048 <__alt_data_end+0xf8006048>
100069f8:	01040074 	movhi	r4,4097
100069fc:	21130c84 	addi	r4,r4,19506
10006a00:	d9002c15 	stw	r4,176(sp)
10006a04:	d9002c17 	ldw	r4,176(sp)
10006a08:	1c47883a 	add	r3,r3,r17
10006a0c:	10800044 	addi	r2,r2,1
10006a10:	41000015 	stw	r4,0(r8)
10006a14:	44400115 	stw	r17,4(r8)
10006a18:	d8c02015 	stw	r3,128(sp)
10006a1c:	d8801f15 	stw	r2,124(sp)
10006a20:	010001c4 	movi	r4,7
10006a24:	20bfd716 	blt	r4,r2,10006984 <__alt_data_end+0xf8006984>
10006a28:	42000204 	addi	r8,r8,8
10006a2c:	003fdd06 	br	100069a4 <__alt_data_end+0xf80069a4>
10006a30:	d9002d17 	ldw	r4,180(sp)
10006a34:	d9801e04 	addi	r6,sp,120
10006a38:	b80b883a 	mov	r5,r23
10006a3c:	000c5080 	call	1000c508 <__sprint_r>
10006a40:	1039bd1e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006a44:	d8802617 	ldw	r2,152(sp)
10006a48:	d8c02017 	ldw	r3,128(sp)
10006a4c:	da000404 	addi	r8,sp,16
10006a50:	003e1006 	br	10006294 <__alt_data_end+0xf8006294>
10006a54:	00800044 	movi	r2,1
10006a58:	10803fcc 	andi	r2,r2,255
10006a5c:	00c00044 	movi	r3,1
10006a60:	10fa0d26 	beq	r2,r3,10005298 <__alt_data_end+0xf8005298>
10006a64:	00c00084 	movi	r3,2
10006a68:	10fbaf26 	beq	r2,r3,10005928 <__alt_data_end+0xf8005928>
10006a6c:	003a6d06 	br	10005424 <__alt_data_end+0xf8005424>
10006a70:	01040074 	movhi	r4,4097
10006a74:	21131084 	addi	r4,r4,19522
10006a78:	d9003515 	stw	r4,212(sp)
10006a7c:	003b5406 	br	100057d0 <__alt_data_end+0xf80057d0>
10006a80:	d8802a17 	ldw	r2,168(sp)
10006a84:	00c00184 	movi	r3,6
10006a88:	1880012e 	bgeu	r3,r2,10006a90 <___vfprintf_internal_r+0x1d68>
10006a8c:	1805883a 	mov	r2,r3
10006a90:	d8802b15 	stw	r2,172(sp)
10006a94:	1000ef16 	blt	r2,zero,10006e54 <___vfprintf_internal_r+0x212c>
10006a98:	04040074 	movhi	r16,4097
10006a9c:	d8802915 	stw	r2,164(sp)
10006aa0:	dcc02e15 	stw	r19,184(sp)
10006aa4:	d8002a15 	stw	zero,168(sp)
10006aa8:	d8003215 	stw	zero,200(sp)
10006aac:	84130a04 	addi	r16,r16,19496
10006ab0:	0039883a 	mov	fp,zero
10006ab4:	003a8006 	br	100054b8 <__alt_data_end+0xf80054b8>
10006ab8:	0021883a 	mov	r16,zero
10006abc:	003e0706 	br	100062dc <__alt_data_end+0xf80062dc>
10006ac0:	d9002d17 	ldw	r4,180(sp)
10006ac4:	d9801e04 	addi	r6,sp,120
10006ac8:	b80b883a 	mov	r5,r23
10006acc:	000c5080 	call	1000c508 <__sprint_r>
10006ad0:	1039991e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006ad4:	d8802617 	ldw	r2,152(sp)
10006ad8:	d9403317 	ldw	r5,204(sp)
10006adc:	d8c02017 	ldw	r3,128(sp)
10006ae0:	da000404 	addi	r8,sp,16
10006ae4:	2885c83a 	sub	r2,r5,r2
10006ae8:	003dfb06 	br	100062d8 <__alt_data_end+0xf80062d8>
10006aec:	9080004c 	andi	r2,r18,1
10006af0:	103e8f1e 	bne	r2,zero,10006530 <__alt_data_end+0xf8006530>
10006af4:	d8802117 	ldw	r2,132(sp)
10006af8:	003e9e06 	br	10006574 <__alt_data_end+0xf8006574>
10006afc:	1025883a 	mov	r18,r2
10006b00:	0039883a 	mov	fp,zero
10006b04:	00800084 	movi	r2,2
10006b08:	003fd306 	br	10006a58 <__alt_data_end+0xf8006a58>
10006b0c:	07000b44 	movi	fp,45
10006b10:	df002785 	stb	fp,158(sp)
10006b14:	003a1b06 	br	10005384 <__alt_data_end+0xf8005384>
10006b18:	00c00b44 	movi	r3,45
10006b1c:	d8c02785 	stb	r3,158(sp)
10006b20:	d8802915 	stw	r2,164(sp)
10006b24:	dc802c17 	ldw	r18,176(sp)
10006b28:	d8002a15 	stw	zero,168(sp)
10006b2c:	07000b44 	movi	fp,45
10006b30:	003a5e06 	br	100054ac <__alt_data_end+0xf80054ac>
10006b34:	04040074 	movhi	r16,4097
10006b38:	8412ff04 	addi	r16,r16,19452
10006b3c:	003f4706 	br	1000685c <__alt_data_end+0xf800685c>
10006b40:	d9002e17 	ldw	r4,184(sp)
10006b44:	d9402f17 	ldw	r5,188(sp)
10006b48:	20800017 	ldw	r2,0(r4)
10006b4c:	21000104 	addi	r4,r4,4
10006b50:	d9002e15 	stw	r4,184(sp)
10006b54:	11400015 	stw	r5,0(r2)
10006b58:	0038ab06 	br	10004e08 <__alt_data_end+0xf8004e08>
10006b5c:	dd802617 	ldw	r22,152(sp)
10006b60:	00bfff44 	movi	r2,-3
10006b64:	b0801c16 	blt	r22,r2,10006bd8 <___vfprintf_internal_r+0x1eb0>
10006b68:	d9402a17 	ldw	r5,168(sp)
10006b6c:	2d801a16 	blt	r5,r22,10006bd8 <___vfprintf_internal_r+0x1eb0>
10006b70:	dd803215 	stw	r22,200(sp)
10006b74:	003e8906 	br	1000659c <__alt_data_end+0xf800659c>
10006b78:	01040074 	movhi	r4,4097
10006b7c:	21130c84 	addi	r4,r4,19506
10006b80:	d9002c15 	stw	r4,176(sp)
10006b84:	003c9106 	br	10005dcc <__alt_data_end+0xf8005dcc>
10006b88:	e005883a 	mov	r2,fp
10006b8c:	003e7906 	br	10006574 <__alt_data_end+0xf8006574>
10006b90:	d9002a17 	ldw	r4,168(sp)
10006b94:	df002783 	ldbu	fp,158(sp)
10006b98:	dcc02e15 	stw	r19,184(sp)
10006b9c:	d9002915 	stw	r4,164(sp)
10006ba0:	d9002b15 	stw	r4,172(sp)
10006ba4:	d8002a15 	stw	zero,168(sp)
10006ba8:	d8003215 	stw	zero,200(sp)
10006bac:	003a3b06 	br	1000549c <__alt_data_end+0xf800549c>
10006bb0:	9080004c 	andi	r2,r18,1
10006bb4:	0039883a 	mov	fp,zero
10006bb8:	10000426 	beq	r2,zero,10006bcc <___vfprintf_internal_r+0x1ea4>
10006bbc:	00800c04 	movi	r2,48
10006bc0:	dc001dc4 	addi	r16,sp,119
10006bc4:	d8801dc5 	stb	r2,119(sp)
10006bc8:	003b6406 	br	1000595c <__alt_data_end+0xf800595c>
10006bcc:	d8002b15 	stw	zero,172(sp)
10006bd0:	dc001e04 	addi	r16,sp,120
10006bd4:	003a2b06 	br	10005484 <__alt_data_end+0xf8005484>
10006bd8:	8c7fff84 	addi	r17,r17,-2
10006bdc:	b5bfffc4 	addi	r22,r22,-1
10006be0:	dd802615 	stw	r22,152(sp)
10006be4:	dc4022c5 	stb	r17,139(sp)
10006be8:	b000bf16 	blt	r22,zero,10006ee8 <___vfprintf_internal_r+0x21c0>
10006bec:	00800ac4 	movi	r2,43
10006bf0:	d8802305 	stb	r2,140(sp)
10006bf4:	00800244 	movi	r2,9
10006bf8:	15807016 	blt	r2,r22,10006dbc <___vfprintf_internal_r+0x2094>
10006bfc:	00800c04 	movi	r2,48
10006c00:	b5800c04 	addi	r22,r22,48
10006c04:	d8802345 	stb	r2,141(sp)
10006c08:	dd802385 	stb	r22,142(sp)
10006c0c:	d88023c4 	addi	r2,sp,143
10006c10:	df0022c4 	addi	fp,sp,139
10006c14:	d8c03317 	ldw	r3,204(sp)
10006c18:	1739c83a 	sub	fp,r2,fp
10006c1c:	d9003317 	ldw	r4,204(sp)
10006c20:	e0c7883a 	add	r3,fp,r3
10006c24:	df003a15 	stw	fp,232(sp)
10006c28:	d8c02b15 	stw	r3,172(sp)
10006c2c:	00800044 	movi	r2,1
10006c30:	1100b30e 	bge	r2,r4,10006f00 <___vfprintf_internal_r+0x21d8>
10006c34:	d8c02b17 	ldw	r3,172(sp)
10006c38:	18c00044 	addi	r3,r3,1
10006c3c:	d8c02b15 	stw	r3,172(sp)
10006c40:	1805883a 	mov	r2,r3
10006c44:	1800ac16 	blt	r3,zero,10006ef8 <___vfprintf_internal_r+0x21d0>
10006c48:	d8003215 	stw	zero,200(sp)
10006c4c:	003e5d06 	br	100065c4 <__alt_data_end+0xf80065c4>
10006c50:	d9002d17 	ldw	r4,180(sp)
10006c54:	d9801e04 	addi	r6,sp,120
10006c58:	b80b883a 	mov	r5,r23
10006c5c:	000c5080 	call	1000c508 <__sprint_r>
10006c60:	1039351e 	bne	r2,zero,10005138 <__alt_data_end+0xf8005138>
10006c64:	dc402617 	ldw	r17,152(sp)
10006c68:	d8c02017 	ldw	r3,128(sp)
10006c6c:	d8801f17 	ldw	r2,124(sp)
10006c70:	da000404 	addi	r8,sp,16
10006c74:	003ed606 	br	100067d0 <__alt_data_end+0xf80067d0>
10006c78:	182b883a 	mov	r21,r3
10006c7c:	d8002a15 	stw	zero,168(sp)
10006c80:	00388c06 	br	10004eb4 <__alt_data_end+0xf8004eb4>
10006c84:	d8802a17 	ldw	r2,168(sp)
10006c88:	103e071e 	bne	r2,zero,100064a8 <__alt_data_end+0xf80064a8>
10006c8c:	dc002a15 	stw	r16,168(sp)
10006c90:	003e0506 	br	100064a8 <__alt_data_end+0xf80064a8>
10006c94:	d9002a17 	ldw	r4,168(sp)
10006c98:	20c00044 	addi	r3,r4,1
10006c9c:	003e0f06 	br	100064dc <__alt_data_end+0xf80064dc>
10006ca0:	01400184 	movi	r5,6
10006ca4:	d9402a15 	stw	r5,168(sp)
10006ca8:	003dff06 	br	100064a8 <__alt_data_end+0xf80064a8>
10006cac:	d8802104 	addi	r2,sp,132
10006cb0:	d8800315 	stw	r2,12(sp)
10006cb4:	d8802504 	addi	r2,sp,148
10006cb8:	d8800215 	stw	r2,8(sp)
10006cbc:	d8802604 	addi	r2,sp,152
10006cc0:	d8800115 	stw	r2,4(sp)
10006cc4:	d8802a17 	ldw	r2,168(sp)
10006cc8:	d9403617 	ldw	r5,216(sp)
10006ccc:	d9002d17 	ldw	r4,180(sp)
10006cd0:	d8800015 	stw	r2,0(sp)
10006cd4:	01c000c4 	movi	r7,3
10006cd8:	980d883a 	mov	r6,r19
10006cdc:	da003d15 	stw	r8,244(sp)
10006ce0:	00074580 	call	10007458 <_dtoa_r>
10006ce4:	d8c02a17 	ldw	r3,168(sp)
10006ce8:	da003d17 	ldw	r8,244(sp)
10006cec:	1021883a 	mov	r16,r2
10006cf0:	10f9883a 	add	fp,r2,r3
10006cf4:	81000007 	ldb	r4,0(r16)
10006cf8:	00800c04 	movi	r2,48
10006cfc:	20805e26 	beq	r4,r2,10006e78 <___vfprintf_internal_r+0x2150>
10006d00:	d8c02617 	ldw	r3,152(sp)
10006d04:	e0f9883a 	add	fp,fp,r3
10006d08:	003e0a06 	br	10006534 <__alt_data_end+0xf8006534>
10006d0c:	00c00b44 	movi	r3,45
10006d10:	24e0003c 	xorhi	r19,r4,32768
10006d14:	d8c02905 	stb	r3,164(sp)
10006d18:	003de906 	br	100064c0 <__alt_data_end+0xf80064c0>
10006d1c:	d8c03217 	ldw	r3,200(sp)
10006d20:	00c07a0e 	bge	zero,r3,10006f0c <___vfprintf_internal_r+0x21e4>
10006d24:	00800044 	movi	r2,1
10006d28:	d9003317 	ldw	r4,204(sp)
10006d2c:	1105883a 	add	r2,r2,r4
10006d30:	d8802b15 	stw	r2,172(sp)
10006d34:	10004e16 	blt	r2,zero,10006e70 <___vfprintf_internal_r+0x2148>
10006d38:	044019c4 	movi	r17,103
10006d3c:	003e2106 	br	100065c4 <__alt_data_end+0xf80065c4>
10006d40:	d9002a17 	ldw	r4,168(sp)
10006d44:	d8802104 	addi	r2,sp,132
10006d48:	d8800315 	stw	r2,12(sp)
10006d4c:	d9000015 	stw	r4,0(sp)
10006d50:	d8802504 	addi	r2,sp,148
10006d54:	d9403617 	ldw	r5,216(sp)
10006d58:	d9002d17 	ldw	r4,180(sp)
10006d5c:	d8800215 	stw	r2,8(sp)
10006d60:	d8802604 	addi	r2,sp,152
10006d64:	d8800115 	stw	r2,4(sp)
10006d68:	01c000c4 	movi	r7,3
10006d6c:	980d883a 	mov	r6,r19
10006d70:	da003d15 	stw	r8,244(sp)
10006d74:	00074580 	call	10007458 <_dtoa_r>
10006d78:	d8c02a17 	ldw	r3,168(sp)
10006d7c:	da003d17 	ldw	r8,244(sp)
10006d80:	1021883a 	mov	r16,r2
10006d84:	00801184 	movi	r2,70
10006d88:	80f9883a 	add	fp,r16,r3
10006d8c:	88bfd926 	beq	r17,r2,10006cf4 <__alt_data_end+0xf8006cf4>
10006d90:	003de806 	br	10006534 <__alt_data_end+0xf8006534>
10006d94:	d9002a17 	ldw	r4,168(sp)
10006d98:	00c04d0e 	bge	zero,r3,10006ed0 <___vfprintf_internal_r+0x21a8>
10006d9c:	2000441e 	bne	r4,zero,10006eb0 <___vfprintf_internal_r+0x2188>
10006da0:	9480004c 	andi	r18,r18,1
10006da4:	9000421e 	bne	r18,zero,10006eb0 <___vfprintf_internal_r+0x2188>
10006da8:	1805883a 	mov	r2,r3
10006dac:	18006f16 	blt	r3,zero,10006f6c <___vfprintf_internal_r+0x2244>
10006db0:	d8c03217 	ldw	r3,200(sp)
10006db4:	d8c02b15 	stw	r3,172(sp)
10006db8:	003e0206 	br	100065c4 <__alt_data_end+0xf80065c4>
10006dbc:	df0022c4 	addi	fp,sp,139
10006dc0:	dc002a15 	stw	r16,168(sp)
10006dc4:	4027883a 	mov	r19,r8
10006dc8:	e021883a 	mov	r16,fp
10006dcc:	b009883a 	mov	r4,r22
10006dd0:	01400284 	movi	r5,10
10006dd4:	000f0940 	call	1000f094 <__modsi3>
10006dd8:	10800c04 	addi	r2,r2,48
10006ddc:	843fffc4 	addi	r16,r16,-1
10006de0:	b009883a 	mov	r4,r22
10006de4:	01400284 	movi	r5,10
10006de8:	80800005 	stb	r2,0(r16)
10006dec:	000f0100 	call	1000f010 <__divsi3>
10006df0:	102d883a 	mov	r22,r2
10006df4:	00800244 	movi	r2,9
10006df8:	15bff416 	blt	r2,r22,10006dcc <__alt_data_end+0xf8006dcc>
10006dfc:	9811883a 	mov	r8,r19
10006e00:	b0800c04 	addi	r2,r22,48
10006e04:	8027883a 	mov	r19,r16
10006e08:	997fffc4 	addi	r5,r19,-1
10006e0c:	98bfffc5 	stb	r2,-1(r19)
10006e10:	dc002a17 	ldw	r16,168(sp)
10006e14:	2f006d2e 	bgeu	r5,fp,10006fcc <___vfprintf_internal_r+0x22a4>
10006e18:	d9c02384 	addi	r7,sp,142
10006e1c:	3ccfc83a 	sub	r7,r7,r19
10006e20:	d9002344 	addi	r4,sp,141
10006e24:	e1cf883a 	add	r7,fp,r7
10006e28:	00000106 	br	10006e30 <___vfprintf_internal_r+0x2108>
10006e2c:	28800003 	ldbu	r2,0(r5)
10006e30:	20800005 	stb	r2,0(r4)
10006e34:	21000044 	addi	r4,r4,1
10006e38:	29400044 	addi	r5,r5,1
10006e3c:	393ffb1e 	bne	r7,r4,10006e2c <__alt_data_end+0xf8006e2c>
10006e40:	d8802304 	addi	r2,sp,140
10006e44:	14c5c83a 	sub	r2,r2,r19
10006e48:	d8c02344 	addi	r3,sp,141
10006e4c:	1885883a 	add	r2,r3,r2
10006e50:	003f7006 	br	10006c14 <__alt_data_end+0xf8006c14>
10006e54:	0005883a 	mov	r2,zero
10006e58:	003f0f06 	br	10006a98 <__alt_data_end+0xf8006a98>
10006e5c:	d8c03217 	ldw	r3,200(sp)
10006e60:	18c00044 	addi	r3,r3,1
10006e64:	d8c02b15 	stw	r3,172(sp)
10006e68:	1805883a 	mov	r2,r3
10006e6c:	183fb20e 	bge	r3,zero,10006d38 <__alt_data_end+0xf8006d38>
10006e70:	0005883a 	mov	r2,zero
10006e74:	003fb006 	br	10006d38 <__alt_data_end+0xf8006d38>
10006e78:	d9003617 	ldw	r4,216(sp)
10006e7c:	000d883a 	mov	r6,zero
10006e80:	000f883a 	mov	r7,zero
10006e84:	980b883a 	mov	r5,r19
10006e88:	d8c03c15 	stw	r3,240(sp)
10006e8c:	da003d15 	stw	r8,244(sp)
10006e90:	00104400 	call	10010440 <__eqdf2>
10006e94:	d8c03c17 	ldw	r3,240(sp)
10006e98:	da003d17 	ldw	r8,244(sp)
10006e9c:	103f9826 	beq	r2,zero,10006d00 <__alt_data_end+0xf8006d00>
10006ea0:	00800044 	movi	r2,1
10006ea4:	10c7c83a 	sub	r3,r2,r3
10006ea8:	d8c02615 	stw	r3,152(sp)
10006eac:	003f9506 	br	10006d04 <__alt_data_end+0xf8006d04>
10006eb0:	d9002a17 	ldw	r4,168(sp)
10006eb4:	d8c03217 	ldw	r3,200(sp)
10006eb8:	20800044 	addi	r2,r4,1
10006ebc:	1885883a 	add	r2,r3,r2
10006ec0:	d8802b15 	stw	r2,172(sp)
10006ec4:	103dbf0e 	bge	r2,zero,100065c4 <__alt_data_end+0xf80065c4>
10006ec8:	0005883a 	mov	r2,zero
10006ecc:	003dbd06 	br	100065c4 <__alt_data_end+0xf80065c4>
10006ed0:	2000201e 	bne	r4,zero,10006f54 <___vfprintf_internal_r+0x222c>
10006ed4:	9480004c 	andi	r18,r18,1
10006ed8:	90001e1e 	bne	r18,zero,10006f54 <___vfprintf_internal_r+0x222c>
10006edc:	00800044 	movi	r2,1
10006ee0:	d8802b15 	stw	r2,172(sp)
10006ee4:	003db706 	br	100065c4 <__alt_data_end+0xf80065c4>
10006ee8:	00800b44 	movi	r2,45
10006eec:	05adc83a 	sub	r22,zero,r22
10006ef0:	d8802305 	stb	r2,140(sp)
10006ef4:	003f3f06 	br	10006bf4 <__alt_data_end+0xf8006bf4>
10006ef8:	0005883a 	mov	r2,zero
10006efc:	003f5206 	br	10006c48 <__alt_data_end+0xf8006c48>
10006f00:	90a4703a 	and	r18,r18,r2
10006f04:	903f4e26 	beq	r18,zero,10006c40 <__alt_data_end+0xf8006c40>
10006f08:	003f4a06 	br	10006c34 <__alt_data_end+0xf8006c34>
10006f0c:	00800084 	movi	r2,2
10006f10:	10c5c83a 	sub	r2,r2,r3
10006f14:	003f8406 	br	10006d28 <__alt_data_end+0xf8006d28>
10006f18:	d9402e17 	ldw	r5,184(sp)
10006f1c:	d9002e17 	ldw	r4,184(sp)
10006f20:	ac400043 	ldbu	r17,1(r21)
10006f24:	29400017 	ldw	r5,0(r5)
10006f28:	20800104 	addi	r2,r4,4
10006f2c:	d8802e15 	stw	r2,184(sp)
10006f30:	d9402a15 	stw	r5,168(sp)
10006f34:	182b883a 	mov	r21,r3
10006f38:	283e7b0e 	bge	r5,zero,10006928 <__alt_data_end+0xf8006928>
10006f3c:	8c403fcc 	andi	r17,r17,255
10006f40:	017fffc4 	movi	r5,-1
10006f44:	8c40201c 	xori	r17,r17,128
10006f48:	d9402a15 	stw	r5,168(sp)
10006f4c:	8c7fe004 	addi	r17,r17,-128
10006f50:	0037d706 	br	10004eb0 <__alt_data_end+0xf8004eb0>
10006f54:	d8c02a17 	ldw	r3,168(sp)
10006f58:	18c00084 	addi	r3,r3,2
10006f5c:	d8c02b15 	stw	r3,172(sp)
10006f60:	1805883a 	mov	r2,r3
10006f64:	183d970e 	bge	r3,zero,100065c4 <__alt_data_end+0xf80065c4>
10006f68:	003fd706 	br	10006ec8 <__alt_data_end+0xf8006ec8>
10006f6c:	0005883a 	mov	r2,zero
10006f70:	003f8f06 	br	10006db0 <__alt_data_end+0xf8006db0>
10006f74:	9080004c 	andi	r2,r18,1
10006f78:	103f821e 	bne	r2,zero,10006d84 <__alt_data_end+0xf8006d84>
10006f7c:	d8802117 	ldw	r2,132(sp)
10006f80:	1405c83a 	sub	r2,r2,r16
10006f84:	d8803315 	stw	r2,204(sp)
10006f88:	b47ef426 	beq	r22,r17,10006b5c <__alt_data_end+0xf8006b5c>
10006f8c:	dd802617 	ldw	r22,152(sp)
10006f90:	003f1206 	br	10006bdc <__alt_data_end+0xf8006bdc>
10006f94:	d8c02b03 	ldbu	r3,172(sp)
10006f98:	d8c02785 	stb	r3,158(sp)
10006f9c:	0038df06 	br	1000531c <__alt_data_end+0xf800531c>
10006fa0:	d8c02b03 	ldbu	r3,172(sp)
10006fa4:	d8c02785 	stb	r3,158(sp)
10006fa8:	0038aa06 	br	10005254 <__alt_data_end+0xf8005254>
10006fac:	d8c02b03 	ldbu	r3,172(sp)
10006fb0:	d8c02785 	stb	r3,158(sp)
10006fb4:	003a4306 	br	100058c4 <__alt_data_end+0xf80058c4>
10006fb8:	d8c02b03 	ldbu	r3,172(sp)
10006fbc:	d8c02785 	stb	r3,158(sp)
10006fc0:	003af506 	br	10005b98 <__alt_data_end+0xf8005b98>
10006fc4:	0005883a 	mov	r2,zero
10006fc8:	003d7b06 	br	100065b8 <__alt_data_end+0xf80065b8>
10006fcc:	d8802344 	addi	r2,sp,141
10006fd0:	003f1006 	br	10006c14 <__alt_data_end+0xf8006c14>
10006fd4:	d8c02b03 	ldbu	r3,172(sp)
10006fd8:	d8c02785 	stb	r3,158(sp)
10006fdc:	0038fd06 	br	100053d4 <__alt_data_end+0xf80053d4>
10006fe0:	d8c02b03 	ldbu	r3,172(sp)
10006fe4:	d8c02785 	stb	r3,158(sp)
10006fe8:	003a9706 	br	10005a48 <__alt_data_end+0xf8005a48>
10006fec:	d8c02b03 	ldbu	r3,172(sp)
10006ff0:	d8c02785 	stb	r3,158(sp)
10006ff4:	003a1806 	br	10005858 <__alt_data_end+0xf8005858>
10006ff8:	d8c02b03 	ldbu	r3,172(sp)
10006ffc:	d8c02785 	stb	r3,158(sp)
10007000:	003abe06 	br	10005afc <__alt_data_end+0xf8005afc>

10007004 <__vfprintf_internal>:
10007004:	00840074 	movhi	r2,4097
10007008:	109e1a04 	addi	r2,r2,30824
1000700c:	300f883a 	mov	r7,r6
10007010:	280d883a 	mov	r6,r5
10007014:	200b883a 	mov	r5,r4
10007018:	11000017 	ldw	r4,0(r2)
1000701c:	0004d281 	jmpi	10004d28 <___vfprintf_internal_r>

10007020 <__sbprintf>:
10007020:	2880030b 	ldhu	r2,12(r5)
10007024:	2ac01917 	ldw	r11,100(r5)
10007028:	2a80038b 	ldhu	r10,14(r5)
1000702c:	2a400717 	ldw	r9,28(r5)
10007030:	2a000917 	ldw	r8,36(r5)
10007034:	defee204 	addi	sp,sp,-1144
10007038:	00c10004 	movi	r3,1024
1000703c:	dc011a15 	stw	r16,1128(sp)
10007040:	10bfff4c 	andi	r2,r2,65533
10007044:	2821883a 	mov	r16,r5
10007048:	d8cb883a 	add	r5,sp,r3
1000704c:	dc811c15 	stw	r18,1136(sp)
10007050:	dc411b15 	stw	r17,1132(sp)
10007054:	dfc11d15 	stw	ra,1140(sp)
10007058:	2025883a 	mov	r18,r4
1000705c:	d881030d 	sth	r2,1036(sp)
10007060:	dac11915 	stw	r11,1124(sp)
10007064:	da81038d 	sth	r10,1038(sp)
10007068:	da410715 	stw	r9,1052(sp)
1000706c:	da010915 	stw	r8,1060(sp)
10007070:	dec10015 	stw	sp,1024(sp)
10007074:	dec10415 	stw	sp,1040(sp)
10007078:	d8c10215 	stw	r3,1032(sp)
1000707c:	d8c10515 	stw	r3,1044(sp)
10007080:	d8010615 	stw	zero,1048(sp)
10007084:	0004d280 	call	10004d28 <___vfprintf_internal_r>
10007088:	1023883a 	mov	r17,r2
1000708c:	10000416 	blt	r2,zero,100070a0 <__sbprintf+0x80>
10007090:	d9410004 	addi	r5,sp,1024
10007094:	9009883a 	mov	r4,r18
10007098:	0008cfc0 	call	10008cfc <_fflush_r>
1000709c:	10000d1e 	bne	r2,zero,100070d4 <__sbprintf+0xb4>
100070a0:	d881030b 	ldhu	r2,1036(sp)
100070a4:	1080100c 	andi	r2,r2,64
100070a8:	10000326 	beq	r2,zero,100070b8 <__sbprintf+0x98>
100070ac:	8080030b 	ldhu	r2,12(r16)
100070b0:	10801014 	ori	r2,r2,64
100070b4:	8080030d 	sth	r2,12(r16)
100070b8:	8805883a 	mov	r2,r17
100070bc:	dfc11d17 	ldw	ra,1140(sp)
100070c0:	dc811c17 	ldw	r18,1136(sp)
100070c4:	dc411b17 	ldw	r17,1132(sp)
100070c8:	dc011a17 	ldw	r16,1128(sp)
100070cc:	dec11e04 	addi	sp,sp,1144
100070d0:	f800283a 	ret
100070d4:	047fffc4 	movi	r17,-1
100070d8:	003ff106 	br	100070a0 <__alt_data_end+0xf80070a0>

100070dc <__swsetup_r>:
100070dc:	00840074 	movhi	r2,4097
100070e0:	defffd04 	addi	sp,sp,-12
100070e4:	109e1a04 	addi	r2,r2,30824
100070e8:	dc400115 	stw	r17,4(sp)
100070ec:	2023883a 	mov	r17,r4
100070f0:	11000017 	ldw	r4,0(r2)
100070f4:	dc000015 	stw	r16,0(sp)
100070f8:	dfc00215 	stw	ra,8(sp)
100070fc:	2821883a 	mov	r16,r5
10007100:	20000226 	beq	r4,zero,1000710c <__swsetup_r+0x30>
10007104:	20800e17 	ldw	r2,56(r4)
10007108:	10003126 	beq	r2,zero,100071d0 <__swsetup_r+0xf4>
1000710c:	8080030b 	ldhu	r2,12(r16)
10007110:	10c0020c 	andi	r3,r2,8
10007114:	1009883a 	mov	r4,r2
10007118:	18000f26 	beq	r3,zero,10007158 <__swsetup_r+0x7c>
1000711c:	80c00417 	ldw	r3,16(r16)
10007120:	18001526 	beq	r3,zero,10007178 <__swsetup_r+0x9c>
10007124:	1100004c 	andi	r4,r2,1
10007128:	20001c1e 	bne	r4,zero,1000719c <__swsetup_r+0xc0>
1000712c:	1080008c 	andi	r2,r2,2
10007130:	1000291e 	bne	r2,zero,100071d8 <__swsetup_r+0xfc>
10007134:	80800517 	ldw	r2,20(r16)
10007138:	80800215 	stw	r2,8(r16)
1000713c:	18001c26 	beq	r3,zero,100071b0 <__swsetup_r+0xd4>
10007140:	0005883a 	mov	r2,zero
10007144:	dfc00217 	ldw	ra,8(sp)
10007148:	dc400117 	ldw	r17,4(sp)
1000714c:	dc000017 	ldw	r16,0(sp)
10007150:	dec00304 	addi	sp,sp,12
10007154:	f800283a 	ret
10007158:	2080040c 	andi	r2,r4,16
1000715c:	10002e26 	beq	r2,zero,10007218 <__swsetup_r+0x13c>
10007160:	2080010c 	andi	r2,r4,4
10007164:	10001e1e 	bne	r2,zero,100071e0 <__swsetup_r+0x104>
10007168:	80c00417 	ldw	r3,16(r16)
1000716c:	20800214 	ori	r2,r4,8
10007170:	8080030d 	sth	r2,12(r16)
10007174:	183feb1e 	bne	r3,zero,10007124 <__alt_data_end+0xf8007124>
10007178:	1100a00c 	andi	r4,r2,640
1000717c:	01408004 	movi	r5,512
10007180:	217fe826 	beq	r4,r5,10007124 <__alt_data_end+0xf8007124>
10007184:	800b883a 	mov	r5,r16
10007188:	8809883a 	mov	r4,r17
1000718c:	0009c980 	call	10009c98 <__smakebuf_r>
10007190:	8080030b 	ldhu	r2,12(r16)
10007194:	80c00417 	ldw	r3,16(r16)
10007198:	003fe206 	br	10007124 <__alt_data_end+0xf8007124>
1000719c:	80800517 	ldw	r2,20(r16)
100071a0:	80000215 	stw	zero,8(r16)
100071a4:	0085c83a 	sub	r2,zero,r2
100071a8:	80800615 	stw	r2,24(r16)
100071ac:	183fe41e 	bne	r3,zero,10007140 <__alt_data_end+0xf8007140>
100071b0:	80c0030b 	ldhu	r3,12(r16)
100071b4:	0005883a 	mov	r2,zero
100071b8:	1900200c 	andi	r4,r3,128
100071bc:	203fe126 	beq	r4,zero,10007144 <__alt_data_end+0xf8007144>
100071c0:	18c01014 	ori	r3,r3,64
100071c4:	80c0030d 	sth	r3,12(r16)
100071c8:	00bfffc4 	movi	r2,-1
100071cc:	003fdd06 	br	10007144 <__alt_data_end+0xf8007144>
100071d0:	00090e80 	call	100090e8 <__sinit>
100071d4:	003fcd06 	br	1000710c <__alt_data_end+0xf800710c>
100071d8:	0005883a 	mov	r2,zero
100071dc:	003fd606 	br	10007138 <__alt_data_end+0xf8007138>
100071e0:	81400c17 	ldw	r5,48(r16)
100071e4:	28000626 	beq	r5,zero,10007200 <__swsetup_r+0x124>
100071e8:	80801004 	addi	r2,r16,64
100071ec:	28800326 	beq	r5,r2,100071fc <__swsetup_r+0x120>
100071f0:	8809883a 	mov	r4,r17
100071f4:	000925c0 	call	1000925c <_free_r>
100071f8:	8100030b 	ldhu	r4,12(r16)
100071fc:	80000c15 	stw	zero,48(r16)
10007200:	80c00417 	ldw	r3,16(r16)
10007204:	00bff6c4 	movi	r2,-37
10007208:	1108703a 	and	r4,r2,r4
1000720c:	80000115 	stw	zero,4(r16)
10007210:	80c00015 	stw	r3,0(r16)
10007214:	003fd506 	br	1000716c <__alt_data_end+0xf800716c>
10007218:	00800244 	movi	r2,9
1000721c:	88800015 	stw	r2,0(r17)
10007220:	20801014 	ori	r2,r4,64
10007224:	8080030d 	sth	r2,12(r16)
10007228:	00bfffc4 	movi	r2,-1
1000722c:	003fc506 	br	10007144 <__alt_data_end+0xf8007144>

10007230 <quorem>:
10007230:	defff204 	addi	sp,sp,-56
10007234:	ddc00b15 	stw	r23,44(sp)
10007238:	20800417 	ldw	r2,16(r4)
1000723c:	2dc00417 	ldw	r23,16(r5)
10007240:	dfc00d15 	stw	ra,52(sp)
10007244:	df000c15 	stw	fp,48(sp)
10007248:	dd800a15 	stw	r22,40(sp)
1000724c:	dd400915 	stw	r21,36(sp)
10007250:	dd000815 	stw	r20,32(sp)
10007254:	dcc00715 	stw	r19,28(sp)
10007258:	dc800615 	stw	r18,24(sp)
1000725c:	dc400515 	stw	r17,20(sp)
10007260:	dc000415 	stw	r16,16(sp)
10007264:	15c07a16 	blt	r2,r23,10007450 <quorem+0x220>
10007268:	bdffffc4 	addi	r23,r23,-1
1000726c:	bde9883a 	add	r20,r23,r23
10007270:	28c00504 	addi	r3,r5,20
10007274:	a529883a 	add	r20,r20,r20
10007278:	1d39883a 	add	fp,r3,r20
1000727c:	24c00504 	addi	r19,r4,20
10007280:	d9400215 	stw	r5,8(sp)
10007284:	9d29883a 	add	r20,r19,r20
10007288:	e1400017 	ldw	r5,0(fp)
1000728c:	d9000015 	stw	r4,0(sp)
10007290:	a1000017 	ldw	r4,0(r20)
10007294:	29400044 	addi	r5,r5,1
10007298:	d8c00115 	stw	r3,4(sp)
1000729c:	dd000315 	stw	r20,12(sp)
100072a0:	000f1080 	call	1000f108 <__udivsi3>
100072a4:	1025883a 	mov	r18,r2
100072a8:	10003026 	beq	r2,zero,1000736c <quorem+0x13c>
100072ac:	dc400117 	ldw	r17,4(sp)
100072b0:	9829883a 	mov	r20,r19
100072b4:	002d883a 	mov	r22,zero
100072b8:	0021883a 	mov	r16,zero
100072bc:	8d400017 	ldw	r21,0(r17)
100072c0:	900b883a 	mov	r5,r18
100072c4:	8c400104 	addi	r17,r17,4
100072c8:	a93fffcc 	andi	r4,r21,65535
100072cc:	0004b280 	call	10004b28 <__mulsi3>
100072d0:	a808d43a 	srli	r4,r21,16
100072d4:	900b883a 	mov	r5,r18
100072d8:	15ad883a 	add	r22,r2,r22
100072dc:	0004b280 	call	10004b28 <__mulsi3>
100072e0:	a1000017 	ldw	r4,0(r20)
100072e4:	b00cd43a 	srli	r6,r22,16
100072e8:	b0ffffcc 	andi	r3,r22,65535
100072ec:	217fffcc 	andi	r5,r4,65535
100072f0:	2c21883a 	add	r16,r5,r16
100072f4:	80c7c83a 	sub	r3,r16,r3
100072f8:	2008d43a 	srli	r4,r4,16
100072fc:	1185883a 	add	r2,r2,r6
10007300:	1821d43a 	srai	r16,r3,16
10007304:	117fffcc 	andi	r5,r2,65535
10007308:	2149c83a 	sub	r4,r4,r5
1000730c:	2421883a 	add	r16,r4,r16
10007310:	8008943a 	slli	r4,r16,16
10007314:	18ffffcc 	andi	r3,r3,65535
10007318:	102cd43a 	srli	r22,r2,16
1000731c:	20c8b03a 	or	r4,r4,r3
10007320:	a1000015 	stw	r4,0(r20)
10007324:	8021d43a 	srai	r16,r16,16
10007328:	a5000104 	addi	r20,r20,4
1000732c:	e47fe32e 	bgeu	fp,r17,100072bc <__alt_data_end+0xf80072bc>
10007330:	d8c00317 	ldw	r3,12(sp)
10007334:	18800017 	ldw	r2,0(r3)
10007338:	10000c1e 	bne	r2,zero,1000736c <quorem+0x13c>
1000733c:	18bfff04 	addi	r2,r3,-4
10007340:	9880082e 	bgeu	r19,r2,10007364 <quorem+0x134>
10007344:	18ffff17 	ldw	r3,-4(r3)
10007348:	18000326 	beq	r3,zero,10007358 <quorem+0x128>
1000734c:	00000506 	br	10007364 <quorem+0x134>
10007350:	10c00017 	ldw	r3,0(r2)
10007354:	1800031e 	bne	r3,zero,10007364 <quorem+0x134>
10007358:	10bfff04 	addi	r2,r2,-4
1000735c:	bdffffc4 	addi	r23,r23,-1
10007360:	98bffb36 	bltu	r19,r2,10007350 <__alt_data_end+0xf8007350>
10007364:	d8c00017 	ldw	r3,0(sp)
10007368:	1dc00415 	stw	r23,16(r3)
1000736c:	d9400217 	ldw	r5,8(sp)
10007370:	d9000017 	ldw	r4,0(sp)
10007374:	000b4940 	call	1000b494 <__mcmp>
10007378:	10002816 	blt	r2,zero,1000741c <quorem+0x1ec>
1000737c:	dc400117 	ldw	r17,4(sp)
10007380:	94800044 	addi	r18,r18,1
10007384:	980d883a 	mov	r6,r19
10007388:	0007883a 	mov	r3,zero
1000738c:	31000017 	ldw	r4,0(r6)
10007390:	89400017 	ldw	r5,0(r17)
10007394:	31800104 	addi	r6,r6,4
10007398:	20bfffcc 	andi	r2,r4,65535
1000739c:	10c7883a 	add	r3,r2,r3
100073a0:	28bfffcc 	andi	r2,r5,65535
100073a4:	1885c83a 	sub	r2,r3,r2
100073a8:	280ad43a 	srli	r5,r5,16
100073ac:	2008d43a 	srli	r4,r4,16
100073b0:	1007d43a 	srai	r3,r2,16
100073b4:	10bfffcc 	andi	r2,r2,65535
100073b8:	2149c83a 	sub	r4,r4,r5
100073bc:	20c9883a 	add	r4,r4,r3
100073c0:	200a943a 	slli	r5,r4,16
100073c4:	8c400104 	addi	r17,r17,4
100073c8:	2007d43a 	srai	r3,r4,16
100073cc:	2884b03a 	or	r2,r5,r2
100073d0:	30bfff15 	stw	r2,-4(r6)
100073d4:	e47fed2e 	bgeu	fp,r17,1000738c <__alt_data_end+0xf800738c>
100073d8:	bdc5883a 	add	r2,r23,r23
100073dc:	1085883a 	add	r2,r2,r2
100073e0:	9887883a 	add	r3,r19,r2
100073e4:	18800017 	ldw	r2,0(r3)
100073e8:	10000c1e 	bne	r2,zero,1000741c <quorem+0x1ec>
100073ec:	18bfff04 	addi	r2,r3,-4
100073f0:	9880082e 	bgeu	r19,r2,10007414 <quorem+0x1e4>
100073f4:	18ffff17 	ldw	r3,-4(r3)
100073f8:	18000326 	beq	r3,zero,10007408 <quorem+0x1d8>
100073fc:	00000506 	br	10007414 <quorem+0x1e4>
10007400:	10c00017 	ldw	r3,0(r2)
10007404:	1800031e 	bne	r3,zero,10007414 <quorem+0x1e4>
10007408:	10bfff04 	addi	r2,r2,-4
1000740c:	bdffffc4 	addi	r23,r23,-1
10007410:	98bffb36 	bltu	r19,r2,10007400 <__alt_data_end+0xf8007400>
10007414:	d8c00017 	ldw	r3,0(sp)
10007418:	1dc00415 	stw	r23,16(r3)
1000741c:	9005883a 	mov	r2,r18
10007420:	dfc00d17 	ldw	ra,52(sp)
10007424:	df000c17 	ldw	fp,48(sp)
10007428:	ddc00b17 	ldw	r23,44(sp)
1000742c:	dd800a17 	ldw	r22,40(sp)
10007430:	dd400917 	ldw	r21,36(sp)
10007434:	dd000817 	ldw	r20,32(sp)
10007438:	dcc00717 	ldw	r19,28(sp)
1000743c:	dc800617 	ldw	r18,24(sp)
10007440:	dc400517 	ldw	r17,20(sp)
10007444:	dc000417 	ldw	r16,16(sp)
10007448:	dec00e04 	addi	sp,sp,56
1000744c:	f800283a 	ret
10007450:	0005883a 	mov	r2,zero
10007454:	003ff206 	br	10007420 <__alt_data_end+0xf8007420>

10007458 <_dtoa_r>:
10007458:	20801017 	ldw	r2,64(r4)
1000745c:	deffde04 	addi	sp,sp,-136
10007460:	df002015 	stw	fp,128(sp)
10007464:	dcc01b15 	stw	r19,108(sp)
10007468:	dc801a15 	stw	r18,104(sp)
1000746c:	dc401915 	stw	r17,100(sp)
10007470:	dc001815 	stw	r16,96(sp)
10007474:	dfc02115 	stw	ra,132(sp)
10007478:	ddc01f15 	stw	r23,124(sp)
1000747c:	dd801e15 	stw	r22,120(sp)
10007480:	dd401d15 	stw	r21,116(sp)
10007484:	dd001c15 	stw	r20,112(sp)
10007488:	d9c00315 	stw	r7,12(sp)
1000748c:	2039883a 	mov	fp,r4
10007490:	3023883a 	mov	r17,r6
10007494:	2825883a 	mov	r18,r5
10007498:	dc002417 	ldw	r16,144(sp)
1000749c:	3027883a 	mov	r19,r6
100074a0:	10000826 	beq	r2,zero,100074c4 <_dtoa_r+0x6c>
100074a4:	21801117 	ldw	r6,68(r4)
100074a8:	00c00044 	movi	r3,1
100074ac:	100b883a 	mov	r5,r2
100074b0:	1986983a 	sll	r3,r3,r6
100074b4:	11800115 	stw	r6,4(r2)
100074b8:	10c00215 	stw	r3,8(r2)
100074bc:	000abb80 	call	1000abb8 <_Bfree>
100074c0:	e0001015 	stw	zero,64(fp)
100074c4:	88002e16 	blt	r17,zero,10007580 <_dtoa_r+0x128>
100074c8:	80000015 	stw	zero,0(r16)
100074cc:	889ffc2c 	andhi	r2,r17,32752
100074d0:	00dffc34 	movhi	r3,32752
100074d4:	10c01c26 	beq	r2,r3,10007548 <_dtoa_r+0xf0>
100074d8:	000d883a 	mov	r6,zero
100074dc:	000f883a 	mov	r7,zero
100074e0:	9009883a 	mov	r4,r18
100074e4:	980b883a 	mov	r5,r19
100074e8:	00104400 	call	10010440 <__eqdf2>
100074ec:	10002b1e 	bne	r2,zero,1000759c <_dtoa_r+0x144>
100074f0:	d9c02317 	ldw	r7,140(sp)
100074f4:	00800044 	movi	r2,1
100074f8:	38800015 	stw	r2,0(r7)
100074fc:	d8802517 	ldw	r2,148(sp)
10007500:	10019e26 	beq	r2,zero,10007b7c <_dtoa_r+0x724>
10007504:	d8c02517 	ldw	r3,148(sp)
10007508:	00840074 	movhi	r2,4097
1000750c:	10930c44 	addi	r2,r2,19505
10007510:	18800015 	stw	r2,0(r3)
10007514:	10bfffc4 	addi	r2,r2,-1
10007518:	dfc02117 	ldw	ra,132(sp)
1000751c:	df002017 	ldw	fp,128(sp)
10007520:	ddc01f17 	ldw	r23,124(sp)
10007524:	dd801e17 	ldw	r22,120(sp)
10007528:	dd401d17 	ldw	r21,116(sp)
1000752c:	dd001c17 	ldw	r20,112(sp)
10007530:	dcc01b17 	ldw	r19,108(sp)
10007534:	dc801a17 	ldw	r18,104(sp)
10007538:	dc401917 	ldw	r17,100(sp)
1000753c:	dc001817 	ldw	r16,96(sp)
10007540:	dec02204 	addi	sp,sp,136
10007544:	f800283a 	ret
10007548:	d8c02317 	ldw	r3,140(sp)
1000754c:	0089c3c4 	movi	r2,9999
10007550:	18800015 	stw	r2,0(r3)
10007554:	90017726 	beq	r18,zero,10007b34 <_dtoa_r+0x6dc>
10007558:	00840074 	movhi	r2,4097
1000755c:	10931804 	addi	r2,r2,19552
10007560:	d9002517 	ldw	r4,148(sp)
10007564:	203fec26 	beq	r4,zero,10007518 <__alt_data_end+0xf8007518>
10007568:	10c000c7 	ldb	r3,3(r2)
1000756c:	1801781e 	bne	r3,zero,10007b50 <_dtoa_r+0x6f8>
10007570:	10c000c4 	addi	r3,r2,3
10007574:	d9802517 	ldw	r6,148(sp)
10007578:	30c00015 	stw	r3,0(r6)
1000757c:	003fe606 	br	10007518 <__alt_data_end+0xf8007518>
10007580:	04e00034 	movhi	r19,32768
10007584:	9cffffc4 	addi	r19,r19,-1
10007588:	00800044 	movi	r2,1
1000758c:	8ce6703a 	and	r19,r17,r19
10007590:	80800015 	stw	r2,0(r16)
10007594:	9823883a 	mov	r17,r19
10007598:	003fcc06 	br	100074cc <__alt_data_end+0xf80074cc>
1000759c:	d8800204 	addi	r2,sp,8
100075a0:	d8800015 	stw	r2,0(sp)
100075a4:	d9c00104 	addi	r7,sp,4
100075a8:	900b883a 	mov	r5,r18
100075ac:	980d883a 	mov	r6,r19
100075b0:	e009883a 	mov	r4,fp
100075b4:	8820d53a 	srli	r16,r17,20
100075b8:	000b8600 	call	1000b860 <__d2b>
100075bc:	d8800915 	stw	r2,36(sp)
100075c0:	8001651e 	bne	r16,zero,10007b58 <_dtoa_r+0x700>
100075c4:	dd800217 	ldw	r22,8(sp)
100075c8:	dc000117 	ldw	r16,4(sp)
100075cc:	00800804 	movi	r2,32
100075d0:	b421883a 	add	r16,r22,r16
100075d4:	80c10c84 	addi	r3,r16,1074
100075d8:	10c2d10e 	bge	r2,r3,10008120 <_dtoa_r+0xcc8>
100075dc:	00801004 	movi	r2,64
100075e0:	81010484 	addi	r4,r16,1042
100075e4:	10c7c83a 	sub	r3,r2,r3
100075e8:	9108d83a 	srl	r4,r18,r4
100075ec:	88e2983a 	sll	r17,r17,r3
100075f0:	2448b03a 	or	r4,r4,r17
100075f4:	001195c0 	call	1001195c <__floatunsidf>
100075f8:	017f8434 	movhi	r5,65040
100075fc:	01800044 	movi	r6,1
10007600:	1009883a 	mov	r4,r2
10007604:	194b883a 	add	r5,r3,r5
10007608:	843fffc4 	addi	r16,r16,-1
1000760c:	d9801115 	stw	r6,68(sp)
10007610:	000d883a 	mov	r6,zero
10007614:	01cffe34 	movhi	r7,16376
10007618:	0010f040 	call	10010f04 <__subdf3>
1000761c:	0198dbf4 	movhi	r6,25455
10007620:	01cff4f4 	movhi	r7,16339
10007624:	3190d844 	addi	r6,r6,17249
10007628:	39e1e9c4 	addi	r7,r7,-30809
1000762c:	1009883a 	mov	r4,r2
10007630:	180b883a 	mov	r5,r3
10007634:	00106980 	call	10010698 <__muldf3>
10007638:	01a2d874 	movhi	r6,35681
1000763c:	01cff1f4 	movhi	r7,16327
10007640:	31b22cc4 	addi	r6,r6,-14157
10007644:	39e28a04 	addi	r7,r7,-30168
10007648:	180b883a 	mov	r5,r3
1000764c:	1009883a 	mov	r4,r2
10007650:	000f1c40 	call	1000f1c4 <__adddf3>
10007654:	8009883a 	mov	r4,r16
10007658:	1029883a 	mov	r20,r2
1000765c:	1823883a 	mov	r17,r3
10007660:	00118800 	call	10011880 <__floatsidf>
10007664:	019427f4 	movhi	r6,20639
10007668:	01cff4f4 	movhi	r7,16339
1000766c:	319e7ec4 	addi	r6,r6,31227
10007670:	39d104c4 	addi	r7,r7,17427
10007674:	1009883a 	mov	r4,r2
10007678:	180b883a 	mov	r5,r3
1000767c:	00106980 	call	10010698 <__muldf3>
10007680:	100d883a 	mov	r6,r2
10007684:	180f883a 	mov	r7,r3
10007688:	a009883a 	mov	r4,r20
1000768c:	880b883a 	mov	r5,r17
10007690:	000f1c40 	call	1000f1c4 <__adddf3>
10007694:	1009883a 	mov	r4,r2
10007698:	180b883a 	mov	r5,r3
1000769c:	1029883a 	mov	r20,r2
100076a0:	1823883a 	mov	r17,r3
100076a4:	00118000 	call	10011800 <__fixdfsi>
100076a8:	000d883a 	mov	r6,zero
100076ac:	000f883a 	mov	r7,zero
100076b0:	a009883a 	mov	r4,r20
100076b4:	880b883a 	mov	r5,r17
100076b8:	d8800515 	stw	r2,20(sp)
100076bc:	00105a40 	call	100105a4 <__ledf2>
100076c0:	10028716 	blt	r2,zero,100080e0 <_dtoa_r+0xc88>
100076c4:	d8c00517 	ldw	r3,20(sp)
100076c8:	00800584 	movi	r2,22
100076cc:	10c27536 	bltu	r2,r3,100080a4 <_dtoa_r+0xc4c>
100076d0:	180490fa 	slli	r2,r3,3
100076d4:	00c40074 	movhi	r3,4097
100076d8:	18d33404 	addi	r3,r3,19664
100076dc:	1885883a 	add	r2,r3,r2
100076e0:	11000017 	ldw	r4,0(r2)
100076e4:	11400117 	ldw	r5,4(r2)
100076e8:	900d883a 	mov	r6,r18
100076ec:	980f883a 	mov	r7,r19
100076f0:	00104c80 	call	100104c8 <__gedf2>
100076f4:	00828d0e 	bge	zero,r2,1000812c <_dtoa_r+0xcd4>
100076f8:	d9000517 	ldw	r4,20(sp)
100076fc:	d8000e15 	stw	zero,56(sp)
10007700:	213fffc4 	addi	r4,r4,-1
10007704:	d9000515 	stw	r4,20(sp)
10007708:	b42dc83a 	sub	r22,r22,r16
1000770c:	b5bfffc4 	addi	r22,r22,-1
10007710:	b0026f16 	blt	r22,zero,100080d0 <_dtoa_r+0xc78>
10007714:	d8000815 	stw	zero,32(sp)
10007718:	d9c00517 	ldw	r7,20(sp)
1000771c:	38026416 	blt	r7,zero,100080b0 <_dtoa_r+0xc58>
10007720:	b1ed883a 	add	r22,r22,r7
10007724:	d9c00d15 	stw	r7,52(sp)
10007728:	d8000a15 	stw	zero,40(sp)
1000772c:	d9800317 	ldw	r6,12(sp)
10007730:	00800244 	movi	r2,9
10007734:	11811436 	bltu	r2,r6,10007b88 <_dtoa_r+0x730>
10007738:	00800144 	movi	r2,5
1000773c:	1184e10e 	bge	r2,r6,10008ac4 <_dtoa_r+0x166c>
10007740:	31bfff04 	addi	r6,r6,-4
10007744:	d9800315 	stw	r6,12(sp)
10007748:	0023883a 	mov	r17,zero
1000774c:	d9800317 	ldw	r6,12(sp)
10007750:	008000c4 	movi	r2,3
10007754:	30836726 	beq	r6,r2,100084f4 <_dtoa_r+0x109c>
10007758:	1183410e 	bge	r2,r6,10008460 <_dtoa_r+0x1008>
1000775c:	d9c00317 	ldw	r7,12(sp)
10007760:	00800104 	movi	r2,4
10007764:	38827c26 	beq	r7,r2,10008158 <_dtoa_r+0xd00>
10007768:	00800144 	movi	r2,5
1000776c:	3884c41e 	bne	r7,r2,10008a80 <_dtoa_r+0x1628>
10007770:	00800044 	movi	r2,1
10007774:	d8800b15 	stw	r2,44(sp)
10007778:	d8c00517 	ldw	r3,20(sp)
1000777c:	d9002217 	ldw	r4,136(sp)
10007780:	1907883a 	add	r3,r3,r4
10007784:	19800044 	addi	r6,r3,1
10007788:	d8c00c15 	stw	r3,48(sp)
1000778c:	d9800615 	stw	r6,24(sp)
10007790:	0183a40e 	bge	zero,r6,10008624 <_dtoa_r+0x11cc>
10007794:	d9800617 	ldw	r6,24(sp)
10007798:	3021883a 	mov	r16,r6
1000779c:	e0001115 	stw	zero,68(fp)
100077a0:	008005c4 	movi	r2,23
100077a4:	1184c92e 	bgeu	r2,r6,10008acc <_dtoa_r+0x1674>
100077a8:	00c00044 	movi	r3,1
100077ac:	00800104 	movi	r2,4
100077b0:	1085883a 	add	r2,r2,r2
100077b4:	11000504 	addi	r4,r2,20
100077b8:	180b883a 	mov	r5,r3
100077bc:	18c00044 	addi	r3,r3,1
100077c0:	313ffb2e 	bgeu	r6,r4,100077b0 <__alt_data_end+0xf80077b0>
100077c4:	e1401115 	stw	r5,68(fp)
100077c8:	e009883a 	mov	r4,fp
100077cc:	000ab100 	call	1000ab10 <_Balloc>
100077d0:	d8800715 	stw	r2,28(sp)
100077d4:	e0801015 	stw	r2,64(fp)
100077d8:	00800384 	movi	r2,14
100077dc:	1400f736 	bltu	r2,r16,10007bbc <_dtoa_r+0x764>
100077e0:	8800f626 	beq	r17,zero,10007bbc <_dtoa_r+0x764>
100077e4:	d9c00517 	ldw	r7,20(sp)
100077e8:	01c39a0e 	bge	zero,r7,10008654 <_dtoa_r+0x11fc>
100077ec:	388003cc 	andi	r2,r7,15
100077f0:	100490fa 	slli	r2,r2,3
100077f4:	382bd13a 	srai	r21,r7,4
100077f8:	00c40074 	movhi	r3,4097
100077fc:	18d33404 	addi	r3,r3,19664
10007800:	1885883a 	add	r2,r3,r2
10007804:	a8c0040c 	andi	r3,r21,16
10007808:	12400017 	ldw	r9,0(r2)
1000780c:	12000117 	ldw	r8,4(r2)
10007810:	18037926 	beq	r3,zero,100085f8 <_dtoa_r+0x11a0>
10007814:	00840074 	movhi	r2,4097
10007818:	10932a04 	addi	r2,r2,19624
1000781c:	11800817 	ldw	r6,32(r2)
10007820:	11c00917 	ldw	r7,36(r2)
10007824:	9009883a 	mov	r4,r18
10007828:	980b883a 	mov	r5,r19
1000782c:	da001715 	stw	r8,92(sp)
10007830:	da401615 	stw	r9,88(sp)
10007834:	000fa700 	call	1000fa70 <__divdf3>
10007838:	da001717 	ldw	r8,92(sp)
1000783c:	da401617 	ldw	r9,88(sp)
10007840:	ad4003cc 	andi	r21,r21,15
10007844:	040000c4 	movi	r16,3
10007848:	1023883a 	mov	r17,r2
1000784c:	1829883a 	mov	r20,r3
10007850:	a8001126 	beq	r21,zero,10007898 <_dtoa_r+0x440>
10007854:	05c40074 	movhi	r23,4097
10007858:	bdd32a04 	addi	r23,r23,19624
1000785c:	4805883a 	mov	r2,r9
10007860:	4007883a 	mov	r3,r8
10007864:	a980004c 	andi	r6,r21,1
10007868:	1009883a 	mov	r4,r2
1000786c:	a82bd07a 	srai	r21,r21,1
10007870:	180b883a 	mov	r5,r3
10007874:	30000426 	beq	r6,zero,10007888 <_dtoa_r+0x430>
10007878:	b9800017 	ldw	r6,0(r23)
1000787c:	b9c00117 	ldw	r7,4(r23)
10007880:	84000044 	addi	r16,r16,1
10007884:	00106980 	call	10010698 <__muldf3>
10007888:	bdc00204 	addi	r23,r23,8
1000788c:	a83ff51e 	bne	r21,zero,10007864 <__alt_data_end+0xf8007864>
10007890:	1013883a 	mov	r9,r2
10007894:	1811883a 	mov	r8,r3
10007898:	480d883a 	mov	r6,r9
1000789c:	400f883a 	mov	r7,r8
100078a0:	8809883a 	mov	r4,r17
100078a4:	a00b883a 	mov	r5,r20
100078a8:	000fa700 	call	1000fa70 <__divdf3>
100078ac:	d8800f15 	stw	r2,60(sp)
100078b0:	d8c01015 	stw	r3,64(sp)
100078b4:	d8c00e17 	ldw	r3,56(sp)
100078b8:	18000626 	beq	r3,zero,100078d4 <_dtoa_r+0x47c>
100078bc:	d9000f17 	ldw	r4,60(sp)
100078c0:	d9401017 	ldw	r5,64(sp)
100078c4:	000d883a 	mov	r6,zero
100078c8:	01cffc34 	movhi	r7,16368
100078cc:	00105a40 	call	100105a4 <__ledf2>
100078d0:	10040b16 	blt	r2,zero,10008900 <_dtoa_r+0x14a8>
100078d4:	8009883a 	mov	r4,r16
100078d8:	00118800 	call	10011880 <__floatsidf>
100078dc:	d9800f17 	ldw	r6,60(sp)
100078e0:	d9c01017 	ldw	r7,64(sp)
100078e4:	1009883a 	mov	r4,r2
100078e8:	180b883a 	mov	r5,r3
100078ec:	00106980 	call	10010698 <__muldf3>
100078f0:	000d883a 	mov	r6,zero
100078f4:	01d00734 	movhi	r7,16412
100078f8:	1009883a 	mov	r4,r2
100078fc:	180b883a 	mov	r5,r3
10007900:	000f1c40 	call	1000f1c4 <__adddf3>
10007904:	1021883a 	mov	r16,r2
10007908:	d8800617 	ldw	r2,24(sp)
1000790c:	047f3034 	movhi	r17,64704
10007910:	1c63883a 	add	r17,r3,r17
10007914:	10031826 	beq	r2,zero,10008578 <_dtoa_r+0x1120>
10007918:	d8c00517 	ldw	r3,20(sp)
1000791c:	db000617 	ldw	r12,24(sp)
10007920:	d8c01315 	stw	r3,76(sp)
10007924:	d9000b17 	ldw	r4,44(sp)
10007928:	20038f26 	beq	r4,zero,10008768 <_dtoa_r+0x1310>
1000792c:	60bfffc4 	addi	r2,r12,-1
10007930:	100490fa 	slli	r2,r2,3
10007934:	00c40074 	movhi	r3,4097
10007938:	18d33404 	addi	r3,r3,19664
1000793c:	1885883a 	add	r2,r3,r2
10007940:	11800017 	ldw	r6,0(r2)
10007944:	11c00117 	ldw	r7,4(r2)
10007948:	d8800717 	ldw	r2,28(sp)
1000794c:	0009883a 	mov	r4,zero
10007950:	014ff834 	movhi	r5,16352
10007954:	db001615 	stw	r12,88(sp)
10007958:	15c00044 	addi	r23,r2,1
1000795c:	000fa700 	call	1000fa70 <__divdf3>
10007960:	800d883a 	mov	r6,r16
10007964:	880f883a 	mov	r7,r17
10007968:	1009883a 	mov	r4,r2
1000796c:	180b883a 	mov	r5,r3
10007970:	0010f040 	call	10010f04 <__subdf3>
10007974:	d9401017 	ldw	r5,64(sp)
10007978:	d9000f17 	ldw	r4,60(sp)
1000797c:	102b883a 	mov	r21,r2
10007980:	d8c01215 	stw	r3,72(sp)
10007984:	00118000 	call	10011800 <__fixdfsi>
10007988:	1009883a 	mov	r4,r2
1000798c:	1029883a 	mov	r20,r2
10007990:	00118800 	call	10011880 <__floatsidf>
10007994:	d9000f17 	ldw	r4,60(sp)
10007998:	d9401017 	ldw	r5,64(sp)
1000799c:	100d883a 	mov	r6,r2
100079a0:	180f883a 	mov	r7,r3
100079a4:	0010f040 	call	10010f04 <__subdf3>
100079a8:	1823883a 	mov	r17,r3
100079ac:	d8c00717 	ldw	r3,28(sp)
100079b0:	d9401217 	ldw	r5,72(sp)
100079b4:	a2000c04 	addi	r8,r20,48
100079b8:	1021883a 	mov	r16,r2
100079bc:	1a000005 	stb	r8,0(r3)
100079c0:	800d883a 	mov	r6,r16
100079c4:	880f883a 	mov	r7,r17
100079c8:	a809883a 	mov	r4,r21
100079cc:	4029883a 	mov	r20,r8
100079d0:	00104c80 	call	100104c8 <__gedf2>
100079d4:	00841d16 	blt	zero,r2,10008a4c <_dtoa_r+0x15f4>
100079d8:	800d883a 	mov	r6,r16
100079dc:	880f883a 	mov	r7,r17
100079e0:	0009883a 	mov	r4,zero
100079e4:	014ffc34 	movhi	r5,16368
100079e8:	0010f040 	call	10010f04 <__subdf3>
100079ec:	d9401217 	ldw	r5,72(sp)
100079f0:	100d883a 	mov	r6,r2
100079f4:	180f883a 	mov	r7,r3
100079f8:	a809883a 	mov	r4,r21
100079fc:	00104c80 	call	100104c8 <__gedf2>
10007a00:	db001617 	ldw	r12,88(sp)
10007a04:	00840e16 	blt	zero,r2,10008a40 <_dtoa_r+0x15e8>
10007a08:	00800044 	movi	r2,1
10007a0c:	13006b0e 	bge	r2,r12,10007bbc <_dtoa_r+0x764>
10007a10:	d9000717 	ldw	r4,28(sp)
10007a14:	dd800f15 	stw	r22,60(sp)
10007a18:	dcc01015 	stw	r19,64(sp)
10007a1c:	2319883a 	add	r12,r4,r12
10007a20:	dcc01217 	ldw	r19,72(sp)
10007a24:	602d883a 	mov	r22,r12
10007a28:	dc801215 	stw	r18,72(sp)
10007a2c:	b825883a 	mov	r18,r23
10007a30:	00000906 	br	10007a58 <_dtoa_r+0x600>
10007a34:	0010f040 	call	10010f04 <__subdf3>
10007a38:	a80d883a 	mov	r6,r21
10007a3c:	980f883a 	mov	r7,r19
10007a40:	1009883a 	mov	r4,r2
10007a44:	180b883a 	mov	r5,r3
10007a48:	00105a40 	call	100105a4 <__ledf2>
10007a4c:	1003e816 	blt	r2,zero,100089f0 <_dtoa_r+0x1598>
10007a50:	b825883a 	mov	r18,r23
10007a54:	bd83e926 	beq	r23,r22,100089fc <_dtoa_r+0x15a4>
10007a58:	a809883a 	mov	r4,r21
10007a5c:	980b883a 	mov	r5,r19
10007a60:	000d883a 	mov	r6,zero
10007a64:	01d00934 	movhi	r7,16420
10007a68:	00106980 	call	10010698 <__muldf3>
10007a6c:	000d883a 	mov	r6,zero
10007a70:	01d00934 	movhi	r7,16420
10007a74:	8009883a 	mov	r4,r16
10007a78:	880b883a 	mov	r5,r17
10007a7c:	102b883a 	mov	r21,r2
10007a80:	1827883a 	mov	r19,r3
10007a84:	00106980 	call	10010698 <__muldf3>
10007a88:	180b883a 	mov	r5,r3
10007a8c:	1009883a 	mov	r4,r2
10007a90:	1821883a 	mov	r16,r3
10007a94:	1023883a 	mov	r17,r2
10007a98:	00118000 	call	10011800 <__fixdfsi>
10007a9c:	1009883a 	mov	r4,r2
10007aa0:	1029883a 	mov	r20,r2
10007aa4:	00118800 	call	10011880 <__floatsidf>
10007aa8:	8809883a 	mov	r4,r17
10007aac:	800b883a 	mov	r5,r16
10007ab0:	100d883a 	mov	r6,r2
10007ab4:	180f883a 	mov	r7,r3
10007ab8:	0010f040 	call	10010f04 <__subdf3>
10007abc:	a5000c04 	addi	r20,r20,48
10007ac0:	a80d883a 	mov	r6,r21
10007ac4:	980f883a 	mov	r7,r19
10007ac8:	1009883a 	mov	r4,r2
10007acc:	180b883a 	mov	r5,r3
10007ad0:	95000005 	stb	r20,0(r18)
10007ad4:	1021883a 	mov	r16,r2
10007ad8:	1823883a 	mov	r17,r3
10007adc:	00105a40 	call	100105a4 <__ledf2>
10007ae0:	bdc00044 	addi	r23,r23,1
10007ae4:	800d883a 	mov	r6,r16
10007ae8:	880f883a 	mov	r7,r17
10007aec:	0009883a 	mov	r4,zero
10007af0:	014ffc34 	movhi	r5,16368
10007af4:	103fcf0e 	bge	r2,zero,10007a34 <__alt_data_end+0xf8007a34>
10007af8:	d8c01317 	ldw	r3,76(sp)
10007afc:	d8c00515 	stw	r3,20(sp)
10007b00:	d9400917 	ldw	r5,36(sp)
10007b04:	e009883a 	mov	r4,fp
10007b08:	000abb80 	call	1000abb8 <_Bfree>
10007b0c:	d9000517 	ldw	r4,20(sp)
10007b10:	d9802317 	ldw	r6,140(sp)
10007b14:	d9c02517 	ldw	r7,148(sp)
10007b18:	b8000005 	stb	zero,0(r23)
10007b1c:	20800044 	addi	r2,r4,1
10007b20:	30800015 	stw	r2,0(r6)
10007b24:	3802aa26 	beq	r7,zero,100085d0 <_dtoa_r+0x1178>
10007b28:	3dc00015 	stw	r23,0(r7)
10007b2c:	d8800717 	ldw	r2,28(sp)
10007b30:	003e7906 	br	10007518 <__alt_data_end+0xf8007518>
10007b34:	00800434 	movhi	r2,16
10007b38:	10bfffc4 	addi	r2,r2,-1
10007b3c:	88a2703a 	and	r17,r17,r2
10007b40:	883e851e 	bne	r17,zero,10007558 <__alt_data_end+0xf8007558>
10007b44:	00840074 	movhi	r2,4097
10007b48:	10931504 	addi	r2,r2,19540
10007b4c:	003e8406 	br	10007560 <__alt_data_end+0xf8007560>
10007b50:	10c00204 	addi	r3,r2,8
10007b54:	003e8706 	br	10007574 <__alt_data_end+0xf8007574>
10007b58:	01400434 	movhi	r5,16
10007b5c:	297fffc4 	addi	r5,r5,-1
10007b60:	994a703a 	and	r5,r19,r5
10007b64:	9009883a 	mov	r4,r18
10007b68:	843f0044 	addi	r16,r16,-1023
10007b6c:	294ffc34 	orhi	r5,r5,16368
10007b70:	dd800217 	ldw	r22,8(sp)
10007b74:	d8001115 	stw	zero,68(sp)
10007b78:	003ea506 	br	10007610 <__alt_data_end+0xf8007610>
10007b7c:	00840074 	movhi	r2,4097
10007b80:	10930c04 	addi	r2,r2,19504
10007b84:	003e6406 	br	10007518 <__alt_data_end+0xf8007518>
10007b88:	e0001115 	stw	zero,68(fp)
10007b8c:	000b883a 	mov	r5,zero
10007b90:	e009883a 	mov	r4,fp
10007b94:	000ab100 	call	1000ab10 <_Balloc>
10007b98:	01bfffc4 	movi	r6,-1
10007b9c:	01c00044 	movi	r7,1
10007ba0:	d8800715 	stw	r2,28(sp)
10007ba4:	d9800c15 	stw	r6,48(sp)
10007ba8:	e0801015 	stw	r2,64(fp)
10007bac:	d8000315 	stw	zero,12(sp)
10007bb0:	d9c00b15 	stw	r7,44(sp)
10007bb4:	d9800615 	stw	r6,24(sp)
10007bb8:	d8002215 	stw	zero,136(sp)
10007bbc:	d8800117 	ldw	r2,4(sp)
10007bc0:	10008916 	blt	r2,zero,10007de8 <_dtoa_r+0x990>
10007bc4:	d9000517 	ldw	r4,20(sp)
10007bc8:	00c00384 	movi	r3,14
10007bcc:	19008616 	blt	r3,r4,10007de8 <_dtoa_r+0x990>
10007bd0:	200490fa 	slli	r2,r4,3
10007bd4:	00c40074 	movhi	r3,4097
10007bd8:	d9802217 	ldw	r6,136(sp)
10007bdc:	18d33404 	addi	r3,r3,19664
10007be0:	1885883a 	add	r2,r3,r2
10007be4:	14000017 	ldw	r16,0(r2)
10007be8:	14400117 	ldw	r17,4(r2)
10007bec:	30016316 	blt	r6,zero,1000817c <_dtoa_r+0xd24>
10007bf0:	800d883a 	mov	r6,r16
10007bf4:	880f883a 	mov	r7,r17
10007bf8:	9009883a 	mov	r4,r18
10007bfc:	980b883a 	mov	r5,r19
10007c00:	000fa700 	call	1000fa70 <__divdf3>
10007c04:	180b883a 	mov	r5,r3
10007c08:	1009883a 	mov	r4,r2
10007c0c:	00118000 	call	10011800 <__fixdfsi>
10007c10:	1009883a 	mov	r4,r2
10007c14:	102b883a 	mov	r21,r2
10007c18:	00118800 	call	10011880 <__floatsidf>
10007c1c:	800d883a 	mov	r6,r16
10007c20:	880f883a 	mov	r7,r17
10007c24:	1009883a 	mov	r4,r2
10007c28:	180b883a 	mov	r5,r3
10007c2c:	00106980 	call	10010698 <__muldf3>
10007c30:	100d883a 	mov	r6,r2
10007c34:	180f883a 	mov	r7,r3
10007c38:	9009883a 	mov	r4,r18
10007c3c:	980b883a 	mov	r5,r19
10007c40:	0010f040 	call	10010f04 <__subdf3>
10007c44:	d9c00717 	ldw	r7,28(sp)
10007c48:	1009883a 	mov	r4,r2
10007c4c:	a8800c04 	addi	r2,r21,48
10007c50:	38800005 	stb	r2,0(r7)
10007c54:	3dc00044 	addi	r23,r7,1
10007c58:	d9c00617 	ldw	r7,24(sp)
10007c5c:	01800044 	movi	r6,1
10007c60:	180b883a 	mov	r5,r3
10007c64:	2005883a 	mov	r2,r4
10007c68:	39803826 	beq	r7,r6,10007d4c <_dtoa_r+0x8f4>
10007c6c:	000d883a 	mov	r6,zero
10007c70:	01d00934 	movhi	r7,16420
10007c74:	00106980 	call	10010698 <__muldf3>
10007c78:	000d883a 	mov	r6,zero
10007c7c:	000f883a 	mov	r7,zero
10007c80:	1009883a 	mov	r4,r2
10007c84:	180b883a 	mov	r5,r3
10007c88:	1025883a 	mov	r18,r2
10007c8c:	1827883a 	mov	r19,r3
10007c90:	00104400 	call	10010440 <__eqdf2>
10007c94:	103f9a26 	beq	r2,zero,10007b00 <__alt_data_end+0xf8007b00>
10007c98:	d9c00617 	ldw	r7,24(sp)
10007c9c:	d8c00717 	ldw	r3,28(sp)
10007ca0:	b829883a 	mov	r20,r23
10007ca4:	38bfffc4 	addi	r2,r7,-1
10007ca8:	18ad883a 	add	r22,r3,r2
10007cac:	00000a06 	br	10007cd8 <_dtoa_r+0x880>
10007cb0:	00106980 	call	10010698 <__muldf3>
10007cb4:	000d883a 	mov	r6,zero
10007cb8:	000f883a 	mov	r7,zero
10007cbc:	1009883a 	mov	r4,r2
10007cc0:	180b883a 	mov	r5,r3
10007cc4:	1025883a 	mov	r18,r2
10007cc8:	1827883a 	mov	r19,r3
10007ccc:	b829883a 	mov	r20,r23
10007cd0:	00104400 	call	10010440 <__eqdf2>
10007cd4:	103f8a26 	beq	r2,zero,10007b00 <__alt_data_end+0xf8007b00>
10007cd8:	800d883a 	mov	r6,r16
10007cdc:	880f883a 	mov	r7,r17
10007ce0:	9009883a 	mov	r4,r18
10007ce4:	980b883a 	mov	r5,r19
10007ce8:	000fa700 	call	1000fa70 <__divdf3>
10007cec:	180b883a 	mov	r5,r3
10007cf0:	1009883a 	mov	r4,r2
10007cf4:	00118000 	call	10011800 <__fixdfsi>
10007cf8:	1009883a 	mov	r4,r2
10007cfc:	102b883a 	mov	r21,r2
10007d00:	00118800 	call	10011880 <__floatsidf>
10007d04:	800d883a 	mov	r6,r16
10007d08:	880f883a 	mov	r7,r17
10007d0c:	1009883a 	mov	r4,r2
10007d10:	180b883a 	mov	r5,r3
10007d14:	00106980 	call	10010698 <__muldf3>
10007d18:	100d883a 	mov	r6,r2
10007d1c:	180f883a 	mov	r7,r3
10007d20:	9009883a 	mov	r4,r18
10007d24:	980b883a 	mov	r5,r19
10007d28:	0010f040 	call	10010f04 <__subdf3>
10007d2c:	aa000c04 	addi	r8,r21,48
10007d30:	a2000005 	stb	r8,0(r20)
10007d34:	000d883a 	mov	r6,zero
10007d38:	01d00934 	movhi	r7,16420
10007d3c:	1009883a 	mov	r4,r2
10007d40:	180b883a 	mov	r5,r3
10007d44:	a5c00044 	addi	r23,r20,1
10007d48:	b53fd91e 	bne	r22,r20,10007cb0 <__alt_data_end+0xf8007cb0>
10007d4c:	100d883a 	mov	r6,r2
10007d50:	180f883a 	mov	r7,r3
10007d54:	1009883a 	mov	r4,r2
10007d58:	180b883a 	mov	r5,r3
10007d5c:	000f1c40 	call	1000f1c4 <__adddf3>
10007d60:	100d883a 	mov	r6,r2
10007d64:	180f883a 	mov	r7,r3
10007d68:	8009883a 	mov	r4,r16
10007d6c:	880b883a 	mov	r5,r17
10007d70:	1027883a 	mov	r19,r2
10007d74:	1825883a 	mov	r18,r3
10007d78:	00105a40 	call	100105a4 <__ledf2>
10007d7c:	10000816 	blt	r2,zero,10007da0 <_dtoa_r+0x948>
10007d80:	980d883a 	mov	r6,r19
10007d84:	900f883a 	mov	r7,r18
10007d88:	8009883a 	mov	r4,r16
10007d8c:	880b883a 	mov	r5,r17
10007d90:	00104400 	call	10010440 <__eqdf2>
10007d94:	103f5a1e 	bne	r2,zero,10007b00 <__alt_data_end+0xf8007b00>
10007d98:	ad40004c 	andi	r21,r21,1
10007d9c:	a83f5826 	beq	r21,zero,10007b00 <__alt_data_end+0xf8007b00>
10007da0:	bd3fffc3 	ldbu	r20,-1(r23)
10007da4:	b8bfffc4 	addi	r2,r23,-1
10007da8:	1007883a 	mov	r3,r2
10007dac:	01400e44 	movi	r5,57
10007db0:	d9800717 	ldw	r6,28(sp)
10007db4:	00000506 	br	10007dcc <_dtoa_r+0x974>
10007db8:	18ffffc4 	addi	r3,r3,-1
10007dbc:	11824726 	beq	r2,r6,100086dc <_dtoa_r+0x1284>
10007dc0:	1d000003 	ldbu	r20,0(r3)
10007dc4:	102f883a 	mov	r23,r2
10007dc8:	10bfffc4 	addi	r2,r2,-1
10007dcc:	a1003fcc 	andi	r4,r20,255
10007dd0:	2100201c 	xori	r4,r4,128
10007dd4:	213fe004 	addi	r4,r4,-128
10007dd8:	217ff726 	beq	r4,r5,10007db8 <__alt_data_end+0xf8007db8>
10007ddc:	a2000044 	addi	r8,r20,1
10007de0:	12000005 	stb	r8,0(r2)
10007de4:	003f4606 	br	10007b00 <__alt_data_end+0xf8007b00>
10007de8:	d9000b17 	ldw	r4,44(sp)
10007dec:	2000c826 	beq	r4,zero,10008110 <_dtoa_r+0xcb8>
10007df0:	d9800317 	ldw	r6,12(sp)
10007df4:	00c00044 	movi	r3,1
10007df8:	1980f90e 	bge	r3,r6,100081e0 <_dtoa_r+0xd88>
10007dfc:	d8800617 	ldw	r2,24(sp)
10007e00:	d8c00a17 	ldw	r3,40(sp)
10007e04:	157fffc4 	addi	r21,r2,-1
10007e08:	1d41f316 	blt	r3,r21,100085d8 <_dtoa_r+0x1180>
10007e0c:	1d6bc83a 	sub	r21,r3,r21
10007e10:	d9c00617 	ldw	r7,24(sp)
10007e14:	3802aa16 	blt	r7,zero,100088c0 <_dtoa_r+0x1468>
10007e18:	dd000817 	ldw	r20,32(sp)
10007e1c:	d8800617 	ldw	r2,24(sp)
10007e20:	d8c00817 	ldw	r3,32(sp)
10007e24:	01400044 	movi	r5,1
10007e28:	e009883a 	mov	r4,fp
10007e2c:	1887883a 	add	r3,r3,r2
10007e30:	d8c00815 	stw	r3,32(sp)
10007e34:	b0ad883a 	add	r22,r22,r2
10007e38:	000af440 	call	1000af44 <__i2b>
10007e3c:	1023883a 	mov	r17,r2
10007e40:	a0000826 	beq	r20,zero,10007e64 <_dtoa_r+0xa0c>
10007e44:	0580070e 	bge	zero,r22,10007e64 <_dtoa_r+0xa0c>
10007e48:	a005883a 	mov	r2,r20
10007e4c:	b500b916 	blt	r22,r20,10008134 <_dtoa_r+0xcdc>
10007e50:	d9000817 	ldw	r4,32(sp)
10007e54:	a0a9c83a 	sub	r20,r20,r2
10007e58:	b0adc83a 	sub	r22,r22,r2
10007e5c:	2089c83a 	sub	r4,r4,r2
10007e60:	d9000815 	stw	r4,32(sp)
10007e64:	d9800a17 	ldw	r6,40(sp)
10007e68:	0181810e 	bge	zero,r6,10008470 <_dtoa_r+0x1018>
10007e6c:	d9c00b17 	ldw	r7,44(sp)
10007e70:	3800b326 	beq	r7,zero,10008140 <_dtoa_r+0xce8>
10007e74:	a800b226 	beq	r21,zero,10008140 <_dtoa_r+0xce8>
10007e78:	880b883a 	mov	r5,r17
10007e7c:	a80d883a 	mov	r6,r21
10007e80:	e009883a 	mov	r4,fp
10007e84:	000b20c0 	call	1000b20c <__pow5mult>
10007e88:	d9800917 	ldw	r6,36(sp)
10007e8c:	100b883a 	mov	r5,r2
10007e90:	e009883a 	mov	r4,fp
10007e94:	1023883a 	mov	r17,r2
10007e98:	000af800 	call	1000af80 <__multiply>
10007e9c:	1021883a 	mov	r16,r2
10007ea0:	d8800a17 	ldw	r2,40(sp)
10007ea4:	d9400917 	ldw	r5,36(sp)
10007ea8:	e009883a 	mov	r4,fp
10007eac:	1545c83a 	sub	r2,r2,r21
10007eb0:	d8800a15 	stw	r2,40(sp)
10007eb4:	000abb80 	call	1000abb8 <_Bfree>
10007eb8:	d8c00a17 	ldw	r3,40(sp)
10007ebc:	18009f1e 	bne	r3,zero,1000813c <_dtoa_r+0xce4>
10007ec0:	05c00044 	movi	r23,1
10007ec4:	e009883a 	mov	r4,fp
10007ec8:	b80b883a 	mov	r5,r23
10007ecc:	000af440 	call	1000af44 <__i2b>
10007ed0:	d9000d17 	ldw	r4,52(sp)
10007ed4:	102b883a 	mov	r21,r2
10007ed8:	2000ce26 	beq	r4,zero,10008214 <_dtoa_r+0xdbc>
10007edc:	200d883a 	mov	r6,r4
10007ee0:	100b883a 	mov	r5,r2
10007ee4:	e009883a 	mov	r4,fp
10007ee8:	000b20c0 	call	1000b20c <__pow5mult>
10007eec:	d9800317 	ldw	r6,12(sp)
10007ef0:	102b883a 	mov	r21,r2
10007ef4:	b981810e 	bge	r23,r6,100084fc <_dtoa_r+0x10a4>
10007ef8:	0027883a 	mov	r19,zero
10007efc:	a8800417 	ldw	r2,16(r21)
10007f00:	05c00804 	movi	r23,32
10007f04:	10800104 	addi	r2,r2,4
10007f08:	1085883a 	add	r2,r2,r2
10007f0c:	1085883a 	add	r2,r2,r2
10007f10:	a885883a 	add	r2,r21,r2
10007f14:	11000017 	ldw	r4,0(r2)
10007f18:	000ae2c0 	call	1000ae2c <__hi0bits>
10007f1c:	b885c83a 	sub	r2,r23,r2
10007f20:	1585883a 	add	r2,r2,r22
10007f24:	108007cc 	andi	r2,r2,31
10007f28:	1000b326 	beq	r2,zero,100081f8 <_dtoa_r+0xda0>
10007f2c:	00c00804 	movi	r3,32
10007f30:	1887c83a 	sub	r3,r3,r2
10007f34:	01000104 	movi	r4,4
10007f38:	20c2cd0e 	bge	r4,r3,10008a70 <_dtoa_r+0x1618>
10007f3c:	00c00704 	movi	r3,28
10007f40:	1885c83a 	sub	r2,r3,r2
10007f44:	d8c00817 	ldw	r3,32(sp)
10007f48:	a0a9883a 	add	r20,r20,r2
10007f4c:	b0ad883a 	add	r22,r22,r2
10007f50:	1887883a 	add	r3,r3,r2
10007f54:	d8c00815 	stw	r3,32(sp)
10007f58:	d9800817 	ldw	r6,32(sp)
10007f5c:	0180040e 	bge	zero,r6,10007f70 <_dtoa_r+0xb18>
10007f60:	800b883a 	mov	r5,r16
10007f64:	e009883a 	mov	r4,fp
10007f68:	000b34c0 	call	1000b34c <__lshift>
10007f6c:	1021883a 	mov	r16,r2
10007f70:	0580050e 	bge	zero,r22,10007f88 <_dtoa_r+0xb30>
10007f74:	a80b883a 	mov	r5,r21
10007f78:	b00d883a 	mov	r6,r22
10007f7c:	e009883a 	mov	r4,fp
10007f80:	000b34c0 	call	1000b34c <__lshift>
10007f84:	102b883a 	mov	r21,r2
10007f88:	d9c00e17 	ldw	r7,56(sp)
10007f8c:	3801211e 	bne	r7,zero,10008414 <_dtoa_r+0xfbc>
10007f90:	d9800617 	ldw	r6,24(sp)
10007f94:	0181380e 	bge	zero,r6,10008478 <_dtoa_r+0x1020>
10007f98:	d8c00b17 	ldw	r3,44(sp)
10007f9c:	1800ab1e 	bne	r3,zero,1000824c <_dtoa_r+0xdf4>
10007fa0:	dc800717 	ldw	r18,28(sp)
10007fa4:	dcc00617 	ldw	r19,24(sp)
10007fa8:	9029883a 	mov	r20,r18
10007fac:	00000206 	br	10007fb8 <_dtoa_r+0xb60>
10007fb0:	000abe00 	call	1000abe0 <__multadd>
10007fb4:	1021883a 	mov	r16,r2
10007fb8:	a80b883a 	mov	r5,r21
10007fbc:	8009883a 	mov	r4,r16
10007fc0:	00072300 	call	10007230 <quorem>
10007fc4:	10800c04 	addi	r2,r2,48
10007fc8:	90800005 	stb	r2,0(r18)
10007fcc:	94800044 	addi	r18,r18,1
10007fd0:	9507c83a 	sub	r3,r18,r20
10007fd4:	000f883a 	mov	r7,zero
10007fd8:	01800284 	movi	r6,10
10007fdc:	800b883a 	mov	r5,r16
10007fe0:	e009883a 	mov	r4,fp
10007fe4:	1cfff216 	blt	r3,r19,10007fb0 <__alt_data_end+0xf8007fb0>
10007fe8:	1011883a 	mov	r8,r2
10007fec:	d8800617 	ldw	r2,24(sp)
10007ff0:	0082370e 	bge	zero,r2,100088d0 <_dtoa_r+0x1478>
10007ff4:	d9000717 	ldw	r4,28(sp)
10007ff8:	0025883a 	mov	r18,zero
10007ffc:	20af883a 	add	r23,r4,r2
10008000:	01800044 	movi	r6,1
10008004:	800b883a 	mov	r5,r16
10008008:	e009883a 	mov	r4,fp
1000800c:	da001715 	stw	r8,92(sp)
10008010:	000b34c0 	call	1000b34c <__lshift>
10008014:	a80b883a 	mov	r5,r21
10008018:	1009883a 	mov	r4,r2
1000801c:	d8800915 	stw	r2,36(sp)
10008020:	000b4940 	call	1000b494 <__mcmp>
10008024:	da001717 	ldw	r8,92(sp)
10008028:	0081800e 	bge	zero,r2,1000862c <_dtoa_r+0x11d4>
1000802c:	b93fffc3 	ldbu	r4,-1(r23)
10008030:	b8bfffc4 	addi	r2,r23,-1
10008034:	1007883a 	mov	r3,r2
10008038:	01800e44 	movi	r6,57
1000803c:	d9c00717 	ldw	r7,28(sp)
10008040:	00000506 	br	10008058 <_dtoa_r+0xc00>
10008044:	18ffffc4 	addi	r3,r3,-1
10008048:	11c12326 	beq	r2,r7,100084d8 <_dtoa_r+0x1080>
1000804c:	19000003 	ldbu	r4,0(r3)
10008050:	102f883a 	mov	r23,r2
10008054:	10bfffc4 	addi	r2,r2,-1
10008058:	21403fcc 	andi	r5,r4,255
1000805c:	2940201c 	xori	r5,r5,128
10008060:	297fe004 	addi	r5,r5,-128
10008064:	29bff726 	beq	r5,r6,10008044 <__alt_data_end+0xf8008044>
10008068:	21000044 	addi	r4,r4,1
1000806c:	11000005 	stb	r4,0(r2)
10008070:	a80b883a 	mov	r5,r21
10008074:	e009883a 	mov	r4,fp
10008078:	000abb80 	call	1000abb8 <_Bfree>
1000807c:	883ea026 	beq	r17,zero,10007b00 <__alt_data_end+0xf8007b00>
10008080:	90000426 	beq	r18,zero,10008094 <_dtoa_r+0xc3c>
10008084:	94400326 	beq	r18,r17,10008094 <_dtoa_r+0xc3c>
10008088:	900b883a 	mov	r5,r18
1000808c:	e009883a 	mov	r4,fp
10008090:	000abb80 	call	1000abb8 <_Bfree>
10008094:	880b883a 	mov	r5,r17
10008098:	e009883a 	mov	r4,fp
1000809c:	000abb80 	call	1000abb8 <_Bfree>
100080a0:	003e9706 	br	10007b00 <__alt_data_end+0xf8007b00>
100080a4:	01800044 	movi	r6,1
100080a8:	d9800e15 	stw	r6,56(sp)
100080ac:	003d9606 	br	10007708 <__alt_data_end+0xf8007708>
100080b0:	d8800817 	ldw	r2,32(sp)
100080b4:	d8c00517 	ldw	r3,20(sp)
100080b8:	d8000d15 	stw	zero,52(sp)
100080bc:	10c5c83a 	sub	r2,r2,r3
100080c0:	00c9c83a 	sub	r4,zero,r3
100080c4:	d8800815 	stw	r2,32(sp)
100080c8:	d9000a15 	stw	r4,40(sp)
100080cc:	003d9706 	br	1000772c <__alt_data_end+0xf800772c>
100080d0:	05adc83a 	sub	r22,zero,r22
100080d4:	dd800815 	stw	r22,32(sp)
100080d8:	002d883a 	mov	r22,zero
100080dc:	003d8e06 	br	10007718 <__alt_data_end+0xf8007718>
100080e0:	d9000517 	ldw	r4,20(sp)
100080e4:	00118800 	call	10011880 <__floatsidf>
100080e8:	100d883a 	mov	r6,r2
100080ec:	180f883a 	mov	r7,r3
100080f0:	a009883a 	mov	r4,r20
100080f4:	880b883a 	mov	r5,r17
100080f8:	00104400 	call	10010440 <__eqdf2>
100080fc:	103d7126 	beq	r2,zero,100076c4 <__alt_data_end+0xf80076c4>
10008100:	d9c00517 	ldw	r7,20(sp)
10008104:	39ffffc4 	addi	r7,r7,-1
10008108:	d9c00515 	stw	r7,20(sp)
1000810c:	003d6d06 	br	100076c4 <__alt_data_end+0xf80076c4>
10008110:	dd400a17 	ldw	r21,40(sp)
10008114:	dd000817 	ldw	r20,32(sp)
10008118:	0023883a 	mov	r17,zero
1000811c:	003f4806 	br	10007e40 <__alt_data_end+0xf8007e40>
10008120:	10e3c83a 	sub	r17,r2,r3
10008124:	9448983a 	sll	r4,r18,r17
10008128:	003d3206 	br	100075f4 <__alt_data_end+0xf80075f4>
1000812c:	d8000e15 	stw	zero,56(sp)
10008130:	003d7506 	br	10007708 <__alt_data_end+0xf8007708>
10008134:	b005883a 	mov	r2,r22
10008138:	003f4506 	br	10007e50 <__alt_data_end+0xf8007e50>
1000813c:	dc000915 	stw	r16,36(sp)
10008140:	d9800a17 	ldw	r6,40(sp)
10008144:	d9400917 	ldw	r5,36(sp)
10008148:	e009883a 	mov	r4,fp
1000814c:	000b20c0 	call	1000b20c <__pow5mult>
10008150:	1021883a 	mov	r16,r2
10008154:	003f5a06 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008158:	01c00044 	movi	r7,1
1000815c:	d9c00b15 	stw	r7,44(sp)
10008160:	d8802217 	ldw	r2,136(sp)
10008164:	0081280e 	bge	zero,r2,10008608 <_dtoa_r+0x11b0>
10008168:	100d883a 	mov	r6,r2
1000816c:	1021883a 	mov	r16,r2
10008170:	d8800c15 	stw	r2,48(sp)
10008174:	d8800615 	stw	r2,24(sp)
10008178:	003d8806 	br	1000779c <__alt_data_end+0xf800779c>
1000817c:	d8800617 	ldw	r2,24(sp)
10008180:	00be9b16 	blt	zero,r2,10007bf0 <__alt_data_end+0xf8007bf0>
10008184:	10010f1e 	bne	r2,zero,100085c4 <_dtoa_r+0x116c>
10008188:	880b883a 	mov	r5,r17
1000818c:	000d883a 	mov	r6,zero
10008190:	01d00534 	movhi	r7,16404
10008194:	8009883a 	mov	r4,r16
10008198:	00106980 	call	10010698 <__muldf3>
1000819c:	900d883a 	mov	r6,r18
100081a0:	980f883a 	mov	r7,r19
100081a4:	1009883a 	mov	r4,r2
100081a8:	180b883a 	mov	r5,r3
100081ac:	00104c80 	call	100104c8 <__gedf2>
100081b0:	002b883a 	mov	r21,zero
100081b4:	0023883a 	mov	r17,zero
100081b8:	1000bf16 	blt	r2,zero,100084b8 <_dtoa_r+0x1060>
100081bc:	d9802217 	ldw	r6,136(sp)
100081c0:	ddc00717 	ldw	r23,28(sp)
100081c4:	018c303a 	nor	r6,zero,r6
100081c8:	d9800515 	stw	r6,20(sp)
100081cc:	a80b883a 	mov	r5,r21
100081d0:	e009883a 	mov	r4,fp
100081d4:	000abb80 	call	1000abb8 <_Bfree>
100081d8:	883e4926 	beq	r17,zero,10007b00 <__alt_data_end+0xf8007b00>
100081dc:	003fad06 	br	10008094 <__alt_data_end+0xf8008094>
100081e0:	d9c01117 	ldw	r7,68(sp)
100081e4:	3801bc26 	beq	r7,zero,100088d8 <_dtoa_r+0x1480>
100081e8:	10810cc4 	addi	r2,r2,1075
100081ec:	dd400a17 	ldw	r21,40(sp)
100081f0:	dd000817 	ldw	r20,32(sp)
100081f4:	003f0a06 	br	10007e20 <__alt_data_end+0xf8007e20>
100081f8:	00800704 	movi	r2,28
100081fc:	d9000817 	ldw	r4,32(sp)
10008200:	a0a9883a 	add	r20,r20,r2
10008204:	b0ad883a 	add	r22,r22,r2
10008208:	2089883a 	add	r4,r4,r2
1000820c:	d9000815 	stw	r4,32(sp)
10008210:	003f5106 	br	10007f58 <__alt_data_end+0xf8007f58>
10008214:	d8c00317 	ldw	r3,12(sp)
10008218:	b8c1fc0e 	bge	r23,r3,10008a0c <_dtoa_r+0x15b4>
1000821c:	0027883a 	mov	r19,zero
10008220:	b805883a 	mov	r2,r23
10008224:	003f3e06 	br	10007f20 <__alt_data_end+0xf8007f20>
10008228:	880b883a 	mov	r5,r17
1000822c:	e009883a 	mov	r4,fp
10008230:	000f883a 	mov	r7,zero
10008234:	01800284 	movi	r6,10
10008238:	000abe00 	call	1000abe0 <__multadd>
1000823c:	d9000c17 	ldw	r4,48(sp)
10008240:	1023883a 	mov	r17,r2
10008244:	0102040e 	bge	zero,r4,10008a58 <_dtoa_r+0x1600>
10008248:	d9000615 	stw	r4,24(sp)
1000824c:	0500050e 	bge	zero,r20,10008264 <_dtoa_r+0xe0c>
10008250:	880b883a 	mov	r5,r17
10008254:	a00d883a 	mov	r6,r20
10008258:	e009883a 	mov	r4,fp
1000825c:	000b34c0 	call	1000b34c <__lshift>
10008260:	1023883a 	mov	r17,r2
10008264:	9801241e 	bne	r19,zero,100086f8 <_dtoa_r+0x12a0>
10008268:	8829883a 	mov	r20,r17
1000826c:	d9000617 	ldw	r4,24(sp)
10008270:	dcc00717 	ldw	r19,28(sp)
10008274:	9480004c 	andi	r18,r18,1
10008278:	20bfffc4 	addi	r2,r4,-1
1000827c:	9885883a 	add	r2,r19,r2
10008280:	d8800415 	stw	r2,16(sp)
10008284:	dc800615 	stw	r18,24(sp)
10008288:	a80b883a 	mov	r5,r21
1000828c:	8009883a 	mov	r4,r16
10008290:	00072300 	call	10007230 <quorem>
10008294:	880b883a 	mov	r5,r17
10008298:	8009883a 	mov	r4,r16
1000829c:	102f883a 	mov	r23,r2
100082a0:	000b4940 	call	1000b494 <__mcmp>
100082a4:	a80b883a 	mov	r5,r21
100082a8:	a00d883a 	mov	r6,r20
100082ac:	e009883a 	mov	r4,fp
100082b0:	102d883a 	mov	r22,r2
100082b4:	000b4f40 	call	1000b4f4 <__mdiff>
100082b8:	1007883a 	mov	r3,r2
100082bc:	10800317 	ldw	r2,12(r2)
100082c0:	bc800c04 	addi	r18,r23,48
100082c4:	180b883a 	mov	r5,r3
100082c8:	10004e1e 	bne	r2,zero,10008404 <_dtoa_r+0xfac>
100082cc:	8009883a 	mov	r4,r16
100082d0:	d8c01615 	stw	r3,88(sp)
100082d4:	000b4940 	call	1000b494 <__mcmp>
100082d8:	d8c01617 	ldw	r3,88(sp)
100082dc:	e009883a 	mov	r4,fp
100082e0:	d8801615 	stw	r2,88(sp)
100082e4:	180b883a 	mov	r5,r3
100082e8:	000abb80 	call	1000abb8 <_Bfree>
100082ec:	d8801617 	ldw	r2,88(sp)
100082f0:	1000041e 	bne	r2,zero,10008304 <_dtoa_r+0xeac>
100082f4:	d9800317 	ldw	r6,12(sp)
100082f8:	3000021e 	bne	r6,zero,10008304 <_dtoa_r+0xeac>
100082fc:	d8c00617 	ldw	r3,24(sp)
10008300:	18003726 	beq	r3,zero,100083e0 <_dtoa_r+0xf88>
10008304:	b0002016 	blt	r22,zero,10008388 <_dtoa_r+0xf30>
10008308:	b000041e 	bne	r22,zero,1000831c <_dtoa_r+0xec4>
1000830c:	d9000317 	ldw	r4,12(sp)
10008310:	2000021e 	bne	r4,zero,1000831c <_dtoa_r+0xec4>
10008314:	d8c00617 	ldw	r3,24(sp)
10008318:	18001b26 	beq	r3,zero,10008388 <_dtoa_r+0xf30>
1000831c:	00810716 	blt	zero,r2,1000873c <_dtoa_r+0x12e4>
10008320:	d8c00417 	ldw	r3,16(sp)
10008324:	9d800044 	addi	r22,r19,1
10008328:	9c800005 	stb	r18,0(r19)
1000832c:	b02f883a 	mov	r23,r22
10008330:	98c10626 	beq	r19,r3,1000874c <_dtoa_r+0x12f4>
10008334:	800b883a 	mov	r5,r16
10008338:	000f883a 	mov	r7,zero
1000833c:	01800284 	movi	r6,10
10008340:	e009883a 	mov	r4,fp
10008344:	000abe00 	call	1000abe0 <__multadd>
10008348:	1021883a 	mov	r16,r2
1000834c:	000f883a 	mov	r7,zero
10008350:	01800284 	movi	r6,10
10008354:	880b883a 	mov	r5,r17
10008358:	e009883a 	mov	r4,fp
1000835c:	8d002526 	beq	r17,r20,100083f4 <_dtoa_r+0xf9c>
10008360:	000abe00 	call	1000abe0 <__multadd>
10008364:	a00b883a 	mov	r5,r20
10008368:	000f883a 	mov	r7,zero
1000836c:	01800284 	movi	r6,10
10008370:	e009883a 	mov	r4,fp
10008374:	1023883a 	mov	r17,r2
10008378:	000abe00 	call	1000abe0 <__multadd>
1000837c:	1029883a 	mov	r20,r2
10008380:	b027883a 	mov	r19,r22
10008384:	003fc006 	br	10008288 <__alt_data_end+0xf8008288>
10008388:	9011883a 	mov	r8,r18
1000838c:	00800e0e 	bge	zero,r2,100083c8 <_dtoa_r+0xf70>
10008390:	800b883a 	mov	r5,r16
10008394:	01800044 	movi	r6,1
10008398:	e009883a 	mov	r4,fp
1000839c:	da001715 	stw	r8,92(sp)
100083a0:	000b34c0 	call	1000b34c <__lshift>
100083a4:	a80b883a 	mov	r5,r21
100083a8:	1009883a 	mov	r4,r2
100083ac:	1021883a 	mov	r16,r2
100083b0:	000b4940 	call	1000b494 <__mcmp>
100083b4:	da001717 	ldw	r8,92(sp)
100083b8:	0081960e 	bge	zero,r2,10008a14 <_dtoa_r+0x15bc>
100083bc:	00800e44 	movi	r2,57
100083c0:	40817026 	beq	r8,r2,10008984 <_dtoa_r+0x152c>
100083c4:	ba000c44 	addi	r8,r23,49
100083c8:	8825883a 	mov	r18,r17
100083cc:	9dc00044 	addi	r23,r19,1
100083d0:	9a000005 	stb	r8,0(r19)
100083d4:	a023883a 	mov	r17,r20
100083d8:	dc000915 	stw	r16,36(sp)
100083dc:	003f2406 	br	10008070 <__alt_data_end+0xf8008070>
100083e0:	00800e44 	movi	r2,57
100083e4:	9011883a 	mov	r8,r18
100083e8:	90816626 	beq	r18,r2,10008984 <_dtoa_r+0x152c>
100083ec:	05bff516 	blt	zero,r22,100083c4 <__alt_data_end+0xf80083c4>
100083f0:	003ff506 	br	100083c8 <__alt_data_end+0xf80083c8>
100083f4:	000abe00 	call	1000abe0 <__multadd>
100083f8:	1023883a 	mov	r17,r2
100083fc:	1029883a 	mov	r20,r2
10008400:	003fdf06 	br	10008380 <__alt_data_end+0xf8008380>
10008404:	e009883a 	mov	r4,fp
10008408:	000abb80 	call	1000abb8 <_Bfree>
1000840c:	00800044 	movi	r2,1
10008410:	003fbc06 	br	10008304 <__alt_data_end+0xf8008304>
10008414:	a80b883a 	mov	r5,r21
10008418:	8009883a 	mov	r4,r16
1000841c:	000b4940 	call	1000b494 <__mcmp>
10008420:	103edb0e 	bge	r2,zero,10007f90 <__alt_data_end+0xf8007f90>
10008424:	800b883a 	mov	r5,r16
10008428:	000f883a 	mov	r7,zero
1000842c:	01800284 	movi	r6,10
10008430:	e009883a 	mov	r4,fp
10008434:	000abe00 	call	1000abe0 <__multadd>
10008438:	1021883a 	mov	r16,r2
1000843c:	d8800517 	ldw	r2,20(sp)
10008440:	d8c00b17 	ldw	r3,44(sp)
10008444:	10bfffc4 	addi	r2,r2,-1
10008448:	d8800515 	stw	r2,20(sp)
1000844c:	183f761e 	bne	r3,zero,10008228 <__alt_data_end+0xf8008228>
10008450:	d9000c17 	ldw	r4,48(sp)
10008454:	0101730e 	bge	zero,r4,10008a24 <_dtoa_r+0x15cc>
10008458:	d9000615 	stw	r4,24(sp)
1000845c:	003ed006 	br	10007fa0 <__alt_data_end+0xf8007fa0>
10008460:	00800084 	movi	r2,2
10008464:	3081861e 	bne	r6,r2,10008a80 <_dtoa_r+0x1628>
10008468:	d8000b15 	stw	zero,44(sp)
1000846c:	003f3c06 	br	10008160 <__alt_data_end+0xf8008160>
10008470:	dc000917 	ldw	r16,36(sp)
10008474:	003e9206 	br	10007ec0 <__alt_data_end+0xf8007ec0>
10008478:	d9c00317 	ldw	r7,12(sp)
1000847c:	00800084 	movi	r2,2
10008480:	11fec50e 	bge	r2,r7,10007f98 <__alt_data_end+0xf8007f98>
10008484:	d9000617 	ldw	r4,24(sp)
10008488:	20013c1e 	bne	r4,zero,1000897c <_dtoa_r+0x1524>
1000848c:	a80b883a 	mov	r5,r21
10008490:	000f883a 	mov	r7,zero
10008494:	01800144 	movi	r6,5
10008498:	e009883a 	mov	r4,fp
1000849c:	000abe00 	call	1000abe0 <__multadd>
100084a0:	100b883a 	mov	r5,r2
100084a4:	8009883a 	mov	r4,r16
100084a8:	102b883a 	mov	r21,r2
100084ac:	000b4940 	call	1000b494 <__mcmp>
100084b0:	dc000915 	stw	r16,36(sp)
100084b4:	00bf410e 	bge	zero,r2,100081bc <__alt_data_end+0xf80081bc>
100084b8:	d9c00717 	ldw	r7,28(sp)
100084bc:	00800c44 	movi	r2,49
100084c0:	38800005 	stb	r2,0(r7)
100084c4:	d8800517 	ldw	r2,20(sp)
100084c8:	3dc00044 	addi	r23,r7,1
100084cc:	10800044 	addi	r2,r2,1
100084d0:	d8800515 	stw	r2,20(sp)
100084d4:	003f3d06 	br	100081cc <__alt_data_end+0xf80081cc>
100084d8:	d9800517 	ldw	r6,20(sp)
100084dc:	d9c00717 	ldw	r7,28(sp)
100084e0:	00800c44 	movi	r2,49
100084e4:	31800044 	addi	r6,r6,1
100084e8:	d9800515 	stw	r6,20(sp)
100084ec:	38800005 	stb	r2,0(r7)
100084f0:	003edf06 	br	10008070 <__alt_data_end+0xf8008070>
100084f4:	d8000b15 	stw	zero,44(sp)
100084f8:	003c9f06 	br	10007778 <__alt_data_end+0xf8007778>
100084fc:	903e7e1e 	bne	r18,zero,10007ef8 <__alt_data_end+0xf8007ef8>
10008500:	00800434 	movhi	r2,16
10008504:	10bfffc4 	addi	r2,r2,-1
10008508:	9884703a 	and	r2,r19,r2
1000850c:	1000ea1e 	bne	r2,zero,100088b8 <_dtoa_r+0x1460>
10008510:	9cdffc2c 	andhi	r19,r19,32752
10008514:	9800e826 	beq	r19,zero,100088b8 <_dtoa_r+0x1460>
10008518:	d9c00817 	ldw	r7,32(sp)
1000851c:	b5800044 	addi	r22,r22,1
10008520:	04c00044 	movi	r19,1
10008524:	39c00044 	addi	r7,r7,1
10008528:	d9c00815 	stw	r7,32(sp)
1000852c:	d8800d17 	ldw	r2,52(sp)
10008530:	103e721e 	bne	r2,zero,10007efc <__alt_data_end+0xf8007efc>
10008534:	00800044 	movi	r2,1
10008538:	003e7906 	br	10007f20 <__alt_data_end+0xf8007f20>
1000853c:	8009883a 	mov	r4,r16
10008540:	00118800 	call	10011880 <__floatsidf>
10008544:	d9800f17 	ldw	r6,60(sp)
10008548:	d9c01017 	ldw	r7,64(sp)
1000854c:	1009883a 	mov	r4,r2
10008550:	180b883a 	mov	r5,r3
10008554:	00106980 	call	10010698 <__muldf3>
10008558:	000d883a 	mov	r6,zero
1000855c:	01d00734 	movhi	r7,16412
10008560:	1009883a 	mov	r4,r2
10008564:	180b883a 	mov	r5,r3
10008568:	000f1c40 	call	1000f1c4 <__adddf3>
1000856c:	047f3034 	movhi	r17,64704
10008570:	1021883a 	mov	r16,r2
10008574:	1c63883a 	add	r17,r3,r17
10008578:	d9000f17 	ldw	r4,60(sp)
1000857c:	d9401017 	ldw	r5,64(sp)
10008580:	000d883a 	mov	r6,zero
10008584:	01d00534 	movhi	r7,16404
10008588:	0010f040 	call	10010f04 <__subdf3>
1000858c:	800d883a 	mov	r6,r16
10008590:	880f883a 	mov	r7,r17
10008594:	1009883a 	mov	r4,r2
10008598:	180b883a 	mov	r5,r3
1000859c:	102b883a 	mov	r21,r2
100085a0:	1829883a 	mov	r20,r3
100085a4:	00104c80 	call	100104c8 <__gedf2>
100085a8:	00806c16 	blt	zero,r2,1000875c <_dtoa_r+0x1304>
100085ac:	89e0003c 	xorhi	r7,r17,32768
100085b0:	800d883a 	mov	r6,r16
100085b4:	a809883a 	mov	r4,r21
100085b8:	a00b883a 	mov	r5,r20
100085bc:	00105a40 	call	100105a4 <__ledf2>
100085c0:	103d7e0e 	bge	r2,zero,10007bbc <__alt_data_end+0xf8007bbc>
100085c4:	002b883a 	mov	r21,zero
100085c8:	0023883a 	mov	r17,zero
100085cc:	003efb06 	br	100081bc <__alt_data_end+0xf80081bc>
100085d0:	d8800717 	ldw	r2,28(sp)
100085d4:	003bd006 	br	10007518 <__alt_data_end+0xf8007518>
100085d8:	d9000a17 	ldw	r4,40(sp)
100085dc:	d9800d17 	ldw	r6,52(sp)
100085e0:	dd400a15 	stw	r21,40(sp)
100085e4:	a905c83a 	sub	r2,r21,r4
100085e8:	308d883a 	add	r6,r6,r2
100085ec:	d9800d15 	stw	r6,52(sp)
100085f0:	002b883a 	mov	r21,zero
100085f4:	003e0606 	br	10007e10 <__alt_data_end+0xf8007e10>
100085f8:	9023883a 	mov	r17,r18
100085fc:	9829883a 	mov	r20,r19
10008600:	04000084 	movi	r16,2
10008604:	003c9206 	br	10007850 <__alt_data_end+0xf8007850>
10008608:	04000044 	movi	r16,1
1000860c:	dc000c15 	stw	r16,48(sp)
10008610:	dc000615 	stw	r16,24(sp)
10008614:	dc002215 	stw	r16,136(sp)
10008618:	e0001115 	stw	zero,68(fp)
1000861c:	000b883a 	mov	r5,zero
10008620:	003c6906 	br	100077c8 <__alt_data_end+0xf80077c8>
10008624:	3021883a 	mov	r16,r6
10008628:	003ffb06 	br	10008618 <__alt_data_end+0xf8008618>
1000862c:	1000021e 	bne	r2,zero,10008638 <_dtoa_r+0x11e0>
10008630:	4200004c 	andi	r8,r8,1
10008634:	403e7d1e 	bne	r8,zero,1000802c <__alt_data_end+0xf800802c>
10008638:	01000c04 	movi	r4,48
1000863c:	00000106 	br	10008644 <_dtoa_r+0x11ec>
10008640:	102f883a 	mov	r23,r2
10008644:	b8bfffc4 	addi	r2,r23,-1
10008648:	10c00007 	ldb	r3,0(r2)
1000864c:	193ffc26 	beq	r3,r4,10008640 <__alt_data_end+0xf8008640>
10008650:	003e8706 	br	10008070 <__alt_data_end+0xf8008070>
10008654:	d8800517 	ldw	r2,20(sp)
10008658:	00a3c83a 	sub	r17,zero,r2
1000865c:	8800a426 	beq	r17,zero,100088f0 <_dtoa_r+0x1498>
10008660:	888003cc 	andi	r2,r17,15
10008664:	100490fa 	slli	r2,r2,3
10008668:	00c40074 	movhi	r3,4097
1000866c:	18d33404 	addi	r3,r3,19664
10008670:	1885883a 	add	r2,r3,r2
10008674:	11800017 	ldw	r6,0(r2)
10008678:	11c00117 	ldw	r7,4(r2)
1000867c:	9009883a 	mov	r4,r18
10008680:	980b883a 	mov	r5,r19
10008684:	8823d13a 	srai	r17,r17,4
10008688:	00106980 	call	10010698 <__muldf3>
1000868c:	d8800f15 	stw	r2,60(sp)
10008690:	d8c01015 	stw	r3,64(sp)
10008694:	8800e826 	beq	r17,zero,10008a38 <_dtoa_r+0x15e0>
10008698:	05040074 	movhi	r20,4097
1000869c:	a5132a04 	addi	r20,r20,19624
100086a0:	04000084 	movi	r16,2
100086a4:	8980004c 	andi	r6,r17,1
100086a8:	1009883a 	mov	r4,r2
100086ac:	8823d07a 	srai	r17,r17,1
100086b0:	180b883a 	mov	r5,r3
100086b4:	30000426 	beq	r6,zero,100086c8 <_dtoa_r+0x1270>
100086b8:	a1800017 	ldw	r6,0(r20)
100086bc:	a1c00117 	ldw	r7,4(r20)
100086c0:	84000044 	addi	r16,r16,1
100086c4:	00106980 	call	10010698 <__muldf3>
100086c8:	a5000204 	addi	r20,r20,8
100086cc:	883ff51e 	bne	r17,zero,100086a4 <__alt_data_end+0xf80086a4>
100086d0:	d8800f15 	stw	r2,60(sp)
100086d4:	d8c01015 	stw	r3,64(sp)
100086d8:	003c7606 	br	100078b4 <__alt_data_end+0xf80078b4>
100086dc:	00c00c04 	movi	r3,48
100086e0:	10c00005 	stb	r3,0(r2)
100086e4:	d8c00517 	ldw	r3,20(sp)
100086e8:	bd3fffc3 	ldbu	r20,-1(r23)
100086ec:	18c00044 	addi	r3,r3,1
100086f0:	d8c00515 	stw	r3,20(sp)
100086f4:	003db906 	br	10007ddc <__alt_data_end+0xf8007ddc>
100086f8:	89400117 	ldw	r5,4(r17)
100086fc:	e009883a 	mov	r4,fp
10008700:	000ab100 	call	1000ab10 <_Balloc>
10008704:	89800417 	ldw	r6,16(r17)
10008708:	89400304 	addi	r5,r17,12
1000870c:	11000304 	addi	r4,r2,12
10008710:	31800084 	addi	r6,r6,2
10008714:	318d883a 	add	r6,r6,r6
10008718:	318d883a 	add	r6,r6,r6
1000871c:	1027883a 	mov	r19,r2
10008720:	000a7440 	call	1000a744 <memcpy>
10008724:	01800044 	movi	r6,1
10008728:	980b883a 	mov	r5,r19
1000872c:	e009883a 	mov	r4,fp
10008730:	000b34c0 	call	1000b34c <__lshift>
10008734:	1029883a 	mov	r20,r2
10008738:	003ecc06 	br	1000826c <__alt_data_end+0xf800826c>
1000873c:	00800e44 	movi	r2,57
10008740:	90809026 	beq	r18,r2,10008984 <_dtoa_r+0x152c>
10008744:	92000044 	addi	r8,r18,1
10008748:	003f1f06 	br	100083c8 <__alt_data_end+0xf80083c8>
1000874c:	9011883a 	mov	r8,r18
10008750:	8825883a 	mov	r18,r17
10008754:	a023883a 	mov	r17,r20
10008758:	003e2906 	br	10008000 <__alt_data_end+0xf8008000>
1000875c:	002b883a 	mov	r21,zero
10008760:	0023883a 	mov	r17,zero
10008764:	003f5406 	br	100084b8 <__alt_data_end+0xf80084b8>
10008768:	61bfffc4 	addi	r6,r12,-1
1000876c:	300490fa 	slli	r2,r6,3
10008770:	00c40074 	movhi	r3,4097
10008774:	18d33404 	addi	r3,r3,19664
10008778:	1885883a 	add	r2,r3,r2
1000877c:	11000017 	ldw	r4,0(r2)
10008780:	11400117 	ldw	r5,4(r2)
10008784:	d8800717 	ldw	r2,28(sp)
10008788:	880f883a 	mov	r7,r17
1000878c:	d9801215 	stw	r6,72(sp)
10008790:	800d883a 	mov	r6,r16
10008794:	db001615 	stw	r12,88(sp)
10008798:	15c00044 	addi	r23,r2,1
1000879c:	00106980 	call	10010698 <__muldf3>
100087a0:	d9401017 	ldw	r5,64(sp)
100087a4:	d9000f17 	ldw	r4,60(sp)
100087a8:	d8c01515 	stw	r3,84(sp)
100087ac:	d8801415 	stw	r2,80(sp)
100087b0:	00118000 	call	10011800 <__fixdfsi>
100087b4:	1009883a 	mov	r4,r2
100087b8:	1021883a 	mov	r16,r2
100087bc:	00118800 	call	10011880 <__floatsidf>
100087c0:	d9000f17 	ldw	r4,60(sp)
100087c4:	d9401017 	ldw	r5,64(sp)
100087c8:	100d883a 	mov	r6,r2
100087cc:	180f883a 	mov	r7,r3
100087d0:	0010f040 	call	10010f04 <__subdf3>
100087d4:	1829883a 	mov	r20,r3
100087d8:	d8c00717 	ldw	r3,28(sp)
100087dc:	84000c04 	addi	r16,r16,48
100087e0:	1023883a 	mov	r17,r2
100087e4:	1c000005 	stb	r16,0(r3)
100087e8:	db001617 	ldw	r12,88(sp)
100087ec:	00800044 	movi	r2,1
100087f0:	60802226 	beq	r12,r2,1000887c <_dtoa_r+0x1424>
100087f4:	d9c00717 	ldw	r7,28(sp)
100087f8:	8805883a 	mov	r2,r17
100087fc:	b82b883a 	mov	r21,r23
10008800:	3b19883a 	add	r12,r7,r12
10008804:	6023883a 	mov	r17,r12
10008808:	a007883a 	mov	r3,r20
1000880c:	dc800f15 	stw	r18,60(sp)
10008810:	000d883a 	mov	r6,zero
10008814:	01d00934 	movhi	r7,16420
10008818:	1009883a 	mov	r4,r2
1000881c:	180b883a 	mov	r5,r3
10008820:	00106980 	call	10010698 <__muldf3>
10008824:	180b883a 	mov	r5,r3
10008828:	1009883a 	mov	r4,r2
1000882c:	1829883a 	mov	r20,r3
10008830:	1025883a 	mov	r18,r2
10008834:	00118000 	call	10011800 <__fixdfsi>
10008838:	1009883a 	mov	r4,r2
1000883c:	1021883a 	mov	r16,r2
10008840:	00118800 	call	10011880 <__floatsidf>
10008844:	100d883a 	mov	r6,r2
10008848:	180f883a 	mov	r7,r3
1000884c:	9009883a 	mov	r4,r18
10008850:	a00b883a 	mov	r5,r20
10008854:	84000c04 	addi	r16,r16,48
10008858:	0010f040 	call	10010f04 <__subdf3>
1000885c:	ad400044 	addi	r21,r21,1
10008860:	ac3fffc5 	stb	r16,-1(r21)
10008864:	ac7fea1e 	bne	r21,r17,10008810 <__alt_data_end+0xf8008810>
10008868:	1023883a 	mov	r17,r2
1000886c:	d8801217 	ldw	r2,72(sp)
10008870:	dc800f17 	ldw	r18,60(sp)
10008874:	1829883a 	mov	r20,r3
10008878:	b8af883a 	add	r23,r23,r2
1000887c:	d9001417 	ldw	r4,80(sp)
10008880:	d9401517 	ldw	r5,84(sp)
10008884:	000d883a 	mov	r6,zero
10008888:	01cff834 	movhi	r7,16352
1000888c:	000f1c40 	call	1000f1c4 <__adddf3>
10008890:	880d883a 	mov	r6,r17
10008894:	a00f883a 	mov	r7,r20
10008898:	1009883a 	mov	r4,r2
1000889c:	180b883a 	mov	r5,r3
100088a0:	00105a40 	call	100105a4 <__ledf2>
100088a4:	10003e0e 	bge	r2,zero,100089a0 <_dtoa_r+0x1548>
100088a8:	d9001317 	ldw	r4,76(sp)
100088ac:	bd3fffc3 	ldbu	r20,-1(r23)
100088b0:	d9000515 	stw	r4,20(sp)
100088b4:	003d3b06 	br	10007da4 <__alt_data_end+0xf8007da4>
100088b8:	0027883a 	mov	r19,zero
100088bc:	003f1b06 	br	1000852c <__alt_data_end+0xf800852c>
100088c0:	d8800817 	ldw	r2,32(sp)
100088c4:	11e9c83a 	sub	r20,r2,r7
100088c8:	0005883a 	mov	r2,zero
100088cc:	003d5406 	br	10007e20 <__alt_data_end+0xf8007e20>
100088d0:	00800044 	movi	r2,1
100088d4:	003dc706 	br	10007ff4 <__alt_data_end+0xf8007ff4>
100088d8:	d8c00217 	ldw	r3,8(sp)
100088dc:	00800d84 	movi	r2,54
100088e0:	dd400a17 	ldw	r21,40(sp)
100088e4:	10c5c83a 	sub	r2,r2,r3
100088e8:	dd000817 	ldw	r20,32(sp)
100088ec:	003d4c06 	br	10007e20 <__alt_data_end+0xf8007e20>
100088f0:	dc800f15 	stw	r18,60(sp)
100088f4:	dcc01015 	stw	r19,64(sp)
100088f8:	04000084 	movi	r16,2
100088fc:	003bed06 	br	100078b4 <__alt_data_end+0xf80078b4>
10008900:	d9000617 	ldw	r4,24(sp)
10008904:	203f0d26 	beq	r4,zero,1000853c <__alt_data_end+0xf800853c>
10008908:	d9800c17 	ldw	r6,48(sp)
1000890c:	01bcab0e 	bge	zero,r6,10007bbc <__alt_data_end+0xf8007bbc>
10008910:	d9401017 	ldw	r5,64(sp)
10008914:	d9000f17 	ldw	r4,60(sp)
10008918:	000d883a 	mov	r6,zero
1000891c:	01d00934 	movhi	r7,16420
10008920:	00106980 	call	10010698 <__muldf3>
10008924:	81000044 	addi	r4,r16,1
10008928:	d8800f15 	stw	r2,60(sp)
1000892c:	d8c01015 	stw	r3,64(sp)
10008930:	00118800 	call	10011880 <__floatsidf>
10008934:	d9800f17 	ldw	r6,60(sp)
10008938:	d9c01017 	ldw	r7,64(sp)
1000893c:	1009883a 	mov	r4,r2
10008940:	180b883a 	mov	r5,r3
10008944:	00106980 	call	10010698 <__muldf3>
10008948:	01d00734 	movhi	r7,16412
1000894c:	000d883a 	mov	r6,zero
10008950:	1009883a 	mov	r4,r2
10008954:	180b883a 	mov	r5,r3
10008958:	000f1c40 	call	1000f1c4 <__adddf3>
1000895c:	d9c00517 	ldw	r7,20(sp)
10008960:	047f3034 	movhi	r17,64704
10008964:	1021883a 	mov	r16,r2
10008968:	39ffffc4 	addi	r7,r7,-1
1000896c:	d9c01315 	stw	r7,76(sp)
10008970:	1c63883a 	add	r17,r3,r17
10008974:	db000c17 	ldw	r12,48(sp)
10008978:	003bea06 	br	10007924 <__alt_data_end+0xf8007924>
1000897c:	dc000915 	stw	r16,36(sp)
10008980:	003e0e06 	br	100081bc <__alt_data_end+0xf80081bc>
10008984:	01000e44 	movi	r4,57
10008988:	8825883a 	mov	r18,r17
1000898c:	9dc00044 	addi	r23,r19,1
10008990:	99000005 	stb	r4,0(r19)
10008994:	a023883a 	mov	r17,r20
10008998:	dc000915 	stw	r16,36(sp)
1000899c:	003da406 	br	10008030 <__alt_data_end+0xf8008030>
100089a0:	d9801417 	ldw	r6,80(sp)
100089a4:	d9c01517 	ldw	r7,84(sp)
100089a8:	0009883a 	mov	r4,zero
100089ac:	014ff834 	movhi	r5,16352
100089b0:	0010f040 	call	10010f04 <__subdf3>
100089b4:	880d883a 	mov	r6,r17
100089b8:	a00f883a 	mov	r7,r20
100089bc:	1009883a 	mov	r4,r2
100089c0:	180b883a 	mov	r5,r3
100089c4:	00104c80 	call	100104c8 <__gedf2>
100089c8:	00bc7c0e 	bge	zero,r2,10007bbc <__alt_data_end+0xf8007bbc>
100089cc:	01000c04 	movi	r4,48
100089d0:	00000106 	br	100089d8 <_dtoa_r+0x1580>
100089d4:	102f883a 	mov	r23,r2
100089d8:	b8bfffc4 	addi	r2,r23,-1
100089dc:	10c00007 	ldb	r3,0(r2)
100089e0:	193ffc26 	beq	r3,r4,100089d4 <__alt_data_end+0xf80089d4>
100089e4:	d9801317 	ldw	r6,76(sp)
100089e8:	d9800515 	stw	r6,20(sp)
100089ec:	003c4406 	br	10007b00 <__alt_data_end+0xf8007b00>
100089f0:	d9801317 	ldw	r6,76(sp)
100089f4:	d9800515 	stw	r6,20(sp)
100089f8:	003cea06 	br	10007da4 <__alt_data_end+0xf8007da4>
100089fc:	dd800f17 	ldw	r22,60(sp)
10008a00:	dcc01017 	ldw	r19,64(sp)
10008a04:	dc801217 	ldw	r18,72(sp)
10008a08:	003c6c06 	br	10007bbc <__alt_data_end+0xf8007bbc>
10008a0c:	903e031e 	bne	r18,zero,1000821c <__alt_data_end+0xf800821c>
10008a10:	003ebb06 	br	10008500 <__alt_data_end+0xf8008500>
10008a14:	103e6c1e 	bne	r2,zero,100083c8 <__alt_data_end+0xf80083c8>
10008a18:	4080004c 	andi	r2,r8,1
10008a1c:	103e6a26 	beq	r2,zero,100083c8 <__alt_data_end+0xf80083c8>
10008a20:	003e6606 	br	100083bc <__alt_data_end+0xf80083bc>
10008a24:	d8c00317 	ldw	r3,12(sp)
10008a28:	00800084 	movi	r2,2
10008a2c:	10c02916 	blt	r2,r3,10008ad4 <_dtoa_r+0x167c>
10008a30:	d9000c17 	ldw	r4,48(sp)
10008a34:	003e8806 	br	10008458 <__alt_data_end+0xf8008458>
10008a38:	04000084 	movi	r16,2
10008a3c:	003b9d06 	br	100078b4 <__alt_data_end+0xf80078b4>
10008a40:	d9001317 	ldw	r4,76(sp)
10008a44:	d9000515 	stw	r4,20(sp)
10008a48:	003cd606 	br	10007da4 <__alt_data_end+0xf8007da4>
10008a4c:	d8801317 	ldw	r2,76(sp)
10008a50:	d8800515 	stw	r2,20(sp)
10008a54:	003c2a06 	br	10007b00 <__alt_data_end+0xf8007b00>
10008a58:	d9800317 	ldw	r6,12(sp)
10008a5c:	00800084 	movi	r2,2
10008a60:	11801516 	blt	r2,r6,10008ab8 <_dtoa_r+0x1660>
10008a64:	d9c00c17 	ldw	r7,48(sp)
10008a68:	d9c00615 	stw	r7,24(sp)
10008a6c:	003df706 	br	1000824c <__alt_data_end+0xf800824c>
10008a70:	193d3926 	beq	r3,r4,10007f58 <__alt_data_end+0xf8007f58>
10008a74:	00c00f04 	movi	r3,60
10008a78:	1885c83a 	sub	r2,r3,r2
10008a7c:	003ddf06 	br	100081fc <__alt_data_end+0xf80081fc>
10008a80:	e009883a 	mov	r4,fp
10008a84:	e0001115 	stw	zero,68(fp)
10008a88:	000b883a 	mov	r5,zero
10008a8c:	000ab100 	call	1000ab10 <_Balloc>
10008a90:	d8800715 	stw	r2,28(sp)
10008a94:	d8c00717 	ldw	r3,28(sp)
10008a98:	00bfffc4 	movi	r2,-1
10008a9c:	01000044 	movi	r4,1
10008aa0:	d8800c15 	stw	r2,48(sp)
10008aa4:	e0c01015 	stw	r3,64(fp)
10008aa8:	d9000b15 	stw	r4,44(sp)
10008aac:	d8800615 	stw	r2,24(sp)
10008ab0:	d8002215 	stw	zero,136(sp)
10008ab4:	003c4106 	br	10007bbc <__alt_data_end+0xf8007bbc>
10008ab8:	d8c00c17 	ldw	r3,48(sp)
10008abc:	d8c00615 	stw	r3,24(sp)
10008ac0:	003e7006 	br	10008484 <__alt_data_end+0xf8008484>
10008ac4:	04400044 	movi	r17,1
10008ac8:	003b2006 	br	1000774c <__alt_data_end+0xf800774c>
10008acc:	000b883a 	mov	r5,zero
10008ad0:	003b3d06 	br	100077c8 <__alt_data_end+0xf80077c8>
10008ad4:	d8800c17 	ldw	r2,48(sp)
10008ad8:	d8800615 	stw	r2,24(sp)
10008adc:	003e6906 	br	10008484 <__alt_data_end+0xf8008484>

10008ae0 <__sflush_r>:
10008ae0:	2880030b 	ldhu	r2,12(r5)
10008ae4:	defffb04 	addi	sp,sp,-20
10008ae8:	dcc00315 	stw	r19,12(sp)
10008aec:	dc400115 	stw	r17,4(sp)
10008af0:	dfc00415 	stw	ra,16(sp)
10008af4:	dc800215 	stw	r18,8(sp)
10008af8:	dc000015 	stw	r16,0(sp)
10008afc:	10c0020c 	andi	r3,r2,8
10008b00:	2823883a 	mov	r17,r5
10008b04:	2027883a 	mov	r19,r4
10008b08:	1800311e 	bne	r3,zero,10008bd0 <__sflush_r+0xf0>
10008b0c:	28c00117 	ldw	r3,4(r5)
10008b10:	10820014 	ori	r2,r2,2048
10008b14:	2880030d 	sth	r2,12(r5)
10008b18:	00c04b0e 	bge	zero,r3,10008c48 <__sflush_r+0x168>
10008b1c:	8a000a17 	ldw	r8,40(r17)
10008b20:	40002326 	beq	r8,zero,10008bb0 <__sflush_r+0xd0>
10008b24:	9c000017 	ldw	r16,0(r19)
10008b28:	10c4000c 	andi	r3,r2,4096
10008b2c:	98000015 	stw	zero,0(r19)
10008b30:	18004826 	beq	r3,zero,10008c54 <__sflush_r+0x174>
10008b34:	89801417 	ldw	r6,80(r17)
10008b38:	10c0010c 	andi	r3,r2,4
10008b3c:	18000626 	beq	r3,zero,10008b58 <__sflush_r+0x78>
10008b40:	88c00117 	ldw	r3,4(r17)
10008b44:	88800c17 	ldw	r2,48(r17)
10008b48:	30cdc83a 	sub	r6,r6,r3
10008b4c:	10000226 	beq	r2,zero,10008b58 <__sflush_r+0x78>
10008b50:	88800f17 	ldw	r2,60(r17)
10008b54:	308dc83a 	sub	r6,r6,r2
10008b58:	89400717 	ldw	r5,28(r17)
10008b5c:	000f883a 	mov	r7,zero
10008b60:	9809883a 	mov	r4,r19
10008b64:	403ee83a 	callr	r8
10008b68:	00ffffc4 	movi	r3,-1
10008b6c:	10c04426 	beq	r2,r3,10008c80 <__sflush_r+0x1a0>
10008b70:	88c0030b 	ldhu	r3,12(r17)
10008b74:	89000417 	ldw	r4,16(r17)
10008b78:	88000115 	stw	zero,4(r17)
10008b7c:	197dffcc 	andi	r5,r3,63487
10008b80:	8940030d 	sth	r5,12(r17)
10008b84:	89000015 	stw	r4,0(r17)
10008b88:	18c4000c 	andi	r3,r3,4096
10008b8c:	18002c1e 	bne	r3,zero,10008c40 <__sflush_r+0x160>
10008b90:	89400c17 	ldw	r5,48(r17)
10008b94:	9c000015 	stw	r16,0(r19)
10008b98:	28000526 	beq	r5,zero,10008bb0 <__sflush_r+0xd0>
10008b9c:	88801004 	addi	r2,r17,64
10008ba0:	28800226 	beq	r5,r2,10008bac <__sflush_r+0xcc>
10008ba4:	9809883a 	mov	r4,r19
10008ba8:	000925c0 	call	1000925c <_free_r>
10008bac:	88000c15 	stw	zero,48(r17)
10008bb0:	0005883a 	mov	r2,zero
10008bb4:	dfc00417 	ldw	ra,16(sp)
10008bb8:	dcc00317 	ldw	r19,12(sp)
10008bbc:	dc800217 	ldw	r18,8(sp)
10008bc0:	dc400117 	ldw	r17,4(sp)
10008bc4:	dc000017 	ldw	r16,0(sp)
10008bc8:	dec00504 	addi	sp,sp,20
10008bcc:	f800283a 	ret
10008bd0:	2c800417 	ldw	r18,16(r5)
10008bd4:	903ff626 	beq	r18,zero,10008bb0 <__alt_data_end+0xf8008bb0>
10008bd8:	2c000017 	ldw	r16,0(r5)
10008bdc:	108000cc 	andi	r2,r2,3
10008be0:	2c800015 	stw	r18,0(r5)
10008be4:	84a1c83a 	sub	r16,r16,r18
10008be8:	1000131e 	bne	r2,zero,10008c38 <__sflush_r+0x158>
10008bec:	28800517 	ldw	r2,20(r5)
10008bf0:	88800215 	stw	r2,8(r17)
10008bf4:	04000316 	blt	zero,r16,10008c04 <__sflush_r+0x124>
10008bf8:	003fed06 	br	10008bb0 <__alt_data_end+0xf8008bb0>
10008bfc:	90a5883a 	add	r18,r18,r2
10008c00:	043feb0e 	bge	zero,r16,10008bb0 <__alt_data_end+0xf8008bb0>
10008c04:	88800917 	ldw	r2,36(r17)
10008c08:	89400717 	ldw	r5,28(r17)
10008c0c:	800f883a 	mov	r7,r16
10008c10:	900d883a 	mov	r6,r18
10008c14:	9809883a 	mov	r4,r19
10008c18:	103ee83a 	callr	r2
10008c1c:	80a1c83a 	sub	r16,r16,r2
10008c20:	00bff616 	blt	zero,r2,10008bfc <__alt_data_end+0xf8008bfc>
10008c24:	88c0030b 	ldhu	r3,12(r17)
10008c28:	00bfffc4 	movi	r2,-1
10008c2c:	18c01014 	ori	r3,r3,64
10008c30:	88c0030d 	sth	r3,12(r17)
10008c34:	003fdf06 	br	10008bb4 <__alt_data_end+0xf8008bb4>
10008c38:	0005883a 	mov	r2,zero
10008c3c:	003fec06 	br	10008bf0 <__alt_data_end+0xf8008bf0>
10008c40:	88801415 	stw	r2,80(r17)
10008c44:	003fd206 	br	10008b90 <__alt_data_end+0xf8008b90>
10008c48:	28c00f17 	ldw	r3,60(r5)
10008c4c:	00ffb316 	blt	zero,r3,10008b1c <__alt_data_end+0xf8008b1c>
10008c50:	003fd706 	br	10008bb0 <__alt_data_end+0xf8008bb0>
10008c54:	89400717 	ldw	r5,28(r17)
10008c58:	000d883a 	mov	r6,zero
10008c5c:	01c00044 	movi	r7,1
10008c60:	9809883a 	mov	r4,r19
10008c64:	403ee83a 	callr	r8
10008c68:	100d883a 	mov	r6,r2
10008c6c:	00bfffc4 	movi	r2,-1
10008c70:	30801426 	beq	r6,r2,10008cc4 <__sflush_r+0x1e4>
10008c74:	8880030b 	ldhu	r2,12(r17)
10008c78:	8a000a17 	ldw	r8,40(r17)
10008c7c:	003fae06 	br	10008b38 <__alt_data_end+0xf8008b38>
10008c80:	98c00017 	ldw	r3,0(r19)
10008c84:	183fba26 	beq	r3,zero,10008b70 <__alt_data_end+0xf8008b70>
10008c88:	01000744 	movi	r4,29
10008c8c:	19000626 	beq	r3,r4,10008ca8 <__sflush_r+0x1c8>
10008c90:	01000584 	movi	r4,22
10008c94:	19000426 	beq	r3,r4,10008ca8 <__sflush_r+0x1c8>
10008c98:	88c0030b 	ldhu	r3,12(r17)
10008c9c:	18c01014 	ori	r3,r3,64
10008ca0:	88c0030d 	sth	r3,12(r17)
10008ca4:	003fc306 	br	10008bb4 <__alt_data_end+0xf8008bb4>
10008ca8:	8880030b 	ldhu	r2,12(r17)
10008cac:	88c00417 	ldw	r3,16(r17)
10008cb0:	88000115 	stw	zero,4(r17)
10008cb4:	10bdffcc 	andi	r2,r2,63487
10008cb8:	8880030d 	sth	r2,12(r17)
10008cbc:	88c00015 	stw	r3,0(r17)
10008cc0:	003fb306 	br	10008b90 <__alt_data_end+0xf8008b90>
10008cc4:	98800017 	ldw	r2,0(r19)
10008cc8:	103fea26 	beq	r2,zero,10008c74 <__alt_data_end+0xf8008c74>
10008ccc:	00c00744 	movi	r3,29
10008cd0:	10c00226 	beq	r2,r3,10008cdc <__sflush_r+0x1fc>
10008cd4:	00c00584 	movi	r3,22
10008cd8:	10c0031e 	bne	r2,r3,10008ce8 <__sflush_r+0x208>
10008cdc:	9c000015 	stw	r16,0(r19)
10008ce0:	0005883a 	mov	r2,zero
10008ce4:	003fb306 	br	10008bb4 <__alt_data_end+0xf8008bb4>
10008ce8:	88c0030b 	ldhu	r3,12(r17)
10008cec:	3005883a 	mov	r2,r6
10008cf0:	18c01014 	ori	r3,r3,64
10008cf4:	88c0030d 	sth	r3,12(r17)
10008cf8:	003fae06 	br	10008bb4 <__alt_data_end+0xf8008bb4>

10008cfc <_fflush_r>:
10008cfc:	defffd04 	addi	sp,sp,-12
10008d00:	dc000115 	stw	r16,4(sp)
10008d04:	dfc00215 	stw	ra,8(sp)
10008d08:	2021883a 	mov	r16,r4
10008d0c:	20000226 	beq	r4,zero,10008d18 <_fflush_r+0x1c>
10008d10:	20800e17 	ldw	r2,56(r4)
10008d14:	10000c26 	beq	r2,zero,10008d48 <_fflush_r+0x4c>
10008d18:	2880030f 	ldh	r2,12(r5)
10008d1c:	1000051e 	bne	r2,zero,10008d34 <_fflush_r+0x38>
10008d20:	0005883a 	mov	r2,zero
10008d24:	dfc00217 	ldw	ra,8(sp)
10008d28:	dc000117 	ldw	r16,4(sp)
10008d2c:	dec00304 	addi	sp,sp,12
10008d30:	f800283a 	ret
10008d34:	8009883a 	mov	r4,r16
10008d38:	dfc00217 	ldw	ra,8(sp)
10008d3c:	dc000117 	ldw	r16,4(sp)
10008d40:	dec00304 	addi	sp,sp,12
10008d44:	0008ae01 	jmpi	10008ae0 <__sflush_r>
10008d48:	d9400015 	stw	r5,0(sp)
10008d4c:	00090e80 	call	100090e8 <__sinit>
10008d50:	d9400017 	ldw	r5,0(sp)
10008d54:	003ff006 	br	10008d18 <__alt_data_end+0xf8008d18>

10008d58 <fflush>:
10008d58:	20000526 	beq	r4,zero,10008d70 <fflush+0x18>
10008d5c:	00840074 	movhi	r2,4097
10008d60:	109e1a04 	addi	r2,r2,30824
10008d64:	200b883a 	mov	r5,r4
10008d68:	11000017 	ldw	r4,0(r2)
10008d6c:	0008cfc1 	jmpi	10008cfc <_fflush_r>
10008d70:	00840074 	movhi	r2,4097
10008d74:	109e1904 	addi	r2,r2,30820
10008d78:	11000017 	ldw	r4,0(r2)
10008d7c:	01440074 	movhi	r5,4097
10008d80:	29633f04 	addi	r5,r5,-29444
10008d84:	0009af81 	jmpi	10009af8 <_fwalk_reent>

10008d88 <__fp_unlock>:
10008d88:	0005883a 	mov	r2,zero
10008d8c:	f800283a 	ret

10008d90 <_cleanup_r>:
10008d90:	01440074 	movhi	r5,4097
10008d94:	29772504 	addi	r5,r5,-9068
10008d98:	0009af81 	jmpi	10009af8 <_fwalk_reent>

10008d9c <__sinit.part.1>:
10008d9c:	defff704 	addi	sp,sp,-36
10008da0:	00c40074 	movhi	r3,4097
10008da4:	dfc00815 	stw	ra,32(sp)
10008da8:	ddc00715 	stw	r23,28(sp)
10008dac:	dd800615 	stw	r22,24(sp)
10008db0:	dd400515 	stw	r21,20(sp)
10008db4:	dd000415 	stw	r20,16(sp)
10008db8:	dcc00315 	stw	r19,12(sp)
10008dbc:	dc800215 	stw	r18,8(sp)
10008dc0:	dc400115 	stw	r17,4(sp)
10008dc4:	dc000015 	stw	r16,0(sp)
10008dc8:	18e36404 	addi	r3,r3,-29296
10008dcc:	24000117 	ldw	r16,4(r4)
10008dd0:	20c00f15 	stw	r3,60(r4)
10008dd4:	2080bb04 	addi	r2,r4,748
10008dd8:	00c000c4 	movi	r3,3
10008ddc:	20c0b915 	stw	r3,740(r4)
10008de0:	2080ba15 	stw	r2,744(r4)
10008de4:	2000b815 	stw	zero,736(r4)
10008de8:	05c00204 	movi	r23,8
10008dec:	00800104 	movi	r2,4
10008df0:	2025883a 	mov	r18,r4
10008df4:	b80d883a 	mov	r6,r23
10008df8:	81001704 	addi	r4,r16,92
10008dfc:	000b883a 	mov	r5,zero
10008e00:	80000015 	stw	zero,0(r16)
10008e04:	80000115 	stw	zero,4(r16)
10008e08:	80000215 	stw	zero,8(r16)
10008e0c:	8080030d 	sth	r2,12(r16)
10008e10:	80001915 	stw	zero,100(r16)
10008e14:	8000038d 	sth	zero,14(r16)
10008e18:	80000415 	stw	zero,16(r16)
10008e1c:	80000515 	stw	zero,20(r16)
10008e20:	80000615 	stw	zero,24(r16)
10008e24:	000a9e80 	call	1000a9e8 <memset>
10008e28:	05840074 	movhi	r22,4097
10008e2c:	94400217 	ldw	r17,8(r18)
10008e30:	05440074 	movhi	r21,4097
10008e34:	05040074 	movhi	r20,4097
10008e38:	04c40074 	movhi	r19,4097
10008e3c:	b5b07d04 	addi	r22,r22,-15884
10008e40:	ad709404 	addi	r21,r21,-15792
10008e44:	a530b304 	addi	r20,r20,-15668
10008e48:	9cf0ca04 	addi	r19,r19,-15576
10008e4c:	85800815 	stw	r22,32(r16)
10008e50:	85400915 	stw	r21,36(r16)
10008e54:	85000a15 	stw	r20,40(r16)
10008e58:	84c00b15 	stw	r19,44(r16)
10008e5c:	84000715 	stw	r16,28(r16)
10008e60:	00800284 	movi	r2,10
10008e64:	8880030d 	sth	r2,12(r17)
10008e68:	00800044 	movi	r2,1
10008e6c:	b80d883a 	mov	r6,r23
10008e70:	89001704 	addi	r4,r17,92
10008e74:	000b883a 	mov	r5,zero
10008e78:	88000015 	stw	zero,0(r17)
10008e7c:	88000115 	stw	zero,4(r17)
10008e80:	88000215 	stw	zero,8(r17)
10008e84:	88001915 	stw	zero,100(r17)
10008e88:	8880038d 	sth	r2,14(r17)
10008e8c:	88000415 	stw	zero,16(r17)
10008e90:	88000515 	stw	zero,20(r17)
10008e94:	88000615 	stw	zero,24(r17)
10008e98:	000a9e80 	call	1000a9e8 <memset>
10008e9c:	94000317 	ldw	r16,12(r18)
10008ea0:	00800484 	movi	r2,18
10008ea4:	8c400715 	stw	r17,28(r17)
10008ea8:	8d800815 	stw	r22,32(r17)
10008eac:	8d400915 	stw	r21,36(r17)
10008eb0:	8d000a15 	stw	r20,40(r17)
10008eb4:	8cc00b15 	stw	r19,44(r17)
10008eb8:	8080030d 	sth	r2,12(r16)
10008ebc:	00800084 	movi	r2,2
10008ec0:	80000015 	stw	zero,0(r16)
10008ec4:	80000115 	stw	zero,4(r16)
10008ec8:	80000215 	stw	zero,8(r16)
10008ecc:	80001915 	stw	zero,100(r16)
10008ed0:	8080038d 	sth	r2,14(r16)
10008ed4:	80000415 	stw	zero,16(r16)
10008ed8:	80000515 	stw	zero,20(r16)
10008edc:	80000615 	stw	zero,24(r16)
10008ee0:	b80d883a 	mov	r6,r23
10008ee4:	000b883a 	mov	r5,zero
10008ee8:	81001704 	addi	r4,r16,92
10008eec:	000a9e80 	call	1000a9e8 <memset>
10008ef0:	00800044 	movi	r2,1
10008ef4:	84000715 	stw	r16,28(r16)
10008ef8:	85800815 	stw	r22,32(r16)
10008efc:	85400915 	stw	r21,36(r16)
10008f00:	85000a15 	stw	r20,40(r16)
10008f04:	84c00b15 	stw	r19,44(r16)
10008f08:	90800e15 	stw	r2,56(r18)
10008f0c:	dfc00817 	ldw	ra,32(sp)
10008f10:	ddc00717 	ldw	r23,28(sp)
10008f14:	dd800617 	ldw	r22,24(sp)
10008f18:	dd400517 	ldw	r21,20(sp)
10008f1c:	dd000417 	ldw	r20,16(sp)
10008f20:	dcc00317 	ldw	r19,12(sp)
10008f24:	dc800217 	ldw	r18,8(sp)
10008f28:	dc400117 	ldw	r17,4(sp)
10008f2c:	dc000017 	ldw	r16,0(sp)
10008f30:	dec00904 	addi	sp,sp,36
10008f34:	f800283a 	ret

10008f38 <__fp_lock>:
10008f38:	0005883a 	mov	r2,zero
10008f3c:	f800283a 	ret

10008f40 <__sfmoreglue>:
10008f40:	defffc04 	addi	sp,sp,-16
10008f44:	dc800215 	stw	r18,8(sp)
10008f48:	2825883a 	mov	r18,r5
10008f4c:	dc000015 	stw	r16,0(sp)
10008f50:	01401a04 	movi	r5,104
10008f54:	2021883a 	mov	r16,r4
10008f58:	913fffc4 	addi	r4,r18,-1
10008f5c:	dfc00315 	stw	ra,12(sp)
10008f60:	dc400115 	stw	r17,4(sp)
10008f64:	0004b280 	call	10004b28 <__mulsi3>
10008f68:	8009883a 	mov	r4,r16
10008f6c:	11401d04 	addi	r5,r2,116
10008f70:	1023883a 	mov	r17,r2
10008f74:	0009e540 	call	10009e54 <_malloc_r>
10008f78:	1021883a 	mov	r16,r2
10008f7c:	10000726 	beq	r2,zero,10008f9c <__sfmoreglue+0x5c>
10008f80:	11000304 	addi	r4,r2,12
10008f84:	10000015 	stw	zero,0(r2)
10008f88:	14800115 	stw	r18,4(r2)
10008f8c:	11000215 	stw	r4,8(r2)
10008f90:	89801a04 	addi	r6,r17,104
10008f94:	000b883a 	mov	r5,zero
10008f98:	000a9e80 	call	1000a9e8 <memset>
10008f9c:	8005883a 	mov	r2,r16
10008fa0:	dfc00317 	ldw	ra,12(sp)
10008fa4:	dc800217 	ldw	r18,8(sp)
10008fa8:	dc400117 	ldw	r17,4(sp)
10008fac:	dc000017 	ldw	r16,0(sp)
10008fb0:	dec00404 	addi	sp,sp,16
10008fb4:	f800283a 	ret

10008fb8 <__sfp>:
10008fb8:	defffb04 	addi	sp,sp,-20
10008fbc:	dc000015 	stw	r16,0(sp)
10008fc0:	04040074 	movhi	r16,4097
10008fc4:	841e1904 	addi	r16,r16,30820
10008fc8:	dcc00315 	stw	r19,12(sp)
10008fcc:	2027883a 	mov	r19,r4
10008fd0:	81000017 	ldw	r4,0(r16)
10008fd4:	dfc00415 	stw	ra,16(sp)
10008fd8:	dc800215 	stw	r18,8(sp)
10008fdc:	20800e17 	ldw	r2,56(r4)
10008fe0:	dc400115 	stw	r17,4(sp)
10008fe4:	1000021e 	bne	r2,zero,10008ff0 <__sfp+0x38>
10008fe8:	0008d9c0 	call	10008d9c <__sinit.part.1>
10008fec:	81000017 	ldw	r4,0(r16)
10008ff0:	2480b804 	addi	r18,r4,736
10008ff4:	047fffc4 	movi	r17,-1
10008ff8:	91000117 	ldw	r4,4(r18)
10008ffc:	94000217 	ldw	r16,8(r18)
10009000:	213fffc4 	addi	r4,r4,-1
10009004:	20000a16 	blt	r4,zero,10009030 <__sfp+0x78>
10009008:	8080030f 	ldh	r2,12(r16)
1000900c:	10000c26 	beq	r2,zero,10009040 <__sfp+0x88>
10009010:	80c01d04 	addi	r3,r16,116
10009014:	00000206 	br	10009020 <__sfp+0x68>
10009018:	18bfe60f 	ldh	r2,-104(r3)
1000901c:	10000826 	beq	r2,zero,10009040 <__sfp+0x88>
10009020:	213fffc4 	addi	r4,r4,-1
10009024:	1c3ffd04 	addi	r16,r3,-12
10009028:	18c01a04 	addi	r3,r3,104
1000902c:	247ffa1e 	bne	r4,r17,10009018 <__alt_data_end+0xf8009018>
10009030:	90800017 	ldw	r2,0(r18)
10009034:	10001d26 	beq	r2,zero,100090ac <__sfp+0xf4>
10009038:	1025883a 	mov	r18,r2
1000903c:	003fee06 	br	10008ff8 <__alt_data_end+0xf8008ff8>
10009040:	00bfffc4 	movi	r2,-1
10009044:	8080038d 	sth	r2,14(r16)
10009048:	00800044 	movi	r2,1
1000904c:	8080030d 	sth	r2,12(r16)
10009050:	80001915 	stw	zero,100(r16)
10009054:	80000015 	stw	zero,0(r16)
10009058:	80000215 	stw	zero,8(r16)
1000905c:	80000115 	stw	zero,4(r16)
10009060:	80000415 	stw	zero,16(r16)
10009064:	80000515 	stw	zero,20(r16)
10009068:	80000615 	stw	zero,24(r16)
1000906c:	01800204 	movi	r6,8
10009070:	000b883a 	mov	r5,zero
10009074:	81001704 	addi	r4,r16,92
10009078:	000a9e80 	call	1000a9e8 <memset>
1000907c:	8005883a 	mov	r2,r16
10009080:	80000c15 	stw	zero,48(r16)
10009084:	80000d15 	stw	zero,52(r16)
10009088:	80001115 	stw	zero,68(r16)
1000908c:	80001215 	stw	zero,72(r16)
10009090:	dfc00417 	ldw	ra,16(sp)
10009094:	dcc00317 	ldw	r19,12(sp)
10009098:	dc800217 	ldw	r18,8(sp)
1000909c:	dc400117 	ldw	r17,4(sp)
100090a0:	dc000017 	ldw	r16,0(sp)
100090a4:	dec00504 	addi	sp,sp,20
100090a8:	f800283a 	ret
100090ac:	01400104 	movi	r5,4
100090b0:	9809883a 	mov	r4,r19
100090b4:	0008f400 	call	10008f40 <__sfmoreglue>
100090b8:	90800015 	stw	r2,0(r18)
100090bc:	103fde1e 	bne	r2,zero,10009038 <__alt_data_end+0xf8009038>
100090c0:	00800304 	movi	r2,12
100090c4:	98800015 	stw	r2,0(r19)
100090c8:	0005883a 	mov	r2,zero
100090cc:	003ff006 	br	10009090 <__alt_data_end+0xf8009090>

100090d0 <_cleanup>:
100090d0:	00840074 	movhi	r2,4097
100090d4:	109e1904 	addi	r2,r2,30820
100090d8:	11000017 	ldw	r4,0(r2)
100090dc:	01440074 	movhi	r5,4097
100090e0:	29772504 	addi	r5,r5,-9068
100090e4:	0009af81 	jmpi	10009af8 <_fwalk_reent>

100090e8 <__sinit>:
100090e8:	20800e17 	ldw	r2,56(r4)
100090ec:	10000126 	beq	r2,zero,100090f4 <__sinit+0xc>
100090f0:	f800283a 	ret
100090f4:	0008d9c1 	jmpi	10008d9c <__sinit.part.1>

100090f8 <__sfp_lock_acquire>:
100090f8:	f800283a 	ret

100090fc <__sfp_lock_release>:
100090fc:	f800283a 	ret

10009100 <__sinit_lock_acquire>:
10009100:	f800283a 	ret

10009104 <__sinit_lock_release>:
10009104:	f800283a 	ret

10009108 <__fp_lock_all>:
10009108:	00840074 	movhi	r2,4097
1000910c:	109e1a04 	addi	r2,r2,30824
10009110:	11000017 	ldw	r4,0(r2)
10009114:	01440074 	movhi	r5,4097
10009118:	2963ce04 	addi	r5,r5,-28872
1000911c:	0009a341 	jmpi	10009a34 <_fwalk>

10009120 <__fp_unlock_all>:
10009120:	00840074 	movhi	r2,4097
10009124:	109e1a04 	addi	r2,r2,30824
10009128:	11000017 	ldw	r4,0(r2)
1000912c:	01440074 	movhi	r5,4097
10009130:	29636204 	addi	r5,r5,-29304
10009134:	0009a341 	jmpi	10009a34 <_fwalk>

10009138 <_malloc_trim_r>:
10009138:	defffb04 	addi	sp,sp,-20
1000913c:	dcc00315 	stw	r19,12(sp)
10009140:	04c40074 	movhi	r19,4097
10009144:	dc800215 	stw	r18,8(sp)
10009148:	dc400115 	stw	r17,4(sp)
1000914c:	dc000015 	stw	r16,0(sp)
10009150:	dfc00415 	stw	ra,16(sp)
10009154:	2821883a 	mov	r16,r5
10009158:	9cd89204 	addi	r19,r19,25160
1000915c:	2025883a 	mov	r18,r4
10009160:	00120040 	call	10012004 <__malloc_lock>
10009164:	98800217 	ldw	r2,8(r19)
10009168:	14400117 	ldw	r17,4(r2)
1000916c:	00bfff04 	movi	r2,-4
10009170:	88a2703a 	and	r17,r17,r2
10009174:	8c21c83a 	sub	r16,r17,r16
10009178:	8403fbc4 	addi	r16,r16,4079
1000917c:	8020d33a 	srli	r16,r16,12
10009180:	0083ffc4 	movi	r2,4095
10009184:	843fffc4 	addi	r16,r16,-1
10009188:	8020933a 	slli	r16,r16,12
1000918c:	1400060e 	bge	r2,r16,100091a8 <_malloc_trim_r+0x70>
10009190:	000b883a 	mov	r5,zero
10009194:	9009883a 	mov	r4,r18
10009198:	000c1a00 	call	1000c1a0 <_sbrk_r>
1000919c:	98c00217 	ldw	r3,8(r19)
100091a0:	1c47883a 	add	r3,r3,r17
100091a4:	10c00a26 	beq	r2,r3,100091d0 <_malloc_trim_r+0x98>
100091a8:	9009883a 	mov	r4,r18
100091ac:	00120280 	call	10012028 <__malloc_unlock>
100091b0:	0005883a 	mov	r2,zero
100091b4:	dfc00417 	ldw	ra,16(sp)
100091b8:	dcc00317 	ldw	r19,12(sp)
100091bc:	dc800217 	ldw	r18,8(sp)
100091c0:	dc400117 	ldw	r17,4(sp)
100091c4:	dc000017 	ldw	r16,0(sp)
100091c8:	dec00504 	addi	sp,sp,20
100091cc:	f800283a 	ret
100091d0:	040bc83a 	sub	r5,zero,r16
100091d4:	9009883a 	mov	r4,r18
100091d8:	000c1a00 	call	1000c1a0 <_sbrk_r>
100091dc:	00ffffc4 	movi	r3,-1
100091e0:	10c00d26 	beq	r2,r3,10009218 <_malloc_trim_r+0xe0>
100091e4:	00c400b4 	movhi	r3,4098
100091e8:	18ee1804 	addi	r3,r3,-18336
100091ec:	18800017 	ldw	r2,0(r3)
100091f0:	99000217 	ldw	r4,8(r19)
100091f4:	8c23c83a 	sub	r17,r17,r16
100091f8:	8c400054 	ori	r17,r17,1
100091fc:	1421c83a 	sub	r16,r2,r16
10009200:	24400115 	stw	r17,4(r4)
10009204:	9009883a 	mov	r4,r18
10009208:	1c000015 	stw	r16,0(r3)
1000920c:	00120280 	call	10012028 <__malloc_unlock>
10009210:	00800044 	movi	r2,1
10009214:	003fe706 	br	100091b4 <__alt_data_end+0xf80091b4>
10009218:	000b883a 	mov	r5,zero
1000921c:	9009883a 	mov	r4,r18
10009220:	000c1a00 	call	1000c1a0 <_sbrk_r>
10009224:	99000217 	ldw	r4,8(r19)
10009228:	014003c4 	movi	r5,15
1000922c:	1107c83a 	sub	r3,r2,r4
10009230:	28ffdd0e 	bge	r5,r3,100091a8 <__alt_data_end+0xf80091a8>
10009234:	01440074 	movhi	r5,4097
10009238:	295e1c04 	addi	r5,r5,30832
1000923c:	29400017 	ldw	r5,0(r5)
10009240:	18c00054 	ori	r3,r3,1
10009244:	20c00115 	stw	r3,4(r4)
10009248:	00c400b4 	movhi	r3,4098
1000924c:	1145c83a 	sub	r2,r2,r5
10009250:	18ee1804 	addi	r3,r3,-18336
10009254:	18800015 	stw	r2,0(r3)
10009258:	003fd306 	br	100091a8 <__alt_data_end+0xf80091a8>

1000925c <_free_r>:
1000925c:	28004126 	beq	r5,zero,10009364 <_free_r+0x108>
10009260:	defffd04 	addi	sp,sp,-12
10009264:	dc400115 	stw	r17,4(sp)
10009268:	dc000015 	stw	r16,0(sp)
1000926c:	2023883a 	mov	r17,r4
10009270:	2821883a 	mov	r16,r5
10009274:	dfc00215 	stw	ra,8(sp)
10009278:	00120040 	call	10012004 <__malloc_lock>
1000927c:	81ffff17 	ldw	r7,-4(r16)
10009280:	00bfff84 	movi	r2,-2
10009284:	01040074 	movhi	r4,4097
10009288:	81bffe04 	addi	r6,r16,-8
1000928c:	3884703a 	and	r2,r7,r2
10009290:	21189204 	addi	r4,r4,25160
10009294:	308b883a 	add	r5,r6,r2
10009298:	2a400117 	ldw	r9,4(r5)
1000929c:	22000217 	ldw	r8,8(r4)
100092a0:	00ffff04 	movi	r3,-4
100092a4:	48c6703a 	and	r3,r9,r3
100092a8:	2a005726 	beq	r5,r8,10009408 <_free_r+0x1ac>
100092ac:	28c00115 	stw	r3,4(r5)
100092b0:	39c0004c 	andi	r7,r7,1
100092b4:	3800091e 	bne	r7,zero,100092dc <_free_r+0x80>
100092b8:	823ffe17 	ldw	r8,-8(r16)
100092bc:	22400204 	addi	r9,r4,8
100092c0:	320dc83a 	sub	r6,r6,r8
100092c4:	31c00217 	ldw	r7,8(r6)
100092c8:	1205883a 	add	r2,r2,r8
100092cc:	3a406526 	beq	r7,r9,10009464 <_free_r+0x208>
100092d0:	32000317 	ldw	r8,12(r6)
100092d4:	3a000315 	stw	r8,12(r7)
100092d8:	41c00215 	stw	r7,8(r8)
100092dc:	28cf883a 	add	r7,r5,r3
100092e0:	39c00117 	ldw	r7,4(r7)
100092e4:	39c0004c 	andi	r7,r7,1
100092e8:	38003a26 	beq	r7,zero,100093d4 <_free_r+0x178>
100092ec:	10c00054 	ori	r3,r2,1
100092f0:	30c00115 	stw	r3,4(r6)
100092f4:	3087883a 	add	r3,r6,r2
100092f8:	18800015 	stw	r2,0(r3)
100092fc:	00c07fc4 	movi	r3,511
10009300:	18801936 	bltu	r3,r2,10009368 <_free_r+0x10c>
10009304:	1004d0fa 	srli	r2,r2,3
10009308:	01c00044 	movi	r7,1
1000930c:	21400117 	ldw	r5,4(r4)
10009310:	10c00044 	addi	r3,r2,1
10009314:	18c7883a 	add	r3,r3,r3
10009318:	1005d0ba 	srai	r2,r2,2
1000931c:	18c7883a 	add	r3,r3,r3
10009320:	18c7883a 	add	r3,r3,r3
10009324:	1907883a 	add	r3,r3,r4
10009328:	3884983a 	sll	r2,r7,r2
1000932c:	19c00017 	ldw	r7,0(r3)
10009330:	1a3ffe04 	addi	r8,r3,-8
10009334:	1144b03a 	or	r2,r2,r5
10009338:	32000315 	stw	r8,12(r6)
1000933c:	31c00215 	stw	r7,8(r6)
10009340:	20800115 	stw	r2,4(r4)
10009344:	19800015 	stw	r6,0(r3)
10009348:	39800315 	stw	r6,12(r7)
1000934c:	8809883a 	mov	r4,r17
10009350:	dfc00217 	ldw	ra,8(sp)
10009354:	dc400117 	ldw	r17,4(sp)
10009358:	dc000017 	ldw	r16,0(sp)
1000935c:	dec00304 	addi	sp,sp,12
10009360:	00120281 	jmpi	10012028 <__malloc_unlock>
10009364:	f800283a 	ret
10009368:	100ad27a 	srli	r5,r2,9
1000936c:	00c00104 	movi	r3,4
10009370:	19404a36 	bltu	r3,r5,1000949c <_free_r+0x240>
10009374:	100ad1ba 	srli	r5,r2,6
10009378:	28c00e44 	addi	r3,r5,57
1000937c:	18c7883a 	add	r3,r3,r3
10009380:	29400e04 	addi	r5,r5,56
10009384:	18c7883a 	add	r3,r3,r3
10009388:	18c7883a 	add	r3,r3,r3
1000938c:	1909883a 	add	r4,r3,r4
10009390:	20c00017 	ldw	r3,0(r4)
10009394:	01c40074 	movhi	r7,4097
10009398:	213ffe04 	addi	r4,r4,-8
1000939c:	39d89204 	addi	r7,r7,25160
100093a0:	20c04426 	beq	r4,r3,100094b4 <_free_r+0x258>
100093a4:	01ffff04 	movi	r7,-4
100093a8:	19400117 	ldw	r5,4(r3)
100093ac:	29ca703a 	and	r5,r5,r7
100093b0:	1140022e 	bgeu	r2,r5,100093bc <_free_r+0x160>
100093b4:	18c00217 	ldw	r3,8(r3)
100093b8:	20fffb1e 	bne	r4,r3,100093a8 <__alt_data_end+0xf80093a8>
100093bc:	19000317 	ldw	r4,12(r3)
100093c0:	31000315 	stw	r4,12(r6)
100093c4:	30c00215 	stw	r3,8(r6)
100093c8:	21800215 	stw	r6,8(r4)
100093cc:	19800315 	stw	r6,12(r3)
100093d0:	003fde06 	br	1000934c <__alt_data_end+0xf800934c>
100093d4:	29c00217 	ldw	r7,8(r5)
100093d8:	10c5883a 	add	r2,r2,r3
100093dc:	00c40074 	movhi	r3,4097
100093e0:	18d89404 	addi	r3,r3,25168
100093e4:	38c03b26 	beq	r7,r3,100094d4 <_free_r+0x278>
100093e8:	2a000317 	ldw	r8,12(r5)
100093ec:	11400054 	ori	r5,r2,1
100093f0:	3087883a 	add	r3,r6,r2
100093f4:	3a000315 	stw	r8,12(r7)
100093f8:	41c00215 	stw	r7,8(r8)
100093fc:	31400115 	stw	r5,4(r6)
10009400:	18800015 	stw	r2,0(r3)
10009404:	003fbd06 	br	100092fc <__alt_data_end+0xf80092fc>
10009408:	39c0004c 	andi	r7,r7,1
1000940c:	10c5883a 	add	r2,r2,r3
10009410:	3800071e 	bne	r7,zero,10009430 <_free_r+0x1d4>
10009414:	81fffe17 	ldw	r7,-8(r16)
10009418:	31cdc83a 	sub	r6,r6,r7
1000941c:	30c00317 	ldw	r3,12(r6)
10009420:	31400217 	ldw	r5,8(r6)
10009424:	11c5883a 	add	r2,r2,r7
10009428:	28c00315 	stw	r3,12(r5)
1000942c:	19400215 	stw	r5,8(r3)
10009430:	10c00054 	ori	r3,r2,1
10009434:	30c00115 	stw	r3,4(r6)
10009438:	00c40074 	movhi	r3,4097
1000943c:	18de1d04 	addi	r3,r3,30836
10009440:	18c00017 	ldw	r3,0(r3)
10009444:	21800215 	stw	r6,8(r4)
10009448:	10ffc036 	bltu	r2,r3,1000934c <__alt_data_end+0xf800934c>
1000944c:	008400b4 	movhi	r2,4098
10009450:	10a8a504 	addi	r2,r2,-23916
10009454:	11400017 	ldw	r5,0(r2)
10009458:	8809883a 	mov	r4,r17
1000945c:	00091380 	call	10009138 <_malloc_trim_r>
10009460:	003fba06 	br	1000934c <__alt_data_end+0xf800934c>
10009464:	28c9883a 	add	r4,r5,r3
10009468:	21000117 	ldw	r4,4(r4)
1000946c:	2100004c 	andi	r4,r4,1
10009470:	2000391e 	bne	r4,zero,10009558 <_free_r+0x2fc>
10009474:	29c00217 	ldw	r7,8(r5)
10009478:	29000317 	ldw	r4,12(r5)
1000947c:	1885883a 	add	r2,r3,r2
10009480:	10c00054 	ori	r3,r2,1
10009484:	39000315 	stw	r4,12(r7)
10009488:	21c00215 	stw	r7,8(r4)
1000948c:	30c00115 	stw	r3,4(r6)
10009490:	308d883a 	add	r6,r6,r2
10009494:	30800015 	stw	r2,0(r6)
10009498:	003fac06 	br	1000934c <__alt_data_end+0xf800934c>
1000949c:	00c00504 	movi	r3,20
100094a0:	19401536 	bltu	r3,r5,100094f8 <_free_r+0x29c>
100094a4:	28c01704 	addi	r3,r5,92
100094a8:	18c7883a 	add	r3,r3,r3
100094ac:	294016c4 	addi	r5,r5,91
100094b0:	003fb406 	br	10009384 <__alt_data_end+0xf8009384>
100094b4:	280bd0ba 	srai	r5,r5,2
100094b8:	00c00044 	movi	r3,1
100094bc:	38800117 	ldw	r2,4(r7)
100094c0:	194a983a 	sll	r5,r3,r5
100094c4:	2007883a 	mov	r3,r4
100094c8:	2884b03a 	or	r2,r5,r2
100094cc:	38800115 	stw	r2,4(r7)
100094d0:	003fbb06 	br	100093c0 <__alt_data_end+0xf80093c0>
100094d4:	21800515 	stw	r6,20(r4)
100094d8:	21800415 	stw	r6,16(r4)
100094dc:	10c00054 	ori	r3,r2,1
100094e0:	31c00315 	stw	r7,12(r6)
100094e4:	31c00215 	stw	r7,8(r6)
100094e8:	30c00115 	stw	r3,4(r6)
100094ec:	308d883a 	add	r6,r6,r2
100094f0:	30800015 	stw	r2,0(r6)
100094f4:	003f9506 	br	1000934c <__alt_data_end+0xf800934c>
100094f8:	00c01504 	movi	r3,84
100094fc:	19400536 	bltu	r3,r5,10009514 <_free_r+0x2b8>
10009500:	100ad33a 	srli	r5,r2,12
10009504:	28c01bc4 	addi	r3,r5,111
10009508:	18c7883a 	add	r3,r3,r3
1000950c:	29401b84 	addi	r5,r5,110
10009510:	003f9c06 	br	10009384 <__alt_data_end+0xf8009384>
10009514:	00c05504 	movi	r3,340
10009518:	19400536 	bltu	r3,r5,10009530 <_free_r+0x2d4>
1000951c:	100ad3fa 	srli	r5,r2,15
10009520:	28c01e04 	addi	r3,r5,120
10009524:	18c7883a 	add	r3,r3,r3
10009528:	29401dc4 	addi	r5,r5,119
1000952c:	003f9506 	br	10009384 <__alt_data_end+0xf8009384>
10009530:	00c15504 	movi	r3,1364
10009534:	19400536 	bltu	r3,r5,1000954c <_free_r+0x2f0>
10009538:	100ad4ba 	srli	r5,r2,18
1000953c:	28c01f44 	addi	r3,r5,125
10009540:	18c7883a 	add	r3,r3,r3
10009544:	29401f04 	addi	r5,r5,124
10009548:	003f8e06 	br	10009384 <__alt_data_end+0xf8009384>
1000954c:	00c03f84 	movi	r3,254
10009550:	01401f84 	movi	r5,126
10009554:	003f8b06 	br	10009384 <__alt_data_end+0xf8009384>
10009558:	10c00054 	ori	r3,r2,1
1000955c:	30c00115 	stw	r3,4(r6)
10009560:	308d883a 	add	r6,r6,r2
10009564:	30800015 	stw	r2,0(r6)
10009568:	003f7806 	br	1000934c <__alt_data_end+0xf800934c>

1000956c <__sfvwrite_r>:
1000956c:	30800217 	ldw	r2,8(r6)
10009570:	10006726 	beq	r2,zero,10009710 <__sfvwrite_r+0x1a4>
10009574:	28c0030b 	ldhu	r3,12(r5)
10009578:	defff404 	addi	sp,sp,-48
1000957c:	dd400715 	stw	r21,28(sp)
10009580:	dd000615 	stw	r20,24(sp)
10009584:	dc000215 	stw	r16,8(sp)
10009588:	dfc00b15 	stw	ra,44(sp)
1000958c:	df000a15 	stw	fp,40(sp)
10009590:	ddc00915 	stw	r23,36(sp)
10009594:	dd800815 	stw	r22,32(sp)
10009598:	dcc00515 	stw	r19,20(sp)
1000959c:	dc800415 	stw	r18,16(sp)
100095a0:	dc400315 	stw	r17,12(sp)
100095a4:	1880020c 	andi	r2,r3,8
100095a8:	2821883a 	mov	r16,r5
100095ac:	202b883a 	mov	r21,r4
100095b0:	3029883a 	mov	r20,r6
100095b4:	10002726 	beq	r2,zero,10009654 <__sfvwrite_r+0xe8>
100095b8:	28800417 	ldw	r2,16(r5)
100095bc:	10002526 	beq	r2,zero,10009654 <__sfvwrite_r+0xe8>
100095c0:	1880008c 	andi	r2,r3,2
100095c4:	a4400017 	ldw	r17,0(r20)
100095c8:	10002a26 	beq	r2,zero,10009674 <__sfvwrite_r+0x108>
100095cc:	05a00034 	movhi	r22,32768
100095d0:	0027883a 	mov	r19,zero
100095d4:	0025883a 	mov	r18,zero
100095d8:	b5bf0004 	addi	r22,r22,-1024
100095dc:	980d883a 	mov	r6,r19
100095e0:	a809883a 	mov	r4,r21
100095e4:	90004626 	beq	r18,zero,10009700 <__sfvwrite_r+0x194>
100095e8:	900f883a 	mov	r7,r18
100095ec:	b480022e 	bgeu	r22,r18,100095f8 <__sfvwrite_r+0x8c>
100095f0:	01e00034 	movhi	r7,32768
100095f4:	39ff0004 	addi	r7,r7,-1024
100095f8:	80800917 	ldw	r2,36(r16)
100095fc:	81400717 	ldw	r5,28(r16)
10009600:	103ee83a 	callr	r2
10009604:	00805a0e 	bge	zero,r2,10009770 <__sfvwrite_r+0x204>
10009608:	a0c00217 	ldw	r3,8(r20)
1000960c:	98a7883a 	add	r19,r19,r2
10009610:	90a5c83a 	sub	r18,r18,r2
10009614:	1885c83a 	sub	r2,r3,r2
10009618:	a0800215 	stw	r2,8(r20)
1000961c:	103fef1e 	bne	r2,zero,100095dc <__alt_data_end+0xf80095dc>
10009620:	0005883a 	mov	r2,zero
10009624:	dfc00b17 	ldw	ra,44(sp)
10009628:	df000a17 	ldw	fp,40(sp)
1000962c:	ddc00917 	ldw	r23,36(sp)
10009630:	dd800817 	ldw	r22,32(sp)
10009634:	dd400717 	ldw	r21,28(sp)
10009638:	dd000617 	ldw	r20,24(sp)
1000963c:	dcc00517 	ldw	r19,20(sp)
10009640:	dc800417 	ldw	r18,16(sp)
10009644:	dc400317 	ldw	r17,12(sp)
10009648:	dc000217 	ldw	r16,8(sp)
1000964c:	dec00c04 	addi	sp,sp,48
10009650:	f800283a 	ret
10009654:	800b883a 	mov	r5,r16
10009658:	a809883a 	mov	r4,r21
1000965c:	00070dc0 	call	100070dc <__swsetup_r>
10009660:	1000ee1e 	bne	r2,zero,10009a1c <__sfvwrite_r+0x4b0>
10009664:	80c0030b 	ldhu	r3,12(r16)
10009668:	a4400017 	ldw	r17,0(r20)
1000966c:	1880008c 	andi	r2,r3,2
10009670:	103fd61e 	bne	r2,zero,100095cc <__alt_data_end+0xf80095cc>
10009674:	1880004c 	andi	r2,r3,1
10009678:	1000421e 	bne	r2,zero,10009784 <__sfvwrite_r+0x218>
1000967c:	0039883a 	mov	fp,zero
10009680:	0025883a 	mov	r18,zero
10009684:	90001a26 	beq	r18,zero,100096f0 <__sfvwrite_r+0x184>
10009688:	1880800c 	andi	r2,r3,512
1000968c:	84c00217 	ldw	r19,8(r16)
10009690:	10002126 	beq	r2,zero,10009718 <__sfvwrite_r+0x1ac>
10009694:	982f883a 	mov	r23,r19
10009698:	94c09636 	bltu	r18,r19,100098f4 <__sfvwrite_r+0x388>
1000969c:	1881200c 	andi	r2,r3,1152
100096a0:	1000a11e 	bne	r2,zero,10009928 <__sfvwrite_r+0x3bc>
100096a4:	81000017 	ldw	r4,0(r16)
100096a8:	b80d883a 	mov	r6,r23
100096ac:	e00b883a 	mov	r5,fp
100096b0:	000a88c0 	call	1000a88c <memmove>
100096b4:	80c00217 	ldw	r3,8(r16)
100096b8:	81000017 	ldw	r4,0(r16)
100096bc:	9005883a 	mov	r2,r18
100096c0:	1ce7c83a 	sub	r19,r3,r19
100096c4:	25cf883a 	add	r7,r4,r23
100096c8:	84c00215 	stw	r19,8(r16)
100096cc:	81c00015 	stw	r7,0(r16)
100096d0:	a0c00217 	ldw	r3,8(r20)
100096d4:	e0b9883a 	add	fp,fp,r2
100096d8:	90a5c83a 	sub	r18,r18,r2
100096dc:	18a7c83a 	sub	r19,r3,r2
100096e0:	a4c00215 	stw	r19,8(r20)
100096e4:	983fce26 	beq	r19,zero,10009620 <__alt_data_end+0xf8009620>
100096e8:	80c0030b 	ldhu	r3,12(r16)
100096ec:	903fe61e 	bne	r18,zero,10009688 <__alt_data_end+0xf8009688>
100096f0:	8f000017 	ldw	fp,0(r17)
100096f4:	8c800117 	ldw	r18,4(r17)
100096f8:	8c400204 	addi	r17,r17,8
100096fc:	003fe106 	br	10009684 <__alt_data_end+0xf8009684>
10009700:	8cc00017 	ldw	r19,0(r17)
10009704:	8c800117 	ldw	r18,4(r17)
10009708:	8c400204 	addi	r17,r17,8
1000970c:	003fb306 	br	100095dc <__alt_data_end+0xf80095dc>
10009710:	0005883a 	mov	r2,zero
10009714:	f800283a 	ret
10009718:	81000017 	ldw	r4,0(r16)
1000971c:	80800417 	ldw	r2,16(r16)
10009720:	11005a36 	bltu	r2,r4,1000988c <__sfvwrite_r+0x320>
10009724:	85c00517 	ldw	r23,20(r16)
10009728:	95c05836 	bltu	r18,r23,1000988c <__sfvwrite_r+0x320>
1000972c:	00a00034 	movhi	r2,32768
10009730:	10bfffc4 	addi	r2,r2,-1
10009734:	9009883a 	mov	r4,r18
10009738:	1480012e 	bgeu	r2,r18,10009740 <__sfvwrite_r+0x1d4>
1000973c:	1009883a 	mov	r4,r2
10009740:	b80b883a 	mov	r5,r23
10009744:	000f0100 	call	1000f010 <__divsi3>
10009748:	b80b883a 	mov	r5,r23
1000974c:	1009883a 	mov	r4,r2
10009750:	0004b280 	call	10004b28 <__mulsi3>
10009754:	81400717 	ldw	r5,28(r16)
10009758:	80c00917 	ldw	r3,36(r16)
1000975c:	100f883a 	mov	r7,r2
10009760:	e00d883a 	mov	r6,fp
10009764:	a809883a 	mov	r4,r21
10009768:	183ee83a 	callr	r3
1000976c:	00bfd816 	blt	zero,r2,100096d0 <__alt_data_end+0xf80096d0>
10009770:	8080030b 	ldhu	r2,12(r16)
10009774:	10801014 	ori	r2,r2,64
10009778:	8080030d 	sth	r2,12(r16)
1000977c:	00bfffc4 	movi	r2,-1
10009780:	003fa806 	br	10009624 <__alt_data_end+0xf8009624>
10009784:	0027883a 	mov	r19,zero
10009788:	0011883a 	mov	r8,zero
1000978c:	0039883a 	mov	fp,zero
10009790:	0025883a 	mov	r18,zero
10009794:	90001f26 	beq	r18,zero,10009814 <__sfvwrite_r+0x2a8>
10009798:	40005a26 	beq	r8,zero,10009904 <__sfvwrite_r+0x398>
1000979c:	982d883a 	mov	r22,r19
100097a0:	94c0012e 	bgeu	r18,r19,100097a8 <__sfvwrite_r+0x23c>
100097a4:	902d883a 	mov	r22,r18
100097a8:	81000017 	ldw	r4,0(r16)
100097ac:	80800417 	ldw	r2,16(r16)
100097b0:	b02f883a 	mov	r23,r22
100097b4:	81c00517 	ldw	r7,20(r16)
100097b8:	1100032e 	bgeu	r2,r4,100097c8 <__sfvwrite_r+0x25c>
100097bc:	80c00217 	ldw	r3,8(r16)
100097c0:	38c7883a 	add	r3,r7,r3
100097c4:	1d801816 	blt	r3,r22,10009828 <__sfvwrite_r+0x2bc>
100097c8:	b1c03e16 	blt	r22,r7,100098c4 <__sfvwrite_r+0x358>
100097cc:	80800917 	ldw	r2,36(r16)
100097d0:	81400717 	ldw	r5,28(r16)
100097d4:	e00d883a 	mov	r6,fp
100097d8:	da000115 	stw	r8,4(sp)
100097dc:	a809883a 	mov	r4,r21
100097e0:	103ee83a 	callr	r2
100097e4:	102f883a 	mov	r23,r2
100097e8:	da000117 	ldw	r8,4(sp)
100097ec:	00bfe00e 	bge	zero,r2,10009770 <__alt_data_end+0xf8009770>
100097f0:	9de7c83a 	sub	r19,r19,r23
100097f4:	98001f26 	beq	r19,zero,10009874 <__sfvwrite_r+0x308>
100097f8:	a0800217 	ldw	r2,8(r20)
100097fc:	e5f9883a 	add	fp,fp,r23
10009800:	95e5c83a 	sub	r18,r18,r23
10009804:	15efc83a 	sub	r23,r2,r23
10009808:	a5c00215 	stw	r23,8(r20)
1000980c:	b83f8426 	beq	r23,zero,10009620 <__alt_data_end+0xf8009620>
10009810:	903fe11e 	bne	r18,zero,10009798 <__alt_data_end+0xf8009798>
10009814:	8f000017 	ldw	fp,0(r17)
10009818:	8c800117 	ldw	r18,4(r17)
1000981c:	0011883a 	mov	r8,zero
10009820:	8c400204 	addi	r17,r17,8
10009824:	003fdb06 	br	10009794 <__alt_data_end+0xf8009794>
10009828:	180d883a 	mov	r6,r3
1000982c:	e00b883a 	mov	r5,fp
10009830:	da000115 	stw	r8,4(sp)
10009834:	d8c00015 	stw	r3,0(sp)
10009838:	000a88c0 	call	1000a88c <memmove>
1000983c:	d8c00017 	ldw	r3,0(sp)
10009840:	80800017 	ldw	r2,0(r16)
10009844:	800b883a 	mov	r5,r16
10009848:	a809883a 	mov	r4,r21
1000984c:	10c5883a 	add	r2,r2,r3
10009850:	80800015 	stw	r2,0(r16)
10009854:	d8c00015 	stw	r3,0(sp)
10009858:	0008cfc0 	call	10008cfc <_fflush_r>
1000985c:	d8c00017 	ldw	r3,0(sp)
10009860:	da000117 	ldw	r8,4(sp)
10009864:	103fc21e 	bne	r2,zero,10009770 <__alt_data_end+0xf8009770>
10009868:	182f883a 	mov	r23,r3
1000986c:	9de7c83a 	sub	r19,r19,r23
10009870:	983fe11e 	bne	r19,zero,100097f8 <__alt_data_end+0xf80097f8>
10009874:	800b883a 	mov	r5,r16
10009878:	a809883a 	mov	r4,r21
1000987c:	0008cfc0 	call	10008cfc <_fflush_r>
10009880:	103fbb1e 	bne	r2,zero,10009770 <__alt_data_end+0xf8009770>
10009884:	0011883a 	mov	r8,zero
10009888:	003fdb06 	br	100097f8 <__alt_data_end+0xf80097f8>
1000988c:	94c0012e 	bgeu	r18,r19,10009894 <__sfvwrite_r+0x328>
10009890:	9027883a 	mov	r19,r18
10009894:	980d883a 	mov	r6,r19
10009898:	e00b883a 	mov	r5,fp
1000989c:	000a88c0 	call	1000a88c <memmove>
100098a0:	80800217 	ldw	r2,8(r16)
100098a4:	80c00017 	ldw	r3,0(r16)
100098a8:	14c5c83a 	sub	r2,r2,r19
100098ac:	1cc7883a 	add	r3,r3,r19
100098b0:	80800215 	stw	r2,8(r16)
100098b4:	80c00015 	stw	r3,0(r16)
100098b8:	10004326 	beq	r2,zero,100099c8 <__sfvwrite_r+0x45c>
100098bc:	9805883a 	mov	r2,r19
100098c0:	003f8306 	br	100096d0 <__alt_data_end+0xf80096d0>
100098c4:	b00d883a 	mov	r6,r22
100098c8:	e00b883a 	mov	r5,fp
100098cc:	da000115 	stw	r8,4(sp)
100098d0:	000a88c0 	call	1000a88c <memmove>
100098d4:	80800217 	ldw	r2,8(r16)
100098d8:	80c00017 	ldw	r3,0(r16)
100098dc:	da000117 	ldw	r8,4(sp)
100098e0:	1585c83a 	sub	r2,r2,r22
100098e4:	1dad883a 	add	r22,r3,r22
100098e8:	80800215 	stw	r2,8(r16)
100098ec:	85800015 	stw	r22,0(r16)
100098f0:	003fbf06 	br	100097f0 <__alt_data_end+0xf80097f0>
100098f4:	81000017 	ldw	r4,0(r16)
100098f8:	9027883a 	mov	r19,r18
100098fc:	902f883a 	mov	r23,r18
10009900:	003f6906 	br	100096a8 <__alt_data_end+0xf80096a8>
10009904:	900d883a 	mov	r6,r18
10009908:	01400284 	movi	r5,10
1000990c:	e009883a 	mov	r4,fp
10009910:	000a6600 	call	1000a660 <memchr>
10009914:	10003e26 	beq	r2,zero,10009a10 <__sfvwrite_r+0x4a4>
10009918:	10800044 	addi	r2,r2,1
1000991c:	1727c83a 	sub	r19,r2,fp
10009920:	02000044 	movi	r8,1
10009924:	003f9d06 	br	1000979c <__alt_data_end+0xf800979c>
10009928:	80800517 	ldw	r2,20(r16)
1000992c:	81400417 	ldw	r5,16(r16)
10009930:	81c00017 	ldw	r7,0(r16)
10009934:	10a7883a 	add	r19,r2,r2
10009938:	9885883a 	add	r2,r19,r2
1000993c:	1026d7fa 	srli	r19,r2,31
10009940:	396dc83a 	sub	r22,r7,r5
10009944:	b1000044 	addi	r4,r22,1
10009948:	9885883a 	add	r2,r19,r2
1000994c:	1027d07a 	srai	r19,r2,1
10009950:	2485883a 	add	r2,r4,r18
10009954:	980d883a 	mov	r6,r19
10009958:	9880022e 	bgeu	r19,r2,10009964 <__sfvwrite_r+0x3f8>
1000995c:	1027883a 	mov	r19,r2
10009960:	100d883a 	mov	r6,r2
10009964:	18c1000c 	andi	r3,r3,1024
10009968:	18001c26 	beq	r3,zero,100099dc <__sfvwrite_r+0x470>
1000996c:	300b883a 	mov	r5,r6
10009970:	a809883a 	mov	r4,r21
10009974:	0009e540 	call	10009e54 <_malloc_r>
10009978:	102f883a 	mov	r23,r2
1000997c:	10002926 	beq	r2,zero,10009a24 <__sfvwrite_r+0x4b8>
10009980:	81400417 	ldw	r5,16(r16)
10009984:	b00d883a 	mov	r6,r22
10009988:	1009883a 	mov	r4,r2
1000998c:	000a7440 	call	1000a744 <memcpy>
10009990:	8080030b 	ldhu	r2,12(r16)
10009994:	00fedfc4 	movi	r3,-1153
10009998:	10c4703a 	and	r2,r2,r3
1000999c:	10802014 	ori	r2,r2,128
100099a0:	8080030d 	sth	r2,12(r16)
100099a4:	bd89883a 	add	r4,r23,r22
100099a8:	9d8fc83a 	sub	r7,r19,r22
100099ac:	85c00415 	stw	r23,16(r16)
100099b0:	84c00515 	stw	r19,20(r16)
100099b4:	81000015 	stw	r4,0(r16)
100099b8:	9027883a 	mov	r19,r18
100099bc:	81c00215 	stw	r7,8(r16)
100099c0:	902f883a 	mov	r23,r18
100099c4:	003f3806 	br	100096a8 <__alt_data_end+0xf80096a8>
100099c8:	800b883a 	mov	r5,r16
100099cc:	a809883a 	mov	r4,r21
100099d0:	0008cfc0 	call	10008cfc <_fflush_r>
100099d4:	103fb926 	beq	r2,zero,100098bc <__alt_data_end+0xf80098bc>
100099d8:	003f6506 	br	10009770 <__alt_data_end+0xf8009770>
100099dc:	a809883a 	mov	r4,r21
100099e0:	000bbc80 	call	1000bbc8 <_realloc_r>
100099e4:	102f883a 	mov	r23,r2
100099e8:	103fee1e 	bne	r2,zero,100099a4 <__alt_data_end+0xf80099a4>
100099ec:	81400417 	ldw	r5,16(r16)
100099f0:	a809883a 	mov	r4,r21
100099f4:	000925c0 	call	1000925c <_free_r>
100099f8:	8080030b 	ldhu	r2,12(r16)
100099fc:	00ffdfc4 	movi	r3,-129
10009a00:	1884703a 	and	r2,r3,r2
10009a04:	00c00304 	movi	r3,12
10009a08:	a8c00015 	stw	r3,0(r21)
10009a0c:	003f5906 	br	10009774 <__alt_data_end+0xf8009774>
10009a10:	94c00044 	addi	r19,r18,1
10009a14:	02000044 	movi	r8,1
10009a18:	003f6006 	br	1000979c <__alt_data_end+0xf800979c>
10009a1c:	00bfffc4 	movi	r2,-1
10009a20:	003f0006 	br	10009624 <__alt_data_end+0xf8009624>
10009a24:	00800304 	movi	r2,12
10009a28:	a8800015 	stw	r2,0(r21)
10009a2c:	8080030b 	ldhu	r2,12(r16)
10009a30:	003f5006 	br	10009774 <__alt_data_end+0xf8009774>

10009a34 <_fwalk>:
10009a34:	defff704 	addi	sp,sp,-36
10009a38:	dd000415 	stw	r20,16(sp)
10009a3c:	dfc00815 	stw	ra,32(sp)
10009a40:	ddc00715 	stw	r23,28(sp)
10009a44:	dd800615 	stw	r22,24(sp)
10009a48:	dd400515 	stw	r21,20(sp)
10009a4c:	dcc00315 	stw	r19,12(sp)
10009a50:	dc800215 	stw	r18,8(sp)
10009a54:	dc400115 	stw	r17,4(sp)
10009a58:	dc000015 	stw	r16,0(sp)
10009a5c:	2500b804 	addi	r20,r4,736
10009a60:	a0002326 	beq	r20,zero,10009af0 <_fwalk+0xbc>
10009a64:	282b883a 	mov	r21,r5
10009a68:	002f883a 	mov	r23,zero
10009a6c:	05800044 	movi	r22,1
10009a70:	04ffffc4 	movi	r19,-1
10009a74:	a4400117 	ldw	r17,4(r20)
10009a78:	a4800217 	ldw	r18,8(r20)
10009a7c:	8c7fffc4 	addi	r17,r17,-1
10009a80:	88000d16 	blt	r17,zero,10009ab8 <_fwalk+0x84>
10009a84:	94000304 	addi	r16,r18,12
10009a88:	94800384 	addi	r18,r18,14
10009a8c:	8080000b 	ldhu	r2,0(r16)
10009a90:	8c7fffc4 	addi	r17,r17,-1
10009a94:	813ffd04 	addi	r4,r16,-12
10009a98:	b080042e 	bgeu	r22,r2,10009aac <_fwalk+0x78>
10009a9c:	9080000f 	ldh	r2,0(r18)
10009aa0:	14c00226 	beq	r2,r19,10009aac <_fwalk+0x78>
10009aa4:	a83ee83a 	callr	r21
10009aa8:	b8aeb03a 	or	r23,r23,r2
10009aac:	84001a04 	addi	r16,r16,104
10009ab0:	94801a04 	addi	r18,r18,104
10009ab4:	8cfff51e 	bne	r17,r19,10009a8c <__alt_data_end+0xf8009a8c>
10009ab8:	a5000017 	ldw	r20,0(r20)
10009abc:	a03fed1e 	bne	r20,zero,10009a74 <__alt_data_end+0xf8009a74>
10009ac0:	b805883a 	mov	r2,r23
10009ac4:	dfc00817 	ldw	ra,32(sp)
10009ac8:	ddc00717 	ldw	r23,28(sp)
10009acc:	dd800617 	ldw	r22,24(sp)
10009ad0:	dd400517 	ldw	r21,20(sp)
10009ad4:	dd000417 	ldw	r20,16(sp)
10009ad8:	dcc00317 	ldw	r19,12(sp)
10009adc:	dc800217 	ldw	r18,8(sp)
10009ae0:	dc400117 	ldw	r17,4(sp)
10009ae4:	dc000017 	ldw	r16,0(sp)
10009ae8:	dec00904 	addi	sp,sp,36
10009aec:	f800283a 	ret
10009af0:	002f883a 	mov	r23,zero
10009af4:	003ff206 	br	10009ac0 <__alt_data_end+0xf8009ac0>

10009af8 <_fwalk_reent>:
10009af8:	defff704 	addi	sp,sp,-36
10009afc:	dd000415 	stw	r20,16(sp)
10009b00:	dfc00815 	stw	ra,32(sp)
10009b04:	ddc00715 	stw	r23,28(sp)
10009b08:	dd800615 	stw	r22,24(sp)
10009b0c:	dd400515 	stw	r21,20(sp)
10009b10:	dcc00315 	stw	r19,12(sp)
10009b14:	dc800215 	stw	r18,8(sp)
10009b18:	dc400115 	stw	r17,4(sp)
10009b1c:	dc000015 	stw	r16,0(sp)
10009b20:	2500b804 	addi	r20,r4,736
10009b24:	a0002326 	beq	r20,zero,10009bb4 <_fwalk_reent+0xbc>
10009b28:	282b883a 	mov	r21,r5
10009b2c:	2027883a 	mov	r19,r4
10009b30:	002f883a 	mov	r23,zero
10009b34:	05800044 	movi	r22,1
10009b38:	04bfffc4 	movi	r18,-1
10009b3c:	a4400117 	ldw	r17,4(r20)
10009b40:	a4000217 	ldw	r16,8(r20)
10009b44:	8c7fffc4 	addi	r17,r17,-1
10009b48:	88000c16 	blt	r17,zero,10009b7c <_fwalk_reent+0x84>
10009b4c:	84000304 	addi	r16,r16,12
10009b50:	8080000b 	ldhu	r2,0(r16)
10009b54:	8c7fffc4 	addi	r17,r17,-1
10009b58:	817ffd04 	addi	r5,r16,-12
10009b5c:	b080052e 	bgeu	r22,r2,10009b74 <_fwalk_reent+0x7c>
10009b60:	8080008f 	ldh	r2,2(r16)
10009b64:	9809883a 	mov	r4,r19
10009b68:	14800226 	beq	r2,r18,10009b74 <_fwalk_reent+0x7c>
10009b6c:	a83ee83a 	callr	r21
10009b70:	b8aeb03a 	or	r23,r23,r2
10009b74:	84001a04 	addi	r16,r16,104
10009b78:	8cbff51e 	bne	r17,r18,10009b50 <__alt_data_end+0xf8009b50>
10009b7c:	a5000017 	ldw	r20,0(r20)
10009b80:	a03fee1e 	bne	r20,zero,10009b3c <__alt_data_end+0xf8009b3c>
10009b84:	b805883a 	mov	r2,r23
10009b88:	dfc00817 	ldw	ra,32(sp)
10009b8c:	ddc00717 	ldw	r23,28(sp)
10009b90:	dd800617 	ldw	r22,24(sp)
10009b94:	dd400517 	ldw	r21,20(sp)
10009b98:	dd000417 	ldw	r20,16(sp)
10009b9c:	dcc00317 	ldw	r19,12(sp)
10009ba0:	dc800217 	ldw	r18,8(sp)
10009ba4:	dc400117 	ldw	r17,4(sp)
10009ba8:	dc000017 	ldw	r16,0(sp)
10009bac:	dec00904 	addi	sp,sp,36
10009bb0:	f800283a 	ret
10009bb4:	002f883a 	mov	r23,zero
10009bb8:	003ff206 	br	10009b84 <__alt_data_end+0xf8009b84>

10009bbc <_setlocale_r>:
10009bbc:	30001b26 	beq	r6,zero,10009c2c <_setlocale_r+0x70>
10009bc0:	01440074 	movhi	r5,4097
10009bc4:	defffe04 	addi	sp,sp,-8
10009bc8:	29531a04 	addi	r5,r5,19560
10009bcc:	3009883a 	mov	r4,r6
10009bd0:	dc000015 	stw	r16,0(sp)
10009bd4:	dfc00115 	stw	ra,4(sp)
10009bd8:	3021883a 	mov	r16,r6
10009bdc:	000c3300 	call	1000c330 <strcmp>
10009be0:	1000061e 	bne	r2,zero,10009bfc <_setlocale_r+0x40>
10009be4:	00840074 	movhi	r2,4097
10009be8:	10931904 	addi	r2,r2,19556
10009bec:	dfc00117 	ldw	ra,4(sp)
10009bf0:	dc000017 	ldw	r16,0(sp)
10009bf4:	dec00204 	addi	sp,sp,8
10009bf8:	f800283a 	ret
10009bfc:	01440074 	movhi	r5,4097
10009c00:	29531904 	addi	r5,r5,19556
10009c04:	8009883a 	mov	r4,r16
10009c08:	000c3300 	call	1000c330 <strcmp>
10009c0c:	103ff526 	beq	r2,zero,10009be4 <__alt_data_end+0xf8009be4>
10009c10:	01440074 	movhi	r5,4097
10009c14:	29530404 	addi	r5,r5,19472
10009c18:	8009883a 	mov	r4,r16
10009c1c:	000c3300 	call	1000c330 <strcmp>
10009c20:	103ff026 	beq	r2,zero,10009be4 <__alt_data_end+0xf8009be4>
10009c24:	0005883a 	mov	r2,zero
10009c28:	003ff006 	br	10009bec <__alt_data_end+0xf8009bec>
10009c2c:	00840074 	movhi	r2,4097
10009c30:	10931904 	addi	r2,r2,19556
10009c34:	f800283a 	ret

10009c38 <__locale_charset>:
10009c38:	00840074 	movhi	r2,4097
10009c3c:	10987c04 	addi	r2,r2,25072
10009c40:	f800283a 	ret

10009c44 <__locale_mb_cur_max>:
10009c44:	00840074 	movhi	r2,4097
10009c48:	109e1b04 	addi	r2,r2,30828
10009c4c:	10800017 	ldw	r2,0(r2)
10009c50:	f800283a 	ret

10009c54 <__locale_msgcharset>:
10009c54:	00840074 	movhi	r2,4097
10009c58:	10987404 	addi	r2,r2,25040
10009c5c:	f800283a 	ret

10009c60 <__locale_cjk_lang>:
10009c60:	0005883a 	mov	r2,zero
10009c64:	f800283a 	ret

10009c68 <_localeconv_r>:
10009c68:	00840074 	movhi	r2,4097
10009c6c:	10988404 	addi	r2,r2,25104
10009c70:	f800283a 	ret

10009c74 <setlocale>:
10009c74:	00840074 	movhi	r2,4097
10009c78:	109e1a04 	addi	r2,r2,30824
10009c7c:	280d883a 	mov	r6,r5
10009c80:	200b883a 	mov	r5,r4
10009c84:	11000017 	ldw	r4,0(r2)
10009c88:	0009bbc1 	jmpi	10009bbc <_setlocale_r>

10009c8c <localeconv>:
10009c8c:	00840074 	movhi	r2,4097
10009c90:	10988404 	addi	r2,r2,25104
10009c94:	f800283a 	ret

10009c98 <__smakebuf_r>:
10009c98:	2880030b 	ldhu	r2,12(r5)
10009c9c:	10c0008c 	andi	r3,r2,2
10009ca0:	1800411e 	bne	r3,zero,10009da8 <__smakebuf_r+0x110>
10009ca4:	deffec04 	addi	sp,sp,-80
10009ca8:	dc000f15 	stw	r16,60(sp)
10009cac:	2821883a 	mov	r16,r5
10009cb0:	2940038f 	ldh	r5,14(r5)
10009cb4:	dc401015 	stw	r17,64(sp)
10009cb8:	dfc01315 	stw	ra,76(sp)
10009cbc:	dcc01215 	stw	r19,72(sp)
10009cc0:	dc801115 	stw	r18,68(sp)
10009cc4:	2023883a 	mov	r17,r4
10009cc8:	28001c16 	blt	r5,zero,10009d3c <__smakebuf_r+0xa4>
10009ccc:	d80d883a 	mov	r6,sp
10009cd0:	000dfa00 	call	1000dfa0 <_fstat_r>
10009cd4:	10001816 	blt	r2,zero,10009d38 <__smakebuf_r+0xa0>
10009cd8:	d8800117 	ldw	r2,4(sp)
10009cdc:	00e00014 	movui	r3,32768
10009ce0:	10bc000c 	andi	r2,r2,61440
10009ce4:	14c80020 	cmpeqi	r19,r2,8192
10009ce8:	10c03726 	beq	r2,r3,10009dc8 <__smakebuf_r+0x130>
10009cec:	80c0030b 	ldhu	r3,12(r16)
10009cf0:	18c20014 	ori	r3,r3,2048
10009cf4:	80c0030d 	sth	r3,12(r16)
10009cf8:	00c80004 	movi	r3,8192
10009cfc:	10c0521e 	bne	r2,r3,10009e48 <__smakebuf_r+0x1b0>
10009d00:	8140038f 	ldh	r5,14(r16)
10009d04:	8809883a 	mov	r4,r17
10009d08:	000dffc0 	call	1000dffc <_isatty_r>
10009d0c:	10004c26 	beq	r2,zero,10009e40 <__smakebuf_r+0x1a8>
10009d10:	8080030b 	ldhu	r2,12(r16)
10009d14:	80c010c4 	addi	r3,r16,67
10009d18:	80c00015 	stw	r3,0(r16)
10009d1c:	10800054 	ori	r2,r2,1
10009d20:	8080030d 	sth	r2,12(r16)
10009d24:	00800044 	movi	r2,1
10009d28:	80c00415 	stw	r3,16(r16)
10009d2c:	80800515 	stw	r2,20(r16)
10009d30:	04810004 	movi	r18,1024
10009d34:	00000706 	br	10009d54 <__smakebuf_r+0xbc>
10009d38:	8080030b 	ldhu	r2,12(r16)
10009d3c:	10c0200c 	andi	r3,r2,128
10009d40:	18001f1e 	bne	r3,zero,10009dc0 <__smakebuf_r+0x128>
10009d44:	04810004 	movi	r18,1024
10009d48:	10820014 	ori	r2,r2,2048
10009d4c:	8080030d 	sth	r2,12(r16)
10009d50:	0027883a 	mov	r19,zero
10009d54:	900b883a 	mov	r5,r18
10009d58:	8809883a 	mov	r4,r17
10009d5c:	0009e540 	call	10009e54 <_malloc_r>
10009d60:	10002c26 	beq	r2,zero,10009e14 <__smakebuf_r+0x17c>
10009d64:	80c0030b 	ldhu	r3,12(r16)
10009d68:	01040074 	movhi	r4,4097
10009d6c:	21236404 	addi	r4,r4,-29296
10009d70:	89000f15 	stw	r4,60(r17)
10009d74:	18c02014 	ori	r3,r3,128
10009d78:	80c0030d 	sth	r3,12(r16)
10009d7c:	80800015 	stw	r2,0(r16)
10009d80:	80800415 	stw	r2,16(r16)
10009d84:	84800515 	stw	r18,20(r16)
10009d88:	98001a1e 	bne	r19,zero,10009df4 <__smakebuf_r+0x15c>
10009d8c:	dfc01317 	ldw	ra,76(sp)
10009d90:	dcc01217 	ldw	r19,72(sp)
10009d94:	dc801117 	ldw	r18,68(sp)
10009d98:	dc401017 	ldw	r17,64(sp)
10009d9c:	dc000f17 	ldw	r16,60(sp)
10009da0:	dec01404 	addi	sp,sp,80
10009da4:	f800283a 	ret
10009da8:	288010c4 	addi	r2,r5,67
10009dac:	28800015 	stw	r2,0(r5)
10009db0:	28800415 	stw	r2,16(r5)
10009db4:	00800044 	movi	r2,1
10009db8:	28800515 	stw	r2,20(r5)
10009dbc:	f800283a 	ret
10009dc0:	04801004 	movi	r18,64
10009dc4:	003fe006 	br	10009d48 <__alt_data_end+0xf8009d48>
10009dc8:	81000a17 	ldw	r4,40(r16)
10009dcc:	00c40074 	movhi	r3,4097
10009dd0:	18f0b304 	addi	r3,r3,-15668
10009dd4:	20ffc51e 	bne	r4,r3,10009cec <__alt_data_end+0xf8009cec>
10009dd8:	8080030b 	ldhu	r2,12(r16)
10009ddc:	04810004 	movi	r18,1024
10009de0:	84801315 	stw	r18,76(r16)
10009de4:	1484b03a 	or	r2,r2,r18
10009de8:	8080030d 	sth	r2,12(r16)
10009dec:	0027883a 	mov	r19,zero
10009df0:	003fd806 	br	10009d54 <__alt_data_end+0xf8009d54>
10009df4:	8140038f 	ldh	r5,14(r16)
10009df8:	8809883a 	mov	r4,r17
10009dfc:	000dffc0 	call	1000dffc <_isatty_r>
10009e00:	103fe226 	beq	r2,zero,10009d8c <__alt_data_end+0xf8009d8c>
10009e04:	8080030b 	ldhu	r2,12(r16)
10009e08:	10800054 	ori	r2,r2,1
10009e0c:	8080030d 	sth	r2,12(r16)
10009e10:	003fde06 	br	10009d8c <__alt_data_end+0xf8009d8c>
10009e14:	8080030b 	ldhu	r2,12(r16)
10009e18:	10c0800c 	andi	r3,r2,512
10009e1c:	183fdb1e 	bne	r3,zero,10009d8c <__alt_data_end+0xf8009d8c>
10009e20:	10800094 	ori	r2,r2,2
10009e24:	80c010c4 	addi	r3,r16,67
10009e28:	8080030d 	sth	r2,12(r16)
10009e2c:	00800044 	movi	r2,1
10009e30:	80c00015 	stw	r3,0(r16)
10009e34:	80c00415 	stw	r3,16(r16)
10009e38:	80800515 	stw	r2,20(r16)
10009e3c:	003fd306 	br	10009d8c <__alt_data_end+0xf8009d8c>
10009e40:	04810004 	movi	r18,1024
10009e44:	003fc306 	br	10009d54 <__alt_data_end+0xf8009d54>
10009e48:	0027883a 	mov	r19,zero
10009e4c:	04810004 	movi	r18,1024
10009e50:	003fc006 	br	10009d54 <__alt_data_end+0xf8009d54>

10009e54 <_malloc_r>:
10009e54:	defff504 	addi	sp,sp,-44
10009e58:	dc800315 	stw	r18,12(sp)
10009e5c:	dfc00a15 	stw	ra,40(sp)
10009e60:	df000915 	stw	fp,36(sp)
10009e64:	ddc00815 	stw	r23,32(sp)
10009e68:	dd800715 	stw	r22,28(sp)
10009e6c:	dd400615 	stw	r21,24(sp)
10009e70:	dd000515 	stw	r20,20(sp)
10009e74:	dcc00415 	stw	r19,16(sp)
10009e78:	dc400215 	stw	r17,8(sp)
10009e7c:	dc000115 	stw	r16,4(sp)
10009e80:	288002c4 	addi	r2,r5,11
10009e84:	00c00584 	movi	r3,22
10009e88:	2025883a 	mov	r18,r4
10009e8c:	18807f2e 	bgeu	r3,r2,1000a08c <_malloc_r+0x238>
10009e90:	047ffe04 	movi	r17,-8
10009e94:	1462703a 	and	r17,r2,r17
10009e98:	8800a316 	blt	r17,zero,1000a128 <_malloc_r+0x2d4>
10009e9c:	8940a236 	bltu	r17,r5,1000a128 <_malloc_r+0x2d4>
10009ea0:	00120040 	call	10012004 <__malloc_lock>
10009ea4:	00807dc4 	movi	r2,503
10009ea8:	1441e92e 	bgeu	r2,r17,1000a650 <_malloc_r+0x7fc>
10009eac:	8804d27a 	srli	r2,r17,9
10009eb0:	1000a126 	beq	r2,zero,1000a138 <_malloc_r+0x2e4>
10009eb4:	00c00104 	movi	r3,4
10009eb8:	18811e36 	bltu	r3,r2,1000a334 <_malloc_r+0x4e0>
10009ebc:	8804d1ba 	srli	r2,r17,6
10009ec0:	12000e44 	addi	r8,r2,57
10009ec4:	11c00e04 	addi	r7,r2,56
10009ec8:	4209883a 	add	r4,r8,r8
10009ecc:	04c40074 	movhi	r19,4097
10009ed0:	2109883a 	add	r4,r4,r4
10009ed4:	9cd89204 	addi	r19,r19,25160
10009ed8:	2109883a 	add	r4,r4,r4
10009edc:	9909883a 	add	r4,r19,r4
10009ee0:	24000117 	ldw	r16,4(r4)
10009ee4:	213ffe04 	addi	r4,r4,-8
10009ee8:	24009726 	beq	r4,r16,1000a148 <_malloc_r+0x2f4>
10009eec:	80800117 	ldw	r2,4(r16)
10009ef0:	01bfff04 	movi	r6,-4
10009ef4:	014003c4 	movi	r5,15
10009ef8:	1184703a 	and	r2,r2,r6
10009efc:	1447c83a 	sub	r3,r2,r17
10009f00:	28c00716 	blt	r5,r3,10009f20 <_malloc_r+0xcc>
10009f04:	1800920e 	bge	r3,zero,1000a150 <_malloc_r+0x2fc>
10009f08:	84000317 	ldw	r16,12(r16)
10009f0c:	24008e26 	beq	r4,r16,1000a148 <_malloc_r+0x2f4>
10009f10:	80800117 	ldw	r2,4(r16)
10009f14:	1184703a 	and	r2,r2,r6
10009f18:	1447c83a 	sub	r3,r2,r17
10009f1c:	28fff90e 	bge	r5,r3,10009f04 <__alt_data_end+0xf8009f04>
10009f20:	3809883a 	mov	r4,r7
10009f24:	01840074 	movhi	r6,4097
10009f28:	9c000417 	ldw	r16,16(r19)
10009f2c:	31989204 	addi	r6,r6,25160
10009f30:	32000204 	addi	r8,r6,8
10009f34:	82013426 	beq	r16,r8,1000a408 <_malloc_r+0x5b4>
10009f38:	80c00117 	ldw	r3,4(r16)
10009f3c:	00bfff04 	movi	r2,-4
10009f40:	188e703a 	and	r7,r3,r2
10009f44:	3c45c83a 	sub	r2,r7,r17
10009f48:	00c003c4 	movi	r3,15
10009f4c:	18811f16 	blt	r3,r2,1000a3cc <_malloc_r+0x578>
10009f50:	32000515 	stw	r8,20(r6)
10009f54:	32000415 	stw	r8,16(r6)
10009f58:	10007f0e 	bge	r2,zero,1000a158 <_malloc_r+0x304>
10009f5c:	00807fc4 	movi	r2,511
10009f60:	11c0fd36 	bltu	r2,r7,1000a358 <_malloc_r+0x504>
10009f64:	3806d0fa 	srli	r3,r7,3
10009f68:	01c00044 	movi	r7,1
10009f6c:	30800117 	ldw	r2,4(r6)
10009f70:	19400044 	addi	r5,r3,1
10009f74:	294b883a 	add	r5,r5,r5
10009f78:	1807d0ba 	srai	r3,r3,2
10009f7c:	294b883a 	add	r5,r5,r5
10009f80:	294b883a 	add	r5,r5,r5
10009f84:	298b883a 	add	r5,r5,r6
10009f88:	38c6983a 	sll	r3,r7,r3
10009f8c:	29c00017 	ldw	r7,0(r5)
10009f90:	2a7ffe04 	addi	r9,r5,-8
10009f94:	1886b03a 	or	r3,r3,r2
10009f98:	82400315 	stw	r9,12(r16)
10009f9c:	81c00215 	stw	r7,8(r16)
10009fa0:	30c00115 	stw	r3,4(r6)
10009fa4:	2c000015 	stw	r16,0(r5)
10009fa8:	3c000315 	stw	r16,12(r7)
10009fac:	2005d0ba 	srai	r2,r4,2
10009fb0:	01400044 	movi	r5,1
10009fb4:	288a983a 	sll	r5,r5,r2
10009fb8:	19406f36 	bltu	r3,r5,1000a178 <_malloc_r+0x324>
10009fbc:	28c4703a 	and	r2,r5,r3
10009fc0:	10000a1e 	bne	r2,zero,10009fec <_malloc_r+0x198>
10009fc4:	00bfff04 	movi	r2,-4
10009fc8:	294b883a 	add	r5,r5,r5
10009fcc:	2088703a 	and	r4,r4,r2
10009fd0:	28c4703a 	and	r2,r5,r3
10009fd4:	21000104 	addi	r4,r4,4
10009fd8:	1000041e 	bne	r2,zero,10009fec <_malloc_r+0x198>
10009fdc:	294b883a 	add	r5,r5,r5
10009fe0:	28c4703a 	and	r2,r5,r3
10009fe4:	21000104 	addi	r4,r4,4
10009fe8:	103ffc26 	beq	r2,zero,10009fdc <__alt_data_end+0xf8009fdc>
10009fec:	02bfff04 	movi	r10,-4
10009ff0:	024003c4 	movi	r9,15
10009ff4:	21800044 	addi	r6,r4,1
10009ff8:	318d883a 	add	r6,r6,r6
10009ffc:	318d883a 	add	r6,r6,r6
1000a000:	318d883a 	add	r6,r6,r6
1000a004:	998d883a 	add	r6,r19,r6
1000a008:	333ffe04 	addi	r12,r6,-8
1000a00c:	2017883a 	mov	r11,r4
1000a010:	31800104 	addi	r6,r6,4
1000a014:	34000017 	ldw	r16,0(r6)
1000a018:	31fffd04 	addi	r7,r6,-12
1000a01c:	81c0041e 	bne	r16,r7,1000a030 <_malloc_r+0x1dc>
1000a020:	0000fb06 	br	1000a410 <_malloc_r+0x5bc>
1000a024:	1801030e 	bge	r3,zero,1000a434 <_malloc_r+0x5e0>
1000a028:	84000317 	ldw	r16,12(r16)
1000a02c:	81c0f826 	beq	r16,r7,1000a410 <_malloc_r+0x5bc>
1000a030:	80800117 	ldw	r2,4(r16)
1000a034:	1284703a 	and	r2,r2,r10
1000a038:	1447c83a 	sub	r3,r2,r17
1000a03c:	48fff90e 	bge	r9,r3,1000a024 <__alt_data_end+0xf800a024>
1000a040:	80800317 	ldw	r2,12(r16)
1000a044:	81000217 	ldw	r4,8(r16)
1000a048:	89400054 	ori	r5,r17,1
1000a04c:	81400115 	stw	r5,4(r16)
1000a050:	20800315 	stw	r2,12(r4)
1000a054:	11000215 	stw	r4,8(r2)
1000a058:	8463883a 	add	r17,r16,r17
1000a05c:	9c400515 	stw	r17,20(r19)
1000a060:	9c400415 	stw	r17,16(r19)
1000a064:	18800054 	ori	r2,r3,1
1000a068:	88800115 	stw	r2,4(r17)
1000a06c:	8a000315 	stw	r8,12(r17)
1000a070:	8a000215 	stw	r8,8(r17)
1000a074:	88e3883a 	add	r17,r17,r3
1000a078:	88c00015 	stw	r3,0(r17)
1000a07c:	9009883a 	mov	r4,r18
1000a080:	00120280 	call	10012028 <__malloc_unlock>
1000a084:	80800204 	addi	r2,r16,8
1000a088:	00001b06 	br	1000a0f8 <_malloc_r+0x2a4>
1000a08c:	04400404 	movi	r17,16
1000a090:	89402536 	bltu	r17,r5,1000a128 <_malloc_r+0x2d4>
1000a094:	00120040 	call	10012004 <__malloc_lock>
1000a098:	00800184 	movi	r2,6
1000a09c:	01000084 	movi	r4,2
1000a0a0:	04c40074 	movhi	r19,4097
1000a0a4:	1085883a 	add	r2,r2,r2
1000a0a8:	9cd89204 	addi	r19,r19,25160
1000a0ac:	1085883a 	add	r2,r2,r2
1000a0b0:	9885883a 	add	r2,r19,r2
1000a0b4:	14000117 	ldw	r16,4(r2)
1000a0b8:	10fffe04 	addi	r3,r2,-8
1000a0bc:	80c0d926 	beq	r16,r3,1000a424 <_malloc_r+0x5d0>
1000a0c0:	80c00117 	ldw	r3,4(r16)
1000a0c4:	81000317 	ldw	r4,12(r16)
1000a0c8:	00bfff04 	movi	r2,-4
1000a0cc:	1884703a 	and	r2,r3,r2
1000a0d0:	81400217 	ldw	r5,8(r16)
1000a0d4:	8085883a 	add	r2,r16,r2
1000a0d8:	10c00117 	ldw	r3,4(r2)
1000a0dc:	29000315 	stw	r4,12(r5)
1000a0e0:	21400215 	stw	r5,8(r4)
1000a0e4:	18c00054 	ori	r3,r3,1
1000a0e8:	10c00115 	stw	r3,4(r2)
1000a0ec:	9009883a 	mov	r4,r18
1000a0f0:	00120280 	call	10012028 <__malloc_unlock>
1000a0f4:	80800204 	addi	r2,r16,8
1000a0f8:	dfc00a17 	ldw	ra,40(sp)
1000a0fc:	df000917 	ldw	fp,36(sp)
1000a100:	ddc00817 	ldw	r23,32(sp)
1000a104:	dd800717 	ldw	r22,28(sp)
1000a108:	dd400617 	ldw	r21,24(sp)
1000a10c:	dd000517 	ldw	r20,20(sp)
1000a110:	dcc00417 	ldw	r19,16(sp)
1000a114:	dc800317 	ldw	r18,12(sp)
1000a118:	dc400217 	ldw	r17,8(sp)
1000a11c:	dc000117 	ldw	r16,4(sp)
1000a120:	dec00b04 	addi	sp,sp,44
1000a124:	f800283a 	ret
1000a128:	00800304 	movi	r2,12
1000a12c:	90800015 	stw	r2,0(r18)
1000a130:	0005883a 	mov	r2,zero
1000a134:	003ff006 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a138:	01002004 	movi	r4,128
1000a13c:	02001004 	movi	r8,64
1000a140:	01c00fc4 	movi	r7,63
1000a144:	003f6106 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a148:	4009883a 	mov	r4,r8
1000a14c:	003f7506 	br	10009f24 <__alt_data_end+0xf8009f24>
1000a150:	81000317 	ldw	r4,12(r16)
1000a154:	003fde06 	br	1000a0d0 <__alt_data_end+0xf800a0d0>
1000a158:	81c5883a 	add	r2,r16,r7
1000a15c:	11400117 	ldw	r5,4(r2)
1000a160:	9009883a 	mov	r4,r18
1000a164:	29400054 	ori	r5,r5,1
1000a168:	11400115 	stw	r5,4(r2)
1000a16c:	00120280 	call	10012028 <__malloc_unlock>
1000a170:	80800204 	addi	r2,r16,8
1000a174:	003fe006 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a178:	9c000217 	ldw	r16,8(r19)
1000a17c:	00bfff04 	movi	r2,-4
1000a180:	85800117 	ldw	r22,4(r16)
1000a184:	b0ac703a 	and	r22,r22,r2
1000a188:	b4400336 	bltu	r22,r17,1000a198 <_malloc_r+0x344>
1000a18c:	b445c83a 	sub	r2,r22,r17
1000a190:	00c003c4 	movi	r3,15
1000a194:	18805d16 	blt	r3,r2,1000a30c <_malloc_r+0x4b8>
1000a198:	05c40074 	movhi	r23,4097
1000a19c:	008400b4 	movhi	r2,4098
1000a1a0:	10a8a504 	addi	r2,r2,-23916
1000a1a4:	bdde1c04 	addi	r23,r23,30832
1000a1a8:	15400017 	ldw	r21,0(r2)
1000a1ac:	b8c00017 	ldw	r3,0(r23)
1000a1b0:	00bfffc4 	movi	r2,-1
1000a1b4:	858d883a 	add	r6,r16,r22
1000a1b8:	8d6b883a 	add	r21,r17,r21
1000a1bc:	1880ea26 	beq	r3,r2,1000a568 <_malloc_r+0x714>
1000a1c0:	ad4403c4 	addi	r21,r21,4111
1000a1c4:	00bc0004 	movi	r2,-4096
1000a1c8:	a8aa703a 	and	r21,r21,r2
1000a1cc:	a80b883a 	mov	r5,r21
1000a1d0:	9009883a 	mov	r4,r18
1000a1d4:	d9800015 	stw	r6,0(sp)
1000a1d8:	000c1a00 	call	1000c1a0 <_sbrk_r>
1000a1dc:	1029883a 	mov	r20,r2
1000a1e0:	00bfffc4 	movi	r2,-1
1000a1e4:	d9800017 	ldw	r6,0(sp)
1000a1e8:	a080e826 	beq	r20,r2,1000a58c <_malloc_r+0x738>
1000a1ec:	a180a636 	bltu	r20,r6,1000a488 <_malloc_r+0x634>
1000a1f0:	070400b4 	movhi	fp,4098
1000a1f4:	e72e1804 	addi	fp,fp,-18336
1000a1f8:	e0800017 	ldw	r2,0(fp)
1000a1fc:	a887883a 	add	r3,r21,r2
1000a200:	e0c00015 	stw	r3,0(fp)
1000a204:	3500e626 	beq	r6,r20,1000a5a0 <_malloc_r+0x74c>
1000a208:	b9000017 	ldw	r4,0(r23)
1000a20c:	00bfffc4 	movi	r2,-1
1000a210:	2080ee26 	beq	r4,r2,1000a5cc <_malloc_r+0x778>
1000a214:	a185c83a 	sub	r2,r20,r6
1000a218:	10c5883a 	add	r2,r2,r3
1000a21c:	e0800015 	stw	r2,0(fp)
1000a220:	a0c001cc 	andi	r3,r20,7
1000a224:	1800bc26 	beq	r3,zero,1000a518 <_malloc_r+0x6c4>
1000a228:	a0e9c83a 	sub	r20,r20,r3
1000a22c:	00840204 	movi	r2,4104
1000a230:	a5000204 	addi	r20,r20,8
1000a234:	10c7c83a 	sub	r3,r2,r3
1000a238:	a545883a 	add	r2,r20,r21
1000a23c:	1083ffcc 	andi	r2,r2,4095
1000a240:	18abc83a 	sub	r21,r3,r2
1000a244:	a80b883a 	mov	r5,r21
1000a248:	9009883a 	mov	r4,r18
1000a24c:	000c1a00 	call	1000c1a0 <_sbrk_r>
1000a250:	00ffffc4 	movi	r3,-1
1000a254:	10c0e126 	beq	r2,r3,1000a5dc <_malloc_r+0x788>
1000a258:	1505c83a 	sub	r2,r2,r20
1000a25c:	1545883a 	add	r2,r2,r21
1000a260:	10800054 	ori	r2,r2,1
1000a264:	e0c00017 	ldw	r3,0(fp)
1000a268:	9d000215 	stw	r20,8(r19)
1000a26c:	a0800115 	stw	r2,4(r20)
1000a270:	a8c7883a 	add	r3,r21,r3
1000a274:	e0c00015 	stw	r3,0(fp)
1000a278:	84c00e26 	beq	r16,r19,1000a2b4 <_malloc_r+0x460>
1000a27c:	018003c4 	movi	r6,15
1000a280:	3580a72e 	bgeu	r6,r22,1000a520 <_malloc_r+0x6cc>
1000a284:	81400117 	ldw	r5,4(r16)
1000a288:	013ffe04 	movi	r4,-8
1000a28c:	b0bffd04 	addi	r2,r22,-12
1000a290:	1104703a 	and	r2,r2,r4
1000a294:	2900004c 	andi	r4,r5,1
1000a298:	2088b03a 	or	r4,r4,r2
1000a29c:	81000115 	stw	r4,4(r16)
1000a2a0:	01400144 	movi	r5,5
1000a2a4:	8089883a 	add	r4,r16,r2
1000a2a8:	21400115 	stw	r5,4(r4)
1000a2ac:	21400215 	stw	r5,8(r4)
1000a2b0:	3080cd36 	bltu	r6,r2,1000a5e8 <_malloc_r+0x794>
1000a2b4:	008400b4 	movhi	r2,4098
1000a2b8:	10a8a404 	addi	r2,r2,-23920
1000a2bc:	11000017 	ldw	r4,0(r2)
1000a2c0:	20c0012e 	bgeu	r4,r3,1000a2c8 <_malloc_r+0x474>
1000a2c4:	10c00015 	stw	r3,0(r2)
1000a2c8:	008400b4 	movhi	r2,4098
1000a2cc:	10a8a304 	addi	r2,r2,-23924
1000a2d0:	11000017 	ldw	r4,0(r2)
1000a2d4:	9c000217 	ldw	r16,8(r19)
1000a2d8:	20c0012e 	bgeu	r4,r3,1000a2e0 <_malloc_r+0x48c>
1000a2dc:	10c00015 	stw	r3,0(r2)
1000a2e0:	80c00117 	ldw	r3,4(r16)
1000a2e4:	00bfff04 	movi	r2,-4
1000a2e8:	1886703a 	and	r3,r3,r2
1000a2ec:	1c45c83a 	sub	r2,r3,r17
1000a2f0:	1c400236 	bltu	r3,r17,1000a2fc <_malloc_r+0x4a8>
1000a2f4:	00c003c4 	movi	r3,15
1000a2f8:	18800416 	blt	r3,r2,1000a30c <_malloc_r+0x4b8>
1000a2fc:	9009883a 	mov	r4,r18
1000a300:	00120280 	call	10012028 <__malloc_unlock>
1000a304:	0005883a 	mov	r2,zero
1000a308:	003f7b06 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a30c:	88c00054 	ori	r3,r17,1
1000a310:	80c00115 	stw	r3,4(r16)
1000a314:	8463883a 	add	r17,r16,r17
1000a318:	10800054 	ori	r2,r2,1
1000a31c:	9c400215 	stw	r17,8(r19)
1000a320:	88800115 	stw	r2,4(r17)
1000a324:	9009883a 	mov	r4,r18
1000a328:	00120280 	call	10012028 <__malloc_unlock>
1000a32c:	80800204 	addi	r2,r16,8
1000a330:	003f7106 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a334:	00c00504 	movi	r3,20
1000a338:	18804a2e 	bgeu	r3,r2,1000a464 <_malloc_r+0x610>
1000a33c:	00c01504 	movi	r3,84
1000a340:	18806e36 	bltu	r3,r2,1000a4fc <_malloc_r+0x6a8>
1000a344:	8804d33a 	srli	r2,r17,12
1000a348:	12001bc4 	addi	r8,r2,111
1000a34c:	11c01b84 	addi	r7,r2,110
1000a350:	4209883a 	add	r4,r8,r8
1000a354:	003edd06 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a358:	3804d27a 	srli	r2,r7,9
1000a35c:	00c00104 	movi	r3,4
1000a360:	1880442e 	bgeu	r3,r2,1000a474 <_malloc_r+0x620>
1000a364:	00c00504 	movi	r3,20
1000a368:	18808136 	bltu	r3,r2,1000a570 <_malloc_r+0x71c>
1000a36c:	11401704 	addi	r5,r2,92
1000a370:	10c016c4 	addi	r3,r2,91
1000a374:	294b883a 	add	r5,r5,r5
1000a378:	294b883a 	add	r5,r5,r5
1000a37c:	294b883a 	add	r5,r5,r5
1000a380:	994b883a 	add	r5,r19,r5
1000a384:	28800017 	ldw	r2,0(r5)
1000a388:	01840074 	movhi	r6,4097
1000a38c:	297ffe04 	addi	r5,r5,-8
1000a390:	31989204 	addi	r6,r6,25160
1000a394:	28806526 	beq	r5,r2,1000a52c <_malloc_r+0x6d8>
1000a398:	01bfff04 	movi	r6,-4
1000a39c:	10c00117 	ldw	r3,4(r2)
1000a3a0:	1986703a 	and	r3,r3,r6
1000a3a4:	38c0022e 	bgeu	r7,r3,1000a3b0 <_malloc_r+0x55c>
1000a3a8:	10800217 	ldw	r2,8(r2)
1000a3ac:	28bffb1e 	bne	r5,r2,1000a39c <__alt_data_end+0xf800a39c>
1000a3b0:	11400317 	ldw	r5,12(r2)
1000a3b4:	98c00117 	ldw	r3,4(r19)
1000a3b8:	81400315 	stw	r5,12(r16)
1000a3bc:	80800215 	stw	r2,8(r16)
1000a3c0:	2c000215 	stw	r16,8(r5)
1000a3c4:	14000315 	stw	r16,12(r2)
1000a3c8:	003ef806 	br	10009fac <__alt_data_end+0xf8009fac>
1000a3cc:	88c00054 	ori	r3,r17,1
1000a3d0:	80c00115 	stw	r3,4(r16)
1000a3d4:	8463883a 	add	r17,r16,r17
1000a3d8:	34400515 	stw	r17,20(r6)
1000a3dc:	34400415 	stw	r17,16(r6)
1000a3e0:	10c00054 	ori	r3,r2,1
1000a3e4:	8a000315 	stw	r8,12(r17)
1000a3e8:	8a000215 	stw	r8,8(r17)
1000a3ec:	88c00115 	stw	r3,4(r17)
1000a3f0:	88a3883a 	add	r17,r17,r2
1000a3f4:	88800015 	stw	r2,0(r17)
1000a3f8:	9009883a 	mov	r4,r18
1000a3fc:	00120280 	call	10012028 <__malloc_unlock>
1000a400:	80800204 	addi	r2,r16,8
1000a404:	003f3c06 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a408:	30c00117 	ldw	r3,4(r6)
1000a40c:	003ee706 	br	10009fac <__alt_data_end+0xf8009fac>
1000a410:	5ac00044 	addi	r11,r11,1
1000a414:	588000cc 	andi	r2,r11,3
1000a418:	31800204 	addi	r6,r6,8
1000a41c:	103efd1e 	bne	r2,zero,1000a014 <__alt_data_end+0xf800a014>
1000a420:	00002406 	br	1000a4b4 <_malloc_r+0x660>
1000a424:	14000317 	ldw	r16,12(r2)
1000a428:	143f251e 	bne	r2,r16,1000a0c0 <__alt_data_end+0xf800a0c0>
1000a42c:	21000084 	addi	r4,r4,2
1000a430:	003ebc06 	br	10009f24 <__alt_data_end+0xf8009f24>
1000a434:	8085883a 	add	r2,r16,r2
1000a438:	10c00117 	ldw	r3,4(r2)
1000a43c:	81000317 	ldw	r4,12(r16)
1000a440:	81400217 	ldw	r5,8(r16)
1000a444:	18c00054 	ori	r3,r3,1
1000a448:	10c00115 	stw	r3,4(r2)
1000a44c:	29000315 	stw	r4,12(r5)
1000a450:	21400215 	stw	r5,8(r4)
1000a454:	9009883a 	mov	r4,r18
1000a458:	00120280 	call	10012028 <__malloc_unlock>
1000a45c:	80800204 	addi	r2,r16,8
1000a460:	003f2506 	br	1000a0f8 <__alt_data_end+0xf800a0f8>
1000a464:	12001704 	addi	r8,r2,92
1000a468:	11c016c4 	addi	r7,r2,91
1000a46c:	4209883a 	add	r4,r8,r8
1000a470:	003e9606 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a474:	3804d1ba 	srli	r2,r7,6
1000a478:	11400e44 	addi	r5,r2,57
1000a47c:	10c00e04 	addi	r3,r2,56
1000a480:	294b883a 	add	r5,r5,r5
1000a484:	003fbc06 	br	1000a378 <__alt_data_end+0xf800a378>
1000a488:	84ff5926 	beq	r16,r19,1000a1f0 <__alt_data_end+0xf800a1f0>
1000a48c:	00840074 	movhi	r2,4097
1000a490:	10989204 	addi	r2,r2,25160
1000a494:	14000217 	ldw	r16,8(r2)
1000a498:	00bfff04 	movi	r2,-4
1000a49c:	80c00117 	ldw	r3,4(r16)
1000a4a0:	1886703a 	and	r3,r3,r2
1000a4a4:	003f9106 	br	1000a2ec <__alt_data_end+0xf800a2ec>
1000a4a8:	60800217 	ldw	r2,8(r12)
1000a4ac:	213fffc4 	addi	r4,r4,-1
1000a4b0:	1300651e 	bne	r2,r12,1000a648 <_malloc_r+0x7f4>
1000a4b4:	208000cc 	andi	r2,r4,3
1000a4b8:	633ffe04 	addi	r12,r12,-8
1000a4bc:	103ffa1e 	bne	r2,zero,1000a4a8 <__alt_data_end+0xf800a4a8>
1000a4c0:	98800117 	ldw	r2,4(r19)
1000a4c4:	0146303a 	nor	r3,zero,r5
1000a4c8:	1884703a 	and	r2,r3,r2
1000a4cc:	98800115 	stw	r2,4(r19)
1000a4d0:	294b883a 	add	r5,r5,r5
1000a4d4:	117f2836 	bltu	r2,r5,1000a178 <__alt_data_end+0xf800a178>
1000a4d8:	283f2726 	beq	r5,zero,1000a178 <__alt_data_end+0xf800a178>
1000a4dc:	2886703a 	and	r3,r5,r2
1000a4e0:	5809883a 	mov	r4,r11
1000a4e4:	183ec31e 	bne	r3,zero,10009ff4 <__alt_data_end+0xf8009ff4>
1000a4e8:	294b883a 	add	r5,r5,r5
1000a4ec:	2886703a 	and	r3,r5,r2
1000a4f0:	21000104 	addi	r4,r4,4
1000a4f4:	183ffc26 	beq	r3,zero,1000a4e8 <__alt_data_end+0xf800a4e8>
1000a4f8:	003ebe06 	br	10009ff4 <__alt_data_end+0xf8009ff4>
1000a4fc:	00c05504 	movi	r3,340
1000a500:	18801236 	bltu	r3,r2,1000a54c <_malloc_r+0x6f8>
1000a504:	8804d3fa 	srli	r2,r17,15
1000a508:	12001e04 	addi	r8,r2,120
1000a50c:	11c01dc4 	addi	r7,r2,119
1000a510:	4209883a 	add	r4,r8,r8
1000a514:	003e6d06 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a518:	00c40004 	movi	r3,4096
1000a51c:	003f4606 	br	1000a238 <__alt_data_end+0xf800a238>
1000a520:	00800044 	movi	r2,1
1000a524:	a0800115 	stw	r2,4(r20)
1000a528:	003f7406 	br	1000a2fc <__alt_data_end+0xf800a2fc>
1000a52c:	1805d0ba 	srai	r2,r3,2
1000a530:	01c00044 	movi	r7,1
1000a534:	30c00117 	ldw	r3,4(r6)
1000a538:	388e983a 	sll	r7,r7,r2
1000a53c:	2805883a 	mov	r2,r5
1000a540:	38c6b03a 	or	r3,r7,r3
1000a544:	30c00115 	stw	r3,4(r6)
1000a548:	003f9b06 	br	1000a3b8 <__alt_data_end+0xf800a3b8>
1000a54c:	00c15504 	movi	r3,1364
1000a550:	18801a36 	bltu	r3,r2,1000a5bc <_malloc_r+0x768>
1000a554:	8804d4ba 	srli	r2,r17,18
1000a558:	12001f44 	addi	r8,r2,125
1000a55c:	11c01f04 	addi	r7,r2,124
1000a560:	4209883a 	add	r4,r8,r8
1000a564:	003e5906 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a568:	ad400404 	addi	r21,r21,16
1000a56c:	003f1706 	br	1000a1cc <__alt_data_end+0xf800a1cc>
1000a570:	00c01504 	movi	r3,84
1000a574:	18802336 	bltu	r3,r2,1000a604 <_malloc_r+0x7b0>
1000a578:	3804d33a 	srli	r2,r7,12
1000a57c:	11401bc4 	addi	r5,r2,111
1000a580:	10c01b84 	addi	r3,r2,110
1000a584:	294b883a 	add	r5,r5,r5
1000a588:	003f7b06 	br	1000a378 <__alt_data_end+0xf800a378>
1000a58c:	9c000217 	ldw	r16,8(r19)
1000a590:	00bfff04 	movi	r2,-4
1000a594:	80c00117 	ldw	r3,4(r16)
1000a598:	1886703a 	and	r3,r3,r2
1000a59c:	003f5306 	br	1000a2ec <__alt_data_end+0xf800a2ec>
1000a5a0:	3083ffcc 	andi	r2,r6,4095
1000a5a4:	103f181e 	bne	r2,zero,1000a208 <__alt_data_end+0xf800a208>
1000a5a8:	99000217 	ldw	r4,8(r19)
1000a5ac:	b545883a 	add	r2,r22,r21
1000a5b0:	10800054 	ori	r2,r2,1
1000a5b4:	20800115 	stw	r2,4(r4)
1000a5b8:	003f3e06 	br	1000a2b4 <__alt_data_end+0xf800a2b4>
1000a5bc:	01003f84 	movi	r4,254
1000a5c0:	02001fc4 	movi	r8,127
1000a5c4:	01c01f84 	movi	r7,126
1000a5c8:	003e4006 	br	10009ecc <__alt_data_end+0xf8009ecc>
1000a5cc:	00840074 	movhi	r2,4097
1000a5d0:	109e1c04 	addi	r2,r2,30832
1000a5d4:	15000015 	stw	r20,0(r2)
1000a5d8:	003f1106 	br	1000a220 <__alt_data_end+0xf800a220>
1000a5dc:	00800044 	movi	r2,1
1000a5e0:	002b883a 	mov	r21,zero
1000a5e4:	003f1f06 	br	1000a264 <__alt_data_end+0xf800a264>
1000a5e8:	81400204 	addi	r5,r16,8
1000a5ec:	9009883a 	mov	r4,r18
1000a5f0:	000925c0 	call	1000925c <_free_r>
1000a5f4:	008400b4 	movhi	r2,4098
1000a5f8:	10ae1804 	addi	r2,r2,-18336
1000a5fc:	10c00017 	ldw	r3,0(r2)
1000a600:	003f2c06 	br	1000a2b4 <__alt_data_end+0xf800a2b4>
1000a604:	00c05504 	movi	r3,340
1000a608:	18800536 	bltu	r3,r2,1000a620 <_malloc_r+0x7cc>
1000a60c:	3804d3fa 	srli	r2,r7,15
1000a610:	11401e04 	addi	r5,r2,120
1000a614:	10c01dc4 	addi	r3,r2,119
1000a618:	294b883a 	add	r5,r5,r5
1000a61c:	003f5606 	br	1000a378 <__alt_data_end+0xf800a378>
1000a620:	00c15504 	movi	r3,1364
1000a624:	18800536 	bltu	r3,r2,1000a63c <_malloc_r+0x7e8>
1000a628:	3804d4ba 	srli	r2,r7,18
1000a62c:	11401f44 	addi	r5,r2,125
1000a630:	10c01f04 	addi	r3,r2,124
1000a634:	294b883a 	add	r5,r5,r5
1000a638:	003f4f06 	br	1000a378 <__alt_data_end+0xf800a378>
1000a63c:	01403f84 	movi	r5,254
1000a640:	00c01f84 	movi	r3,126
1000a644:	003f4c06 	br	1000a378 <__alt_data_end+0xf800a378>
1000a648:	98800117 	ldw	r2,4(r19)
1000a64c:	003fa006 	br	1000a4d0 <__alt_data_end+0xf800a4d0>
1000a650:	8808d0fa 	srli	r4,r17,3
1000a654:	20800044 	addi	r2,r4,1
1000a658:	1085883a 	add	r2,r2,r2
1000a65c:	003e9006 	br	1000a0a0 <__alt_data_end+0xf800a0a0>

1000a660 <memchr>:
1000a660:	208000cc 	andi	r2,r4,3
1000a664:	280f883a 	mov	r7,r5
1000a668:	10003426 	beq	r2,zero,1000a73c <memchr+0xdc>
1000a66c:	30bfffc4 	addi	r2,r6,-1
1000a670:	30001a26 	beq	r6,zero,1000a6dc <memchr+0x7c>
1000a674:	20c00003 	ldbu	r3,0(r4)
1000a678:	29803fcc 	andi	r6,r5,255
1000a67c:	30c0051e 	bne	r6,r3,1000a694 <memchr+0x34>
1000a680:	00001806 	br	1000a6e4 <memchr+0x84>
1000a684:	10001526 	beq	r2,zero,1000a6dc <memchr+0x7c>
1000a688:	20c00003 	ldbu	r3,0(r4)
1000a68c:	10bfffc4 	addi	r2,r2,-1
1000a690:	30c01426 	beq	r6,r3,1000a6e4 <memchr+0x84>
1000a694:	21000044 	addi	r4,r4,1
1000a698:	20c000cc 	andi	r3,r4,3
1000a69c:	183ff91e 	bne	r3,zero,1000a684 <__alt_data_end+0xf800a684>
1000a6a0:	020000c4 	movi	r8,3
1000a6a4:	40801136 	bltu	r8,r2,1000a6ec <memchr+0x8c>
1000a6a8:	10000c26 	beq	r2,zero,1000a6dc <memchr+0x7c>
1000a6ac:	20c00003 	ldbu	r3,0(r4)
1000a6b0:	29403fcc 	andi	r5,r5,255
1000a6b4:	28c00b26 	beq	r5,r3,1000a6e4 <memchr+0x84>
1000a6b8:	20c00044 	addi	r3,r4,1
1000a6bc:	39803fcc 	andi	r6,r7,255
1000a6c0:	2089883a 	add	r4,r4,r2
1000a6c4:	00000306 	br	1000a6d4 <memchr+0x74>
1000a6c8:	18c00044 	addi	r3,r3,1
1000a6cc:	197fffc3 	ldbu	r5,-1(r3)
1000a6d0:	31400526 	beq	r6,r5,1000a6e8 <memchr+0x88>
1000a6d4:	1805883a 	mov	r2,r3
1000a6d8:	20fffb1e 	bne	r4,r3,1000a6c8 <__alt_data_end+0xf800a6c8>
1000a6dc:	0005883a 	mov	r2,zero
1000a6e0:	f800283a 	ret
1000a6e4:	2005883a 	mov	r2,r4
1000a6e8:	f800283a 	ret
1000a6ec:	28c03fcc 	andi	r3,r5,255
1000a6f0:	1812923a 	slli	r9,r3,8
1000a6f4:	02ffbff4 	movhi	r11,65279
1000a6f8:	02a02074 	movhi	r10,32897
1000a6fc:	48d2b03a 	or	r9,r9,r3
1000a700:	4806943a 	slli	r3,r9,16
1000a704:	5affbfc4 	addi	r11,r11,-257
1000a708:	52a02004 	addi	r10,r10,-32640
1000a70c:	48d2b03a 	or	r9,r9,r3
1000a710:	20c00017 	ldw	r3,0(r4)
1000a714:	48c6f03a 	xor	r3,r9,r3
1000a718:	1acd883a 	add	r6,r3,r11
1000a71c:	00c6303a 	nor	r3,zero,r3
1000a720:	30c6703a 	and	r3,r6,r3
1000a724:	1a86703a 	and	r3,r3,r10
1000a728:	183fe01e 	bne	r3,zero,1000a6ac <__alt_data_end+0xf800a6ac>
1000a72c:	10bfff04 	addi	r2,r2,-4
1000a730:	21000104 	addi	r4,r4,4
1000a734:	40bff636 	bltu	r8,r2,1000a710 <__alt_data_end+0xf800a710>
1000a738:	003fdb06 	br	1000a6a8 <__alt_data_end+0xf800a6a8>
1000a73c:	3005883a 	mov	r2,r6
1000a740:	003fd706 	br	1000a6a0 <__alt_data_end+0xf800a6a0>

1000a744 <memcpy>:
1000a744:	defffd04 	addi	sp,sp,-12
1000a748:	dfc00215 	stw	ra,8(sp)
1000a74c:	dc400115 	stw	r17,4(sp)
1000a750:	dc000015 	stw	r16,0(sp)
1000a754:	00c003c4 	movi	r3,15
1000a758:	2005883a 	mov	r2,r4
1000a75c:	1980452e 	bgeu	r3,r6,1000a874 <memcpy+0x130>
1000a760:	2906b03a 	or	r3,r5,r4
1000a764:	18c000cc 	andi	r3,r3,3
1000a768:	1800441e 	bne	r3,zero,1000a87c <memcpy+0x138>
1000a76c:	347ffc04 	addi	r17,r6,-16
1000a770:	8822d13a 	srli	r17,r17,4
1000a774:	28c00104 	addi	r3,r5,4
1000a778:	23400104 	addi	r13,r4,4
1000a77c:	8820913a 	slli	r16,r17,4
1000a780:	2b000204 	addi	r12,r5,8
1000a784:	22c00204 	addi	r11,r4,8
1000a788:	84000504 	addi	r16,r16,20
1000a78c:	2a800304 	addi	r10,r5,12
1000a790:	22400304 	addi	r9,r4,12
1000a794:	2c21883a 	add	r16,r5,r16
1000a798:	2811883a 	mov	r8,r5
1000a79c:	200f883a 	mov	r7,r4
1000a7a0:	41000017 	ldw	r4,0(r8)
1000a7a4:	1fc00017 	ldw	ra,0(r3)
1000a7a8:	63c00017 	ldw	r15,0(r12)
1000a7ac:	39000015 	stw	r4,0(r7)
1000a7b0:	53800017 	ldw	r14,0(r10)
1000a7b4:	6fc00015 	stw	ra,0(r13)
1000a7b8:	5bc00015 	stw	r15,0(r11)
1000a7bc:	4b800015 	stw	r14,0(r9)
1000a7c0:	18c00404 	addi	r3,r3,16
1000a7c4:	39c00404 	addi	r7,r7,16
1000a7c8:	42000404 	addi	r8,r8,16
1000a7cc:	6b400404 	addi	r13,r13,16
1000a7d0:	63000404 	addi	r12,r12,16
1000a7d4:	5ac00404 	addi	r11,r11,16
1000a7d8:	52800404 	addi	r10,r10,16
1000a7dc:	4a400404 	addi	r9,r9,16
1000a7e0:	1c3fef1e 	bne	r3,r16,1000a7a0 <__alt_data_end+0xf800a7a0>
1000a7e4:	89c00044 	addi	r7,r17,1
1000a7e8:	380e913a 	slli	r7,r7,4
1000a7ec:	310003cc 	andi	r4,r6,15
1000a7f0:	02c000c4 	movi	r11,3
1000a7f4:	11c7883a 	add	r3,r2,r7
1000a7f8:	29cb883a 	add	r5,r5,r7
1000a7fc:	5900212e 	bgeu	r11,r4,1000a884 <memcpy+0x140>
1000a800:	1813883a 	mov	r9,r3
1000a804:	2811883a 	mov	r8,r5
1000a808:	200f883a 	mov	r7,r4
1000a80c:	42800017 	ldw	r10,0(r8)
1000a810:	4a400104 	addi	r9,r9,4
1000a814:	39ffff04 	addi	r7,r7,-4
1000a818:	4abfff15 	stw	r10,-4(r9)
1000a81c:	42000104 	addi	r8,r8,4
1000a820:	59fffa36 	bltu	r11,r7,1000a80c <__alt_data_end+0xf800a80c>
1000a824:	213fff04 	addi	r4,r4,-4
1000a828:	2008d0ba 	srli	r4,r4,2
1000a82c:	318000cc 	andi	r6,r6,3
1000a830:	21000044 	addi	r4,r4,1
1000a834:	2109883a 	add	r4,r4,r4
1000a838:	2109883a 	add	r4,r4,r4
1000a83c:	1907883a 	add	r3,r3,r4
1000a840:	290b883a 	add	r5,r5,r4
1000a844:	30000626 	beq	r6,zero,1000a860 <memcpy+0x11c>
1000a848:	198d883a 	add	r6,r3,r6
1000a84c:	29c00003 	ldbu	r7,0(r5)
1000a850:	18c00044 	addi	r3,r3,1
1000a854:	29400044 	addi	r5,r5,1
1000a858:	19ffffc5 	stb	r7,-1(r3)
1000a85c:	19bffb1e 	bne	r3,r6,1000a84c <__alt_data_end+0xf800a84c>
1000a860:	dfc00217 	ldw	ra,8(sp)
1000a864:	dc400117 	ldw	r17,4(sp)
1000a868:	dc000017 	ldw	r16,0(sp)
1000a86c:	dec00304 	addi	sp,sp,12
1000a870:	f800283a 	ret
1000a874:	2007883a 	mov	r3,r4
1000a878:	003ff206 	br	1000a844 <__alt_data_end+0xf800a844>
1000a87c:	2007883a 	mov	r3,r4
1000a880:	003ff106 	br	1000a848 <__alt_data_end+0xf800a848>
1000a884:	200d883a 	mov	r6,r4
1000a888:	003fee06 	br	1000a844 <__alt_data_end+0xf800a844>

1000a88c <memmove>:
1000a88c:	2005883a 	mov	r2,r4
1000a890:	29000b2e 	bgeu	r5,r4,1000a8c0 <memmove+0x34>
1000a894:	298f883a 	add	r7,r5,r6
1000a898:	21c0092e 	bgeu	r4,r7,1000a8c0 <memmove+0x34>
1000a89c:	2187883a 	add	r3,r4,r6
1000a8a0:	198bc83a 	sub	r5,r3,r6
1000a8a4:	30004826 	beq	r6,zero,1000a9c8 <memmove+0x13c>
1000a8a8:	39ffffc4 	addi	r7,r7,-1
1000a8ac:	39000003 	ldbu	r4,0(r7)
1000a8b0:	18ffffc4 	addi	r3,r3,-1
1000a8b4:	19000005 	stb	r4,0(r3)
1000a8b8:	28fffb1e 	bne	r5,r3,1000a8a8 <__alt_data_end+0xf800a8a8>
1000a8bc:	f800283a 	ret
1000a8c0:	00c003c4 	movi	r3,15
1000a8c4:	1980412e 	bgeu	r3,r6,1000a9cc <memmove+0x140>
1000a8c8:	2886b03a 	or	r3,r5,r2
1000a8cc:	18c000cc 	andi	r3,r3,3
1000a8d0:	1800401e 	bne	r3,zero,1000a9d4 <memmove+0x148>
1000a8d4:	33fffc04 	addi	r15,r6,-16
1000a8d8:	781ed13a 	srli	r15,r15,4
1000a8dc:	28c00104 	addi	r3,r5,4
1000a8e0:	13400104 	addi	r13,r2,4
1000a8e4:	781c913a 	slli	r14,r15,4
1000a8e8:	2b000204 	addi	r12,r5,8
1000a8ec:	12c00204 	addi	r11,r2,8
1000a8f0:	73800504 	addi	r14,r14,20
1000a8f4:	2a800304 	addi	r10,r5,12
1000a8f8:	12400304 	addi	r9,r2,12
1000a8fc:	2b9d883a 	add	r14,r5,r14
1000a900:	2811883a 	mov	r8,r5
1000a904:	100f883a 	mov	r7,r2
1000a908:	41000017 	ldw	r4,0(r8)
1000a90c:	39c00404 	addi	r7,r7,16
1000a910:	18c00404 	addi	r3,r3,16
1000a914:	393ffc15 	stw	r4,-16(r7)
1000a918:	193ffc17 	ldw	r4,-16(r3)
1000a91c:	6b400404 	addi	r13,r13,16
1000a920:	5ac00404 	addi	r11,r11,16
1000a924:	693ffc15 	stw	r4,-16(r13)
1000a928:	61000017 	ldw	r4,0(r12)
1000a92c:	4a400404 	addi	r9,r9,16
1000a930:	42000404 	addi	r8,r8,16
1000a934:	593ffc15 	stw	r4,-16(r11)
1000a938:	51000017 	ldw	r4,0(r10)
1000a93c:	63000404 	addi	r12,r12,16
1000a940:	52800404 	addi	r10,r10,16
1000a944:	493ffc15 	stw	r4,-16(r9)
1000a948:	1bbfef1e 	bne	r3,r14,1000a908 <__alt_data_end+0xf800a908>
1000a94c:	79000044 	addi	r4,r15,1
1000a950:	2008913a 	slli	r4,r4,4
1000a954:	328003cc 	andi	r10,r6,15
1000a958:	02c000c4 	movi	r11,3
1000a95c:	1107883a 	add	r3,r2,r4
1000a960:	290b883a 	add	r5,r5,r4
1000a964:	5a801e2e 	bgeu	r11,r10,1000a9e0 <memmove+0x154>
1000a968:	1813883a 	mov	r9,r3
1000a96c:	2811883a 	mov	r8,r5
1000a970:	500f883a 	mov	r7,r10
1000a974:	41000017 	ldw	r4,0(r8)
1000a978:	4a400104 	addi	r9,r9,4
1000a97c:	39ffff04 	addi	r7,r7,-4
1000a980:	493fff15 	stw	r4,-4(r9)
1000a984:	42000104 	addi	r8,r8,4
1000a988:	59fffa36 	bltu	r11,r7,1000a974 <__alt_data_end+0xf800a974>
1000a98c:	513fff04 	addi	r4,r10,-4
1000a990:	2008d0ba 	srli	r4,r4,2
1000a994:	318000cc 	andi	r6,r6,3
1000a998:	21000044 	addi	r4,r4,1
1000a99c:	2109883a 	add	r4,r4,r4
1000a9a0:	2109883a 	add	r4,r4,r4
1000a9a4:	1907883a 	add	r3,r3,r4
1000a9a8:	290b883a 	add	r5,r5,r4
1000a9ac:	30000b26 	beq	r6,zero,1000a9dc <memmove+0x150>
1000a9b0:	198d883a 	add	r6,r3,r6
1000a9b4:	29c00003 	ldbu	r7,0(r5)
1000a9b8:	18c00044 	addi	r3,r3,1
1000a9bc:	29400044 	addi	r5,r5,1
1000a9c0:	19ffffc5 	stb	r7,-1(r3)
1000a9c4:	19bffb1e 	bne	r3,r6,1000a9b4 <__alt_data_end+0xf800a9b4>
1000a9c8:	f800283a 	ret
1000a9cc:	1007883a 	mov	r3,r2
1000a9d0:	003ff606 	br	1000a9ac <__alt_data_end+0xf800a9ac>
1000a9d4:	1007883a 	mov	r3,r2
1000a9d8:	003ff506 	br	1000a9b0 <__alt_data_end+0xf800a9b0>
1000a9dc:	f800283a 	ret
1000a9e0:	500d883a 	mov	r6,r10
1000a9e4:	003ff106 	br	1000a9ac <__alt_data_end+0xf800a9ac>

1000a9e8 <memset>:
1000a9e8:	20c000cc 	andi	r3,r4,3
1000a9ec:	2005883a 	mov	r2,r4
1000a9f0:	18004426 	beq	r3,zero,1000ab04 <memset+0x11c>
1000a9f4:	31ffffc4 	addi	r7,r6,-1
1000a9f8:	30004026 	beq	r6,zero,1000aafc <memset+0x114>
1000a9fc:	2813883a 	mov	r9,r5
1000aa00:	200d883a 	mov	r6,r4
1000aa04:	2007883a 	mov	r3,r4
1000aa08:	00000406 	br	1000aa1c <memset+0x34>
1000aa0c:	3a3fffc4 	addi	r8,r7,-1
1000aa10:	31800044 	addi	r6,r6,1
1000aa14:	38003926 	beq	r7,zero,1000aafc <memset+0x114>
1000aa18:	400f883a 	mov	r7,r8
1000aa1c:	18c00044 	addi	r3,r3,1
1000aa20:	32400005 	stb	r9,0(r6)
1000aa24:	1a0000cc 	andi	r8,r3,3
1000aa28:	403ff81e 	bne	r8,zero,1000aa0c <__alt_data_end+0xf800aa0c>
1000aa2c:	010000c4 	movi	r4,3
1000aa30:	21c02d2e 	bgeu	r4,r7,1000aae8 <memset+0x100>
1000aa34:	29003fcc 	andi	r4,r5,255
1000aa38:	200c923a 	slli	r6,r4,8
1000aa3c:	3108b03a 	or	r4,r6,r4
1000aa40:	200c943a 	slli	r6,r4,16
1000aa44:	218cb03a 	or	r6,r4,r6
1000aa48:	010003c4 	movi	r4,15
1000aa4c:	21c0182e 	bgeu	r4,r7,1000aab0 <memset+0xc8>
1000aa50:	3b3ffc04 	addi	r12,r7,-16
1000aa54:	6018d13a 	srli	r12,r12,4
1000aa58:	1a000104 	addi	r8,r3,4
1000aa5c:	1ac00204 	addi	r11,r3,8
1000aa60:	6008913a 	slli	r4,r12,4
1000aa64:	1a800304 	addi	r10,r3,12
1000aa68:	1813883a 	mov	r9,r3
1000aa6c:	21000504 	addi	r4,r4,20
1000aa70:	1909883a 	add	r4,r3,r4
1000aa74:	49800015 	stw	r6,0(r9)
1000aa78:	41800015 	stw	r6,0(r8)
1000aa7c:	59800015 	stw	r6,0(r11)
1000aa80:	51800015 	stw	r6,0(r10)
1000aa84:	42000404 	addi	r8,r8,16
1000aa88:	4a400404 	addi	r9,r9,16
1000aa8c:	5ac00404 	addi	r11,r11,16
1000aa90:	52800404 	addi	r10,r10,16
1000aa94:	413ff71e 	bne	r8,r4,1000aa74 <__alt_data_end+0xf800aa74>
1000aa98:	63000044 	addi	r12,r12,1
1000aa9c:	6018913a 	slli	r12,r12,4
1000aaa0:	39c003cc 	andi	r7,r7,15
1000aaa4:	010000c4 	movi	r4,3
1000aaa8:	1b07883a 	add	r3,r3,r12
1000aaac:	21c00e2e 	bgeu	r4,r7,1000aae8 <memset+0x100>
1000aab0:	1813883a 	mov	r9,r3
1000aab4:	3811883a 	mov	r8,r7
1000aab8:	010000c4 	movi	r4,3
1000aabc:	49800015 	stw	r6,0(r9)
1000aac0:	423fff04 	addi	r8,r8,-4
1000aac4:	4a400104 	addi	r9,r9,4
1000aac8:	223ffc36 	bltu	r4,r8,1000aabc <__alt_data_end+0xf800aabc>
1000aacc:	393fff04 	addi	r4,r7,-4
1000aad0:	2008d0ba 	srli	r4,r4,2
1000aad4:	39c000cc 	andi	r7,r7,3
1000aad8:	21000044 	addi	r4,r4,1
1000aadc:	2109883a 	add	r4,r4,r4
1000aae0:	2109883a 	add	r4,r4,r4
1000aae4:	1907883a 	add	r3,r3,r4
1000aae8:	38000526 	beq	r7,zero,1000ab00 <memset+0x118>
1000aaec:	19cf883a 	add	r7,r3,r7
1000aaf0:	19400005 	stb	r5,0(r3)
1000aaf4:	18c00044 	addi	r3,r3,1
1000aaf8:	38fffd1e 	bne	r7,r3,1000aaf0 <__alt_data_end+0xf800aaf0>
1000aafc:	f800283a 	ret
1000ab00:	f800283a 	ret
1000ab04:	2007883a 	mov	r3,r4
1000ab08:	300f883a 	mov	r7,r6
1000ab0c:	003fc706 	br	1000aa2c <__alt_data_end+0xf800aa2c>

1000ab10 <_Balloc>:
1000ab10:	20801317 	ldw	r2,76(r4)
1000ab14:	defffc04 	addi	sp,sp,-16
1000ab18:	dc400115 	stw	r17,4(sp)
1000ab1c:	dc000015 	stw	r16,0(sp)
1000ab20:	dfc00315 	stw	ra,12(sp)
1000ab24:	dc800215 	stw	r18,8(sp)
1000ab28:	2023883a 	mov	r17,r4
1000ab2c:	2821883a 	mov	r16,r5
1000ab30:	10000f26 	beq	r2,zero,1000ab70 <_Balloc+0x60>
1000ab34:	8407883a 	add	r3,r16,r16
1000ab38:	18c7883a 	add	r3,r3,r3
1000ab3c:	10c7883a 	add	r3,r2,r3
1000ab40:	18800017 	ldw	r2,0(r3)
1000ab44:	10001126 	beq	r2,zero,1000ab8c <_Balloc+0x7c>
1000ab48:	11000017 	ldw	r4,0(r2)
1000ab4c:	19000015 	stw	r4,0(r3)
1000ab50:	10000415 	stw	zero,16(r2)
1000ab54:	10000315 	stw	zero,12(r2)
1000ab58:	dfc00317 	ldw	ra,12(sp)
1000ab5c:	dc800217 	ldw	r18,8(sp)
1000ab60:	dc400117 	ldw	r17,4(sp)
1000ab64:	dc000017 	ldw	r16,0(sp)
1000ab68:	dec00404 	addi	sp,sp,16
1000ab6c:	f800283a 	ret
1000ab70:	01800844 	movi	r6,33
1000ab74:	01400104 	movi	r5,4
1000ab78:	000dbb80 	call	1000dbb8 <_calloc_r>
1000ab7c:	88801315 	stw	r2,76(r17)
1000ab80:	103fec1e 	bne	r2,zero,1000ab34 <__alt_data_end+0xf800ab34>
1000ab84:	0005883a 	mov	r2,zero
1000ab88:	003ff306 	br	1000ab58 <__alt_data_end+0xf800ab58>
1000ab8c:	01400044 	movi	r5,1
1000ab90:	2c24983a 	sll	r18,r5,r16
1000ab94:	8809883a 	mov	r4,r17
1000ab98:	91800144 	addi	r6,r18,5
1000ab9c:	318d883a 	add	r6,r6,r6
1000aba0:	318d883a 	add	r6,r6,r6
1000aba4:	000dbb80 	call	1000dbb8 <_calloc_r>
1000aba8:	103ff626 	beq	r2,zero,1000ab84 <__alt_data_end+0xf800ab84>
1000abac:	14000115 	stw	r16,4(r2)
1000abb0:	14800215 	stw	r18,8(r2)
1000abb4:	003fe606 	br	1000ab50 <__alt_data_end+0xf800ab50>

1000abb8 <_Bfree>:
1000abb8:	28000826 	beq	r5,zero,1000abdc <_Bfree+0x24>
1000abbc:	28c00117 	ldw	r3,4(r5)
1000abc0:	20801317 	ldw	r2,76(r4)
1000abc4:	18c7883a 	add	r3,r3,r3
1000abc8:	18c7883a 	add	r3,r3,r3
1000abcc:	10c5883a 	add	r2,r2,r3
1000abd0:	10c00017 	ldw	r3,0(r2)
1000abd4:	28c00015 	stw	r3,0(r5)
1000abd8:	11400015 	stw	r5,0(r2)
1000abdc:	f800283a 	ret

1000abe0 <__multadd>:
1000abe0:	defff704 	addi	sp,sp,-36
1000abe4:	dc800215 	stw	r18,8(sp)
1000abe8:	2c800417 	ldw	r18,16(r5)
1000abec:	dd800615 	stw	r22,24(sp)
1000abf0:	dd400515 	stw	r21,20(sp)
1000abf4:	dd000415 	stw	r20,16(sp)
1000abf8:	dcc00315 	stw	r19,12(sp)
1000abfc:	dc400115 	stw	r17,4(sp)
1000ac00:	dc000015 	stw	r16,0(sp)
1000ac04:	dfc00815 	stw	ra,32(sp)
1000ac08:	ddc00715 	stw	r23,28(sp)
1000ac0c:	2827883a 	mov	r19,r5
1000ac10:	2029883a 	mov	r20,r4
1000ac14:	3023883a 	mov	r17,r6
1000ac18:	3821883a 	mov	r16,r7
1000ac1c:	2d400504 	addi	r21,r5,20
1000ac20:	002d883a 	mov	r22,zero
1000ac24:	adc00017 	ldw	r23,0(r21)
1000ac28:	880b883a 	mov	r5,r17
1000ac2c:	ad400104 	addi	r21,r21,4
1000ac30:	b93fffcc 	andi	r4,r23,65535
1000ac34:	0004b280 	call	10004b28 <__mulsi3>
1000ac38:	b808d43a 	srli	r4,r23,16
1000ac3c:	880b883a 	mov	r5,r17
1000ac40:	1421883a 	add	r16,r2,r16
1000ac44:	0004b280 	call	10004b28 <__mulsi3>
1000ac48:	800ed43a 	srli	r7,r16,16
1000ac4c:	80ffffcc 	andi	r3,r16,65535
1000ac50:	b5800044 	addi	r22,r22,1
1000ac54:	11c5883a 	add	r2,r2,r7
1000ac58:	100e943a 	slli	r7,r2,16
1000ac5c:	1020d43a 	srli	r16,r2,16
1000ac60:	38c7883a 	add	r3,r7,r3
1000ac64:	a8ffff15 	stw	r3,-4(r21)
1000ac68:	b4bfee16 	blt	r22,r18,1000ac24 <__alt_data_end+0xf800ac24>
1000ac6c:	80000926 	beq	r16,zero,1000ac94 <__multadd+0xb4>
1000ac70:	98800217 	ldw	r2,8(r19)
1000ac74:	9080130e 	bge	r18,r2,1000acc4 <__multadd+0xe4>
1000ac78:	90800144 	addi	r2,r18,5
1000ac7c:	1085883a 	add	r2,r2,r2
1000ac80:	1085883a 	add	r2,r2,r2
1000ac84:	9885883a 	add	r2,r19,r2
1000ac88:	14000015 	stw	r16,0(r2)
1000ac8c:	94800044 	addi	r18,r18,1
1000ac90:	9c800415 	stw	r18,16(r19)
1000ac94:	9805883a 	mov	r2,r19
1000ac98:	dfc00817 	ldw	ra,32(sp)
1000ac9c:	ddc00717 	ldw	r23,28(sp)
1000aca0:	dd800617 	ldw	r22,24(sp)
1000aca4:	dd400517 	ldw	r21,20(sp)
1000aca8:	dd000417 	ldw	r20,16(sp)
1000acac:	dcc00317 	ldw	r19,12(sp)
1000acb0:	dc800217 	ldw	r18,8(sp)
1000acb4:	dc400117 	ldw	r17,4(sp)
1000acb8:	dc000017 	ldw	r16,0(sp)
1000acbc:	dec00904 	addi	sp,sp,36
1000acc0:	f800283a 	ret
1000acc4:	99400117 	ldw	r5,4(r19)
1000acc8:	a009883a 	mov	r4,r20
1000accc:	29400044 	addi	r5,r5,1
1000acd0:	000ab100 	call	1000ab10 <_Balloc>
1000acd4:	99800417 	ldw	r6,16(r19)
1000acd8:	99400304 	addi	r5,r19,12
1000acdc:	11000304 	addi	r4,r2,12
1000ace0:	31800084 	addi	r6,r6,2
1000ace4:	318d883a 	add	r6,r6,r6
1000ace8:	318d883a 	add	r6,r6,r6
1000acec:	1023883a 	mov	r17,r2
1000acf0:	000a7440 	call	1000a744 <memcpy>
1000acf4:	98000a26 	beq	r19,zero,1000ad20 <__multadd+0x140>
1000acf8:	98c00117 	ldw	r3,4(r19)
1000acfc:	a0801317 	ldw	r2,76(r20)
1000ad00:	18c7883a 	add	r3,r3,r3
1000ad04:	18c7883a 	add	r3,r3,r3
1000ad08:	10c5883a 	add	r2,r2,r3
1000ad0c:	10c00017 	ldw	r3,0(r2)
1000ad10:	98c00015 	stw	r3,0(r19)
1000ad14:	14c00015 	stw	r19,0(r2)
1000ad18:	8827883a 	mov	r19,r17
1000ad1c:	003fd606 	br	1000ac78 <__alt_data_end+0xf800ac78>
1000ad20:	8827883a 	mov	r19,r17
1000ad24:	003fd406 	br	1000ac78 <__alt_data_end+0xf800ac78>

1000ad28 <__s2b>:
1000ad28:	defff904 	addi	sp,sp,-28
1000ad2c:	dc400115 	stw	r17,4(sp)
1000ad30:	dc000015 	stw	r16,0(sp)
1000ad34:	2023883a 	mov	r17,r4
1000ad38:	2821883a 	mov	r16,r5
1000ad3c:	39000204 	addi	r4,r7,8
1000ad40:	01400244 	movi	r5,9
1000ad44:	dcc00315 	stw	r19,12(sp)
1000ad48:	dc800215 	stw	r18,8(sp)
1000ad4c:	dfc00615 	stw	ra,24(sp)
1000ad50:	dd400515 	stw	r21,20(sp)
1000ad54:	dd000415 	stw	r20,16(sp)
1000ad58:	3825883a 	mov	r18,r7
1000ad5c:	3027883a 	mov	r19,r6
1000ad60:	000f0100 	call	1000f010 <__divsi3>
1000ad64:	00c00044 	movi	r3,1
1000ad68:	000b883a 	mov	r5,zero
1000ad6c:	1880030e 	bge	r3,r2,1000ad7c <__s2b+0x54>
1000ad70:	18c7883a 	add	r3,r3,r3
1000ad74:	29400044 	addi	r5,r5,1
1000ad78:	18bffd16 	blt	r3,r2,1000ad70 <__alt_data_end+0xf800ad70>
1000ad7c:	8809883a 	mov	r4,r17
1000ad80:	000ab100 	call	1000ab10 <_Balloc>
1000ad84:	d8c00717 	ldw	r3,28(sp)
1000ad88:	10c00515 	stw	r3,20(r2)
1000ad8c:	00c00044 	movi	r3,1
1000ad90:	10c00415 	stw	r3,16(r2)
1000ad94:	00c00244 	movi	r3,9
1000ad98:	1cc0210e 	bge	r3,r19,1000ae20 <__s2b+0xf8>
1000ad9c:	80eb883a 	add	r21,r16,r3
1000ada0:	a829883a 	mov	r20,r21
1000ada4:	84e1883a 	add	r16,r16,r19
1000ada8:	a1c00007 	ldb	r7,0(r20)
1000adac:	01800284 	movi	r6,10
1000adb0:	a5000044 	addi	r20,r20,1
1000adb4:	100b883a 	mov	r5,r2
1000adb8:	39fff404 	addi	r7,r7,-48
1000adbc:	8809883a 	mov	r4,r17
1000adc0:	000abe00 	call	1000abe0 <__multadd>
1000adc4:	a43ff81e 	bne	r20,r16,1000ada8 <__alt_data_end+0xf800ada8>
1000adc8:	ace1883a 	add	r16,r21,r19
1000adcc:	843ffe04 	addi	r16,r16,-8
1000add0:	9c800a0e 	bge	r19,r18,1000adfc <__s2b+0xd4>
1000add4:	94e5c83a 	sub	r18,r18,r19
1000add8:	84a5883a 	add	r18,r16,r18
1000addc:	81c00007 	ldb	r7,0(r16)
1000ade0:	01800284 	movi	r6,10
1000ade4:	84000044 	addi	r16,r16,1
1000ade8:	100b883a 	mov	r5,r2
1000adec:	39fff404 	addi	r7,r7,-48
1000adf0:	8809883a 	mov	r4,r17
1000adf4:	000abe00 	call	1000abe0 <__multadd>
1000adf8:	84bff81e 	bne	r16,r18,1000addc <__alt_data_end+0xf800addc>
1000adfc:	dfc00617 	ldw	ra,24(sp)
1000ae00:	dd400517 	ldw	r21,20(sp)
1000ae04:	dd000417 	ldw	r20,16(sp)
1000ae08:	dcc00317 	ldw	r19,12(sp)
1000ae0c:	dc800217 	ldw	r18,8(sp)
1000ae10:	dc400117 	ldw	r17,4(sp)
1000ae14:	dc000017 	ldw	r16,0(sp)
1000ae18:	dec00704 	addi	sp,sp,28
1000ae1c:	f800283a 	ret
1000ae20:	84000284 	addi	r16,r16,10
1000ae24:	1827883a 	mov	r19,r3
1000ae28:	003fe906 	br	1000add0 <__alt_data_end+0xf800add0>

1000ae2c <__hi0bits>:
1000ae2c:	20bfffec 	andhi	r2,r4,65535
1000ae30:	1000141e 	bne	r2,zero,1000ae84 <__hi0bits+0x58>
1000ae34:	2008943a 	slli	r4,r4,16
1000ae38:	00800404 	movi	r2,16
1000ae3c:	20ffc02c 	andhi	r3,r4,65280
1000ae40:	1800021e 	bne	r3,zero,1000ae4c <__hi0bits+0x20>
1000ae44:	2008923a 	slli	r4,r4,8
1000ae48:	10800204 	addi	r2,r2,8
1000ae4c:	20fc002c 	andhi	r3,r4,61440
1000ae50:	1800021e 	bne	r3,zero,1000ae5c <__hi0bits+0x30>
1000ae54:	2008913a 	slli	r4,r4,4
1000ae58:	10800104 	addi	r2,r2,4
1000ae5c:	20f0002c 	andhi	r3,r4,49152
1000ae60:	1800031e 	bne	r3,zero,1000ae70 <__hi0bits+0x44>
1000ae64:	2109883a 	add	r4,r4,r4
1000ae68:	10800084 	addi	r2,r2,2
1000ae6c:	2109883a 	add	r4,r4,r4
1000ae70:	20000316 	blt	r4,zero,1000ae80 <__hi0bits+0x54>
1000ae74:	2110002c 	andhi	r4,r4,16384
1000ae78:	2000041e 	bne	r4,zero,1000ae8c <__hi0bits+0x60>
1000ae7c:	00800804 	movi	r2,32
1000ae80:	f800283a 	ret
1000ae84:	0005883a 	mov	r2,zero
1000ae88:	003fec06 	br	1000ae3c <__alt_data_end+0xf800ae3c>
1000ae8c:	10800044 	addi	r2,r2,1
1000ae90:	f800283a 	ret

1000ae94 <__lo0bits>:
1000ae94:	20c00017 	ldw	r3,0(r4)
1000ae98:	188001cc 	andi	r2,r3,7
1000ae9c:	10000826 	beq	r2,zero,1000aec0 <__lo0bits+0x2c>
1000aea0:	1880004c 	andi	r2,r3,1
1000aea4:	1000211e 	bne	r2,zero,1000af2c <__lo0bits+0x98>
1000aea8:	1880008c 	andi	r2,r3,2
1000aeac:	1000211e 	bne	r2,zero,1000af34 <__lo0bits+0xa0>
1000aeb0:	1806d0ba 	srli	r3,r3,2
1000aeb4:	00800084 	movi	r2,2
1000aeb8:	20c00015 	stw	r3,0(r4)
1000aebc:	f800283a 	ret
1000aec0:	18bfffcc 	andi	r2,r3,65535
1000aec4:	10001326 	beq	r2,zero,1000af14 <__lo0bits+0x80>
1000aec8:	0005883a 	mov	r2,zero
1000aecc:	19403fcc 	andi	r5,r3,255
1000aed0:	2800021e 	bne	r5,zero,1000aedc <__lo0bits+0x48>
1000aed4:	1806d23a 	srli	r3,r3,8
1000aed8:	10800204 	addi	r2,r2,8
1000aedc:	194003cc 	andi	r5,r3,15
1000aee0:	2800021e 	bne	r5,zero,1000aeec <__lo0bits+0x58>
1000aee4:	1806d13a 	srli	r3,r3,4
1000aee8:	10800104 	addi	r2,r2,4
1000aeec:	194000cc 	andi	r5,r3,3
1000aef0:	2800021e 	bne	r5,zero,1000aefc <__lo0bits+0x68>
1000aef4:	1806d0ba 	srli	r3,r3,2
1000aef8:	10800084 	addi	r2,r2,2
1000aefc:	1940004c 	andi	r5,r3,1
1000af00:	2800081e 	bne	r5,zero,1000af24 <__lo0bits+0x90>
1000af04:	1806d07a 	srli	r3,r3,1
1000af08:	1800051e 	bne	r3,zero,1000af20 <__lo0bits+0x8c>
1000af0c:	00800804 	movi	r2,32
1000af10:	f800283a 	ret
1000af14:	1806d43a 	srli	r3,r3,16
1000af18:	00800404 	movi	r2,16
1000af1c:	003feb06 	br	1000aecc <__alt_data_end+0xf800aecc>
1000af20:	10800044 	addi	r2,r2,1
1000af24:	20c00015 	stw	r3,0(r4)
1000af28:	f800283a 	ret
1000af2c:	0005883a 	mov	r2,zero
1000af30:	f800283a 	ret
1000af34:	1806d07a 	srli	r3,r3,1
1000af38:	00800044 	movi	r2,1
1000af3c:	20c00015 	stw	r3,0(r4)
1000af40:	f800283a 	ret

1000af44 <__i2b>:
1000af44:	defffd04 	addi	sp,sp,-12
1000af48:	dc000015 	stw	r16,0(sp)
1000af4c:	04000044 	movi	r16,1
1000af50:	dc400115 	stw	r17,4(sp)
1000af54:	2823883a 	mov	r17,r5
1000af58:	800b883a 	mov	r5,r16
1000af5c:	dfc00215 	stw	ra,8(sp)
1000af60:	000ab100 	call	1000ab10 <_Balloc>
1000af64:	14400515 	stw	r17,20(r2)
1000af68:	14000415 	stw	r16,16(r2)
1000af6c:	dfc00217 	ldw	ra,8(sp)
1000af70:	dc400117 	ldw	r17,4(sp)
1000af74:	dc000017 	ldw	r16,0(sp)
1000af78:	dec00304 	addi	sp,sp,12
1000af7c:	f800283a 	ret

1000af80 <__multiply>:
1000af80:	deffef04 	addi	sp,sp,-68
1000af84:	dc400815 	stw	r17,32(sp)
1000af88:	dc000715 	stw	r16,28(sp)
1000af8c:	34400417 	ldw	r17,16(r6)
1000af90:	2c000417 	ldw	r16,16(r5)
1000af94:	dd800d15 	stw	r22,52(sp)
1000af98:	dc800915 	stw	r18,36(sp)
1000af9c:	dfc01015 	stw	ra,64(sp)
1000afa0:	df000f15 	stw	fp,60(sp)
1000afa4:	ddc00e15 	stw	r23,56(sp)
1000afa8:	dd400c15 	stw	r21,48(sp)
1000afac:	dd000b15 	stw	r20,44(sp)
1000afb0:	dcc00a15 	stw	r19,40(sp)
1000afb4:	2825883a 	mov	r18,r5
1000afb8:	302d883a 	mov	r22,r6
1000afbc:	8440050e 	bge	r16,r17,1000afd4 <__multiply+0x54>
1000afc0:	8007883a 	mov	r3,r16
1000afc4:	3025883a 	mov	r18,r6
1000afc8:	8821883a 	mov	r16,r17
1000afcc:	282d883a 	mov	r22,r5
1000afd0:	1823883a 	mov	r17,r3
1000afd4:	90800217 	ldw	r2,8(r18)
1000afd8:	8447883a 	add	r3,r16,r17
1000afdc:	d8c00215 	stw	r3,8(sp)
1000afe0:	91400117 	ldw	r5,4(r18)
1000afe4:	10c0010e 	bge	r2,r3,1000afec <__multiply+0x6c>
1000afe8:	29400044 	addi	r5,r5,1
1000afec:	000ab100 	call	1000ab10 <_Balloc>
1000aff0:	d8c00217 	ldw	r3,8(sp)
1000aff4:	d8800615 	stw	r2,24(sp)
1000aff8:	18eb883a 	add	r21,r3,r3
1000affc:	ad6b883a 	add	r21,r21,r21
1000b000:	10c00504 	addi	r3,r2,20
1000b004:	1d6b883a 	add	r21,r3,r21
1000b008:	d8c00115 	stw	r3,4(sp)
1000b00c:	dd400315 	stw	r21,12(sp)
1000b010:	1805883a 	mov	r2,r3
1000b014:	1d40042e 	bgeu	r3,r21,1000b028 <__multiply+0xa8>
1000b018:	d8c00317 	ldw	r3,12(sp)
1000b01c:	10000015 	stw	zero,0(r2)
1000b020:	10800104 	addi	r2,r2,4
1000b024:	10fffc36 	bltu	r2,r3,1000b018 <__alt_data_end+0xf800b018>
1000b028:	8c63883a 	add	r17,r17,r17
1000b02c:	b5800504 	addi	r22,r22,20
1000b030:	8c63883a 	add	r17,r17,r17
1000b034:	94800504 	addi	r18,r18,20
1000b038:	8421883a 	add	r16,r16,r16
1000b03c:	b463883a 	add	r17,r22,r17
1000b040:	8421883a 	add	r16,r16,r16
1000b044:	dd800015 	stw	r22,0(sp)
1000b048:	dc800415 	stw	r18,16(sp)
1000b04c:	dc400515 	stw	r17,20(sp)
1000b050:	9429883a 	add	r20,r18,r16
1000b054:	b4404f2e 	bgeu	r22,r17,1000b194 <__multiply+0x214>
1000b058:	d8c00017 	ldw	r3,0(sp)
1000b05c:	1c800017 	ldw	r18,0(r3)
1000b060:	947fffcc 	andi	r17,r18,65535
1000b064:	88001e26 	beq	r17,zero,1000b0e0 <__multiply+0x160>
1000b068:	dd800117 	ldw	r22,4(sp)
1000b06c:	dd400417 	ldw	r21,16(sp)
1000b070:	0027883a 	mov	r19,zero
1000b074:	ac800017 	ldw	r18,0(r21)
1000b078:	b4000017 	ldw	r16,0(r22)
1000b07c:	880b883a 	mov	r5,r17
1000b080:	913fffcc 	andi	r4,r18,65535
1000b084:	0004b280 	call	10004b28 <__mulsi3>
1000b088:	9008d43a 	srli	r4,r18,16
1000b08c:	84bfffcc 	andi	r18,r16,65535
1000b090:	1485883a 	add	r2,r2,r18
1000b094:	14e5883a 	add	r18,r2,r19
1000b098:	8020d43a 	srli	r16,r16,16
1000b09c:	9026d43a 	srli	r19,r18,16
1000b0a0:	880b883a 	mov	r5,r17
1000b0a4:	0004b280 	call	10004b28 <__mulsi3>
1000b0a8:	1405883a 	add	r2,r2,r16
1000b0ac:	14e1883a 	add	r16,r2,r19
1000b0b0:	90ffffcc 	andi	r3,r18,65535
1000b0b4:	8024943a 	slli	r18,r16,16
1000b0b8:	ad400104 	addi	r21,r21,4
1000b0bc:	b005883a 	mov	r2,r22
1000b0c0:	90c6b03a 	or	r3,r18,r3
1000b0c4:	b0c00015 	stw	r3,0(r22)
1000b0c8:	8026d43a 	srli	r19,r16,16
1000b0cc:	b5800104 	addi	r22,r22,4
1000b0d0:	ad3fe836 	bltu	r21,r20,1000b074 <__alt_data_end+0xf800b074>
1000b0d4:	d8c00017 	ldw	r3,0(sp)
1000b0d8:	14c00115 	stw	r19,4(r2)
1000b0dc:	1c800017 	ldw	r18,0(r3)
1000b0e0:	9024d43a 	srli	r18,r18,16
1000b0e4:	90002226 	beq	r18,zero,1000b170 <__multiply+0x1f0>
1000b0e8:	d8c00117 	ldw	r3,4(sp)
1000b0ec:	dd800417 	ldw	r22,16(sp)
1000b0f0:	002f883a 	mov	r23,zero
1000b0f4:	1f000017 	ldw	fp,0(r3)
1000b0f8:	1823883a 	mov	r17,r3
1000b0fc:	182b883a 	mov	r21,r3
1000b100:	e021883a 	mov	r16,fp
1000b104:	00000106 	br	1000b10c <__multiply+0x18c>
1000b108:	982b883a 	mov	r21,r19
1000b10c:	b100000b 	ldhu	r4,0(r22)
1000b110:	8020d43a 	srli	r16,r16,16
1000b114:	900b883a 	mov	r5,r18
1000b118:	0004b280 	call	10004b28 <__mulsi3>
1000b11c:	1405883a 	add	r2,r2,r16
1000b120:	15ef883a 	add	r23,r2,r23
1000b124:	b804943a 	slli	r2,r23,16
1000b128:	e0ffffcc 	andi	r3,fp,65535
1000b12c:	8c400104 	addi	r17,r17,4
1000b130:	10c6b03a 	or	r3,r2,r3
1000b134:	88ffff15 	stw	r3,-4(r17)
1000b138:	b5800104 	addi	r22,r22,4
1000b13c:	b13fff17 	ldw	r4,-4(r22)
1000b140:	acc00104 	addi	r19,r21,4
1000b144:	900b883a 	mov	r5,r18
1000b148:	2008d43a 	srli	r4,r4,16
1000b14c:	9c000017 	ldw	r16,0(r19)
1000b150:	0004b280 	call	10004b28 <__mulsi3>
1000b154:	b806d43a 	srli	r3,r23,16
1000b158:	813fffcc 	andi	r4,r16,65535
1000b15c:	1105883a 	add	r2,r2,r4
1000b160:	10f9883a 	add	fp,r2,r3
1000b164:	e02ed43a 	srli	r23,fp,16
1000b168:	b53fe736 	bltu	r22,r20,1000b108 <__alt_data_end+0xf800b108>
1000b16c:	af000115 	stw	fp,4(r21)
1000b170:	d8c00017 	ldw	r3,0(sp)
1000b174:	d9000517 	ldw	r4,20(sp)
1000b178:	18c00104 	addi	r3,r3,4
1000b17c:	d8c00015 	stw	r3,0(sp)
1000b180:	d8c00117 	ldw	r3,4(sp)
1000b184:	18c00104 	addi	r3,r3,4
1000b188:	d8c00115 	stw	r3,4(sp)
1000b18c:	d8c00017 	ldw	r3,0(sp)
1000b190:	193fb136 	bltu	r3,r4,1000b058 <__alt_data_end+0xf800b058>
1000b194:	d8c00217 	ldw	r3,8(sp)
1000b198:	00c00c0e 	bge	zero,r3,1000b1cc <__multiply+0x24c>
1000b19c:	d8c00317 	ldw	r3,12(sp)
1000b1a0:	18bfff17 	ldw	r2,-4(r3)
1000b1a4:	1d7fff04 	addi	r21,r3,-4
1000b1a8:	10000326 	beq	r2,zero,1000b1b8 <__multiply+0x238>
1000b1ac:	00000706 	br	1000b1cc <__multiply+0x24c>
1000b1b0:	a8800017 	ldw	r2,0(r21)
1000b1b4:	1000051e 	bne	r2,zero,1000b1cc <__multiply+0x24c>
1000b1b8:	d8c00217 	ldw	r3,8(sp)
1000b1bc:	ad7fff04 	addi	r21,r21,-4
1000b1c0:	18ffffc4 	addi	r3,r3,-1
1000b1c4:	d8c00215 	stw	r3,8(sp)
1000b1c8:	183ff91e 	bne	r3,zero,1000b1b0 <__alt_data_end+0xf800b1b0>
1000b1cc:	d8c00617 	ldw	r3,24(sp)
1000b1d0:	d9000217 	ldw	r4,8(sp)
1000b1d4:	1805883a 	mov	r2,r3
1000b1d8:	19000415 	stw	r4,16(r3)
1000b1dc:	dfc01017 	ldw	ra,64(sp)
1000b1e0:	df000f17 	ldw	fp,60(sp)
1000b1e4:	ddc00e17 	ldw	r23,56(sp)
1000b1e8:	dd800d17 	ldw	r22,52(sp)
1000b1ec:	dd400c17 	ldw	r21,48(sp)
1000b1f0:	dd000b17 	ldw	r20,44(sp)
1000b1f4:	dcc00a17 	ldw	r19,40(sp)
1000b1f8:	dc800917 	ldw	r18,36(sp)
1000b1fc:	dc400817 	ldw	r17,32(sp)
1000b200:	dc000717 	ldw	r16,28(sp)
1000b204:	dec01104 	addi	sp,sp,68
1000b208:	f800283a 	ret

1000b20c <__pow5mult>:
1000b20c:	defffa04 	addi	sp,sp,-24
1000b210:	dcc00315 	stw	r19,12(sp)
1000b214:	dc000015 	stw	r16,0(sp)
1000b218:	dfc00515 	stw	ra,20(sp)
1000b21c:	dd000415 	stw	r20,16(sp)
1000b220:	dc800215 	stw	r18,8(sp)
1000b224:	dc400115 	stw	r17,4(sp)
1000b228:	308000cc 	andi	r2,r6,3
1000b22c:	3021883a 	mov	r16,r6
1000b230:	2027883a 	mov	r19,r4
1000b234:	10002f1e 	bne	r2,zero,1000b2f4 <__pow5mult+0xe8>
1000b238:	2825883a 	mov	r18,r5
1000b23c:	8021d0ba 	srai	r16,r16,2
1000b240:	80001a26 	beq	r16,zero,1000b2ac <__pow5mult+0xa0>
1000b244:	9c401217 	ldw	r17,72(r19)
1000b248:	8800061e 	bne	r17,zero,1000b264 <__pow5mult+0x58>
1000b24c:	00003406 	br	1000b320 <__pow5mult+0x114>
1000b250:	8021d07a 	srai	r16,r16,1
1000b254:	80001526 	beq	r16,zero,1000b2ac <__pow5mult+0xa0>
1000b258:	88800017 	ldw	r2,0(r17)
1000b25c:	10001c26 	beq	r2,zero,1000b2d0 <__pow5mult+0xc4>
1000b260:	1023883a 	mov	r17,r2
1000b264:	8080004c 	andi	r2,r16,1
1000b268:	103ff926 	beq	r2,zero,1000b250 <__alt_data_end+0xf800b250>
1000b26c:	880d883a 	mov	r6,r17
1000b270:	900b883a 	mov	r5,r18
1000b274:	9809883a 	mov	r4,r19
1000b278:	000af800 	call	1000af80 <__multiply>
1000b27c:	90001b26 	beq	r18,zero,1000b2ec <__pow5mult+0xe0>
1000b280:	91000117 	ldw	r4,4(r18)
1000b284:	98c01317 	ldw	r3,76(r19)
1000b288:	8021d07a 	srai	r16,r16,1
1000b28c:	2109883a 	add	r4,r4,r4
1000b290:	2109883a 	add	r4,r4,r4
1000b294:	1907883a 	add	r3,r3,r4
1000b298:	19000017 	ldw	r4,0(r3)
1000b29c:	91000015 	stw	r4,0(r18)
1000b2a0:	1c800015 	stw	r18,0(r3)
1000b2a4:	1025883a 	mov	r18,r2
1000b2a8:	803feb1e 	bne	r16,zero,1000b258 <__alt_data_end+0xf800b258>
1000b2ac:	9005883a 	mov	r2,r18
1000b2b0:	dfc00517 	ldw	ra,20(sp)
1000b2b4:	dd000417 	ldw	r20,16(sp)
1000b2b8:	dcc00317 	ldw	r19,12(sp)
1000b2bc:	dc800217 	ldw	r18,8(sp)
1000b2c0:	dc400117 	ldw	r17,4(sp)
1000b2c4:	dc000017 	ldw	r16,0(sp)
1000b2c8:	dec00604 	addi	sp,sp,24
1000b2cc:	f800283a 	ret
1000b2d0:	880d883a 	mov	r6,r17
1000b2d4:	880b883a 	mov	r5,r17
1000b2d8:	9809883a 	mov	r4,r19
1000b2dc:	000af800 	call	1000af80 <__multiply>
1000b2e0:	88800015 	stw	r2,0(r17)
1000b2e4:	10000015 	stw	zero,0(r2)
1000b2e8:	003fdd06 	br	1000b260 <__alt_data_end+0xf800b260>
1000b2ec:	1025883a 	mov	r18,r2
1000b2f0:	003fd706 	br	1000b250 <__alt_data_end+0xf800b250>
1000b2f4:	10bfffc4 	addi	r2,r2,-1
1000b2f8:	1085883a 	add	r2,r2,r2
1000b2fc:	00c40074 	movhi	r3,4097
1000b300:	18d31d04 	addi	r3,r3,19572
1000b304:	1085883a 	add	r2,r2,r2
1000b308:	1885883a 	add	r2,r3,r2
1000b30c:	11800017 	ldw	r6,0(r2)
1000b310:	000f883a 	mov	r7,zero
1000b314:	000abe00 	call	1000abe0 <__multadd>
1000b318:	1025883a 	mov	r18,r2
1000b31c:	003fc706 	br	1000b23c <__alt_data_end+0xf800b23c>
1000b320:	05000044 	movi	r20,1
1000b324:	a00b883a 	mov	r5,r20
1000b328:	9809883a 	mov	r4,r19
1000b32c:	000ab100 	call	1000ab10 <_Balloc>
1000b330:	1023883a 	mov	r17,r2
1000b334:	00809c44 	movi	r2,625
1000b338:	88800515 	stw	r2,20(r17)
1000b33c:	8d000415 	stw	r20,16(r17)
1000b340:	9c401215 	stw	r17,72(r19)
1000b344:	88000015 	stw	zero,0(r17)
1000b348:	003fc606 	br	1000b264 <__alt_data_end+0xf800b264>

1000b34c <__lshift>:
1000b34c:	defff904 	addi	sp,sp,-28
1000b350:	dd400515 	stw	r21,20(sp)
1000b354:	dcc00315 	stw	r19,12(sp)
1000b358:	302bd17a 	srai	r21,r6,5
1000b35c:	2cc00417 	ldw	r19,16(r5)
1000b360:	28800217 	ldw	r2,8(r5)
1000b364:	dd000415 	stw	r20,16(sp)
1000b368:	ace7883a 	add	r19,r21,r19
1000b36c:	dc800215 	stw	r18,8(sp)
1000b370:	dc400115 	stw	r17,4(sp)
1000b374:	dc000015 	stw	r16,0(sp)
1000b378:	dfc00615 	stw	ra,24(sp)
1000b37c:	9c000044 	addi	r16,r19,1
1000b380:	2823883a 	mov	r17,r5
1000b384:	3029883a 	mov	r20,r6
1000b388:	2025883a 	mov	r18,r4
1000b38c:	29400117 	ldw	r5,4(r5)
1000b390:	1400030e 	bge	r2,r16,1000b3a0 <__lshift+0x54>
1000b394:	1085883a 	add	r2,r2,r2
1000b398:	29400044 	addi	r5,r5,1
1000b39c:	143ffd16 	blt	r2,r16,1000b394 <__alt_data_end+0xf800b394>
1000b3a0:	9009883a 	mov	r4,r18
1000b3a4:	000ab100 	call	1000ab10 <_Balloc>
1000b3a8:	10c00504 	addi	r3,r2,20
1000b3ac:	0540070e 	bge	zero,r21,1000b3cc <__lshift+0x80>
1000b3b0:	ad6b883a 	add	r21,r21,r21
1000b3b4:	ad6b883a 	add	r21,r21,r21
1000b3b8:	1809883a 	mov	r4,r3
1000b3bc:	1d47883a 	add	r3,r3,r21
1000b3c0:	20000015 	stw	zero,0(r4)
1000b3c4:	21000104 	addi	r4,r4,4
1000b3c8:	193ffd1e 	bne	r3,r4,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b3cc:	8a000417 	ldw	r8,16(r17)
1000b3d0:	89000504 	addi	r4,r17,20
1000b3d4:	a18007cc 	andi	r6,r20,31
1000b3d8:	4211883a 	add	r8,r8,r8
1000b3dc:	4211883a 	add	r8,r8,r8
1000b3e0:	2211883a 	add	r8,r4,r8
1000b3e4:	30002326 	beq	r6,zero,1000b474 <__lshift+0x128>
1000b3e8:	02400804 	movi	r9,32
1000b3ec:	4993c83a 	sub	r9,r9,r6
1000b3f0:	000b883a 	mov	r5,zero
1000b3f4:	21c00017 	ldw	r7,0(r4)
1000b3f8:	1815883a 	mov	r10,r3
1000b3fc:	18c00104 	addi	r3,r3,4
1000b400:	398e983a 	sll	r7,r7,r6
1000b404:	21000104 	addi	r4,r4,4
1000b408:	394ab03a 	or	r5,r7,r5
1000b40c:	197fff15 	stw	r5,-4(r3)
1000b410:	217fff17 	ldw	r5,-4(r4)
1000b414:	2a4ad83a 	srl	r5,r5,r9
1000b418:	223ff636 	bltu	r4,r8,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b41c:	51400115 	stw	r5,4(r10)
1000b420:	28001a1e 	bne	r5,zero,1000b48c <__lshift+0x140>
1000b424:	843fffc4 	addi	r16,r16,-1
1000b428:	14000415 	stw	r16,16(r2)
1000b42c:	88000826 	beq	r17,zero,1000b450 <__lshift+0x104>
1000b430:	89000117 	ldw	r4,4(r17)
1000b434:	90c01317 	ldw	r3,76(r18)
1000b438:	2109883a 	add	r4,r4,r4
1000b43c:	2109883a 	add	r4,r4,r4
1000b440:	1907883a 	add	r3,r3,r4
1000b444:	19000017 	ldw	r4,0(r3)
1000b448:	89000015 	stw	r4,0(r17)
1000b44c:	1c400015 	stw	r17,0(r3)
1000b450:	dfc00617 	ldw	ra,24(sp)
1000b454:	dd400517 	ldw	r21,20(sp)
1000b458:	dd000417 	ldw	r20,16(sp)
1000b45c:	dcc00317 	ldw	r19,12(sp)
1000b460:	dc800217 	ldw	r18,8(sp)
1000b464:	dc400117 	ldw	r17,4(sp)
1000b468:	dc000017 	ldw	r16,0(sp)
1000b46c:	dec00704 	addi	sp,sp,28
1000b470:	f800283a 	ret
1000b474:	21400017 	ldw	r5,0(r4)
1000b478:	18c00104 	addi	r3,r3,4
1000b47c:	21000104 	addi	r4,r4,4
1000b480:	197fff15 	stw	r5,-4(r3)
1000b484:	223ffb36 	bltu	r4,r8,1000b474 <__alt_data_end+0xf800b474>
1000b488:	003fe606 	br	1000b424 <__alt_data_end+0xf800b424>
1000b48c:	9c000084 	addi	r16,r19,2
1000b490:	003fe406 	br	1000b424 <__alt_data_end+0xf800b424>

1000b494 <__mcmp>:
1000b494:	20800417 	ldw	r2,16(r4)
1000b498:	28c00417 	ldw	r3,16(r5)
1000b49c:	10c5c83a 	sub	r2,r2,r3
1000b4a0:	1000111e 	bne	r2,zero,1000b4e8 <__mcmp+0x54>
1000b4a4:	18c7883a 	add	r3,r3,r3
1000b4a8:	18c7883a 	add	r3,r3,r3
1000b4ac:	21000504 	addi	r4,r4,20
1000b4b0:	29400504 	addi	r5,r5,20
1000b4b4:	20c5883a 	add	r2,r4,r3
1000b4b8:	28cb883a 	add	r5,r5,r3
1000b4bc:	00000106 	br	1000b4c4 <__mcmp+0x30>
1000b4c0:	20800a2e 	bgeu	r4,r2,1000b4ec <__mcmp+0x58>
1000b4c4:	10bfff04 	addi	r2,r2,-4
1000b4c8:	297fff04 	addi	r5,r5,-4
1000b4cc:	11800017 	ldw	r6,0(r2)
1000b4d0:	28c00017 	ldw	r3,0(r5)
1000b4d4:	30fffa26 	beq	r6,r3,1000b4c0 <__alt_data_end+0xf800b4c0>
1000b4d8:	30c00236 	bltu	r6,r3,1000b4e4 <__mcmp+0x50>
1000b4dc:	00800044 	movi	r2,1
1000b4e0:	f800283a 	ret
1000b4e4:	00bfffc4 	movi	r2,-1
1000b4e8:	f800283a 	ret
1000b4ec:	0005883a 	mov	r2,zero
1000b4f0:	f800283a 	ret

1000b4f4 <__mdiff>:
1000b4f4:	28c00417 	ldw	r3,16(r5)
1000b4f8:	30800417 	ldw	r2,16(r6)
1000b4fc:	defffa04 	addi	sp,sp,-24
1000b500:	dcc00315 	stw	r19,12(sp)
1000b504:	dc800215 	stw	r18,8(sp)
1000b508:	dfc00515 	stw	ra,20(sp)
1000b50c:	dd000415 	stw	r20,16(sp)
1000b510:	dc400115 	stw	r17,4(sp)
1000b514:	dc000015 	stw	r16,0(sp)
1000b518:	1887c83a 	sub	r3,r3,r2
1000b51c:	2825883a 	mov	r18,r5
1000b520:	3027883a 	mov	r19,r6
1000b524:	1800141e 	bne	r3,zero,1000b578 <__mdiff+0x84>
1000b528:	1085883a 	add	r2,r2,r2
1000b52c:	1085883a 	add	r2,r2,r2
1000b530:	2a000504 	addi	r8,r5,20
1000b534:	34000504 	addi	r16,r6,20
1000b538:	4087883a 	add	r3,r8,r2
1000b53c:	8085883a 	add	r2,r16,r2
1000b540:	00000106 	br	1000b548 <__mdiff+0x54>
1000b544:	40c0592e 	bgeu	r8,r3,1000b6ac <__mdiff+0x1b8>
1000b548:	18ffff04 	addi	r3,r3,-4
1000b54c:	10bfff04 	addi	r2,r2,-4
1000b550:	19c00017 	ldw	r7,0(r3)
1000b554:	11400017 	ldw	r5,0(r2)
1000b558:	397ffa26 	beq	r7,r5,1000b544 <__alt_data_end+0xf800b544>
1000b55c:	3940592e 	bgeu	r7,r5,1000b6c4 <__mdiff+0x1d0>
1000b560:	9005883a 	mov	r2,r18
1000b564:	4023883a 	mov	r17,r8
1000b568:	9825883a 	mov	r18,r19
1000b56c:	05000044 	movi	r20,1
1000b570:	1027883a 	mov	r19,r2
1000b574:	00000406 	br	1000b588 <__mdiff+0x94>
1000b578:	18005616 	blt	r3,zero,1000b6d4 <__mdiff+0x1e0>
1000b57c:	34400504 	addi	r17,r6,20
1000b580:	2c000504 	addi	r16,r5,20
1000b584:	0029883a 	mov	r20,zero
1000b588:	91400117 	ldw	r5,4(r18)
1000b58c:	000ab100 	call	1000ab10 <_Balloc>
1000b590:	92400417 	ldw	r9,16(r18)
1000b594:	9b000417 	ldw	r12,16(r19)
1000b598:	12c00504 	addi	r11,r2,20
1000b59c:	4a51883a 	add	r8,r9,r9
1000b5a0:	6319883a 	add	r12,r12,r12
1000b5a4:	4211883a 	add	r8,r8,r8
1000b5a8:	6319883a 	add	r12,r12,r12
1000b5ac:	15000315 	stw	r20,12(r2)
1000b5b0:	8211883a 	add	r8,r16,r8
1000b5b4:	8b19883a 	add	r12,r17,r12
1000b5b8:	0007883a 	mov	r3,zero
1000b5bc:	81400017 	ldw	r5,0(r16)
1000b5c0:	89c00017 	ldw	r7,0(r17)
1000b5c4:	59800104 	addi	r6,r11,4
1000b5c8:	293fffcc 	andi	r4,r5,65535
1000b5cc:	20c7883a 	add	r3,r4,r3
1000b5d0:	393fffcc 	andi	r4,r7,65535
1000b5d4:	1909c83a 	sub	r4,r3,r4
1000b5d8:	280ad43a 	srli	r5,r5,16
1000b5dc:	380ed43a 	srli	r7,r7,16
1000b5e0:	2007d43a 	srai	r3,r4,16
1000b5e4:	213fffcc 	andi	r4,r4,65535
1000b5e8:	29cbc83a 	sub	r5,r5,r7
1000b5ec:	28c7883a 	add	r3,r5,r3
1000b5f0:	180a943a 	slli	r5,r3,16
1000b5f4:	8c400104 	addi	r17,r17,4
1000b5f8:	84000104 	addi	r16,r16,4
1000b5fc:	2908b03a 	or	r4,r5,r4
1000b600:	59000015 	stw	r4,0(r11)
1000b604:	1807d43a 	srai	r3,r3,16
1000b608:	3015883a 	mov	r10,r6
1000b60c:	3017883a 	mov	r11,r6
1000b610:	8b3fea36 	bltu	r17,r12,1000b5bc <__alt_data_end+0xf800b5bc>
1000b614:	8200162e 	bgeu	r16,r8,1000b670 <__mdiff+0x17c>
1000b618:	8017883a 	mov	r11,r16
1000b61c:	59400017 	ldw	r5,0(r11)
1000b620:	31800104 	addi	r6,r6,4
1000b624:	5ac00104 	addi	r11,r11,4
1000b628:	293fffcc 	andi	r4,r5,65535
1000b62c:	20c7883a 	add	r3,r4,r3
1000b630:	280ed43a 	srli	r7,r5,16
1000b634:	180bd43a 	srai	r5,r3,16
1000b638:	193fffcc 	andi	r4,r3,65535
1000b63c:	3947883a 	add	r3,r7,r5
1000b640:	180a943a 	slli	r5,r3,16
1000b644:	1807d43a 	srai	r3,r3,16
1000b648:	2908b03a 	or	r4,r5,r4
1000b64c:	313fff15 	stw	r4,-4(r6)
1000b650:	5a3ff236 	bltu	r11,r8,1000b61c <__alt_data_end+0xf800b61c>
1000b654:	0406303a 	nor	r3,zero,r16
1000b658:	1a07883a 	add	r3,r3,r8
1000b65c:	1806d0ba 	srli	r3,r3,2
1000b660:	18c00044 	addi	r3,r3,1
1000b664:	18c7883a 	add	r3,r3,r3
1000b668:	18c7883a 	add	r3,r3,r3
1000b66c:	50d5883a 	add	r10,r10,r3
1000b670:	50ffff04 	addi	r3,r10,-4
1000b674:	2000041e 	bne	r4,zero,1000b688 <__mdiff+0x194>
1000b678:	18ffff04 	addi	r3,r3,-4
1000b67c:	19000017 	ldw	r4,0(r3)
1000b680:	4a7fffc4 	addi	r9,r9,-1
1000b684:	203ffc26 	beq	r4,zero,1000b678 <__alt_data_end+0xf800b678>
1000b688:	12400415 	stw	r9,16(r2)
1000b68c:	dfc00517 	ldw	ra,20(sp)
1000b690:	dd000417 	ldw	r20,16(sp)
1000b694:	dcc00317 	ldw	r19,12(sp)
1000b698:	dc800217 	ldw	r18,8(sp)
1000b69c:	dc400117 	ldw	r17,4(sp)
1000b6a0:	dc000017 	ldw	r16,0(sp)
1000b6a4:	dec00604 	addi	sp,sp,24
1000b6a8:	f800283a 	ret
1000b6ac:	000b883a 	mov	r5,zero
1000b6b0:	000ab100 	call	1000ab10 <_Balloc>
1000b6b4:	00c00044 	movi	r3,1
1000b6b8:	10c00415 	stw	r3,16(r2)
1000b6bc:	10000515 	stw	zero,20(r2)
1000b6c0:	003ff206 	br	1000b68c <__alt_data_end+0xf800b68c>
1000b6c4:	8023883a 	mov	r17,r16
1000b6c8:	0029883a 	mov	r20,zero
1000b6cc:	4021883a 	mov	r16,r8
1000b6d0:	003fad06 	br	1000b588 <__alt_data_end+0xf800b588>
1000b6d4:	9005883a 	mov	r2,r18
1000b6d8:	94400504 	addi	r17,r18,20
1000b6dc:	9c000504 	addi	r16,r19,20
1000b6e0:	9825883a 	mov	r18,r19
1000b6e4:	05000044 	movi	r20,1
1000b6e8:	1027883a 	mov	r19,r2
1000b6ec:	003fa606 	br	1000b588 <__alt_data_end+0xf800b588>

1000b6f0 <__ulp>:
1000b6f0:	295ffc2c 	andhi	r5,r5,32752
1000b6f4:	00bf3034 	movhi	r2,64704
1000b6f8:	2887883a 	add	r3,r5,r2
1000b6fc:	00c0020e 	bge	zero,r3,1000b708 <__ulp+0x18>
1000b700:	0005883a 	mov	r2,zero
1000b704:	f800283a 	ret
1000b708:	00c7c83a 	sub	r3,zero,r3
1000b70c:	1807d53a 	srai	r3,r3,20
1000b710:	008004c4 	movi	r2,19
1000b714:	10c00b0e 	bge	r2,r3,1000b744 <__ulp+0x54>
1000b718:	18bffb04 	addi	r2,r3,-20
1000b71c:	01000784 	movi	r4,30
1000b720:	0007883a 	mov	r3,zero
1000b724:	20800516 	blt	r4,r2,1000b73c <__ulp+0x4c>
1000b728:	010007c4 	movi	r4,31
1000b72c:	2089c83a 	sub	r4,r4,r2
1000b730:	00800044 	movi	r2,1
1000b734:	1104983a 	sll	r2,r2,r4
1000b738:	f800283a 	ret
1000b73c:	00800044 	movi	r2,1
1000b740:	f800283a 	ret
1000b744:	01400234 	movhi	r5,8
1000b748:	28c7d83a 	sra	r3,r5,r3
1000b74c:	0005883a 	mov	r2,zero
1000b750:	f800283a 	ret

1000b754 <__b2d>:
1000b754:	defffa04 	addi	sp,sp,-24
1000b758:	dc000015 	stw	r16,0(sp)
1000b75c:	24000417 	ldw	r16,16(r4)
1000b760:	dc400115 	stw	r17,4(sp)
1000b764:	24400504 	addi	r17,r4,20
1000b768:	8421883a 	add	r16,r16,r16
1000b76c:	8421883a 	add	r16,r16,r16
1000b770:	8c21883a 	add	r16,r17,r16
1000b774:	dc800215 	stw	r18,8(sp)
1000b778:	84bfff17 	ldw	r18,-4(r16)
1000b77c:	dd000415 	stw	r20,16(sp)
1000b780:	dcc00315 	stw	r19,12(sp)
1000b784:	9009883a 	mov	r4,r18
1000b788:	2829883a 	mov	r20,r5
1000b78c:	dfc00515 	stw	ra,20(sp)
1000b790:	000ae2c0 	call	1000ae2c <__hi0bits>
1000b794:	00c00804 	movi	r3,32
1000b798:	1889c83a 	sub	r4,r3,r2
1000b79c:	a1000015 	stw	r4,0(r20)
1000b7a0:	01000284 	movi	r4,10
1000b7a4:	84ffff04 	addi	r19,r16,-4
1000b7a8:	20801216 	blt	r4,r2,1000b7f4 <__b2d+0xa0>
1000b7ac:	018002c4 	movi	r6,11
1000b7b0:	308dc83a 	sub	r6,r6,r2
1000b7b4:	9186d83a 	srl	r3,r18,r6
1000b7b8:	18cffc34 	orhi	r3,r3,16368
1000b7bc:	8cc0212e 	bgeu	r17,r19,1000b844 <__b2d+0xf0>
1000b7c0:	813ffe17 	ldw	r4,-8(r16)
1000b7c4:	218cd83a 	srl	r6,r4,r6
1000b7c8:	10800544 	addi	r2,r2,21
1000b7cc:	9084983a 	sll	r2,r18,r2
1000b7d0:	1184b03a 	or	r2,r2,r6
1000b7d4:	dfc00517 	ldw	ra,20(sp)
1000b7d8:	dd000417 	ldw	r20,16(sp)
1000b7dc:	dcc00317 	ldw	r19,12(sp)
1000b7e0:	dc800217 	ldw	r18,8(sp)
1000b7e4:	dc400117 	ldw	r17,4(sp)
1000b7e8:	dc000017 	ldw	r16,0(sp)
1000b7ec:	dec00604 	addi	sp,sp,24
1000b7f0:	f800283a 	ret
1000b7f4:	8cc00f2e 	bgeu	r17,r19,1000b834 <__b2d+0xe0>
1000b7f8:	117ffd44 	addi	r5,r2,-11
1000b7fc:	80bffe17 	ldw	r2,-8(r16)
1000b800:	28000e26 	beq	r5,zero,1000b83c <__b2d+0xe8>
1000b804:	1949c83a 	sub	r4,r3,r5
1000b808:	9164983a 	sll	r18,r18,r5
1000b80c:	1106d83a 	srl	r3,r2,r4
1000b810:	81bffe04 	addi	r6,r16,-8
1000b814:	948ffc34 	orhi	r18,r18,16368
1000b818:	90c6b03a 	or	r3,r18,r3
1000b81c:	89800e2e 	bgeu	r17,r6,1000b858 <__b2d+0x104>
1000b820:	81bffd17 	ldw	r6,-12(r16)
1000b824:	1144983a 	sll	r2,r2,r5
1000b828:	310ad83a 	srl	r5,r6,r4
1000b82c:	2884b03a 	or	r2,r5,r2
1000b830:	003fe806 	br	1000b7d4 <__alt_data_end+0xf800b7d4>
1000b834:	10bffd44 	addi	r2,r2,-11
1000b838:	1000041e 	bne	r2,zero,1000b84c <__b2d+0xf8>
1000b83c:	90cffc34 	orhi	r3,r18,16368
1000b840:	003fe406 	br	1000b7d4 <__alt_data_end+0xf800b7d4>
1000b844:	000d883a 	mov	r6,zero
1000b848:	003fdf06 	br	1000b7c8 <__alt_data_end+0xf800b7c8>
1000b84c:	90a4983a 	sll	r18,r18,r2
1000b850:	0005883a 	mov	r2,zero
1000b854:	003ff906 	br	1000b83c <__alt_data_end+0xf800b83c>
1000b858:	1144983a 	sll	r2,r2,r5
1000b85c:	003fdd06 	br	1000b7d4 <__alt_data_end+0xf800b7d4>

1000b860 <__d2b>:
1000b860:	defff804 	addi	sp,sp,-32
1000b864:	dc000215 	stw	r16,8(sp)
1000b868:	3021883a 	mov	r16,r6
1000b86c:	dc400315 	stw	r17,12(sp)
1000b870:	8022907a 	slli	r17,r16,1
1000b874:	dd000615 	stw	r20,24(sp)
1000b878:	2829883a 	mov	r20,r5
1000b87c:	01400044 	movi	r5,1
1000b880:	dcc00515 	stw	r19,20(sp)
1000b884:	dc800415 	stw	r18,16(sp)
1000b888:	dfc00715 	stw	ra,28(sp)
1000b88c:	3825883a 	mov	r18,r7
1000b890:	8822d57a 	srli	r17,r17,21
1000b894:	000ab100 	call	1000ab10 <_Balloc>
1000b898:	1027883a 	mov	r19,r2
1000b89c:	00800434 	movhi	r2,16
1000b8a0:	10bfffc4 	addi	r2,r2,-1
1000b8a4:	808c703a 	and	r6,r16,r2
1000b8a8:	88000126 	beq	r17,zero,1000b8b0 <__d2b+0x50>
1000b8ac:	31800434 	orhi	r6,r6,16
1000b8b0:	d9800015 	stw	r6,0(sp)
1000b8b4:	a0002426 	beq	r20,zero,1000b948 <__d2b+0xe8>
1000b8b8:	d9000104 	addi	r4,sp,4
1000b8bc:	dd000115 	stw	r20,4(sp)
1000b8c0:	000ae940 	call	1000ae94 <__lo0bits>
1000b8c4:	d8c00017 	ldw	r3,0(sp)
1000b8c8:	10002f1e 	bne	r2,zero,1000b988 <__d2b+0x128>
1000b8cc:	d9000117 	ldw	r4,4(sp)
1000b8d0:	99000515 	stw	r4,20(r19)
1000b8d4:	1821003a 	cmpeq	r16,r3,zero
1000b8d8:	01000084 	movi	r4,2
1000b8dc:	2421c83a 	sub	r16,r4,r16
1000b8e0:	98c00615 	stw	r3,24(r19)
1000b8e4:	9c000415 	stw	r16,16(r19)
1000b8e8:	88001f1e 	bne	r17,zero,1000b968 <__d2b+0x108>
1000b8ec:	10bef384 	addi	r2,r2,-1074
1000b8f0:	90800015 	stw	r2,0(r18)
1000b8f4:	00900034 	movhi	r2,16384
1000b8f8:	10bfffc4 	addi	r2,r2,-1
1000b8fc:	8085883a 	add	r2,r16,r2
1000b900:	1085883a 	add	r2,r2,r2
1000b904:	1085883a 	add	r2,r2,r2
1000b908:	9885883a 	add	r2,r19,r2
1000b90c:	11000517 	ldw	r4,20(r2)
1000b910:	8020917a 	slli	r16,r16,5
1000b914:	000ae2c0 	call	1000ae2c <__hi0bits>
1000b918:	d8c00817 	ldw	r3,32(sp)
1000b91c:	8085c83a 	sub	r2,r16,r2
1000b920:	18800015 	stw	r2,0(r3)
1000b924:	9805883a 	mov	r2,r19
1000b928:	dfc00717 	ldw	ra,28(sp)
1000b92c:	dd000617 	ldw	r20,24(sp)
1000b930:	dcc00517 	ldw	r19,20(sp)
1000b934:	dc800417 	ldw	r18,16(sp)
1000b938:	dc400317 	ldw	r17,12(sp)
1000b93c:	dc000217 	ldw	r16,8(sp)
1000b940:	dec00804 	addi	sp,sp,32
1000b944:	f800283a 	ret
1000b948:	d809883a 	mov	r4,sp
1000b94c:	000ae940 	call	1000ae94 <__lo0bits>
1000b950:	d8c00017 	ldw	r3,0(sp)
1000b954:	04000044 	movi	r16,1
1000b958:	9c000415 	stw	r16,16(r19)
1000b95c:	98c00515 	stw	r3,20(r19)
1000b960:	10800804 	addi	r2,r2,32
1000b964:	883fe126 	beq	r17,zero,1000b8ec <__alt_data_end+0xf800b8ec>
1000b968:	00c00d44 	movi	r3,53
1000b96c:	8c7ef344 	addi	r17,r17,-1075
1000b970:	88a3883a 	add	r17,r17,r2
1000b974:	1885c83a 	sub	r2,r3,r2
1000b978:	d8c00817 	ldw	r3,32(sp)
1000b97c:	94400015 	stw	r17,0(r18)
1000b980:	18800015 	stw	r2,0(r3)
1000b984:	003fe706 	br	1000b924 <__alt_data_end+0xf800b924>
1000b988:	01000804 	movi	r4,32
1000b98c:	2089c83a 	sub	r4,r4,r2
1000b990:	1908983a 	sll	r4,r3,r4
1000b994:	d9400117 	ldw	r5,4(sp)
1000b998:	1886d83a 	srl	r3,r3,r2
1000b99c:	2148b03a 	or	r4,r4,r5
1000b9a0:	99000515 	stw	r4,20(r19)
1000b9a4:	d8c00015 	stw	r3,0(sp)
1000b9a8:	003fca06 	br	1000b8d4 <__alt_data_end+0xf800b8d4>

1000b9ac <__ratio>:
1000b9ac:	defff904 	addi	sp,sp,-28
1000b9b0:	dc400315 	stw	r17,12(sp)
1000b9b4:	2823883a 	mov	r17,r5
1000b9b8:	d9400104 	addi	r5,sp,4
1000b9bc:	dfc00615 	stw	ra,24(sp)
1000b9c0:	dcc00515 	stw	r19,20(sp)
1000b9c4:	dc800415 	stw	r18,16(sp)
1000b9c8:	2027883a 	mov	r19,r4
1000b9cc:	dc000215 	stw	r16,8(sp)
1000b9d0:	000b7540 	call	1000b754 <__b2d>
1000b9d4:	d80b883a 	mov	r5,sp
1000b9d8:	8809883a 	mov	r4,r17
1000b9dc:	1025883a 	mov	r18,r2
1000b9e0:	1821883a 	mov	r16,r3
1000b9e4:	000b7540 	call	1000b754 <__b2d>
1000b9e8:	8a000417 	ldw	r8,16(r17)
1000b9ec:	99000417 	ldw	r4,16(r19)
1000b9f0:	d9400117 	ldw	r5,4(sp)
1000b9f4:	2209c83a 	sub	r4,r4,r8
1000b9f8:	2010917a 	slli	r8,r4,5
1000b9fc:	d9000017 	ldw	r4,0(sp)
1000ba00:	2909c83a 	sub	r4,r5,r4
1000ba04:	4109883a 	add	r4,r8,r4
1000ba08:	01000e0e 	bge	zero,r4,1000ba44 <__ratio+0x98>
1000ba0c:	2008953a 	slli	r4,r4,20
1000ba10:	2421883a 	add	r16,r4,r16
1000ba14:	100d883a 	mov	r6,r2
1000ba18:	180f883a 	mov	r7,r3
1000ba1c:	9009883a 	mov	r4,r18
1000ba20:	800b883a 	mov	r5,r16
1000ba24:	000fa700 	call	1000fa70 <__divdf3>
1000ba28:	dfc00617 	ldw	ra,24(sp)
1000ba2c:	dcc00517 	ldw	r19,20(sp)
1000ba30:	dc800417 	ldw	r18,16(sp)
1000ba34:	dc400317 	ldw	r17,12(sp)
1000ba38:	dc000217 	ldw	r16,8(sp)
1000ba3c:	dec00704 	addi	sp,sp,28
1000ba40:	f800283a 	ret
1000ba44:	2008953a 	slli	r4,r4,20
1000ba48:	1907c83a 	sub	r3,r3,r4
1000ba4c:	003ff106 	br	1000ba14 <__alt_data_end+0xf800ba14>

1000ba50 <_mprec_log10>:
1000ba50:	defffe04 	addi	sp,sp,-8
1000ba54:	dc000015 	stw	r16,0(sp)
1000ba58:	dfc00115 	stw	ra,4(sp)
1000ba5c:	008005c4 	movi	r2,23
1000ba60:	2021883a 	mov	r16,r4
1000ba64:	11000d0e 	bge	r2,r4,1000ba9c <_mprec_log10+0x4c>
1000ba68:	0005883a 	mov	r2,zero
1000ba6c:	00cffc34 	movhi	r3,16368
1000ba70:	843fffc4 	addi	r16,r16,-1
1000ba74:	000d883a 	mov	r6,zero
1000ba78:	01d00934 	movhi	r7,16420
1000ba7c:	1009883a 	mov	r4,r2
1000ba80:	180b883a 	mov	r5,r3
1000ba84:	00106980 	call	10010698 <__muldf3>
1000ba88:	803ff91e 	bne	r16,zero,1000ba70 <__alt_data_end+0xf800ba70>
1000ba8c:	dfc00117 	ldw	ra,4(sp)
1000ba90:	dc000017 	ldw	r16,0(sp)
1000ba94:	dec00204 	addi	sp,sp,8
1000ba98:	f800283a 	ret
1000ba9c:	202090fa 	slli	r16,r4,3
1000baa0:	00840074 	movhi	r2,4097
1000baa4:	10933404 	addi	r2,r2,19664
1000baa8:	1421883a 	add	r16,r2,r16
1000baac:	80800017 	ldw	r2,0(r16)
1000bab0:	80c00117 	ldw	r3,4(r16)
1000bab4:	dfc00117 	ldw	ra,4(sp)
1000bab8:	dc000017 	ldw	r16,0(sp)
1000babc:	dec00204 	addi	sp,sp,8
1000bac0:	f800283a 	ret

1000bac4 <__copybits>:
1000bac4:	297fffc4 	addi	r5,r5,-1
1000bac8:	280fd17a 	srai	r7,r5,5
1000bacc:	30c00417 	ldw	r3,16(r6)
1000bad0:	30800504 	addi	r2,r6,20
1000bad4:	39c00044 	addi	r7,r7,1
1000bad8:	18c7883a 	add	r3,r3,r3
1000badc:	39cf883a 	add	r7,r7,r7
1000bae0:	18c7883a 	add	r3,r3,r3
1000bae4:	39cf883a 	add	r7,r7,r7
1000bae8:	10c7883a 	add	r3,r2,r3
1000baec:	21cf883a 	add	r7,r4,r7
1000baf0:	10c00d2e 	bgeu	r2,r3,1000bb28 <__copybits+0x64>
1000baf4:	200b883a 	mov	r5,r4
1000baf8:	12000017 	ldw	r8,0(r2)
1000bafc:	29400104 	addi	r5,r5,4
1000bb00:	10800104 	addi	r2,r2,4
1000bb04:	2a3fff15 	stw	r8,-4(r5)
1000bb08:	10fffb36 	bltu	r2,r3,1000baf8 <__alt_data_end+0xf800baf8>
1000bb0c:	1985c83a 	sub	r2,r3,r6
1000bb10:	10bffac4 	addi	r2,r2,-21
1000bb14:	1004d0ba 	srli	r2,r2,2
1000bb18:	10800044 	addi	r2,r2,1
1000bb1c:	1085883a 	add	r2,r2,r2
1000bb20:	1085883a 	add	r2,r2,r2
1000bb24:	2089883a 	add	r4,r4,r2
1000bb28:	21c0032e 	bgeu	r4,r7,1000bb38 <__copybits+0x74>
1000bb2c:	20000015 	stw	zero,0(r4)
1000bb30:	21000104 	addi	r4,r4,4
1000bb34:	21fffd36 	bltu	r4,r7,1000bb2c <__alt_data_end+0xf800bb2c>
1000bb38:	f800283a 	ret

1000bb3c <__any_on>:
1000bb3c:	20c00417 	ldw	r3,16(r4)
1000bb40:	2805d17a 	srai	r2,r5,5
1000bb44:	21000504 	addi	r4,r4,20
1000bb48:	18800d0e 	bge	r3,r2,1000bb80 <__any_on+0x44>
1000bb4c:	18c7883a 	add	r3,r3,r3
1000bb50:	18c7883a 	add	r3,r3,r3
1000bb54:	20c7883a 	add	r3,r4,r3
1000bb58:	20c0192e 	bgeu	r4,r3,1000bbc0 <__any_on+0x84>
1000bb5c:	18bfff17 	ldw	r2,-4(r3)
1000bb60:	18ffff04 	addi	r3,r3,-4
1000bb64:	1000041e 	bne	r2,zero,1000bb78 <__any_on+0x3c>
1000bb68:	20c0142e 	bgeu	r4,r3,1000bbbc <__any_on+0x80>
1000bb6c:	18ffff04 	addi	r3,r3,-4
1000bb70:	19400017 	ldw	r5,0(r3)
1000bb74:	283ffc26 	beq	r5,zero,1000bb68 <__alt_data_end+0xf800bb68>
1000bb78:	00800044 	movi	r2,1
1000bb7c:	f800283a 	ret
1000bb80:	10c00a0e 	bge	r2,r3,1000bbac <__any_on+0x70>
1000bb84:	1085883a 	add	r2,r2,r2
1000bb88:	1085883a 	add	r2,r2,r2
1000bb8c:	294007cc 	andi	r5,r5,31
1000bb90:	2087883a 	add	r3,r4,r2
1000bb94:	283ff026 	beq	r5,zero,1000bb58 <__alt_data_end+0xf800bb58>
1000bb98:	19800017 	ldw	r6,0(r3)
1000bb9c:	3144d83a 	srl	r2,r6,r5
1000bba0:	114a983a 	sll	r5,r2,r5
1000bba4:	317ff41e 	bne	r6,r5,1000bb78 <__alt_data_end+0xf800bb78>
1000bba8:	003feb06 	br	1000bb58 <__alt_data_end+0xf800bb58>
1000bbac:	1085883a 	add	r2,r2,r2
1000bbb0:	1085883a 	add	r2,r2,r2
1000bbb4:	2087883a 	add	r3,r4,r2
1000bbb8:	003fe706 	br	1000bb58 <__alt_data_end+0xf800bb58>
1000bbbc:	f800283a 	ret
1000bbc0:	0005883a 	mov	r2,zero
1000bbc4:	f800283a 	ret

1000bbc8 <_realloc_r>:
1000bbc8:	defff604 	addi	sp,sp,-40
1000bbcc:	dc800215 	stw	r18,8(sp)
1000bbd0:	dfc00915 	stw	ra,36(sp)
1000bbd4:	df000815 	stw	fp,32(sp)
1000bbd8:	ddc00715 	stw	r23,28(sp)
1000bbdc:	dd800615 	stw	r22,24(sp)
1000bbe0:	dd400515 	stw	r21,20(sp)
1000bbe4:	dd000415 	stw	r20,16(sp)
1000bbe8:	dcc00315 	stw	r19,12(sp)
1000bbec:	dc400115 	stw	r17,4(sp)
1000bbf0:	dc000015 	stw	r16,0(sp)
1000bbf4:	3025883a 	mov	r18,r6
1000bbf8:	2800b726 	beq	r5,zero,1000bed8 <_realloc_r+0x310>
1000bbfc:	282b883a 	mov	r21,r5
1000bc00:	2029883a 	mov	r20,r4
1000bc04:	00120040 	call	10012004 <__malloc_lock>
1000bc08:	a8bfff17 	ldw	r2,-4(r21)
1000bc0c:	043fff04 	movi	r16,-4
1000bc10:	90c002c4 	addi	r3,r18,11
1000bc14:	01000584 	movi	r4,22
1000bc18:	acfffe04 	addi	r19,r21,-8
1000bc1c:	1420703a 	and	r16,r2,r16
1000bc20:	20c0332e 	bgeu	r4,r3,1000bcf0 <_realloc_r+0x128>
1000bc24:	047ffe04 	movi	r17,-8
1000bc28:	1c62703a 	and	r17,r3,r17
1000bc2c:	8807883a 	mov	r3,r17
1000bc30:	88005816 	blt	r17,zero,1000bd94 <_realloc_r+0x1cc>
1000bc34:	8c805736 	bltu	r17,r18,1000bd94 <_realloc_r+0x1cc>
1000bc38:	80c0300e 	bge	r16,r3,1000bcfc <_realloc_r+0x134>
1000bc3c:	07040074 	movhi	fp,4097
1000bc40:	e7189204 	addi	fp,fp,25160
1000bc44:	e1c00217 	ldw	r7,8(fp)
1000bc48:	9c09883a 	add	r4,r19,r16
1000bc4c:	22000117 	ldw	r8,4(r4)
1000bc50:	21c06326 	beq	r4,r7,1000bde0 <_realloc_r+0x218>
1000bc54:	017fff84 	movi	r5,-2
1000bc58:	414a703a 	and	r5,r8,r5
1000bc5c:	214b883a 	add	r5,r4,r5
1000bc60:	29800117 	ldw	r6,4(r5)
1000bc64:	3180004c 	andi	r6,r6,1
1000bc68:	30003f26 	beq	r6,zero,1000bd68 <_realloc_r+0x1a0>
1000bc6c:	1080004c 	andi	r2,r2,1
1000bc70:	10008326 	beq	r2,zero,1000be80 <_realloc_r+0x2b8>
1000bc74:	900b883a 	mov	r5,r18
1000bc78:	a009883a 	mov	r4,r20
1000bc7c:	0009e540 	call	10009e54 <_malloc_r>
1000bc80:	1025883a 	mov	r18,r2
1000bc84:	10011e26 	beq	r2,zero,1000c100 <_realloc_r+0x538>
1000bc88:	a93fff17 	ldw	r4,-4(r21)
1000bc8c:	10fffe04 	addi	r3,r2,-8
1000bc90:	00bfff84 	movi	r2,-2
1000bc94:	2084703a 	and	r2,r4,r2
1000bc98:	9885883a 	add	r2,r19,r2
1000bc9c:	1880ee26 	beq	r3,r2,1000c058 <_realloc_r+0x490>
1000bca0:	81bfff04 	addi	r6,r16,-4
1000bca4:	00800904 	movi	r2,36
1000bca8:	1180b836 	bltu	r2,r6,1000bf8c <_realloc_r+0x3c4>
1000bcac:	00c004c4 	movi	r3,19
1000bcb0:	19809636 	bltu	r3,r6,1000bf0c <_realloc_r+0x344>
1000bcb4:	9005883a 	mov	r2,r18
1000bcb8:	a807883a 	mov	r3,r21
1000bcbc:	19000017 	ldw	r4,0(r3)
1000bcc0:	11000015 	stw	r4,0(r2)
1000bcc4:	19000117 	ldw	r4,4(r3)
1000bcc8:	11000115 	stw	r4,4(r2)
1000bccc:	18c00217 	ldw	r3,8(r3)
1000bcd0:	10c00215 	stw	r3,8(r2)
1000bcd4:	a80b883a 	mov	r5,r21
1000bcd8:	a009883a 	mov	r4,r20
1000bcdc:	000925c0 	call	1000925c <_free_r>
1000bce0:	a009883a 	mov	r4,r20
1000bce4:	00120280 	call	10012028 <__malloc_unlock>
1000bce8:	9005883a 	mov	r2,r18
1000bcec:	00001206 	br	1000bd38 <_realloc_r+0x170>
1000bcf0:	00c00404 	movi	r3,16
1000bcf4:	1823883a 	mov	r17,r3
1000bcf8:	003fce06 	br	1000bc34 <__alt_data_end+0xf800bc34>
1000bcfc:	a825883a 	mov	r18,r21
1000bd00:	8445c83a 	sub	r2,r16,r17
1000bd04:	00c003c4 	movi	r3,15
1000bd08:	18802636 	bltu	r3,r2,1000bda4 <_realloc_r+0x1dc>
1000bd0c:	99800117 	ldw	r6,4(r19)
1000bd10:	9c07883a 	add	r3,r19,r16
1000bd14:	3180004c 	andi	r6,r6,1
1000bd18:	3420b03a 	or	r16,r6,r16
1000bd1c:	9c000115 	stw	r16,4(r19)
1000bd20:	18800117 	ldw	r2,4(r3)
1000bd24:	10800054 	ori	r2,r2,1
1000bd28:	18800115 	stw	r2,4(r3)
1000bd2c:	a009883a 	mov	r4,r20
1000bd30:	00120280 	call	10012028 <__malloc_unlock>
1000bd34:	9005883a 	mov	r2,r18
1000bd38:	dfc00917 	ldw	ra,36(sp)
1000bd3c:	df000817 	ldw	fp,32(sp)
1000bd40:	ddc00717 	ldw	r23,28(sp)
1000bd44:	dd800617 	ldw	r22,24(sp)
1000bd48:	dd400517 	ldw	r21,20(sp)
1000bd4c:	dd000417 	ldw	r20,16(sp)
1000bd50:	dcc00317 	ldw	r19,12(sp)
1000bd54:	dc800217 	ldw	r18,8(sp)
1000bd58:	dc400117 	ldw	r17,4(sp)
1000bd5c:	dc000017 	ldw	r16,0(sp)
1000bd60:	dec00a04 	addi	sp,sp,40
1000bd64:	f800283a 	ret
1000bd68:	017fff04 	movi	r5,-4
1000bd6c:	414a703a 	and	r5,r8,r5
1000bd70:	814d883a 	add	r6,r16,r5
1000bd74:	30c01f16 	blt	r6,r3,1000bdf4 <_realloc_r+0x22c>
1000bd78:	20800317 	ldw	r2,12(r4)
1000bd7c:	20c00217 	ldw	r3,8(r4)
1000bd80:	a825883a 	mov	r18,r21
1000bd84:	3021883a 	mov	r16,r6
1000bd88:	18800315 	stw	r2,12(r3)
1000bd8c:	10c00215 	stw	r3,8(r2)
1000bd90:	003fdb06 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bd94:	00800304 	movi	r2,12
1000bd98:	a0800015 	stw	r2,0(r20)
1000bd9c:	0005883a 	mov	r2,zero
1000bda0:	003fe506 	br	1000bd38 <__alt_data_end+0xf800bd38>
1000bda4:	98c00117 	ldw	r3,4(r19)
1000bda8:	9c4b883a 	add	r5,r19,r17
1000bdac:	11000054 	ori	r4,r2,1
1000bdb0:	18c0004c 	andi	r3,r3,1
1000bdb4:	1c62b03a 	or	r17,r3,r17
1000bdb8:	9c400115 	stw	r17,4(r19)
1000bdbc:	29000115 	stw	r4,4(r5)
1000bdc0:	2885883a 	add	r2,r5,r2
1000bdc4:	10c00117 	ldw	r3,4(r2)
1000bdc8:	29400204 	addi	r5,r5,8
1000bdcc:	a009883a 	mov	r4,r20
1000bdd0:	18c00054 	ori	r3,r3,1
1000bdd4:	10c00115 	stw	r3,4(r2)
1000bdd8:	000925c0 	call	1000925c <_free_r>
1000bddc:	003fd306 	br	1000bd2c <__alt_data_end+0xf800bd2c>
1000bde0:	017fff04 	movi	r5,-4
1000bde4:	414a703a 	and	r5,r8,r5
1000bde8:	89800404 	addi	r6,r17,16
1000bdec:	8151883a 	add	r8,r16,r5
1000bdf0:	4180590e 	bge	r8,r6,1000bf58 <_realloc_r+0x390>
1000bdf4:	1080004c 	andi	r2,r2,1
1000bdf8:	103f9e1e 	bne	r2,zero,1000bc74 <__alt_data_end+0xf800bc74>
1000bdfc:	adbffe17 	ldw	r22,-8(r21)
1000be00:	00bfff04 	movi	r2,-4
1000be04:	9dadc83a 	sub	r22,r19,r22
1000be08:	b1800117 	ldw	r6,4(r22)
1000be0c:	3084703a 	and	r2,r6,r2
1000be10:	20002026 	beq	r4,zero,1000be94 <_realloc_r+0x2cc>
1000be14:	80af883a 	add	r23,r16,r2
1000be18:	b96f883a 	add	r23,r23,r5
1000be1c:	21c05f26 	beq	r4,r7,1000bf9c <_realloc_r+0x3d4>
1000be20:	b8c01c16 	blt	r23,r3,1000be94 <_realloc_r+0x2cc>
1000be24:	20800317 	ldw	r2,12(r4)
1000be28:	20c00217 	ldw	r3,8(r4)
1000be2c:	81bfff04 	addi	r6,r16,-4
1000be30:	01000904 	movi	r4,36
1000be34:	18800315 	stw	r2,12(r3)
1000be38:	10c00215 	stw	r3,8(r2)
1000be3c:	b0c00217 	ldw	r3,8(r22)
1000be40:	b0800317 	ldw	r2,12(r22)
1000be44:	b4800204 	addi	r18,r22,8
1000be48:	18800315 	stw	r2,12(r3)
1000be4c:	10c00215 	stw	r3,8(r2)
1000be50:	21801b36 	bltu	r4,r6,1000bec0 <_realloc_r+0x2f8>
1000be54:	008004c4 	movi	r2,19
1000be58:	1180352e 	bgeu	r2,r6,1000bf30 <_realloc_r+0x368>
1000be5c:	a8800017 	ldw	r2,0(r21)
1000be60:	b0800215 	stw	r2,8(r22)
1000be64:	a8800117 	ldw	r2,4(r21)
1000be68:	b0800315 	stw	r2,12(r22)
1000be6c:	008006c4 	movi	r2,27
1000be70:	11807f36 	bltu	r2,r6,1000c070 <_realloc_r+0x4a8>
1000be74:	b0800404 	addi	r2,r22,16
1000be78:	ad400204 	addi	r21,r21,8
1000be7c:	00002d06 	br	1000bf34 <_realloc_r+0x36c>
1000be80:	adbffe17 	ldw	r22,-8(r21)
1000be84:	00bfff04 	movi	r2,-4
1000be88:	9dadc83a 	sub	r22,r19,r22
1000be8c:	b1000117 	ldw	r4,4(r22)
1000be90:	2084703a 	and	r2,r4,r2
1000be94:	b03f7726 	beq	r22,zero,1000bc74 <__alt_data_end+0xf800bc74>
1000be98:	80af883a 	add	r23,r16,r2
1000be9c:	b8ff7516 	blt	r23,r3,1000bc74 <__alt_data_end+0xf800bc74>
1000bea0:	b0800317 	ldw	r2,12(r22)
1000bea4:	b0c00217 	ldw	r3,8(r22)
1000bea8:	81bfff04 	addi	r6,r16,-4
1000beac:	01000904 	movi	r4,36
1000beb0:	18800315 	stw	r2,12(r3)
1000beb4:	10c00215 	stw	r3,8(r2)
1000beb8:	b4800204 	addi	r18,r22,8
1000bebc:	21bfe52e 	bgeu	r4,r6,1000be54 <__alt_data_end+0xf800be54>
1000bec0:	a80b883a 	mov	r5,r21
1000bec4:	9009883a 	mov	r4,r18
1000bec8:	000a88c0 	call	1000a88c <memmove>
1000becc:	b821883a 	mov	r16,r23
1000bed0:	b027883a 	mov	r19,r22
1000bed4:	003f8a06 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bed8:	300b883a 	mov	r5,r6
1000bedc:	dfc00917 	ldw	ra,36(sp)
1000bee0:	df000817 	ldw	fp,32(sp)
1000bee4:	ddc00717 	ldw	r23,28(sp)
1000bee8:	dd800617 	ldw	r22,24(sp)
1000beec:	dd400517 	ldw	r21,20(sp)
1000bef0:	dd000417 	ldw	r20,16(sp)
1000bef4:	dcc00317 	ldw	r19,12(sp)
1000bef8:	dc800217 	ldw	r18,8(sp)
1000befc:	dc400117 	ldw	r17,4(sp)
1000bf00:	dc000017 	ldw	r16,0(sp)
1000bf04:	dec00a04 	addi	sp,sp,40
1000bf08:	0009e541 	jmpi	10009e54 <_malloc_r>
1000bf0c:	a8c00017 	ldw	r3,0(r21)
1000bf10:	90c00015 	stw	r3,0(r18)
1000bf14:	a8c00117 	ldw	r3,4(r21)
1000bf18:	90c00115 	stw	r3,4(r18)
1000bf1c:	00c006c4 	movi	r3,27
1000bf20:	19804536 	bltu	r3,r6,1000c038 <_realloc_r+0x470>
1000bf24:	90800204 	addi	r2,r18,8
1000bf28:	a8c00204 	addi	r3,r21,8
1000bf2c:	003f6306 	br	1000bcbc <__alt_data_end+0xf800bcbc>
1000bf30:	9005883a 	mov	r2,r18
1000bf34:	a8c00017 	ldw	r3,0(r21)
1000bf38:	b821883a 	mov	r16,r23
1000bf3c:	b027883a 	mov	r19,r22
1000bf40:	10c00015 	stw	r3,0(r2)
1000bf44:	a8c00117 	ldw	r3,4(r21)
1000bf48:	10c00115 	stw	r3,4(r2)
1000bf4c:	a8c00217 	ldw	r3,8(r21)
1000bf50:	10c00215 	stw	r3,8(r2)
1000bf54:	003f6a06 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000bf58:	9c67883a 	add	r19,r19,r17
1000bf5c:	4445c83a 	sub	r2,r8,r17
1000bf60:	e4c00215 	stw	r19,8(fp)
1000bf64:	10800054 	ori	r2,r2,1
1000bf68:	98800115 	stw	r2,4(r19)
1000bf6c:	a8bfff17 	ldw	r2,-4(r21)
1000bf70:	a009883a 	mov	r4,r20
1000bf74:	1080004c 	andi	r2,r2,1
1000bf78:	1462b03a 	or	r17,r2,r17
1000bf7c:	ac7fff15 	stw	r17,-4(r21)
1000bf80:	00120280 	call	10012028 <__malloc_unlock>
1000bf84:	a805883a 	mov	r2,r21
1000bf88:	003f6b06 	br	1000bd38 <__alt_data_end+0xf800bd38>
1000bf8c:	a80b883a 	mov	r5,r21
1000bf90:	9009883a 	mov	r4,r18
1000bf94:	000a88c0 	call	1000a88c <memmove>
1000bf98:	003f4e06 	br	1000bcd4 <__alt_data_end+0xf800bcd4>
1000bf9c:	89000404 	addi	r4,r17,16
1000bfa0:	b93fbc16 	blt	r23,r4,1000be94 <__alt_data_end+0xf800be94>
1000bfa4:	b0800317 	ldw	r2,12(r22)
1000bfa8:	b0c00217 	ldw	r3,8(r22)
1000bfac:	81bfff04 	addi	r6,r16,-4
1000bfb0:	01000904 	movi	r4,36
1000bfb4:	18800315 	stw	r2,12(r3)
1000bfb8:	10c00215 	stw	r3,8(r2)
1000bfbc:	b4800204 	addi	r18,r22,8
1000bfc0:	21804336 	bltu	r4,r6,1000c0d0 <_realloc_r+0x508>
1000bfc4:	008004c4 	movi	r2,19
1000bfc8:	11803f2e 	bgeu	r2,r6,1000c0c8 <_realloc_r+0x500>
1000bfcc:	a8800017 	ldw	r2,0(r21)
1000bfd0:	b0800215 	stw	r2,8(r22)
1000bfd4:	a8800117 	ldw	r2,4(r21)
1000bfd8:	b0800315 	stw	r2,12(r22)
1000bfdc:	008006c4 	movi	r2,27
1000bfe0:	11803f36 	bltu	r2,r6,1000c0e0 <_realloc_r+0x518>
1000bfe4:	b0800404 	addi	r2,r22,16
1000bfe8:	ad400204 	addi	r21,r21,8
1000bfec:	a8c00017 	ldw	r3,0(r21)
1000bff0:	10c00015 	stw	r3,0(r2)
1000bff4:	a8c00117 	ldw	r3,4(r21)
1000bff8:	10c00115 	stw	r3,4(r2)
1000bffc:	a8c00217 	ldw	r3,8(r21)
1000c000:	10c00215 	stw	r3,8(r2)
1000c004:	b447883a 	add	r3,r22,r17
1000c008:	bc45c83a 	sub	r2,r23,r17
1000c00c:	e0c00215 	stw	r3,8(fp)
1000c010:	10800054 	ori	r2,r2,1
1000c014:	18800115 	stw	r2,4(r3)
1000c018:	b0800117 	ldw	r2,4(r22)
1000c01c:	a009883a 	mov	r4,r20
1000c020:	1080004c 	andi	r2,r2,1
1000c024:	1462b03a 	or	r17,r2,r17
1000c028:	b4400115 	stw	r17,4(r22)
1000c02c:	00120280 	call	10012028 <__malloc_unlock>
1000c030:	9005883a 	mov	r2,r18
1000c034:	003f4006 	br	1000bd38 <__alt_data_end+0xf800bd38>
1000c038:	a8c00217 	ldw	r3,8(r21)
1000c03c:	90c00215 	stw	r3,8(r18)
1000c040:	a8c00317 	ldw	r3,12(r21)
1000c044:	90c00315 	stw	r3,12(r18)
1000c048:	30801126 	beq	r6,r2,1000c090 <_realloc_r+0x4c8>
1000c04c:	90800404 	addi	r2,r18,16
1000c050:	a8c00404 	addi	r3,r21,16
1000c054:	003f1906 	br	1000bcbc <__alt_data_end+0xf800bcbc>
1000c058:	90ffff17 	ldw	r3,-4(r18)
1000c05c:	00bfff04 	movi	r2,-4
1000c060:	a825883a 	mov	r18,r21
1000c064:	1884703a 	and	r2,r3,r2
1000c068:	80a1883a 	add	r16,r16,r2
1000c06c:	003f2406 	br	1000bd00 <__alt_data_end+0xf800bd00>
1000c070:	a8800217 	ldw	r2,8(r21)
1000c074:	b0800415 	stw	r2,16(r22)
1000c078:	a8800317 	ldw	r2,12(r21)
1000c07c:	b0800515 	stw	r2,20(r22)
1000c080:	31000a26 	beq	r6,r4,1000c0ac <_realloc_r+0x4e4>
1000c084:	b0800604 	addi	r2,r22,24
1000c088:	ad400404 	addi	r21,r21,16
1000c08c:	003fa906 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000c090:	a9000417 	ldw	r4,16(r21)
1000c094:	90800604 	addi	r2,r18,24
1000c098:	a8c00604 	addi	r3,r21,24
1000c09c:	91000415 	stw	r4,16(r18)
1000c0a0:	a9000517 	ldw	r4,20(r21)
1000c0a4:	91000515 	stw	r4,20(r18)
1000c0a8:	003f0406 	br	1000bcbc <__alt_data_end+0xf800bcbc>
1000c0ac:	a8c00417 	ldw	r3,16(r21)
1000c0b0:	ad400604 	addi	r21,r21,24
1000c0b4:	b0800804 	addi	r2,r22,32
1000c0b8:	b0c00615 	stw	r3,24(r22)
1000c0bc:	a8ffff17 	ldw	r3,-4(r21)
1000c0c0:	b0c00715 	stw	r3,28(r22)
1000c0c4:	003f9b06 	br	1000bf34 <__alt_data_end+0xf800bf34>
1000c0c8:	9005883a 	mov	r2,r18
1000c0cc:	003fc706 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c0d0:	a80b883a 	mov	r5,r21
1000c0d4:	9009883a 	mov	r4,r18
1000c0d8:	000a88c0 	call	1000a88c <memmove>
1000c0dc:	003fc906 	br	1000c004 <__alt_data_end+0xf800c004>
1000c0e0:	a8800217 	ldw	r2,8(r21)
1000c0e4:	b0800415 	stw	r2,16(r22)
1000c0e8:	a8800317 	ldw	r2,12(r21)
1000c0ec:	b0800515 	stw	r2,20(r22)
1000c0f0:	31000726 	beq	r6,r4,1000c110 <_realloc_r+0x548>
1000c0f4:	b0800604 	addi	r2,r22,24
1000c0f8:	ad400404 	addi	r21,r21,16
1000c0fc:	003fbb06 	br	1000bfec <__alt_data_end+0xf800bfec>
1000c100:	a009883a 	mov	r4,r20
1000c104:	00120280 	call	10012028 <__malloc_unlock>
1000c108:	0005883a 	mov	r2,zero
1000c10c:	003f0a06 	br	1000bd38 <__alt_data_end+0xf800bd38>
1000c110:	a8c00417 	ldw	r3,16(r21)
1000c114:	ad400604 	addi	r21,r21,24
1000c118:	b0800804 	addi	r2,r22,32
1000c11c:	b0c00615 	stw	r3,24(r22)
1000c120:	a8ffff17 	ldw	r3,-4(r21)
1000c124:	b0c00715 	stw	r3,28(r22)
1000c128:	003fb006 	br	1000bfec <__alt_data_end+0xf800bfec>

1000c12c <__fpclassifyd>:
1000c12c:	00a00034 	movhi	r2,32768
1000c130:	10bfffc4 	addi	r2,r2,-1
1000c134:	2884703a 	and	r2,r5,r2
1000c138:	10000726 	beq	r2,zero,1000c158 <__fpclassifyd+0x2c>
1000c13c:	00fffc34 	movhi	r3,65520
1000c140:	019ff834 	movhi	r6,32736
1000c144:	28c7883a 	add	r3,r5,r3
1000c148:	31bfffc4 	addi	r6,r6,-1
1000c14c:	30c00536 	bltu	r6,r3,1000c164 <__fpclassifyd+0x38>
1000c150:	00800104 	movi	r2,4
1000c154:	f800283a 	ret
1000c158:	2000021e 	bne	r4,zero,1000c164 <__fpclassifyd+0x38>
1000c15c:	00800084 	movi	r2,2
1000c160:	f800283a 	ret
1000c164:	00dffc34 	movhi	r3,32752
1000c168:	019ff834 	movhi	r6,32736
1000c16c:	28cb883a 	add	r5,r5,r3
1000c170:	31bfffc4 	addi	r6,r6,-1
1000c174:	317ff62e 	bgeu	r6,r5,1000c150 <__alt_data_end+0xf800c150>
1000c178:	01400434 	movhi	r5,16
1000c17c:	297fffc4 	addi	r5,r5,-1
1000c180:	28800236 	bltu	r5,r2,1000c18c <__fpclassifyd+0x60>
1000c184:	008000c4 	movi	r2,3
1000c188:	f800283a 	ret
1000c18c:	10c00226 	beq	r2,r3,1000c198 <__fpclassifyd+0x6c>
1000c190:	0005883a 	mov	r2,zero
1000c194:	f800283a 	ret
1000c198:	2005003a 	cmpeq	r2,r4,zero
1000c19c:	f800283a 	ret

1000c1a0 <_sbrk_r>:
1000c1a0:	defffd04 	addi	sp,sp,-12
1000c1a4:	dc000015 	stw	r16,0(sp)
1000c1a8:	040400b4 	movhi	r16,4098
1000c1ac:	dc400115 	stw	r17,4(sp)
1000c1b0:	8428a604 	addi	r16,r16,-23912
1000c1b4:	2023883a 	mov	r17,r4
1000c1b8:	2809883a 	mov	r4,r5
1000c1bc:	dfc00215 	stw	ra,8(sp)
1000c1c0:	80000015 	stw	zero,0(r16)
1000c1c4:	00122100 	call	10012210 <sbrk>
1000c1c8:	00ffffc4 	movi	r3,-1
1000c1cc:	10c00526 	beq	r2,r3,1000c1e4 <_sbrk_r+0x44>
1000c1d0:	dfc00217 	ldw	ra,8(sp)
1000c1d4:	dc400117 	ldw	r17,4(sp)
1000c1d8:	dc000017 	ldw	r16,0(sp)
1000c1dc:	dec00304 	addi	sp,sp,12
1000c1e0:	f800283a 	ret
1000c1e4:	80c00017 	ldw	r3,0(r16)
1000c1e8:	183ff926 	beq	r3,zero,1000c1d0 <__alt_data_end+0xf800c1d0>
1000c1ec:	88c00015 	stw	r3,0(r17)
1000c1f0:	003ff706 	br	1000c1d0 <__alt_data_end+0xf800c1d0>

1000c1f4 <__sread>:
1000c1f4:	defffe04 	addi	sp,sp,-8
1000c1f8:	dc000015 	stw	r16,0(sp)
1000c1fc:	2821883a 	mov	r16,r5
1000c200:	2940038f 	ldh	r5,14(r5)
1000c204:	dfc00115 	stw	ra,4(sp)
1000c208:	000e0b00 	call	1000e0b0 <_read_r>
1000c20c:	10000716 	blt	r2,zero,1000c22c <__sread+0x38>
1000c210:	80c01417 	ldw	r3,80(r16)
1000c214:	1887883a 	add	r3,r3,r2
1000c218:	80c01415 	stw	r3,80(r16)
1000c21c:	dfc00117 	ldw	ra,4(sp)
1000c220:	dc000017 	ldw	r16,0(sp)
1000c224:	dec00204 	addi	sp,sp,8
1000c228:	f800283a 	ret
1000c22c:	80c0030b 	ldhu	r3,12(r16)
1000c230:	18fbffcc 	andi	r3,r3,61439
1000c234:	80c0030d 	sth	r3,12(r16)
1000c238:	dfc00117 	ldw	ra,4(sp)
1000c23c:	dc000017 	ldw	r16,0(sp)
1000c240:	dec00204 	addi	sp,sp,8
1000c244:	f800283a 	ret

1000c248 <__seofread>:
1000c248:	0005883a 	mov	r2,zero
1000c24c:	f800283a 	ret

1000c250 <__swrite>:
1000c250:	2880030b 	ldhu	r2,12(r5)
1000c254:	defffb04 	addi	sp,sp,-20
1000c258:	dcc00315 	stw	r19,12(sp)
1000c25c:	dc800215 	stw	r18,8(sp)
1000c260:	dc400115 	stw	r17,4(sp)
1000c264:	dc000015 	stw	r16,0(sp)
1000c268:	dfc00415 	stw	ra,16(sp)
1000c26c:	10c0400c 	andi	r3,r2,256
1000c270:	2821883a 	mov	r16,r5
1000c274:	2023883a 	mov	r17,r4
1000c278:	3025883a 	mov	r18,r6
1000c27c:	3827883a 	mov	r19,r7
1000c280:	18000526 	beq	r3,zero,1000c298 <__swrite+0x48>
1000c284:	2940038f 	ldh	r5,14(r5)
1000c288:	01c00084 	movi	r7,2
1000c28c:	000d883a 	mov	r6,zero
1000c290:	000e0500 	call	1000e050 <_lseek_r>
1000c294:	8080030b 	ldhu	r2,12(r16)
1000c298:	8140038f 	ldh	r5,14(r16)
1000c29c:	10bbffcc 	andi	r2,r2,61439
1000c2a0:	980f883a 	mov	r7,r19
1000c2a4:	900d883a 	mov	r6,r18
1000c2a8:	8809883a 	mov	r4,r17
1000c2ac:	8080030d 	sth	r2,12(r16)
1000c2b0:	dfc00417 	ldw	ra,16(sp)
1000c2b4:	dcc00317 	ldw	r19,12(sp)
1000c2b8:	dc800217 	ldw	r18,8(sp)
1000c2bc:	dc400117 	ldw	r17,4(sp)
1000c2c0:	dc000017 	ldw	r16,0(sp)
1000c2c4:	dec00504 	addi	sp,sp,20
1000c2c8:	000db041 	jmpi	1000db04 <_write_r>

1000c2cc <__sseek>:
1000c2cc:	defffe04 	addi	sp,sp,-8
1000c2d0:	dc000015 	stw	r16,0(sp)
1000c2d4:	2821883a 	mov	r16,r5
1000c2d8:	2940038f 	ldh	r5,14(r5)
1000c2dc:	dfc00115 	stw	ra,4(sp)
1000c2e0:	000e0500 	call	1000e050 <_lseek_r>
1000c2e4:	00ffffc4 	movi	r3,-1
1000c2e8:	10c00826 	beq	r2,r3,1000c30c <__sseek+0x40>
1000c2ec:	80c0030b 	ldhu	r3,12(r16)
1000c2f0:	80801415 	stw	r2,80(r16)
1000c2f4:	18c40014 	ori	r3,r3,4096
1000c2f8:	80c0030d 	sth	r3,12(r16)
1000c2fc:	dfc00117 	ldw	ra,4(sp)
1000c300:	dc000017 	ldw	r16,0(sp)
1000c304:	dec00204 	addi	sp,sp,8
1000c308:	f800283a 	ret
1000c30c:	80c0030b 	ldhu	r3,12(r16)
1000c310:	18fbffcc 	andi	r3,r3,61439
1000c314:	80c0030d 	sth	r3,12(r16)
1000c318:	dfc00117 	ldw	ra,4(sp)
1000c31c:	dc000017 	ldw	r16,0(sp)
1000c320:	dec00204 	addi	sp,sp,8
1000c324:	f800283a 	ret

1000c328 <__sclose>:
1000c328:	2940038f 	ldh	r5,14(r5)
1000c32c:	000db641 	jmpi	1000db64 <_close_r>

1000c330 <strcmp>:
1000c330:	2144b03a 	or	r2,r4,r5
1000c334:	108000cc 	andi	r2,r2,3
1000c338:	1000171e 	bne	r2,zero,1000c398 <strcmp+0x68>
1000c33c:	20800017 	ldw	r2,0(r4)
1000c340:	28c00017 	ldw	r3,0(r5)
1000c344:	10c0141e 	bne	r2,r3,1000c398 <strcmp+0x68>
1000c348:	027fbff4 	movhi	r9,65279
1000c34c:	4a7fbfc4 	addi	r9,r9,-257
1000c350:	0086303a 	nor	r3,zero,r2
1000c354:	02202074 	movhi	r8,32897
1000c358:	1245883a 	add	r2,r2,r9
1000c35c:	42202004 	addi	r8,r8,-32640
1000c360:	10c4703a 	and	r2,r2,r3
1000c364:	1204703a 	and	r2,r2,r8
1000c368:	10000226 	beq	r2,zero,1000c374 <strcmp+0x44>
1000c36c:	00002306 	br	1000c3fc <strcmp+0xcc>
1000c370:	1000221e 	bne	r2,zero,1000c3fc <strcmp+0xcc>
1000c374:	21000104 	addi	r4,r4,4
1000c378:	20c00017 	ldw	r3,0(r4)
1000c37c:	29400104 	addi	r5,r5,4
1000c380:	29800017 	ldw	r6,0(r5)
1000c384:	1a4f883a 	add	r7,r3,r9
1000c388:	00c4303a 	nor	r2,zero,r3
1000c38c:	3884703a 	and	r2,r7,r2
1000c390:	1204703a 	and	r2,r2,r8
1000c394:	19bff626 	beq	r3,r6,1000c370 <__alt_data_end+0xf800c370>
1000c398:	20800003 	ldbu	r2,0(r4)
1000c39c:	10c03fcc 	andi	r3,r2,255
1000c3a0:	18c0201c 	xori	r3,r3,128
1000c3a4:	18ffe004 	addi	r3,r3,-128
1000c3a8:	18000c26 	beq	r3,zero,1000c3dc <strcmp+0xac>
1000c3ac:	29800007 	ldb	r6,0(r5)
1000c3b0:	19800326 	beq	r3,r6,1000c3c0 <strcmp+0x90>
1000c3b4:	00001306 	br	1000c404 <strcmp+0xd4>
1000c3b8:	29800007 	ldb	r6,0(r5)
1000c3bc:	11800b1e 	bne	r2,r6,1000c3ec <strcmp+0xbc>
1000c3c0:	21000044 	addi	r4,r4,1
1000c3c4:	20c00003 	ldbu	r3,0(r4)
1000c3c8:	29400044 	addi	r5,r5,1
1000c3cc:	18803fcc 	andi	r2,r3,255
1000c3d0:	1080201c 	xori	r2,r2,128
1000c3d4:	10bfe004 	addi	r2,r2,-128
1000c3d8:	103ff71e 	bne	r2,zero,1000c3b8 <__alt_data_end+0xf800c3b8>
1000c3dc:	0007883a 	mov	r3,zero
1000c3e0:	28800003 	ldbu	r2,0(r5)
1000c3e4:	1885c83a 	sub	r2,r3,r2
1000c3e8:	f800283a 	ret
1000c3ec:	28800003 	ldbu	r2,0(r5)
1000c3f0:	18c03fcc 	andi	r3,r3,255
1000c3f4:	1885c83a 	sub	r2,r3,r2
1000c3f8:	f800283a 	ret
1000c3fc:	0005883a 	mov	r2,zero
1000c400:	f800283a 	ret
1000c404:	10c03fcc 	andi	r3,r2,255
1000c408:	003ff506 	br	1000c3e0 <__alt_data_end+0xf800c3e0>

1000c40c <__sprint_r.part.0>:
1000c40c:	28801917 	ldw	r2,100(r5)
1000c410:	defff604 	addi	sp,sp,-40
1000c414:	dd400515 	stw	r21,20(sp)
1000c418:	dfc00915 	stw	ra,36(sp)
1000c41c:	df000815 	stw	fp,32(sp)
1000c420:	ddc00715 	stw	r23,28(sp)
1000c424:	dd800615 	stw	r22,24(sp)
1000c428:	dd000415 	stw	r20,16(sp)
1000c42c:	dcc00315 	stw	r19,12(sp)
1000c430:	dc800215 	stw	r18,8(sp)
1000c434:	dc400115 	stw	r17,4(sp)
1000c438:	dc000015 	stw	r16,0(sp)
1000c43c:	1088000c 	andi	r2,r2,8192
1000c440:	302b883a 	mov	r21,r6
1000c444:	10002e26 	beq	r2,zero,1000c500 <__sprint_r.part.0+0xf4>
1000c448:	30800217 	ldw	r2,8(r6)
1000c44c:	35800017 	ldw	r22,0(r6)
1000c450:	10002926 	beq	r2,zero,1000c4f8 <__sprint_r.part.0+0xec>
1000c454:	2827883a 	mov	r19,r5
1000c458:	2029883a 	mov	r20,r4
1000c45c:	b5c00104 	addi	r23,r22,4
1000c460:	04bfffc4 	movi	r18,-1
1000c464:	bc400017 	ldw	r17,0(r23)
1000c468:	b4000017 	ldw	r16,0(r22)
1000c46c:	0039883a 	mov	fp,zero
1000c470:	8822d0ba 	srli	r17,r17,2
1000c474:	8800031e 	bne	r17,zero,1000c484 <__sprint_r.part.0+0x78>
1000c478:	00001806 	br	1000c4dc <__sprint_r.part.0+0xd0>
1000c47c:	84000104 	addi	r16,r16,4
1000c480:	8f001526 	beq	r17,fp,1000c4d8 <__sprint_r.part.0+0xcc>
1000c484:	81400017 	ldw	r5,0(r16)
1000c488:	980d883a 	mov	r6,r19
1000c48c:	a009883a 	mov	r4,r20
1000c490:	000defc0 	call	1000defc <_fputwc_r>
1000c494:	e7000044 	addi	fp,fp,1
1000c498:	14bff81e 	bne	r2,r18,1000c47c <__alt_data_end+0xf800c47c>
1000c49c:	9005883a 	mov	r2,r18
1000c4a0:	a8000215 	stw	zero,8(r21)
1000c4a4:	a8000115 	stw	zero,4(r21)
1000c4a8:	dfc00917 	ldw	ra,36(sp)
1000c4ac:	df000817 	ldw	fp,32(sp)
1000c4b0:	ddc00717 	ldw	r23,28(sp)
1000c4b4:	dd800617 	ldw	r22,24(sp)
1000c4b8:	dd400517 	ldw	r21,20(sp)
1000c4bc:	dd000417 	ldw	r20,16(sp)
1000c4c0:	dcc00317 	ldw	r19,12(sp)
1000c4c4:	dc800217 	ldw	r18,8(sp)
1000c4c8:	dc400117 	ldw	r17,4(sp)
1000c4cc:	dc000017 	ldw	r16,0(sp)
1000c4d0:	dec00a04 	addi	sp,sp,40
1000c4d4:	f800283a 	ret
1000c4d8:	a8800217 	ldw	r2,8(r21)
1000c4dc:	8c63883a 	add	r17,r17,r17
1000c4e0:	8c63883a 	add	r17,r17,r17
1000c4e4:	1445c83a 	sub	r2,r2,r17
1000c4e8:	a8800215 	stw	r2,8(r21)
1000c4ec:	b5800204 	addi	r22,r22,8
1000c4f0:	bdc00204 	addi	r23,r23,8
1000c4f4:	103fdb1e 	bne	r2,zero,1000c464 <__alt_data_end+0xf800c464>
1000c4f8:	0005883a 	mov	r2,zero
1000c4fc:	003fe806 	br	1000c4a0 <__alt_data_end+0xf800c4a0>
1000c500:	000956c0 	call	1000956c <__sfvwrite_r>
1000c504:	003fe606 	br	1000c4a0 <__alt_data_end+0xf800c4a0>

1000c508 <__sprint_r>:
1000c508:	30c00217 	ldw	r3,8(r6)
1000c50c:	18000126 	beq	r3,zero,1000c514 <__sprint_r+0xc>
1000c510:	000c40c1 	jmpi	1000c40c <__sprint_r.part.0>
1000c514:	30000115 	stw	zero,4(r6)
1000c518:	0005883a 	mov	r2,zero
1000c51c:	f800283a 	ret

1000c520 <___vfiprintf_internal_r>:
1000c520:	deffca04 	addi	sp,sp,-216
1000c524:	dd403115 	stw	r21,196(sp)
1000c528:	dfc03515 	stw	ra,212(sp)
1000c52c:	df003415 	stw	fp,208(sp)
1000c530:	ddc03315 	stw	r23,204(sp)
1000c534:	dd803215 	stw	r22,200(sp)
1000c538:	dd003015 	stw	r20,192(sp)
1000c53c:	dcc02f15 	stw	r19,188(sp)
1000c540:	dc802e15 	stw	r18,184(sp)
1000c544:	dc402d15 	stw	r17,180(sp)
1000c548:	dc002c15 	stw	r16,176(sp)
1000c54c:	d9002115 	stw	r4,132(sp)
1000c550:	d9402015 	stw	r5,128(sp)
1000c554:	d9c02215 	stw	r7,136(sp)
1000c558:	302b883a 	mov	r21,r6
1000c55c:	20000226 	beq	r4,zero,1000c568 <___vfiprintf_internal_r+0x48>
1000c560:	20800e17 	ldw	r2,56(r4)
1000c564:	1000cf26 	beq	r2,zero,1000c8a4 <___vfiprintf_internal_r+0x384>
1000c568:	d8c02017 	ldw	r3,128(sp)
1000c56c:	1880030b 	ldhu	r2,12(r3)
1000c570:	10c8000c 	andi	r3,r2,8192
1000c574:	1800071e 	bne	r3,zero,1000c594 <___vfiprintf_internal_r+0x74>
1000c578:	d9402017 	ldw	r5,128(sp)
1000c57c:	00f7ffc4 	movi	r3,-8193
1000c580:	10880014 	ori	r2,r2,8192
1000c584:	29001917 	ldw	r4,100(r5)
1000c588:	2880030d 	sth	r2,12(r5)
1000c58c:	20c6703a 	and	r3,r4,r3
1000c590:	28c01915 	stw	r3,100(r5)
1000c594:	10c0020c 	andi	r3,r2,8
1000c598:	1800a526 	beq	r3,zero,1000c830 <___vfiprintf_internal_r+0x310>
1000c59c:	d9002017 	ldw	r4,128(sp)
1000c5a0:	20c00417 	ldw	r3,16(r4)
1000c5a4:	1800a226 	beq	r3,zero,1000c830 <___vfiprintf_internal_r+0x310>
1000c5a8:	1080068c 	andi	r2,r2,26
1000c5ac:	00c00284 	movi	r3,10
1000c5b0:	10c0a826 	beq	r2,r3,1000c854 <___vfiprintf_internal_r+0x334>
1000c5b4:	d9001a04 	addi	r4,sp,104
1000c5b8:	d94019c4 	addi	r5,sp,103
1000c5bc:	04840074 	movhi	r18,4097
1000c5c0:	2145c83a 	sub	r2,r4,r5
1000c5c4:	94936604 	addi	r18,r18,19864
1000c5c8:	d9001e15 	stw	r4,120(sp)
1000c5cc:	d9401f15 	stw	r5,124(sp)
1000c5d0:	dec01a15 	stw	sp,104(sp)
1000c5d4:	d8001c15 	stw	zero,112(sp)
1000c5d8:	d8001b15 	stw	zero,108(sp)
1000c5dc:	d811883a 	mov	r8,sp
1000c5e0:	d8002615 	stw	zero,152(sp)
1000c5e4:	d8002415 	stw	zero,144(sp)
1000c5e8:	d8802815 	stw	r2,160(sp)
1000c5ec:	a82d883a 	mov	r22,r21
1000c5f0:	b0800007 	ldb	r2,0(r22)
1000c5f4:	10040d26 	beq	r2,zero,1000d62c <___vfiprintf_internal_r+0x110c>
1000c5f8:	00c00944 	movi	r3,37
1000c5fc:	b029883a 	mov	r20,r22
1000c600:	10c0021e 	bne	r2,r3,1000c60c <___vfiprintf_internal_r+0xec>
1000c604:	00001606 	br	1000c660 <___vfiprintf_internal_r+0x140>
1000c608:	10c00326 	beq	r2,r3,1000c618 <___vfiprintf_internal_r+0xf8>
1000c60c:	a5000044 	addi	r20,r20,1
1000c610:	a0800007 	ldb	r2,0(r20)
1000c614:	103ffc1e 	bne	r2,zero,1000c608 <__alt_data_end+0xf800c608>
1000c618:	a5a1c83a 	sub	r16,r20,r22
1000c61c:	80001026 	beq	r16,zero,1000c660 <___vfiprintf_internal_r+0x140>
1000c620:	d8c01c17 	ldw	r3,112(sp)
1000c624:	d8801b17 	ldw	r2,108(sp)
1000c628:	45800015 	stw	r22,0(r8)
1000c62c:	80c7883a 	add	r3,r16,r3
1000c630:	10800044 	addi	r2,r2,1
1000c634:	44000115 	stw	r16,4(r8)
1000c638:	d8c01c15 	stw	r3,112(sp)
1000c63c:	d8801b15 	stw	r2,108(sp)
1000c640:	010001c4 	movi	r4,7
1000c644:	2080750e 	bge	r4,r2,1000c81c <___vfiprintf_internal_r+0x2fc>
1000c648:	1803951e 	bne	r3,zero,1000d4a0 <___vfiprintf_internal_r+0xf80>
1000c64c:	d8c02417 	ldw	r3,144(sp)
1000c650:	d8001b15 	stw	zero,108(sp)
1000c654:	d811883a 	mov	r8,sp
1000c658:	1c07883a 	add	r3,r3,r16
1000c65c:	d8c02415 	stw	r3,144(sp)
1000c660:	a0800007 	ldb	r2,0(r20)
1000c664:	1002e026 	beq	r2,zero,1000d1e8 <___vfiprintf_internal_r+0xcc8>
1000c668:	a5800044 	addi	r22,r20,1
1000c66c:	a0c00047 	ldb	r3,1(r20)
1000c670:	d8001d85 	stb	zero,118(sp)
1000c674:	0027883a 	mov	r19,zero
1000c678:	d8002305 	stb	zero,140(sp)
1000c67c:	043fffc4 	movi	r16,-1
1000c680:	d8002515 	stw	zero,148(sp)
1000c684:	0023883a 	mov	r17,zero
1000c688:	05001604 	movi	r20,88
1000c68c:	05400244 	movi	r21,9
1000c690:	402f883a 	mov	r23,r8
1000c694:	b5800044 	addi	r22,r22,1
1000c698:	18bff804 	addi	r2,r3,-32
1000c69c:	a0827736 	bltu	r20,r2,1000d07c <___vfiprintf_internal_r+0xb5c>
1000c6a0:	100490ba 	slli	r2,r2,2
1000c6a4:	01040074 	movhi	r4,4097
1000c6a8:	2131ae04 	addi	r4,r4,-14664
1000c6ac:	1105883a 	add	r2,r2,r4
1000c6b0:	10800017 	ldw	r2,0(r2)
1000c6b4:	1000683a 	jmp	r2
1000c6b8:	1000cd7c 	xorhi	zero,r2,821
1000c6bc:	1000d07c 	xorhi	zero,r2,833
1000c6c0:	1000d07c 	xorhi	zero,r2,833
1000c6c4:	1000cd98 	cmpnei	zero,r2,822
1000c6c8:	1000d07c 	xorhi	zero,r2,833
1000c6cc:	1000d07c 	xorhi	zero,r2,833
1000c6d0:	1000d07c 	xorhi	zero,r2,833
1000c6d4:	1000d07c 	xorhi	zero,r2,833
1000c6d8:	1000d07c 	xorhi	zero,r2,833
1000c6dc:	1000d07c 	xorhi	zero,r2,833
1000c6e0:	1000cfa0 	cmpeqi	zero,r2,830
1000c6e4:	1000cfc4 	addi	zero,r2,831
1000c6e8:	1000d07c 	xorhi	zero,r2,833
1000c6ec:	1000c8bc 	xorhi	zero,r2,802
1000c6f0:	1000cfd8 	cmpnei	zero,r2,831
1000c6f4:	1000d07c 	xorhi	zero,r2,833
1000c6f8:	1000cda4 	muli	zero,r2,822
1000c6fc:	1000cdb0 	cmpltui	zero,r2,822
1000c700:	1000cdb0 	cmpltui	zero,r2,822
1000c704:	1000cdb0 	cmpltui	zero,r2,822
1000c708:	1000cdb0 	cmpltui	zero,r2,822
1000c70c:	1000cdb0 	cmpltui	zero,r2,822
1000c710:	1000cdb0 	cmpltui	zero,r2,822
1000c714:	1000cdb0 	cmpltui	zero,r2,822
1000c718:	1000cdb0 	cmpltui	zero,r2,822
1000c71c:	1000cdb0 	cmpltui	zero,r2,822
1000c720:	1000d07c 	xorhi	zero,r2,833
1000c724:	1000d07c 	xorhi	zero,r2,833
1000c728:	1000d07c 	xorhi	zero,r2,833
1000c72c:	1000d07c 	xorhi	zero,r2,833
1000c730:	1000d07c 	xorhi	zero,r2,833
1000c734:	1000d07c 	xorhi	zero,r2,833
1000c738:	1000d07c 	xorhi	zero,r2,833
1000c73c:	1000d07c 	xorhi	zero,r2,833
1000c740:	1000d07c 	xorhi	zero,r2,833
1000c744:	1000d07c 	xorhi	zero,r2,833
1000c748:	1000cdf0 	cmpltui	zero,r2,823
1000c74c:	1000d07c 	xorhi	zero,r2,833
1000c750:	1000d07c 	xorhi	zero,r2,833
1000c754:	1000d07c 	xorhi	zero,r2,833
1000c758:	1000d07c 	xorhi	zero,r2,833
1000c75c:	1000d07c 	xorhi	zero,r2,833
1000c760:	1000d07c 	xorhi	zero,r2,833
1000c764:	1000d07c 	xorhi	zero,r2,833
1000c768:	1000d07c 	xorhi	zero,r2,833
1000c76c:	1000d07c 	xorhi	zero,r2,833
1000c770:	1000d07c 	xorhi	zero,r2,833
1000c774:	1000ce2c 	andhi	zero,r2,824
1000c778:	1000d07c 	xorhi	zero,r2,833
1000c77c:	1000d07c 	xorhi	zero,r2,833
1000c780:	1000d07c 	xorhi	zero,r2,833
1000c784:	1000d07c 	xorhi	zero,r2,833
1000c788:	1000d07c 	xorhi	zero,r2,833
1000c78c:	1000ce88 	cmpgei	zero,r2,826
1000c790:	1000d07c 	xorhi	zero,r2,833
1000c794:	1000d07c 	xorhi	zero,r2,833
1000c798:	1000cefc 	xorhi	zero,r2,827
1000c79c:	1000d07c 	xorhi	zero,r2,833
1000c7a0:	1000d07c 	xorhi	zero,r2,833
1000c7a4:	1000d07c 	xorhi	zero,r2,833
1000c7a8:	1000d07c 	xorhi	zero,r2,833
1000c7ac:	1000d07c 	xorhi	zero,r2,833
1000c7b0:	1000d07c 	xorhi	zero,r2,833
1000c7b4:	1000d07c 	xorhi	zero,r2,833
1000c7b8:	1000d07c 	xorhi	zero,r2,833
1000c7bc:	1000d07c 	xorhi	zero,r2,833
1000c7c0:	1000d07c 	xorhi	zero,r2,833
1000c7c4:	1000cca4 	muli	zero,r2,818
1000c7c8:	1000ccd4 	ori	zero,r2,819
1000c7cc:	1000d07c 	xorhi	zero,r2,833
1000c7d0:	1000d07c 	xorhi	zero,r2,833
1000c7d4:	1000d07c 	xorhi	zero,r2,833
1000c7d8:	1000d024 	muli	zero,r2,832
1000c7dc:	1000ccd4 	ori	zero,r2,819
1000c7e0:	1000d07c 	xorhi	zero,r2,833
1000c7e4:	1000d07c 	xorhi	zero,r2,833
1000c7e8:	1000cb7c 	xorhi	zero,r2,813
1000c7ec:	1000d07c 	xorhi	zero,r2,833
1000c7f0:	1000cb90 	cmplti	zero,r2,814
1000c7f4:	1000cbc8 	cmpgei	zero,r2,815
1000c7f8:	1000c8c8 	cmpgei	zero,r2,803
1000c7fc:	1000cb70 	cmpltui	zero,r2,813
1000c800:	1000d07c 	xorhi	zero,r2,833
1000c804:	1000cf3c 	xorhi	zero,r2,828
1000c808:	1000d07c 	xorhi	zero,r2,833
1000c80c:	1000cf88 	cmpgei	zero,r2,830
1000c810:	1000d07c 	xorhi	zero,r2,833
1000c814:	1000d07c 	xorhi	zero,r2,833
1000c818:	1000cc4c 	andi	zero,r2,817
1000c81c:	42000204 	addi	r8,r8,8
1000c820:	d8c02417 	ldw	r3,144(sp)
1000c824:	1c07883a 	add	r3,r3,r16
1000c828:	d8c02415 	stw	r3,144(sp)
1000c82c:	003f8c06 	br	1000c660 <__alt_data_end+0xf800c660>
1000c830:	d9402017 	ldw	r5,128(sp)
1000c834:	d9002117 	ldw	r4,132(sp)
1000c838:	00070dc0 	call	100070dc <__swsetup_r>
1000c83c:	1003c11e 	bne	r2,zero,1000d744 <___vfiprintf_internal_r+0x1224>
1000c840:	d9402017 	ldw	r5,128(sp)
1000c844:	00c00284 	movi	r3,10
1000c848:	2880030b 	ldhu	r2,12(r5)
1000c84c:	1080068c 	andi	r2,r2,26
1000c850:	10ff581e 	bne	r2,r3,1000c5b4 <__alt_data_end+0xf800c5b4>
1000c854:	d8c02017 	ldw	r3,128(sp)
1000c858:	1880038f 	ldh	r2,14(r3)
1000c85c:	103f5516 	blt	r2,zero,1000c5b4 <__alt_data_end+0xf800c5b4>
1000c860:	d9c02217 	ldw	r7,136(sp)
1000c864:	d9002117 	ldw	r4,132(sp)
1000c868:	a80d883a 	mov	r6,r21
1000c86c:	180b883a 	mov	r5,r3
1000c870:	000da480 	call	1000da48 <__sbprintf>
1000c874:	dfc03517 	ldw	ra,212(sp)
1000c878:	df003417 	ldw	fp,208(sp)
1000c87c:	ddc03317 	ldw	r23,204(sp)
1000c880:	dd803217 	ldw	r22,200(sp)
1000c884:	dd403117 	ldw	r21,196(sp)
1000c888:	dd003017 	ldw	r20,192(sp)
1000c88c:	dcc02f17 	ldw	r19,188(sp)
1000c890:	dc802e17 	ldw	r18,184(sp)
1000c894:	dc402d17 	ldw	r17,180(sp)
1000c898:	dc002c17 	ldw	r16,176(sp)
1000c89c:	dec03604 	addi	sp,sp,216
1000c8a0:	f800283a 	ret
1000c8a4:	00090e80 	call	100090e8 <__sinit>
1000c8a8:	003f2f06 	br	1000c568 <__alt_data_end+0xf800c568>
1000c8ac:	d8c02517 	ldw	r3,148(sp)
1000c8b0:	d8802215 	stw	r2,136(sp)
1000c8b4:	00c7c83a 	sub	r3,zero,r3
1000c8b8:	d8c02515 	stw	r3,148(sp)
1000c8bc:	8c400114 	ori	r17,r17,4
1000c8c0:	b0c00007 	ldb	r3,0(r22)
1000c8c4:	003f7306 	br	1000c694 <__alt_data_end+0xf800c694>
1000c8c8:	00800c04 	movi	r2,48
1000c8cc:	d9402217 	ldw	r5,136(sp)
1000c8d0:	d8801d05 	stb	r2,116(sp)
1000c8d4:	00801e04 	movi	r2,120
1000c8d8:	d8801d45 	stb	r2,117(sp)
1000c8dc:	d8001d85 	stb	zero,118(sp)
1000c8e0:	b811883a 	mov	r8,r23
1000c8e4:	28c00104 	addi	r3,r5,4
1000c8e8:	2cc00017 	ldw	r19,0(r5)
1000c8ec:	0029883a 	mov	r20,zero
1000c8f0:	88800094 	ori	r2,r17,2
1000c8f4:	80032516 	blt	r16,zero,1000d58c <___vfiprintf_internal_r+0x106c>
1000c8f8:	00bfdfc4 	movi	r2,-129
1000c8fc:	88a2703a 	and	r17,r17,r2
1000c900:	d8c02215 	stw	r3,136(sp)
1000c904:	8c400094 	ori	r17,r17,2
1000c908:	98032a1e 	bne	r19,zero,1000d5b4 <___vfiprintf_internal_r+0x1094>
1000c90c:	00840074 	movhi	r2,4097
1000c910:	10930504 	addi	r2,r2,19476
1000c914:	d8802615 	stw	r2,152(sp)
1000c918:	002b883a 	mov	r21,zero
1000c91c:	8001741e 	bne	r16,zero,1000cef0 <___vfiprintf_internal_r+0x9d0>
1000c920:	0021883a 	mov	r16,zero
1000c924:	0029883a 	mov	r20,zero
1000c928:	ddc01a04 	addi	r23,sp,104
1000c92c:	8027883a 	mov	r19,r16
1000c930:	8500010e 	bge	r16,r20,1000c938 <___vfiprintf_internal_r+0x418>
1000c934:	a027883a 	mov	r19,r20
1000c938:	ad403fcc 	andi	r21,r21,255
1000c93c:	ad40201c 	xori	r21,r21,128
1000c940:	ad7fe004 	addi	r21,r21,-128
1000c944:	a8000126 	beq	r21,zero,1000c94c <___vfiprintf_internal_r+0x42c>
1000c948:	9cc00044 	addi	r19,r19,1
1000c94c:	89c0008c 	andi	r7,r17,2
1000c950:	38000126 	beq	r7,zero,1000c958 <___vfiprintf_internal_r+0x438>
1000c954:	9cc00084 	addi	r19,r19,2
1000c958:	88c0210c 	andi	r3,r17,132
1000c95c:	1801dd1e 	bne	r3,zero,1000d0d4 <___vfiprintf_internal_r+0xbb4>
1000c960:	d9402517 	ldw	r5,148(sp)
1000c964:	2cebc83a 	sub	r21,r5,r19
1000c968:	0541da0e 	bge	zero,r21,1000d0d4 <___vfiprintf_internal_r+0xbb4>
1000c96c:	07000404 	movi	fp,16
1000c970:	d8801c17 	ldw	r2,112(sp)
1000c974:	e543be0e 	bge	fp,r21,1000d870 <___vfiprintf_internal_r+0x1350>
1000c978:	01440074 	movhi	r5,4097
1000c97c:	29536a04 	addi	r5,r5,19880
1000c980:	dc002715 	stw	r16,156(sp)
1000c984:	d9801b17 	ldw	r6,108(sp)
1000c988:	a821883a 	mov	r16,r21
1000c98c:	d9402315 	stw	r5,140(sp)
1000c990:	028001c4 	movi	r10,7
1000c994:	d9c02915 	stw	r7,164(sp)
1000c998:	182b883a 	mov	r21,r3
1000c99c:	00000506 	br	1000c9b4 <___vfiprintf_internal_r+0x494>
1000c9a0:	31000084 	addi	r4,r6,2
1000c9a4:	42000204 	addi	r8,r8,8
1000c9a8:	180d883a 	mov	r6,r3
1000c9ac:	843ffc04 	addi	r16,r16,-16
1000c9b0:	e4000f0e 	bge	fp,r16,1000c9f0 <___vfiprintf_internal_r+0x4d0>
1000c9b4:	01040074 	movhi	r4,4097
1000c9b8:	10800404 	addi	r2,r2,16
1000c9bc:	30c00044 	addi	r3,r6,1
1000c9c0:	21136a04 	addi	r4,r4,19880
1000c9c4:	41000015 	stw	r4,0(r8)
1000c9c8:	47000115 	stw	fp,4(r8)
1000c9cc:	d8801c15 	stw	r2,112(sp)
1000c9d0:	d8c01b15 	stw	r3,108(sp)
1000c9d4:	50fff20e 	bge	r10,r3,1000c9a0 <__alt_data_end+0xf800c9a0>
1000c9d8:	1001b21e 	bne	r2,zero,1000d0a4 <___vfiprintf_internal_r+0xb84>
1000c9dc:	843ffc04 	addi	r16,r16,-16
1000c9e0:	000d883a 	mov	r6,zero
1000c9e4:	01000044 	movi	r4,1
1000c9e8:	d811883a 	mov	r8,sp
1000c9ec:	e43ff116 	blt	fp,r16,1000c9b4 <__alt_data_end+0xf800c9b4>
1000c9f0:	a807883a 	mov	r3,r21
1000c9f4:	d9c02917 	ldw	r7,164(sp)
1000c9f8:	802b883a 	mov	r21,r16
1000c9fc:	dc002717 	ldw	r16,156(sp)
1000ca00:	d9402317 	ldw	r5,140(sp)
1000ca04:	a885883a 	add	r2,r21,r2
1000ca08:	45400115 	stw	r21,4(r8)
1000ca0c:	41400015 	stw	r5,0(r8)
1000ca10:	d8801c15 	stw	r2,112(sp)
1000ca14:	d9001b15 	stw	r4,108(sp)
1000ca18:	014001c4 	movi	r5,7
1000ca1c:	29026216 	blt	r5,r4,1000d3a8 <___vfiprintf_internal_r+0xe88>
1000ca20:	d9801d87 	ldb	r6,118(sp)
1000ca24:	42000204 	addi	r8,r8,8
1000ca28:	21400044 	addi	r5,r4,1
1000ca2c:	3001ae1e 	bne	r6,zero,1000d0e8 <___vfiprintf_internal_r+0xbc8>
1000ca30:	3801bb26 	beq	r7,zero,1000d120 <___vfiprintf_internal_r+0xc00>
1000ca34:	d9001d04 	addi	r4,sp,116
1000ca38:	10800084 	addi	r2,r2,2
1000ca3c:	41000015 	stw	r4,0(r8)
1000ca40:	01000084 	movi	r4,2
1000ca44:	41000115 	stw	r4,4(r8)
1000ca48:	d8801c15 	stw	r2,112(sp)
1000ca4c:	d9401b15 	stw	r5,108(sp)
1000ca50:	010001c4 	movi	r4,7
1000ca54:	2142680e 	bge	r4,r5,1000d3f8 <___vfiprintf_internal_r+0xed8>
1000ca58:	1002b11e 	bne	r2,zero,1000d520 <___vfiprintf_internal_r+0x1000>
1000ca5c:	01802004 	movi	r6,128
1000ca60:	01400044 	movi	r5,1
1000ca64:	0009883a 	mov	r4,zero
1000ca68:	d811883a 	mov	r8,sp
1000ca6c:	1981ae1e 	bne	r3,r6,1000d128 <___vfiprintf_internal_r+0xc08>
1000ca70:	d8c02517 	ldw	r3,148(sp)
1000ca74:	1cf9c83a 	sub	fp,r3,r19
1000ca78:	0701ab0e 	bge	zero,fp,1000d128 <___vfiprintf_internal_r+0xc08>
1000ca7c:	05400404 	movi	r21,16
1000ca80:	af03a90e 	bge	r21,fp,1000d928 <___vfiprintf_internal_r+0x1408>
1000ca84:	01440074 	movhi	r5,4097
1000ca88:	29536604 	addi	r5,r5,19864
1000ca8c:	d9402315 	stw	r5,140(sp)
1000ca90:	01c001c4 	movi	r7,7
1000ca94:	00000506 	br	1000caac <___vfiprintf_internal_r+0x58c>
1000ca98:	21800084 	addi	r6,r4,2
1000ca9c:	42000204 	addi	r8,r8,8
1000caa0:	1809883a 	mov	r4,r3
1000caa4:	e73ffc04 	addi	fp,fp,-16
1000caa8:	af000d0e 	bge	r21,fp,1000cae0 <___vfiprintf_internal_r+0x5c0>
1000caac:	10800404 	addi	r2,r2,16
1000cab0:	20c00044 	addi	r3,r4,1
1000cab4:	44800015 	stw	r18,0(r8)
1000cab8:	45400115 	stw	r21,4(r8)
1000cabc:	d8801c15 	stw	r2,112(sp)
1000cac0:	d8c01b15 	stw	r3,108(sp)
1000cac4:	38fff40e 	bge	r7,r3,1000ca98 <__alt_data_end+0xf800ca98>
1000cac8:	10022b1e 	bne	r2,zero,1000d378 <___vfiprintf_internal_r+0xe58>
1000cacc:	e73ffc04 	addi	fp,fp,-16
1000cad0:	01800044 	movi	r6,1
1000cad4:	0009883a 	mov	r4,zero
1000cad8:	d811883a 	mov	r8,sp
1000cadc:	af3ff316 	blt	r21,fp,1000caac <__alt_data_end+0xf800caac>
1000cae0:	d8c02317 	ldw	r3,140(sp)
1000cae4:	1705883a 	add	r2,r2,fp
1000cae8:	47000115 	stw	fp,4(r8)
1000caec:	40c00015 	stw	r3,0(r8)
1000caf0:	d8801c15 	stw	r2,112(sp)
1000caf4:	d9801b15 	stw	r6,108(sp)
1000caf8:	00c001c4 	movi	r3,7
1000cafc:	19829416 	blt	r3,r6,1000d550 <___vfiprintf_internal_r+0x1030>
1000cb00:	8521c83a 	sub	r16,r16,r20
1000cb04:	42000204 	addi	r8,r8,8
1000cb08:	31400044 	addi	r5,r6,1
1000cb0c:	3009883a 	mov	r4,r6
1000cb10:	04018716 	blt	zero,r16,1000d130 <___vfiprintf_internal_r+0xc10>
1000cb14:	a085883a 	add	r2,r20,r2
1000cb18:	45c00015 	stw	r23,0(r8)
1000cb1c:	45000115 	stw	r20,4(r8)
1000cb20:	d8801c15 	stw	r2,112(sp)
1000cb24:	d9401b15 	stw	r5,108(sp)
1000cb28:	00c001c4 	movi	r3,7
1000cb2c:	1941c20e 	bge	r3,r5,1000d238 <___vfiprintf_internal_r+0xd18>
1000cb30:	1002531e 	bne	r2,zero,1000d480 <___vfiprintf_internal_r+0xf60>
1000cb34:	d8001b15 	stw	zero,108(sp)
1000cb38:	8c40010c 	andi	r17,r17,4
1000cb3c:	88023226 	beq	r17,zero,1000d408 <___vfiprintf_internal_r+0xee8>
1000cb40:	d9002517 	ldw	r4,148(sp)
1000cb44:	24e3c83a 	sub	r17,r4,r19
1000cb48:	04432916 	blt	zero,r17,1000d7f0 <___vfiprintf_internal_r+0x12d0>
1000cb4c:	d8802517 	ldw	r2,148(sp)
1000cb50:	14c0010e 	bge	r2,r19,1000cb58 <___vfiprintf_internal_r+0x638>
1000cb54:	9805883a 	mov	r2,r19
1000cb58:	d8c02417 	ldw	r3,144(sp)
1000cb5c:	1887883a 	add	r3,r3,r2
1000cb60:	d8c02415 	stw	r3,144(sp)
1000cb64:	d8001b15 	stw	zero,108(sp)
1000cb68:	d811883a 	mov	r8,sp
1000cb6c:	003ea006 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000cb70:	8c400814 	ori	r17,r17,32
1000cb74:	b0c00007 	ldb	r3,0(r22)
1000cb78:	003ec606 	br	1000c694 <__alt_data_end+0xf800c694>
1000cb7c:	b0c00007 	ldb	r3,0(r22)
1000cb80:	00801b04 	movi	r2,108
1000cb84:	18832026 	beq	r3,r2,1000d808 <___vfiprintf_internal_r+0x12e8>
1000cb88:	8c400414 	ori	r17,r17,16
1000cb8c:	003ec106 	br	1000c694 <__alt_data_end+0xf800c694>
1000cb90:	9cc03fcc 	andi	r19,r19,255
1000cb94:	b811883a 	mov	r8,r23
1000cb98:	9803981e 	bne	r19,zero,1000d9fc <___vfiprintf_internal_r+0x14dc>
1000cb9c:	8880080c 	andi	r2,r17,32
1000cba0:	1002be26 	beq	r2,zero,1000d69c <___vfiprintf_internal_r+0x117c>
1000cba4:	d9002217 	ldw	r4,136(sp)
1000cba8:	d9402417 	ldw	r5,144(sp)
1000cbac:	20800017 	ldw	r2,0(r4)
1000cbb0:	2807d7fa 	srai	r3,r5,31
1000cbb4:	21000104 	addi	r4,r4,4
1000cbb8:	d9002215 	stw	r4,136(sp)
1000cbbc:	11400015 	stw	r5,0(r2)
1000cbc0:	10c00115 	stw	r3,4(r2)
1000cbc4:	003e8a06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000cbc8:	9cc03fcc 	andi	r19,r19,255
1000cbcc:	b811883a 	mov	r8,r23
1000cbd0:	9803871e 	bne	r19,zero,1000d9f0 <___vfiprintf_internal_r+0x14d0>
1000cbd4:	8880080c 	andi	r2,r17,32
1000cbd8:	10009a26 	beq	r2,zero,1000ce44 <___vfiprintf_internal_r+0x924>
1000cbdc:	d9002217 	ldw	r4,136(sp)
1000cbe0:	d8001d85 	stb	zero,118(sp)
1000cbe4:	20800204 	addi	r2,r4,8
1000cbe8:	24c00017 	ldw	r19,0(r4)
1000cbec:	25000117 	ldw	r20,4(r4)
1000cbf0:	8002a416 	blt	r16,zero,1000d684 <___vfiprintf_internal_r+0x1164>
1000cbf4:	013fdfc4 	movi	r4,-129
1000cbf8:	9d06b03a 	or	r3,r19,r20
1000cbfc:	d8802215 	stw	r2,136(sp)
1000cc00:	8922703a 	and	r17,r17,r4
1000cc04:	18009b26 	beq	r3,zero,1000ce74 <___vfiprintf_internal_r+0x954>
1000cc08:	002b883a 	mov	r21,zero
1000cc0c:	ddc01a04 	addi	r23,sp,104
1000cc10:	9806d0fa 	srli	r3,r19,3
1000cc14:	a008977a 	slli	r4,r20,29
1000cc18:	a028d0fa 	srli	r20,r20,3
1000cc1c:	9cc001cc 	andi	r19,r19,7
1000cc20:	98800c04 	addi	r2,r19,48
1000cc24:	bdffffc4 	addi	r23,r23,-1
1000cc28:	20e6b03a 	or	r19,r4,r3
1000cc2c:	b8800005 	stb	r2,0(r23)
1000cc30:	9d06b03a 	or	r3,r19,r20
1000cc34:	183ff61e 	bne	r3,zero,1000cc10 <__alt_data_end+0xf800cc10>
1000cc38:	88c0004c 	andi	r3,r17,1
1000cc3c:	18021f1e 	bne	r3,zero,1000d4bc <___vfiprintf_internal_r+0xf9c>
1000cc40:	d9401e17 	ldw	r5,120(sp)
1000cc44:	2de9c83a 	sub	r20,r5,r23
1000cc48:	003f3806 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cc4c:	9cc03fcc 	andi	r19,r19,255
1000cc50:	b811883a 	mov	r8,r23
1000cc54:	98034f1e 	bne	r19,zero,1000d994 <___vfiprintf_internal_r+0x1474>
1000cc58:	00840074 	movhi	r2,4097
1000cc5c:	10930504 	addi	r2,r2,19476
1000cc60:	d8802615 	stw	r2,152(sp)
1000cc64:	8880080c 	andi	r2,r17,32
1000cc68:	1000ac26 	beq	r2,zero,1000cf1c <___vfiprintf_internal_r+0x9fc>
1000cc6c:	d9002217 	ldw	r4,136(sp)
1000cc70:	24c00017 	ldw	r19,0(r4)
1000cc74:	25000117 	ldw	r20,4(r4)
1000cc78:	21000204 	addi	r4,r4,8
1000cc7c:	d9002215 	stw	r4,136(sp)
1000cc80:	8880004c 	andi	r2,r17,1
1000cc84:	1001e726 	beq	r2,zero,1000d424 <___vfiprintf_internal_r+0xf04>
1000cc88:	9d04b03a 	or	r2,r19,r20
1000cc8c:	10025c1e 	bne	r2,zero,1000d600 <___vfiprintf_internal_r+0x10e0>
1000cc90:	d8001d85 	stb	zero,118(sp)
1000cc94:	80024416 	blt	r16,zero,1000d5a8 <___vfiprintf_internal_r+0x1088>
1000cc98:	00bfdfc4 	movi	r2,-129
1000cc9c:	88a2703a 	and	r17,r17,r2
1000cca0:	003f1d06 	br	1000c918 <__alt_data_end+0xf800c918>
1000cca4:	d8c02217 	ldw	r3,136(sp)
1000cca8:	04c00044 	movi	r19,1
1000ccac:	b811883a 	mov	r8,r23
1000ccb0:	18800017 	ldw	r2,0(r3)
1000ccb4:	18c00104 	addi	r3,r3,4
1000ccb8:	d8001d85 	stb	zero,118(sp)
1000ccbc:	d8801005 	stb	r2,64(sp)
1000ccc0:	d8c02215 	stw	r3,136(sp)
1000ccc4:	9829883a 	mov	r20,r19
1000ccc8:	ddc01004 	addi	r23,sp,64
1000cccc:	0021883a 	mov	r16,zero
1000ccd0:	003f1e06 	br	1000c94c <__alt_data_end+0xf800c94c>
1000ccd4:	9cc03fcc 	andi	r19,r19,255
1000ccd8:	b811883a 	mov	r8,r23
1000ccdc:	9803331e 	bne	r19,zero,1000d9ac <___vfiprintf_internal_r+0x148c>
1000cce0:	8880080c 	andi	r2,r17,32
1000cce4:	10004826 	beq	r2,zero,1000ce08 <___vfiprintf_internal_r+0x8e8>
1000cce8:	d9002217 	ldw	r4,136(sp)
1000ccec:	20800117 	ldw	r2,4(r4)
1000ccf0:	24c00017 	ldw	r19,0(r4)
1000ccf4:	21000204 	addi	r4,r4,8
1000ccf8:	d9002215 	stw	r4,136(sp)
1000ccfc:	1029883a 	mov	r20,r2
1000cd00:	10024c16 	blt	r2,zero,1000d634 <___vfiprintf_internal_r+0x1114>
1000cd04:	dd401d83 	ldbu	r21,118(sp)
1000cd08:	80007116 	blt	r16,zero,1000ced0 <___vfiprintf_internal_r+0x9b0>
1000cd0c:	00ffdfc4 	movi	r3,-129
1000cd10:	9d04b03a 	or	r2,r19,r20
1000cd14:	88e2703a 	and	r17,r17,r3
1000cd18:	1000d126 	beq	r2,zero,1000d060 <___vfiprintf_internal_r+0xb40>
1000cd1c:	a0023526 	beq	r20,zero,1000d5f4 <___vfiprintf_internal_r+0x10d4>
1000cd20:	ddc01a04 	addi	r23,sp,104
1000cd24:	4039883a 	mov	fp,r8
1000cd28:	9809883a 	mov	r4,r19
1000cd2c:	a00b883a 	mov	r5,r20
1000cd30:	01800284 	movi	r6,10
1000cd34:	000f883a 	mov	r7,zero
1000cd38:	000ea4c0 	call	1000ea4c <__umoddi3>
1000cd3c:	10800c04 	addi	r2,r2,48
1000cd40:	bdffffc4 	addi	r23,r23,-1
1000cd44:	9809883a 	mov	r4,r19
1000cd48:	a00b883a 	mov	r5,r20
1000cd4c:	b8800005 	stb	r2,0(r23)
1000cd50:	01800284 	movi	r6,10
1000cd54:	000f883a 	mov	r7,zero
1000cd58:	000e4500 	call	1000e450 <__udivdi3>
1000cd5c:	1027883a 	mov	r19,r2
1000cd60:	10c4b03a 	or	r2,r2,r3
1000cd64:	1829883a 	mov	r20,r3
1000cd68:	103fef1e 	bne	r2,zero,1000cd28 <__alt_data_end+0xf800cd28>
1000cd6c:	d9001e17 	ldw	r4,120(sp)
1000cd70:	e011883a 	mov	r8,fp
1000cd74:	25e9c83a 	sub	r20,r4,r23
1000cd78:	003eec06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cd7c:	d8802307 	ldb	r2,140(sp)
1000cd80:	1002361e 	bne	r2,zero,1000d65c <___vfiprintf_internal_r+0x113c>
1000cd84:	00c00804 	movi	r3,32
1000cd88:	d8c02305 	stb	r3,140(sp)
1000cd8c:	04c00044 	movi	r19,1
1000cd90:	b0c00007 	ldb	r3,0(r22)
1000cd94:	003e3f06 	br	1000c694 <__alt_data_end+0xf800c694>
1000cd98:	8c400054 	ori	r17,r17,1
1000cd9c:	b0c00007 	ldb	r3,0(r22)
1000cda0:	003e3c06 	br	1000c694 <__alt_data_end+0xf800c694>
1000cda4:	8c402014 	ori	r17,r17,128
1000cda8:	b0c00007 	ldb	r3,0(r22)
1000cdac:	003e3906 	br	1000c694 <__alt_data_end+0xf800c694>
1000cdb0:	dc002715 	stw	r16,156(sp)
1000cdb4:	d8002515 	stw	zero,148(sp)
1000cdb8:	1f3ff404 	addi	fp,r3,-48
1000cdbc:	0009883a 	mov	r4,zero
1000cdc0:	b021883a 	mov	r16,r22
1000cdc4:	01400284 	movi	r5,10
1000cdc8:	0004b280 	call	10004b28 <__mulsi3>
1000cdcc:	80c00007 	ldb	r3,0(r16)
1000cdd0:	e089883a 	add	r4,fp,r2
1000cdd4:	b5800044 	addi	r22,r22,1
1000cdd8:	1f3ff404 	addi	fp,r3,-48
1000cddc:	b021883a 	mov	r16,r22
1000cde0:	af3ff82e 	bgeu	r21,fp,1000cdc4 <__alt_data_end+0xf800cdc4>
1000cde4:	d9002515 	stw	r4,148(sp)
1000cde8:	dc002717 	ldw	r16,156(sp)
1000cdec:	003e2a06 	br	1000c698 <__alt_data_end+0xf800c698>
1000cdf0:	9cc03fcc 	andi	r19,r19,255
1000cdf4:	b811883a 	mov	r8,r23
1000cdf8:	9802e91e 	bne	r19,zero,1000d9a0 <___vfiprintf_internal_r+0x1480>
1000cdfc:	8c400414 	ori	r17,r17,16
1000ce00:	8880080c 	andi	r2,r17,32
1000ce04:	103fb81e 	bne	r2,zero,1000cce8 <__alt_data_end+0xf800cce8>
1000ce08:	8880040c 	andi	r2,r17,16
1000ce0c:	10022e26 	beq	r2,zero,1000d6c8 <___vfiprintf_internal_r+0x11a8>
1000ce10:	d9402217 	ldw	r5,136(sp)
1000ce14:	2cc00017 	ldw	r19,0(r5)
1000ce18:	29400104 	addi	r5,r5,4
1000ce1c:	d9402215 	stw	r5,136(sp)
1000ce20:	9829d7fa 	srai	r20,r19,31
1000ce24:	a005883a 	mov	r2,r20
1000ce28:	003fb506 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ce2c:	9cc03fcc 	andi	r19,r19,255
1000ce30:	b811883a 	mov	r8,r23
1000ce34:	9802fa1e 	bne	r19,zero,1000da20 <___vfiprintf_internal_r+0x1500>
1000ce38:	8c400414 	ori	r17,r17,16
1000ce3c:	8880080c 	andi	r2,r17,32
1000ce40:	103f661e 	bne	r2,zero,1000cbdc <__alt_data_end+0xf800cbdc>
1000ce44:	8880040c 	andi	r2,r17,16
1000ce48:	10020626 	beq	r2,zero,1000d664 <___vfiprintf_internal_r+0x1144>
1000ce4c:	d9402217 	ldw	r5,136(sp)
1000ce50:	d8001d85 	stb	zero,118(sp)
1000ce54:	0029883a 	mov	r20,zero
1000ce58:	28800104 	addi	r2,r5,4
1000ce5c:	2cc00017 	ldw	r19,0(r5)
1000ce60:	80020816 	blt	r16,zero,1000d684 <___vfiprintf_internal_r+0x1164>
1000ce64:	00ffdfc4 	movi	r3,-129
1000ce68:	d8802215 	stw	r2,136(sp)
1000ce6c:	88e2703a 	and	r17,r17,r3
1000ce70:	983f651e 	bne	r19,zero,1000cc08 <__alt_data_end+0xf800cc08>
1000ce74:	002b883a 	mov	r21,zero
1000ce78:	8002cf26 	beq	r16,zero,1000d9b8 <___vfiprintf_internal_r+0x1498>
1000ce7c:	0027883a 	mov	r19,zero
1000ce80:	0029883a 	mov	r20,zero
1000ce84:	003f6106 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000ce88:	9cc03fcc 	andi	r19,r19,255
1000ce8c:	b811883a 	mov	r8,r23
1000ce90:	9802e01e 	bne	r19,zero,1000da14 <___vfiprintf_internal_r+0x14f4>
1000ce94:	8c400414 	ori	r17,r17,16
1000ce98:	8880080c 	andi	r2,r17,32
1000ce9c:	1000641e 	bne	r2,zero,1000d030 <___vfiprintf_internal_r+0xb10>
1000cea0:	8880040c 	andi	r2,r17,16
1000cea4:	1001c81e 	bne	r2,zero,1000d5c8 <___vfiprintf_internal_r+0x10a8>
1000cea8:	8880100c 	andi	r2,r17,64
1000ceac:	d8001d85 	stb	zero,118(sp)
1000ceb0:	1002281e 	bne	r2,zero,1000d754 <___vfiprintf_internal_r+0x1234>
1000ceb4:	d9002217 	ldw	r4,136(sp)
1000ceb8:	0029883a 	mov	r20,zero
1000cebc:	20800104 	addi	r2,r4,4
1000cec0:	24c00017 	ldw	r19,0(r4)
1000cec4:	8001c60e 	bge	r16,zero,1000d5e0 <___vfiprintf_internal_r+0x10c0>
1000cec8:	d8802215 	stw	r2,136(sp)
1000cecc:	002b883a 	mov	r21,zero
1000ced0:	9d04b03a 	or	r2,r19,r20
1000ced4:	103f911e 	bne	r2,zero,1000cd1c <__alt_data_end+0xf800cd1c>
1000ced8:	00800044 	movi	r2,1
1000cedc:	10803fcc 	andi	r2,r2,255
1000cee0:	00c00044 	movi	r3,1
1000cee4:	10c05f26 	beq	r2,r3,1000d064 <___vfiprintf_internal_r+0xb44>
1000cee8:	00c00084 	movi	r3,2
1000ceec:	10ffe31e 	bne	r2,r3,1000ce7c <__alt_data_end+0xf800ce7c>
1000cef0:	0027883a 	mov	r19,zero
1000cef4:	0029883a 	mov	r20,zero
1000cef8:	00015106 	br	1000d440 <___vfiprintf_internal_r+0xf20>
1000cefc:	9cc03fcc 	andi	r19,r19,255
1000cf00:	b811883a 	mov	r8,r23
1000cf04:	9802c01e 	bne	r19,zero,1000da08 <___vfiprintf_internal_r+0x14e8>
1000cf08:	01440074 	movhi	r5,4097
1000cf0c:	29530004 	addi	r5,r5,19456
1000cf10:	d9402615 	stw	r5,152(sp)
1000cf14:	8880080c 	andi	r2,r17,32
1000cf18:	103f541e 	bne	r2,zero,1000cc6c <__alt_data_end+0xf800cc6c>
1000cf1c:	8880040c 	andi	r2,r17,16
1000cf20:	1001f226 	beq	r2,zero,1000d6ec <___vfiprintf_internal_r+0x11cc>
1000cf24:	d9402217 	ldw	r5,136(sp)
1000cf28:	0029883a 	mov	r20,zero
1000cf2c:	2cc00017 	ldw	r19,0(r5)
1000cf30:	29400104 	addi	r5,r5,4
1000cf34:	d9402215 	stw	r5,136(sp)
1000cf38:	003f5106 	br	1000cc80 <__alt_data_end+0xf800cc80>
1000cf3c:	d8c02217 	ldw	r3,136(sp)
1000cf40:	b811883a 	mov	r8,r23
1000cf44:	d8001d85 	stb	zero,118(sp)
1000cf48:	1dc00017 	ldw	r23,0(r3)
1000cf4c:	1f000104 	addi	fp,r3,4
1000cf50:	b8025926 	beq	r23,zero,1000d8b8 <___vfiprintf_internal_r+0x1398>
1000cf54:	80023316 	blt	r16,zero,1000d824 <___vfiprintf_internal_r+0x1304>
1000cf58:	800d883a 	mov	r6,r16
1000cf5c:	000b883a 	mov	r5,zero
1000cf60:	b809883a 	mov	r4,r23
1000cf64:	da002a15 	stw	r8,168(sp)
1000cf68:	000a6600 	call	1000a660 <memchr>
1000cf6c:	da002a17 	ldw	r8,168(sp)
1000cf70:	10026826 	beq	r2,zero,1000d914 <___vfiprintf_internal_r+0x13f4>
1000cf74:	15e9c83a 	sub	r20,r2,r23
1000cf78:	dd401d83 	ldbu	r21,118(sp)
1000cf7c:	df002215 	stw	fp,136(sp)
1000cf80:	0021883a 	mov	r16,zero
1000cf84:	003e6906 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cf88:	9cc03fcc 	andi	r19,r19,255
1000cf8c:	b811883a 	mov	r8,r23
1000cf90:	983fc126 	beq	r19,zero,1000ce98 <__alt_data_end+0xf800ce98>
1000cf94:	d8c02303 	ldbu	r3,140(sp)
1000cf98:	d8c01d85 	stb	r3,118(sp)
1000cf9c:	003fbe06 	br	1000ce98 <__alt_data_end+0xf800ce98>
1000cfa0:	d9002217 	ldw	r4,136(sp)
1000cfa4:	d9402217 	ldw	r5,136(sp)
1000cfa8:	21000017 	ldw	r4,0(r4)
1000cfac:	28800104 	addi	r2,r5,4
1000cfb0:	d9002515 	stw	r4,148(sp)
1000cfb4:	203e3d16 	blt	r4,zero,1000c8ac <__alt_data_end+0xf800c8ac>
1000cfb8:	d8802215 	stw	r2,136(sp)
1000cfbc:	b0c00007 	ldb	r3,0(r22)
1000cfc0:	003db406 	br	1000c694 <__alt_data_end+0xf800c694>
1000cfc4:	00c00ac4 	movi	r3,43
1000cfc8:	d8c02305 	stb	r3,140(sp)
1000cfcc:	04c00044 	movi	r19,1
1000cfd0:	b0c00007 	ldb	r3,0(r22)
1000cfd4:	003daf06 	br	1000c694 <__alt_data_end+0xf800c694>
1000cfd8:	b0c00007 	ldb	r3,0(r22)
1000cfdc:	01000a84 	movi	r4,42
1000cfe0:	b4000044 	addi	r16,r22,1
1000cfe4:	19025e26 	beq	r3,r4,1000d960 <___vfiprintf_internal_r+0x1440>
1000cfe8:	1f3ff404 	addi	fp,r3,-48
1000cfec:	0009883a 	mov	r4,zero
1000cff0:	af025236 	bltu	r21,fp,1000d93c <___vfiprintf_internal_r+0x141c>
1000cff4:	01400284 	movi	r5,10
1000cff8:	0004b280 	call	10004b28 <__mulsi3>
1000cffc:	80c00007 	ldb	r3,0(r16)
1000d000:	1709883a 	add	r4,r2,fp
1000d004:	85800044 	addi	r22,r16,1
1000d008:	1f3ff404 	addi	fp,r3,-48
1000d00c:	b021883a 	mov	r16,r22
1000d010:	af3ff82e 	bgeu	r21,fp,1000cff4 <__alt_data_end+0xf800cff4>
1000d014:	2021883a 	mov	r16,r4
1000d018:	203d9f0e 	bge	r4,zero,1000c698 <__alt_data_end+0xf800c698>
1000d01c:	043fffc4 	movi	r16,-1
1000d020:	003d9d06 	br	1000c698 <__alt_data_end+0xf800c698>
1000d024:	8c401014 	ori	r17,r17,64
1000d028:	b0c00007 	ldb	r3,0(r22)
1000d02c:	003d9906 	br	1000c694 <__alt_data_end+0xf800c694>
1000d030:	d9002217 	ldw	r4,136(sp)
1000d034:	d8001d85 	stb	zero,118(sp)
1000d038:	20c00204 	addi	r3,r4,8
1000d03c:	24c00017 	ldw	r19,0(r4)
1000d040:	25000117 	ldw	r20,4(r4)
1000d044:	8001e716 	blt	r16,zero,1000d7e4 <___vfiprintf_internal_r+0x12c4>
1000d048:	013fdfc4 	movi	r4,-129
1000d04c:	9d04b03a 	or	r2,r19,r20
1000d050:	d8c02215 	stw	r3,136(sp)
1000d054:	8922703a 	and	r17,r17,r4
1000d058:	002b883a 	mov	r21,zero
1000d05c:	103f2f1e 	bne	r2,zero,1000cd1c <__alt_data_end+0xf800cd1c>
1000d060:	803e2f26 	beq	r16,zero,1000c920 <__alt_data_end+0xf800c920>
1000d064:	0027883a 	mov	r19,zero
1000d068:	9cc00c04 	addi	r19,r19,48
1000d06c:	dcc019c5 	stb	r19,103(sp)
1000d070:	dd002817 	ldw	r20,160(sp)
1000d074:	ddc019c4 	addi	r23,sp,103
1000d078:	003e2c06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d07c:	9cc03fcc 	andi	r19,r19,255
1000d080:	b811883a 	mov	r8,r23
1000d084:	9802571e 	bne	r19,zero,1000d9e4 <___vfiprintf_internal_r+0x14c4>
1000d088:	18005726 	beq	r3,zero,1000d1e8 <___vfiprintf_internal_r+0xcc8>
1000d08c:	04c00044 	movi	r19,1
1000d090:	d8c01005 	stb	r3,64(sp)
1000d094:	d8001d85 	stb	zero,118(sp)
1000d098:	9829883a 	mov	r20,r19
1000d09c:	ddc01004 	addi	r23,sp,64
1000d0a0:	003f0a06 	br	1000cccc <__alt_data_end+0xf800cccc>
1000d0a4:	d9402017 	ldw	r5,128(sp)
1000d0a8:	d9002117 	ldw	r4,132(sp)
1000d0ac:	d9801a04 	addi	r6,sp,104
1000d0b0:	da802a15 	stw	r10,168(sp)
1000d0b4:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d0b8:	da802a17 	ldw	r10,168(sp)
1000d0bc:	1000501e 	bne	r2,zero,1000d200 <___vfiprintf_internal_r+0xce0>
1000d0c0:	d9801b17 	ldw	r6,108(sp)
1000d0c4:	d8801c17 	ldw	r2,112(sp)
1000d0c8:	d811883a 	mov	r8,sp
1000d0cc:	31000044 	addi	r4,r6,1
1000d0d0:	003e3606 	br	1000c9ac <__alt_data_end+0xf800c9ac>
1000d0d4:	d9001b17 	ldw	r4,108(sp)
1000d0d8:	d8801c17 	ldw	r2,112(sp)
1000d0dc:	21400044 	addi	r5,r4,1
1000d0e0:	d9801d87 	ldb	r6,118(sp)
1000d0e4:	303e5226 	beq	r6,zero,1000ca30 <__alt_data_end+0xf800ca30>
1000d0e8:	01800044 	movi	r6,1
1000d0ec:	d9001d84 	addi	r4,sp,118
1000d0f0:	1185883a 	add	r2,r2,r6
1000d0f4:	41000015 	stw	r4,0(r8)
1000d0f8:	41800115 	stw	r6,4(r8)
1000d0fc:	d8801c15 	stw	r2,112(sp)
1000d100:	d9401b15 	stw	r5,108(sp)
1000d104:	010001c4 	movi	r4,7
1000d108:	2140b00e 	bge	r4,r5,1000d3cc <___vfiprintf_internal_r+0xeac>
1000d10c:	1000f61e 	bne	r2,zero,1000d4e8 <___vfiprintf_internal_r+0xfc8>
1000d110:	3800b31e 	bne	r7,zero,1000d3e0 <___vfiprintf_internal_r+0xec0>
1000d114:	0009883a 	mov	r4,zero
1000d118:	300b883a 	mov	r5,r6
1000d11c:	d811883a 	mov	r8,sp
1000d120:	01802004 	movi	r6,128
1000d124:	19be5226 	beq	r3,r6,1000ca70 <__alt_data_end+0xf800ca70>
1000d128:	8521c83a 	sub	r16,r16,r20
1000d12c:	043e790e 	bge	zero,r16,1000cb14 <__alt_data_end+0xf800cb14>
1000d130:	05400404 	movi	r21,16
1000d134:	ac01b00e 	bge	r21,r16,1000d7f8 <___vfiprintf_internal_r+0x12d8>
1000d138:	01440074 	movhi	r5,4097
1000d13c:	29536604 	addi	r5,r5,19864
1000d140:	d9402315 	stw	r5,140(sp)
1000d144:	070001c4 	movi	fp,7
1000d148:	00000506 	br	1000d160 <___vfiprintf_internal_r+0xc40>
1000d14c:	21400084 	addi	r5,r4,2
1000d150:	42000204 	addi	r8,r8,8
1000d154:	1809883a 	mov	r4,r3
1000d158:	843ffc04 	addi	r16,r16,-16
1000d15c:	ac000d0e 	bge	r21,r16,1000d194 <___vfiprintf_internal_r+0xc74>
1000d160:	10800404 	addi	r2,r2,16
1000d164:	20c00044 	addi	r3,r4,1
1000d168:	44800015 	stw	r18,0(r8)
1000d16c:	45400115 	stw	r21,4(r8)
1000d170:	d8801c15 	stw	r2,112(sp)
1000d174:	d8c01b15 	stw	r3,108(sp)
1000d178:	e0fff40e 	bge	fp,r3,1000d14c <__alt_data_end+0xf800d14c>
1000d17c:	1000101e 	bne	r2,zero,1000d1c0 <___vfiprintf_internal_r+0xca0>
1000d180:	843ffc04 	addi	r16,r16,-16
1000d184:	01400044 	movi	r5,1
1000d188:	0009883a 	mov	r4,zero
1000d18c:	d811883a 	mov	r8,sp
1000d190:	ac3ff316 	blt	r21,r16,1000d160 <__alt_data_end+0xf800d160>
1000d194:	d8c02317 	ldw	r3,140(sp)
1000d198:	1405883a 	add	r2,r2,r16
1000d19c:	44000115 	stw	r16,4(r8)
1000d1a0:	40c00015 	stw	r3,0(r8)
1000d1a4:	d8801c15 	stw	r2,112(sp)
1000d1a8:	d9401b15 	stw	r5,108(sp)
1000d1ac:	00c001c4 	movi	r3,7
1000d1b0:	19401916 	blt	r3,r5,1000d218 <___vfiprintf_internal_r+0xcf8>
1000d1b4:	42000204 	addi	r8,r8,8
1000d1b8:	29400044 	addi	r5,r5,1
1000d1bc:	003e5506 	br	1000cb14 <__alt_data_end+0xf800cb14>
1000d1c0:	d9402017 	ldw	r5,128(sp)
1000d1c4:	d9002117 	ldw	r4,132(sp)
1000d1c8:	d9801a04 	addi	r6,sp,104
1000d1cc:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d1d0:	10000b1e 	bne	r2,zero,1000d200 <___vfiprintf_internal_r+0xce0>
1000d1d4:	d9001b17 	ldw	r4,108(sp)
1000d1d8:	d8801c17 	ldw	r2,112(sp)
1000d1dc:	d811883a 	mov	r8,sp
1000d1e0:	21400044 	addi	r5,r4,1
1000d1e4:	003fdc06 	br	1000d158 <__alt_data_end+0xf800d158>
1000d1e8:	d8801c17 	ldw	r2,112(sp)
1000d1ec:	10000426 	beq	r2,zero,1000d200 <___vfiprintf_internal_r+0xce0>
1000d1f0:	d9402017 	ldw	r5,128(sp)
1000d1f4:	d9002117 	ldw	r4,132(sp)
1000d1f8:	d9801a04 	addi	r6,sp,104
1000d1fc:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d200:	d9402017 	ldw	r5,128(sp)
1000d204:	2880030b 	ldhu	r2,12(r5)
1000d208:	1080100c 	andi	r2,r2,64
1000d20c:	10014d1e 	bne	r2,zero,1000d744 <___vfiprintf_internal_r+0x1224>
1000d210:	d8802417 	ldw	r2,144(sp)
1000d214:	003d9706 	br	1000c874 <__alt_data_end+0xf800c874>
1000d218:	1000d21e 	bne	r2,zero,1000d564 <___vfiprintf_internal_r+0x1044>
1000d21c:	00c00044 	movi	r3,1
1000d220:	a005883a 	mov	r2,r20
1000d224:	ddc00015 	stw	r23,0(sp)
1000d228:	dd000115 	stw	r20,4(sp)
1000d22c:	dd001c15 	stw	r20,112(sp)
1000d230:	d8c01b15 	stw	r3,108(sp)
1000d234:	d811883a 	mov	r8,sp
1000d238:	42000204 	addi	r8,r8,8
1000d23c:	8c40010c 	andi	r17,r17,4
1000d240:	88004026 	beq	r17,zero,1000d344 <___vfiprintf_internal_r+0xe24>
1000d244:	d9002517 	ldw	r4,148(sp)
1000d248:	24e3c83a 	sub	r17,r4,r19
1000d24c:	04403d0e 	bge	zero,r17,1000d344 <___vfiprintf_internal_r+0xe24>
1000d250:	04000404 	movi	r16,16
1000d254:	8441a90e 	bge	r16,r17,1000d8fc <___vfiprintf_internal_r+0x13dc>
1000d258:	00c40074 	movhi	r3,4097
1000d25c:	18d36a04 	addi	r3,r3,19880
1000d260:	d9001b17 	ldw	r4,108(sp)
1000d264:	d8c02315 	stw	r3,140(sp)
1000d268:	050001c4 	movi	r20,7
1000d26c:	dd402117 	ldw	r21,132(sp)
1000d270:	ddc02017 	ldw	r23,128(sp)
1000d274:	00000506 	br	1000d28c <___vfiprintf_internal_r+0xd6c>
1000d278:	21400084 	addi	r5,r4,2
1000d27c:	42000204 	addi	r8,r8,8
1000d280:	1809883a 	mov	r4,r3
1000d284:	8c7ffc04 	addi	r17,r17,-16
1000d288:	84400f0e 	bge	r16,r17,1000d2c8 <___vfiprintf_internal_r+0xda8>
1000d28c:	01440074 	movhi	r5,4097
1000d290:	10800404 	addi	r2,r2,16
1000d294:	20c00044 	addi	r3,r4,1
1000d298:	29536a04 	addi	r5,r5,19880
1000d29c:	41400015 	stw	r5,0(r8)
1000d2a0:	44000115 	stw	r16,4(r8)
1000d2a4:	d8801c15 	stw	r2,112(sp)
1000d2a8:	d8c01b15 	stw	r3,108(sp)
1000d2ac:	a0fff20e 	bge	r20,r3,1000d278 <__alt_data_end+0xf800d278>
1000d2b0:	1000141e 	bne	r2,zero,1000d304 <___vfiprintf_internal_r+0xde4>
1000d2b4:	8c7ffc04 	addi	r17,r17,-16
1000d2b8:	01400044 	movi	r5,1
1000d2bc:	0009883a 	mov	r4,zero
1000d2c0:	d811883a 	mov	r8,sp
1000d2c4:	847ff116 	blt	r16,r17,1000d28c <__alt_data_end+0xf800d28c>
1000d2c8:	d8c02317 	ldw	r3,140(sp)
1000d2cc:	1445883a 	add	r2,r2,r17
1000d2d0:	44400115 	stw	r17,4(r8)
1000d2d4:	40c00015 	stw	r3,0(r8)
1000d2d8:	d8801c15 	stw	r2,112(sp)
1000d2dc:	d9401b15 	stw	r5,108(sp)
1000d2e0:	00c001c4 	movi	r3,7
1000d2e4:	1940170e 	bge	r3,r5,1000d344 <___vfiprintf_internal_r+0xe24>
1000d2e8:	1000101e 	bne	r2,zero,1000d32c <___vfiprintf_internal_r+0xe0c>
1000d2ec:	d8802517 	ldw	r2,148(sp)
1000d2f0:	14c11616 	blt	r2,r19,1000d74c <___vfiprintf_internal_r+0x122c>
1000d2f4:	d9002417 	ldw	r4,144(sp)
1000d2f8:	2089883a 	add	r4,r4,r2
1000d2fc:	d9002415 	stw	r4,144(sp)
1000d300:	003e1806 	br	1000cb64 <__alt_data_end+0xf800cb64>
1000d304:	d9801a04 	addi	r6,sp,104
1000d308:	b80b883a 	mov	r5,r23
1000d30c:	a809883a 	mov	r4,r21
1000d310:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d314:	103fba1e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d318:	d9001b17 	ldw	r4,108(sp)
1000d31c:	d8801c17 	ldw	r2,112(sp)
1000d320:	d811883a 	mov	r8,sp
1000d324:	21400044 	addi	r5,r4,1
1000d328:	003fd606 	br	1000d284 <__alt_data_end+0xf800d284>
1000d32c:	d9402017 	ldw	r5,128(sp)
1000d330:	d9002117 	ldw	r4,132(sp)
1000d334:	d9801a04 	addi	r6,sp,104
1000d338:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d33c:	103fb01e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d340:	d8801c17 	ldw	r2,112(sp)
1000d344:	d8c02517 	ldw	r3,148(sp)
1000d348:	1cc0010e 	bge	r3,r19,1000d350 <___vfiprintf_internal_r+0xe30>
1000d34c:	9807883a 	mov	r3,r19
1000d350:	d9002417 	ldw	r4,144(sp)
1000d354:	20c9883a 	add	r4,r4,r3
1000d358:	d9002415 	stw	r4,144(sp)
1000d35c:	103e0126 	beq	r2,zero,1000cb64 <__alt_data_end+0xf800cb64>
1000d360:	d9402017 	ldw	r5,128(sp)
1000d364:	d9002117 	ldw	r4,132(sp)
1000d368:	d9801a04 	addi	r6,sp,104
1000d36c:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d370:	103dfc26 	beq	r2,zero,1000cb64 <__alt_data_end+0xf800cb64>
1000d374:	003fa206 	br	1000d200 <__alt_data_end+0xf800d200>
1000d378:	d9402017 	ldw	r5,128(sp)
1000d37c:	d9002117 	ldw	r4,132(sp)
1000d380:	d9801a04 	addi	r6,sp,104
1000d384:	d9c02b15 	stw	r7,172(sp)
1000d388:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d38c:	d9c02b17 	ldw	r7,172(sp)
1000d390:	103f9b1e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d394:	d9001b17 	ldw	r4,108(sp)
1000d398:	d8801c17 	ldw	r2,112(sp)
1000d39c:	d811883a 	mov	r8,sp
1000d3a0:	21800044 	addi	r6,r4,1
1000d3a4:	003dbf06 	br	1000caa4 <__alt_data_end+0xf800caa4>
1000d3a8:	1000d81e 	bne	r2,zero,1000d70c <___vfiprintf_internal_r+0x11ec>
1000d3ac:	d9001d87 	ldb	r4,118(sp)
1000d3b0:	20000a26 	beq	r4,zero,1000d3dc <___vfiprintf_internal_r+0xebc>
1000d3b4:	00800044 	movi	r2,1
1000d3b8:	d9001d84 	addi	r4,sp,118
1000d3bc:	100b883a 	mov	r5,r2
1000d3c0:	d9000015 	stw	r4,0(sp)
1000d3c4:	d8800115 	stw	r2,4(sp)
1000d3c8:	d811883a 	mov	r8,sp
1000d3cc:	2809883a 	mov	r4,r5
1000d3d0:	42000204 	addi	r8,r8,8
1000d3d4:	29400044 	addi	r5,r5,1
1000d3d8:	003d9506 	br	1000ca30 <__alt_data_end+0xf800ca30>
1000d3dc:	3800fd26 	beq	r7,zero,1000d7d4 <___vfiprintf_internal_r+0x12b4>
1000d3e0:	00800084 	movi	r2,2
1000d3e4:	d9001d04 	addi	r4,sp,116
1000d3e8:	d9000015 	stw	r4,0(sp)
1000d3ec:	d8800115 	stw	r2,4(sp)
1000d3f0:	01400044 	movi	r5,1
1000d3f4:	d811883a 	mov	r8,sp
1000d3f8:	2809883a 	mov	r4,r5
1000d3fc:	42000204 	addi	r8,r8,8
1000d400:	29400044 	addi	r5,r5,1
1000d404:	003f4606 	br	1000d120 <__alt_data_end+0xf800d120>
1000d408:	d8802517 	ldw	r2,148(sp)
1000d40c:	14c0010e 	bge	r2,r19,1000d414 <___vfiprintf_internal_r+0xef4>
1000d410:	9805883a 	mov	r2,r19
1000d414:	d9402417 	ldw	r5,144(sp)
1000d418:	288b883a 	add	r5,r5,r2
1000d41c:	d9402415 	stw	r5,144(sp)
1000d420:	003dd006 	br	1000cb64 <__alt_data_end+0xf800cb64>
1000d424:	d8001d85 	stb	zero,118(sp)
1000d428:	80005d16 	blt	r16,zero,1000d5a0 <___vfiprintf_internal_r+0x1080>
1000d42c:	00ffdfc4 	movi	r3,-129
1000d430:	9d04b03a 	or	r2,r19,r20
1000d434:	88e2703a 	and	r17,r17,r3
1000d438:	103d3726 	beq	r2,zero,1000c918 <__alt_data_end+0xf800c918>
1000d43c:	002b883a 	mov	r21,zero
1000d440:	d9002617 	ldw	r4,152(sp)
1000d444:	ddc01a04 	addi	r23,sp,104
1000d448:	988003cc 	andi	r2,r19,15
1000d44c:	a006973a 	slli	r3,r20,28
1000d450:	2085883a 	add	r2,r4,r2
1000d454:	9826d13a 	srli	r19,r19,4
1000d458:	10800003 	ldbu	r2,0(r2)
1000d45c:	a028d13a 	srli	r20,r20,4
1000d460:	bdffffc4 	addi	r23,r23,-1
1000d464:	1ce6b03a 	or	r19,r3,r19
1000d468:	b8800005 	stb	r2,0(r23)
1000d46c:	9d04b03a 	or	r2,r19,r20
1000d470:	103ff51e 	bne	r2,zero,1000d448 <__alt_data_end+0xf800d448>
1000d474:	d8801e17 	ldw	r2,120(sp)
1000d478:	15e9c83a 	sub	r20,r2,r23
1000d47c:	003d2b06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d480:	d9402017 	ldw	r5,128(sp)
1000d484:	d9002117 	ldw	r4,132(sp)
1000d488:	d9801a04 	addi	r6,sp,104
1000d48c:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d490:	103f5b1e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d494:	d8801c17 	ldw	r2,112(sp)
1000d498:	d811883a 	mov	r8,sp
1000d49c:	003f6706 	br	1000d23c <__alt_data_end+0xf800d23c>
1000d4a0:	d9402017 	ldw	r5,128(sp)
1000d4a4:	d9002117 	ldw	r4,132(sp)
1000d4a8:	d9801a04 	addi	r6,sp,104
1000d4ac:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d4b0:	103f531e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d4b4:	d811883a 	mov	r8,sp
1000d4b8:	003cd906 	br	1000c820 <__alt_data_end+0xf800c820>
1000d4bc:	10803fcc 	andi	r2,r2,255
1000d4c0:	1080201c 	xori	r2,r2,128
1000d4c4:	10bfe004 	addi	r2,r2,-128
1000d4c8:	00c00c04 	movi	r3,48
1000d4cc:	10ffe926 	beq	r2,r3,1000d474 <__alt_data_end+0xf800d474>
1000d4d0:	b8ffffc5 	stb	r3,-1(r23)
1000d4d4:	d8c01e17 	ldw	r3,120(sp)
1000d4d8:	b8bfffc4 	addi	r2,r23,-1
1000d4dc:	102f883a 	mov	r23,r2
1000d4e0:	18a9c83a 	sub	r20,r3,r2
1000d4e4:	003d1106 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d4e8:	d9402017 	ldw	r5,128(sp)
1000d4ec:	d9002117 	ldw	r4,132(sp)
1000d4f0:	d9801a04 	addi	r6,sp,104
1000d4f4:	d8c02a15 	stw	r3,168(sp)
1000d4f8:	d9c02b15 	stw	r7,172(sp)
1000d4fc:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d500:	d8c02a17 	ldw	r3,168(sp)
1000d504:	d9c02b17 	ldw	r7,172(sp)
1000d508:	103f3d1e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d50c:	d9001b17 	ldw	r4,108(sp)
1000d510:	d8801c17 	ldw	r2,112(sp)
1000d514:	d811883a 	mov	r8,sp
1000d518:	21400044 	addi	r5,r4,1
1000d51c:	003d4406 	br	1000ca30 <__alt_data_end+0xf800ca30>
1000d520:	d9402017 	ldw	r5,128(sp)
1000d524:	d9002117 	ldw	r4,132(sp)
1000d528:	d9801a04 	addi	r6,sp,104
1000d52c:	d8c02a15 	stw	r3,168(sp)
1000d530:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d534:	d8c02a17 	ldw	r3,168(sp)
1000d538:	103f311e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d53c:	d9001b17 	ldw	r4,108(sp)
1000d540:	d8801c17 	ldw	r2,112(sp)
1000d544:	d811883a 	mov	r8,sp
1000d548:	21400044 	addi	r5,r4,1
1000d54c:	003ef406 	br	1000d120 <__alt_data_end+0xf800d120>
1000d550:	1000bd1e 	bne	r2,zero,1000d848 <___vfiprintf_internal_r+0x1328>
1000d554:	01400044 	movi	r5,1
1000d558:	0009883a 	mov	r4,zero
1000d55c:	d811883a 	mov	r8,sp
1000d560:	003ef106 	br	1000d128 <__alt_data_end+0xf800d128>
1000d564:	d9402017 	ldw	r5,128(sp)
1000d568:	d9002117 	ldw	r4,132(sp)
1000d56c:	d9801a04 	addi	r6,sp,104
1000d570:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d574:	103f221e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d578:	d9401b17 	ldw	r5,108(sp)
1000d57c:	d8801c17 	ldw	r2,112(sp)
1000d580:	d811883a 	mov	r8,sp
1000d584:	29400044 	addi	r5,r5,1
1000d588:	003d6206 	br	1000cb14 <__alt_data_end+0xf800cb14>
1000d58c:	01440074 	movhi	r5,4097
1000d590:	29530504 	addi	r5,r5,19476
1000d594:	d9402615 	stw	r5,152(sp)
1000d598:	d8c02215 	stw	r3,136(sp)
1000d59c:	1023883a 	mov	r17,r2
1000d5a0:	9d04b03a 	or	r2,r19,r20
1000d5a4:	103fa51e 	bne	r2,zero,1000d43c <__alt_data_end+0xf800d43c>
1000d5a8:	002b883a 	mov	r21,zero
1000d5ac:	00800084 	movi	r2,2
1000d5b0:	003e4a06 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d5b4:	01440074 	movhi	r5,4097
1000d5b8:	29530504 	addi	r5,r5,19476
1000d5bc:	002b883a 	mov	r21,zero
1000d5c0:	d9402615 	stw	r5,152(sp)
1000d5c4:	003f9e06 	br	1000d440 <__alt_data_end+0xf800d440>
1000d5c8:	d9402217 	ldw	r5,136(sp)
1000d5cc:	d8001d85 	stb	zero,118(sp)
1000d5d0:	0029883a 	mov	r20,zero
1000d5d4:	28800104 	addi	r2,r5,4
1000d5d8:	2cc00017 	ldw	r19,0(r5)
1000d5dc:	803e3a16 	blt	r16,zero,1000cec8 <__alt_data_end+0xf800cec8>
1000d5e0:	00ffdfc4 	movi	r3,-129
1000d5e4:	d8802215 	stw	r2,136(sp)
1000d5e8:	88e2703a 	and	r17,r17,r3
1000d5ec:	002b883a 	mov	r21,zero
1000d5f0:	983e9b26 	beq	r19,zero,1000d060 <__alt_data_end+0xf800d060>
1000d5f4:	00800244 	movi	r2,9
1000d5f8:	14fdc936 	bltu	r2,r19,1000cd20 <__alt_data_end+0xf800cd20>
1000d5fc:	003e9a06 	br	1000d068 <__alt_data_end+0xf800d068>
1000d600:	00800c04 	movi	r2,48
1000d604:	d8c01d45 	stb	r3,117(sp)
1000d608:	d8801d05 	stb	r2,116(sp)
1000d60c:	d8001d85 	stb	zero,118(sp)
1000d610:	88c00094 	ori	r3,r17,2
1000d614:	80009c16 	blt	r16,zero,1000d888 <___vfiprintf_internal_r+0x1368>
1000d618:	00bfdfc4 	movi	r2,-129
1000d61c:	88a2703a 	and	r17,r17,r2
1000d620:	8c400094 	ori	r17,r17,2
1000d624:	002b883a 	mov	r21,zero
1000d628:	003f8506 	br	1000d440 <__alt_data_end+0xf800d440>
1000d62c:	b029883a 	mov	r20,r22
1000d630:	003c0b06 	br	1000c660 <__alt_data_end+0xf800c660>
1000d634:	04e7c83a 	sub	r19,zero,r19
1000d638:	05400b44 	movi	r21,45
1000d63c:	9804c03a 	cmpne	r2,r19,zero
1000d640:	0529c83a 	sub	r20,zero,r20
1000d644:	dd401d85 	stb	r21,118(sp)
1000d648:	a0a9c83a 	sub	r20,r20,r2
1000d64c:	80009716 	blt	r16,zero,1000d8ac <___vfiprintf_internal_r+0x138c>
1000d650:	00bfdfc4 	movi	r2,-129
1000d654:	88a2703a 	and	r17,r17,r2
1000d658:	003db006 	br	1000cd1c <__alt_data_end+0xf800cd1c>
1000d65c:	b0c00007 	ldb	r3,0(r22)
1000d660:	003c0c06 	br	1000c694 <__alt_data_end+0xf800c694>
1000d664:	8880100c 	andi	r2,r17,64
1000d668:	d8001d85 	stb	zero,118(sp)
1000d66c:	1000461e 	bne	r2,zero,1000d788 <___vfiprintf_internal_r+0x1268>
1000d670:	d9002217 	ldw	r4,136(sp)
1000d674:	0029883a 	mov	r20,zero
1000d678:	20800104 	addi	r2,r4,4
1000d67c:	24c00017 	ldw	r19,0(r4)
1000d680:	803df80e 	bge	r16,zero,1000ce64 <__alt_data_end+0xf800ce64>
1000d684:	9d06b03a 	or	r3,r19,r20
1000d688:	d8802215 	stw	r2,136(sp)
1000d68c:	183d5e1e 	bne	r3,zero,1000cc08 <__alt_data_end+0xf800cc08>
1000d690:	002b883a 	mov	r21,zero
1000d694:	0005883a 	mov	r2,zero
1000d698:	003e1006 	br	1000cedc <__alt_data_end+0xf800cedc>
1000d69c:	8880040c 	andi	r2,r17,16
1000d6a0:	1000321e 	bne	r2,zero,1000d76c <___vfiprintf_internal_r+0x124c>
1000d6a4:	8c40100c 	andi	r17,r17,64
1000d6a8:	88008d26 	beq	r17,zero,1000d8e0 <___vfiprintf_internal_r+0x13c0>
1000d6ac:	d9402217 	ldw	r5,136(sp)
1000d6b0:	d8c02417 	ldw	r3,144(sp)
1000d6b4:	28800017 	ldw	r2,0(r5)
1000d6b8:	29400104 	addi	r5,r5,4
1000d6bc:	d9402215 	stw	r5,136(sp)
1000d6c0:	10c0000d 	sth	r3,0(r2)
1000d6c4:	003bca06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000d6c8:	8880100c 	andi	r2,r17,64
1000d6cc:	10003a26 	beq	r2,zero,1000d7b8 <___vfiprintf_internal_r+0x1298>
1000d6d0:	d8802217 	ldw	r2,136(sp)
1000d6d4:	14c0000f 	ldh	r19,0(r2)
1000d6d8:	10800104 	addi	r2,r2,4
1000d6dc:	d8802215 	stw	r2,136(sp)
1000d6e0:	9829d7fa 	srai	r20,r19,31
1000d6e4:	a005883a 	mov	r2,r20
1000d6e8:	003d8506 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d6ec:	8880100c 	andi	r2,r17,64
1000d6f0:	10002b26 	beq	r2,zero,1000d7a0 <___vfiprintf_internal_r+0x1280>
1000d6f4:	d8802217 	ldw	r2,136(sp)
1000d6f8:	0029883a 	mov	r20,zero
1000d6fc:	14c0000b 	ldhu	r19,0(r2)
1000d700:	10800104 	addi	r2,r2,4
1000d704:	d8802215 	stw	r2,136(sp)
1000d708:	003d5d06 	br	1000cc80 <__alt_data_end+0xf800cc80>
1000d70c:	d9402017 	ldw	r5,128(sp)
1000d710:	d9002117 	ldw	r4,132(sp)
1000d714:	d9801a04 	addi	r6,sp,104
1000d718:	d8c02a15 	stw	r3,168(sp)
1000d71c:	d9c02b15 	stw	r7,172(sp)
1000d720:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d724:	d8c02a17 	ldw	r3,168(sp)
1000d728:	d9c02b17 	ldw	r7,172(sp)
1000d72c:	103eb41e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d730:	d9001b17 	ldw	r4,108(sp)
1000d734:	d8801c17 	ldw	r2,112(sp)
1000d738:	d811883a 	mov	r8,sp
1000d73c:	21400044 	addi	r5,r4,1
1000d740:	003e6706 	br	1000d0e0 <__alt_data_end+0xf800d0e0>
1000d744:	00bfffc4 	movi	r2,-1
1000d748:	003c4a06 	br	1000c874 <__alt_data_end+0xf800c874>
1000d74c:	9805883a 	mov	r2,r19
1000d750:	003ee806 	br	1000d2f4 <__alt_data_end+0xf800d2f4>
1000d754:	d8c02217 	ldw	r3,136(sp)
1000d758:	0029883a 	mov	r20,zero
1000d75c:	18800104 	addi	r2,r3,4
1000d760:	1cc0000b 	ldhu	r19,0(r3)
1000d764:	803f9e0e 	bge	r16,zero,1000d5e0 <__alt_data_end+0xf800d5e0>
1000d768:	003dd706 	br	1000cec8 <__alt_data_end+0xf800cec8>
1000d76c:	d8c02217 	ldw	r3,136(sp)
1000d770:	d9002417 	ldw	r4,144(sp)
1000d774:	18800017 	ldw	r2,0(r3)
1000d778:	18c00104 	addi	r3,r3,4
1000d77c:	d8c02215 	stw	r3,136(sp)
1000d780:	11000015 	stw	r4,0(r2)
1000d784:	003b9a06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000d788:	d8c02217 	ldw	r3,136(sp)
1000d78c:	0029883a 	mov	r20,zero
1000d790:	18800104 	addi	r2,r3,4
1000d794:	1cc0000b 	ldhu	r19,0(r3)
1000d798:	803db20e 	bge	r16,zero,1000ce64 <__alt_data_end+0xf800ce64>
1000d79c:	003fb906 	br	1000d684 <__alt_data_end+0xf800d684>
1000d7a0:	d9002217 	ldw	r4,136(sp)
1000d7a4:	0029883a 	mov	r20,zero
1000d7a8:	24c00017 	ldw	r19,0(r4)
1000d7ac:	21000104 	addi	r4,r4,4
1000d7b0:	d9002215 	stw	r4,136(sp)
1000d7b4:	003d3206 	br	1000cc80 <__alt_data_end+0xf800cc80>
1000d7b8:	d8c02217 	ldw	r3,136(sp)
1000d7bc:	1cc00017 	ldw	r19,0(r3)
1000d7c0:	18c00104 	addi	r3,r3,4
1000d7c4:	d8c02215 	stw	r3,136(sp)
1000d7c8:	9829d7fa 	srai	r20,r19,31
1000d7cc:	a005883a 	mov	r2,r20
1000d7d0:	003d4b06 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000d7d4:	0009883a 	mov	r4,zero
1000d7d8:	01400044 	movi	r5,1
1000d7dc:	d811883a 	mov	r8,sp
1000d7e0:	003e4f06 	br	1000d120 <__alt_data_end+0xf800d120>
1000d7e4:	d8c02215 	stw	r3,136(sp)
1000d7e8:	002b883a 	mov	r21,zero
1000d7ec:	003db806 	br	1000ced0 <__alt_data_end+0xf800ced0>
1000d7f0:	d811883a 	mov	r8,sp
1000d7f4:	003e9606 	br	1000d250 <__alt_data_end+0xf800d250>
1000d7f8:	01040074 	movhi	r4,4097
1000d7fc:	21136604 	addi	r4,r4,19864
1000d800:	d9002315 	stw	r4,140(sp)
1000d804:	003e6306 	br	1000d194 <__alt_data_end+0xf800d194>
1000d808:	b0c00043 	ldbu	r3,1(r22)
1000d80c:	8c400814 	ori	r17,r17,32
1000d810:	b5800044 	addi	r22,r22,1
1000d814:	18c03fcc 	andi	r3,r3,255
1000d818:	18c0201c 	xori	r3,r3,128
1000d81c:	18ffe004 	addi	r3,r3,-128
1000d820:	003b9c06 	br	1000c694 <__alt_data_end+0xf800c694>
1000d824:	b809883a 	mov	r4,r23
1000d828:	da002a15 	stw	r8,168(sp)
1000d82c:	0004c900 	call	10004c90 <strlen>
1000d830:	1029883a 	mov	r20,r2
1000d834:	dd401d83 	ldbu	r21,118(sp)
1000d838:	df002215 	stw	fp,136(sp)
1000d83c:	0021883a 	mov	r16,zero
1000d840:	da002a17 	ldw	r8,168(sp)
1000d844:	003c3906 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d848:	d9402017 	ldw	r5,128(sp)
1000d84c:	d9002117 	ldw	r4,132(sp)
1000d850:	d9801a04 	addi	r6,sp,104
1000d854:	000c40c0 	call	1000c40c <__sprint_r.part.0>
1000d858:	103e691e 	bne	r2,zero,1000d200 <__alt_data_end+0xf800d200>
1000d85c:	d9001b17 	ldw	r4,108(sp)
1000d860:	d8801c17 	ldw	r2,112(sp)
1000d864:	d811883a 	mov	r8,sp
1000d868:	21400044 	addi	r5,r4,1
1000d86c:	003e2e06 	br	1000d128 <__alt_data_end+0xf800d128>
1000d870:	01040074 	movhi	r4,4097
1000d874:	21136a04 	addi	r4,r4,19880
1000d878:	d9002315 	stw	r4,140(sp)
1000d87c:	d9001b17 	ldw	r4,108(sp)
1000d880:	21000044 	addi	r4,r4,1
1000d884:	003c5e06 	br	1000ca00 <__alt_data_end+0xf800ca00>
1000d888:	002b883a 	mov	r21,zero
1000d88c:	00800084 	movi	r2,2
1000d890:	10803fcc 	andi	r2,r2,255
1000d894:	01000044 	movi	r4,1
1000d898:	11002b26 	beq	r2,r4,1000d948 <___vfiprintf_internal_r+0x1428>
1000d89c:	01000084 	movi	r4,2
1000d8a0:	11002b1e 	bne	r2,r4,1000d950 <___vfiprintf_internal_r+0x1430>
1000d8a4:	1823883a 	mov	r17,r3
1000d8a8:	003ee506 	br	1000d440 <__alt_data_end+0xf800d440>
1000d8ac:	8807883a 	mov	r3,r17
1000d8b0:	00800044 	movi	r2,1
1000d8b4:	003ff606 	br	1000d890 <__alt_data_end+0xf800d890>
1000d8b8:	00800184 	movi	r2,6
1000d8bc:	1400012e 	bgeu	r2,r16,1000d8c4 <___vfiprintf_internal_r+0x13a4>
1000d8c0:	1021883a 	mov	r16,r2
1000d8c4:	8029883a 	mov	r20,r16
1000d8c8:	8027883a 	mov	r19,r16
1000d8cc:	80002216 	blt	r16,zero,1000d958 <___vfiprintf_internal_r+0x1438>
1000d8d0:	05c40074 	movhi	r23,4097
1000d8d4:	df002215 	stw	fp,136(sp)
1000d8d8:	bdd30a04 	addi	r23,r23,19496
1000d8dc:	003cfb06 	br	1000cccc <__alt_data_end+0xf800cccc>
1000d8e0:	d9002217 	ldw	r4,136(sp)
1000d8e4:	d9402417 	ldw	r5,144(sp)
1000d8e8:	20800017 	ldw	r2,0(r4)
1000d8ec:	21000104 	addi	r4,r4,4
1000d8f0:	d9002215 	stw	r4,136(sp)
1000d8f4:	11400015 	stw	r5,0(r2)
1000d8f8:	003b3d06 	br	1000c5f0 <__alt_data_end+0xf800c5f0>
1000d8fc:	01440074 	movhi	r5,4097
1000d900:	29536a04 	addi	r5,r5,19880
1000d904:	d9402315 	stw	r5,140(sp)
1000d908:	d9401b17 	ldw	r5,108(sp)
1000d90c:	29400044 	addi	r5,r5,1
1000d910:	003e6d06 	br	1000d2c8 <__alt_data_end+0xf800d2c8>
1000d914:	8029883a 	mov	r20,r16
1000d918:	dd401d83 	ldbu	r21,118(sp)
1000d91c:	df002215 	stw	fp,136(sp)
1000d920:	0021883a 	mov	r16,zero
1000d924:	003c0106 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d928:	00c40074 	movhi	r3,4097
1000d92c:	18d36604 	addi	r3,r3,19864
1000d930:	d8c02315 	stw	r3,140(sp)
1000d934:	280d883a 	mov	r6,r5
1000d938:	003c6906 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000d93c:	802d883a 	mov	r22,r16
1000d940:	0021883a 	mov	r16,zero
1000d944:	003b5406 	br	1000c698 <__alt_data_end+0xf800c698>
1000d948:	1823883a 	mov	r17,r3
1000d94c:	003cf306 	br	1000cd1c <__alt_data_end+0xf800cd1c>
1000d950:	1823883a 	mov	r17,r3
1000d954:	003cad06 	br	1000cc0c <__alt_data_end+0xf800cc0c>
1000d958:	0027883a 	mov	r19,zero
1000d95c:	003fdc06 	br	1000d8d0 <__alt_data_end+0xf800d8d0>
1000d960:	d9402217 	ldw	r5,136(sp)
1000d964:	8005883a 	mov	r2,r16
1000d968:	b0c00043 	ldbu	r3,1(r22)
1000d96c:	2c000017 	ldw	r16,0(r5)
1000d970:	29000104 	addi	r4,r5,4
1000d974:	d9002215 	stw	r4,136(sp)
1000d978:	102d883a 	mov	r22,r2
1000d97c:	803fa50e 	bge	r16,zero,1000d814 <__alt_data_end+0xf800d814>
1000d980:	18c03fcc 	andi	r3,r3,255
1000d984:	18c0201c 	xori	r3,r3,128
1000d988:	043fffc4 	movi	r16,-1
1000d98c:	18ffe004 	addi	r3,r3,-128
1000d990:	003b4006 	br	1000c694 <__alt_data_end+0xf800c694>
1000d994:	d9402303 	ldbu	r5,140(sp)
1000d998:	d9401d85 	stb	r5,118(sp)
1000d99c:	003cae06 	br	1000cc58 <__alt_data_end+0xf800cc58>
1000d9a0:	d8c02303 	ldbu	r3,140(sp)
1000d9a4:	d8c01d85 	stb	r3,118(sp)
1000d9a8:	003d1406 	br	1000cdfc <__alt_data_end+0xf800cdfc>
1000d9ac:	d8c02303 	ldbu	r3,140(sp)
1000d9b0:	d8c01d85 	stb	r3,118(sp)
1000d9b4:	003cca06 	br	1000cce0 <__alt_data_end+0xf800cce0>
1000d9b8:	8880004c 	andi	r2,r17,1
1000d9bc:	002b883a 	mov	r21,zero
1000d9c0:	10000526 	beq	r2,zero,1000d9d8 <___vfiprintf_internal_r+0x14b8>
1000d9c4:	00800c04 	movi	r2,48
1000d9c8:	d88019c5 	stb	r2,103(sp)
1000d9cc:	dd002817 	ldw	r20,160(sp)
1000d9d0:	ddc019c4 	addi	r23,sp,103
1000d9d4:	003bd506 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d9d8:	0029883a 	mov	r20,zero
1000d9dc:	ddc01a04 	addi	r23,sp,104
1000d9e0:	003bd206 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d9e4:	d9002303 	ldbu	r4,140(sp)
1000d9e8:	d9001d85 	stb	r4,118(sp)
1000d9ec:	003da606 	br	1000d088 <__alt_data_end+0xf800d088>
1000d9f0:	d8c02303 	ldbu	r3,140(sp)
1000d9f4:	d8c01d85 	stb	r3,118(sp)
1000d9f8:	003c7606 	br	1000cbd4 <__alt_data_end+0xf800cbd4>
1000d9fc:	d8c02303 	ldbu	r3,140(sp)
1000da00:	d8c01d85 	stb	r3,118(sp)
1000da04:	003c6506 	br	1000cb9c <__alt_data_end+0xf800cb9c>
1000da08:	d9002303 	ldbu	r4,140(sp)
1000da0c:	d9001d85 	stb	r4,118(sp)
1000da10:	003d3d06 	br	1000cf08 <__alt_data_end+0xf800cf08>
1000da14:	d8c02303 	ldbu	r3,140(sp)
1000da18:	d8c01d85 	stb	r3,118(sp)
1000da1c:	003d1d06 	br	1000ce94 <__alt_data_end+0xf800ce94>
1000da20:	d8c02303 	ldbu	r3,140(sp)
1000da24:	d8c01d85 	stb	r3,118(sp)
1000da28:	003d0306 	br	1000ce38 <__alt_data_end+0xf800ce38>

1000da2c <__vfiprintf_internal>:
1000da2c:	00840074 	movhi	r2,4097
1000da30:	109e1a04 	addi	r2,r2,30824
1000da34:	300f883a 	mov	r7,r6
1000da38:	280d883a 	mov	r6,r5
1000da3c:	200b883a 	mov	r5,r4
1000da40:	11000017 	ldw	r4,0(r2)
1000da44:	000c5201 	jmpi	1000c520 <___vfiprintf_internal_r>

1000da48 <__sbprintf>:
1000da48:	2880030b 	ldhu	r2,12(r5)
1000da4c:	2ac01917 	ldw	r11,100(r5)
1000da50:	2a80038b 	ldhu	r10,14(r5)
1000da54:	2a400717 	ldw	r9,28(r5)
1000da58:	2a000917 	ldw	r8,36(r5)
1000da5c:	defee204 	addi	sp,sp,-1144
1000da60:	00c10004 	movi	r3,1024
1000da64:	dc011a15 	stw	r16,1128(sp)
1000da68:	10bfff4c 	andi	r2,r2,65533
1000da6c:	2821883a 	mov	r16,r5
1000da70:	d8cb883a 	add	r5,sp,r3
1000da74:	dc811c15 	stw	r18,1136(sp)
1000da78:	dc411b15 	stw	r17,1132(sp)
1000da7c:	dfc11d15 	stw	ra,1140(sp)
1000da80:	2025883a 	mov	r18,r4
1000da84:	d881030d 	sth	r2,1036(sp)
1000da88:	dac11915 	stw	r11,1124(sp)
1000da8c:	da81038d 	sth	r10,1038(sp)
1000da90:	da410715 	stw	r9,1052(sp)
1000da94:	da010915 	stw	r8,1060(sp)
1000da98:	dec10015 	stw	sp,1024(sp)
1000da9c:	dec10415 	stw	sp,1040(sp)
1000daa0:	d8c10215 	stw	r3,1032(sp)
1000daa4:	d8c10515 	stw	r3,1044(sp)
1000daa8:	d8010615 	stw	zero,1048(sp)
1000daac:	000c5200 	call	1000c520 <___vfiprintf_internal_r>
1000dab0:	1023883a 	mov	r17,r2
1000dab4:	10000416 	blt	r2,zero,1000dac8 <__sbprintf+0x80>
1000dab8:	d9410004 	addi	r5,sp,1024
1000dabc:	9009883a 	mov	r4,r18
1000dac0:	0008cfc0 	call	10008cfc <_fflush_r>
1000dac4:	10000d1e 	bne	r2,zero,1000dafc <__sbprintf+0xb4>
1000dac8:	d881030b 	ldhu	r2,1036(sp)
1000dacc:	1080100c 	andi	r2,r2,64
1000dad0:	10000326 	beq	r2,zero,1000dae0 <__sbprintf+0x98>
1000dad4:	8080030b 	ldhu	r2,12(r16)
1000dad8:	10801014 	ori	r2,r2,64
1000dadc:	8080030d 	sth	r2,12(r16)
1000dae0:	8805883a 	mov	r2,r17
1000dae4:	dfc11d17 	ldw	ra,1140(sp)
1000dae8:	dc811c17 	ldw	r18,1136(sp)
1000daec:	dc411b17 	ldw	r17,1132(sp)
1000daf0:	dc011a17 	ldw	r16,1128(sp)
1000daf4:	dec11e04 	addi	sp,sp,1144
1000daf8:	f800283a 	ret
1000dafc:	047fffc4 	movi	r17,-1
1000db00:	003ff106 	br	1000dac8 <__alt_data_end+0xf800dac8>

1000db04 <_write_r>:
1000db04:	defffd04 	addi	sp,sp,-12
1000db08:	2805883a 	mov	r2,r5
1000db0c:	dc000015 	stw	r16,0(sp)
1000db10:	040400b4 	movhi	r16,4098
1000db14:	dc400115 	stw	r17,4(sp)
1000db18:	300b883a 	mov	r5,r6
1000db1c:	8428a604 	addi	r16,r16,-23912
1000db20:	2023883a 	mov	r17,r4
1000db24:	380d883a 	mov	r6,r7
1000db28:	1009883a 	mov	r4,r2
1000db2c:	dfc00215 	stw	ra,8(sp)
1000db30:	80000015 	stw	zero,0(r16)
1000db34:	001232c0 	call	1001232c <write>
1000db38:	00ffffc4 	movi	r3,-1
1000db3c:	10c00526 	beq	r2,r3,1000db54 <_write_r+0x50>
1000db40:	dfc00217 	ldw	ra,8(sp)
1000db44:	dc400117 	ldw	r17,4(sp)
1000db48:	dc000017 	ldw	r16,0(sp)
1000db4c:	dec00304 	addi	sp,sp,12
1000db50:	f800283a 	ret
1000db54:	80c00017 	ldw	r3,0(r16)
1000db58:	183ff926 	beq	r3,zero,1000db40 <__alt_data_end+0xf800db40>
1000db5c:	88c00015 	stw	r3,0(r17)
1000db60:	003ff706 	br	1000db40 <__alt_data_end+0xf800db40>

1000db64 <_close_r>:
1000db64:	defffd04 	addi	sp,sp,-12
1000db68:	dc000015 	stw	r16,0(sp)
1000db6c:	040400b4 	movhi	r16,4098
1000db70:	dc400115 	stw	r17,4(sp)
1000db74:	8428a604 	addi	r16,r16,-23912
1000db78:	2023883a 	mov	r17,r4
1000db7c:	2809883a 	mov	r4,r5
1000db80:	dfc00215 	stw	ra,8(sp)
1000db84:	80000015 	stw	zero,0(r16)
1000db88:	0011aa40 	call	10011aa4 <close>
1000db8c:	00ffffc4 	movi	r3,-1
1000db90:	10c00526 	beq	r2,r3,1000dba8 <_close_r+0x44>
1000db94:	dfc00217 	ldw	ra,8(sp)
1000db98:	dc400117 	ldw	r17,4(sp)
1000db9c:	dc000017 	ldw	r16,0(sp)
1000dba0:	dec00304 	addi	sp,sp,12
1000dba4:	f800283a 	ret
1000dba8:	80c00017 	ldw	r3,0(r16)
1000dbac:	183ff926 	beq	r3,zero,1000db94 <__alt_data_end+0xf800db94>
1000dbb0:	88c00015 	stw	r3,0(r17)
1000dbb4:	003ff706 	br	1000db94 <__alt_data_end+0xf800db94>

1000dbb8 <_calloc_r>:
1000dbb8:	defffe04 	addi	sp,sp,-8
1000dbbc:	2805883a 	mov	r2,r5
1000dbc0:	dc000015 	stw	r16,0(sp)
1000dbc4:	300b883a 	mov	r5,r6
1000dbc8:	2021883a 	mov	r16,r4
1000dbcc:	1009883a 	mov	r4,r2
1000dbd0:	dfc00115 	stw	ra,4(sp)
1000dbd4:	0004b280 	call	10004b28 <__mulsi3>
1000dbd8:	100b883a 	mov	r5,r2
1000dbdc:	8009883a 	mov	r4,r16
1000dbe0:	0009e540 	call	10009e54 <_malloc_r>
1000dbe4:	10002926 	beq	r2,zero,1000dc8c <_calloc_r+0xd4>
1000dbe8:	11bfff17 	ldw	r6,-4(r2)
1000dbec:	1021883a 	mov	r16,r2
1000dbf0:	00bfff04 	movi	r2,-4
1000dbf4:	308c703a 	and	r6,r6,r2
1000dbf8:	00c00904 	movi	r3,36
1000dbfc:	308d883a 	add	r6,r6,r2
1000dc00:	19801636 	bltu	r3,r6,1000dc5c <_calloc_r+0xa4>
1000dc04:	008004c4 	movi	r2,19
1000dc08:	11800b2e 	bgeu	r2,r6,1000dc38 <_calloc_r+0x80>
1000dc0c:	80000015 	stw	zero,0(r16)
1000dc10:	80000115 	stw	zero,4(r16)
1000dc14:	008006c4 	movi	r2,27
1000dc18:	11801a2e 	bgeu	r2,r6,1000dc84 <_calloc_r+0xcc>
1000dc1c:	80000215 	stw	zero,8(r16)
1000dc20:	80000315 	stw	zero,12(r16)
1000dc24:	30c0151e 	bne	r6,r3,1000dc7c <_calloc_r+0xc4>
1000dc28:	80000415 	stw	zero,16(r16)
1000dc2c:	80800604 	addi	r2,r16,24
1000dc30:	80000515 	stw	zero,20(r16)
1000dc34:	00000106 	br	1000dc3c <_calloc_r+0x84>
1000dc38:	8005883a 	mov	r2,r16
1000dc3c:	10000015 	stw	zero,0(r2)
1000dc40:	10000115 	stw	zero,4(r2)
1000dc44:	10000215 	stw	zero,8(r2)
1000dc48:	8005883a 	mov	r2,r16
1000dc4c:	dfc00117 	ldw	ra,4(sp)
1000dc50:	dc000017 	ldw	r16,0(sp)
1000dc54:	dec00204 	addi	sp,sp,8
1000dc58:	f800283a 	ret
1000dc5c:	000b883a 	mov	r5,zero
1000dc60:	8009883a 	mov	r4,r16
1000dc64:	000a9e80 	call	1000a9e8 <memset>
1000dc68:	8005883a 	mov	r2,r16
1000dc6c:	dfc00117 	ldw	ra,4(sp)
1000dc70:	dc000017 	ldw	r16,0(sp)
1000dc74:	dec00204 	addi	sp,sp,8
1000dc78:	f800283a 	ret
1000dc7c:	80800404 	addi	r2,r16,16
1000dc80:	003fee06 	br	1000dc3c <__alt_data_end+0xf800dc3c>
1000dc84:	80800204 	addi	r2,r16,8
1000dc88:	003fec06 	br	1000dc3c <__alt_data_end+0xf800dc3c>
1000dc8c:	0005883a 	mov	r2,zero
1000dc90:	003fee06 	br	1000dc4c <__alt_data_end+0xf800dc4c>

1000dc94 <_fclose_r>:
1000dc94:	28003926 	beq	r5,zero,1000dd7c <_fclose_r+0xe8>
1000dc98:	defffc04 	addi	sp,sp,-16
1000dc9c:	dc400115 	stw	r17,4(sp)
1000dca0:	dc000015 	stw	r16,0(sp)
1000dca4:	dfc00315 	stw	ra,12(sp)
1000dca8:	dc800215 	stw	r18,8(sp)
1000dcac:	2023883a 	mov	r17,r4
1000dcb0:	2821883a 	mov	r16,r5
1000dcb4:	20000226 	beq	r4,zero,1000dcc0 <_fclose_r+0x2c>
1000dcb8:	20800e17 	ldw	r2,56(r4)
1000dcbc:	10002726 	beq	r2,zero,1000dd5c <_fclose_r+0xc8>
1000dcc0:	8080030f 	ldh	r2,12(r16)
1000dcc4:	1000071e 	bne	r2,zero,1000dce4 <_fclose_r+0x50>
1000dcc8:	0005883a 	mov	r2,zero
1000dccc:	dfc00317 	ldw	ra,12(sp)
1000dcd0:	dc800217 	ldw	r18,8(sp)
1000dcd4:	dc400117 	ldw	r17,4(sp)
1000dcd8:	dc000017 	ldw	r16,0(sp)
1000dcdc:	dec00404 	addi	sp,sp,16
1000dce0:	f800283a 	ret
1000dce4:	800b883a 	mov	r5,r16
1000dce8:	8809883a 	mov	r4,r17
1000dcec:	0008ae00 	call	10008ae0 <__sflush_r>
1000dcf0:	1025883a 	mov	r18,r2
1000dcf4:	80800b17 	ldw	r2,44(r16)
1000dcf8:	10000426 	beq	r2,zero,1000dd0c <_fclose_r+0x78>
1000dcfc:	81400717 	ldw	r5,28(r16)
1000dd00:	8809883a 	mov	r4,r17
1000dd04:	103ee83a 	callr	r2
1000dd08:	10001616 	blt	r2,zero,1000dd64 <_fclose_r+0xd0>
1000dd0c:	8080030b 	ldhu	r2,12(r16)
1000dd10:	1080200c 	andi	r2,r2,128
1000dd14:	1000151e 	bne	r2,zero,1000dd6c <_fclose_r+0xd8>
1000dd18:	81400c17 	ldw	r5,48(r16)
1000dd1c:	28000526 	beq	r5,zero,1000dd34 <_fclose_r+0xa0>
1000dd20:	80801004 	addi	r2,r16,64
1000dd24:	28800226 	beq	r5,r2,1000dd30 <_fclose_r+0x9c>
1000dd28:	8809883a 	mov	r4,r17
1000dd2c:	000925c0 	call	1000925c <_free_r>
1000dd30:	80000c15 	stw	zero,48(r16)
1000dd34:	81401117 	ldw	r5,68(r16)
1000dd38:	28000326 	beq	r5,zero,1000dd48 <_fclose_r+0xb4>
1000dd3c:	8809883a 	mov	r4,r17
1000dd40:	000925c0 	call	1000925c <_free_r>
1000dd44:	80001115 	stw	zero,68(r16)
1000dd48:	00090f80 	call	100090f8 <__sfp_lock_acquire>
1000dd4c:	8000030d 	sth	zero,12(r16)
1000dd50:	00090fc0 	call	100090fc <__sfp_lock_release>
1000dd54:	9005883a 	mov	r2,r18
1000dd58:	003fdc06 	br	1000dccc <__alt_data_end+0xf800dccc>
1000dd5c:	00090e80 	call	100090e8 <__sinit>
1000dd60:	003fd706 	br	1000dcc0 <__alt_data_end+0xf800dcc0>
1000dd64:	04bfffc4 	movi	r18,-1
1000dd68:	003fe806 	br	1000dd0c <__alt_data_end+0xf800dd0c>
1000dd6c:	81400417 	ldw	r5,16(r16)
1000dd70:	8809883a 	mov	r4,r17
1000dd74:	000925c0 	call	1000925c <_free_r>
1000dd78:	003fe706 	br	1000dd18 <__alt_data_end+0xf800dd18>
1000dd7c:	0005883a 	mov	r2,zero
1000dd80:	f800283a 	ret

1000dd84 <fclose>:
1000dd84:	00840074 	movhi	r2,4097
1000dd88:	109e1a04 	addi	r2,r2,30824
1000dd8c:	200b883a 	mov	r5,r4
1000dd90:	11000017 	ldw	r4,0(r2)
1000dd94:	000dc941 	jmpi	1000dc94 <_fclose_r>

1000dd98 <__fputwc>:
1000dd98:	defff804 	addi	sp,sp,-32
1000dd9c:	dcc00415 	stw	r19,16(sp)
1000dda0:	dc800315 	stw	r18,12(sp)
1000dda4:	dc000115 	stw	r16,4(sp)
1000dda8:	dfc00715 	stw	ra,28(sp)
1000ddac:	dd400615 	stw	r21,24(sp)
1000ddb0:	dd000515 	stw	r20,20(sp)
1000ddb4:	dc400215 	stw	r17,8(sp)
1000ddb8:	2027883a 	mov	r19,r4
1000ddbc:	2825883a 	mov	r18,r5
1000ddc0:	3021883a 	mov	r16,r6
1000ddc4:	0009c440 	call	10009c44 <__locale_mb_cur_max>
1000ddc8:	00c00044 	movi	r3,1
1000ddcc:	10c03e26 	beq	r2,r3,1000dec8 <__fputwc+0x130>
1000ddd0:	81c01704 	addi	r7,r16,92
1000ddd4:	900d883a 	mov	r6,r18
1000ddd8:	d80b883a 	mov	r5,sp
1000dddc:	9809883a 	mov	r4,r19
1000dde0:	000e2680 	call	1000e268 <_wcrtomb_r>
1000dde4:	1029883a 	mov	r20,r2
1000dde8:	00bfffc4 	movi	r2,-1
1000ddec:	a0802026 	beq	r20,r2,1000de70 <__fputwc+0xd8>
1000ddf0:	d9400003 	ldbu	r5,0(sp)
1000ddf4:	a0001c26 	beq	r20,zero,1000de68 <__fputwc+0xd0>
1000ddf8:	0023883a 	mov	r17,zero
1000ddfc:	05400284 	movi	r21,10
1000de00:	00000906 	br	1000de28 <__fputwc+0x90>
1000de04:	80800017 	ldw	r2,0(r16)
1000de08:	11400005 	stb	r5,0(r2)
1000de0c:	80c00017 	ldw	r3,0(r16)
1000de10:	18c00044 	addi	r3,r3,1
1000de14:	80c00015 	stw	r3,0(r16)
1000de18:	8c400044 	addi	r17,r17,1
1000de1c:	dc45883a 	add	r2,sp,r17
1000de20:	8d00112e 	bgeu	r17,r20,1000de68 <__fputwc+0xd0>
1000de24:	11400003 	ldbu	r5,0(r2)
1000de28:	80c00217 	ldw	r3,8(r16)
1000de2c:	18ffffc4 	addi	r3,r3,-1
1000de30:	80c00215 	stw	r3,8(r16)
1000de34:	183ff30e 	bge	r3,zero,1000de04 <__alt_data_end+0xf800de04>
1000de38:	80800617 	ldw	r2,24(r16)
1000de3c:	18801916 	blt	r3,r2,1000dea4 <__fputwc+0x10c>
1000de40:	80800017 	ldw	r2,0(r16)
1000de44:	11400005 	stb	r5,0(r2)
1000de48:	80800017 	ldw	r2,0(r16)
1000de4c:	10c00003 	ldbu	r3,0(r2)
1000de50:	10800044 	addi	r2,r2,1
1000de54:	1d402326 	beq	r3,r21,1000dee4 <__fputwc+0x14c>
1000de58:	80800015 	stw	r2,0(r16)
1000de5c:	8c400044 	addi	r17,r17,1
1000de60:	dc45883a 	add	r2,sp,r17
1000de64:	8d3fef36 	bltu	r17,r20,1000de24 <__alt_data_end+0xf800de24>
1000de68:	9005883a 	mov	r2,r18
1000de6c:	00000406 	br	1000de80 <__fputwc+0xe8>
1000de70:	80c0030b 	ldhu	r3,12(r16)
1000de74:	a005883a 	mov	r2,r20
1000de78:	18c01014 	ori	r3,r3,64
1000de7c:	80c0030d 	sth	r3,12(r16)
1000de80:	dfc00717 	ldw	ra,28(sp)
1000de84:	dd400617 	ldw	r21,24(sp)
1000de88:	dd000517 	ldw	r20,20(sp)
1000de8c:	dcc00417 	ldw	r19,16(sp)
1000de90:	dc800317 	ldw	r18,12(sp)
1000de94:	dc400217 	ldw	r17,8(sp)
1000de98:	dc000117 	ldw	r16,4(sp)
1000de9c:	dec00804 	addi	sp,sp,32
1000dea0:	f800283a 	ret
1000dea4:	800d883a 	mov	r6,r16
1000dea8:	29403fcc 	andi	r5,r5,255
1000deac:	9809883a 	mov	r4,r19
1000deb0:	000e1100 	call	1000e110 <__swbuf_r>
1000deb4:	10bfffe0 	cmpeqi	r2,r2,-1
1000deb8:	10803fcc 	andi	r2,r2,255
1000debc:	103fd626 	beq	r2,zero,1000de18 <__alt_data_end+0xf800de18>
1000dec0:	00bfffc4 	movi	r2,-1
1000dec4:	003fee06 	br	1000de80 <__alt_data_end+0xf800de80>
1000dec8:	90ffffc4 	addi	r3,r18,-1
1000decc:	01003f84 	movi	r4,254
1000ded0:	20ffbf36 	bltu	r4,r3,1000ddd0 <__alt_data_end+0xf800ddd0>
1000ded4:	900b883a 	mov	r5,r18
1000ded8:	dc800005 	stb	r18,0(sp)
1000dedc:	1029883a 	mov	r20,r2
1000dee0:	003fc506 	br	1000ddf8 <__alt_data_end+0xf800ddf8>
1000dee4:	800d883a 	mov	r6,r16
1000dee8:	a80b883a 	mov	r5,r21
1000deec:	9809883a 	mov	r4,r19
1000def0:	000e1100 	call	1000e110 <__swbuf_r>
1000def4:	10bfffe0 	cmpeqi	r2,r2,-1
1000def8:	003fef06 	br	1000deb8 <__alt_data_end+0xf800deb8>

1000defc <_fputwc_r>:
1000defc:	3080030b 	ldhu	r2,12(r6)
1000df00:	10c8000c 	andi	r3,r2,8192
1000df04:	1800051e 	bne	r3,zero,1000df1c <_fputwc_r+0x20>
1000df08:	30c01917 	ldw	r3,100(r6)
1000df0c:	10880014 	ori	r2,r2,8192
1000df10:	3080030d 	sth	r2,12(r6)
1000df14:	18880014 	ori	r2,r3,8192
1000df18:	30801915 	stw	r2,100(r6)
1000df1c:	000dd981 	jmpi	1000dd98 <__fputwc>

1000df20 <fputwc>:
1000df20:	00840074 	movhi	r2,4097
1000df24:	defffc04 	addi	sp,sp,-16
1000df28:	109e1a04 	addi	r2,r2,30824
1000df2c:	dc000115 	stw	r16,4(sp)
1000df30:	14000017 	ldw	r16,0(r2)
1000df34:	dc400215 	stw	r17,8(sp)
1000df38:	dfc00315 	stw	ra,12(sp)
1000df3c:	2023883a 	mov	r17,r4
1000df40:	80000226 	beq	r16,zero,1000df4c <fputwc+0x2c>
1000df44:	80800e17 	ldw	r2,56(r16)
1000df48:	10001026 	beq	r2,zero,1000df8c <fputwc+0x6c>
1000df4c:	2880030b 	ldhu	r2,12(r5)
1000df50:	10c8000c 	andi	r3,r2,8192
1000df54:	1800051e 	bne	r3,zero,1000df6c <fputwc+0x4c>
1000df58:	28c01917 	ldw	r3,100(r5)
1000df5c:	10880014 	ori	r2,r2,8192
1000df60:	2880030d 	sth	r2,12(r5)
1000df64:	18880014 	ori	r2,r3,8192
1000df68:	28801915 	stw	r2,100(r5)
1000df6c:	280d883a 	mov	r6,r5
1000df70:	8009883a 	mov	r4,r16
1000df74:	880b883a 	mov	r5,r17
1000df78:	dfc00317 	ldw	ra,12(sp)
1000df7c:	dc400217 	ldw	r17,8(sp)
1000df80:	dc000117 	ldw	r16,4(sp)
1000df84:	dec00404 	addi	sp,sp,16
1000df88:	000dd981 	jmpi	1000dd98 <__fputwc>
1000df8c:	8009883a 	mov	r4,r16
1000df90:	d9400015 	stw	r5,0(sp)
1000df94:	00090e80 	call	100090e8 <__sinit>
1000df98:	d9400017 	ldw	r5,0(sp)
1000df9c:	003feb06 	br	1000df4c <__alt_data_end+0xf800df4c>

1000dfa0 <_fstat_r>:
1000dfa0:	defffd04 	addi	sp,sp,-12
1000dfa4:	2805883a 	mov	r2,r5
1000dfa8:	dc000015 	stw	r16,0(sp)
1000dfac:	040400b4 	movhi	r16,4098
1000dfb0:	dc400115 	stw	r17,4(sp)
1000dfb4:	8428a604 	addi	r16,r16,-23912
1000dfb8:	2023883a 	mov	r17,r4
1000dfbc:	300b883a 	mov	r5,r6
1000dfc0:	1009883a 	mov	r4,r2
1000dfc4:	dfc00215 	stw	ra,8(sp)
1000dfc8:	80000015 	stw	zero,0(r16)
1000dfcc:	0011be40 	call	10011be4 <fstat>
1000dfd0:	00ffffc4 	movi	r3,-1
1000dfd4:	10c00526 	beq	r2,r3,1000dfec <_fstat_r+0x4c>
1000dfd8:	dfc00217 	ldw	ra,8(sp)
1000dfdc:	dc400117 	ldw	r17,4(sp)
1000dfe0:	dc000017 	ldw	r16,0(sp)
1000dfe4:	dec00304 	addi	sp,sp,12
1000dfe8:	f800283a 	ret
1000dfec:	80c00017 	ldw	r3,0(r16)
1000dff0:	183ff926 	beq	r3,zero,1000dfd8 <__alt_data_end+0xf800dfd8>
1000dff4:	88c00015 	stw	r3,0(r17)
1000dff8:	003ff706 	br	1000dfd8 <__alt_data_end+0xf800dfd8>

1000dffc <_isatty_r>:
1000dffc:	defffd04 	addi	sp,sp,-12
1000e000:	dc000015 	stw	r16,0(sp)
1000e004:	040400b4 	movhi	r16,4098
1000e008:	dc400115 	stw	r17,4(sp)
1000e00c:	8428a604 	addi	r16,r16,-23912
1000e010:	2023883a 	mov	r17,r4
1000e014:	2809883a 	mov	r4,r5
1000e018:	dfc00215 	stw	ra,8(sp)
1000e01c:	80000015 	stw	zero,0(r16)
1000e020:	0011cd80 	call	10011cd8 <isatty>
1000e024:	00ffffc4 	movi	r3,-1
1000e028:	10c00526 	beq	r2,r3,1000e040 <_isatty_r+0x44>
1000e02c:	dfc00217 	ldw	ra,8(sp)
1000e030:	dc400117 	ldw	r17,4(sp)
1000e034:	dc000017 	ldw	r16,0(sp)
1000e038:	dec00304 	addi	sp,sp,12
1000e03c:	f800283a 	ret
1000e040:	80c00017 	ldw	r3,0(r16)
1000e044:	183ff926 	beq	r3,zero,1000e02c <__alt_data_end+0xf800e02c>
1000e048:	88c00015 	stw	r3,0(r17)
1000e04c:	003ff706 	br	1000e02c <__alt_data_end+0xf800e02c>

1000e050 <_lseek_r>:
1000e050:	defffd04 	addi	sp,sp,-12
1000e054:	2805883a 	mov	r2,r5
1000e058:	dc000015 	stw	r16,0(sp)
1000e05c:	040400b4 	movhi	r16,4098
1000e060:	dc400115 	stw	r17,4(sp)
1000e064:	300b883a 	mov	r5,r6
1000e068:	8428a604 	addi	r16,r16,-23912
1000e06c:	2023883a 	mov	r17,r4
1000e070:	380d883a 	mov	r6,r7
1000e074:	1009883a 	mov	r4,r2
1000e078:	dfc00215 	stw	ra,8(sp)
1000e07c:	80000015 	stw	zero,0(r16)
1000e080:	0011eac0 	call	10011eac <lseek>
1000e084:	00ffffc4 	movi	r3,-1
1000e088:	10c00526 	beq	r2,r3,1000e0a0 <_lseek_r+0x50>
1000e08c:	dfc00217 	ldw	ra,8(sp)
1000e090:	dc400117 	ldw	r17,4(sp)
1000e094:	dc000017 	ldw	r16,0(sp)
1000e098:	dec00304 	addi	sp,sp,12
1000e09c:	f800283a 	ret
1000e0a0:	80c00017 	ldw	r3,0(r16)
1000e0a4:	183ff926 	beq	r3,zero,1000e08c <__alt_data_end+0xf800e08c>
1000e0a8:	88c00015 	stw	r3,0(r17)
1000e0ac:	003ff706 	br	1000e08c <__alt_data_end+0xf800e08c>

1000e0b0 <_read_r>:
1000e0b0:	defffd04 	addi	sp,sp,-12
1000e0b4:	2805883a 	mov	r2,r5
1000e0b8:	dc000015 	stw	r16,0(sp)
1000e0bc:	040400b4 	movhi	r16,4098
1000e0c0:	dc400115 	stw	r17,4(sp)
1000e0c4:	300b883a 	mov	r5,r6
1000e0c8:	8428a604 	addi	r16,r16,-23912
1000e0cc:	2023883a 	mov	r17,r4
1000e0d0:	380d883a 	mov	r6,r7
1000e0d4:	1009883a 	mov	r4,r2
1000e0d8:	dfc00215 	stw	ra,8(sp)
1000e0dc:	80000015 	stw	zero,0(r16)
1000e0e0:	00120880 	call	10012088 <read>
1000e0e4:	00ffffc4 	movi	r3,-1
1000e0e8:	10c00526 	beq	r2,r3,1000e100 <_read_r+0x50>
1000e0ec:	dfc00217 	ldw	ra,8(sp)
1000e0f0:	dc400117 	ldw	r17,4(sp)
1000e0f4:	dc000017 	ldw	r16,0(sp)
1000e0f8:	dec00304 	addi	sp,sp,12
1000e0fc:	f800283a 	ret
1000e100:	80c00017 	ldw	r3,0(r16)
1000e104:	183ff926 	beq	r3,zero,1000e0ec <__alt_data_end+0xf800e0ec>
1000e108:	88c00015 	stw	r3,0(r17)
1000e10c:	003ff706 	br	1000e0ec <__alt_data_end+0xf800e0ec>

1000e110 <__swbuf_r>:
1000e110:	defffb04 	addi	sp,sp,-20
1000e114:	dcc00315 	stw	r19,12(sp)
1000e118:	dc800215 	stw	r18,8(sp)
1000e11c:	dc000015 	stw	r16,0(sp)
1000e120:	dfc00415 	stw	ra,16(sp)
1000e124:	dc400115 	stw	r17,4(sp)
1000e128:	2025883a 	mov	r18,r4
1000e12c:	2827883a 	mov	r19,r5
1000e130:	3021883a 	mov	r16,r6
1000e134:	20000226 	beq	r4,zero,1000e140 <__swbuf_r+0x30>
1000e138:	20800e17 	ldw	r2,56(r4)
1000e13c:	10004226 	beq	r2,zero,1000e248 <__swbuf_r+0x138>
1000e140:	80800617 	ldw	r2,24(r16)
1000e144:	8100030b 	ldhu	r4,12(r16)
1000e148:	80800215 	stw	r2,8(r16)
1000e14c:	2080020c 	andi	r2,r4,8
1000e150:	10003626 	beq	r2,zero,1000e22c <__swbuf_r+0x11c>
1000e154:	80c00417 	ldw	r3,16(r16)
1000e158:	18003426 	beq	r3,zero,1000e22c <__swbuf_r+0x11c>
1000e15c:	2088000c 	andi	r2,r4,8192
1000e160:	9c403fcc 	andi	r17,r19,255
1000e164:	10001a26 	beq	r2,zero,1000e1d0 <__swbuf_r+0xc0>
1000e168:	80800017 	ldw	r2,0(r16)
1000e16c:	81000517 	ldw	r4,20(r16)
1000e170:	10c7c83a 	sub	r3,r2,r3
1000e174:	1900200e 	bge	r3,r4,1000e1f8 <__swbuf_r+0xe8>
1000e178:	18c00044 	addi	r3,r3,1
1000e17c:	81000217 	ldw	r4,8(r16)
1000e180:	11400044 	addi	r5,r2,1
1000e184:	81400015 	stw	r5,0(r16)
1000e188:	213fffc4 	addi	r4,r4,-1
1000e18c:	81000215 	stw	r4,8(r16)
1000e190:	14c00005 	stb	r19,0(r2)
1000e194:	80800517 	ldw	r2,20(r16)
1000e198:	10c01e26 	beq	r2,r3,1000e214 <__swbuf_r+0x104>
1000e19c:	8080030b 	ldhu	r2,12(r16)
1000e1a0:	1080004c 	andi	r2,r2,1
1000e1a4:	10000226 	beq	r2,zero,1000e1b0 <__swbuf_r+0xa0>
1000e1a8:	00800284 	movi	r2,10
1000e1ac:	88801926 	beq	r17,r2,1000e214 <__swbuf_r+0x104>
1000e1b0:	8805883a 	mov	r2,r17
1000e1b4:	dfc00417 	ldw	ra,16(sp)
1000e1b8:	dcc00317 	ldw	r19,12(sp)
1000e1bc:	dc800217 	ldw	r18,8(sp)
1000e1c0:	dc400117 	ldw	r17,4(sp)
1000e1c4:	dc000017 	ldw	r16,0(sp)
1000e1c8:	dec00504 	addi	sp,sp,20
1000e1cc:	f800283a 	ret
1000e1d0:	81401917 	ldw	r5,100(r16)
1000e1d4:	00b7ffc4 	movi	r2,-8193
1000e1d8:	21080014 	ori	r4,r4,8192
1000e1dc:	2884703a 	and	r2,r5,r2
1000e1e0:	80801915 	stw	r2,100(r16)
1000e1e4:	80800017 	ldw	r2,0(r16)
1000e1e8:	8100030d 	sth	r4,12(r16)
1000e1ec:	81000517 	ldw	r4,20(r16)
1000e1f0:	10c7c83a 	sub	r3,r2,r3
1000e1f4:	193fe016 	blt	r3,r4,1000e178 <__alt_data_end+0xf800e178>
1000e1f8:	800b883a 	mov	r5,r16
1000e1fc:	9009883a 	mov	r4,r18
1000e200:	0008cfc0 	call	10008cfc <_fflush_r>
1000e204:	1000071e 	bne	r2,zero,1000e224 <__swbuf_r+0x114>
1000e208:	80800017 	ldw	r2,0(r16)
1000e20c:	00c00044 	movi	r3,1
1000e210:	003fda06 	br	1000e17c <__alt_data_end+0xf800e17c>
1000e214:	800b883a 	mov	r5,r16
1000e218:	9009883a 	mov	r4,r18
1000e21c:	0008cfc0 	call	10008cfc <_fflush_r>
1000e220:	103fe326 	beq	r2,zero,1000e1b0 <__alt_data_end+0xf800e1b0>
1000e224:	00bfffc4 	movi	r2,-1
1000e228:	003fe206 	br	1000e1b4 <__alt_data_end+0xf800e1b4>
1000e22c:	800b883a 	mov	r5,r16
1000e230:	9009883a 	mov	r4,r18
1000e234:	00070dc0 	call	100070dc <__swsetup_r>
1000e238:	103ffa1e 	bne	r2,zero,1000e224 <__alt_data_end+0xf800e224>
1000e23c:	8100030b 	ldhu	r4,12(r16)
1000e240:	80c00417 	ldw	r3,16(r16)
1000e244:	003fc506 	br	1000e15c <__alt_data_end+0xf800e15c>
1000e248:	00090e80 	call	100090e8 <__sinit>
1000e24c:	003fbc06 	br	1000e140 <__alt_data_end+0xf800e140>

1000e250 <__swbuf>:
1000e250:	00840074 	movhi	r2,4097
1000e254:	109e1a04 	addi	r2,r2,30824
1000e258:	280d883a 	mov	r6,r5
1000e25c:	200b883a 	mov	r5,r4
1000e260:	11000017 	ldw	r4,0(r2)
1000e264:	000e1101 	jmpi	1000e110 <__swbuf_r>

1000e268 <_wcrtomb_r>:
1000e268:	defff604 	addi	sp,sp,-40
1000e26c:	00840074 	movhi	r2,4097
1000e270:	dc800815 	stw	r18,32(sp)
1000e274:	dc400715 	stw	r17,28(sp)
1000e278:	dc000615 	stw	r16,24(sp)
1000e27c:	109e1e04 	addi	r2,r2,30840
1000e280:	dfc00915 	stw	ra,36(sp)
1000e284:	2021883a 	mov	r16,r4
1000e288:	3823883a 	mov	r17,r7
1000e28c:	14800017 	ldw	r18,0(r2)
1000e290:	28001426 	beq	r5,zero,1000e2e4 <_wcrtomb_r+0x7c>
1000e294:	d9400415 	stw	r5,16(sp)
1000e298:	d9800515 	stw	r6,20(sp)
1000e29c:	0009c380 	call	10009c38 <__locale_charset>
1000e2a0:	d9800517 	ldw	r6,20(sp)
1000e2a4:	d9400417 	ldw	r5,16(sp)
1000e2a8:	100f883a 	mov	r7,r2
1000e2ac:	dc400015 	stw	r17,0(sp)
1000e2b0:	8009883a 	mov	r4,r16
1000e2b4:	903ee83a 	callr	r18
1000e2b8:	00ffffc4 	movi	r3,-1
1000e2bc:	10c0031e 	bne	r2,r3,1000e2cc <_wcrtomb_r+0x64>
1000e2c0:	88000015 	stw	zero,0(r17)
1000e2c4:	00c02284 	movi	r3,138
1000e2c8:	80c00015 	stw	r3,0(r16)
1000e2cc:	dfc00917 	ldw	ra,36(sp)
1000e2d0:	dc800817 	ldw	r18,32(sp)
1000e2d4:	dc400717 	ldw	r17,28(sp)
1000e2d8:	dc000617 	ldw	r16,24(sp)
1000e2dc:	dec00a04 	addi	sp,sp,40
1000e2e0:	f800283a 	ret
1000e2e4:	0009c380 	call	10009c38 <__locale_charset>
1000e2e8:	100f883a 	mov	r7,r2
1000e2ec:	dc400015 	stw	r17,0(sp)
1000e2f0:	000d883a 	mov	r6,zero
1000e2f4:	d9400104 	addi	r5,sp,4
1000e2f8:	8009883a 	mov	r4,r16
1000e2fc:	903ee83a 	callr	r18
1000e300:	003fed06 	br	1000e2b8 <__alt_data_end+0xf800e2b8>

1000e304 <wcrtomb>:
1000e304:	defff604 	addi	sp,sp,-40
1000e308:	00840074 	movhi	r2,4097
1000e30c:	dc800615 	stw	r18,24(sp)
1000e310:	dc400515 	stw	r17,20(sp)
1000e314:	109e1a04 	addi	r2,r2,30824
1000e318:	dfc00915 	stw	ra,36(sp)
1000e31c:	dd000815 	stw	r20,32(sp)
1000e320:	dcc00715 	stw	r19,28(sp)
1000e324:	dc000415 	stw	r16,16(sp)
1000e328:	3025883a 	mov	r18,r6
1000e32c:	14400017 	ldw	r17,0(r2)
1000e330:	20001926 	beq	r4,zero,1000e398 <wcrtomb+0x94>
1000e334:	00840074 	movhi	r2,4097
1000e338:	109e1e04 	addi	r2,r2,30840
1000e33c:	15000017 	ldw	r20,0(r2)
1000e340:	2021883a 	mov	r16,r4
1000e344:	2827883a 	mov	r19,r5
1000e348:	0009c380 	call	10009c38 <__locale_charset>
1000e34c:	100f883a 	mov	r7,r2
1000e350:	dc800015 	stw	r18,0(sp)
1000e354:	980d883a 	mov	r6,r19
1000e358:	800b883a 	mov	r5,r16
1000e35c:	8809883a 	mov	r4,r17
1000e360:	a03ee83a 	callr	r20
1000e364:	00ffffc4 	movi	r3,-1
1000e368:	10c0031e 	bne	r2,r3,1000e378 <wcrtomb+0x74>
1000e36c:	90000015 	stw	zero,0(r18)
1000e370:	00c02284 	movi	r3,138
1000e374:	88c00015 	stw	r3,0(r17)
1000e378:	dfc00917 	ldw	ra,36(sp)
1000e37c:	dd000817 	ldw	r20,32(sp)
1000e380:	dcc00717 	ldw	r19,28(sp)
1000e384:	dc800617 	ldw	r18,24(sp)
1000e388:	dc400517 	ldw	r17,20(sp)
1000e38c:	dc000417 	ldw	r16,16(sp)
1000e390:	dec00a04 	addi	sp,sp,40
1000e394:	f800283a 	ret
1000e398:	00840074 	movhi	r2,4097
1000e39c:	109e1e04 	addi	r2,r2,30840
1000e3a0:	14000017 	ldw	r16,0(r2)
1000e3a4:	0009c380 	call	10009c38 <__locale_charset>
1000e3a8:	100f883a 	mov	r7,r2
1000e3ac:	dc800015 	stw	r18,0(sp)
1000e3b0:	000d883a 	mov	r6,zero
1000e3b4:	d9400104 	addi	r5,sp,4
1000e3b8:	8809883a 	mov	r4,r17
1000e3bc:	803ee83a 	callr	r16
1000e3c0:	003fe806 	br	1000e364 <__alt_data_end+0xf800e364>

1000e3c4 <__ascii_wctomb>:
1000e3c4:	28000526 	beq	r5,zero,1000e3dc <__ascii_wctomb+0x18>
1000e3c8:	00803fc4 	movi	r2,255
1000e3cc:	11800536 	bltu	r2,r6,1000e3e4 <__ascii_wctomb+0x20>
1000e3d0:	29800005 	stb	r6,0(r5)
1000e3d4:	00800044 	movi	r2,1
1000e3d8:	f800283a 	ret
1000e3dc:	0005883a 	mov	r2,zero
1000e3e0:	f800283a 	ret
1000e3e4:	00802284 	movi	r2,138
1000e3e8:	20800015 	stw	r2,0(r4)
1000e3ec:	00bfffc4 	movi	r2,-1
1000e3f0:	f800283a 	ret

1000e3f4 <_wctomb_r>:
1000e3f4:	00840074 	movhi	r2,4097
1000e3f8:	defff904 	addi	sp,sp,-28
1000e3fc:	109e1e04 	addi	r2,r2,30840
1000e400:	dfc00615 	stw	ra,24(sp)
1000e404:	dc400515 	stw	r17,20(sp)
1000e408:	dc000415 	stw	r16,16(sp)
1000e40c:	3823883a 	mov	r17,r7
1000e410:	14000017 	ldw	r16,0(r2)
1000e414:	d9000115 	stw	r4,4(sp)
1000e418:	d9400215 	stw	r5,8(sp)
1000e41c:	d9800315 	stw	r6,12(sp)
1000e420:	0009c380 	call	10009c38 <__locale_charset>
1000e424:	d9800317 	ldw	r6,12(sp)
1000e428:	d9400217 	ldw	r5,8(sp)
1000e42c:	d9000117 	ldw	r4,4(sp)
1000e430:	100f883a 	mov	r7,r2
1000e434:	dc400015 	stw	r17,0(sp)
1000e438:	803ee83a 	callr	r16
1000e43c:	dfc00617 	ldw	ra,24(sp)
1000e440:	dc400517 	ldw	r17,20(sp)
1000e444:	dc000417 	ldw	r16,16(sp)
1000e448:	dec00704 	addi	sp,sp,28
1000e44c:	f800283a 	ret

1000e450 <__udivdi3>:
1000e450:	defff404 	addi	sp,sp,-48
1000e454:	dcc00515 	stw	r19,20(sp)
1000e458:	dc000215 	stw	r16,8(sp)
1000e45c:	dfc00b15 	stw	ra,44(sp)
1000e460:	df000a15 	stw	fp,40(sp)
1000e464:	ddc00915 	stw	r23,36(sp)
1000e468:	dd800815 	stw	r22,32(sp)
1000e46c:	dd400715 	stw	r21,28(sp)
1000e470:	dd000615 	stw	r20,24(sp)
1000e474:	dc800415 	stw	r18,16(sp)
1000e478:	dc400315 	stw	r17,12(sp)
1000e47c:	2027883a 	mov	r19,r4
1000e480:	2821883a 	mov	r16,r5
1000e484:	3800461e 	bne	r7,zero,1000e5a0 <__udivdi3+0x150>
1000e488:	3023883a 	mov	r17,r6
1000e48c:	2025883a 	mov	r18,r4
1000e490:	2980572e 	bgeu	r5,r6,1000e5f0 <__udivdi3+0x1a0>
1000e494:	00bfffd4 	movui	r2,65535
1000e498:	282d883a 	mov	r22,r5
1000e49c:	1180b236 	bltu	r2,r6,1000e768 <__udivdi3+0x318>
1000e4a0:	00803fc4 	movi	r2,255
1000e4a4:	1185803a 	cmpltu	r2,r2,r6
1000e4a8:	100490fa 	slli	r2,r2,3
1000e4ac:	3086d83a 	srl	r3,r6,r2
1000e4b0:	01040074 	movhi	r4,4097
1000e4b4:	21136e04 	addi	r4,r4,19896
1000e4b8:	20c7883a 	add	r3,r4,r3
1000e4bc:	18c00003 	ldbu	r3,0(r3)
1000e4c0:	1885883a 	add	r2,r3,r2
1000e4c4:	00c00804 	movi	r3,32
1000e4c8:	1887c83a 	sub	r3,r3,r2
1000e4cc:	18000526 	beq	r3,zero,1000e4e4 <__udivdi3+0x94>
1000e4d0:	80e0983a 	sll	r16,r16,r3
1000e4d4:	9884d83a 	srl	r2,r19,r2
1000e4d8:	30e2983a 	sll	r17,r6,r3
1000e4dc:	98e4983a 	sll	r18,r19,r3
1000e4e0:	142cb03a 	or	r22,r2,r16
1000e4e4:	882ad43a 	srli	r21,r17,16
1000e4e8:	b009883a 	mov	r4,r22
1000e4ec:	8d3fffcc 	andi	r20,r17,65535
1000e4f0:	a80b883a 	mov	r5,r21
1000e4f4:	000f16c0 	call	1000f16c <__umodsi3>
1000e4f8:	b009883a 	mov	r4,r22
1000e4fc:	a80b883a 	mov	r5,r21
1000e500:	1027883a 	mov	r19,r2
1000e504:	000f1080 	call	1000f108 <__udivsi3>
1000e508:	100b883a 	mov	r5,r2
1000e50c:	a009883a 	mov	r4,r20
1000e510:	102d883a 	mov	r22,r2
1000e514:	0004b280 	call	10004b28 <__mulsi3>
1000e518:	9826943a 	slli	r19,r19,16
1000e51c:	9006d43a 	srli	r3,r18,16
1000e520:	1cc6b03a 	or	r3,r3,r19
1000e524:	1880052e 	bgeu	r3,r2,1000e53c <__udivdi3+0xec>
1000e528:	1c47883a 	add	r3,r3,r17
1000e52c:	b13fffc4 	addi	r4,r22,-1
1000e530:	1c400136 	bltu	r3,r17,1000e538 <__udivdi3+0xe8>
1000e534:	18814236 	bltu	r3,r2,1000ea40 <__udivdi3+0x5f0>
1000e538:	202d883a 	mov	r22,r4
1000e53c:	18a1c83a 	sub	r16,r3,r2
1000e540:	8009883a 	mov	r4,r16
1000e544:	a80b883a 	mov	r5,r21
1000e548:	000f16c0 	call	1000f16c <__umodsi3>
1000e54c:	1027883a 	mov	r19,r2
1000e550:	8009883a 	mov	r4,r16
1000e554:	a80b883a 	mov	r5,r21
1000e558:	9826943a 	slli	r19,r19,16
1000e55c:	000f1080 	call	1000f108 <__udivsi3>
1000e560:	100b883a 	mov	r5,r2
1000e564:	a009883a 	mov	r4,r20
1000e568:	94bfffcc 	andi	r18,r18,65535
1000e56c:	1021883a 	mov	r16,r2
1000e570:	94e4b03a 	or	r18,r18,r19
1000e574:	0004b280 	call	10004b28 <__mulsi3>
1000e578:	9080052e 	bgeu	r18,r2,1000e590 <__udivdi3+0x140>
1000e57c:	8ca5883a 	add	r18,r17,r18
1000e580:	80ffffc4 	addi	r3,r16,-1
1000e584:	94410c36 	bltu	r18,r17,1000e9b8 <__udivdi3+0x568>
1000e588:	90810b2e 	bgeu	r18,r2,1000e9b8 <__udivdi3+0x568>
1000e58c:	843fff84 	addi	r16,r16,-2
1000e590:	b004943a 	slli	r2,r22,16
1000e594:	0007883a 	mov	r3,zero
1000e598:	1404b03a 	or	r2,r2,r16
1000e59c:	00005e06 	br	1000e718 <__udivdi3+0x2c8>
1000e5a0:	29c05b36 	bltu	r5,r7,1000e710 <__udivdi3+0x2c0>
1000e5a4:	00bfffd4 	movui	r2,65535
1000e5a8:	11c0672e 	bgeu	r2,r7,1000e748 <__udivdi3+0x2f8>
1000e5ac:	00804034 	movhi	r2,256
1000e5b0:	10bfffc4 	addi	r2,r2,-1
1000e5b4:	11c10a36 	bltu	r2,r7,1000e9e0 <__udivdi3+0x590>
1000e5b8:	00800404 	movi	r2,16
1000e5bc:	3886d83a 	srl	r3,r7,r2
1000e5c0:	01040074 	movhi	r4,4097
1000e5c4:	21136e04 	addi	r4,r4,19896
1000e5c8:	20c7883a 	add	r3,r4,r3
1000e5cc:	18c00003 	ldbu	r3,0(r3)
1000e5d0:	05c00804 	movi	r23,32
1000e5d4:	1885883a 	add	r2,r3,r2
1000e5d8:	b8afc83a 	sub	r23,r23,r2
1000e5dc:	b800671e 	bne	r23,zero,1000e77c <__udivdi3+0x32c>
1000e5e0:	3c010536 	bltu	r7,r16,1000e9f8 <__udivdi3+0x5a8>
1000e5e4:	9985403a 	cmpgeu	r2,r19,r6
1000e5e8:	0007883a 	mov	r3,zero
1000e5ec:	00004a06 	br	1000e718 <__udivdi3+0x2c8>
1000e5f0:	3000041e 	bne	r6,zero,1000e604 <__udivdi3+0x1b4>
1000e5f4:	000b883a 	mov	r5,zero
1000e5f8:	01000044 	movi	r4,1
1000e5fc:	000f1080 	call	1000f108 <__udivsi3>
1000e600:	1023883a 	mov	r17,r2
1000e604:	00bfffd4 	movui	r2,65535
1000e608:	1440532e 	bgeu	r2,r17,1000e758 <__udivdi3+0x308>
1000e60c:	00804034 	movhi	r2,256
1000e610:	10bfffc4 	addi	r2,r2,-1
1000e614:	1440f436 	bltu	r2,r17,1000e9e8 <__udivdi3+0x598>
1000e618:	00800404 	movi	r2,16
1000e61c:	8886d83a 	srl	r3,r17,r2
1000e620:	01040074 	movhi	r4,4097
1000e624:	21136e04 	addi	r4,r4,19896
1000e628:	20c7883a 	add	r3,r4,r3
1000e62c:	18c00003 	ldbu	r3,0(r3)
1000e630:	1885883a 	add	r2,r3,r2
1000e634:	00c00804 	movi	r3,32
1000e638:	1887c83a 	sub	r3,r3,r2
1000e63c:	1800a51e 	bne	r3,zero,1000e8d4 <__udivdi3+0x484>
1000e640:	882ad43a 	srli	r21,r17,16
1000e644:	8461c83a 	sub	r16,r16,r17
1000e648:	8d3fffcc 	andi	r20,r17,65535
1000e64c:	00c00044 	movi	r3,1
1000e650:	a80b883a 	mov	r5,r21
1000e654:	8009883a 	mov	r4,r16
1000e658:	d8c00115 	stw	r3,4(sp)
1000e65c:	000f16c0 	call	1000f16c <__umodsi3>
1000e660:	a80b883a 	mov	r5,r21
1000e664:	8009883a 	mov	r4,r16
1000e668:	1027883a 	mov	r19,r2
1000e66c:	000f1080 	call	1000f108 <__udivsi3>
1000e670:	a00b883a 	mov	r5,r20
1000e674:	1009883a 	mov	r4,r2
1000e678:	102d883a 	mov	r22,r2
1000e67c:	0004b280 	call	10004b28 <__mulsi3>
1000e680:	9826943a 	slli	r19,r19,16
1000e684:	900ed43a 	srli	r7,r18,16
1000e688:	d8c00117 	ldw	r3,4(sp)
1000e68c:	3cceb03a 	or	r7,r7,r19
1000e690:	3880052e 	bgeu	r7,r2,1000e6a8 <__udivdi3+0x258>
1000e694:	3c4f883a 	add	r7,r7,r17
1000e698:	b13fffc4 	addi	r4,r22,-1
1000e69c:	3c400136 	bltu	r7,r17,1000e6a4 <__udivdi3+0x254>
1000e6a0:	3880e436 	bltu	r7,r2,1000ea34 <__udivdi3+0x5e4>
1000e6a4:	202d883a 	mov	r22,r4
1000e6a8:	38a1c83a 	sub	r16,r7,r2
1000e6ac:	8009883a 	mov	r4,r16
1000e6b0:	a80b883a 	mov	r5,r21
1000e6b4:	d8c00115 	stw	r3,4(sp)
1000e6b8:	000f16c0 	call	1000f16c <__umodsi3>
1000e6bc:	1027883a 	mov	r19,r2
1000e6c0:	8009883a 	mov	r4,r16
1000e6c4:	a80b883a 	mov	r5,r21
1000e6c8:	9826943a 	slli	r19,r19,16
1000e6cc:	000f1080 	call	1000f108 <__udivsi3>
1000e6d0:	a00b883a 	mov	r5,r20
1000e6d4:	1009883a 	mov	r4,r2
1000e6d8:	94bfffcc 	andi	r18,r18,65535
1000e6dc:	1021883a 	mov	r16,r2
1000e6e0:	94e4b03a 	or	r18,r18,r19
1000e6e4:	0004b280 	call	10004b28 <__mulsi3>
1000e6e8:	d8c00117 	ldw	r3,4(sp)
1000e6ec:	9080052e 	bgeu	r18,r2,1000e704 <__udivdi3+0x2b4>
1000e6f0:	8ca5883a 	add	r18,r17,r18
1000e6f4:	813fffc4 	addi	r4,r16,-1
1000e6f8:	9440ad36 	bltu	r18,r17,1000e9b0 <__udivdi3+0x560>
1000e6fc:	9080ac2e 	bgeu	r18,r2,1000e9b0 <__udivdi3+0x560>
1000e700:	843fff84 	addi	r16,r16,-2
1000e704:	b004943a 	slli	r2,r22,16
1000e708:	1404b03a 	or	r2,r2,r16
1000e70c:	00000206 	br	1000e718 <__udivdi3+0x2c8>
1000e710:	0007883a 	mov	r3,zero
1000e714:	0005883a 	mov	r2,zero
1000e718:	dfc00b17 	ldw	ra,44(sp)
1000e71c:	df000a17 	ldw	fp,40(sp)
1000e720:	ddc00917 	ldw	r23,36(sp)
1000e724:	dd800817 	ldw	r22,32(sp)
1000e728:	dd400717 	ldw	r21,28(sp)
1000e72c:	dd000617 	ldw	r20,24(sp)
1000e730:	dcc00517 	ldw	r19,20(sp)
1000e734:	dc800417 	ldw	r18,16(sp)
1000e738:	dc400317 	ldw	r17,12(sp)
1000e73c:	dc000217 	ldw	r16,8(sp)
1000e740:	dec00c04 	addi	sp,sp,48
1000e744:	f800283a 	ret
1000e748:	00803fc4 	movi	r2,255
1000e74c:	11c5803a 	cmpltu	r2,r2,r7
1000e750:	100490fa 	slli	r2,r2,3
1000e754:	003f9906 	br	1000e5bc <__alt_data_end+0xf800e5bc>
1000e758:	00803fc4 	movi	r2,255
1000e75c:	1445803a 	cmpltu	r2,r2,r17
1000e760:	100490fa 	slli	r2,r2,3
1000e764:	003fad06 	br	1000e61c <__alt_data_end+0xf800e61c>
1000e768:	00804034 	movhi	r2,256
1000e76c:	10bfffc4 	addi	r2,r2,-1
1000e770:	11809f36 	bltu	r2,r6,1000e9f0 <__udivdi3+0x5a0>
1000e774:	00800404 	movi	r2,16
1000e778:	003f4c06 	br	1000e4ac <__alt_data_end+0xf800e4ac>
1000e77c:	3dce983a 	sll	r7,r7,r23
1000e780:	30b8d83a 	srl	fp,r6,r2
1000e784:	80a2d83a 	srl	r17,r16,r2
1000e788:	35cc983a 	sll	r6,r6,r23
1000e78c:	3f38b03a 	or	fp,r7,fp
1000e790:	e024d43a 	srli	r18,fp,16
1000e794:	9884d83a 	srl	r2,r19,r2
1000e798:	85e0983a 	sll	r16,r16,r23
1000e79c:	8809883a 	mov	r4,r17
1000e7a0:	900b883a 	mov	r5,r18
1000e7a4:	d9800015 	stw	r6,0(sp)
1000e7a8:	1420b03a 	or	r16,r2,r16
1000e7ac:	000f16c0 	call	1000f16c <__umodsi3>
1000e7b0:	900b883a 	mov	r5,r18
1000e7b4:	8809883a 	mov	r4,r17
1000e7b8:	1029883a 	mov	r20,r2
1000e7bc:	e5bfffcc 	andi	r22,fp,65535
1000e7c0:	000f1080 	call	1000f108 <__udivsi3>
1000e7c4:	100b883a 	mov	r5,r2
1000e7c8:	b009883a 	mov	r4,r22
1000e7cc:	102b883a 	mov	r21,r2
1000e7d0:	0004b280 	call	10004b28 <__mulsi3>
1000e7d4:	a028943a 	slli	r20,r20,16
1000e7d8:	8006d43a 	srli	r3,r16,16
1000e7dc:	1d06b03a 	or	r3,r3,r20
1000e7e0:	1880042e 	bgeu	r3,r2,1000e7f4 <__udivdi3+0x3a4>
1000e7e4:	1f07883a 	add	r3,r3,fp
1000e7e8:	a93fffc4 	addi	r4,r21,-1
1000e7ec:	1f00892e 	bgeu	r3,fp,1000ea14 <__udivdi3+0x5c4>
1000e7f0:	202b883a 	mov	r21,r4
1000e7f4:	18a3c83a 	sub	r17,r3,r2
1000e7f8:	8809883a 	mov	r4,r17
1000e7fc:	900b883a 	mov	r5,r18
1000e800:	000f16c0 	call	1000f16c <__umodsi3>
1000e804:	1029883a 	mov	r20,r2
1000e808:	8809883a 	mov	r4,r17
1000e80c:	900b883a 	mov	r5,r18
1000e810:	a028943a 	slli	r20,r20,16
1000e814:	000f1080 	call	1000f108 <__udivsi3>
1000e818:	100b883a 	mov	r5,r2
1000e81c:	b009883a 	mov	r4,r22
1000e820:	843fffcc 	andi	r16,r16,65535
1000e824:	1023883a 	mov	r17,r2
1000e828:	8520b03a 	or	r16,r16,r20
1000e82c:	0004b280 	call	10004b28 <__mulsi3>
1000e830:	8080042e 	bgeu	r16,r2,1000e844 <__udivdi3+0x3f4>
1000e834:	8721883a 	add	r16,r16,fp
1000e838:	88ffffc4 	addi	r3,r17,-1
1000e83c:	8700712e 	bgeu	r16,fp,1000ea04 <__udivdi3+0x5b4>
1000e840:	1823883a 	mov	r17,r3
1000e844:	a80e943a 	slli	r7,r21,16
1000e848:	d8c00017 	ldw	r3,0(sp)
1000e84c:	80a1c83a 	sub	r16,r16,r2
1000e850:	3c64b03a 	or	r18,r7,r17
1000e854:	1d3fffcc 	andi	r20,r3,65535
1000e858:	9022d43a 	srli	r17,r18,16
1000e85c:	95bfffcc 	andi	r22,r18,65535
1000e860:	a00b883a 	mov	r5,r20
1000e864:	b009883a 	mov	r4,r22
1000e868:	182ad43a 	srli	r21,r3,16
1000e86c:	0004b280 	call	10004b28 <__mulsi3>
1000e870:	a00b883a 	mov	r5,r20
1000e874:	8809883a 	mov	r4,r17
1000e878:	1039883a 	mov	fp,r2
1000e87c:	0004b280 	call	10004b28 <__mulsi3>
1000e880:	8809883a 	mov	r4,r17
1000e884:	a80b883a 	mov	r5,r21
1000e888:	1029883a 	mov	r20,r2
1000e88c:	0004b280 	call	10004b28 <__mulsi3>
1000e890:	a80b883a 	mov	r5,r21
1000e894:	b009883a 	mov	r4,r22
1000e898:	1023883a 	mov	r17,r2
1000e89c:	0004b280 	call	10004b28 <__mulsi3>
1000e8a0:	e006d43a 	srli	r3,fp,16
1000e8a4:	1505883a 	add	r2,r2,r20
1000e8a8:	1887883a 	add	r3,r3,r2
1000e8ac:	1d00022e 	bgeu	r3,r20,1000e8b8 <__udivdi3+0x468>
1000e8b0:	00800074 	movhi	r2,1
1000e8b4:	88a3883a 	add	r17,r17,r2
1000e8b8:	1804d43a 	srli	r2,r3,16
1000e8bc:	1463883a 	add	r17,r2,r17
1000e8c0:	84404436 	bltu	r16,r17,1000e9d4 <__udivdi3+0x584>
1000e8c4:	84403e26 	beq	r16,r17,1000e9c0 <__udivdi3+0x570>
1000e8c8:	9005883a 	mov	r2,r18
1000e8cc:	0007883a 	mov	r3,zero
1000e8d0:	003f9106 	br	1000e718 <__alt_data_end+0xf800e718>
1000e8d4:	88e2983a 	sll	r17,r17,r3
1000e8d8:	80aed83a 	srl	r23,r16,r2
1000e8dc:	80e0983a 	sll	r16,r16,r3
1000e8e0:	882ad43a 	srli	r21,r17,16
1000e8e4:	9884d83a 	srl	r2,r19,r2
1000e8e8:	b809883a 	mov	r4,r23
1000e8ec:	a80b883a 	mov	r5,r21
1000e8f0:	98e4983a 	sll	r18,r19,r3
1000e8f4:	142cb03a 	or	r22,r2,r16
1000e8f8:	000f16c0 	call	1000f16c <__umodsi3>
1000e8fc:	b809883a 	mov	r4,r23
1000e900:	a80b883a 	mov	r5,r21
1000e904:	1027883a 	mov	r19,r2
1000e908:	8d3fffcc 	andi	r20,r17,65535
1000e90c:	000f1080 	call	1000f108 <__udivsi3>
1000e910:	a009883a 	mov	r4,r20
1000e914:	100b883a 	mov	r5,r2
1000e918:	102f883a 	mov	r23,r2
1000e91c:	0004b280 	call	10004b28 <__mulsi3>
1000e920:	9826943a 	slli	r19,r19,16
1000e924:	b008d43a 	srli	r4,r22,16
1000e928:	24c8b03a 	or	r4,r4,r19
1000e92c:	2080062e 	bgeu	r4,r2,1000e948 <__udivdi3+0x4f8>
1000e930:	2449883a 	add	r4,r4,r17
1000e934:	b8ffffc4 	addi	r3,r23,-1
1000e938:	24403c36 	bltu	r4,r17,1000ea2c <__udivdi3+0x5dc>
1000e93c:	20803b2e 	bgeu	r4,r2,1000ea2c <__udivdi3+0x5dc>
1000e940:	bdffff84 	addi	r23,r23,-2
1000e944:	2449883a 	add	r4,r4,r17
1000e948:	20a1c83a 	sub	r16,r4,r2
1000e94c:	a80b883a 	mov	r5,r21
1000e950:	8009883a 	mov	r4,r16
1000e954:	000f16c0 	call	1000f16c <__umodsi3>
1000e958:	a80b883a 	mov	r5,r21
1000e95c:	8009883a 	mov	r4,r16
1000e960:	1027883a 	mov	r19,r2
1000e964:	000f1080 	call	1000f108 <__udivsi3>
1000e968:	a009883a 	mov	r4,r20
1000e96c:	100b883a 	mov	r5,r2
1000e970:	9826943a 	slli	r19,r19,16
1000e974:	1039883a 	mov	fp,r2
1000e978:	0004b280 	call	10004b28 <__mulsi3>
1000e97c:	b13fffcc 	andi	r4,r22,65535
1000e980:	24c8b03a 	or	r4,r4,r19
1000e984:	2080062e 	bgeu	r4,r2,1000e9a0 <__udivdi3+0x550>
1000e988:	2449883a 	add	r4,r4,r17
1000e98c:	e0ffffc4 	addi	r3,fp,-1
1000e990:	24402436 	bltu	r4,r17,1000ea24 <__udivdi3+0x5d4>
1000e994:	2080232e 	bgeu	r4,r2,1000ea24 <__udivdi3+0x5d4>
1000e998:	e73fff84 	addi	fp,fp,-2
1000e99c:	2449883a 	add	r4,r4,r17
1000e9a0:	b82e943a 	slli	r23,r23,16
1000e9a4:	20a1c83a 	sub	r16,r4,r2
1000e9a8:	bf06b03a 	or	r3,r23,fp
1000e9ac:	003f2806 	br	1000e650 <__alt_data_end+0xf800e650>
1000e9b0:	2021883a 	mov	r16,r4
1000e9b4:	003f5306 	br	1000e704 <__alt_data_end+0xf800e704>
1000e9b8:	1821883a 	mov	r16,r3
1000e9bc:	003ef406 	br	1000e590 <__alt_data_end+0xf800e590>
1000e9c0:	1806943a 	slli	r3,r3,16
1000e9c4:	9de6983a 	sll	r19,r19,r23
1000e9c8:	e73fffcc 	andi	fp,fp,65535
1000e9cc:	1f07883a 	add	r3,r3,fp
1000e9d0:	98ffbd2e 	bgeu	r19,r3,1000e8c8 <__alt_data_end+0xf800e8c8>
1000e9d4:	90bfffc4 	addi	r2,r18,-1
1000e9d8:	0007883a 	mov	r3,zero
1000e9dc:	003f4e06 	br	1000e718 <__alt_data_end+0xf800e718>
1000e9e0:	00800604 	movi	r2,24
1000e9e4:	003ef506 	br	1000e5bc <__alt_data_end+0xf800e5bc>
1000e9e8:	00800604 	movi	r2,24
1000e9ec:	003f0b06 	br	1000e61c <__alt_data_end+0xf800e61c>
1000e9f0:	00800604 	movi	r2,24
1000e9f4:	003ead06 	br	1000e4ac <__alt_data_end+0xf800e4ac>
1000e9f8:	0007883a 	mov	r3,zero
1000e9fc:	00800044 	movi	r2,1
1000ea00:	003f4506 	br	1000e718 <__alt_data_end+0xf800e718>
1000ea04:	80bf8e2e 	bgeu	r16,r2,1000e840 <__alt_data_end+0xf800e840>
1000ea08:	8c7fff84 	addi	r17,r17,-2
1000ea0c:	8721883a 	add	r16,r16,fp
1000ea10:	003f8c06 	br	1000e844 <__alt_data_end+0xf800e844>
1000ea14:	18bf762e 	bgeu	r3,r2,1000e7f0 <__alt_data_end+0xf800e7f0>
1000ea18:	ad7fff84 	addi	r21,r21,-2
1000ea1c:	1f07883a 	add	r3,r3,fp
1000ea20:	003f7406 	br	1000e7f4 <__alt_data_end+0xf800e7f4>
1000ea24:	1839883a 	mov	fp,r3
1000ea28:	003fdd06 	br	1000e9a0 <__alt_data_end+0xf800e9a0>
1000ea2c:	182f883a 	mov	r23,r3
1000ea30:	003fc506 	br	1000e948 <__alt_data_end+0xf800e948>
1000ea34:	b5bfff84 	addi	r22,r22,-2
1000ea38:	3c4f883a 	add	r7,r7,r17
1000ea3c:	003f1a06 	br	1000e6a8 <__alt_data_end+0xf800e6a8>
1000ea40:	b5bfff84 	addi	r22,r22,-2
1000ea44:	1c47883a 	add	r3,r3,r17
1000ea48:	003ebc06 	br	1000e53c <__alt_data_end+0xf800e53c>

1000ea4c <__umoddi3>:
1000ea4c:	defff304 	addi	sp,sp,-52
1000ea50:	df000b15 	stw	fp,44(sp)
1000ea54:	dc400415 	stw	r17,16(sp)
1000ea58:	dc000315 	stw	r16,12(sp)
1000ea5c:	dfc00c15 	stw	ra,48(sp)
1000ea60:	ddc00a15 	stw	r23,40(sp)
1000ea64:	dd800915 	stw	r22,36(sp)
1000ea68:	dd400815 	stw	r21,32(sp)
1000ea6c:	dd000715 	stw	r20,28(sp)
1000ea70:	dcc00615 	stw	r19,24(sp)
1000ea74:	dc800515 	stw	r18,20(sp)
1000ea78:	2021883a 	mov	r16,r4
1000ea7c:	2823883a 	mov	r17,r5
1000ea80:	2839883a 	mov	fp,r5
1000ea84:	3800401e 	bne	r7,zero,1000eb88 <__umoddi3+0x13c>
1000ea88:	3027883a 	mov	r19,r6
1000ea8c:	2029883a 	mov	r20,r4
1000ea90:	2980552e 	bgeu	r5,r6,1000ebe8 <__umoddi3+0x19c>
1000ea94:	00bfffd4 	movui	r2,65535
1000ea98:	1180a236 	bltu	r2,r6,1000ed24 <__umoddi3+0x2d8>
1000ea9c:	01003fc4 	movi	r4,255
1000eaa0:	2189803a 	cmpltu	r4,r4,r6
1000eaa4:	200890fa 	slli	r4,r4,3
1000eaa8:	3104d83a 	srl	r2,r6,r4
1000eaac:	00c40074 	movhi	r3,4097
1000eab0:	18d36e04 	addi	r3,r3,19896
1000eab4:	1885883a 	add	r2,r3,r2
1000eab8:	10c00003 	ldbu	r3,0(r2)
1000eabc:	00800804 	movi	r2,32
1000eac0:	1909883a 	add	r4,r3,r4
1000eac4:	1125c83a 	sub	r18,r2,r4
1000eac8:	90000526 	beq	r18,zero,1000eae0 <__umoddi3+0x94>
1000eacc:	8ca2983a 	sll	r17,r17,r18
1000ead0:	8108d83a 	srl	r4,r16,r4
1000ead4:	34a6983a 	sll	r19,r6,r18
1000ead8:	84a8983a 	sll	r20,r16,r18
1000eadc:	2478b03a 	or	fp,r4,r17
1000eae0:	982cd43a 	srli	r22,r19,16
1000eae4:	e009883a 	mov	r4,fp
1000eae8:	9dffffcc 	andi	r23,r19,65535
1000eaec:	b00b883a 	mov	r5,r22
1000eaf0:	000f16c0 	call	1000f16c <__umodsi3>
1000eaf4:	b00b883a 	mov	r5,r22
1000eaf8:	e009883a 	mov	r4,fp
1000eafc:	102b883a 	mov	r21,r2
1000eb00:	000f1080 	call	1000f108 <__udivsi3>
1000eb04:	100b883a 	mov	r5,r2
1000eb08:	b809883a 	mov	r4,r23
1000eb0c:	0004b280 	call	10004b28 <__mulsi3>
1000eb10:	a82a943a 	slli	r21,r21,16
1000eb14:	a006d43a 	srli	r3,r20,16
1000eb18:	1d46b03a 	or	r3,r3,r21
1000eb1c:	1880032e 	bgeu	r3,r2,1000eb2c <__umoddi3+0xe0>
1000eb20:	1cc7883a 	add	r3,r3,r19
1000eb24:	1cc00136 	bltu	r3,r19,1000eb2c <__umoddi3+0xe0>
1000eb28:	18813136 	bltu	r3,r2,1000eff0 <__umoddi3+0x5a4>
1000eb2c:	18a1c83a 	sub	r16,r3,r2
1000eb30:	b00b883a 	mov	r5,r22
1000eb34:	8009883a 	mov	r4,r16
1000eb38:	000f16c0 	call	1000f16c <__umodsi3>
1000eb3c:	b00b883a 	mov	r5,r22
1000eb40:	8009883a 	mov	r4,r16
1000eb44:	1023883a 	mov	r17,r2
1000eb48:	000f1080 	call	1000f108 <__udivsi3>
1000eb4c:	100b883a 	mov	r5,r2
1000eb50:	b809883a 	mov	r4,r23
1000eb54:	8822943a 	slli	r17,r17,16
1000eb58:	0004b280 	call	10004b28 <__mulsi3>
1000eb5c:	a0ffffcc 	andi	r3,r20,65535
1000eb60:	1c46b03a 	or	r3,r3,r17
1000eb64:	1880042e 	bgeu	r3,r2,1000eb78 <__umoddi3+0x12c>
1000eb68:	1cc7883a 	add	r3,r3,r19
1000eb6c:	1cc00236 	bltu	r3,r19,1000eb78 <__umoddi3+0x12c>
1000eb70:	1880012e 	bgeu	r3,r2,1000eb78 <__umoddi3+0x12c>
1000eb74:	1cc7883a 	add	r3,r3,r19
1000eb78:	1885c83a 	sub	r2,r3,r2
1000eb7c:	1484d83a 	srl	r2,r2,r18
1000eb80:	0007883a 	mov	r3,zero
1000eb84:	00005306 	br	1000ecd4 <__umoddi3+0x288>
1000eb88:	29c05036 	bltu	r5,r7,1000eccc <__umoddi3+0x280>
1000eb8c:	00bfffd4 	movui	r2,65535
1000eb90:	11c05c2e 	bgeu	r2,r7,1000ed04 <__umoddi3+0x2b8>
1000eb94:	00804034 	movhi	r2,256
1000eb98:	10bfffc4 	addi	r2,r2,-1
1000eb9c:	11c10636 	bltu	r2,r7,1000efb8 <__umoddi3+0x56c>
1000eba0:	01000404 	movi	r4,16
1000eba4:	3904d83a 	srl	r2,r7,r4
1000eba8:	00c40074 	movhi	r3,4097
1000ebac:	18d36e04 	addi	r3,r3,19896
1000ebb0:	1885883a 	add	r2,r3,r2
1000ebb4:	14c00003 	ldbu	r19,0(r2)
1000ebb8:	00c00804 	movi	r3,32
1000ebbc:	9927883a 	add	r19,r19,r4
1000ebc0:	1ce9c83a 	sub	r20,r3,r19
1000ebc4:	a0005c1e 	bne	r20,zero,1000ed38 <__umoddi3+0x2ec>
1000ebc8:	3c400136 	bltu	r7,r17,1000ebd0 <__umoddi3+0x184>
1000ebcc:	81810a36 	bltu	r16,r6,1000eff8 <__umoddi3+0x5ac>
1000ebd0:	8185c83a 	sub	r2,r16,r6
1000ebd4:	89e3c83a 	sub	r17,r17,r7
1000ebd8:	8089803a 	cmpltu	r4,r16,r2
1000ebdc:	8939c83a 	sub	fp,r17,r4
1000ebe0:	e007883a 	mov	r3,fp
1000ebe4:	00003b06 	br	1000ecd4 <__umoddi3+0x288>
1000ebe8:	3000041e 	bne	r6,zero,1000ebfc <__umoddi3+0x1b0>
1000ebec:	000b883a 	mov	r5,zero
1000ebf0:	01000044 	movi	r4,1
1000ebf4:	000f1080 	call	1000f108 <__udivsi3>
1000ebf8:	1027883a 	mov	r19,r2
1000ebfc:	00bfffd4 	movui	r2,65535
1000ec00:	14c0442e 	bgeu	r2,r19,1000ed14 <__umoddi3+0x2c8>
1000ec04:	00804034 	movhi	r2,256
1000ec08:	10bfffc4 	addi	r2,r2,-1
1000ec0c:	14c0ec36 	bltu	r2,r19,1000efc0 <__umoddi3+0x574>
1000ec10:	00800404 	movi	r2,16
1000ec14:	9886d83a 	srl	r3,r19,r2
1000ec18:	01040074 	movhi	r4,4097
1000ec1c:	21136e04 	addi	r4,r4,19896
1000ec20:	20c7883a 	add	r3,r4,r3
1000ec24:	18c00003 	ldbu	r3,0(r3)
1000ec28:	1887883a 	add	r3,r3,r2
1000ec2c:	00800804 	movi	r2,32
1000ec30:	10e5c83a 	sub	r18,r2,r3
1000ec34:	9000ab1e 	bne	r18,zero,1000eee4 <__umoddi3+0x498>
1000ec38:	982cd43a 	srli	r22,r19,16
1000ec3c:	8ce3c83a 	sub	r17,r17,r19
1000ec40:	9dffffcc 	andi	r23,r19,65535
1000ec44:	b00b883a 	mov	r5,r22
1000ec48:	8809883a 	mov	r4,r17
1000ec4c:	000f16c0 	call	1000f16c <__umodsi3>
1000ec50:	b00b883a 	mov	r5,r22
1000ec54:	8809883a 	mov	r4,r17
1000ec58:	102b883a 	mov	r21,r2
1000ec5c:	000f1080 	call	1000f108 <__udivsi3>
1000ec60:	b80b883a 	mov	r5,r23
1000ec64:	1009883a 	mov	r4,r2
1000ec68:	0004b280 	call	10004b28 <__mulsi3>
1000ec6c:	a82a943a 	slli	r21,r21,16
1000ec70:	a006d43a 	srli	r3,r20,16
1000ec74:	1d46b03a 	or	r3,r3,r21
1000ec78:	1880042e 	bgeu	r3,r2,1000ec8c <__umoddi3+0x240>
1000ec7c:	1cc7883a 	add	r3,r3,r19
1000ec80:	1cc00236 	bltu	r3,r19,1000ec8c <__umoddi3+0x240>
1000ec84:	1880012e 	bgeu	r3,r2,1000ec8c <__umoddi3+0x240>
1000ec88:	1cc7883a 	add	r3,r3,r19
1000ec8c:	18a1c83a 	sub	r16,r3,r2
1000ec90:	b00b883a 	mov	r5,r22
1000ec94:	8009883a 	mov	r4,r16
1000ec98:	000f16c0 	call	1000f16c <__umodsi3>
1000ec9c:	1023883a 	mov	r17,r2
1000eca0:	b00b883a 	mov	r5,r22
1000eca4:	8009883a 	mov	r4,r16
1000eca8:	000f1080 	call	1000f108 <__udivsi3>
1000ecac:	8822943a 	slli	r17,r17,16
1000ecb0:	b80b883a 	mov	r5,r23
1000ecb4:	1009883a 	mov	r4,r2
1000ecb8:	0004b280 	call	10004b28 <__mulsi3>
1000ecbc:	a53fffcc 	andi	r20,r20,65535
1000ecc0:	a446b03a 	or	r3,r20,r17
1000ecc4:	18bfac2e 	bgeu	r3,r2,1000eb78 <__alt_data_end+0xf800eb78>
1000ecc8:	003fa706 	br	1000eb68 <__alt_data_end+0xf800eb68>
1000eccc:	2005883a 	mov	r2,r4
1000ecd0:	2807883a 	mov	r3,r5
1000ecd4:	dfc00c17 	ldw	ra,48(sp)
1000ecd8:	df000b17 	ldw	fp,44(sp)
1000ecdc:	ddc00a17 	ldw	r23,40(sp)
1000ece0:	dd800917 	ldw	r22,36(sp)
1000ece4:	dd400817 	ldw	r21,32(sp)
1000ece8:	dd000717 	ldw	r20,28(sp)
1000ecec:	dcc00617 	ldw	r19,24(sp)
1000ecf0:	dc800517 	ldw	r18,20(sp)
1000ecf4:	dc400417 	ldw	r17,16(sp)
1000ecf8:	dc000317 	ldw	r16,12(sp)
1000ecfc:	dec00d04 	addi	sp,sp,52
1000ed00:	f800283a 	ret
1000ed04:	04c03fc4 	movi	r19,255
1000ed08:	99c9803a 	cmpltu	r4,r19,r7
1000ed0c:	200890fa 	slli	r4,r4,3
1000ed10:	003fa406 	br	1000eba4 <__alt_data_end+0xf800eba4>
1000ed14:	00803fc4 	movi	r2,255
1000ed18:	14c5803a 	cmpltu	r2,r2,r19
1000ed1c:	100490fa 	slli	r2,r2,3
1000ed20:	003fbc06 	br	1000ec14 <__alt_data_end+0xf800ec14>
1000ed24:	00804034 	movhi	r2,256
1000ed28:	10bfffc4 	addi	r2,r2,-1
1000ed2c:	1180a636 	bltu	r2,r6,1000efc8 <__umoddi3+0x57c>
1000ed30:	01000404 	movi	r4,16
1000ed34:	003f5c06 	br	1000eaa8 <__alt_data_end+0xf800eaa8>
1000ed38:	3d0e983a 	sll	r7,r7,r20
1000ed3c:	34ead83a 	srl	r21,r6,r19
1000ed40:	8cc6d83a 	srl	r3,r17,r19
1000ed44:	8d10983a 	sll	r8,r17,r20
1000ed48:	3d6ab03a 	or	r21,r7,r21
1000ed4c:	a82cd43a 	srli	r22,r21,16
1000ed50:	84e2d83a 	srl	r17,r16,r19
1000ed54:	1809883a 	mov	r4,r3
1000ed58:	b00b883a 	mov	r5,r22
1000ed5c:	8a22b03a 	or	r17,r17,r8
1000ed60:	3524983a 	sll	r18,r6,r20
1000ed64:	dc400015 	stw	r17,0(sp)
1000ed68:	d8c00115 	stw	r3,4(sp)
1000ed6c:	000f16c0 	call	1000f16c <__umodsi3>
1000ed70:	d8c00117 	ldw	r3,4(sp)
1000ed74:	b00b883a 	mov	r5,r22
1000ed78:	1039883a 	mov	fp,r2
1000ed7c:	1809883a 	mov	r4,r3
1000ed80:	000f1080 	call	1000f108 <__udivsi3>
1000ed84:	adffffcc 	andi	r23,r21,65535
1000ed88:	100b883a 	mov	r5,r2
1000ed8c:	b809883a 	mov	r4,r23
1000ed90:	1023883a 	mov	r17,r2
1000ed94:	0004b280 	call	10004b28 <__mulsi3>
1000ed98:	d9400017 	ldw	r5,0(sp)
1000ed9c:	e008943a 	slli	r4,fp,16
1000eda0:	8520983a 	sll	r16,r16,r20
1000eda4:	2806d43a 	srli	r3,r5,16
1000eda8:	1906b03a 	or	r3,r3,r4
1000edac:	1880042e 	bgeu	r3,r2,1000edc0 <__umoddi3+0x374>
1000edb0:	1d47883a 	add	r3,r3,r21
1000edb4:	893fffc4 	addi	r4,r17,-1
1000edb8:	1d40892e 	bgeu	r3,r21,1000efe0 <__umoddi3+0x594>
1000edbc:	2023883a 	mov	r17,r4
1000edc0:	18b9c83a 	sub	fp,r3,r2
1000edc4:	b00b883a 	mov	r5,r22
1000edc8:	e009883a 	mov	r4,fp
1000edcc:	000f16c0 	call	1000f16c <__umodsi3>
1000edd0:	b00b883a 	mov	r5,r22
1000edd4:	e009883a 	mov	r4,fp
1000edd8:	d8800215 	stw	r2,8(sp)
1000eddc:	000f1080 	call	1000f108 <__udivsi3>
1000ede0:	100b883a 	mov	r5,r2
1000ede4:	b809883a 	mov	r4,r23
1000ede8:	102d883a 	mov	r22,r2
1000edec:	0004b280 	call	10004b28 <__mulsi3>
1000edf0:	d9800217 	ldw	r6,8(sp)
1000edf4:	d8c00017 	ldw	r3,0(sp)
1000edf8:	300c943a 	slli	r6,r6,16
1000edfc:	1a3fffcc 	andi	r8,r3,65535
1000ee00:	4190b03a 	or	r8,r8,r6
1000ee04:	4080042e 	bgeu	r8,r2,1000ee18 <__umoddi3+0x3cc>
1000ee08:	4551883a 	add	r8,r8,r21
1000ee0c:	b0ffffc4 	addi	r3,r22,-1
1000ee10:	45406f2e 	bgeu	r8,r21,1000efd0 <__umoddi3+0x584>
1000ee14:	182d883a 	mov	r22,r3
1000ee18:	880e943a 	slli	r7,r17,16
1000ee1c:	9006d43a 	srli	r3,r18,16
1000ee20:	91bfffcc 	andi	r6,r18,65535
1000ee24:	3dacb03a 	or	r22,r7,r22
1000ee28:	b02ed43a 	srli	r23,r22,16
1000ee2c:	b5bfffcc 	andi	r22,r22,65535
1000ee30:	300b883a 	mov	r5,r6
1000ee34:	b009883a 	mov	r4,r22
1000ee38:	40a3c83a 	sub	r17,r8,r2
1000ee3c:	d8c00115 	stw	r3,4(sp)
1000ee40:	d9800215 	stw	r6,8(sp)
1000ee44:	0004b280 	call	10004b28 <__mulsi3>
1000ee48:	d9800217 	ldw	r6,8(sp)
1000ee4c:	b809883a 	mov	r4,r23
1000ee50:	1039883a 	mov	fp,r2
1000ee54:	300b883a 	mov	r5,r6
1000ee58:	0004b280 	call	10004b28 <__mulsi3>
1000ee5c:	d8c00117 	ldw	r3,4(sp)
1000ee60:	b809883a 	mov	r4,r23
1000ee64:	d8800215 	stw	r2,8(sp)
1000ee68:	180b883a 	mov	r5,r3
1000ee6c:	0004b280 	call	10004b28 <__mulsi3>
1000ee70:	d8c00117 	ldw	r3,4(sp)
1000ee74:	b009883a 	mov	r4,r22
1000ee78:	102f883a 	mov	r23,r2
1000ee7c:	180b883a 	mov	r5,r3
1000ee80:	0004b280 	call	10004b28 <__mulsi3>
1000ee84:	d9800217 	ldw	r6,8(sp)
1000ee88:	e006d43a 	srli	r3,fp,16
1000ee8c:	1185883a 	add	r2,r2,r6
1000ee90:	1885883a 	add	r2,r3,r2
1000ee94:	1180022e 	bgeu	r2,r6,1000eea0 <__umoddi3+0x454>
1000ee98:	00c00074 	movhi	r3,1
1000ee9c:	b8ef883a 	add	r23,r23,r3
1000eea0:	1006d43a 	srli	r3,r2,16
1000eea4:	1004943a 	slli	r2,r2,16
1000eea8:	e73fffcc 	andi	fp,fp,65535
1000eeac:	1dc7883a 	add	r3,r3,r23
1000eeb0:	1739883a 	add	fp,r2,fp
1000eeb4:	88c03a36 	bltu	r17,r3,1000efa0 <__umoddi3+0x554>
1000eeb8:	88c05126 	beq	r17,r3,1000f000 <__umoddi3+0x5b4>
1000eebc:	88c9c83a 	sub	r4,r17,r3
1000eec0:	e00f883a 	mov	r7,fp
1000eec4:	81cfc83a 	sub	r7,r16,r7
1000eec8:	81c7803a 	cmpltu	r3,r16,r7
1000eecc:	20c7c83a 	sub	r3,r4,r3
1000eed0:	1cc4983a 	sll	r2,r3,r19
1000eed4:	3d0ed83a 	srl	r7,r7,r20
1000eed8:	1d06d83a 	srl	r3,r3,r20
1000eedc:	11c4b03a 	or	r2,r2,r7
1000eee0:	003f7c06 	br	1000ecd4 <__alt_data_end+0xf800ecd4>
1000eee4:	9ca6983a 	sll	r19,r19,r18
1000eee8:	88f8d83a 	srl	fp,r17,r3
1000eeec:	80c4d83a 	srl	r2,r16,r3
1000eef0:	982cd43a 	srli	r22,r19,16
1000eef4:	8ca2983a 	sll	r17,r17,r18
1000eef8:	e009883a 	mov	r4,fp
1000eefc:	b00b883a 	mov	r5,r22
1000ef00:	146ab03a 	or	r21,r2,r17
1000ef04:	000f16c0 	call	1000f16c <__umodsi3>
1000ef08:	b00b883a 	mov	r5,r22
1000ef0c:	e009883a 	mov	r4,fp
1000ef10:	1029883a 	mov	r20,r2
1000ef14:	9dffffcc 	andi	r23,r19,65535
1000ef18:	000f1080 	call	1000f108 <__udivsi3>
1000ef1c:	b809883a 	mov	r4,r23
1000ef20:	100b883a 	mov	r5,r2
1000ef24:	0004b280 	call	10004b28 <__mulsi3>
1000ef28:	a008943a 	slli	r4,r20,16
1000ef2c:	a806d43a 	srli	r3,r21,16
1000ef30:	84a8983a 	sll	r20,r16,r18
1000ef34:	1906b03a 	or	r3,r3,r4
1000ef38:	1880042e 	bgeu	r3,r2,1000ef4c <__umoddi3+0x500>
1000ef3c:	1cc7883a 	add	r3,r3,r19
1000ef40:	1cc00236 	bltu	r3,r19,1000ef4c <__umoddi3+0x500>
1000ef44:	1880012e 	bgeu	r3,r2,1000ef4c <__umoddi3+0x500>
1000ef48:	1cc7883a 	add	r3,r3,r19
1000ef4c:	18a3c83a 	sub	r17,r3,r2
1000ef50:	b00b883a 	mov	r5,r22
1000ef54:	8809883a 	mov	r4,r17
1000ef58:	000f16c0 	call	1000f16c <__umodsi3>
1000ef5c:	b00b883a 	mov	r5,r22
1000ef60:	8809883a 	mov	r4,r17
1000ef64:	1021883a 	mov	r16,r2
1000ef68:	000f1080 	call	1000f108 <__udivsi3>
1000ef6c:	100b883a 	mov	r5,r2
1000ef70:	b809883a 	mov	r4,r23
1000ef74:	8020943a 	slli	r16,r16,16
1000ef78:	0004b280 	call	10004b28 <__mulsi3>
1000ef7c:	a8ffffcc 	andi	r3,r21,65535
1000ef80:	1c06b03a 	or	r3,r3,r16
1000ef84:	1880042e 	bgeu	r3,r2,1000ef98 <__umoddi3+0x54c>
1000ef88:	1cc7883a 	add	r3,r3,r19
1000ef8c:	1cc00236 	bltu	r3,r19,1000ef98 <__umoddi3+0x54c>
1000ef90:	1880012e 	bgeu	r3,r2,1000ef98 <__umoddi3+0x54c>
1000ef94:	1cc7883a 	add	r3,r3,r19
1000ef98:	18a3c83a 	sub	r17,r3,r2
1000ef9c:	003f2906 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000efa0:	e48fc83a 	sub	r7,fp,r18
1000efa4:	1d49c83a 	sub	r4,r3,r21
1000efa8:	e1f9803a 	cmpltu	fp,fp,r7
1000efac:	2739c83a 	sub	fp,r4,fp
1000efb0:	8f09c83a 	sub	r4,r17,fp
1000efb4:	003fc306 	br	1000eec4 <__alt_data_end+0xf800eec4>
1000efb8:	01000604 	movi	r4,24
1000efbc:	003ef906 	br	1000eba4 <__alt_data_end+0xf800eba4>
1000efc0:	00800604 	movi	r2,24
1000efc4:	003f1306 	br	1000ec14 <__alt_data_end+0xf800ec14>
1000efc8:	01000604 	movi	r4,24
1000efcc:	003eb606 	br	1000eaa8 <__alt_data_end+0xf800eaa8>
1000efd0:	40bf902e 	bgeu	r8,r2,1000ee14 <__alt_data_end+0xf800ee14>
1000efd4:	b5bfff84 	addi	r22,r22,-2
1000efd8:	4551883a 	add	r8,r8,r21
1000efdc:	003f8e06 	br	1000ee18 <__alt_data_end+0xf800ee18>
1000efe0:	18bf762e 	bgeu	r3,r2,1000edbc <__alt_data_end+0xf800edbc>
1000efe4:	8c7fff84 	addi	r17,r17,-2
1000efe8:	1d47883a 	add	r3,r3,r21
1000efec:	003f7406 	br	1000edc0 <__alt_data_end+0xf800edc0>
1000eff0:	1cc7883a 	add	r3,r3,r19
1000eff4:	003ecd06 	br	1000eb2c <__alt_data_end+0xf800eb2c>
1000eff8:	8005883a 	mov	r2,r16
1000effc:	003ef806 	br	1000ebe0 <__alt_data_end+0xf800ebe0>
1000f000:	873fe736 	bltu	r16,fp,1000efa0 <__alt_data_end+0xf800efa0>
1000f004:	e00f883a 	mov	r7,fp
1000f008:	0009883a 	mov	r4,zero
1000f00c:	003fad06 	br	1000eec4 <__alt_data_end+0xf800eec4>

1000f010 <__divsi3>:
1000f010:	20001b16 	blt	r4,zero,1000f080 <__divsi3+0x70>
1000f014:	000f883a 	mov	r7,zero
1000f018:	28001616 	blt	r5,zero,1000f074 <__divsi3+0x64>
1000f01c:	200d883a 	mov	r6,r4
1000f020:	29001a2e 	bgeu	r5,r4,1000f08c <__divsi3+0x7c>
1000f024:	00800804 	movi	r2,32
1000f028:	00c00044 	movi	r3,1
1000f02c:	00000106 	br	1000f034 <__divsi3+0x24>
1000f030:	10000d26 	beq	r2,zero,1000f068 <__divsi3+0x58>
1000f034:	294b883a 	add	r5,r5,r5
1000f038:	10bfffc4 	addi	r2,r2,-1
1000f03c:	18c7883a 	add	r3,r3,r3
1000f040:	293ffb36 	bltu	r5,r4,1000f030 <__alt_data_end+0xf800f030>
1000f044:	0005883a 	mov	r2,zero
1000f048:	18000726 	beq	r3,zero,1000f068 <__divsi3+0x58>
1000f04c:	0005883a 	mov	r2,zero
1000f050:	31400236 	bltu	r6,r5,1000f05c <__divsi3+0x4c>
1000f054:	314dc83a 	sub	r6,r6,r5
1000f058:	10c4b03a 	or	r2,r2,r3
1000f05c:	1806d07a 	srli	r3,r3,1
1000f060:	280ad07a 	srli	r5,r5,1
1000f064:	183ffa1e 	bne	r3,zero,1000f050 <__alt_data_end+0xf800f050>
1000f068:	38000126 	beq	r7,zero,1000f070 <__divsi3+0x60>
1000f06c:	0085c83a 	sub	r2,zero,r2
1000f070:	f800283a 	ret
1000f074:	014bc83a 	sub	r5,zero,r5
1000f078:	39c0005c 	xori	r7,r7,1
1000f07c:	003fe706 	br	1000f01c <__alt_data_end+0xf800f01c>
1000f080:	0109c83a 	sub	r4,zero,r4
1000f084:	01c00044 	movi	r7,1
1000f088:	003fe306 	br	1000f018 <__alt_data_end+0xf800f018>
1000f08c:	00c00044 	movi	r3,1
1000f090:	003fee06 	br	1000f04c <__alt_data_end+0xf800f04c>

1000f094 <__modsi3>:
1000f094:	20001716 	blt	r4,zero,1000f0f4 <__modsi3+0x60>
1000f098:	000f883a 	mov	r7,zero
1000f09c:	2005883a 	mov	r2,r4
1000f0a0:	28001216 	blt	r5,zero,1000f0ec <__modsi3+0x58>
1000f0a4:	2900162e 	bgeu	r5,r4,1000f100 <__modsi3+0x6c>
1000f0a8:	01800804 	movi	r6,32
1000f0ac:	00c00044 	movi	r3,1
1000f0b0:	00000106 	br	1000f0b8 <__modsi3+0x24>
1000f0b4:	30000a26 	beq	r6,zero,1000f0e0 <__modsi3+0x4c>
1000f0b8:	294b883a 	add	r5,r5,r5
1000f0bc:	31bfffc4 	addi	r6,r6,-1
1000f0c0:	18c7883a 	add	r3,r3,r3
1000f0c4:	293ffb36 	bltu	r5,r4,1000f0b4 <__alt_data_end+0xf800f0b4>
1000f0c8:	18000526 	beq	r3,zero,1000f0e0 <__modsi3+0x4c>
1000f0cc:	1806d07a 	srli	r3,r3,1
1000f0d0:	11400136 	bltu	r2,r5,1000f0d8 <__modsi3+0x44>
1000f0d4:	1145c83a 	sub	r2,r2,r5
1000f0d8:	280ad07a 	srli	r5,r5,1
1000f0dc:	183ffb1e 	bne	r3,zero,1000f0cc <__alt_data_end+0xf800f0cc>
1000f0e0:	38000126 	beq	r7,zero,1000f0e8 <__modsi3+0x54>
1000f0e4:	0085c83a 	sub	r2,zero,r2
1000f0e8:	f800283a 	ret
1000f0ec:	014bc83a 	sub	r5,zero,r5
1000f0f0:	003fec06 	br	1000f0a4 <__alt_data_end+0xf800f0a4>
1000f0f4:	0109c83a 	sub	r4,zero,r4
1000f0f8:	01c00044 	movi	r7,1
1000f0fc:	003fe706 	br	1000f09c <__alt_data_end+0xf800f09c>
1000f100:	00c00044 	movi	r3,1
1000f104:	003ff106 	br	1000f0cc <__alt_data_end+0xf800f0cc>

1000f108 <__udivsi3>:
1000f108:	200d883a 	mov	r6,r4
1000f10c:	2900152e 	bgeu	r5,r4,1000f164 <__udivsi3+0x5c>
1000f110:	28001416 	blt	r5,zero,1000f164 <__udivsi3+0x5c>
1000f114:	00800804 	movi	r2,32
1000f118:	00c00044 	movi	r3,1
1000f11c:	00000206 	br	1000f128 <__udivsi3+0x20>
1000f120:	10000e26 	beq	r2,zero,1000f15c <__udivsi3+0x54>
1000f124:	28000516 	blt	r5,zero,1000f13c <__udivsi3+0x34>
1000f128:	294b883a 	add	r5,r5,r5
1000f12c:	10bfffc4 	addi	r2,r2,-1
1000f130:	18c7883a 	add	r3,r3,r3
1000f134:	293ffa36 	bltu	r5,r4,1000f120 <__alt_data_end+0xf800f120>
1000f138:	18000826 	beq	r3,zero,1000f15c <__udivsi3+0x54>
1000f13c:	0005883a 	mov	r2,zero
1000f140:	31400236 	bltu	r6,r5,1000f14c <__udivsi3+0x44>
1000f144:	314dc83a 	sub	r6,r6,r5
1000f148:	10c4b03a 	or	r2,r2,r3
1000f14c:	1806d07a 	srli	r3,r3,1
1000f150:	280ad07a 	srli	r5,r5,1
1000f154:	183ffa1e 	bne	r3,zero,1000f140 <__alt_data_end+0xf800f140>
1000f158:	f800283a 	ret
1000f15c:	0005883a 	mov	r2,zero
1000f160:	f800283a 	ret
1000f164:	00c00044 	movi	r3,1
1000f168:	003ff406 	br	1000f13c <__alt_data_end+0xf800f13c>

1000f16c <__umodsi3>:
1000f16c:	2005883a 	mov	r2,r4
1000f170:	2900122e 	bgeu	r5,r4,1000f1bc <__umodsi3+0x50>
1000f174:	28001116 	blt	r5,zero,1000f1bc <__umodsi3+0x50>
1000f178:	01800804 	movi	r6,32
1000f17c:	00c00044 	movi	r3,1
1000f180:	00000206 	br	1000f18c <__umodsi3+0x20>
1000f184:	30000c26 	beq	r6,zero,1000f1b8 <__umodsi3+0x4c>
1000f188:	28000516 	blt	r5,zero,1000f1a0 <__umodsi3+0x34>
1000f18c:	294b883a 	add	r5,r5,r5
1000f190:	31bfffc4 	addi	r6,r6,-1
1000f194:	18c7883a 	add	r3,r3,r3
1000f198:	293ffa36 	bltu	r5,r4,1000f184 <__alt_data_end+0xf800f184>
1000f19c:	18000626 	beq	r3,zero,1000f1b8 <__umodsi3+0x4c>
1000f1a0:	1806d07a 	srli	r3,r3,1
1000f1a4:	11400136 	bltu	r2,r5,1000f1ac <__umodsi3+0x40>
1000f1a8:	1145c83a 	sub	r2,r2,r5
1000f1ac:	280ad07a 	srli	r5,r5,1
1000f1b0:	183ffb1e 	bne	r3,zero,1000f1a0 <__alt_data_end+0xf800f1a0>
1000f1b4:	f800283a 	ret
1000f1b8:	f800283a 	ret
1000f1bc:	00c00044 	movi	r3,1
1000f1c0:	003ff706 	br	1000f1a0 <__alt_data_end+0xf800f1a0>

1000f1c4 <__adddf3>:
1000f1c4:	02c00434 	movhi	r11,16
1000f1c8:	5affffc4 	addi	r11,r11,-1
1000f1cc:	2806d7fa 	srli	r3,r5,31
1000f1d0:	2ad4703a 	and	r10,r5,r11
1000f1d4:	3ad2703a 	and	r9,r7,r11
1000f1d8:	3804d53a 	srli	r2,r7,20
1000f1dc:	3018d77a 	srli	r12,r6,29
1000f1e0:	280ad53a 	srli	r5,r5,20
1000f1e4:	501490fa 	slli	r10,r10,3
1000f1e8:	2010d77a 	srli	r8,r4,29
1000f1ec:	481290fa 	slli	r9,r9,3
1000f1f0:	380ed7fa 	srli	r7,r7,31
1000f1f4:	defffb04 	addi	sp,sp,-20
1000f1f8:	dc800215 	stw	r18,8(sp)
1000f1fc:	dc400115 	stw	r17,4(sp)
1000f200:	dc000015 	stw	r16,0(sp)
1000f204:	dfc00415 	stw	ra,16(sp)
1000f208:	dcc00315 	stw	r19,12(sp)
1000f20c:	1c803fcc 	andi	r18,r3,255
1000f210:	2c01ffcc 	andi	r16,r5,2047
1000f214:	5210b03a 	or	r8,r10,r8
1000f218:	202290fa 	slli	r17,r4,3
1000f21c:	1081ffcc 	andi	r2,r2,2047
1000f220:	4b12b03a 	or	r9,r9,r12
1000f224:	300c90fa 	slli	r6,r6,3
1000f228:	91c07526 	beq	r18,r7,1000f400 <__adddf3+0x23c>
1000f22c:	8087c83a 	sub	r3,r16,r2
1000f230:	00c0ab0e 	bge	zero,r3,1000f4e0 <__adddf3+0x31c>
1000f234:	10002a1e 	bne	r2,zero,1000f2e0 <__adddf3+0x11c>
1000f238:	4984b03a 	or	r2,r9,r6
1000f23c:	1000961e 	bne	r2,zero,1000f498 <__adddf3+0x2d4>
1000f240:	888001cc 	andi	r2,r17,7
1000f244:	10000726 	beq	r2,zero,1000f264 <__adddf3+0xa0>
1000f248:	888003cc 	andi	r2,r17,15
1000f24c:	00c00104 	movi	r3,4
1000f250:	10c00426 	beq	r2,r3,1000f264 <__adddf3+0xa0>
1000f254:	88c7883a 	add	r3,r17,r3
1000f258:	1c63803a 	cmpltu	r17,r3,r17
1000f25c:	4451883a 	add	r8,r8,r17
1000f260:	1823883a 	mov	r17,r3
1000f264:	4080202c 	andhi	r2,r8,128
1000f268:	10005926 	beq	r2,zero,1000f3d0 <__adddf3+0x20c>
1000f26c:	84000044 	addi	r16,r16,1
1000f270:	0081ffc4 	movi	r2,2047
1000f274:	8080ba26 	beq	r16,r2,1000f560 <__adddf3+0x39c>
1000f278:	00bfe034 	movhi	r2,65408
1000f27c:	10bfffc4 	addi	r2,r2,-1
1000f280:	4090703a 	and	r8,r8,r2
1000f284:	4004977a 	slli	r2,r8,29
1000f288:	4010927a 	slli	r8,r8,9
1000f28c:	8822d0fa 	srli	r17,r17,3
1000f290:	8401ffcc 	andi	r16,r16,2047
1000f294:	4010d33a 	srli	r8,r8,12
1000f298:	9007883a 	mov	r3,r18
1000f29c:	1444b03a 	or	r2,r2,r17
1000f2a0:	8401ffcc 	andi	r16,r16,2047
1000f2a4:	8020953a 	slli	r16,r16,20
1000f2a8:	18c03fcc 	andi	r3,r3,255
1000f2ac:	01000434 	movhi	r4,16
1000f2b0:	213fffc4 	addi	r4,r4,-1
1000f2b4:	180697fa 	slli	r3,r3,31
1000f2b8:	4110703a 	and	r8,r8,r4
1000f2bc:	4410b03a 	or	r8,r8,r16
1000f2c0:	40c6b03a 	or	r3,r8,r3
1000f2c4:	dfc00417 	ldw	ra,16(sp)
1000f2c8:	dcc00317 	ldw	r19,12(sp)
1000f2cc:	dc800217 	ldw	r18,8(sp)
1000f2d0:	dc400117 	ldw	r17,4(sp)
1000f2d4:	dc000017 	ldw	r16,0(sp)
1000f2d8:	dec00504 	addi	sp,sp,20
1000f2dc:	f800283a 	ret
1000f2e0:	0081ffc4 	movi	r2,2047
1000f2e4:	80bfd626 	beq	r16,r2,1000f240 <__alt_data_end+0xf800f240>
1000f2e8:	4a402034 	orhi	r9,r9,128
1000f2ec:	00800e04 	movi	r2,56
1000f2f0:	10c09f16 	blt	r2,r3,1000f570 <__adddf3+0x3ac>
1000f2f4:	008007c4 	movi	r2,31
1000f2f8:	10c0c216 	blt	r2,r3,1000f604 <__adddf3+0x440>
1000f2fc:	00800804 	movi	r2,32
1000f300:	10c5c83a 	sub	r2,r2,r3
1000f304:	488a983a 	sll	r5,r9,r2
1000f308:	30c8d83a 	srl	r4,r6,r3
1000f30c:	3084983a 	sll	r2,r6,r2
1000f310:	48c6d83a 	srl	r3,r9,r3
1000f314:	290cb03a 	or	r6,r5,r4
1000f318:	1004c03a 	cmpne	r2,r2,zero
1000f31c:	308cb03a 	or	r6,r6,r2
1000f320:	898dc83a 	sub	r6,r17,r6
1000f324:	89a3803a 	cmpltu	r17,r17,r6
1000f328:	40d1c83a 	sub	r8,r8,r3
1000f32c:	4451c83a 	sub	r8,r8,r17
1000f330:	3023883a 	mov	r17,r6
1000f334:	4080202c 	andhi	r2,r8,128
1000f338:	10002326 	beq	r2,zero,1000f3c8 <__adddf3+0x204>
1000f33c:	04c02034 	movhi	r19,128
1000f340:	9cffffc4 	addi	r19,r19,-1
1000f344:	44e6703a 	and	r19,r8,r19
1000f348:	98007626 	beq	r19,zero,1000f524 <__adddf3+0x360>
1000f34c:	9809883a 	mov	r4,r19
1000f350:	0011a040 	call	10011a04 <__clzsi2>
1000f354:	10fffe04 	addi	r3,r2,-8
1000f358:	010007c4 	movi	r4,31
1000f35c:	20c07716 	blt	r4,r3,1000f53c <__adddf3+0x378>
1000f360:	00800804 	movi	r2,32
1000f364:	10c5c83a 	sub	r2,r2,r3
1000f368:	8884d83a 	srl	r2,r17,r2
1000f36c:	98d0983a 	sll	r8,r19,r3
1000f370:	88e2983a 	sll	r17,r17,r3
1000f374:	1204b03a 	or	r2,r2,r8
1000f378:	1c007416 	blt	r3,r16,1000f54c <__adddf3+0x388>
1000f37c:	1c21c83a 	sub	r16,r3,r16
1000f380:	82000044 	addi	r8,r16,1
1000f384:	00c007c4 	movi	r3,31
1000f388:	1a009116 	blt	r3,r8,1000f5d0 <__adddf3+0x40c>
1000f38c:	00c00804 	movi	r3,32
1000f390:	1a07c83a 	sub	r3,r3,r8
1000f394:	8a08d83a 	srl	r4,r17,r8
1000f398:	88e2983a 	sll	r17,r17,r3
1000f39c:	10c6983a 	sll	r3,r2,r3
1000f3a0:	1210d83a 	srl	r8,r2,r8
1000f3a4:	8804c03a 	cmpne	r2,r17,zero
1000f3a8:	1906b03a 	or	r3,r3,r4
1000f3ac:	18a2b03a 	or	r17,r3,r2
1000f3b0:	0021883a 	mov	r16,zero
1000f3b4:	003fa206 	br	1000f240 <__alt_data_end+0xf800f240>
1000f3b8:	1890b03a 	or	r8,r3,r2
1000f3bc:	40017d26 	beq	r8,zero,1000f9b4 <__adddf3+0x7f0>
1000f3c0:	1011883a 	mov	r8,r2
1000f3c4:	1823883a 	mov	r17,r3
1000f3c8:	888001cc 	andi	r2,r17,7
1000f3cc:	103f9e1e 	bne	r2,zero,1000f248 <__alt_data_end+0xf800f248>
1000f3d0:	4004977a 	slli	r2,r8,29
1000f3d4:	8822d0fa 	srli	r17,r17,3
1000f3d8:	4010d0fa 	srli	r8,r8,3
1000f3dc:	9007883a 	mov	r3,r18
1000f3e0:	1444b03a 	or	r2,r2,r17
1000f3e4:	0101ffc4 	movi	r4,2047
1000f3e8:	81002426 	beq	r16,r4,1000f47c <__adddf3+0x2b8>
1000f3ec:	8120703a 	and	r16,r16,r4
1000f3f0:	01000434 	movhi	r4,16
1000f3f4:	213fffc4 	addi	r4,r4,-1
1000f3f8:	4110703a 	and	r8,r8,r4
1000f3fc:	003fa806 	br	1000f2a0 <__alt_data_end+0xf800f2a0>
1000f400:	8089c83a 	sub	r4,r16,r2
1000f404:	01005e0e 	bge	zero,r4,1000f580 <__adddf3+0x3bc>
1000f408:	10002b26 	beq	r2,zero,1000f4b8 <__adddf3+0x2f4>
1000f40c:	0081ffc4 	movi	r2,2047
1000f410:	80bf8b26 	beq	r16,r2,1000f240 <__alt_data_end+0xf800f240>
1000f414:	4a402034 	orhi	r9,r9,128
1000f418:	00800e04 	movi	r2,56
1000f41c:	1100a40e 	bge	r2,r4,1000f6b0 <__adddf3+0x4ec>
1000f420:	498cb03a 	or	r6,r9,r6
1000f424:	300ac03a 	cmpne	r5,r6,zero
1000f428:	0013883a 	mov	r9,zero
1000f42c:	2c4b883a 	add	r5,r5,r17
1000f430:	2c63803a 	cmpltu	r17,r5,r17
1000f434:	4a11883a 	add	r8,r9,r8
1000f438:	8a11883a 	add	r8,r17,r8
1000f43c:	2823883a 	mov	r17,r5
1000f440:	4080202c 	andhi	r2,r8,128
1000f444:	103fe026 	beq	r2,zero,1000f3c8 <__alt_data_end+0xf800f3c8>
1000f448:	84000044 	addi	r16,r16,1
1000f44c:	0081ffc4 	movi	r2,2047
1000f450:	8080d226 	beq	r16,r2,1000f79c <__adddf3+0x5d8>
1000f454:	00bfe034 	movhi	r2,65408
1000f458:	10bfffc4 	addi	r2,r2,-1
1000f45c:	4090703a 	and	r8,r8,r2
1000f460:	880ad07a 	srli	r5,r17,1
1000f464:	400897fa 	slli	r4,r8,31
1000f468:	88c0004c 	andi	r3,r17,1
1000f46c:	28e2b03a 	or	r17,r5,r3
1000f470:	4010d07a 	srli	r8,r8,1
1000f474:	2462b03a 	or	r17,r4,r17
1000f478:	003f7106 	br	1000f240 <__alt_data_end+0xf800f240>
1000f47c:	4088b03a 	or	r4,r8,r2
1000f480:	20014526 	beq	r4,zero,1000f998 <__adddf3+0x7d4>
1000f484:	01000434 	movhi	r4,16
1000f488:	42000234 	orhi	r8,r8,8
1000f48c:	213fffc4 	addi	r4,r4,-1
1000f490:	4110703a 	and	r8,r8,r4
1000f494:	003f8206 	br	1000f2a0 <__alt_data_end+0xf800f2a0>
1000f498:	18ffffc4 	addi	r3,r3,-1
1000f49c:	1800491e 	bne	r3,zero,1000f5c4 <__adddf3+0x400>
1000f4a0:	898bc83a 	sub	r5,r17,r6
1000f4a4:	8963803a 	cmpltu	r17,r17,r5
1000f4a8:	4251c83a 	sub	r8,r8,r9
1000f4ac:	4451c83a 	sub	r8,r8,r17
1000f4b0:	2823883a 	mov	r17,r5
1000f4b4:	003f9f06 	br	1000f334 <__alt_data_end+0xf800f334>
1000f4b8:	4984b03a 	or	r2,r9,r6
1000f4bc:	103f6026 	beq	r2,zero,1000f240 <__alt_data_end+0xf800f240>
1000f4c0:	213fffc4 	addi	r4,r4,-1
1000f4c4:	2000931e 	bne	r4,zero,1000f714 <__adddf3+0x550>
1000f4c8:	898d883a 	add	r6,r17,r6
1000f4cc:	3463803a 	cmpltu	r17,r6,r17
1000f4d0:	4251883a 	add	r8,r8,r9
1000f4d4:	8a11883a 	add	r8,r17,r8
1000f4d8:	3023883a 	mov	r17,r6
1000f4dc:	003fd806 	br	1000f440 <__alt_data_end+0xf800f440>
1000f4e0:	1800541e 	bne	r3,zero,1000f634 <__adddf3+0x470>
1000f4e4:	80800044 	addi	r2,r16,1
1000f4e8:	1081ffcc 	andi	r2,r2,2047
1000f4ec:	00c00044 	movi	r3,1
1000f4f0:	1880a00e 	bge	r3,r2,1000f774 <__adddf3+0x5b0>
1000f4f4:	8989c83a 	sub	r4,r17,r6
1000f4f8:	8905803a 	cmpltu	r2,r17,r4
1000f4fc:	4267c83a 	sub	r19,r8,r9
1000f500:	98a7c83a 	sub	r19,r19,r2
1000f504:	9880202c 	andhi	r2,r19,128
1000f508:	10006326 	beq	r2,zero,1000f698 <__adddf3+0x4d4>
1000f50c:	3463c83a 	sub	r17,r6,r17
1000f510:	4a07c83a 	sub	r3,r9,r8
1000f514:	344d803a 	cmpltu	r6,r6,r17
1000f518:	19a7c83a 	sub	r19,r3,r6
1000f51c:	3825883a 	mov	r18,r7
1000f520:	983f8a1e 	bne	r19,zero,1000f34c <__alt_data_end+0xf800f34c>
1000f524:	8809883a 	mov	r4,r17
1000f528:	0011a040 	call	10011a04 <__clzsi2>
1000f52c:	10800804 	addi	r2,r2,32
1000f530:	10fffe04 	addi	r3,r2,-8
1000f534:	010007c4 	movi	r4,31
1000f538:	20ff890e 	bge	r4,r3,1000f360 <__alt_data_end+0xf800f360>
1000f53c:	10bff604 	addi	r2,r2,-40
1000f540:	8884983a 	sll	r2,r17,r2
1000f544:	0023883a 	mov	r17,zero
1000f548:	1c3f8c0e 	bge	r3,r16,1000f37c <__alt_data_end+0xf800f37c>
1000f54c:	023fe034 	movhi	r8,65408
1000f550:	423fffc4 	addi	r8,r8,-1
1000f554:	80e1c83a 	sub	r16,r16,r3
1000f558:	1210703a 	and	r8,r2,r8
1000f55c:	003f3806 	br	1000f240 <__alt_data_end+0xf800f240>
1000f560:	9007883a 	mov	r3,r18
1000f564:	0011883a 	mov	r8,zero
1000f568:	0005883a 	mov	r2,zero
1000f56c:	003f4c06 	br	1000f2a0 <__alt_data_end+0xf800f2a0>
1000f570:	498cb03a 	or	r6,r9,r6
1000f574:	300cc03a 	cmpne	r6,r6,zero
1000f578:	0007883a 	mov	r3,zero
1000f57c:	003f6806 	br	1000f320 <__alt_data_end+0xf800f320>
1000f580:	20009c1e 	bne	r4,zero,1000f7f4 <__adddf3+0x630>
1000f584:	80800044 	addi	r2,r16,1
1000f588:	1141ffcc 	andi	r5,r2,2047
1000f58c:	01000044 	movi	r4,1
1000f590:	2140670e 	bge	r4,r5,1000f730 <__adddf3+0x56c>
1000f594:	0101ffc4 	movi	r4,2047
1000f598:	11007f26 	beq	r2,r4,1000f798 <__adddf3+0x5d4>
1000f59c:	898d883a 	add	r6,r17,r6
1000f5a0:	4247883a 	add	r3,r8,r9
1000f5a4:	3451803a 	cmpltu	r8,r6,r17
1000f5a8:	40d1883a 	add	r8,r8,r3
1000f5ac:	402297fa 	slli	r17,r8,31
1000f5b0:	300cd07a 	srli	r6,r6,1
1000f5b4:	4010d07a 	srli	r8,r8,1
1000f5b8:	1021883a 	mov	r16,r2
1000f5bc:	89a2b03a 	or	r17,r17,r6
1000f5c0:	003f1f06 	br	1000f240 <__alt_data_end+0xf800f240>
1000f5c4:	0081ffc4 	movi	r2,2047
1000f5c8:	80bf481e 	bne	r16,r2,1000f2ec <__alt_data_end+0xf800f2ec>
1000f5cc:	003f1c06 	br	1000f240 <__alt_data_end+0xf800f240>
1000f5d0:	843ff844 	addi	r16,r16,-31
1000f5d4:	01000804 	movi	r4,32
1000f5d8:	1406d83a 	srl	r3,r2,r16
1000f5dc:	41005026 	beq	r8,r4,1000f720 <__adddf3+0x55c>
1000f5e0:	01001004 	movi	r4,64
1000f5e4:	2211c83a 	sub	r8,r4,r8
1000f5e8:	1204983a 	sll	r2,r2,r8
1000f5ec:	88a2b03a 	or	r17,r17,r2
1000f5f0:	8822c03a 	cmpne	r17,r17,zero
1000f5f4:	1c62b03a 	or	r17,r3,r17
1000f5f8:	0011883a 	mov	r8,zero
1000f5fc:	0021883a 	mov	r16,zero
1000f600:	003f7106 	br	1000f3c8 <__alt_data_end+0xf800f3c8>
1000f604:	193ff804 	addi	r4,r3,-32
1000f608:	00800804 	movi	r2,32
1000f60c:	4908d83a 	srl	r4,r9,r4
1000f610:	18804526 	beq	r3,r2,1000f728 <__adddf3+0x564>
1000f614:	00801004 	movi	r2,64
1000f618:	10c5c83a 	sub	r2,r2,r3
1000f61c:	4886983a 	sll	r3,r9,r2
1000f620:	198cb03a 	or	r6,r3,r6
1000f624:	300cc03a 	cmpne	r6,r6,zero
1000f628:	218cb03a 	or	r6,r4,r6
1000f62c:	0007883a 	mov	r3,zero
1000f630:	003f3b06 	br	1000f320 <__alt_data_end+0xf800f320>
1000f634:	80002a26 	beq	r16,zero,1000f6e0 <__adddf3+0x51c>
1000f638:	0101ffc4 	movi	r4,2047
1000f63c:	11006826 	beq	r2,r4,1000f7e0 <__adddf3+0x61c>
1000f640:	00c7c83a 	sub	r3,zero,r3
1000f644:	42002034 	orhi	r8,r8,128
1000f648:	01000e04 	movi	r4,56
1000f64c:	20c07c16 	blt	r4,r3,1000f840 <__adddf3+0x67c>
1000f650:	010007c4 	movi	r4,31
1000f654:	20c0da16 	blt	r4,r3,1000f9c0 <__adddf3+0x7fc>
1000f658:	01000804 	movi	r4,32
1000f65c:	20c9c83a 	sub	r4,r4,r3
1000f660:	4114983a 	sll	r10,r8,r4
1000f664:	88cad83a 	srl	r5,r17,r3
1000f668:	8908983a 	sll	r4,r17,r4
1000f66c:	40c6d83a 	srl	r3,r8,r3
1000f670:	5162b03a 	or	r17,r10,r5
1000f674:	2008c03a 	cmpne	r4,r4,zero
1000f678:	8922b03a 	or	r17,r17,r4
1000f67c:	3463c83a 	sub	r17,r6,r17
1000f680:	48c7c83a 	sub	r3,r9,r3
1000f684:	344d803a 	cmpltu	r6,r6,r17
1000f688:	1991c83a 	sub	r8,r3,r6
1000f68c:	1021883a 	mov	r16,r2
1000f690:	3825883a 	mov	r18,r7
1000f694:	003f2706 	br	1000f334 <__alt_data_end+0xf800f334>
1000f698:	24d0b03a 	or	r8,r4,r19
1000f69c:	40001b1e 	bne	r8,zero,1000f70c <__adddf3+0x548>
1000f6a0:	0005883a 	mov	r2,zero
1000f6a4:	0007883a 	mov	r3,zero
1000f6a8:	0021883a 	mov	r16,zero
1000f6ac:	003f4d06 	br	1000f3e4 <__alt_data_end+0xf800f3e4>
1000f6b0:	008007c4 	movi	r2,31
1000f6b4:	11003c16 	blt	r2,r4,1000f7a8 <__adddf3+0x5e4>
1000f6b8:	00800804 	movi	r2,32
1000f6bc:	1105c83a 	sub	r2,r2,r4
1000f6c0:	488e983a 	sll	r7,r9,r2
1000f6c4:	310ad83a 	srl	r5,r6,r4
1000f6c8:	3084983a 	sll	r2,r6,r2
1000f6cc:	4912d83a 	srl	r9,r9,r4
1000f6d0:	394ab03a 	or	r5,r7,r5
1000f6d4:	1004c03a 	cmpne	r2,r2,zero
1000f6d8:	288ab03a 	or	r5,r5,r2
1000f6dc:	003f5306 	br	1000f42c <__alt_data_end+0xf800f42c>
1000f6e0:	4448b03a 	or	r4,r8,r17
1000f6e4:	20003e26 	beq	r4,zero,1000f7e0 <__adddf3+0x61c>
1000f6e8:	00c6303a 	nor	r3,zero,r3
1000f6ec:	18003a1e 	bne	r3,zero,1000f7d8 <__adddf3+0x614>
1000f6f0:	3463c83a 	sub	r17,r6,r17
1000f6f4:	4a07c83a 	sub	r3,r9,r8
1000f6f8:	344d803a 	cmpltu	r6,r6,r17
1000f6fc:	1991c83a 	sub	r8,r3,r6
1000f700:	1021883a 	mov	r16,r2
1000f704:	3825883a 	mov	r18,r7
1000f708:	003f0a06 	br	1000f334 <__alt_data_end+0xf800f334>
1000f70c:	2023883a 	mov	r17,r4
1000f710:	003f0d06 	br	1000f348 <__alt_data_end+0xf800f348>
1000f714:	0081ffc4 	movi	r2,2047
1000f718:	80bf3f1e 	bne	r16,r2,1000f418 <__alt_data_end+0xf800f418>
1000f71c:	003ec806 	br	1000f240 <__alt_data_end+0xf800f240>
1000f720:	0005883a 	mov	r2,zero
1000f724:	003fb106 	br	1000f5ec <__alt_data_end+0xf800f5ec>
1000f728:	0007883a 	mov	r3,zero
1000f72c:	003fbc06 	br	1000f620 <__alt_data_end+0xf800f620>
1000f730:	4444b03a 	or	r2,r8,r17
1000f734:	8000871e 	bne	r16,zero,1000f954 <__adddf3+0x790>
1000f738:	1000ba26 	beq	r2,zero,1000fa24 <__adddf3+0x860>
1000f73c:	4984b03a 	or	r2,r9,r6
1000f740:	103ebf26 	beq	r2,zero,1000f240 <__alt_data_end+0xf800f240>
1000f744:	8985883a 	add	r2,r17,r6
1000f748:	4247883a 	add	r3,r8,r9
1000f74c:	1451803a 	cmpltu	r8,r2,r17
1000f750:	40d1883a 	add	r8,r8,r3
1000f754:	40c0202c 	andhi	r3,r8,128
1000f758:	1023883a 	mov	r17,r2
1000f75c:	183f1a26 	beq	r3,zero,1000f3c8 <__alt_data_end+0xf800f3c8>
1000f760:	00bfe034 	movhi	r2,65408
1000f764:	10bfffc4 	addi	r2,r2,-1
1000f768:	2021883a 	mov	r16,r4
1000f76c:	4090703a 	and	r8,r8,r2
1000f770:	003eb306 	br	1000f240 <__alt_data_end+0xf800f240>
1000f774:	4444b03a 	or	r2,r8,r17
1000f778:	8000291e 	bne	r16,zero,1000f820 <__adddf3+0x65c>
1000f77c:	10004b1e 	bne	r2,zero,1000f8ac <__adddf3+0x6e8>
1000f780:	4990b03a 	or	r8,r9,r6
1000f784:	40008b26 	beq	r8,zero,1000f9b4 <__adddf3+0x7f0>
1000f788:	4811883a 	mov	r8,r9
1000f78c:	3023883a 	mov	r17,r6
1000f790:	3825883a 	mov	r18,r7
1000f794:	003eaa06 	br	1000f240 <__alt_data_end+0xf800f240>
1000f798:	1021883a 	mov	r16,r2
1000f79c:	0011883a 	mov	r8,zero
1000f7a0:	0005883a 	mov	r2,zero
1000f7a4:	003f0f06 	br	1000f3e4 <__alt_data_end+0xf800f3e4>
1000f7a8:	217ff804 	addi	r5,r4,-32
1000f7ac:	00800804 	movi	r2,32
1000f7b0:	494ad83a 	srl	r5,r9,r5
1000f7b4:	20807d26 	beq	r4,r2,1000f9ac <__adddf3+0x7e8>
1000f7b8:	00801004 	movi	r2,64
1000f7bc:	1109c83a 	sub	r4,r2,r4
1000f7c0:	4912983a 	sll	r9,r9,r4
1000f7c4:	498cb03a 	or	r6,r9,r6
1000f7c8:	300cc03a 	cmpne	r6,r6,zero
1000f7cc:	298ab03a 	or	r5,r5,r6
1000f7d0:	0013883a 	mov	r9,zero
1000f7d4:	003f1506 	br	1000f42c <__alt_data_end+0xf800f42c>
1000f7d8:	0101ffc4 	movi	r4,2047
1000f7dc:	113f9a1e 	bne	r2,r4,1000f648 <__alt_data_end+0xf800f648>
1000f7e0:	4811883a 	mov	r8,r9
1000f7e4:	3023883a 	mov	r17,r6
1000f7e8:	1021883a 	mov	r16,r2
1000f7ec:	3825883a 	mov	r18,r7
1000f7f0:	003e9306 	br	1000f240 <__alt_data_end+0xf800f240>
1000f7f4:	8000161e 	bne	r16,zero,1000f850 <__adddf3+0x68c>
1000f7f8:	444ab03a 	or	r5,r8,r17
1000f7fc:	28005126 	beq	r5,zero,1000f944 <__adddf3+0x780>
1000f800:	0108303a 	nor	r4,zero,r4
1000f804:	20004d1e 	bne	r4,zero,1000f93c <__adddf3+0x778>
1000f808:	89a3883a 	add	r17,r17,r6
1000f80c:	4253883a 	add	r9,r8,r9
1000f810:	898d803a 	cmpltu	r6,r17,r6
1000f814:	3251883a 	add	r8,r6,r9
1000f818:	1021883a 	mov	r16,r2
1000f81c:	003f0806 	br	1000f440 <__alt_data_end+0xf800f440>
1000f820:	1000301e 	bne	r2,zero,1000f8e4 <__adddf3+0x720>
1000f824:	4984b03a 	or	r2,r9,r6
1000f828:	10007126 	beq	r2,zero,1000f9f0 <__adddf3+0x82c>
1000f82c:	4811883a 	mov	r8,r9
1000f830:	3023883a 	mov	r17,r6
1000f834:	3825883a 	mov	r18,r7
1000f838:	0401ffc4 	movi	r16,2047
1000f83c:	003e8006 	br	1000f240 <__alt_data_end+0xf800f240>
1000f840:	4462b03a 	or	r17,r8,r17
1000f844:	8822c03a 	cmpne	r17,r17,zero
1000f848:	0007883a 	mov	r3,zero
1000f84c:	003f8b06 	br	1000f67c <__alt_data_end+0xf800f67c>
1000f850:	0141ffc4 	movi	r5,2047
1000f854:	11403b26 	beq	r2,r5,1000f944 <__adddf3+0x780>
1000f858:	0109c83a 	sub	r4,zero,r4
1000f85c:	42002034 	orhi	r8,r8,128
1000f860:	01400e04 	movi	r5,56
1000f864:	29006716 	blt	r5,r4,1000fa04 <__adddf3+0x840>
1000f868:	014007c4 	movi	r5,31
1000f86c:	29007016 	blt	r5,r4,1000fa30 <__adddf3+0x86c>
1000f870:	01400804 	movi	r5,32
1000f874:	290bc83a 	sub	r5,r5,r4
1000f878:	4154983a 	sll	r10,r8,r5
1000f87c:	890ed83a 	srl	r7,r17,r4
1000f880:	894a983a 	sll	r5,r17,r5
1000f884:	4108d83a 	srl	r4,r8,r4
1000f888:	51e2b03a 	or	r17,r10,r7
1000f88c:	280ac03a 	cmpne	r5,r5,zero
1000f890:	8962b03a 	or	r17,r17,r5
1000f894:	89a3883a 	add	r17,r17,r6
1000f898:	2253883a 	add	r9,r4,r9
1000f89c:	898d803a 	cmpltu	r6,r17,r6
1000f8a0:	3251883a 	add	r8,r6,r9
1000f8a4:	1021883a 	mov	r16,r2
1000f8a8:	003ee506 	br	1000f440 <__alt_data_end+0xf800f440>
1000f8ac:	4984b03a 	or	r2,r9,r6
1000f8b0:	103e6326 	beq	r2,zero,1000f240 <__alt_data_end+0xf800f240>
1000f8b4:	8987c83a 	sub	r3,r17,r6
1000f8b8:	88c9803a 	cmpltu	r4,r17,r3
1000f8bc:	4245c83a 	sub	r2,r8,r9
1000f8c0:	1105c83a 	sub	r2,r2,r4
1000f8c4:	1100202c 	andhi	r4,r2,128
1000f8c8:	203ebb26 	beq	r4,zero,1000f3b8 <__alt_data_end+0xf800f3b8>
1000f8cc:	3463c83a 	sub	r17,r6,r17
1000f8d0:	4a07c83a 	sub	r3,r9,r8
1000f8d4:	344d803a 	cmpltu	r6,r6,r17
1000f8d8:	1991c83a 	sub	r8,r3,r6
1000f8dc:	3825883a 	mov	r18,r7
1000f8e0:	003e5706 	br	1000f240 <__alt_data_end+0xf800f240>
1000f8e4:	4984b03a 	or	r2,r9,r6
1000f8e8:	10002e26 	beq	r2,zero,1000f9a4 <__adddf3+0x7e0>
1000f8ec:	4004d0fa 	srli	r2,r8,3
1000f8f0:	8822d0fa 	srli	r17,r17,3
1000f8f4:	4010977a 	slli	r8,r8,29
1000f8f8:	10c0022c 	andhi	r3,r2,8
1000f8fc:	4462b03a 	or	r17,r8,r17
1000f900:	18000826 	beq	r3,zero,1000f924 <__adddf3+0x760>
1000f904:	4808d0fa 	srli	r4,r9,3
1000f908:	20c0022c 	andhi	r3,r4,8
1000f90c:	1800051e 	bne	r3,zero,1000f924 <__adddf3+0x760>
1000f910:	300cd0fa 	srli	r6,r6,3
1000f914:	4806977a 	slli	r3,r9,29
1000f918:	2005883a 	mov	r2,r4
1000f91c:	3825883a 	mov	r18,r7
1000f920:	19a2b03a 	or	r17,r3,r6
1000f924:	8810d77a 	srli	r8,r17,29
1000f928:	100490fa 	slli	r2,r2,3
1000f92c:	882290fa 	slli	r17,r17,3
1000f930:	0401ffc4 	movi	r16,2047
1000f934:	4090b03a 	or	r8,r8,r2
1000f938:	003e4106 	br	1000f240 <__alt_data_end+0xf800f240>
1000f93c:	0141ffc4 	movi	r5,2047
1000f940:	117fc71e 	bne	r2,r5,1000f860 <__alt_data_end+0xf800f860>
1000f944:	4811883a 	mov	r8,r9
1000f948:	3023883a 	mov	r17,r6
1000f94c:	1021883a 	mov	r16,r2
1000f950:	003e3b06 	br	1000f240 <__alt_data_end+0xf800f240>
1000f954:	10002f26 	beq	r2,zero,1000fa14 <__adddf3+0x850>
1000f958:	4984b03a 	or	r2,r9,r6
1000f95c:	10001126 	beq	r2,zero,1000f9a4 <__adddf3+0x7e0>
1000f960:	4004d0fa 	srli	r2,r8,3
1000f964:	8822d0fa 	srli	r17,r17,3
1000f968:	4010977a 	slli	r8,r8,29
1000f96c:	10c0022c 	andhi	r3,r2,8
1000f970:	4462b03a 	or	r17,r8,r17
1000f974:	183feb26 	beq	r3,zero,1000f924 <__alt_data_end+0xf800f924>
1000f978:	4808d0fa 	srli	r4,r9,3
1000f97c:	20c0022c 	andhi	r3,r4,8
1000f980:	183fe81e 	bne	r3,zero,1000f924 <__alt_data_end+0xf800f924>
1000f984:	300cd0fa 	srli	r6,r6,3
1000f988:	4806977a 	slli	r3,r9,29
1000f98c:	2005883a 	mov	r2,r4
1000f990:	19a2b03a 	or	r17,r3,r6
1000f994:	003fe306 	br	1000f924 <__alt_data_end+0xf800f924>
1000f998:	0011883a 	mov	r8,zero
1000f99c:	0005883a 	mov	r2,zero
1000f9a0:	003e3f06 	br	1000f2a0 <__alt_data_end+0xf800f2a0>
1000f9a4:	0401ffc4 	movi	r16,2047
1000f9a8:	003e2506 	br	1000f240 <__alt_data_end+0xf800f240>
1000f9ac:	0013883a 	mov	r9,zero
1000f9b0:	003f8406 	br	1000f7c4 <__alt_data_end+0xf800f7c4>
1000f9b4:	0005883a 	mov	r2,zero
1000f9b8:	0007883a 	mov	r3,zero
1000f9bc:	003e8906 	br	1000f3e4 <__alt_data_end+0xf800f3e4>
1000f9c0:	197ff804 	addi	r5,r3,-32
1000f9c4:	01000804 	movi	r4,32
1000f9c8:	414ad83a 	srl	r5,r8,r5
1000f9cc:	19002426 	beq	r3,r4,1000fa60 <__adddf3+0x89c>
1000f9d0:	01001004 	movi	r4,64
1000f9d4:	20c7c83a 	sub	r3,r4,r3
1000f9d8:	40c6983a 	sll	r3,r8,r3
1000f9dc:	1c46b03a 	or	r3,r3,r17
1000f9e0:	1806c03a 	cmpne	r3,r3,zero
1000f9e4:	28e2b03a 	or	r17,r5,r3
1000f9e8:	0007883a 	mov	r3,zero
1000f9ec:	003f2306 	br	1000f67c <__alt_data_end+0xf800f67c>
1000f9f0:	0007883a 	mov	r3,zero
1000f9f4:	5811883a 	mov	r8,r11
1000f9f8:	00bfffc4 	movi	r2,-1
1000f9fc:	0401ffc4 	movi	r16,2047
1000fa00:	003e7806 	br	1000f3e4 <__alt_data_end+0xf800f3e4>
1000fa04:	4462b03a 	or	r17,r8,r17
1000fa08:	8822c03a 	cmpne	r17,r17,zero
1000fa0c:	0009883a 	mov	r4,zero
1000fa10:	003fa006 	br	1000f894 <__alt_data_end+0xf800f894>
1000fa14:	4811883a 	mov	r8,r9
1000fa18:	3023883a 	mov	r17,r6
1000fa1c:	0401ffc4 	movi	r16,2047
1000fa20:	003e0706 	br	1000f240 <__alt_data_end+0xf800f240>
1000fa24:	4811883a 	mov	r8,r9
1000fa28:	3023883a 	mov	r17,r6
1000fa2c:	003e0406 	br	1000f240 <__alt_data_end+0xf800f240>
1000fa30:	21fff804 	addi	r7,r4,-32
1000fa34:	01400804 	movi	r5,32
1000fa38:	41ced83a 	srl	r7,r8,r7
1000fa3c:	21400a26 	beq	r4,r5,1000fa68 <__adddf3+0x8a4>
1000fa40:	01401004 	movi	r5,64
1000fa44:	2909c83a 	sub	r4,r5,r4
1000fa48:	4108983a 	sll	r4,r8,r4
1000fa4c:	2448b03a 	or	r4,r4,r17
1000fa50:	2008c03a 	cmpne	r4,r4,zero
1000fa54:	3922b03a 	or	r17,r7,r4
1000fa58:	0009883a 	mov	r4,zero
1000fa5c:	003f8d06 	br	1000f894 <__alt_data_end+0xf800f894>
1000fa60:	0007883a 	mov	r3,zero
1000fa64:	003fdd06 	br	1000f9dc <__alt_data_end+0xf800f9dc>
1000fa68:	0009883a 	mov	r4,zero
1000fa6c:	003ff706 	br	1000fa4c <__alt_data_end+0xf800fa4c>

1000fa70 <__divdf3>:
1000fa70:	defff004 	addi	sp,sp,-64
1000fa74:	dc800815 	stw	r18,32(sp)
1000fa78:	2824d53a 	srli	r18,r5,20
1000fa7c:	dd800c15 	stw	r22,48(sp)
1000fa80:	282cd7fa 	srli	r22,r5,31
1000fa84:	dc000615 	stw	r16,24(sp)
1000fa88:	04000434 	movhi	r16,16
1000fa8c:	843fffc4 	addi	r16,r16,-1
1000fa90:	dfc00f15 	stw	ra,60(sp)
1000fa94:	df000e15 	stw	fp,56(sp)
1000fa98:	ddc00d15 	stw	r23,52(sp)
1000fa9c:	dd400b15 	stw	r21,44(sp)
1000faa0:	dd000a15 	stw	r20,40(sp)
1000faa4:	dcc00915 	stw	r19,36(sp)
1000faa8:	dc400715 	stw	r17,28(sp)
1000faac:	9481ffcc 	andi	r18,r18,2047
1000fab0:	2c20703a 	and	r16,r5,r16
1000fab4:	b2003fcc 	andi	r8,r22,255
1000fab8:	90006126 	beq	r18,zero,1000fc40 <__divdf3+0x1d0>
1000fabc:	0081ffc4 	movi	r2,2047
1000fac0:	202b883a 	mov	r21,r4
1000fac4:	90803726 	beq	r18,r2,1000fba4 <__divdf3+0x134>
1000fac8:	80800434 	orhi	r2,r16,16
1000facc:	100490fa 	slli	r2,r2,3
1000fad0:	2020d77a 	srli	r16,r4,29
1000fad4:	202a90fa 	slli	r21,r4,3
1000fad8:	94bf0044 	addi	r18,r18,-1023
1000fadc:	80a0b03a 	or	r16,r16,r2
1000fae0:	0013883a 	mov	r9,zero
1000fae4:	000b883a 	mov	r5,zero
1000fae8:	3806d53a 	srli	r3,r7,20
1000faec:	382ed7fa 	srli	r23,r7,31
1000faf0:	04400434 	movhi	r17,16
1000faf4:	8c7fffc4 	addi	r17,r17,-1
1000faf8:	18c1ffcc 	andi	r3,r3,2047
1000fafc:	3029883a 	mov	r20,r6
1000fb00:	3c62703a 	and	r17,r7,r17
1000fb04:	bf003fcc 	andi	fp,r23,255
1000fb08:	18006e26 	beq	r3,zero,1000fcc4 <__divdf3+0x254>
1000fb0c:	0081ffc4 	movi	r2,2047
1000fb10:	18806626 	beq	r3,r2,1000fcac <__divdf3+0x23c>
1000fb14:	88800434 	orhi	r2,r17,16
1000fb18:	100490fa 	slli	r2,r2,3
1000fb1c:	3022d77a 	srli	r17,r6,29
1000fb20:	302890fa 	slli	r20,r6,3
1000fb24:	18ff0044 	addi	r3,r3,-1023
1000fb28:	88a2b03a 	or	r17,r17,r2
1000fb2c:	000f883a 	mov	r7,zero
1000fb30:	b5e6f03a 	xor	r19,r22,r23
1000fb34:	3a4cb03a 	or	r6,r7,r9
1000fb38:	008003c4 	movi	r2,15
1000fb3c:	9809883a 	mov	r4,r19
1000fb40:	90c7c83a 	sub	r3,r18,r3
1000fb44:	9cc03fcc 	andi	r19,r19,255
1000fb48:	11809636 	bltu	r2,r6,1000fda4 <__divdf3+0x334>
1000fb4c:	300c90ba 	slli	r6,r6,2
1000fb50:	00840074 	movhi	r2,4097
1000fb54:	10bed904 	addi	r2,r2,-1180
1000fb58:	308d883a 	add	r6,r6,r2
1000fb5c:	30800017 	ldw	r2,0(r6)
1000fb60:	1000683a 	jmp	r2
1000fb64:	1000fda4 	muli	zero,r2,1014
1000fb68:	1000fbdc 	xori	zero,r2,1007
1000fb6c:	1000fd94 	ori	zero,r2,1014
1000fb70:	1000fbd0 	cmplti	zero,r2,1007
1000fb74:	1000fd94 	ori	zero,r2,1014
1000fb78:	1000fd68 	cmpgeui	zero,r2,1013
1000fb7c:	1000fd94 	ori	zero,r2,1014
1000fb80:	1000fbd0 	cmplti	zero,r2,1007
1000fb84:	1000fbdc 	xori	zero,r2,1007
1000fb88:	1000fbdc 	xori	zero,r2,1007
1000fb8c:	1000fd68 	cmpgeui	zero,r2,1013
1000fb90:	1000fbd0 	cmplti	zero,r2,1007
1000fb94:	1000fbc0 	call	11000fbc <_gp+0xfe1764>
1000fb98:	1000fbc0 	call	11000fbc <_gp+0xfe1764>
1000fb9c:	1000fbc0 	call	11000fbc <_gp+0xfe1764>
1000fba0:	1001012c 	andhi	zero,r2,1028
1000fba4:	2404b03a 	or	r2,r4,r16
1000fba8:	10006c1e 	bne	r2,zero,1000fd5c <__divdf3+0x2ec>
1000fbac:	02400204 	movi	r9,8
1000fbb0:	0021883a 	mov	r16,zero
1000fbb4:	002b883a 	mov	r21,zero
1000fbb8:	01400084 	movi	r5,2
1000fbbc:	003fca06 	br	1000fae8 <__alt_data_end+0xf800fae8>
1000fbc0:	8023883a 	mov	r17,r16
1000fbc4:	a829883a 	mov	r20,r21
1000fbc8:	4039883a 	mov	fp,r8
1000fbcc:	280f883a 	mov	r7,r5
1000fbd0:	00800084 	movi	r2,2
1000fbd4:	3881601e 	bne	r7,r2,10010158 <__divdf3+0x6e8>
1000fbd8:	e027883a 	mov	r19,fp
1000fbdc:	9900004c 	andi	r4,r19,1
1000fbe0:	0081ffc4 	movi	r2,2047
1000fbe4:	0021883a 	mov	r16,zero
1000fbe8:	002b883a 	mov	r21,zero
1000fbec:	1004953a 	slli	r2,r2,20
1000fbf0:	20c03fcc 	andi	r3,r4,255
1000fbf4:	01400434 	movhi	r5,16
1000fbf8:	297fffc4 	addi	r5,r5,-1
1000fbfc:	180697fa 	slli	r3,r3,31
1000fc00:	8160703a 	and	r16,r16,r5
1000fc04:	80a0b03a 	or	r16,r16,r2
1000fc08:	80c6b03a 	or	r3,r16,r3
1000fc0c:	a805883a 	mov	r2,r21
1000fc10:	dfc00f17 	ldw	ra,60(sp)
1000fc14:	df000e17 	ldw	fp,56(sp)
1000fc18:	ddc00d17 	ldw	r23,52(sp)
1000fc1c:	dd800c17 	ldw	r22,48(sp)
1000fc20:	dd400b17 	ldw	r21,44(sp)
1000fc24:	dd000a17 	ldw	r20,40(sp)
1000fc28:	dcc00917 	ldw	r19,36(sp)
1000fc2c:	dc800817 	ldw	r18,32(sp)
1000fc30:	dc400717 	ldw	r17,28(sp)
1000fc34:	dc000617 	ldw	r16,24(sp)
1000fc38:	dec01004 	addi	sp,sp,64
1000fc3c:	f800283a 	ret
1000fc40:	2404b03a 	or	r2,r4,r16
1000fc44:	2023883a 	mov	r17,r4
1000fc48:	10003f26 	beq	r2,zero,1000fd48 <__divdf3+0x2d8>
1000fc4c:	80015e26 	beq	r16,zero,100101c8 <__divdf3+0x758>
1000fc50:	8009883a 	mov	r4,r16
1000fc54:	d9800215 	stw	r6,8(sp)
1000fc58:	d9c00515 	stw	r7,20(sp)
1000fc5c:	da000415 	stw	r8,16(sp)
1000fc60:	0011a040 	call	10011a04 <__clzsi2>
1000fc64:	d9800217 	ldw	r6,8(sp)
1000fc68:	d9c00517 	ldw	r7,20(sp)
1000fc6c:	da000417 	ldw	r8,16(sp)
1000fc70:	113ffd44 	addi	r4,r2,-11
1000fc74:	00c00704 	movi	r3,28
1000fc78:	19014f16 	blt	r3,r4,100101b8 <__divdf3+0x748>
1000fc7c:	00c00744 	movi	r3,29
1000fc80:	157ffe04 	addi	r21,r2,-8
1000fc84:	1907c83a 	sub	r3,r3,r4
1000fc88:	8560983a 	sll	r16,r16,r21
1000fc8c:	88c6d83a 	srl	r3,r17,r3
1000fc90:	8d6a983a 	sll	r21,r17,r21
1000fc94:	1c20b03a 	or	r16,r3,r16
1000fc98:	1080fcc4 	addi	r2,r2,1011
1000fc9c:	00a5c83a 	sub	r18,zero,r2
1000fca0:	0013883a 	mov	r9,zero
1000fca4:	000b883a 	mov	r5,zero
1000fca8:	003f8f06 	br	1000fae8 <__alt_data_end+0xf800fae8>
1000fcac:	3444b03a 	or	r2,r6,r17
1000fcb0:	1000231e 	bne	r2,zero,1000fd40 <__divdf3+0x2d0>
1000fcb4:	0023883a 	mov	r17,zero
1000fcb8:	0029883a 	mov	r20,zero
1000fcbc:	01c00084 	movi	r7,2
1000fcc0:	003f9b06 	br	1000fb30 <__alt_data_end+0xf800fb30>
1000fcc4:	3444b03a 	or	r2,r6,r17
1000fcc8:	10001926 	beq	r2,zero,1000fd30 <__divdf3+0x2c0>
1000fccc:	88014b26 	beq	r17,zero,100101fc <__divdf3+0x78c>
1000fcd0:	8809883a 	mov	r4,r17
1000fcd4:	d9400115 	stw	r5,4(sp)
1000fcd8:	d9800215 	stw	r6,8(sp)
1000fcdc:	da000415 	stw	r8,16(sp)
1000fce0:	da400315 	stw	r9,12(sp)
1000fce4:	0011a040 	call	10011a04 <__clzsi2>
1000fce8:	d9400117 	ldw	r5,4(sp)
1000fcec:	d9800217 	ldw	r6,8(sp)
1000fcf0:	da000417 	ldw	r8,16(sp)
1000fcf4:	da400317 	ldw	r9,12(sp)
1000fcf8:	113ffd44 	addi	r4,r2,-11
1000fcfc:	00c00704 	movi	r3,28
1000fd00:	19013a16 	blt	r3,r4,100101ec <__divdf3+0x77c>
1000fd04:	00c00744 	movi	r3,29
1000fd08:	153ffe04 	addi	r20,r2,-8
1000fd0c:	1907c83a 	sub	r3,r3,r4
1000fd10:	8d22983a 	sll	r17,r17,r20
1000fd14:	30c6d83a 	srl	r3,r6,r3
1000fd18:	3528983a 	sll	r20,r6,r20
1000fd1c:	1c62b03a 	or	r17,r3,r17
1000fd20:	1080fcc4 	addi	r2,r2,1011
1000fd24:	0087c83a 	sub	r3,zero,r2
1000fd28:	000f883a 	mov	r7,zero
1000fd2c:	003f8006 	br	1000fb30 <__alt_data_end+0xf800fb30>
1000fd30:	0023883a 	mov	r17,zero
1000fd34:	0029883a 	mov	r20,zero
1000fd38:	01c00044 	movi	r7,1
1000fd3c:	003f7c06 	br	1000fb30 <__alt_data_end+0xf800fb30>
1000fd40:	01c000c4 	movi	r7,3
1000fd44:	003f7a06 	br	1000fb30 <__alt_data_end+0xf800fb30>
1000fd48:	02400104 	movi	r9,4
1000fd4c:	0021883a 	mov	r16,zero
1000fd50:	002b883a 	mov	r21,zero
1000fd54:	01400044 	movi	r5,1
1000fd58:	003f6306 	br	1000fae8 <__alt_data_end+0xf800fae8>
1000fd5c:	02400304 	movi	r9,12
1000fd60:	014000c4 	movi	r5,3
1000fd64:	003f6006 	br	1000fae8 <__alt_data_end+0xf800fae8>
1000fd68:	04000434 	movhi	r16,16
1000fd6c:	0009883a 	mov	r4,zero
1000fd70:	843fffc4 	addi	r16,r16,-1
1000fd74:	057fffc4 	movi	r21,-1
1000fd78:	0081ffc4 	movi	r2,2047
1000fd7c:	003f9b06 	br	1000fbec <__alt_data_end+0xf800fbec>
1000fd80:	00c00044 	movi	r3,1
1000fd84:	1887c83a 	sub	r3,r3,r2
1000fd88:	01000e04 	movi	r4,56
1000fd8c:	20c1530e 	bge	r4,r3,100102dc <__divdf3+0x86c>
1000fd90:	9900004c 	andi	r4,r19,1
1000fd94:	0005883a 	mov	r2,zero
1000fd98:	0021883a 	mov	r16,zero
1000fd9c:	002b883a 	mov	r21,zero
1000fda0:	003f9206 	br	1000fbec <__alt_data_end+0xf800fbec>
1000fda4:	8c012e36 	bltu	r17,r16,10010260 <__divdf3+0x7f0>
1000fda8:	84412c26 	beq	r16,r17,1001025c <__divdf3+0x7ec>
1000fdac:	a82f883a 	mov	r23,r21
1000fdb0:	18ffffc4 	addi	r3,r3,-1
1000fdb4:	002b883a 	mov	r21,zero
1000fdb8:	a004d63a 	srli	r2,r20,24
1000fdbc:	8822923a 	slli	r17,r17,8
1000fdc0:	a028923a 	slli	r20,r20,8
1000fdc4:	8009883a 	mov	r4,r16
1000fdc8:	88acb03a 	or	r22,r17,r2
1000fdcc:	dd000015 	stw	r20,0(sp)
1000fdd0:	b028d43a 	srli	r20,r22,16
1000fdd4:	d8c00215 	stw	r3,8(sp)
1000fdd8:	b4bfffcc 	andi	r18,r22,65535
1000fddc:	a00b883a 	mov	r5,r20
1000fde0:	000f1080 	call	1000f108 <__udivsi3>
1000fde4:	100b883a 	mov	r5,r2
1000fde8:	9009883a 	mov	r4,r18
1000fdec:	1023883a 	mov	r17,r2
1000fdf0:	0004b280 	call	10004b28 <__mulsi3>
1000fdf4:	8009883a 	mov	r4,r16
1000fdf8:	a00b883a 	mov	r5,r20
1000fdfc:	1039883a 	mov	fp,r2
1000fe00:	000f16c0 	call	1000f16c <__umodsi3>
1000fe04:	1004943a 	slli	r2,r2,16
1000fe08:	b808d43a 	srli	r4,r23,16
1000fe0c:	d8c00217 	ldw	r3,8(sp)
1000fe10:	2084b03a 	or	r2,r4,r2
1000fe14:	1700062e 	bgeu	r2,fp,1000fe30 <__divdf3+0x3c0>
1000fe18:	1585883a 	add	r2,r2,r22
1000fe1c:	893fffc4 	addi	r4,r17,-1
1000fe20:	15811d36 	bltu	r2,r22,10010298 <__divdf3+0x828>
1000fe24:	17011c2e 	bgeu	r2,fp,10010298 <__divdf3+0x828>
1000fe28:	8c7fff84 	addi	r17,r17,-2
1000fe2c:	1585883a 	add	r2,r2,r22
1000fe30:	1739c83a 	sub	fp,r2,fp
1000fe34:	a00b883a 	mov	r5,r20
1000fe38:	e009883a 	mov	r4,fp
1000fe3c:	d8c00215 	stw	r3,8(sp)
1000fe40:	000f1080 	call	1000f108 <__udivsi3>
1000fe44:	100b883a 	mov	r5,r2
1000fe48:	9009883a 	mov	r4,r18
1000fe4c:	1021883a 	mov	r16,r2
1000fe50:	0004b280 	call	10004b28 <__mulsi3>
1000fe54:	a00b883a 	mov	r5,r20
1000fe58:	e009883a 	mov	r4,fp
1000fe5c:	d8800415 	stw	r2,16(sp)
1000fe60:	000f16c0 	call	1000f16c <__umodsi3>
1000fe64:	1004943a 	slli	r2,r2,16
1000fe68:	da000417 	ldw	r8,16(sp)
1000fe6c:	bdffffcc 	andi	r23,r23,65535
1000fe70:	b884b03a 	or	r2,r23,r2
1000fe74:	d8c00217 	ldw	r3,8(sp)
1000fe78:	1200062e 	bgeu	r2,r8,1000fe94 <__divdf3+0x424>
1000fe7c:	1585883a 	add	r2,r2,r22
1000fe80:	813fffc4 	addi	r4,r16,-1
1000fe84:	15810236 	bltu	r2,r22,10010290 <__divdf3+0x820>
1000fe88:	1201012e 	bgeu	r2,r8,10010290 <__divdf3+0x820>
1000fe8c:	843fff84 	addi	r16,r16,-2
1000fe90:	1585883a 	add	r2,r2,r22
1000fe94:	8822943a 	slli	r17,r17,16
1000fe98:	d9800017 	ldw	r6,0(sp)
1000fe9c:	1211c83a 	sub	r8,r2,r8
1000fea0:	8c22b03a 	or	r17,r17,r16
1000fea4:	373fffcc 	andi	fp,r6,65535
1000fea8:	8abfffcc 	andi	r10,r17,65535
1000feac:	8820d43a 	srli	r16,r17,16
1000feb0:	5009883a 	mov	r4,r10
1000feb4:	e00b883a 	mov	r5,fp
1000feb8:	302ed43a 	srli	r23,r6,16
1000febc:	d8c00215 	stw	r3,8(sp)
1000fec0:	da000415 	stw	r8,16(sp)
1000fec4:	da800115 	stw	r10,4(sp)
1000fec8:	0004b280 	call	10004b28 <__mulsi3>
1000fecc:	800b883a 	mov	r5,r16
1000fed0:	e009883a 	mov	r4,fp
1000fed4:	d8800515 	stw	r2,20(sp)
1000fed8:	0004b280 	call	10004b28 <__mulsi3>
1000fedc:	8009883a 	mov	r4,r16
1000fee0:	b80b883a 	mov	r5,r23
1000fee4:	d8800315 	stw	r2,12(sp)
1000fee8:	0004b280 	call	10004b28 <__mulsi3>
1000feec:	da800117 	ldw	r10,4(sp)
1000fef0:	b80b883a 	mov	r5,r23
1000fef4:	1021883a 	mov	r16,r2
1000fef8:	5009883a 	mov	r4,r10
1000fefc:	0004b280 	call	10004b28 <__mulsi3>
1000ff00:	d9c00517 	ldw	r7,20(sp)
1000ff04:	da400317 	ldw	r9,12(sp)
1000ff08:	d8c00217 	ldw	r3,8(sp)
1000ff0c:	3808d43a 	srli	r4,r7,16
1000ff10:	1245883a 	add	r2,r2,r9
1000ff14:	da000417 	ldw	r8,16(sp)
1000ff18:	2085883a 	add	r2,r4,r2
1000ff1c:	1240022e 	bgeu	r2,r9,1000ff28 <__divdf3+0x4b8>
1000ff20:	01000074 	movhi	r4,1
1000ff24:	8121883a 	add	r16,r16,r4
1000ff28:	1008d43a 	srli	r4,r2,16
1000ff2c:	1004943a 	slli	r2,r2,16
1000ff30:	39ffffcc 	andi	r7,r7,65535
1000ff34:	2409883a 	add	r4,r4,r16
1000ff38:	11c5883a 	add	r2,r2,r7
1000ff3c:	4100bb36 	bltu	r8,r4,1001022c <__divdf3+0x7bc>
1000ff40:	4100d726 	beq	r8,r4,100102a0 <__divdf3+0x830>
1000ff44:	4109c83a 	sub	r4,r8,r4
1000ff48:	a8a1c83a 	sub	r16,r21,r2
1000ff4c:	ac2b803a 	cmpltu	r21,r21,r16
1000ff50:	256bc83a 	sub	r21,r4,r21
1000ff54:	b540d926 	beq	r22,r21,100102bc <__divdf3+0x84c>
1000ff58:	a00b883a 	mov	r5,r20
1000ff5c:	a809883a 	mov	r4,r21
1000ff60:	d8c00215 	stw	r3,8(sp)
1000ff64:	000f1080 	call	1000f108 <__udivsi3>
1000ff68:	100b883a 	mov	r5,r2
1000ff6c:	9009883a 	mov	r4,r18
1000ff70:	d8800515 	stw	r2,20(sp)
1000ff74:	0004b280 	call	10004b28 <__mulsi3>
1000ff78:	a809883a 	mov	r4,r21
1000ff7c:	a00b883a 	mov	r5,r20
1000ff80:	d8800415 	stw	r2,16(sp)
1000ff84:	000f16c0 	call	1000f16c <__umodsi3>
1000ff88:	1004943a 	slli	r2,r2,16
1000ff8c:	8008d43a 	srli	r4,r16,16
1000ff90:	da000417 	ldw	r8,16(sp)
1000ff94:	d8c00217 	ldw	r3,8(sp)
1000ff98:	2084b03a 	or	r2,r4,r2
1000ff9c:	d9c00517 	ldw	r7,20(sp)
1000ffa0:	1200062e 	bgeu	r2,r8,1000ffbc <__divdf3+0x54c>
1000ffa4:	1585883a 	add	r2,r2,r22
1000ffa8:	393fffc4 	addi	r4,r7,-1
1000ffac:	1580c536 	bltu	r2,r22,100102c4 <__divdf3+0x854>
1000ffb0:	1200c42e 	bgeu	r2,r8,100102c4 <__divdf3+0x854>
1000ffb4:	39ffff84 	addi	r7,r7,-2
1000ffb8:	1585883a 	add	r2,r2,r22
1000ffbc:	122bc83a 	sub	r21,r2,r8
1000ffc0:	a00b883a 	mov	r5,r20
1000ffc4:	a809883a 	mov	r4,r21
1000ffc8:	d8c00215 	stw	r3,8(sp)
1000ffcc:	d9c00515 	stw	r7,20(sp)
1000ffd0:	000f1080 	call	1000f108 <__udivsi3>
1000ffd4:	9009883a 	mov	r4,r18
1000ffd8:	100b883a 	mov	r5,r2
1000ffdc:	d8800415 	stw	r2,16(sp)
1000ffe0:	0004b280 	call	10004b28 <__mulsi3>
1000ffe4:	a809883a 	mov	r4,r21
1000ffe8:	a00b883a 	mov	r5,r20
1000ffec:	1025883a 	mov	r18,r2
1000fff0:	000f16c0 	call	1000f16c <__umodsi3>
1000fff4:	1004943a 	slli	r2,r2,16
1000fff8:	813fffcc 	andi	r4,r16,65535
1000fffc:	d8c00217 	ldw	r3,8(sp)
10010000:	20a0b03a 	or	r16,r4,r2
10010004:	d9c00517 	ldw	r7,20(sp)
10010008:	da000417 	ldw	r8,16(sp)
1001000c:	8480062e 	bgeu	r16,r18,10010028 <__divdf3+0x5b8>
10010010:	85a1883a 	add	r16,r16,r22
10010014:	40bfffc4 	addi	r2,r8,-1
10010018:	8580ac36 	bltu	r16,r22,100102cc <__divdf3+0x85c>
1001001c:	8480ab2e 	bgeu	r16,r18,100102cc <__divdf3+0x85c>
10010020:	423fff84 	addi	r8,r8,-2
10010024:	85a1883a 	add	r16,r16,r22
10010028:	3804943a 	slli	r2,r7,16
1001002c:	84a1c83a 	sub	r16,r16,r18
10010030:	e009883a 	mov	r4,fp
10010034:	1228b03a 	or	r20,r2,r8
10010038:	a1ffffcc 	andi	r7,r20,65535
1001003c:	a024d43a 	srli	r18,r20,16
10010040:	380b883a 	mov	r5,r7
10010044:	d8c00215 	stw	r3,8(sp)
10010048:	d9c00515 	stw	r7,20(sp)
1001004c:	0004b280 	call	10004b28 <__mulsi3>
10010050:	900b883a 	mov	r5,r18
10010054:	e009883a 	mov	r4,fp
10010058:	102b883a 	mov	r21,r2
1001005c:	0004b280 	call	10004b28 <__mulsi3>
10010060:	900b883a 	mov	r5,r18
10010064:	b809883a 	mov	r4,r23
10010068:	1039883a 	mov	fp,r2
1001006c:	0004b280 	call	10004b28 <__mulsi3>
10010070:	d9c00517 	ldw	r7,20(sp)
10010074:	b80b883a 	mov	r5,r23
10010078:	1025883a 	mov	r18,r2
1001007c:	3809883a 	mov	r4,r7
10010080:	0004b280 	call	10004b28 <__mulsi3>
10010084:	a808d43a 	srli	r4,r21,16
10010088:	1705883a 	add	r2,r2,fp
1001008c:	d8c00217 	ldw	r3,8(sp)
10010090:	2085883a 	add	r2,r4,r2
10010094:	1700022e 	bgeu	r2,fp,100100a0 <__divdf3+0x630>
10010098:	01000074 	movhi	r4,1
1001009c:	9125883a 	add	r18,r18,r4
100100a0:	1008d43a 	srli	r4,r2,16
100100a4:	1004943a 	slli	r2,r2,16
100100a8:	ad7fffcc 	andi	r21,r21,65535
100100ac:	2489883a 	add	r4,r4,r18
100100b0:	1545883a 	add	r2,r2,r21
100100b4:	81003836 	bltu	r16,r4,10010198 <__divdf3+0x728>
100100b8:	81003626 	beq	r16,r4,10010194 <__divdf3+0x724>
100100bc:	a5000054 	ori	r20,r20,1
100100c0:	1880ffc4 	addi	r2,r3,1023
100100c4:	00bf2e0e 	bge	zero,r2,1000fd80 <__alt_data_end+0xf800fd80>
100100c8:	a10001cc 	andi	r4,r20,7
100100cc:	20000726 	beq	r4,zero,100100ec <__divdf3+0x67c>
100100d0:	a10003cc 	andi	r4,r20,15
100100d4:	01400104 	movi	r5,4
100100d8:	21400426 	beq	r4,r5,100100ec <__divdf3+0x67c>
100100dc:	a149883a 	add	r4,r20,r5
100100e0:	2529803a 	cmpltu	r20,r4,r20
100100e4:	8d23883a 	add	r17,r17,r20
100100e8:	2029883a 	mov	r20,r4
100100ec:	8900402c 	andhi	r4,r17,256
100100f0:	20000426 	beq	r4,zero,10010104 <__divdf3+0x694>
100100f4:	18810004 	addi	r2,r3,1024
100100f8:	00ffc034 	movhi	r3,65280
100100fc:	18ffffc4 	addi	r3,r3,-1
10010100:	88e2703a 	and	r17,r17,r3
10010104:	00c1ff84 	movi	r3,2046
10010108:	18beb416 	blt	r3,r2,1000fbdc <__alt_data_end+0xf800fbdc>
1001010c:	a028d0fa 	srli	r20,r20,3
10010110:	882a977a 	slli	r21,r17,29
10010114:	8820927a 	slli	r16,r17,9
10010118:	1081ffcc 	andi	r2,r2,2047
1001011c:	ad2ab03a 	or	r21,r21,r20
10010120:	8020d33a 	srli	r16,r16,12
10010124:	9900004c 	andi	r4,r19,1
10010128:	003eb006 	br	1000fbec <__alt_data_end+0xf800fbec>
1001012c:	8080022c 	andhi	r2,r16,8
10010130:	10001226 	beq	r2,zero,1001017c <__divdf3+0x70c>
10010134:	8880022c 	andhi	r2,r17,8
10010138:	1000101e 	bne	r2,zero,1001017c <__divdf3+0x70c>
1001013c:	00800434 	movhi	r2,16
10010140:	8c000234 	orhi	r16,r17,8
10010144:	10bfffc4 	addi	r2,r2,-1
10010148:	b809883a 	mov	r4,r23
1001014c:	80a0703a 	and	r16,r16,r2
10010150:	a02b883a 	mov	r21,r20
10010154:	003f0806 	br	1000fd78 <__alt_data_end+0xf800fd78>
10010158:	008000c4 	movi	r2,3
1001015c:	3880b126 	beq	r7,r2,10010424 <__divdf3+0x9b4>
10010160:	00800044 	movi	r2,1
10010164:	38805b1e 	bne	r7,r2,100102d4 <__divdf3+0x864>
10010168:	e009883a 	mov	r4,fp
1001016c:	0005883a 	mov	r2,zero
10010170:	0021883a 	mov	r16,zero
10010174:	002b883a 	mov	r21,zero
10010178:	003e9c06 	br	1000fbec <__alt_data_end+0xf800fbec>
1001017c:	00800434 	movhi	r2,16
10010180:	84000234 	orhi	r16,r16,8
10010184:	10bfffc4 	addi	r2,r2,-1
10010188:	b009883a 	mov	r4,r22
1001018c:	80a0703a 	and	r16,r16,r2
10010190:	003ef906 	br	1000fd78 <__alt_data_end+0xf800fd78>
10010194:	103fca26 	beq	r2,zero,100100c0 <__alt_data_end+0xf80100c0>
10010198:	b421883a 	add	r16,r22,r16
1001019c:	a17fffc4 	addi	r5,r20,-1
100101a0:	8580422e 	bgeu	r16,r22,100102ac <__divdf3+0x83c>
100101a4:	2829883a 	mov	r20,r5
100101a8:	813fc41e 	bne	r16,r4,100100bc <__alt_data_end+0xf80100bc>
100101ac:	d9800017 	ldw	r6,0(sp)
100101b0:	30bfc21e 	bne	r6,r2,100100bc <__alt_data_end+0xf80100bc>
100101b4:	003fc206 	br	100100c0 <__alt_data_end+0xf80100c0>
100101b8:	143ff604 	addi	r16,r2,-40
100101bc:	8c20983a 	sll	r16,r17,r16
100101c0:	002b883a 	mov	r21,zero
100101c4:	003eb406 	br	1000fc98 <__alt_data_end+0xf800fc98>
100101c8:	d9800215 	stw	r6,8(sp)
100101cc:	d9c00515 	stw	r7,20(sp)
100101d0:	da000415 	stw	r8,16(sp)
100101d4:	0011a040 	call	10011a04 <__clzsi2>
100101d8:	10800804 	addi	r2,r2,32
100101dc:	da000417 	ldw	r8,16(sp)
100101e0:	d9c00517 	ldw	r7,20(sp)
100101e4:	d9800217 	ldw	r6,8(sp)
100101e8:	003ea106 	br	1000fc70 <__alt_data_end+0xf800fc70>
100101ec:	147ff604 	addi	r17,r2,-40
100101f0:	3462983a 	sll	r17,r6,r17
100101f4:	0029883a 	mov	r20,zero
100101f8:	003ec906 	br	1000fd20 <__alt_data_end+0xf800fd20>
100101fc:	3009883a 	mov	r4,r6
10010200:	d9400115 	stw	r5,4(sp)
10010204:	d9800215 	stw	r6,8(sp)
10010208:	da000415 	stw	r8,16(sp)
1001020c:	da400315 	stw	r9,12(sp)
10010210:	0011a040 	call	10011a04 <__clzsi2>
10010214:	10800804 	addi	r2,r2,32
10010218:	da400317 	ldw	r9,12(sp)
1001021c:	da000417 	ldw	r8,16(sp)
10010220:	d9800217 	ldw	r6,8(sp)
10010224:	d9400117 	ldw	r5,4(sp)
10010228:	003eb306 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
1001022c:	d9800017 	ldw	r6,0(sp)
10010230:	a9ab883a 	add	r21,r21,r6
10010234:	a98b803a 	cmpltu	r5,r21,r6
10010238:	2d8b883a 	add	r5,r5,r22
1001023c:	2a11883a 	add	r8,r5,r8
10010240:	897fffc4 	addi	r5,r17,-1
10010244:	b2000c2e 	bgeu	r22,r8,10010278 <__divdf3+0x808>
10010248:	41003f36 	bltu	r8,r4,10010348 <__divdf3+0x8d8>
1001024c:	22006c26 	beq	r4,r8,10010400 <__divdf3+0x990>
10010250:	4109c83a 	sub	r4,r8,r4
10010254:	2823883a 	mov	r17,r5
10010258:	003f3b06 	br	1000ff48 <__alt_data_end+0xf800ff48>
1001025c:	ad3ed336 	bltu	r21,r20,1000fdac <__alt_data_end+0xf800fdac>
10010260:	a804d07a 	srli	r2,r21,1
10010264:	802e97fa 	slli	r23,r16,31
10010268:	a82a97fa 	slli	r21,r21,31
1001026c:	8020d07a 	srli	r16,r16,1
10010270:	b8aeb03a 	or	r23,r23,r2
10010274:	003ed006 	br	1000fdb8 <__alt_data_end+0xf800fdb8>
10010278:	b23ff51e 	bne	r22,r8,10010250 <__alt_data_end+0xf8010250>
1001027c:	d9800017 	ldw	r6,0(sp)
10010280:	a9bff12e 	bgeu	r21,r6,10010248 <__alt_data_end+0xf8010248>
10010284:	b109c83a 	sub	r4,r22,r4
10010288:	2823883a 	mov	r17,r5
1001028c:	003f2e06 	br	1000ff48 <__alt_data_end+0xf800ff48>
10010290:	2021883a 	mov	r16,r4
10010294:	003eff06 	br	1000fe94 <__alt_data_end+0xf800fe94>
10010298:	2023883a 	mov	r17,r4
1001029c:	003ee406 	br	1000fe30 <__alt_data_end+0xf800fe30>
100102a0:	a8bfe236 	bltu	r21,r2,1001022c <__alt_data_end+0xf801022c>
100102a4:	0009883a 	mov	r4,zero
100102a8:	003f2706 	br	1000ff48 <__alt_data_end+0xf800ff48>
100102ac:	81002d36 	bltu	r16,r4,10010364 <__divdf3+0x8f4>
100102b0:	24005626 	beq	r4,r16,1001040c <__divdf3+0x99c>
100102b4:	2829883a 	mov	r20,r5
100102b8:	003f8006 	br	100100bc <__alt_data_end+0xf80100bc>
100102bc:	053fffc4 	movi	r20,-1
100102c0:	003f7f06 	br	100100c0 <__alt_data_end+0xf80100c0>
100102c4:	200f883a 	mov	r7,r4
100102c8:	003f3c06 	br	1000ffbc <__alt_data_end+0xf800ffbc>
100102cc:	1011883a 	mov	r8,r2
100102d0:	003f5506 	br	10010028 <__alt_data_end+0xf8010028>
100102d4:	e027883a 	mov	r19,fp
100102d8:	003f7906 	br	100100c0 <__alt_data_end+0xf80100c0>
100102dc:	010007c4 	movi	r4,31
100102e0:	20c02816 	blt	r4,r3,10010384 <__divdf3+0x914>
100102e4:	00800804 	movi	r2,32
100102e8:	10c5c83a 	sub	r2,r2,r3
100102ec:	888a983a 	sll	r5,r17,r2
100102f0:	a0c8d83a 	srl	r4,r20,r3
100102f4:	a084983a 	sll	r2,r20,r2
100102f8:	88e2d83a 	srl	r17,r17,r3
100102fc:	2906b03a 	or	r3,r5,r4
10010300:	1004c03a 	cmpne	r2,r2,zero
10010304:	1886b03a 	or	r3,r3,r2
10010308:	188001cc 	andi	r2,r3,7
1001030c:	10000726 	beq	r2,zero,1001032c <__divdf3+0x8bc>
10010310:	188003cc 	andi	r2,r3,15
10010314:	01000104 	movi	r4,4
10010318:	11000426 	beq	r2,r4,1001032c <__divdf3+0x8bc>
1001031c:	1805883a 	mov	r2,r3
10010320:	10c00104 	addi	r3,r2,4
10010324:	1885803a 	cmpltu	r2,r3,r2
10010328:	88a3883a 	add	r17,r17,r2
1001032c:	8880202c 	andhi	r2,r17,128
10010330:	10002926 	beq	r2,zero,100103d8 <__divdf3+0x968>
10010334:	9900004c 	andi	r4,r19,1
10010338:	00800044 	movi	r2,1
1001033c:	0021883a 	mov	r16,zero
10010340:	002b883a 	mov	r21,zero
10010344:	003e2906 	br	1000fbec <__alt_data_end+0xf800fbec>
10010348:	d9800017 	ldw	r6,0(sp)
1001034c:	8c7fff84 	addi	r17,r17,-2
10010350:	a9ab883a 	add	r21,r21,r6
10010354:	a98b803a 	cmpltu	r5,r21,r6
10010358:	2d8b883a 	add	r5,r5,r22
1001035c:	2a11883a 	add	r8,r5,r8
10010360:	003ef806 	br	1000ff44 <__alt_data_end+0xf800ff44>
10010364:	d9800017 	ldw	r6,0(sp)
10010368:	318f883a 	add	r7,r6,r6
1001036c:	398b803a 	cmpltu	r5,r7,r6
10010370:	2d8d883a 	add	r6,r5,r22
10010374:	81a1883a 	add	r16,r16,r6
10010378:	a17fff84 	addi	r5,r20,-2
1001037c:	d9c00015 	stw	r7,0(sp)
10010380:	003f8806 	br	100101a4 <__alt_data_end+0xf80101a4>
10010384:	013ff844 	movi	r4,-31
10010388:	2085c83a 	sub	r2,r4,r2
1001038c:	8888d83a 	srl	r4,r17,r2
10010390:	00800804 	movi	r2,32
10010394:	18802126 	beq	r3,r2,1001041c <__divdf3+0x9ac>
10010398:	04001004 	movi	r16,64
1001039c:	80c7c83a 	sub	r3,r16,r3
100103a0:	88e0983a 	sll	r16,r17,r3
100103a4:	8504b03a 	or	r2,r16,r20
100103a8:	1004c03a 	cmpne	r2,r2,zero
100103ac:	2084b03a 	or	r2,r4,r2
100103b0:	144001cc 	andi	r17,r2,7
100103b4:	88000d1e 	bne	r17,zero,100103ec <__divdf3+0x97c>
100103b8:	0021883a 	mov	r16,zero
100103bc:	102ad0fa 	srli	r21,r2,3
100103c0:	9900004c 	andi	r4,r19,1
100103c4:	0005883a 	mov	r2,zero
100103c8:	ac6ab03a 	or	r21,r21,r17
100103cc:	003e0706 	br	1000fbec <__alt_data_end+0xf800fbec>
100103d0:	1007883a 	mov	r3,r2
100103d4:	0023883a 	mov	r17,zero
100103d8:	8820927a 	slli	r16,r17,9
100103dc:	1805883a 	mov	r2,r3
100103e0:	8822977a 	slli	r17,r17,29
100103e4:	8020d33a 	srli	r16,r16,12
100103e8:	003ff406 	br	100103bc <__alt_data_end+0xf80103bc>
100103ec:	10c003cc 	andi	r3,r2,15
100103f0:	01000104 	movi	r4,4
100103f4:	193ff626 	beq	r3,r4,100103d0 <__alt_data_end+0xf80103d0>
100103f8:	0023883a 	mov	r17,zero
100103fc:	003fc806 	br	10010320 <__alt_data_end+0xf8010320>
10010400:	a8bfd136 	bltu	r21,r2,10010348 <__alt_data_end+0xf8010348>
10010404:	2823883a 	mov	r17,r5
10010408:	003fa606 	br	100102a4 <__alt_data_end+0xf80102a4>
1001040c:	d9800017 	ldw	r6,0(sp)
10010410:	30bfd436 	bltu	r6,r2,10010364 <__alt_data_end+0xf8010364>
10010414:	2829883a 	mov	r20,r5
10010418:	003f6406 	br	100101ac <__alt_data_end+0xf80101ac>
1001041c:	0021883a 	mov	r16,zero
10010420:	003fe006 	br	100103a4 <__alt_data_end+0xf80103a4>
10010424:	00800434 	movhi	r2,16
10010428:	8c000234 	orhi	r16,r17,8
1001042c:	10bfffc4 	addi	r2,r2,-1
10010430:	e009883a 	mov	r4,fp
10010434:	80a0703a 	and	r16,r16,r2
10010438:	a02b883a 	mov	r21,r20
1001043c:	003e4e06 	br	1000fd78 <__alt_data_end+0xf800fd78>

10010440 <__eqdf2>:
10010440:	2804d53a 	srli	r2,r5,20
10010444:	3806d53a 	srli	r3,r7,20
10010448:	02000434 	movhi	r8,16
1001044c:	423fffc4 	addi	r8,r8,-1
10010450:	1081ffcc 	andi	r2,r2,2047
10010454:	0281ffc4 	movi	r10,2047
10010458:	2a12703a 	and	r9,r5,r8
1001045c:	18c1ffcc 	andi	r3,r3,2047
10010460:	3a10703a 	and	r8,r7,r8
10010464:	280ad7fa 	srli	r5,r5,31
10010468:	380ed7fa 	srli	r7,r7,31
1001046c:	12801026 	beq	r2,r10,100104b0 <__eqdf2+0x70>
10010470:	0281ffc4 	movi	r10,2047
10010474:	1a800a26 	beq	r3,r10,100104a0 <__eqdf2+0x60>
10010478:	10c00226 	beq	r2,r3,10010484 <__eqdf2+0x44>
1001047c:	00800044 	movi	r2,1
10010480:	f800283a 	ret
10010484:	4a3ffd1e 	bne	r9,r8,1001047c <__alt_data_end+0xf801047c>
10010488:	21bffc1e 	bne	r4,r6,1001047c <__alt_data_end+0xf801047c>
1001048c:	29c00c26 	beq	r5,r7,100104c0 <__eqdf2+0x80>
10010490:	103ffa1e 	bne	r2,zero,1001047c <__alt_data_end+0xf801047c>
10010494:	2244b03a 	or	r2,r4,r9
10010498:	1004c03a 	cmpne	r2,r2,zero
1001049c:	f800283a 	ret
100104a0:	3214b03a 	or	r10,r6,r8
100104a4:	503ff426 	beq	r10,zero,10010478 <__alt_data_end+0xf8010478>
100104a8:	00800044 	movi	r2,1
100104ac:	f800283a 	ret
100104b0:	2254b03a 	or	r10,r4,r9
100104b4:	503fee26 	beq	r10,zero,10010470 <__alt_data_end+0xf8010470>
100104b8:	00800044 	movi	r2,1
100104bc:	f800283a 	ret
100104c0:	0005883a 	mov	r2,zero
100104c4:	f800283a 	ret

100104c8 <__gedf2>:
100104c8:	2804d53a 	srli	r2,r5,20
100104cc:	3806d53a 	srli	r3,r7,20
100104d0:	02000434 	movhi	r8,16
100104d4:	423fffc4 	addi	r8,r8,-1
100104d8:	1081ffcc 	andi	r2,r2,2047
100104dc:	0241ffc4 	movi	r9,2047
100104e0:	2a14703a 	and	r10,r5,r8
100104e4:	18c1ffcc 	andi	r3,r3,2047
100104e8:	3a10703a 	and	r8,r7,r8
100104ec:	280ad7fa 	srli	r5,r5,31
100104f0:	380ed7fa 	srli	r7,r7,31
100104f4:	12401d26 	beq	r2,r9,1001056c <__gedf2+0xa4>
100104f8:	0241ffc4 	movi	r9,2047
100104fc:	1a401226 	beq	r3,r9,10010548 <__gedf2+0x80>
10010500:	1000081e 	bne	r2,zero,10010524 <__gedf2+0x5c>
10010504:	2296b03a 	or	r11,r4,r10
10010508:	5813003a 	cmpeq	r9,r11,zero
1001050c:	1800091e 	bne	r3,zero,10010534 <__gedf2+0x6c>
10010510:	3218b03a 	or	r12,r6,r8
10010514:	6000071e 	bne	r12,zero,10010534 <__gedf2+0x6c>
10010518:	0005883a 	mov	r2,zero
1001051c:	5800101e 	bne	r11,zero,10010560 <__gedf2+0x98>
10010520:	f800283a 	ret
10010524:	18000c1e 	bne	r3,zero,10010558 <__gedf2+0x90>
10010528:	3212b03a 	or	r9,r6,r8
1001052c:	48000c26 	beq	r9,zero,10010560 <__gedf2+0x98>
10010530:	0013883a 	mov	r9,zero
10010534:	39c03fcc 	andi	r7,r7,255
10010538:	48000826 	beq	r9,zero,1001055c <__gedf2+0x94>
1001053c:	38000926 	beq	r7,zero,10010564 <__gedf2+0x9c>
10010540:	00800044 	movi	r2,1
10010544:	f800283a 	ret
10010548:	3212b03a 	or	r9,r6,r8
1001054c:	483fec26 	beq	r9,zero,10010500 <__alt_data_end+0xf8010500>
10010550:	00bfff84 	movi	r2,-2
10010554:	f800283a 	ret
10010558:	39c03fcc 	andi	r7,r7,255
1001055c:	29c00626 	beq	r5,r7,10010578 <__gedf2+0xb0>
10010560:	283ff726 	beq	r5,zero,10010540 <__alt_data_end+0xf8010540>
10010564:	00bfffc4 	movi	r2,-1
10010568:	f800283a 	ret
1001056c:	2292b03a 	or	r9,r4,r10
10010570:	483fe126 	beq	r9,zero,100104f8 <__alt_data_end+0xf80104f8>
10010574:	003ff606 	br	10010550 <__alt_data_end+0xf8010550>
10010578:	18bff916 	blt	r3,r2,10010560 <__alt_data_end+0xf8010560>
1001057c:	10c00316 	blt	r2,r3,1001058c <__gedf2+0xc4>
10010580:	42bff736 	bltu	r8,r10,10010560 <__alt_data_end+0xf8010560>
10010584:	52000326 	beq	r10,r8,10010594 <__gedf2+0xcc>
10010588:	5200042e 	bgeu	r10,r8,1001059c <__gedf2+0xd4>
1001058c:	283fec1e 	bne	r5,zero,10010540 <__alt_data_end+0xf8010540>
10010590:	003ff406 	br	10010564 <__alt_data_end+0xf8010564>
10010594:	313ff236 	bltu	r6,r4,10010560 <__alt_data_end+0xf8010560>
10010598:	21bffc36 	bltu	r4,r6,1001058c <__alt_data_end+0xf801058c>
1001059c:	0005883a 	mov	r2,zero
100105a0:	f800283a 	ret

100105a4 <__ledf2>:
100105a4:	2804d53a 	srli	r2,r5,20
100105a8:	3810d53a 	srli	r8,r7,20
100105ac:	00c00434 	movhi	r3,16
100105b0:	18ffffc4 	addi	r3,r3,-1
100105b4:	1081ffcc 	andi	r2,r2,2047
100105b8:	0241ffc4 	movi	r9,2047
100105bc:	28d4703a 	and	r10,r5,r3
100105c0:	4201ffcc 	andi	r8,r8,2047
100105c4:	38c6703a 	and	r3,r7,r3
100105c8:	280ad7fa 	srli	r5,r5,31
100105cc:	380ed7fa 	srli	r7,r7,31
100105d0:	12401f26 	beq	r2,r9,10010650 <__ledf2+0xac>
100105d4:	0241ffc4 	movi	r9,2047
100105d8:	42401426 	beq	r8,r9,1001062c <__ledf2+0x88>
100105dc:	1000091e 	bne	r2,zero,10010604 <__ledf2+0x60>
100105e0:	2296b03a 	or	r11,r4,r10
100105e4:	5813003a 	cmpeq	r9,r11,zero
100105e8:	29403fcc 	andi	r5,r5,255
100105ec:	40000a1e 	bne	r8,zero,10010618 <__ledf2+0x74>
100105f0:	30d8b03a 	or	r12,r6,r3
100105f4:	6000081e 	bne	r12,zero,10010618 <__ledf2+0x74>
100105f8:	0005883a 	mov	r2,zero
100105fc:	5800111e 	bne	r11,zero,10010644 <__ledf2+0xa0>
10010600:	f800283a 	ret
10010604:	29403fcc 	andi	r5,r5,255
10010608:	40000c1e 	bne	r8,zero,1001063c <__ledf2+0x98>
1001060c:	30d2b03a 	or	r9,r6,r3
10010610:	48000c26 	beq	r9,zero,10010644 <__ledf2+0xa0>
10010614:	0013883a 	mov	r9,zero
10010618:	39c03fcc 	andi	r7,r7,255
1001061c:	48000826 	beq	r9,zero,10010640 <__ledf2+0x9c>
10010620:	38001126 	beq	r7,zero,10010668 <__ledf2+0xc4>
10010624:	00800044 	movi	r2,1
10010628:	f800283a 	ret
1001062c:	30d2b03a 	or	r9,r6,r3
10010630:	483fea26 	beq	r9,zero,100105dc <__alt_data_end+0xf80105dc>
10010634:	00800084 	movi	r2,2
10010638:	f800283a 	ret
1001063c:	39c03fcc 	andi	r7,r7,255
10010640:	39400726 	beq	r7,r5,10010660 <__ledf2+0xbc>
10010644:	2800081e 	bne	r5,zero,10010668 <__ledf2+0xc4>
10010648:	00800044 	movi	r2,1
1001064c:	f800283a 	ret
10010650:	2292b03a 	or	r9,r4,r10
10010654:	483fdf26 	beq	r9,zero,100105d4 <__alt_data_end+0xf80105d4>
10010658:	00800084 	movi	r2,2
1001065c:	f800283a 	ret
10010660:	4080030e 	bge	r8,r2,10010670 <__ledf2+0xcc>
10010664:	383fef26 	beq	r7,zero,10010624 <__alt_data_end+0xf8010624>
10010668:	00bfffc4 	movi	r2,-1
1001066c:	f800283a 	ret
10010670:	123feb16 	blt	r2,r8,10010620 <__alt_data_end+0xf8010620>
10010674:	1abff336 	bltu	r3,r10,10010644 <__alt_data_end+0xf8010644>
10010678:	50c00326 	beq	r10,r3,10010688 <__ledf2+0xe4>
1001067c:	50c0042e 	bgeu	r10,r3,10010690 <__ledf2+0xec>
10010680:	283fe81e 	bne	r5,zero,10010624 <__alt_data_end+0xf8010624>
10010684:	003ff806 	br	10010668 <__alt_data_end+0xf8010668>
10010688:	313fee36 	bltu	r6,r4,10010644 <__alt_data_end+0xf8010644>
1001068c:	21bffc36 	bltu	r4,r6,10010680 <__alt_data_end+0xf8010680>
10010690:	0005883a 	mov	r2,zero
10010694:	f800283a 	ret

10010698 <__muldf3>:
10010698:	deffee04 	addi	sp,sp,-72
1001069c:	dd000c15 	stw	r20,48(sp)
100106a0:	2828d53a 	srli	r20,r5,20
100106a4:	ddc00f15 	stw	r23,60(sp)
100106a8:	282ed7fa 	srli	r23,r5,31
100106ac:	dc000815 	stw	r16,32(sp)
100106b0:	04000434 	movhi	r16,16
100106b4:	dcc00b15 	stw	r19,44(sp)
100106b8:	843fffc4 	addi	r16,r16,-1
100106bc:	dfc01115 	stw	ra,68(sp)
100106c0:	df001015 	stw	fp,64(sp)
100106c4:	dd800e15 	stw	r22,56(sp)
100106c8:	dd400d15 	stw	r21,52(sp)
100106cc:	dc800a15 	stw	r18,40(sp)
100106d0:	dc400915 	stw	r17,36(sp)
100106d4:	a501ffcc 	andi	r20,r20,2047
100106d8:	2c20703a 	and	r16,r5,r16
100106dc:	b827883a 	mov	r19,r23
100106e0:	ba403fcc 	andi	r9,r23,255
100106e4:	a0006026 	beq	r20,zero,10010868 <__muldf3+0x1d0>
100106e8:	0081ffc4 	movi	r2,2047
100106ec:	202d883a 	mov	r22,r4
100106f0:	a0803626 	beq	r20,r2,100107cc <__muldf3+0x134>
100106f4:	84000434 	orhi	r16,r16,16
100106f8:	200ad77a 	srli	r5,r4,29
100106fc:	800490fa 	slli	r2,r16,3
10010700:	202c90fa 	slli	r22,r4,3
10010704:	a53f0044 	addi	r20,r20,-1023
10010708:	28a0b03a 	or	r16,r5,r2
1001070c:	002b883a 	mov	r21,zero
10010710:	000b883a 	mov	r5,zero
10010714:	3804d53a 	srli	r2,r7,20
10010718:	3838d7fa 	srli	fp,r7,31
1001071c:	04400434 	movhi	r17,16
10010720:	8c7fffc4 	addi	r17,r17,-1
10010724:	1081ffcc 	andi	r2,r2,2047
10010728:	3025883a 	mov	r18,r6
1001072c:	3c62703a 	and	r17,r7,r17
10010730:	e2803fcc 	andi	r10,fp,255
10010734:	10006d26 	beq	r2,zero,100108ec <__muldf3+0x254>
10010738:	00c1ffc4 	movi	r3,2047
1001073c:	10c06526 	beq	r2,r3,100108d4 <__muldf3+0x23c>
10010740:	8c400434 	orhi	r17,r17,16
10010744:	300ed77a 	srli	r7,r6,29
10010748:	880690fa 	slli	r3,r17,3
1001074c:	302490fa 	slli	r18,r6,3
10010750:	10bf0044 	addi	r2,r2,-1023
10010754:	38e2b03a 	or	r17,r7,r3
10010758:	000f883a 	mov	r7,zero
1001075c:	a087883a 	add	r3,r20,r2
10010760:	010003c4 	movi	r4,15
10010764:	3d44b03a 	or	r2,r7,r21
10010768:	e5ccf03a 	xor	r6,fp,r23
1001076c:	1a000044 	addi	r8,r3,1
10010770:	20809b36 	bltu	r4,r2,100109e0 <__muldf3+0x348>
10010774:	100490ba 	slli	r2,r2,2
10010778:	01040074 	movhi	r4,4097
1001077c:	2101e304 	addi	r4,r4,1932
10010780:	1105883a 	add	r2,r2,r4
10010784:	10800017 	ldw	r2,0(r2)
10010788:	1000683a 	jmp	r2
1001078c:	100109e0 	cmpeqi	zero,r2,1063
10010790:	100107ec 	andhi	zero,r2,1055
10010794:	100107ec 	andhi	zero,r2,1055
10010798:	100107e8 	cmpgeui	zero,r2,1055
1001079c:	100109bc 	xorhi	zero,r2,1062
100107a0:	100109bc 	xorhi	zero,r2,1062
100107a4:	100109a4 	muli	zero,r2,1062
100107a8:	100107e8 	cmpgeui	zero,r2,1055
100107ac:	100109bc 	xorhi	zero,r2,1062
100107b0:	100109a4 	muli	zero,r2,1062
100107b4:	100109bc 	xorhi	zero,r2,1062
100107b8:	100107e8 	cmpgeui	zero,r2,1055
100107bc:	100109cc 	andi	zero,r2,1063
100107c0:	100109cc 	andi	zero,r2,1063
100107c4:	100109cc 	andi	zero,r2,1063
100107c8:	10010d2c 	andhi	zero,r2,1076
100107cc:	2404b03a 	or	r2,r4,r16
100107d0:	1000711e 	bne	r2,zero,10010998 <__muldf3+0x300>
100107d4:	05400204 	movi	r21,8
100107d8:	0021883a 	mov	r16,zero
100107dc:	002d883a 	mov	r22,zero
100107e0:	01400084 	movi	r5,2
100107e4:	003fcb06 	br	10010714 <__alt_data_end+0xf8010714>
100107e8:	500d883a 	mov	r6,r10
100107ec:	00800084 	movi	r2,2
100107f0:	38805926 	beq	r7,r2,10010958 <__muldf3+0x2c0>
100107f4:	008000c4 	movi	r2,3
100107f8:	3881bb26 	beq	r7,r2,10010ee8 <__muldf3+0x850>
100107fc:	00800044 	movi	r2,1
10010800:	3881961e 	bne	r7,r2,10010e5c <__muldf3+0x7c4>
10010804:	3027883a 	mov	r19,r6
10010808:	0005883a 	mov	r2,zero
1001080c:	0021883a 	mov	r16,zero
10010810:	002d883a 	mov	r22,zero
10010814:	1004953a 	slli	r2,r2,20
10010818:	98c03fcc 	andi	r3,r19,255
1001081c:	04400434 	movhi	r17,16
10010820:	8c7fffc4 	addi	r17,r17,-1
10010824:	180697fa 	slli	r3,r3,31
10010828:	8460703a 	and	r16,r16,r17
1001082c:	80a0b03a 	or	r16,r16,r2
10010830:	80c6b03a 	or	r3,r16,r3
10010834:	b005883a 	mov	r2,r22
10010838:	dfc01117 	ldw	ra,68(sp)
1001083c:	df001017 	ldw	fp,64(sp)
10010840:	ddc00f17 	ldw	r23,60(sp)
10010844:	dd800e17 	ldw	r22,56(sp)
10010848:	dd400d17 	ldw	r21,52(sp)
1001084c:	dd000c17 	ldw	r20,48(sp)
10010850:	dcc00b17 	ldw	r19,44(sp)
10010854:	dc800a17 	ldw	r18,40(sp)
10010858:	dc400917 	ldw	r17,36(sp)
1001085c:	dc000817 	ldw	r16,32(sp)
10010860:	dec01204 	addi	sp,sp,72
10010864:	f800283a 	ret
10010868:	2404b03a 	or	r2,r4,r16
1001086c:	202b883a 	mov	r21,r4
10010870:	10004426 	beq	r2,zero,10010984 <__muldf3+0x2ec>
10010874:	80015126 	beq	r16,zero,10010dbc <__muldf3+0x724>
10010878:	8009883a 	mov	r4,r16
1001087c:	d9800715 	stw	r6,28(sp)
10010880:	d9c00215 	stw	r7,8(sp)
10010884:	da400415 	stw	r9,16(sp)
10010888:	0011a040 	call	10011a04 <__clzsi2>
1001088c:	d9800717 	ldw	r6,28(sp)
10010890:	d9c00217 	ldw	r7,8(sp)
10010894:	da400417 	ldw	r9,16(sp)
10010898:	113ffd44 	addi	r4,r2,-11
1001089c:	00c00704 	movi	r3,28
100108a0:	19014216 	blt	r3,r4,10010dac <__muldf3+0x714>
100108a4:	00c00744 	movi	r3,29
100108a8:	15bffe04 	addi	r22,r2,-8
100108ac:	1907c83a 	sub	r3,r3,r4
100108b0:	85a0983a 	sll	r16,r16,r22
100108b4:	a8c6d83a 	srl	r3,r21,r3
100108b8:	adac983a 	sll	r22,r21,r22
100108bc:	1c20b03a 	or	r16,r3,r16
100108c0:	1080fcc4 	addi	r2,r2,1011
100108c4:	00a9c83a 	sub	r20,zero,r2
100108c8:	002b883a 	mov	r21,zero
100108cc:	000b883a 	mov	r5,zero
100108d0:	003f9006 	br	10010714 <__alt_data_end+0xf8010714>
100108d4:	3446b03a 	or	r3,r6,r17
100108d8:	1800281e 	bne	r3,zero,1001097c <__muldf3+0x2e4>
100108dc:	0023883a 	mov	r17,zero
100108e0:	0025883a 	mov	r18,zero
100108e4:	01c00084 	movi	r7,2
100108e8:	003f9c06 	br	1001075c <__alt_data_end+0xf801075c>
100108ec:	3446b03a 	or	r3,r6,r17
100108f0:	18001e26 	beq	r3,zero,1001096c <__muldf3+0x2d4>
100108f4:	88012126 	beq	r17,zero,10010d7c <__muldf3+0x6e4>
100108f8:	8809883a 	mov	r4,r17
100108fc:	d9400215 	stw	r5,8(sp)
10010900:	d9800715 	stw	r6,28(sp)
10010904:	da400415 	stw	r9,16(sp)
10010908:	da800315 	stw	r10,12(sp)
1001090c:	0011a040 	call	10011a04 <__clzsi2>
10010910:	d9400217 	ldw	r5,8(sp)
10010914:	d9800717 	ldw	r6,28(sp)
10010918:	da400417 	ldw	r9,16(sp)
1001091c:	da800317 	ldw	r10,12(sp)
10010920:	113ffd44 	addi	r4,r2,-11
10010924:	00c00704 	movi	r3,28
10010928:	19011016 	blt	r3,r4,10010d6c <__muldf3+0x6d4>
1001092c:	00c00744 	movi	r3,29
10010930:	14bffe04 	addi	r18,r2,-8
10010934:	1907c83a 	sub	r3,r3,r4
10010938:	8ca2983a 	sll	r17,r17,r18
1001093c:	30c6d83a 	srl	r3,r6,r3
10010940:	34a4983a 	sll	r18,r6,r18
10010944:	1c62b03a 	or	r17,r3,r17
10010948:	1080fcc4 	addi	r2,r2,1011
1001094c:	0085c83a 	sub	r2,zero,r2
10010950:	000f883a 	mov	r7,zero
10010954:	003f8106 	br	1001075c <__alt_data_end+0xf801075c>
10010958:	3027883a 	mov	r19,r6
1001095c:	0081ffc4 	movi	r2,2047
10010960:	0021883a 	mov	r16,zero
10010964:	002d883a 	mov	r22,zero
10010968:	003faa06 	br	10010814 <__alt_data_end+0xf8010814>
1001096c:	0023883a 	mov	r17,zero
10010970:	0025883a 	mov	r18,zero
10010974:	01c00044 	movi	r7,1
10010978:	003f7806 	br	1001075c <__alt_data_end+0xf801075c>
1001097c:	01c000c4 	movi	r7,3
10010980:	003f7606 	br	1001075c <__alt_data_end+0xf801075c>
10010984:	05400104 	movi	r21,4
10010988:	0021883a 	mov	r16,zero
1001098c:	002d883a 	mov	r22,zero
10010990:	01400044 	movi	r5,1
10010994:	003f5f06 	br	10010714 <__alt_data_end+0xf8010714>
10010998:	05400304 	movi	r21,12
1001099c:	014000c4 	movi	r5,3
100109a0:	003f5c06 	br	10010714 <__alt_data_end+0xf8010714>
100109a4:	04000434 	movhi	r16,16
100109a8:	0027883a 	mov	r19,zero
100109ac:	843fffc4 	addi	r16,r16,-1
100109b0:	05bfffc4 	movi	r22,-1
100109b4:	0081ffc4 	movi	r2,2047
100109b8:	003f9606 	br	10010814 <__alt_data_end+0xf8010814>
100109bc:	8023883a 	mov	r17,r16
100109c0:	b025883a 	mov	r18,r22
100109c4:	280f883a 	mov	r7,r5
100109c8:	003f8806 	br	100107ec <__alt_data_end+0xf80107ec>
100109cc:	8023883a 	mov	r17,r16
100109d0:	b025883a 	mov	r18,r22
100109d4:	480d883a 	mov	r6,r9
100109d8:	280f883a 	mov	r7,r5
100109dc:	003f8306 	br	100107ec <__alt_data_end+0xf80107ec>
100109e0:	b026d43a 	srli	r19,r22,16
100109e4:	902ed43a 	srli	r23,r18,16
100109e8:	b5bfffcc 	andi	r22,r22,65535
100109ec:	94bfffcc 	andi	r18,r18,65535
100109f0:	b00b883a 	mov	r5,r22
100109f4:	9009883a 	mov	r4,r18
100109f8:	d8c00515 	stw	r3,20(sp)
100109fc:	d9800715 	stw	r6,28(sp)
10010a00:	da000615 	stw	r8,24(sp)
10010a04:	0004b280 	call	10004b28 <__mulsi3>
10010a08:	980b883a 	mov	r5,r19
10010a0c:	9009883a 	mov	r4,r18
10010a10:	1029883a 	mov	r20,r2
10010a14:	0004b280 	call	10004b28 <__mulsi3>
10010a18:	b80b883a 	mov	r5,r23
10010a1c:	9809883a 	mov	r4,r19
10010a20:	102b883a 	mov	r21,r2
10010a24:	0004b280 	call	10004b28 <__mulsi3>
10010a28:	b809883a 	mov	r4,r23
10010a2c:	b00b883a 	mov	r5,r22
10010a30:	1039883a 	mov	fp,r2
10010a34:	0004b280 	call	10004b28 <__mulsi3>
10010a38:	a008d43a 	srli	r4,r20,16
10010a3c:	1545883a 	add	r2,r2,r21
10010a40:	d8c00517 	ldw	r3,20(sp)
10010a44:	2085883a 	add	r2,r4,r2
10010a48:	d9800717 	ldw	r6,28(sp)
10010a4c:	da000617 	ldw	r8,24(sp)
10010a50:	1540022e 	bgeu	r2,r21,10010a5c <__muldf3+0x3c4>
10010a54:	01000074 	movhi	r4,1
10010a58:	e139883a 	add	fp,fp,r4
10010a5c:	100e943a 	slli	r7,r2,16
10010a60:	1004d43a 	srli	r2,r2,16
10010a64:	882ad43a 	srli	r21,r17,16
10010a68:	a53fffcc 	andi	r20,r20,65535
10010a6c:	8c7fffcc 	andi	r17,r17,65535
10010a70:	3d29883a 	add	r20,r7,r20
10010a74:	b00b883a 	mov	r5,r22
10010a78:	8809883a 	mov	r4,r17
10010a7c:	d8c00515 	stw	r3,20(sp)
10010a80:	d9800715 	stw	r6,28(sp)
10010a84:	da000615 	stw	r8,24(sp)
10010a88:	dd000115 	stw	r20,4(sp)
10010a8c:	d8800015 	stw	r2,0(sp)
10010a90:	0004b280 	call	10004b28 <__mulsi3>
10010a94:	980b883a 	mov	r5,r19
10010a98:	8809883a 	mov	r4,r17
10010a9c:	d8800215 	stw	r2,8(sp)
10010aa0:	0004b280 	call	10004b28 <__mulsi3>
10010aa4:	9809883a 	mov	r4,r19
10010aa8:	a80b883a 	mov	r5,r21
10010aac:	1029883a 	mov	r20,r2
10010ab0:	0004b280 	call	10004b28 <__mulsi3>
10010ab4:	b00b883a 	mov	r5,r22
10010ab8:	a809883a 	mov	r4,r21
10010abc:	d8800415 	stw	r2,16(sp)
10010ac0:	0004b280 	call	10004b28 <__mulsi3>
10010ac4:	d9c00217 	ldw	r7,8(sp)
10010ac8:	1505883a 	add	r2,r2,r20
10010acc:	d8c00517 	ldw	r3,20(sp)
10010ad0:	3826d43a 	srli	r19,r7,16
10010ad4:	d9800717 	ldw	r6,28(sp)
10010ad8:	da000617 	ldw	r8,24(sp)
10010adc:	9885883a 	add	r2,r19,r2
10010ae0:	da400417 	ldw	r9,16(sp)
10010ae4:	1500022e 	bgeu	r2,r20,10010af0 <__muldf3+0x458>
10010ae8:	01000074 	movhi	r4,1
10010aec:	4913883a 	add	r9,r9,r4
10010af0:	1028d43a 	srli	r20,r2,16
10010af4:	1004943a 	slli	r2,r2,16
10010af8:	802cd43a 	srli	r22,r16,16
10010afc:	843fffcc 	andi	r16,r16,65535
10010b00:	3cffffcc 	andi	r19,r7,65535
10010b04:	9009883a 	mov	r4,r18
10010b08:	800b883a 	mov	r5,r16
10010b0c:	a269883a 	add	r20,r20,r9
10010b10:	d8c00515 	stw	r3,20(sp)
10010b14:	d9800715 	stw	r6,28(sp)
10010b18:	da000615 	stw	r8,24(sp)
10010b1c:	14e7883a 	add	r19,r2,r19
10010b20:	0004b280 	call	10004b28 <__mulsi3>
10010b24:	9009883a 	mov	r4,r18
10010b28:	b00b883a 	mov	r5,r22
10010b2c:	d8800315 	stw	r2,12(sp)
10010b30:	0004b280 	call	10004b28 <__mulsi3>
10010b34:	b809883a 	mov	r4,r23
10010b38:	b00b883a 	mov	r5,r22
10010b3c:	d8800215 	stw	r2,8(sp)
10010b40:	0004b280 	call	10004b28 <__mulsi3>
10010b44:	b80b883a 	mov	r5,r23
10010b48:	8009883a 	mov	r4,r16
10010b4c:	d8800415 	stw	r2,16(sp)
10010b50:	0004b280 	call	10004b28 <__mulsi3>
10010b54:	da800317 	ldw	r10,12(sp)
10010b58:	d9c00217 	ldw	r7,8(sp)
10010b5c:	d9000017 	ldw	r4,0(sp)
10010b60:	502ed43a 	srli	r23,r10,16
10010b64:	11c5883a 	add	r2,r2,r7
10010b68:	24e5883a 	add	r18,r4,r19
10010b6c:	b885883a 	add	r2,r23,r2
10010b70:	d8c00517 	ldw	r3,20(sp)
10010b74:	d9800717 	ldw	r6,28(sp)
10010b78:	da000617 	ldw	r8,24(sp)
10010b7c:	da400417 	ldw	r9,16(sp)
10010b80:	11c0022e 	bgeu	r2,r7,10010b8c <__muldf3+0x4f4>
10010b84:	01000074 	movhi	r4,1
10010b88:	4913883a 	add	r9,r9,r4
10010b8c:	100ed43a 	srli	r7,r2,16
10010b90:	1004943a 	slli	r2,r2,16
10010b94:	55ffffcc 	andi	r23,r10,65535
10010b98:	3a53883a 	add	r9,r7,r9
10010b9c:	8809883a 	mov	r4,r17
10010ba0:	800b883a 	mov	r5,r16
10010ba4:	d8c00515 	stw	r3,20(sp)
10010ba8:	d9800715 	stw	r6,28(sp)
10010bac:	da000615 	stw	r8,24(sp)
10010bb0:	da400415 	stw	r9,16(sp)
10010bb4:	15ef883a 	add	r23,r2,r23
10010bb8:	0004b280 	call	10004b28 <__mulsi3>
10010bbc:	8809883a 	mov	r4,r17
10010bc0:	b00b883a 	mov	r5,r22
10010bc4:	d8800215 	stw	r2,8(sp)
10010bc8:	0004b280 	call	10004b28 <__mulsi3>
10010bcc:	b00b883a 	mov	r5,r22
10010bd0:	a809883a 	mov	r4,r21
10010bd4:	d8800315 	stw	r2,12(sp)
10010bd8:	0004b280 	call	10004b28 <__mulsi3>
10010bdc:	8009883a 	mov	r4,r16
10010be0:	a80b883a 	mov	r5,r21
10010be4:	1023883a 	mov	r17,r2
10010be8:	0004b280 	call	10004b28 <__mulsi3>
10010bec:	d9c00217 	ldw	r7,8(sp)
10010bf0:	da800317 	ldw	r10,12(sp)
10010bf4:	d8c00517 	ldw	r3,20(sp)
10010bf8:	3808d43a 	srli	r4,r7,16
10010bfc:	1285883a 	add	r2,r2,r10
10010c00:	d9800717 	ldw	r6,28(sp)
10010c04:	2085883a 	add	r2,r4,r2
10010c08:	da000617 	ldw	r8,24(sp)
10010c0c:	da400417 	ldw	r9,16(sp)
10010c10:	1280022e 	bgeu	r2,r10,10010c1c <__muldf3+0x584>
10010c14:	01000074 	movhi	r4,1
10010c18:	8923883a 	add	r17,r17,r4
10010c1c:	1008943a 	slli	r4,r2,16
10010c20:	39ffffcc 	andi	r7,r7,65535
10010c24:	e4b9883a 	add	fp,fp,r18
10010c28:	21cf883a 	add	r7,r4,r7
10010c2c:	e4e7803a 	cmpltu	r19,fp,r19
10010c30:	3d0f883a 	add	r7,r7,r20
10010c34:	bf39883a 	add	fp,r23,fp
10010c38:	99c9883a 	add	r4,r19,r7
10010c3c:	e5ef803a 	cmpltu	r23,fp,r23
10010c40:	490b883a 	add	r5,r9,r4
10010c44:	1004d43a 	srli	r2,r2,16
10010c48:	b965883a 	add	r18,r23,r5
10010c4c:	24c9803a 	cmpltu	r4,r4,r19
10010c50:	3d29803a 	cmpltu	r20,r7,r20
10010c54:	a128b03a 	or	r20,r20,r4
10010c58:	95ef803a 	cmpltu	r23,r18,r23
10010c5c:	2a53803a 	cmpltu	r9,r5,r9
10010c60:	a0a9883a 	add	r20,r20,r2
10010c64:	4deeb03a 	or	r23,r9,r23
10010c68:	a5ef883a 	add	r23,r20,r23
10010c6c:	bc63883a 	add	r17,r23,r17
10010c70:	e004927a 	slli	r2,fp,9
10010c74:	d9000117 	ldw	r4,4(sp)
10010c78:	882e927a 	slli	r23,r17,9
10010c7c:	9022d5fa 	srli	r17,r18,23
10010c80:	e038d5fa 	srli	fp,fp,23
10010c84:	1104b03a 	or	r2,r2,r4
10010c88:	9024927a 	slli	r18,r18,9
10010c8c:	1004c03a 	cmpne	r2,r2,zero
10010c90:	bc62b03a 	or	r17,r23,r17
10010c94:	1738b03a 	or	fp,r2,fp
10010c98:	8880402c 	andhi	r2,r17,256
10010c9c:	e4a4b03a 	or	r18,fp,r18
10010ca0:	10000726 	beq	r2,zero,10010cc0 <__muldf3+0x628>
10010ca4:	9006d07a 	srli	r3,r18,1
10010ca8:	880497fa 	slli	r2,r17,31
10010cac:	9480004c 	andi	r18,r18,1
10010cb0:	8822d07a 	srli	r17,r17,1
10010cb4:	1ca4b03a 	or	r18,r3,r18
10010cb8:	14a4b03a 	or	r18,r2,r18
10010cbc:	4007883a 	mov	r3,r8
10010cc0:	1880ffc4 	addi	r2,r3,1023
10010cc4:	0080460e 	bge	zero,r2,10010de0 <__muldf3+0x748>
10010cc8:	910001cc 	andi	r4,r18,7
10010ccc:	20000726 	beq	r4,zero,10010cec <__muldf3+0x654>
10010cd0:	910003cc 	andi	r4,r18,15
10010cd4:	01400104 	movi	r5,4
10010cd8:	21400426 	beq	r4,r5,10010cec <__muldf3+0x654>
10010cdc:	9149883a 	add	r4,r18,r5
10010ce0:	24a5803a 	cmpltu	r18,r4,r18
10010ce4:	8ca3883a 	add	r17,r17,r18
10010ce8:	2025883a 	mov	r18,r4
10010cec:	8900402c 	andhi	r4,r17,256
10010cf0:	20000426 	beq	r4,zero,10010d04 <__muldf3+0x66c>
10010cf4:	18810004 	addi	r2,r3,1024
10010cf8:	00ffc034 	movhi	r3,65280
10010cfc:	18ffffc4 	addi	r3,r3,-1
10010d00:	88e2703a 	and	r17,r17,r3
10010d04:	00c1ff84 	movi	r3,2046
10010d08:	18bf1316 	blt	r3,r2,10010958 <__alt_data_end+0xf8010958>
10010d0c:	882c977a 	slli	r22,r17,29
10010d10:	9024d0fa 	srli	r18,r18,3
10010d14:	8822927a 	slli	r17,r17,9
10010d18:	1081ffcc 	andi	r2,r2,2047
10010d1c:	b4acb03a 	or	r22,r22,r18
10010d20:	8820d33a 	srli	r16,r17,12
10010d24:	3027883a 	mov	r19,r6
10010d28:	003eba06 	br	10010814 <__alt_data_end+0xf8010814>
10010d2c:	8080022c 	andhi	r2,r16,8
10010d30:	10000926 	beq	r2,zero,10010d58 <__muldf3+0x6c0>
10010d34:	8880022c 	andhi	r2,r17,8
10010d38:	1000071e 	bne	r2,zero,10010d58 <__muldf3+0x6c0>
10010d3c:	00800434 	movhi	r2,16
10010d40:	8c000234 	orhi	r16,r17,8
10010d44:	10bfffc4 	addi	r2,r2,-1
10010d48:	e027883a 	mov	r19,fp
10010d4c:	80a0703a 	and	r16,r16,r2
10010d50:	902d883a 	mov	r22,r18
10010d54:	003f1706 	br	100109b4 <__alt_data_end+0xf80109b4>
10010d58:	00800434 	movhi	r2,16
10010d5c:	84000234 	orhi	r16,r16,8
10010d60:	10bfffc4 	addi	r2,r2,-1
10010d64:	80a0703a 	and	r16,r16,r2
10010d68:	003f1206 	br	100109b4 <__alt_data_end+0xf80109b4>
10010d6c:	147ff604 	addi	r17,r2,-40
10010d70:	3462983a 	sll	r17,r6,r17
10010d74:	0025883a 	mov	r18,zero
10010d78:	003ef306 	br	10010948 <__alt_data_end+0xf8010948>
10010d7c:	3009883a 	mov	r4,r6
10010d80:	d9400215 	stw	r5,8(sp)
10010d84:	d9800715 	stw	r6,28(sp)
10010d88:	da400415 	stw	r9,16(sp)
10010d8c:	da800315 	stw	r10,12(sp)
10010d90:	0011a040 	call	10011a04 <__clzsi2>
10010d94:	10800804 	addi	r2,r2,32
10010d98:	da800317 	ldw	r10,12(sp)
10010d9c:	da400417 	ldw	r9,16(sp)
10010da0:	d9800717 	ldw	r6,28(sp)
10010da4:	d9400217 	ldw	r5,8(sp)
10010da8:	003edd06 	br	10010920 <__alt_data_end+0xf8010920>
10010dac:	143ff604 	addi	r16,r2,-40
10010db0:	ac20983a 	sll	r16,r21,r16
10010db4:	002d883a 	mov	r22,zero
10010db8:	003ec106 	br	100108c0 <__alt_data_end+0xf80108c0>
10010dbc:	d9800715 	stw	r6,28(sp)
10010dc0:	d9c00215 	stw	r7,8(sp)
10010dc4:	da400415 	stw	r9,16(sp)
10010dc8:	0011a040 	call	10011a04 <__clzsi2>
10010dcc:	10800804 	addi	r2,r2,32
10010dd0:	da400417 	ldw	r9,16(sp)
10010dd4:	d9c00217 	ldw	r7,8(sp)
10010dd8:	d9800717 	ldw	r6,28(sp)
10010ddc:	003eae06 	br	10010898 <__alt_data_end+0xf8010898>
10010de0:	00c00044 	movi	r3,1
10010de4:	1887c83a 	sub	r3,r3,r2
10010de8:	01000e04 	movi	r4,56
10010dec:	20fe8516 	blt	r4,r3,10010804 <__alt_data_end+0xf8010804>
10010df0:	010007c4 	movi	r4,31
10010df4:	20c01b16 	blt	r4,r3,10010e64 <__muldf3+0x7cc>
10010df8:	00800804 	movi	r2,32
10010dfc:	10c5c83a 	sub	r2,r2,r3
10010e00:	888a983a 	sll	r5,r17,r2
10010e04:	90c8d83a 	srl	r4,r18,r3
10010e08:	9084983a 	sll	r2,r18,r2
10010e0c:	88e2d83a 	srl	r17,r17,r3
10010e10:	2906b03a 	or	r3,r5,r4
10010e14:	1004c03a 	cmpne	r2,r2,zero
10010e18:	1886b03a 	or	r3,r3,r2
10010e1c:	188001cc 	andi	r2,r3,7
10010e20:	10000726 	beq	r2,zero,10010e40 <__muldf3+0x7a8>
10010e24:	188003cc 	andi	r2,r3,15
10010e28:	01000104 	movi	r4,4
10010e2c:	11000426 	beq	r2,r4,10010e40 <__muldf3+0x7a8>
10010e30:	1805883a 	mov	r2,r3
10010e34:	10c00104 	addi	r3,r2,4
10010e38:	1885803a 	cmpltu	r2,r3,r2
10010e3c:	88a3883a 	add	r17,r17,r2
10010e40:	8880202c 	andhi	r2,r17,128
10010e44:	10001c26 	beq	r2,zero,10010eb8 <__muldf3+0x820>
10010e48:	3027883a 	mov	r19,r6
10010e4c:	00800044 	movi	r2,1
10010e50:	0021883a 	mov	r16,zero
10010e54:	002d883a 	mov	r22,zero
10010e58:	003e6e06 	br	10010814 <__alt_data_end+0xf8010814>
10010e5c:	4007883a 	mov	r3,r8
10010e60:	003f9706 	br	10010cc0 <__alt_data_end+0xf8010cc0>
10010e64:	017ff844 	movi	r5,-31
10010e68:	2885c83a 	sub	r2,r5,r2
10010e6c:	888ad83a 	srl	r5,r17,r2
10010e70:	00800804 	movi	r2,32
10010e74:	18801a26 	beq	r3,r2,10010ee0 <__muldf3+0x848>
10010e78:	01001004 	movi	r4,64
10010e7c:	20c7c83a 	sub	r3,r4,r3
10010e80:	88e2983a 	sll	r17,r17,r3
10010e84:	8ca4b03a 	or	r18,r17,r18
10010e88:	9004c03a 	cmpne	r2,r18,zero
10010e8c:	2884b03a 	or	r2,r5,r2
10010e90:	144001cc 	andi	r17,r2,7
10010e94:	88000d1e 	bne	r17,zero,10010ecc <__muldf3+0x834>
10010e98:	0021883a 	mov	r16,zero
10010e9c:	102cd0fa 	srli	r22,r2,3
10010ea0:	3027883a 	mov	r19,r6
10010ea4:	0005883a 	mov	r2,zero
10010ea8:	b46cb03a 	or	r22,r22,r17
10010eac:	003e5906 	br	10010814 <__alt_data_end+0xf8010814>
10010eb0:	1007883a 	mov	r3,r2
10010eb4:	0023883a 	mov	r17,zero
10010eb8:	8820927a 	slli	r16,r17,9
10010ebc:	1805883a 	mov	r2,r3
10010ec0:	8822977a 	slli	r17,r17,29
10010ec4:	8020d33a 	srli	r16,r16,12
10010ec8:	003ff406 	br	10010e9c <__alt_data_end+0xf8010e9c>
10010ecc:	10c003cc 	andi	r3,r2,15
10010ed0:	01000104 	movi	r4,4
10010ed4:	193ff626 	beq	r3,r4,10010eb0 <__alt_data_end+0xf8010eb0>
10010ed8:	0023883a 	mov	r17,zero
10010edc:	003fd506 	br	10010e34 <__alt_data_end+0xf8010e34>
10010ee0:	0023883a 	mov	r17,zero
10010ee4:	003fe706 	br	10010e84 <__alt_data_end+0xf8010e84>
10010ee8:	00800434 	movhi	r2,16
10010eec:	8c000234 	orhi	r16,r17,8
10010ef0:	10bfffc4 	addi	r2,r2,-1
10010ef4:	3027883a 	mov	r19,r6
10010ef8:	80a0703a 	and	r16,r16,r2
10010efc:	902d883a 	mov	r22,r18
10010f00:	003eac06 	br	100109b4 <__alt_data_end+0xf80109b4>

10010f04 <__subdf3>:
10010f04:	02000434 	movhi	r8,16
10010f08:	423fffc4 	addi	r8,r8,-1
10010f0c:	defffb04 	addi	sp,sp,-20
10010f10:	2a14703a 	and	r10,r5,r8
10010f14:	3812d53a 	srli	r9,r7,20
10010f18:	3a10703a 	and	r8,r7,r8
10010f1c:	2006d77a 	srli	r3,r4,29
10010f20:	3004d77a 	srli	r2,r6,29
10010f24:	dc000015 	stw	r16,0(sp)
10010f28:	501490fa 	slli	r10,r10,3
10010f2c:	2820d53a 	srli	r16,r5,20
10010f30:	401090fa 	slli	r8,r8,3
10010f34:	dc800215 	stw	r18,8(sp)
10010f38:	dc400115 	stw	r17,4(sp)
10010f3c:	dfc00415 	stw	ra,16(sp)
10010f40:	202290fa 	slli	r17,r4,3
10010f44:	dcc00315 	stw	r19,12(sp)
10010f48:	4a41ffcc 	andi	r9,r9,2047
10010f4c:	0101ffc4 	movi	r4,2047
10010f50:	2824d7fa 	srli	r18,r5,31
10010f54:	8401ffcc 	andi	r16,r16,2047
10010f58:	50c6b03a 	or	r3,r10,r3
10010f5c:	380ed7fa 	srli	r7,r7,31
10010f60:	408ab03a 	or	r5,r8,r2
10010f64:	300c90fa 	slli	r6,r6,3
10010f68:	49009626 	beq	r9,r4,100111c4 <__subdf3+0x2c0>
10010f6c:	39c0005c 	xori	r7,r7,1
10010f70:	8245c83a 	sub	r2,r16,r9
10010f74:	3c807426 	beq	r7,r18,10011148 <__subdf3+0x244>
10010f78:	0080af0e 	bge	zero,r2,10011238 <__subdf3+0x334>
10010f7c:	48002a1e 	bne	r9,zero,10011028 <__subdf3+0x124>
10010f80:	2988b03a 	or	r4,r5,r6
10010f84:	20009a1e 	bne	r4,zero,100111f0 <__subdf3+0x2ec>
10010f88:	888001cc 	andi	r2,r17,7
10010f8c:	10000726 	beq	r2,zero,10010fac <__subdf3+0xa8>
10010f90:	888003cc 	andi	r2,r17,15
10010f94:	01000104 	movi	r4,4
10010f98:	11000426 	beq	r2,r4,10010fac <__subdf3+0xa8>
10010f9c:	890b883a 	add	r5,r17,r4
10010fa0:	2c63803a 	cmpltu	r17,r5,r17
10010fa4:	1c47883a 	add	r3,r3,r17
10010fa8:	2823883a 	mov	r17,r5
10010fac:	1880202c 	andhi	r2,r3,128
10010fb0:	10005926 	beq	r2,zero,10011118 <__subdf3+0x214>
10010fb4:	84000044 	addi	r16,r16,1
10010fb8:	0081ffc4 	movi	r2,2047
10010fbc:	8080be26 	beq	r16,r2,100112b8 <__subdf3+0x3b4>
10010fc0:	017fe034 	movhi	r5,65408
10010fc4:	297fffc4 	addi	r5,r5,-1
10010fc8:	1946703a 	and	r3,r3,r5
10010fcc:	1804977a 	slli	r2,r3,29
10010fd0:	1806927a 	slli	r3,r3,9
10010fd4:	8822d0fa 	srli	r17,r17,3
10010fd8:	8401ffcc 	andi	r16,r16,2047
10010fdc:	180ad33a 	srli	r5,r3,12
10010fe0:	9100004c 	andi	r4,r18,1
10010fe4:	1444b03a 	or	r2,r2,r17
10010fe8:	80c1ffcc 	andi	r3,r16,2047
10010fec:	1820953a 	slli	r16,r3,20
10010ff0:	20c03fcc 	andi	r3,r4,255
10010ff4:	180897fa 	slli	r4,r3,31
10010ff8:	00c00434 	movhi	r3,16
10010ffc:	18ffffc4 	addi	r3,r3,-1
10011000:	28c6703a 	and	r3,r5,r3
10011004:	1c06b03a 	or	r3,r3,r16
10011008:	1906b03a 	or	r3,r3,r4
1001100c:	dfc00417 	ldw	ra,16(sp)
10011010:	dcc00317 	ldw	r19,12(sp)
10011014:	dc800217 	ldw	r18,8(sp)
10011018:	dc400117 	ldw	r17,4(sp)
1001101c:	dc000017 	ldw	r16,0(sp)
10011020:	dec00504 	addi	sp,sp,20
10011024:	f800283a 	ret
10011028:	0101ffc4 	movi	r4,2047
1001102c:	813fd626 	beq	r16,r4,10010f88 <__alt_data_end+0xf8010f88>
10011030:	29402034 	orhi	r5,r5,128
10011034:	01000e04 	movi	r4,56
10011038:	2080a316 	blt	r4,r2,100112c8 <__subdf3+0x3c4>
1001103c:	010007c4 	movi	r4,31
10011040:	2080c616 	blt	r4,r2,1001135c <__subdf3+0x458>
10011044:	01000804 	movi	r4,32
10011048:	2089c83a 	sub	r4,r4,r2
1001104c:	2910983a 	sll	r8,r5,r4
10011050:	308ed83a 	srl	r7,r6,r2
10011054:	3108983a 	sll	r4,r6,r4
10011058:	2884d83a 	srl	r2,r5,r2
1001105c:	41ccb03a 	or	r6,r8,r7
10011060:	2008c03a 	cmpne	r4,r4,zero
10011064:	310cb03a 	or	r6,r6,r4
10011068:	898dc83a 	sub	r6,r17,r6
1001106c:	89a3803a 	cmpltu	r17,r17,r6
10011070:	1887c83a 	sub	r3,r3,r2
10011074:	1c47c83a 	sub	r3,r3,r17
10011078:	3023883a 	mov	r17,r6
1001107c:	1880202c 	andhi	r2,r3,128
10011080:	10002326 	beq	r2,zero,10011110 <__subdf3+0x20c>
10011084:	04c02034 	movhi	r19,128
10011088:	9cffffc4 	addi	r19,r19,-1
1001108c:	1ce6703a 	and	r19,r3,r19
10011090:	98007a26 	beq	r19,zero,1001127c <__subdf3+0x378>
10011094:	9809883a 	mov	r4,r19
10011098:	0011a040 	call	10011a04 <__clzsi2>
1001109c:	113ffe04 	addi	r4,r2,-8
100110a0:	00c007c4 	movi	r3,31
100110a4:	19007b16 	blt	r3,r4,10011294 <__subdf3+0x390>
100110a8:	00800804 	movi	r2,32
100110ac:	1105c83a 	sub	r2,r2,r4
100110b0:	8884d83a 	srl	r2,r17,r2
100110b4:	9906983a 	sll	r3,r19,r4
100110b8:	8922983a 	sll	r17,r17,r4
100110bc:	10c4b03a 	or	r2,r2,r3
100110c0:	24007816 	blt	r4,r16,100112a4 <__subdf3+0x3a0>
100110c4:	2421c83a 	sub	r16,r4,r16
100110c8:	80c00044 	addi	r3,r16,1
100110cc:	010007c4 	movi	r4,31
100110d0:	20c09516 	blt	r4,r3,10011328 <__subdf3+0x424>
100110d4:	01400804 	movi	r5,32
100110d8:	28cbc83a 	sub	r5,r5,r3
100110dc:	88c8d83a 	srl	r4,r17,r3
100110e0:	8962983a 	sll	r17,r17,r5
100110e4:	114a983a 	sll	r5,r2,r5
100110e8:	10c6d83a 	srl	r3,r2,r3
100110ec:	8804c03a 	cmpne	r2,r17,zero
100110f0:	290ab03a 	or	r5,r5,r4
100110f4:	28a2b03a 	or	r17,r5,r2
100110f8:	0021883a 	mov	r16,zero
100110fc:	003fa206 	br	10010f88 <__alt_data_end+0xf8010f88>
10011100:	2090b03a 	or	r8,r4,r2
10011104:	40018e26 	beq	r8,zero,10011740 <__subdf3+0x83c>
10011108:	1007883a 	mov	r3,r2
1001110c:	2023883a 	mov	r17,r4
10011110:	888001cc 	andi	r2,r17,7
10011114:	103f9e1e 	bne	r2,zero,10010f90 <__alt_data_end+0xf8010f90>
10011118:	1804977a 	slli	r2,r3,29
1001111c:	8822d0fa 	srli	r17,r17,3
10011120:	1810d0fa 	srli	r8,r3,3
10011124:	9100004c 	andi	r4,r18,1
10011128:	1444b03a 	or	r2,r2,r17
1001112c:	00c1ffc4 	movi	r3,2047
10011130:	80c02826 	beq	r16,r3,100111d4 <__subdf3+0x2d0>
10011134:	01400434 	movhi	r5,16
10011138:	297fffc4 	addi	r5,r5,-1
1001113c:	80e0703a 	and	r16,r16,r3
10011140:	414a703a 	and	r5,r8,r5
10011144:	003fa806 	br	10010fe8 <__alt_data_end+0xf8010fe8>
10011148:	0080630e 	bge	zero,r2,100112d8 <__subdf3+0x3d4>
1001114c:	48003026 	beq	r9,zero,10011210 <__subdf3+0x30c>
10011150:	0101ffc4 	movi	r4,2047
10011154:	813f8c26 	beq	r16,r4,10010f88 <__alt_data_end+0xf8010f88>
10011158:	29402034 	orhi	r5,r5,128
1001115c:	01000e04 	movi	r4,56
10011160:	2080a90e 	bge	r4,r2,10011408 <__subdf3+0x504>
10011164:	298cb03a 	or	r6,r5,r6
10011168:	3012c03a 	cmpne	r9,r6,zero
1001116c:	0005883a 	mov	r2,zero
10011170:	4c53883a 	add	r9,r9,r17
10011174:	4c63803a 	cmpltu	r17,r9,r17
10011178:	10c7883a 	add	r3,r2,r3
1001117c:	88c7883a 	add	r3,r17,r3
10011180:	4823883a 	mov	r17,r9
10011184:	1880202c 	andhi	r2,r3,128
10011188:	1000d026 	beq	r2,zero,100114cc <__subdf3+0x5c8>
1001118c:	84000044 	addi	r16,r16,1
10011190:	0081ffc4 	movi	r2,2047
10011194:	8080fe26 	beq	r16,r2,10011590 <__subdf3+0x68c>
10011198:	00bfe034 	movhi	r2,65408
1001119c:	10bfffc4 	addi	r2,r2,-1
100111a0:	1886703a 	and	r3,r3,r2
100111a4:	880ad07a 	srli	r5,r17,1
100111a8:	180497fa 	slli	r2,r3,31
100111ac:	8900004c 	andi	r4,r17,1
100111b0:	2922b03a 	or	r17,r5,r4
100111b4:	1806d07a 	srli	r3,r3,1
100111b8:	1462b03a 	or	r17,r2,r17
100111bc:	3825883a 	mov	r18,r7
100111c0:	003f7106 	br	10010f88 <__alt_data_end+0xf8010f88>
100111c4:	2984b03a 	or	r2,r5,r6
100111c8:	103f6826 	beq	r2,zero,10010f6c <__alt_data_end+0xf8010f6c>
100111cc:	39c03fcc 	andi	r7,r7,255
100111d0:	003f6706 	br	10010f70 <__alt_data_end+0xf8010f70>
100111d4:	4086b03a 	or	r3,r8,r2
100111d8:	18015226 	beq	r3,zero,10011724 <__subdf3+0x820>
100111dc:	00c00434 	movhi	r3,16
100111e0:	41400234 	orhi	r5,r8,8
100111e4:	18ffffc4 	addi	r3,r3,-1
100111e8:	28ca703a 	and	r5,r5,r3
100111ec:	003f7e06 	br	10010fe8 <__alt_data_end+0xf8010fe8>
100111f0:	10bfffc4 	addi	r2,r2,-1
100111f4:	1000491e 	bne	r2,zero,1001131c <__subdf3+0x418>
100111f8:	898fc83a 	sub	r7,r17,r6
100111fc:	89e3803a 	cmpltu	r17,r17,r7
10011200:	1947c83a 	sub	r3,r3,r5
10011204:	1c47c83a 	sub	r3,r3,r17
10011208:	3823883a 	mov	r17,r7
1001120c:	003f9b06 	br	1001107c <__alt_data_end+0xf801107c>
10011210:	2988b03a 	or	r4,r5,r6
10011214:	203f5c26 	beq	r4,zero,10010f88 <__alt_data_end+0xf8010f88>
10011218:	10bfffc4 	addi	r2,r2,-1
1001121c:	1000931e 	bne	r2,zero,1001146c <__subdf3+0x568>
10011220:	898d883a 	add	r6,r17,r6
10011224:	3463803a 	cmpltu	r17,r6,r17
10011228:	1947883a 	add	r3,r3,r5
1001122c:	88c7883a 	add	r3,r17,r3
10011230:	3023883a 	mov	r17,r6
10011234:	003fd306 	br	10011184 <__alt_data_end+0xf8011184>
10011238:	1000541e 	bne	r2,zero,1001138c <__subdf3+0x488>
1001123c:	80800044 	addi	r2,r16,1
10011240:	1081ffcc 	andi	r2,r2,2047
10011244:	01000044 	movi	r4,1
10011248:	2080a20e 	bge	r4,r2,100114d4 <__subdf3+0x5d0>
1001124c:	8989c83a 	sub	r4,r17,r6
10011250:	8905803a 	cmpltu	r2,r17,r4
10011254:	1967c83a 	sub	r19,r3,r5
10011258:	98a7c83a 	sub	r19,r19,r2
1001125c:	9880202c 	andhi	r2,r19,128
10011260:	10006326 	beq	r2,zero,100113f0 <__subdf3+0x4ec>
10011264:	3463c83a 	sub	r17,r6,r17
10011268:	28c7c83a 	sub	r3,r5,r3
1001126c:	344d803a 	cmpltu	r6,r6,r17
10011270:	19a7c83a 	sub	r19,r3,r6
10011274:	3825883a 	mov	r18,r7
10011278:	983f861e 	bne	r19,zero,10011094 <__alt_data_end+0xf8011094>
1001127c:	8809883a 	mov	r4,r17
10011280:	0011a040 	call	10011a04 <__clzsi2>
10011284:	10800804 	addi	r2,r2,32
10011288:	113ffe04 	addi	r4,r2,-8
1001128c:	00c007c4 	movi	r3,31
10011290:	193f850e 	bge	r3,r4,100110a8 <__alt_data_end+0xf80110a8>
10011294:	10bff604 	addi	r2,r2,-40
10011298:	8884983a 	sll	r2,r17,r2
1001129c:	0023883a 	mov	r17,zero
100112a0:	243f880e 	bge	r4,r16,100110c4 <__alt_data_end+0xf80110c4>
100112a4:	00ffe034 	movhi	r3,65408
100112a8:	18ffffc4 	addi	r3,r3,-1
100112ac:	8121c83a 	sub	r16,r16,r4
100112b0:	10c6703a 	and	r3,r2,r3
100112b4:	003f3406 	br	10010f88 <__alt_data_end+0xf8010f88>
100112b8:	9100004c 	andi	r4,r18,1
100112bc:	000b883a 	mov	r5,zero
100112c0:	0005883a 	mov	r2,zero
100112c4:	003f4806 	br	10010fe8 <__alt_data_end+0xf8010fe8>
100112c8:	298cb03a 	or	r6,r5,r6
100112cc:	300cc03a 	cmpne	r6,r6,zero
100112d0:	0005883a 	mov	r2,zero
100112d4:	003f6406 	br	10011068 <__alt_data_end+0xf8011068>
100112d8:	10009a1e 	bne	r2,zero,10011544 <__subdf3+0x640>
100112dc:	82400044 	addi	r9,r16,1
100112e0:	4881ffcc 	andi	r2,r9,2047
100112e4:	02800044 	movi	r10,1
100112e8:	5080670e 	bge	r10,r2,10011488 <__subdf3+0x584>
100112ec:	0081ffc4 	movi	r2,2047
100112f0:	4880af26 	beq	r9,r2,100115b0 <__subdf3+0x6ac>
100112f4:	898d883a 	add	r6,r17,r6
100112f8:	1945883a 	add	r2,r3,r5
100112fc:	3447803a 	cmpltu	r3,r6,r17
10011300:	1887883a 	add	r3,r3,r2
10011304:	182297fa 	slli	r17,r3,31
10011308:	300cd07a 	srli	r6,r6,1
1001130c:	1806d07a 	srli	r3,r3,1
10011310:	4821883a 	mov	r16,r9
10011314:	89a2b03a 	or	r17,r17,r6
10011318:	003f1b06 	br	10010f88 <__alt_data_end+0xf8010f88>
1001131c:	0101ffc4 	movi	r4,2047
10011320:	813f441e 	bne	r16,r4,10011034 <__alt_data_end+0xf8011034>
10011324:	003f1806 	br	10010f88 <__alt_data_end+0xf8010f88>
10011328:	843ff844 	addi	r16,r16,-31
1001132c:	01400804 	movi	r5,32
10011330:	1408d83a 	srl	r4,r2,r16
10011334:	19405026 	beq	r3,r5,10011478 <__subdf3+0x574>
10011338:	01401004 	movi	r5,64
1001133c:	28c7c83a 	sub	r3,r5,r3
10011340:	10c4983a 	sll	r2,r2,r3
10011344:	88a2b03a 	or	r17,r17,r2
10011348:	8822c03a 	cmpne	r17,r17,zero
1001134c:	2462b03a 	or	r17,r4,r17
10011350:	0007883a 	mov	r3,zero
10011354:	0021883a 	mov	r16,zero
10011358:	003f6d06 	br	10011110 <__alt_data_end+0xf8011110>
1001135c:	11fff804 	addi	r7,r2,-32
10011360:	01000804 	movi	r4,32
10011364:	29ced83a 	srl	r7,r5,r7
10011368:	11004526 	beq	r2,r4,10011480 <__subdf3+0x57c>
1001136c:	01001004 	movi	r4,64
10011370:	2089c83a 	sub	r4,r4,r2
10011374:	2904983a 	sll	r2,r5,r4
10011378:	118cb03a 	or	r6,r2,r6
1001137c:	300cc03a 	cmpne	r6,r6,zero
10011380:	398cb03a 	or	r6,r7,r6
10011384:	0005883a 	mov	r2,zero
10011388:	003f3706 	br	10011068 <__alt_data_end+0xf8011068>
1001138c:	80002a26 	beq	r16,zero,10011438 <__subdf3+0x534>
10011390:	0101ffc4 	movi	r4,2047
10011394:	49006626 	beq	r9,r4,10011530 <__subdf3+0x62c>
10011398:	0085c83a 	sub	r2,zero,r2
1001139c:	18c02034 	orhi	r3,r3,128
100113a0:	01000e04 	movi	r4,56
100113a4:	20807e16 	blt	r4,r2,100115a0 <__subdf3+0x69c>
100113a8:	010007c4 	movi	r4,31
100113ac:	2080e716 	blt	r4,r2,1001174c <__subdf3+0x848>
100113b0:	01000804 	movi	r4,32
100113b4:	2089c83a 	sub	r4,r4,r2
100113b8:	1914983a 	sll	r10,r3,r4
100113bc:	8890d83a 	srl	r8,r17,r2
100113c0:	8908983a 	sll	r4,r17,r4
100113c4:	1884d83a 	srl	r2,r3,r2
100113c8:	5222b03a 	or	r17,r10,r8
100113cc:	2006c03a 	cmpne	r3,r4,zero
100113d0:	88e2b03a 	or	r17,r17,r3
100113d4:	3463c83a 	sub	r17,r6,r17
100113d8:	2885c83a 	sub	r2,r5,r2
100113dc:	344d803a 	cmpltu	r6,r6,r17
100113e0:	1187c83a 	sub	r3,r2,r6
100113e4:	4821883a 	mov	r16,r9
100113e8:	3825883a 	mov	r18,r7
100113ec:	003f2306 	br	1001107c <__alt_data_end+0xf801107c>
100113f0:	24d0b03a 	or	r8,r4,r19
100113f4:	40001b1e 	bne	r8,zero,10011464 <__subdf3+0x560>
100113f8:	0005883a 	mov	r2,zero
100113fc:	0009883a 	mov	r4,zero
10011400:	0021883a 	mov	r16,zero
10011404:	003f4906 	br	1001112c <__alt_data_end+0xf801112c>
10011408:	010007c4 	movi	r4,31
1001140c:	20803a16 	blt	r4,r2,100114f8 <__subdf3+0x5f4>
10011410:	01000804 	movi	r4,32
10011414:	2089c83a 	sub	r4,r4,r2
10011418:	2912983a 	sll	r9,r5,r4
1001141c:	3090d83a 	srl	r8,r6,r2
10011420:	3108983a 	sll	r4,r6,r4
10011424:	2884d83a 	srl	r2,r5,r2
10011428:	4a12b03a 	or	r9,r9,r8
1001142c:	2008c03a 	cmpne	r4,r4,zero
10011430:	4912b03a 	or	r9,r9,r4
10011434:	003f4e06 	br	10011170 <__alt_data_end+0xf8011170>
10011438:	1c48b03a 	or	r4,r3,r17
1001143c:	20003c26 	beq	r4,zero,10011530 <__subdf3+0x62c>
10011440:	0084303a 	nor	r2,zero,r2
10011444:	1000381e 	bne	r2,zero,10011528 <__subdf3+0x624>
10011448:	3463c83a 	sub	r17,r6,r17
1001144c:	28c5c83a 	sub	r2,r5,r3
10011450:	344d803a 	cmpltu	r6,r6,r17
10011454:	1187c83a 	sub	r3,r2,r6
10011458:	4821883a 	mov	r16,r9
1001145c:	3825883a 	mov	r18,r7
10011460:	003f0606 	br	1001107c <__alt_data_end+0xf801107c>
10011464:	2023883a 	mov	r17,r4
10011468:	003f0906 	br	10011090 <__alt_data_end+0xf8011090>
1001146c:	0101ffc4 	movi	r4,2047
10011470:	813f3a1e 	bne	r16,r4,1001115c <__alt_data_end+0xf801115c>
10011474:	003ec406 	br	10010f88 <__alt_data_end+0xf8010f88>
10011478:	0005883a 	mov	r2,zero
1001147c:	003fb106 	br	10011344 <__alt_data_end+0xf8011344>
10011480:	0005883a 	mov	r2,zero
10011484:	003fbc06 	br	10011378 <__alt_data_end+0xf8011378>
10011488:	1c44b03a 	or	r2,r3,r17
1001148c:	80008e1e 	bne	r16,zero,100116c8 <__subdf3+0x7c4>
10011490:	1000c826 	beq	r2,zero,100117b4 <__subdf3+0x8b0>
10011494:	2984b03a 	or	r2,r5,r6
10011498:	103ebb26 	beq	r2,zero,10010f88 <__alt_data_end+0xf8010f88>
1001149c:	8989883a 	add	r4,r17,r6
100114a0:	1945883a 	add	r2,r3,r5
100114a4:	2447803a 	cmpltu	r3,r4,r17
100114a8:	1887883a 	add	r3,r3,r2
100114ac:	1880202c 	andhi	r2,r3,128
100114b0:	2023883a 	mov	r17,r4
100114b4:	103f1626 	beq	r2,zero,10011110 <__alt_data_end+0xf8011110>
100114b8:	00bfe034 	movhi	r2,65408
100114bc:	10bfffc4 	addi	r2,r2,-1
100114c0:	5021883a 	mov	r16,r10
100114c4:	1886703a 	and	r3,r3,r2
100114c8:	003eaf06 	br	10010f88 <__alt_data_end+0xf8010f88>
100114cc:	3825883a 	mov	r18,r7
100114d0:	003f0f06 	br	10011110 <__alt_data_end+0xf8011110>
100114d4:	1c44b03a 	or	r2,r3,r17
100114d8:	8000251e 	bne	r16,zero,10011570 <__subdf3+0x66c>
100114dc:	1000661e 	bne	r2,zero,10011678 <__subdf3+0x774>
100114e0:	2990b03a 	or	r8,r5,r6
100114e4:	40009626 	beq	r8,zero,10011740 <__subdf3+0x83c>
100114e8:	2807883a 	mov	r3,r5
100114ec:	3023883a 	mov	r17,r6
100114f0:	3825883a 	mov	r18,r7
100114f4:	003ea406 	br	10010f88 <__alt_data_end+0xf8010f88>
100114f8:	127ff804 	addi	r9,r2,-32
100114fc:	01000804 	movi	r4,32
10011500:	2a52d83a 	srl	r9,r5,r9
10011504:	11008c26 	beq	r2,r4,10011738 <__subdf3+0x834>
10011508:	01001004 	movi	r4,64
1001150c:	2085c83a 	sub	r2,r4,r2
10011510:	2884983a 	sll	r2,r5,r2
10011514:	118cb03a 	or	r6,r2,r6
10011518:	300cc03a 	cmpne	r6,r6,zero
1001151c:	4992b03a 	or	r9,r9,r6
10011520:	0005883a 	mov	r2,zero
10011524:	003f1206 	br	10011170 <__alt_data_end+0xf8011170>
10011528:	0101ffc4 	movi	r4,2047
1001152c:	493f9c1e 	bne	r9,r4,100113a0 <__alt_data_end+0xf80113a0>
10011530:	2807883a 	mov	r3,r5
10011534:	3023883a 	mov	r17,r6
10011538:	4821883a 	mov	r16,r9
1001153c:	3825883a 	mov	r18,r7
10011540:	003e9106 	br	10010f88 <__alt_data_end+0xf8010f88>
10011544:	80001f1e 	bne	r16,zero,100115c4 <__subdf3+0x6c0>
10011548:	1c48b03a 	or	r4,r3,r17
1001154c:	20005a26 	beq	r4,zero,100116b8 <__subdf3+0x7b4>
10011550:	0084303a 	nor	r2,zero,r2
10011554:	1000561e 	bne	r2,zero,100116b0 <__subdf3+0x7ac>
10011558:	89a3883a 	add	r17,r17,r6
1001155c:	1945883a 	add	r2,r3,r5
10011560:	898d803a 	cmpltu	r6,r17,r6
10011564:	3087883a 	add	r3,r6,r2
10011568:	4821883a 	mov	r16,r9
1001156c:	003f0506 	br	10011184 <__alt_data_end+0xf8011184>
10011570:	10002b1e 	bne	r2,zero,10011620 <__subdf3+0x71c>
10011574:	2984b03a 	or	r2,r5,r6
10011578:	10008026 	beq	r2,zero,1001177c <__subdf3+0x878>
1001157c:	2807883a 	mov	r3,r5
10011580:	3023883a 	mov	r17,r6
10011584:	3825883a 	mov	r18,r7
10011588:	0401ffc4 	movi	r16,2047
1001158c:	003e7e06 	br	10010f88 <__alt_data_end+0xf8010f88>
10011590:	3809883a 	mov	r4,r7
10011594:	0011883a 	mov	r8,zero
10011598:	0005883a 	mov	r2,zero
1001159c:	003ee306 	br	1001112c <__alt_data_end+0xf801112c>
100115a0:	1c62b03a 	or	r17,r3,r17
100115a4:	8822c03a 	cmpne	r17,r17,zero
100115a8:	0005883a 	mov	r2,zero
100115ac:	003f8906 	br	100113d4 <__alt_data_end+0xf80113d4>
100115b0:	3809883a 	mov	r4,r7
100115b4:	4821883a 	mov	r16,r9
100115b8:	0011883a 	mov	r8,zero
100115bc:	0005883a 	mov	r2,zero
100115c0:	003eda06 	br	1001112c <__alt_data_end+0xf801112c>
100115c4:	0101ffc4 	movi	r4,2047
100115c8:	49003b26 	beq	r9,r4,100116b8 <__subdf3+0x7b4>
100115cc:	0085c83a 	sub	r2,zero,r2
100115d0:	18c02034 	orhi	r3,r3,128
100115d4:	01000e04 	movi	r4,56
100115d8:	20806e16 	blt	r4,r2,10011794 <__subdf3+0x890>
100115dc:	010007c4 	movi	r4,31
100115e0:	20807716 	blt	r4,r2,100117c0 <__subdf3+0x8bc>
100115e4:	01000804 	movi	r4,32
100115e8:	2089c83a 	sub	r4,r4,r2
100115ec:	1914983a 	sll	r10,r3,r4
100115f0:	8890d83a 	srl	r8,r17,r2
100115f4:	8908983a 	sll	r4,r17,r4
100115f8:	1884d83a 	srl	r2,r3,r2
100115fc:	5222b03a 	or	r17,r10,r8
10011600:	2006c03a 	cmpne	r3,r4,zero
10011604:	88e2b03a 	or	r17,r17,r3
10011608:	89a3883a 	add	r17,r17,r6
1001160c:	1145883a 	add	r2,r2,r5
10011610:	898d803a 	cmpltu	r6,r17,r6
10011614:	3087883a 	add	r3,r6,r2
10011618:	4821883a 	mov	r16,r9
1001161c:	003ed906 	br	10011184 <__alt_data_end+0xf8011184>
10011620:	2984b03a 	or	r2,r5,r6
10011624:	10004226 	beq	r2,zero,10011730 <__subdf3+0x82c>
10011628:	1808d0fa 	srli	r4,r3,3
1001162c:	8822d0fa 	srli	r17,r17,3
10011630:	1806977a 	slli	r3,r3,29
10011634:	2080022c 	andhi	r2,r4,8
10011638:	1c62b03a 	or	r17,r3,r17
1001163c:	10000826 	beq	r2,zero,10011660 <__subdf3+0x75c>
10011640:	2812d0fa 	srli	r9,r5,3
10011644:	4880022c 	andhi	r2,r9,8
10011648:	1000051e 	bne	r2,zero,10011660 <__subdf3+0x75c>
1001164c:	300cd0fa 	srli	r6,r6,3
10011650:	2804977a 	slli	r2,r5,29
10011654:	4809883a 	mov	r4,r9
10011658:	3825883a 	mov	r18,r7
1001165c:	11a2b03a 	or	r17,r2,r6
10011660:	8806d77a 	srli	r3,r17,29
10011664:	200890fa 	slli	r4,r4,3
10011668:	882290fa 	slli	r17,r17,3
1001166c:	0401ffc4 	movi	r16,2047
10011670:	1906b03a 	or	r3,r3,r4
10011674:	003e4406 	br	10010f88 <__alt_data_end+0xf8010f88>
10011678:	2984b03a 	or	r2,r5,r6
1001167c:	103e4226 	beq	r2,zero,10010f88 <__alt_data_end+0xf8010f88>
10011680:	8989c83a 	sub	r4,r17,r6
10011684:	8911803a 	cmpltu	r8,r17,r4
10011688:	1945c83a 	sub	r2,r3,r5
1001168c:	1205c83a 	sub	r2,r2,r8
10011690:	1200202c 	andhi	r8,r2,128
10011694:	403e9a26 	beq	r8,zero,10011100 <__alt_data_end+0xf8011100>
10011698:	3463c83a 	sub	r17,r6,r17
1001169c:	28c5c83a 	sub	r2,r5,r3
100116a0:	344d803a 	cmpltu	r6,r6,r17
100116a4:	1187c83a 	sub	r3,r2,r6
100116a8:	3825883a 	mov	r18,r7
100116ac:	003e3606 	br	10010f88 <__alt_data_end+0xf8010f88>
100116b0:	0101ffc4 	movi	r4,2047
100116b4:	493fc71e 	bne	r9,r4,100115d4 <__alt_data_end+0xf80115d4>
100116b8:	2807883a 	mov	r3,r5
100116bc:	3023883a 	mov	r17,r6
100116c0:	4821883a 	mov	r16,r9
100116c4:	003e3006 	br	10010f88 <__alt_data_end+0xf8010f88>
100116c8:	10003626 	beq	r2,zero,100117a4 <__subdf3+0x8a0>
100116cc:	2984b03a 	or	r2,r5,r6
100116d0:	10001726 	beq	r2,zero,10011730 <__subdf3+0x82c>
100116d4:	1808d0fa 	srli	r4,r3,3
100116d8:	8822d0fa 	srli	r17,r17,3
100116dc:	1806977a 	slli	r3,r3,29
100116e0:	2080022c 	andhi	r2,r4,8
100116e4:	1c62b03a 	or	r17,r3,r17
100116e8:	10000726 	beq	r2,zero,10011708 <__subdf3+0x804>
100116ec:	2812d0fa 	srli	r9,r5,3
100116f0:	4880022c 	andhi	r2,r9,8
100116f4:	1000041e 	bne	r2,zero,10011708 <__subdf3+0x804>
100116f8:	300cd0fa 	srli	r6,r6,3
100116fc:	2804977a 	slli	r2,r5,29
10011700:	4809883a 	mov	r4,r9
10011704:	11a2b03a 	or	r17,r2,r6
10011708:	8806d77a 	srli	r3,r17,29
1001170c:	200890fa 	slli	r4,r4,3
10011710:	882290fa 	slli	r17,r17,3
10011714:	3825883a 	mov	r18,r7
10011718:	1906b03a 	or	r3,r3,r4
1001171c:	0401ffc4 	movi	r16,2047
10011720:	003e1906 	br	10010f88 <__alt_data_end+0xf8010f88>
10011724:	000b883a 	mov	r5,zero
10011728:	0005883a 	mov	r2,zero
1001172c:	003e2e06 	br	10010fe8 <__alt_data_end+0xf8010fe8>
10011730:	0401ffc4 	movi	r16,2047
10011734:	003e1406 	br	10010f88 <__alt_data_end+0xf8010f88>
10011738:	0005883a 	mov	r2,zero
1001173c:	003f7506 	br	10011514 <__alt_data_end+0xf8011514>
10011740:	0005883a 	mov	r2,zero
10011744:	0009883a 	mov	r4,zero
10011748:	003e7806 	br	1001112c <__alt_data_end+0xf801112c>
1001174c:	123ff804 	addi	r8,r2,-32
10011750:	01000804 	movi	r4,32
10011754:	1a10d83a 	srl	r8,r3,r8
10011758:	11002526 	beq	r2,r4,100117f0 <__subdf3+0x8ec>
1001175c:	01001004 	movi	r4,64
10011760:	2085c83a 	sub	r2,r4,r2
10011764:	1884983a 	sll	r2,r3,r2
10011768:	1444b03a 	or	r2,r2,r17
1001176c:	1004c03a 	cmpne	r2,r2,zero
10011770:	40a2b03a 	or	r17,r8,r2
10011774:	0005883a 	mov	r2,zero
10011778:	003f1606 	br	100113d4 <__alt_data_end+0xf80113d4>
1001177c:	02000434 	movhi	r8,16
10011780:	0009883a 	mov	r4,zero
10011784:	423fffc4 	addi	r8,r8,-1
10011788:	00bfffc4 	movi	r2,-1
1001178c:	0401ffc4 	movi	r16,2047
10011790:	003e6606 	br	1001112c <__alt_data_end+0xf801112c>
10011794:	1c62b03a 	or	r17,r3,r17
10011798:	8822c03a 	cmpne	r17,r17,zero
1001179c:	0005883a 	mov	r2,zero
100117a0:	003f9906 	br	10011608 <__alt_data_end+0xf8011608>
100117a4:	2807883a 	mov	r3,r5
100117a8:	3023883a 	mov	r17,r6
100117ac:	0401ffc4 	movi	r16,2047
100117b0:	003df506 	br	10010f88 <__alt_data_end+0xf8010f88>
100117b4:	2807883a 	mov	r3,r5
100117b8:	3023883a 	mov	r17,r6
100117bc:	003df206 	br	10010f88 <__alt_data_end+0xf8010f88>
100117c0:	123ff804 	addi	r8,r2,-32
100117c4:	01000804 	movi	r4,32
100117c8:	1a10d83a 	srl	r8,r3,r8
100117cc:	11000a26 	beq	r2,r4,100117f8 <__subdf3+0x8f4>
100117d0:	01001004 	movi	r4,64
100117d4:	2085c83a 	sub	r2,r4,r2
100117d8:	1884983a 	sll	r2,r3,r2
100117dc:	1444b03a 	or	r2,r2,r17
100117e0:	1004c03a 	cmpne	r2,r2,zero
100117e4:	40a2b03a 	or	r17,r8,r2
100117e8:	0005883a 	mov	r2,zero
100117ec:	003f8606 	br	10011608 <__alt_data_end+0xf8011608>
100117f0:	0005883a 	mov	r2,zero
100117f4:	003fdc06 	br	10011768 <__alt_data_end+0xf8011768>
100117f8:	0005883a 	mov	r2,zero
100117fc:	003ff706 	br	100117dc <__alt_data_end+0xf80117dc>

10011800 <__fixdfsi>:
10011800:	280cd53a 	srli	r6,r5,20
10011804:	00c00434 	movhi	r3,16
10011808:	18ffffc4 	addi	r3,r3,-1
1001180c:	3181ffcc 	andi	r6,r6,2047
10011810:	01c0ff84 	movi	r7,1022
10011814:	28c6703a 	and	r3,r5,r3
10011818:	280ad7fa 	srli	r5,r5,31
1001181c:	3980120e 	bge	r7,r6,10011868 <__fixdfsi+0x68>
10011820:	00810744 	movi	r2,1053
10011824:	11800c16 	blt	r2,r6,10011858 <__fixdfsi+0x58>
10011828:	00810cc4 	movi	r2,1075
1001182c:	1185c83a 	sub	r2,r2,r6
10011830:	01c007c4 	movi	r7,31
10011834:	18c00434 	orhi	r3,r3,16
10011838:	38800d16 	blt	r7,r2,10011870 <__fixdfsi+0x70>
1001183c:	31befb44 	addi	r6,r6,-1043
10011840:	2084d83a 	srl	r2,r4,r2
10011844:	1986983a 	sll	r3,r3,r6
10011848:	1884b03a 	or	r2,r3,r2
1001184c:	28000726 	beq	r5,zero,1001186c <__fixdfsi+0x6c>
10011850:	0085c83a 	sub	r2,zero,r2
10011854:	f800283a 	ret
10011858:	00a00034 	movhi	r2,32768
1001185c:	10bfffc4 	addi	r2,r2,-1
10011860:	2885883a 	add	r2,r5,r2
10011864:	f800283a 	ret
10011868:	0005883a 	mov	r2,zero
1001186c:	f800283a 	ret
10011870:	008104c4 	movi	r2,1043
10011874:	1185c83a 	sub	r2,r2,r6
10011878:	1884d83a 	srl	r2,r3,r2
1001187c:	003ff306 	br	1001184c <__alt_data_end+0xf801184c>

10011880 <__floatsidf>:
10011880:	defffd04 	addi	sp,sp,-12
10011884:	dfc00215 	stw	ra,8(sp)
10011888:	dc400115 	stw	r17,4(sp)
1001188c:	dc000015 	stw	r16,0(sp)
10011890:	20002b26 	beq	r4,zero,10011940 <__floatsidf+0xc0>
10011894:	2023883a 	mov	r17,r4
10011898:	2020d7fa 	srli	r16,r4,31
1001189c:	20002d16 	blt	r4,zero,10011954 <__floatsidf+0xd4>
100118a0:	8809883a 	mov	r4,r17
100118a4:	0011a040 	call	10011a04 <__clzsi2>
100118a8:	01410784 	movi	r5,1054
100118ac:	288bc83a 	sub	r5,r5,r2
100118b0:	01010cc4 	movi	r4,1075
100118b4:	2149c83a 	sub	r4,r4,r5
100118b8:	00c007c4 	movi	r3,31
100118bc:	1900160e 	bge	r3,r4,10011918 <__floatsidf+0x98>
100118c0:	00c104c4 	movi	r3,1043
100118c4:	1947c83a 	sub	r3,r3,r5
100118c8:	88c6983a 	sll	r3,r17,r3
100118cc:	00800434 	movhi	r2,16
100118d0:	10bfffc4 	addi	r2,r2,-1
100118d4:	1886703a 	and	r3,r3,r2
100118d8:	2941ffcc 	andi	r5,r5,2047
100118dc:	800d883a 	mov	r6,r16
100118e0:	0005883a 	mov	r2,zero
100118e4:	280a953a 	slli	r5,r5,20
100118e8:	31803fcc 	andi	r6,r6,255
100118ec:	01000434 	movhi	r4,16
100118f0:	300c97fa 	slli	r6,r6,31
100118f4:	213fffc4 	addi	r4,r4,-1
100118f8:	1906703a 	and	r3,r3,r4
100118fc:	1946b03a 	or	r3,r3,r5
10011900:	1986b03a 	or	r3,r3,r6
10011904:	dfc00217 	ldw	ra,8(sp)
10011908:	dc400117 	ldw	r17,4(sp)
1001190c:	dc000017 	ldw	r16,0(sp)
10011910:	dec00304 	addi	sp,sp,12
10011914:	f800283a 	ret
10011918:	00c002c4 	movi	r3,11
1001191c:	1887c83a 	sub	r3,r3,r2
10011920:	88c6d83a 	srl	r3,r17,r3
10011924:	8904983a 	sll	r2,r17,r4
10011928:	01000434 	movhi	r4,16
1001192c:	213fffc4 	addi	r4,r4,-1
10011930:	2941ffcc 	andi	r5,r5,2047
10011934:	1906703a 	and	r3,r3,r4
10011938:	800d883a 	mov	r6,r16
1001193c:	003fe906 	br	100118e4 <__alt_data_end+0xf80118e4>
10011940:	000d883a 	mov	r6,zero
10011944:	000b883a 	mov	r5,zero
10011948:	0007883a 	mov	r3,zero
1001194c:	0005883a 	mov	r2,zero
10011950:	003fe406 	br	100118e4 <__alt_data_end+0xf80118e4>
10011954:	0123c83a 	sub	r17,zero,r4
10011958:	003fd106 	br	100118a0 <__alt_data_end+0xf80118a0>

1001195c <__floatunsidf>:
1001195c:	defffe04 	addi	sp,sp,-8
10011960:	dc000015 	stw	r16,0(sp)
10011964:	dfc00115 	stw	ra,4(sp)
10011968:	2021883a 	mov	r16,r4
1001196c:	20002226 	beq	r4,zero,100119f8 <__floatunsidf+0x9c>
10011970:	0011a040 	call	10011a04 <__clzsi2>
10011974:	01010784 	movi	r4,1054
10011978:	2089c83a 	sub	r4,r4,r2
1001197c:	01810cc4 	movi	r6,1075
10011980:	310dc83a 	sub	r6,r6,r4
10011984:	00c007c4 	movi	r3,31
10011988:	1980120e 	bge	r3,r6,100119d4 <__floatunsidf+0x78>
1001198c:	00c104c4 	movi	r3,1043
10011990:	1907c83a 	sub	r3,r3,r4
10011994:	80ca983a 	sll	r5,r16,r3
10011998:	00800434 	movhi	r2,16
1001199c:	10bfffc4 	addi	r2,r2,-1
100119a0:	2101ffcc 	andi	r4,r4,2047
100119a4:	0021883a 	mov	r16,zero
100119a8:	288a703a 	and	r5,r5,r2
100119ac:	2008953a 	slli	r4,r4,20
100119b0:	00c00434 	movhi	r3,16
100119b4:	18ffffc4 	addi	r3,r3,-1
100119b8:	28c6703a 	and	r3,r5,r3
100119bc:	8005883a 	mov	r2,r16
100119c0:	1906b03a 	or	r3,r3,r4
100119c4:	dfc00117 	ldw	ra,4(sp)
100119c8:	dc000017 	ldw	r16,0(sp)
100119cc:	dec00204 	addi	sp,sp,8
100119d0:	f800283a 	ret
100119d4:	00c002c4 	movi	r3,11
100119d8:	188bc83a 	sub	r5,r3,r2
100119dc:	814ad83a 	srl	r5,r16,r5
100119e0:	00c00434 	movhi	r3,16
100119e4:	18ffffc4 	addi	r3,r3,-1
100119e8:	81a0983a 	sll	r16,r16,r6
100119ec:	2101ffcc 	andi	r4,r4,2047
100119f0:	28ca703a 	and	r5,r5,r3
100119f4:	003fed06 	br	100119ac <__alt_data_end+0xf80119ac>
100119f8:	0009883a 	mov	r4,zero
100119fc:	000b883a 	mov	r5,zero
10011a00:	003fea06 	br	100119ac <__alt_data_end+0xf80119ac>

10011a04 <__clzsi2>:
10011a04:	00bfffd4 	movui	r2,65535
10011a08:	11000536 	bltu	r2,r4,10011a20 <__clzsi2+0x1c>
10011a0c:	00803fc4 	movi	r2,255
10011a10:	11000f36 	bltu	r2,r4,10011a50 <__clzsi2+0x4c>
10011a14:	00800804 	movi	r2,32
10011a18:	0007883a 	mov	r3,zero
10011a1c:	00000506 	br	10011a34 <__clzsi2+0x30>
10011a20:	00804034 	movhi	r2,256
10011a24:	10bfffc4 	addi	r2,r2,-1
10011a28:	11000c2e 	bgeu	r2,r4,10011a5c <__clzsi2+0x58>
10011a2c:	00800204 	movi	r2,8
10011a30:	00c00604 	movi	r3,24
10011a34:	20c8d83a 	srl	r4,r4,r3
10011a38:	00c40074 	movhi	r3,4097
10011a3c:	18d36e04 	addi	r3,r3,19896
10011a40:	1909883a 	add	r4,r3,r4
10011a44:	20c00003 	ldbu	r3,0(r4)
10011a48:	10c5c83a 	sub	r2,r2,r3
10011a4c:	f800283a 	ret
10011a50:	00800604 	movi	r2,24
10011a54:	00c00204 	movi	r3,8
10011a58:	003ff606 	br	10011a34 <__alt_data_end+0xf8011a34>
10011a5c:	00800404 	movi	r2,16
10011a60:	1007883a 	mov	r3,r2
10011a64:	003ff306 	br	10011a34 <__alt_data_end+0xf8011a34>

10011a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011a68:	defffe04 	addi	sp,sp,-8
10011a6c:	dfc00115 	stw	ra,4(sp)
10011a70:	df000015 	stw	fp,0(sp)
10011a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011a78:	d0a00e17 	ldw	r2,-32712(gp)
10011a7c:	10000326 	beq	r2,zero,10011a8c <alt_get_errno+0x24>
10011a80:	d0a00e17 	ldw	r2,-32712(gp)
10011a84:	103ee83a 	callr	r2
10011a88:	00000106 	br	10011a90 <alt_get_errno+0x28>
10011a8c:	d0aa9004 	addi	r2,gp,-21952
}
10011a90:	e037883a 	mov	sp,fp
10011a94:	dfc00117 	ldw	ra,4(sp)
10011a98:	df000017 	ldw	fp,0(sp)
10011a9c:	dec00204 	addi	sp,sp,8
10011aa0:	f800283a 	ret

10011aa4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10011aa4:	defffb04 	addi	sp,sp,-20
10011aa8:	dfc00415 	stw	ra,16(sp)
10011aac:	df000315 	stw	fp,12(sp)
10011ab0:	df000304 	addi	fp,sp,12
10011ab4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10011ab8:	e0bfff17 	ldw	r2,-4(fp)
10011abc:	10000816 	blt	r2,zero,10011ae0 <close+0x3c>
10011ac0:	01400304 	movi	r5,12
10011ac4:	e13fff17 	ldw	r4,-4(fp)
10011ac8:	0004b280 	call	10004b28 <__mulsi3>
10011acc:	1007883a 	mov	r3,r2
10011ad0:	00840074 	movhi	r2,4097
10011ad4:	10999e04 	addi	r2,r2,26232
10011ad8:	1885883a 	add	r2,r3,r2
10011adc:	00000106 	br	10011ae4 <close+0x40>
10011ae0:	0005883a 	mov	r2,zero
10011ae4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10011ae8:	e0bffd17 	ldw	r2,-12(fp)
10011aec:	10001926 	beq	r2,zero,10011b54 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10011af0:	e0bffd17 	ldw	r2,-12(fp)
10011af4:	10800017 	ldw	r2,0(r2)
10011af8:	10800417 	ldw	r2,16(r2)
10011afc:	10000626 	beq	r2,zero,10011b18 <close+0x74>
10011b00:	e0bffd17 	ldw	r2,-12(fp)
10011b04:	10800017 	ldw	r2,0(r2)
10011b08:	10800417 	ldw	r2,16(r2)
10011b0c:	e13ffd17 	ldw	r4,-12(fp)
10011b10:	103ee83a 	callr	r2
10011b14:	00000106 	br	10011b1c <close+0x78>
10011b18:	0005883a 	mov	r2,zero
10011b1c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10011b20:	e13fff17 	ldw	r4,-4(fp)
10011b24:	001218c0 	call	1001218c <alt_release_fd>
    if (rval < 0)
10011b28:	e0bffe17 	ldw	r2,-8(fp)
10011b2c:	1000070e 	bge	r2,zero,10011b4c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10011b30:	0011a680 	call	10011a68 <alt_get_errno>
10011b34:	1007883a 	mov	r3,r2
10011b38:	e0bffe17 	ldw	r2,-8(fp)
10011b3c:	0085c83a 	sub	r2,zero,r2
10011b40:	18800015 	stw	r2,0(r3)
      return -1;
10011b44:	00bfffc4 	movi	r2,-1
10011b48:	00000706 	br	10011b68 <close+0xc4>
    }
    return 0;
10011b4c:	0005883a 	mov	r2,zero
10011b50:	00000506 	br	10011b68 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011b54:	0011a680 	call	10011a68 <alt_get_errno>
10011b58:	1007883a 	mov	r3,r2
10011b5c:	00801444 	movi	r2,81
10011b60:	18800015 	stw	r2,0(r3)
    return -1;
10011b64:	00bfffc4 	movi	r2,-1
  }
}
10011b68:	e037883a 	mov	sp,fp
10011b6c:	dfc00117 	ldw	ra,4(sp)
10011b70:	df000017 	ldw	fp,0(sp)
10011b74:	dec00204 	addi	sp,sp,8
10011b78:	f800283a 	ret

10011b7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10011b7c:	defffc04 	addi	sp,sp,-16
10011b80:	df000315 	stw	fp,12(sp)
10011b84:	df000304 	addi	fp,sp,12
10011b88:	e13ffd15 	stw	r4,-12(fp)
10011b8c:	e17ffe15 	stw	r5,-8(fp)
10011b90:	e1bfff15 	stw	r6,-4(fp)
  return len;
10011b94:	e0bfff17 	ldw	r2,-4(fp)
}
10011b98:	e037883a 	mov	sp,fp
10011b9c:	df000017 	ldw	fp,0(sp)
10011ba0:	dec00104 	addi	sp,sp,4
10011ba4:	f800283a 	ret

10011ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011ba8:	defffe04 	addi	sp,sp,-8
10011bac:	dfc00115 	stw	ra,4(sp)
10011bb0:	df000015 	stw	fp,0(sp)
10011bb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011bb8:	d0a00e17 	ldw	r2,-32712(gp)
10011bbc:	10000326 	beq	r2,zero,10011bcc <alt_get_errno+0x24>
10011bc0:	d0a00e17 	ldw	r2,-32712(gp)
10011bc4:	103ee83a 	callr	r2
10011bc8:	00000106 	br	10011bd0 <alt_get_errno+0x28>
10011bcc:	d0aa9004 	addi	r2,gp,-21952
}
10011bd0:	e037883a 	mov	sp,fp
10011bd4:	dfc00117 	ldw	ra,4(sp)
10011bd8:	df000017 	ldw	fp,0(sp)
10011bdc:	dec00204 	addi	sp,sp,8
10011be0:	f800283a 	ret

10011be4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10011be4:	defffb04 	addi	sp,sp,-20
10011be8:	dfc00415 	stw	ra,16(sp)
10011bec:	df000315 	stw	fp,12(sp)
10011bf0:	df000304 	addi	fp,sp,12
10011bf4:	e13ffe15 	stw	r4,-8(fp)
10011bf8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011bfc:	e0bffe17 	ldw	r2,-8(fp)
10011c00:	10000816 	blt	r2,zero,10011c24 <fstat+0x40>
10011c04:	01400304 	movi	r5,12
10011c08:	e13ffe17 	ldw	r4,-8(fp)
10011c0c:	0004b280 	call	10004b28 <__mulsi3>
10011c10:	1007883a 	mov	r3,r2
10011c14:	00840074 	movhi	r2,4097
10011c18:	10999e04 	addi	r2,r2,26232
10011c1c:	1885883a 	add	r2,r3,r2
10011c20:	00000106 	br	10011c28 <fstat+0x44>
10011c24:	0005883a 	mov	r2,zero
10011c28:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10011c2c:	e0bffd17 	ldw	r2,-12(fp)
10011c30:	10001026 	beq	r2,zero,10011c74 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10011c34:	e0bffd17 	ldw	r2,-12(fp)
10011c38:	10800017 	ldw	r2,0(r2)
10011c3c:	10800817 	ldw	r2,32(r2)
10011c40:	10000726 	beq	r2,zero,10011c60 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10011c44:	e0bffd17 	ldw	r2,-12(fp)
10011c48:	10800017 	ldw	r2,0(r2)
10011c4c:	10800817 	ldw	r2,32(r2)
10011c50:	e17fff17 	ldw	r5,-4(fp)
10011c54:	e13ffd17 	ldw	r4,-12(fp)
10011c58:	103ee83a 	callr	r2
10011c5c:	00000a06 	br	10011c88 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10011c60:	e0bfff17 	ldw	r2,-4(fp)
10011c64:	00c80004 	movi	r3,8192
10011c68:	10c00115 	stw	r3,4(r2)
      return 0;
10011c6c:	0005883a 	mov	r2,zero
10011c70:	00000506 	br	10011c88 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011c74:	0011ba80 	call	10011ba8 <alt_get_errno>
10011c78:	1007883a 	mov	r3,r2
10011c7c:	00801444 	movi	r2,81
10011c80:	18800015 	stw	r2,0(r3)
    return -1;
10011c84:	00bfffc4 	movi	r2,-1
  }
}
10011c88:	e037883a 	mov	sp,fp
10011c8c:	dfc00117 	ldw	ra,4(sp)
10011c90:	df000017 	ldw	fp,0(sp)
10011c94:	dec00204 	addi	sp,sp,8
10011c98:	f800283a 	ret

10011c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011c9c:	defffe04 	addi	sp,sp,-8
10011ca0:	dfc00115 	stw	ra,4(sp)
10011ca4:	df000015 	stw	fp,0(sp)
10011ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011cac:	d0a00e17 	ldw	r2,-32712(gp)
10011cb0:	10000326 	beq	r2,zero,10011cc0 <alt_get_errno+0x24>
10011cb4:	d0a00e17 	ldw	r2,-32712(gp)
10011cb8:	103ee83a 	callr	r2
10011cbc:	00000106 	br	10011cc4 <alt_get_errno+0x28>
10011cc0:	d0aa9004 	addi	r2,gp,-21952
}
10011cc4:	e037883a 	mov	sp,fp
10011cc8:	dfc00117 	ldw	ra,4(sp)
10011ccc:	df000017 	ldw	fp,0(sp)
10011cd0:	dec00204 	addi	sp,sp,8
10011cd4:	f800283a 	ret

10011cd8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10011cd8:	deffed04 	addi	sp,sp,-76
10011cdc:	dfc01215 	stw	ra,72(sp)
10011ce0:	df001115 	stw	fp,68(sp)
10011ce4:	df001104 	addi	fp,sp,68
10011ce8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011cec:	e0bfff17 	ldw	r2,-4(fp)
10011cf0:	10000816 	blt	r2,zero,10011d14 <isatty+0x3c>
10011cf4:	01400304 	movi	r5,12
10011cf8:	e13fff17 	ldw	r4,-4(fp)
10011cfc:	0004b280 	call	10004b28 <__mulsi3>
10011d00:	1007883a 	mov	r3,r2
10011d04:	00840074 	movhi	r2,4097
10011d08:	10999e04 	addi	r2,r2,26232
10011d0c:	1885883a 	add	r2,r3,r2
10011d10:	00000106 	br	10011d18 <isatty+0x40>
10011d14:	0005883a 	mov	r2,zero
10011d18:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10011d1c:	e0bfef17 	ldw	r2,-68(fp)
10011d20:	10000e26 	beq	r2,zero,10011d5c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10011d24:	e0bfef17 	ldw	r2,-68(fp)
10011d28:	10800017 	ldw	r2,0(r2)
10011d2c:	10800817 	ldw	r2,32(r2)
10011d30:	1000021e 	bne	r2,zero,10011d3c <isatty+0x64>
    {
      return 1;
10011d34:	00800044 	movi	r2,1
10011d38:	00000d06 	br	10011d70 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10011d3c:	e0bff004 	addi	r2,fp,-64
10011d40:	100b883a 	mov	r5,r2
10011d44:	e13fff17 	ldw	r4,-4(fp)
10011d48:	0011be40 	call	10011be4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10011d4c:	e0bff117 	ldw	r2,-60(fp)
10011d50:	10880020 	cmpeqi	r2,r2,8192
10011d54:	10803fcc 	andi	r2,r2,255
10011d58:	00000506 	br	10011d70 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10011d5c:	0011c9c0 	call	10011c9c <alt_get_errno>
10011d60:	1007883a 	mov	r3,r2
10011d64:	00801444 	movi	r2,81
10011d68:	18800015 	stw	r2,0(r3)
    return 0;
10011d6c:	0005883a 	mov	r2,zero
  }
}
10011d70:	e037883a 	mov	sp,fp
10011d74:	dfc00117 	ldw	ra,4(sp)
10011d78:	df000017 	ldw	fp,0(sp)
10011d7c:	dec00204 	addi	sp,sp,8
10011d80:	f800283a 	ret

10011d84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10011d84:	defffc04 	addi	sp,sp,-16
10011d88:	df000315 	stw	fp,12(sp)
10011d8c:	df000304 	addi	fp,sp,12
10011d90:	e13ffd15 	stw	r4,-12(fp)
10011d94:	e17ffe15 	stw	r5,-8(fp)
10011d98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10011d9c:	e0fffe17 	ldw	r3,-8(fp)
10011da0:	e0bffd17 	ldw	r2,-12(fp)
10011da4:	18800c26 	beq	r3,r2,10011dd8 <alt_load_section+0x54>
  {
    while( to != end )
10011da8:	00000806 	br	10011dcc <alt_load_section+0x48>
    {
      *to++ = *from++;
10011dac:	e0bffe17 	ldw	r2,-8(fp)
10011db0:	10c00104 	addi	r3,r2,4
10011db4:	e0fffe15 	stw	r3,-8(fp)
10011db8:	e0fffd17 	ldw	r3,-12(fp)
10011dbc:	19000104 	addi	r4,r3,4
10011dc0:	e13ffd15 	stw	r4,-12(fp)
10011dc4:	18c00017 	ldw	r3,0(r3)
10011dc8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10011dcc:	e0fffe17 	ldw	r3,-8(fp)
10011dd0:	e0bfff17 	ldw	r2,-4(fp)
10011dd4:	18bff51e 	bne	r3,r2,10011dac <__alt_data_end+0xf8011dac>
    {
      *to++ = *from++;
    }
  }
}
10011dd8:	0001883a 	nop
10011ddc:	e037883a 	mov	sp,fp
10011de0:	df000017 	ldw	fp,0(sp)
10011de4:	dec00104 	addi	sp,sp,4
10011de8:	f800283a 	ret

10011dec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10011dec:	defffe04 	addi	sp,sp,-8
10011df0:	dfc00115 	stw	ra,4(sp)
10011df4:	df000015 	stw	fp,0(sp)
10011df8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10011dfc:	01840074 	movhi	r6,4097
10011e00:	319e2904 	addi	r6,r6,30884
10011e04:	01440074 	movhi	r5,4097
10011e08:	2953bb04 	addi	r5,r5,20204
10011e0c:	01040074 	movhi	r4,4097
10011e10:	211e2904 	addi	r4,r4,30884
10011e14:	0011d840 	call	10011d84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10011e18:	01840034 	movhi	r6,4096
10011e1c:	31808c04 	addi	r6,r6,560
10011e20:	01440034 	movhi	r5,4096
10011e24:	29400804 	addi	r5,r5,32
10011e28:	01040034 	movhi	r4,4096
10011e2c:	21000804 	addi	r4,r4,32
10011e30:	0011d840 	call	10011d84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10011e34:	01840074 	movhi	r6,4097
10011e38:	3193bb04 	addi	r6,r6,20204
10011e3c:	01440074 	movhi	r5,4097
10011e40:	2950a204 	addi	r5,r5,17032
10011e44:	01040074 	movhi	r4,4097
10011e48:	2110a204 	addi	r4,r4,17032
10011e4c:	0011d840 	call	10011d84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10011e50:	00131d00 	call	100131d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
10011e54:	00133900 	call	10013390 <alt_icache_flush_all>
}
10011e58:	0001883a 	nop
10011e5c:	e037883a 	mov	sp,fp
10011e60:	dfc00117 	ldw	ra,4(sp)
10011e64:	df000017 	ldw	fp,0(sp)
10011e68:	dec00204 	addi	sp,sp,8
10011e6c:	f800283a 	ret

10011e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011e70:	defffe04 	addi	sp,sp,-8
10011e74:	dfc00115 	stw	ra,4(sp)
10011e78:	df000015 	stw	fp,0(sp)
10011e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011e80:	d0a00e17 	ldw	r2,-32712(gp)
10011e84:	10000326 	beq	r2,zero,10011e94 <alt_get_errno+0x24>
10011e88:	d0a00e17 	ldw	r2,-32712(gp)
10011e8c:	103ee83a 	callr	r2
10011e90:	00000106 	br	10011e98 <alt_get_errno+0x28>
10011e94:	d0aa9004 	addi	r2,gp,-21952
}
10011e98:	e037883a 	mov	sp,fp
10011e9c:	dfc00117 	ldw	ra,4(sp)
10011ea0:	df000017 	ldw	fp,0(sp)
10011ea4:	dec00204 	addi	sp,sp,8
10011ea8:	f800283a 	ret

10011eac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10011eac:	defff904 	addi	sp,sp,-28
10011eb0:	dfc00615 	stw	ra,24(sp)
10011eb4:	df000515 	stw	fp,20(sp)
10011eb8:	df000504 	addi	fp,sp,20
10011ebc:	e13ffd15 	stw	r4,-12(fp)
10011ec0:	e17ffe15 	stw	r5,-8(fp)
10011ec4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10011ec8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10011ecc:	e0bffd17 	ldw	r2,-12(fp)
10011ed0:	10000816 	blt	r2,zero,10011ef4 <lseek+0x48>
10011ed4:	01400304 	movi	r5,12
10011ed8:	e13ffd17 	ldw	r4,-12(fp)
10011edc:	0004b280 	call	10004b28 <__mulsi3>
10011ee0:	1007883a 	mov	r3,r2
10011ee4:	00840074 	movhi	r2,4097
10011ee8:	10999e04 	addi	r2,r2,26232
10011eec:	1885883a 	add	r2,r3,r2
10011ef0:	00000106 	br	10011ef8 <lseek+0x4c>
10011ef4:	0005883a 	mov	r2,zero
10011ef8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10011efc:	e0bffc17 	ldw	r2,-16(fp)
10011f00:	10001026 	beq	r2,zero,10011f44 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10011f04:	e0bffc17 	ldw	r2,-16(fp)
10011f08:	10800017 	ldw	r2,0(r2)
10011f0c:	10800717 	ldw	r2,28(r2)
10011f10:	10000926 	beq	r2,zero,10011f38 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10011f14:	e0bffc17 	ldw	r2,-16(fp)
10011f18:	10800017 	ldw	r2,0(r2)
10011f1c:	10800717 	ldw	r2,28(r2)
10011f20:	e1bfff17 	ldw	r6,-4(fp)
10011f24:	e17ffe17 	ldw	r5,-8(fp)
10011f28:	e13ffc17 	ldw	r4,-16(fp)
10011f2c:	103ee83a 	callr	r2
10011f30:	e0bffb15 	stw	r2,-20(fp)
10011f34:	00000506 	br	10011f4c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10011f38:	00bfde84 	movi	r2,-134
10011f3c:	e0bffb15 	stw	r2,-20(fp)
10011f40:	00000206 	br	10011f4c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10011f44:	00bfebc4 	movi	r2,-81
10011f48:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10011f4c:	e0bffb17 	ldw	r2,-20(fp)
10011f50:	1000070e 	bge	r2,zero,10011f70 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10011f54:	0011e700 	call	10011e70 <alt_get_errno>
10011f58:	1007883a 	mov	r3,r2
10011f5c:	e0bffb17 	ldw	r2,-20(fp)
10011f60:	0085c83a 	sub	r2,zero,r2
10011f64:	18800015 	stw	r2,0(r3)
    rc = -1;
10011f68:	00bfffc4 	movi	r2,-1
10011f6c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10011f70:	e0bffb17 	ldw	r2,-20(fp)
}
10011f74:	e037883a 	mov	sp,fp
10011f78:	dfc00117 	ldw	ra,4(sp)
10011f7c:	df000017 	ldw	fp,0(sp)
10011f80:	dec00204 	addi	sp,sp,8
10011f84:	f800283a 	ret

10011f88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10011f88:	defffd04 	addi	sp,sp,-12
10011f8c:	dfc00215 	stw	ra,8(sp)
10011f90:	df000115 	stw	fp,4(sp)
10011f94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10011f98:	0009883a 	mov	r4,zero
10011f9c:	00124600 	call	10012460 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10011fa0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10011fa4:	00124980 	call	10012498 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10011fa8:	01840074 	movhi	r6,4097
10011fac:	3193b104 	addi	r6,r6,20164
10011fb0:	01440074 	movhi	r5,4097
10011fb4:	2953b104 	addi	r5,r5,20164
10011fb8:	01040074 	movhi	r4,4097
10011fbc:	2113b104 	addi	r4,r4,20164
10011fc0:	00137340 	call	10013734 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10011fc4:	00132d00 	call	100132d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10011fc8:	01040074 	movhi	r4,4097
10011fcc:	210ccc04 	addi	r4,r4,13104
10011fd0:	0013ef40 	call	10013ef4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10011fd4:	d0aa9117 	ldw	r2,-21948(gp)
10011fd8:	d0ea9217 	ldw	r3,-21944(gp)
10011fdc:	d12a9317 	ldw	r4,-21940(gp)
10011fe0:	200d883a 	mov	r6,r4
10011fe4:	180b883a 	mov	r5,r3
10011fe8:	1009883a 	mov	r4,r2
10011fec:	00048ac0 	call	100048ac <main>
10011ff0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10011ff4:	01000044 	movi	r4,1
10011ff8:	0011aa40 	call	10011aa4 <close>
  exit (result);
10011ffc:	e13fff17 	ldw	r4,-4(fp)
10012000:	0013f080 	call	10013f08 <exit>

10012004 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10012004:	defffe04 	addi	sp,sp,-8
10012008:	df000115 	stw	fp,4(sp)
1001200c:	df000104 	addi	fp,sp,4
10012010:	e13fff15 	stw	r4,-4(fp)
}
10012014:	0001883a 	nop
10012018:	e037883a 	mov	sp,fp
1001201c:	df000017 	ldw	fp,0(sp)
10012020:	dec00104 	addi	sp,sp,4
10012024:	f800283a 	ret

10012028 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10012028:	defffe04 	addi	sp,sp,-8
1001202c:	df000115 	stw	fp,4(sp)
10012030:	df000104 	addi	fp,sp,4
10012034:	e13fff15 	stw	r4,-4(fp)
}
10012038:	0001883a 	nop
1001203c:	e037883a 	mov	sp,fp
10012040:	df000017 	ldw	fp,0(sp)
10012044:	dec00104 	addi	sp,sp,4
10012048:	f800283a 	ret

1001204c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001204c:	defffe04 	addi	sp,sp,-8
10012050:	dfc00115 	stw	ra,4(sp)
10012054:	df000015 	stw	fp,0(sp)
10012058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001205c:	d0a00e17 	ldw	r2,-32712(gp)
10012060:	10000326 	beq	r2,zero,10012070 <alt_get_errno+0x24>
10012064:	d0a00e17 	ldw	r2,-32712(gp)
10012068:	103ee83a 	callr	r2
1001206c:	00000106 	br	10012074 <alt_get_errno+0x28>
10012070:	d0aa9004 	addi	r2,gp,-21952
}
10012074:	e037883a 	mov	sp,fp
10012078:	dfc00117 	ldw	ra,4(sp)
1001207c:	df000017 	ldw	fp,0(sp)
10012080:	dec00204 	addi	sp,sp,8
10012084:	f800283a 	ret

10012088 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10012088:	defff904 	addi	sp,sp,-28
1001208c:	dfc00615 	stw	ra,24(sp)
10012090:	df000515 	stw	fp,20(sp)
10012094:	df000504 	addi	fp,sp,20
10012098:	e13ffd15 	stw	r4,-12(fp)
1001209c:	e17ffe15 	stw	r5,-8(fp)
100120a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100120a4:	e0bffd17 	ldw	r2,-12(fp)
100120a8:	10000816 	blt	r2,zero,100120cc <read+0x44>
100120ac:	01400304 	movi	r5,12
100120b0:	e13ffd17 	ldw	r4,-12(fp)
100120b4:	0004b280 	call	10004b28 <__mulsi3>
100120b8:	1007883a 	mov	r3,r2
100120bc:	00840074 	movhi	r2,4097
100120c0:	10999e04 	addi	r2,r2,26232
100120c4:	1885883a 	add	r2,r3,r2
100120c8:	00000106 	br	100120d0 <read+0x48>
100120cc:	0005883a 	mov	r2,zero
100120d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100120d4:	e0bffb17 	ldw	r2,-20(fp)
100120d8:	10002226 	beq	r2,zero,10012164 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100120dc:	e0bffb17 	ldw	r2,-20(fp)
100120e0:	10800217 	ldw	r2,8(r2)
100120e4:	108000cc 	andi	r2,r2,3
100120e8:	10800060 	cmpeqi	r2,r2,1
100120ec:	1000181e 	bne	r2,zero,10012150 <read+0xc8>
        (fd->dev->read))
100120f0:	e0bffb17 	ldw	r2,-20(fp)
100120f4:	10800017 	ldw	r2,0(r2)
100120f8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100120fc:	10001426 	beq	r2,zero,10012150 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10012100:	e0bffb17 	ldw	r2,-20(fp)
10012104:	10800017 	ldw	r2,0(r2)
10012108:	10800517 	ldw	r2,20(r2)
1001210c:	e0ffff17 	ldw	r3,-4(fp)
10012110:	180d883a 	mov	r6,r3
10012114:	e17ffe17 	ldw	r5,-8(fp)
10012118:	e13ffb17 	ldw	r4,-20(fp)
1001211c:	103ee83a 	callr	r2
10012120:	e0bffc15 	stw	r2,-16(fp)
10012124:	e0bffc17 	ldw	r2,-16(fp)
10012128:	1000070e 	bge	r2,zero,10012148 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1001212c:	001204c0 	call	1001204c <alt_get_errno>
10012130:	1007883a 	mov	r3,r2
10012134:	e0bffc17 	ldw	r2,-16(fp)
10012138:	0085c83a 	sub	r2,zero,r2
1001213c:	18800015 	stw	r2,0(r3)
          return -1;
10012140:	00bfffc4 	movi	r2,-1
10012144:	00000c06 	br	10012178 <read+0xf0>
        }
        return rval;
10012148:	e0bffc17 	ldw	r2,-16(fp)
1001214c:	00000a06 	br	10012178 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10012150:	001204c0 	call	1001204c <alt_get_errno>
10012154:	1007883a 	mov	r3,r2
10012158:	00800344 	movi	r2,13
1001215c:	18800015 	stw	r2,0(r3)
10012160:	00000406 	br	10012174 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10012164:	001204c0 	call	1001204c <alt_get_errno>
10012168:	1007883a 	mov	r3,r2
1001216c:	00801444 	movi	r2,81
10012170:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012174:	00bfffc4 	movi	r2,-1
}
10012178:	e037883a 	mov	sp,fp
1001217c:	dfc00117 	ldw	ra,4(sp)
10012180:	df000017 	ldw	fp,0(sp)
10012184:	dec00204 	addi	sp,sp,8
10012188:	f800283a 	ret

1001218c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001218c:	defffc04 	addi	sp,sp,-16
10012190:	dfc00315 	stw	ra,12(sp)
10012194:	df000215 	stw	fp,8(sp)
10012198:	dc000115 	stw	r16,4(sp)
1001219c:	df000204 	addi	fp,sp,8
100121a0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
100121a4:	e0bffe17 	ldw	r2,-8(fp)
100121a8:	108000d0 	cmplti	r2,r2,3
100121ac:	1000111e 	bne	r2,zero,100121f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100121b0:	04040074 	movhi	r16,4097
100121b4:	84199e04 	addi	r16,r16,26232
100121b8:	e0bffe17 	ldw	r2,-8(fp)
100121bc:	01400304 	movi	r5,12
100121c0:	1009883a 	mov	r4,r2
100121c4:	0004b280 	call	10004b28 <__mulsi3>
100121c8:	8085883a 	add	r2,r16,r2
100121cc:	10800204 	addi	r2,r2,8
100121d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100121d4:	04040074 	movhi	r16,4097
100121d8:	84199e04 	addi	r16,r16,26232
100121dc:	e0bffe17 	ldw	r2,-8(fp)
100121e0:	01400304 	movi	r5,12
100121e4:	1009883a 	mov	r4,r2
100121e8:	0004b280 	call	10004b28 <__mulsi3>
100121ec:	8085883a 	add	r2,r16,r2
100121f0:	10000015 	stw	zero,0(r2)
  }
}
100121f4:	0001883a 	nop
100121f8:	e6ffff04 	addi	sp,fp,-4
100121fc:	dfc00217 	ldw	ra,8(sp)
10012200:	df000117 	ldw	fp,4(sp)
10012204:	dc000017 	ldw	r16,0(sp)
10012208:	dec00304 	addi	sp,sp,12
1001220c:	f800283a 	ret

10012210 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10012210:	defff904 	addi	sp,sp,-28
10012214:	df000615 	stw	fp,24(sp)
10012218:	df000604 	addi	fp,sp,24
1001221c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012220:	0005303a 	rdctl	r2,status
10012224:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012228:	e0fffe17 	ldw	r3,-8(fp)
1001222c:	00bfff84 	movi	r2,-2
10012230:	1884703a 	and	r2,r3,r2
10012234:	1001703a 	wrctl	status,r2
  
  return context;
10012238:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1001223c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10012240:	d0a00f17 	ldw	r2,-32708(gp)
10012244:	10c000c4 	addi	r3,r2,3
10012248:	00bfff04 	movi	r2,-4
1001224c:	1884703a 	and	r2,r3,r2
10012250:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10012254:	d0e00f17 	ldw	r3,-32708(gp)
10012258:	e0bfff17 	ldw	r2,-4(fp)
1001225c:	1887883a 	add	r3,r3,r2
10012260:	00860034 	movhi	r2,6144
10012264:	10800004 	addi	r2,r2,0
10012268:	10c0062e 	bgeu	r2,r3,10012284 <sbrk+0x74>
1001226c:	e0bffb17 	ldw	r2,-20(fp)
10012270:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012274:	e0bffa17 	ldw	r2,-24(fp)
10012278:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1001227c:	00bfffc4 	movi	r2,-1
10012280:	00000b06 	br	100122b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10012284:	d0a00f17 	ldw	r2,-32708(gp)
10012288:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001228c:	d0e00f17 	ldw	r3,-32708(gp)
10012290:	e0bfff17 	ldw	r2,-4(fp)
10012294:	1885883a 	add	r2,r3,r2
10012298:	d0a00f15 	stw	r2,-32708(gp)
1001229c:	e0bffb17 	ldw	r2,-20(fp)
100122a0:	e0bffc15 	stw	r2,-16(fp)
100122a4:	e0bffc17 	ldw	r2,-16(fp)
100122a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100122ac:	e0bffd17 	ldw	r2,-12(fp)
} 
100122b0:	e037883a 	mov	sp,fp
100122b4:	df000017 	ldw	fp,0(sp)
100122b8:	dec00104 	addi	sp,sp,4
100122bc:	f800283a 	ret

100122c0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100122c0:	defffd04 	addi	sp,sp,-12
100122c4:	dfc00215 	stw	ra,8(sp)
100122c8:	df000115 	stw	fp,4(sp)
100122cc:	df000104 	addi	fp,sp,4
100122d0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100122d4:	e13fff17 	ldw	r4,-4(fp)
100122d8:	00130780 	call	10013078 <alt_busy_sleep>
}
100122dc:	e037883a 	mov	sp,fp
100122e0:	dfc00117 	ldw	ra,4(sp)
100122e4:	df000017 	ldw	fp,0(sp)
100122e8:	dec00204 	addi	sp,sp,8
100122ec:	f800283a 	ret

100122f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100122f0:	defffe04 	addi	sp,sp,-8
100122f4:	dfc00115 	stw	ra,4(sp)
100122f8:	df000015 	stw	fp,0(sp)
100122fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012300:	d0a00e17 	ldw	r2,-32712(gp)
10012304:	10000326 	beq	r2,zero,10012314 <alt_get_errno+0x24>
10012308:	d0a00e17 	ldw	r2,-32712(gp)
1001230c:	103ee83a 	callr	r2
10012310:	00000106 	br	10012318 <alt_get_errno+0x28>
10012314:	d0aa9004 	addi	r2,gp,-21952
}
10012318:	e037883a 	mov	sp,fp
1001231c:	dfc00117 	ldw	ra,4(sp)
10012320:	df000017 	ldw	fp,0(sp)
10012324:	dec00204 	addi	sp,sp,8
10012328:	f800283a 	ret

1001232c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1001232c:	defff904 	addi	sp,sp,-28
10012330:	dfc00615 	stw	ra,24(sp)
10012334:	df000515 	stw	fp,20(sp)
10012338:	df000504 	addi	fp,sp,20
1001233c:	e13ffd15 	stw	r4,-12(fp)
10012340:	e17ffe15 	stw	r5,-8(fp)
10012344:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10012348:	e0bffd17 	ldw	r2,-12(fp)
1001234c:	10000816 	blt	r2,zero,10012370 <write+0x44>
10012350:	01400304 	movi	r5,12
10012354:	e13ffd17 	ldw	r4,-12(fp)
10012358:	0004b280 	call	10004b28 <__mulsi3>
1001235c:	1007883a 	mov	r3,r2
10012360:	00840074 	movhi	r2,4097
10012364:	10999e04 	addi	r2,r2,26232
10012368:	1885883a 	add	r2,r3,r2
1001236c:	00000106 	br	10012374 <write+0x48>
10012370:	0005883a 	mov	r2,zero
10012374:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10012378:	e0bffb17 	ldw	r2,-20(fp)
1001237c:	10002126 	beq	r2,zero,10012404 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10012380:	e0bffb17 	ldw	r2,-20(fp)
10012384:	10800217 	ldw	r2,8(r2)
10012388:	108000cc 	andi	r2,r2,3
1001238c:	10001826 	beq	r2,zero,100123f0 <write+0xc4>
10012390:	e0bffb17 	ldw	r2,-20(fp)
10012394:	10800017 	ldw	r2,0(r2)
10012398:	10800617 	ldw	r2,24(r2)
1001239c:	10001426 	beq	r2,zero,100123f0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100123a0:	e0bffb17 	ldw	r2,-20(fp)
100123a4:	10800017 	ldw	r2,0(r2)
100123a8:	10800617 	ldw	r2,24(r2)
100123ac:	e0ffff17 	ldw	r3,-4(fp)
100123b0:	180d883a 	mov	r6,r3
100123b4:	e17ffe17 	ldw	r5,-8(fp)
100123b8:	e13ffb17 	ldw	r4,-20(fp)
100123bc:	103ee83a 	callr	r2
100123c0:	e0bffc15 	stw	r2,-16(fp)
100123c4:	e0bffc17 	ldw	r2,-16(fp)
100123c8:	1000070e 	bge	r2,zero,100123e8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100123cc:	00122f00 	call	100122f0 <alt_get_errno>
100123d0:	1007883a 	mov	r3,r2
100123d4:	e0bffc17 	ldw	r2,-16(fp)
100123d8:	0085c83a 	sub	r2,zero,r2
100123dc:	18800015 	stw	r2,0(r3)
        return -1;
100123e0:	00bfffc4 	movi	r2,-1
100123e4:	00000c06 	br	10012418 <write+0xec>
      }
      return rval;
100123e8:	e0bffc17 	ldw	r2,-16(fp)
100123ec:	00000a06 	br	10012418 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100123f0:	00122f00 	call	100122f0 <alt_get_errno>
100123f4:	1007883a 	mov	r3,r2
100123f8:	00800344 	movi	r2,13
100123fc:	18800015 	stw	r2,0(r3)
10012400:	00000406 	br	10012414 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10012404:	00122f00 	call	100122f0 <alt_get_errno>
10012408:	1007883a 	mov	r3,r2
1001240c:	00801444 	movi	r2,81
10012410:	18800015 	stw	r2,0(r3)
  }
  return -1;
10012414:	00bfffc4 	movi	r2,-1
}
10012418:	e037883a 	mov	sp,fp
1001241c:	dfc00117 	ldw	ra,4(sp)
10012420:	df000017 	ldw	fp,0(sp)
10012424:	dec00204 	addi	sp,sp,8
10012428:	f800283a 	ret

1001242c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1001242c:	defffd04 	addi	sp,sp,-12
10012430:	dfc00215 	stw	ra,8(sp)
10012434:	df000115 	stw	fp,4(sp)
10012438:	df000104 	addi	fp,sp,4
1001243c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10012440:	d1600b04 	addi	r5,gp,-32724
10012444:	e13fff17 	ldw	r4,-4(fp)
10012448:	001322c0 	call	1001322c <alt_dev_llist_insert>
}
1001244c:	e037883a 	mov	sp,fp
10012450:	dfc00117 	ldw	ra,4(sp)
10012454:	df000017 	ldw	fp,0(sp)
10012458:	dec00204 	addi	sp,sp,8
1001245c:	f800283a 	ret

10012460 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10012460:	defffd04 	addi	sp,sp,-12
10012464:	dfc00215 	stw	ra,8(sp)
10012468:	df000115 	stw	fp,4(sp)
1001246c:	df000104 	addi	fp,sp,4
10012470:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10012474:	0013bd80 	call	10013bd8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10012478:	00800044 	movi	r2,1
1001247c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10012480:	0001883a 	nop
10012484:	e037883a 	mov	sp,fp
10012488:	dfc00117 	ldw	ra,4(sp)
1001248c:	df000017 	ldw	fp,0(sp)
10012490:	dec00204 	addi	sp,sp,8
10012494:	f800283a 	ret

10012498 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10012498:	defffe04 	addi	sp,sp,-8
1001249c:	dfc00115 	stw	ra,4(sp)
100124a0:	df000015 	stw	fp,0(sp)
100124a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100124a8:	01800144 	movi	r6,5
100124ac:	000b883a 	mov	r5,zero
100124b0:	01040074 	movhi	r4,4097
100124b4:	211a0804 	addi	r4,r4,26656
100124b8:	00126480 	call	10012648 <altera_avalon_jtag_uart_init>
100124bc:	01040074 	movhi	r4,4097
100124c0:	2119fe04 	addi	r4,r4,26616
100124c4:	001242c0 	call	1001242c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100124c8:	0001883a 	nop
}
100124cc:	0001883a 	nop
100124d0:	e037883a 	mov	sp,fp
100124d4:	dfc00117 	ldw	ra,4(sp)
100124d8:	df000017 	ldw	fp,0(sp)
100124dc:	dec00204 	addi	sp,sp,8
100124e0:	f800283a 	ret

100124e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100124e4:	defffa04 	addi	sp,sp,-24
100124e8:	dfc00515 	stw	ra,20(sp)
100124ec:	df000415 	stw	fp,16(sp)
100124f0:	df000404 	addi	fp,sp,16
100124f4:	e13ffd15 	stw	r4,-12(fp)
100124f8:	e17ffe15 	stw	r5,-8(fp)
100124fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012500:	e0bffd17 	ldw	r2,-12(fp)
10012504:	10800017 	ldw	r2,0(r2)
10012508:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001250c:	e0bffc17 	ldw	r2,-16(fp)
10012510:	10c00a04 	addi	r3,r2,40
10012514:	e0bffd17 	ldw	r2,-12(fp)
10012518:	10800217 	ldw	r2,8(r2)
1001251c:	100f883a 	mov	r7,r2
10012520:	e1bfff17 	ldw	r6,-4(fp)
10012524:	e17ffe17 	ldw	r5,-8(fp)
10012528:	1809883a 	mov	r4,r3
1001252c:	0012b0c0 	call	10012b0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10012530:	e037883a 	mov	sp,fp
10012534:	dfc00117 	ldw	ra,4(sp)
10012538:	df000017 	ldw	fp,0(sp)
1001253c:	dec00204 	addi	sp,sp,8
10012540:	f800283a 	ret

10012544 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10012544:	defffa04 	addi	sp,sp,-24
10012548:	dfc00515 	stw	ra,20(sp)
1001254c:	df000415 	stw	fp,16(sp)
10012550:	df000404 	addi	fp,sp,16
10012554:	e13ffd15 	stw	r4,-12(fp)
10012558:	e17ffe15 	stw	r5,-8(fp)
1001255c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10012560:	e0bffd17 	ldw	r2,-12(fp)
10012564:	10800017 	ldw	r2,0(r2)
10012568:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001256c:	e0bffc17 	ldw	r2,-16(fp)
10012570:	10c00a04 	addi	r3,r2,40
10012574:	e0bffd17 	ldw	r2,-12(fp)
10012578:	10800217 	ldw	r2,8(r2)
1001257c:	100f883a 	mov	r7,r2
10012580:	e1bfff17 	ldw	r6,-4(fp)
10012584:	e17ffe17 	ldw	r5,-8(fp)
10012588:	1809883a 	mov	r4,r3
1001258c:	0012d280 	call	10012d28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10012590:	e037883a 	mov	sp,fp
10012594:	dfc00117 	ldw	ra,4(sp)
10012598:	df000017 	ldw	fp,0(sp)
1001259c:	dec00204 	addi	sp,sp,8
100125a0:	f800283a 	ret

100125a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100125a4:	defffc04 	addi	sp,sp,-16
100125a8:	dfc00315 	stw	ra,12(sp)
100125ac:	df000215 	stw	fp,8(sp)
100125b0:	df000204 	addi	fp,sp,8
100125b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100125b8:	e0bfff17 	ldw	r2,-4(fp)
100125bc:	10800017 	ldw	r2,0(r2)
100125c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100125c4:	e0bffe17 	ldw	r2,-8(fp)
100125c8:	10c00a04 	addi	r3,r2,40
100125cc:	e0bfff17 	ldw	r2,-4(fp)
100125d0:	10800217 	ldw	r2,8(r2)
100125d4:	100b883a 	mov	r5,r2
100125d8:	1809883a 	mov	r4,r3
100125dc:	00129b40 	call	100129b4 <altera_avalon_jtag_uart_close>
}
100125e0:	e037883a 	mov	sp,fp
100125e4:	dfc00117 	ldw	ra,4(sp)
100125e8:	df000017 	ldw	fp,0(sp)
100125ec:	dec00204 	addi	sp,sp,8
100125f0:	f800283a 	ret

100125f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100125f4:	defffa04 	addi	sp,sp,-24
100125f8:	dfc00515 	stw	ra,20(sp)
100125fc:	df000415 	stw	fp,16(sp)
10012600:	df000404 	addi	fp,sp,16
10012604:	e13ffd15 	stw	r4,-12(fp)
10012608:	e17ffe15 	stw	r5,-8(fp)
1001260c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10012610:	e0bffd17 	ldw	r2,-12(fp)
10012614:	10800017 	ldw	r2,0(r2)
10012618:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001261c:	e0bffc17 	ldw	r2,-16(fp)
10012620:	10800a04 	addi	r2,r2,40
10012624:	e1bfff17 	ldw	r6,-4(fp)
10012628:	e17ffe17 	ldw	r5,-8(fp)
1001262c:	1009883a 	mov	r4,r2
10012630:	0012a1c0 	call	10012a1c <altera_avalon_jtag_uart_ioctl>
}
10012634:	e037883a 	mov	sp,fp
10012638:	dfc00117 	ldw	ra,4(sp)
1001263c:	df000017 	ldw	fp,0(sp)
10012640:	dec00204 	addi	sp,sp,8
10012644:	f800283a 	ret

10012648 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10012648:	defffa04 	addi	sp,sp,-24
1001264c:	dfc00515 	stw	ra,20(sp)
10012650:	df000415 	stw	fp,16(sp)
10012654:	df000404 	addi	fp,sp,16
10012658:	e13ffd15 	stw	r4,-12(fp)
1001265c:	e17ffe15 	stw	r5,-8(fp)
10012660:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012664:	e0bffd17 	ldw	r2,-12(fp)
10012668:	00c00044 	movi	r3,1
1001266c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10012670:	e0bffd17 	ldw	r2,-12(fp)
10012674:	10800017 	ldw	r2,0(r2)
10012678:	10800104 	addi	r2,r2,4
1001267c:	1007883a 	mov	r3,r2
10012680:	e0bffd17 	ldw	r2,-12(fp)
10012684:	10800817 	ldw	r2,32(r2)
10012688:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001268c:	e0bffe17 	ldw	r2,-8(fp)
10012690:	e0ffff17 	ldw	r3,-4(fp)
10012694:	d8000015 	stw	zero,0(sp)
10012698:	e1fffd17 	ldw	r7,-12(fp)
1001269c:	01840074 	movhi	r6,4097
100126a0:	3189c204 	addi	r6,r6,9992
100126a4:	180b883a 	mov	r5,r3
100126a8:	1009883a 	mov	r4,r2
100126ac:	00133b00 	call	100133b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100126b0:	e0bffd17 	ldw	r2,-12(fp)
100126b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100126b8:	e0bffd17 	ldw	r2,-12(fp)
100126bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100126c0:	d0ea9517 	ldw	r3,-21932(gp)
100126c4:	e1fffd17 	ldw	r7,-12(fp)
100126c8:	01840074 	movhi	r6,4097
100126cc:	318a4504 	addi	r6,r6,10516
100126d0:	180b883a 	mov	r5,r3
100126d4:	1009883a 	mov	r4,r2
100126d8:	0012f4c0 	call	10012f4c <alt_alarm_start>
100126dc:	1000040e 	bge	r2,zero,100126f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100126e0:	e0fffd17 	ldw	r3,-12(fp)
100126e4:	00a00034 	movhi	r2,32768
100126e8:	10bfffc4 	addi	r2,r2,-1
100126ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100126f0:	0001883a 	nop
100126f4:	e037883a 	mov	sp,fp
100126f8:	dfc00117 	ldw	ra,4(sp)
100126fc:	df000017 	ldw	fp,0(sp)
10012700:	dec00204 	addi	sp,sp,8
10012704:	f800283a 	ret

10012708 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10012708:	defff804 	addi	sp,sp,-32
1001270c:	df000715 	stw	fp,28(sp)
10012710:	df000704 	addi	fp,sp,28
10012714:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10012718:	e0bfff17 	ldw	r2,-4(fp)
1001271c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10012720:	e0bffb17 	ldw	r2,-20(fp)
10012724:	10800017 	ldw	r2,0(r2)
10012728:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001272c:	e0bffc17 	ldw	r2,-16(fp)
10012730:	10800104 	addi	r2,r2,4
10012734:	10800037 	ldwio	r2,0(r2)
10012738:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001273c:	e0bffd17 	ldw	r2,-12(fp)
10012740:	1080c00c 	andi	r2,r2,768
10012744:	10006d26 	beq	r2,zero,100128fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10012748:	e0bffd17 	ldw	r2,-12(fp)
1001274c:	1080400c 	andi	r2,r2,256
10012750:	10003526 	beq	r2,zero,10012828 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10012754:	00800074 	movhi	r2,1
10012758:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001275c:	e0bffb17 	ldw	r2,-20(fp)
10012760:	10800a17 	ldw	r2,40(r2)
10012764:	10800044 	addi	r2,r2,1
10012768:	1081ffcc 	andi	r2,r2,2047
1001276c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10012770:	e0bffb17 	ldw	r2,-20(fp)
10012774:	10c00b17 	ldw	r3,44(r2)
10012778:	e0bffe17 	ldw	r2,-8(fp)
1001277c:	18801526 	beq	r3,r2,100127d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10012780:	e0bffc17 	ldw	r2,-16(fp)
10012784:	10800037 	ldwio	r2,0(r2)
10012788:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001278c:	e0bff917 	ldw	r2,-28(fp)
10012790:	10a0000c 	andi	r2,r2,32768
10012794:	10001126 	beq	r2,zero,100127dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10012798:	e0bffb17 	ldw	r2,-20(fp)
1001279c:	10800a17 	ldw	r2,40(r2)
100127a0:	e0fff917 	ldw	r3,-28(fp)
100127a4:	1809883a 	mov	r4,r3
100127a8:	e0fffb17 	ldw	r3,-20(fp)
100127ac:	1885883a 	add	r2,r3,r2
100127b0:	10800e04 	addi	r2,r2,56
100127b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100127b8:	e0bffb17 	ldw	r2,-20(fp)
100127bc:	10800a17 	ldw	r2,40(r2)
100127c0:	10800044 	addi	r2,r2,1
100127c4:	10c1ffcc 	andi	r3,r2,2047
100127c8:	e0bffb17 	ldw	r2,-20(fp)
100127cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100127d0:	003fe206 	br	1001275c <__alt_data_end+0xf801275c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100127d4:	0001883a 	nop
100127d8:	00000106 	br	100127e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100127dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100127e0:	e0bff917 	ldw	r2,-28(fp)
100127e4:	10bfffec 	andhi	r2,r2,65535
100127e8:	10000f26 	beq	r2,zero,10012828 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100127ec:	e0bffb17 	ldw	r2,-20(fp)
100127f0:	10c00817 	ldw	r3,32(r2)
100127f4:	00bfff84 	movi	r2,-2
100127f8:	1886703a 	and	r3,r3,r2
100127fc:	e0bffb17 	ldw	r2,-20(fp)
10012800:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10012804:	e0bffc17 	ldw	r2,-16(fp)
10012808:	10800104 	addi	r2,r2,4
1001280c:	1007883a 	mov	r3,r2
10012810:	e0bffb17 	ldw	r2,-20(fp)
10012814:	10800817 	ldw	r2,32(r2)
10012818:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001281c:	e0bffc17 	ldw	r2,-16(fp)
10012820:	10800104 	addi	r2,r2,4
10012824:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10012828:	e0bffd17 	ldw	r2,-12(fp)
1001282c:	1080800c 	andi	r2,r2,512
10012830:	103fbe26 	beq	r2,zero,1001272c <__alt_data_end+0xf801272c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10012834:	e0bffd17 	ldw	r2,-12(fp)
10012838:	1004d43a 	srli	r2,r2,16
1001283c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10012840:	00001406 	br	10012894 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10012844:	e0bffc17 	ldw	r2,-16(fp)
10012848:	e0fffb17 	ldw	r3,-20(fp)
1001284c:	18c00d17 	ldw	r3,52(r3)
10012850:	e13ffb17 	ldw	r4,-20(fp)
10012854:	20c7883a 	add	r3,r4,r3
10012858:	18c20e04 	addi	r3,r3,2104
1001285c:	18c00003 	ldbu	r3,0(r3)
10012860:	18c03fcc 	andi	r3,r3,255
10012864:	18c0201c 	xori	r3,r3,128
10012868:	18ffe004 	addi	r3,r3,-128
1001286c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012870:	e0bffb17 	ldw	r2,-20(fp)
10012874:	10800d17 	ldw	r2,52(r2)
10012878:	10800044 	addi	r2,r2,1
1001287c:	10c1ffcc 	andi	r3,r2,2047
10012880:	e0bffb17 	ldw	r2,-20(fp)
10012884:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10012888:	e0bffa17 	ldw	r2,-24(fp)
1001288c:	10bfffc4 	addi	r2,r2,-1
10012890:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10012894:	e0bffa17 	ldw	r2,-24(fp)
10012898:	10000526 	beq	r2,zero,100128b0 <altera_avalon_jtag_uart_irq+0x1a8>
1001289c:	e0bffb17 	ldw	r2,-20(fp)
100128a0:	10c00d17 	ldw	r3,52(r2)
100128a4:	e0bffb17 	ldw	r2,-20(fp)
100128a8:	10800c17 	ldw	r2,48(r2)
100128ac:	18bfe51e 	bne	r3,r2,10012844 <__alt_data_end+0xf8012844>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100128b0:	e0bffa17 	ldw	r2,-24(fp)
100128b4:	103f9d26 	beq	r2,zero,1001272c <__alt_data_end+0xf801272c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100128b8:	e0bffb17 	ldw	r2,-20(fp)
100128bc:	10c00817 	ldw	r3,32(r2)
100128c0:	00bfff44 	movi	r2,-3
100128c4:	1886703a 	and	r3,r3,r2
100128c8:	e0bffb17 	ldw	r2,-20(fp)
100128cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100128d0:	e0bffb17 	ldw	r2,-20(fp)
100128d4:	10800017 	ldw	r2,0(r2)
100128d8:	10800104 	addi	r2,r2,4
100128dc:	1007883a 	mov	r3,r2
100128e0:	e0bffb17 	ldw	r2,-20(fp)
100128e4:	10800817 	ldw	r2,32(r2)
100128e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100128ec:	e0bffc17 	ldw	r2,-16(fp)
100128f0:	10800104 	addi	r2,r2,4
100128f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100128f8:	003f8c06 	br	1001272c <__alt_data_end+0xf801272c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100128fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10012900:	0001883a 	nop
10012904:	e037883a 	mov	sp,fp
10012908:	df000017 	ldw	fp,0(sp)
1001290c:	dec00104 	addi	sp,sp,4
10012910:	f800283a 	ret

10012914 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10012914:	defff804 	addi	sp,sp,-32
10012918:	df000715 	stw	fp,28(sp)
1001291c:	df000704 	addi	fp,sp,28
10012920:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10012924:	e0bffb17 	ldw	r2,-20(fp)
10012928:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001292c:	e0bff917 	ldw	r2,-28(fp)
10012930:	10800017 	ldw	r2,0(r2)
10012934:	10800104 	addi	r2,r2,4
10012938:	10800037 	ldwio	r2,0(r2)
1001293c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10012940:	e0bffa17 	ldw	r2,-24(fp)
10012944:	1081000c 	andi	r2,r2,1024
10012948:	10000b26 	beq	r2,zero,10012978 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001294c:	e0bff917 	ldw	r2,-28(fp)
10012950:	10800017 	ldw	r2,0(r2)
10012954:	10800104 	addi	r2,r2,4
10012958:	1007883a 	mov	r3,r2
1001295c:	e0bff917 	ldw	r2,-28(fp)
10012960:	10800817 	ldw	r2,32(r2)
10012964:	10810014 	ori	r2,r2,1024
10012968:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1001296c:	e0bff917 	ldw	r2,-28(fp)
10012970:	10000915 	stw	zero,36(r2)
10012974:	00000a06 	br	100129a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10012978:	e0bff917 	ldw	r2,-28(fp)
1001297c:	10c00917 	ldw	r3,36(r2)
10012980:	00a00034 	movhi	r2,32768
10012984:	10bfff04 	addi	r2,r2,-4
10012988:	10c00536 	bltu	r2,r3,100129a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1001298c:	e0bff917 	ldw	r2,-28(fp)
10012990:	10800917 	ldw	r2,36(r2)
10012994:	10c00044 	addi	r3,r2,1
10012998:	e0bff917 	ldw	r2,-28(fp)
1001299c:	10c00915 	stw	r3,36(r2)
100129a0:	d0aa9517 	ldw	r2,-21932(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100129a4:	e037883a 	mov	sp,fp
100129a8:	df000017 	ldw	fp,0(sp)
100129ac:	dec00104 	addi	sp,sp,4
100129b0:	f800283a 	ret

100129b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100129b4:	defffd04 	addi	sp,sp,-12
100129b8:	df000215 	stw	fp,8(sp)
100129bc:	df000204 	addi	fp,sp,8
100129c0:	e13ffe15 	stw	r4,-8(fp)
100129c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100129c8:	00000506 	br	100129e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100129cc:	e0bfff17 	ldw	r2,-4(fp)
100129d0:	1090000c 	andi	r2,r2,16384
100129d4:	10000226 	beq	r2,zero,100129e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100129d8:	00bffd44 	movi	r2,-11
100129dc:	00000b06 	br	10012a0c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100129e0:	e0bffe17 	ldw	r2,-8(fp)
100129e4:	10c00d17 	ldw	r3,52(r2)
100129e8:	e0bffe17 	ldw	r2,-8(fp)
100129ec:	10800c17 	ldw	r2,48(r2)
100129f0:	18800526 	beq	r3,r2,10012a08 <altera_avalon_jtag_uart_close+0x54>
100129f4:	e0bffe17 	ldw	r2,-8(fp)
100129f8:	10c00917 	ldw	r3,36(r2)
100129fc:	e0bffe17 	ldw	r2,-8(fp)
10012a00:	10800117 	ldw	r2,4(r2)
10012a04:	18bff136 	bltu	r3,r2,100129cc <__alt_data_end+0xf80129cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10012a08:	0005883a 	mov	r2,zero
}
10012a0c:	e037883a 	mov	sp,fp
10012a10:	df000017 	ldw	fp,0(sp)
10012a14:	dec00104 	addi	sp,sp,4
10012a18:	f800283a 	ret

10012a1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10012a1c:	defffa04 	addi	sp,sp,-24
10012a20:	df000515 	stw	fp,20(sp)
10012a24:	df000504 	addi	fp,sp,20
10012a28:	e13ffd15 	stw	r4,-12(fp)
10012a2c:	e17ffe15 	stw	r5,-8(fp)
10012a30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10012a34:	00bff9c4 	movi	r2,-25
10012a38:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10012a3c:	e0bffe17 	ldw	r2,-8(fp)
10012a40:	10da8060 	cmpeqi	r3,r2,27137
10012a44:	1800031e 	bne	r3,zero,10012a54 <altera_avalon_jtag_uart_ioctl+0x38>
10012a48:	109a80a0 	cmpeqi	r2,r2,27138
10012a4c:	1000181e 	bne	r2,zero,10012ab0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10012a50:	00002906 	br	10012af8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10012a54:	e0bffd17 	ldw	r2,-12(fp)
10012a58:	10c00117 	ldw	r3,4(r2)
10012a5c:	00a00034 	movhi	r2,32768
10012a60:	10bfffc4 	addi	r2,r2,-1
10012a64:	18802126 	beq	r3,r2,10012aec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10012a68:	e0bfff17 	ldw	r2,-4(fp)
10012a6c:	10800017 	ldw	r2,0(r2)
10012a70:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10012a74:	e0bffc17 	ldw	r2,-16(fp)
10012a78:	10800090 	cmplti	r2,r2,2
10012a7c:	1000061e 	bne	r2,zero,10012a98 <altera_avalon_jtag_uart_ioctl+0x7c>
10012a80:	e0fffc17 	ldw	r3,-16(fp)
10012a84:	00a00034 	movhi	r2,32768
10012a88:	10bfffc4 	addi	r2,r2,-1
10012a8c:	18800226 	beq	r3,r2,10012a98 <altera_avalon_jtag_uart_ioctl+0x7c>
10012a90:	e0bffc17 	ldw	r2,-16(fp)
10012a94:	00000206 	br	10012aa0 <altera_avalon_jtag_uart_ioctl+0x84>
10012a98:	00a00034 	movhi	r2,32768
10012a9c:	10bfff84 	addi	r2,r2,-2
10012aa0:	e0fffd17 	ldw	r3,-12(fp)
10012aa4:	18800115 	stw	r2,4(r3)
      rc = 0;
10012aa8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012aac:	00000f06 	br	10012aec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10012ab0:	e0bffd17 	ldw	r2,-12(fp)
10012ab4:	10c00117 	ldw	r3,4(r2)
10012ab8:	00a00034 	movhi	r2,32768
10012abc:	10bfffc4 	addi	r2,r2,-1
10012ac0:	18800c26 	beq	r3,r2,10012af4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10012ac4:	e0bffd17 	ldw	r2,-12(fp)
10012ac8:	10c00917 	ldw	r3,36(r2)
10012acc:	e0bffd17 	ldw	r2,-12(fp)
10012ad0:	10800117 	ldw	r2,4(r2)
10012ad4:	1885803a 	cmpltu	r2,r3,r2
10012ad8:	10c03fcc 	andi	r3,r2,255
10012adc:	e0bfff17 	ldw	r2,-4(fp)
10012ae0:	10c00015 	stw	r3,0(r2)
      rc = 0;
10012ae4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10012ae8:	00000206 	br	10012af4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10012aec:	0001883a 	nop
10012af0:	00000106 	br	10012af8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10012af4:	0001883a 	nop

  default:
    break;
  }

  return rc;
10012af8:	e0bffb17 	ldw	r2,-20(fp)
}
10012afc:	e037883a 	mov	sp,fp
10012b00:	df000017 	ldw	fp,0(sp)
10012b04:	dec00104 	addi	sp,sp,4
10012b08:	f800283a 	ret

10012b0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10012b0c:	defff304 	addi	sp,sp,-52
10012b10:	dfc00c15 	stw	ra,48(sp)
10012b14:	df000b15 	stw	fp,44(sp)
10012b18:	df000b04 	addi	fp,sp,44
10012b1c:	e13ffc15 	stw	r4,-16(fp)
10012b20:	e17ffd15 	stw	r5,-12(fp)
10012b24:	e1bffe15 	stw	r6,-8(fp)
10012b28:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10012b2c:	e0bffd17 	ldw	r2,-12(fp)
10012b30:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012b34:	00004706 	br	10012c54 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10012b38:	e0bffc17 	ldw	r2,-16(fp)
10012b3c:	10800a17 	ldw	r2,40(r2)
10012b40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10012b44:	e0bffc17 	ldw	r2,-16(fp)
10012b48:	10800b17 	ldw	r2,44(r2)
10012b4c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10012b50:	e0fff717 	ldw	r3,-36(fp)
10012b54:	e0bff817 	ldw	r2,-32(fp)
10012b58:	18800536 	bltu	r3,r2,10012b70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10012b5c:	e0fff717 	ldw	r3,-36(fp)
10012b60:	e0bff817 	ldw	r2,-32(fp)
10012b64:	1885c83a 	sub	r2,r3,r2
10012b68:	e0bff615 	stw	r2,-40(fp)
10012b6c:	00000406 	br	10012b80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10012b70:	00c20004 	movi	r3,2048
10012b74:	e0bff817 	ldw	r2,-32(fp)
10012b78:	1885c83a 	sub	r2,r3,r2
10012b7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012b80:	e0bff617 	ldw	r2,-40(fp)
10012b84:	10001e26 	beq	r2,zero,10012c00 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10012b88:	e0fffe17 	ldw	r3,-8(fp)
10012b8c:	e0bff617 	ldw	r2,-40(fp)
10012b90:	1880022e 	bgeu	r3,r2,10012b9c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10012b94:	e0bffe17 	ldw	r2,-8(fp)
10012b98:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10012b9c:	e0bffc17 	ldw	r2,-16(fp)
10012ba0:	10c00e04 	addi	r3,r2,56
10012ba4:	e0bff817 	ldw	r2,-32(fp)
10012ba8:	1885883a 	add	r2,r3,r2
10012bac:	e1bff617 	ldw	r6,-40(fp)
10012bb0:	100b883a 	mov	r5,r2
10012bb4:	e13ff517 	ldw	r4,-44(fp)
10012bb8:	000a7440 	call	1000a744 <memcpy>
      ptr   += n;
10012bbc:	e0fff517 	ldw	r3,-44(fp)
10012bc0:	e0bff617 	ldw	r2,-40(fp)
10012bc4:	1885883a 	add	r2,r3,r2
10012bc8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10012bcc:	e0fffe17 	ldw	r3,-8(fp)
10012bd0:	e0bff617 	ldw	r2,-40(fp)
10012bd4:	1885c83a 	sub	r2,r3,r2
10012bd8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012bdc:	e0fff817 	ldw	r3,-32(fp)
10012be0:	e0bff617 	ldw	r2,-40(fp)
10012be4:	1885883a 	add	r2,r3,r2
10012be8:	10c1ffcc 	andi	r3,r2,2047
10012bec:	e0bffc17 	ldw	r2,-16(fp)
10012bf0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10012bf4:	e0bffe17 	ldw	r2,-8(fp)
10012bf8:	00bfcf16 	blt	zero,r2,10012b38 <__alt_data_end+0xf8012b38>
10012bfc:	00000106 	br	10012c04 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10012c00:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10012c04:	e0fff517 	ldw	r3,-44(fp)
10012c08:	e0bffd17 	ldw	r2,-12(fp)
10012c0c:	1880141e 	bne	r3,r2,10012c60 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10012c10:	e0bfff17 	ldw	r2,-4(fp)
10012c14:	1090000c 	andi	r2,r2,16384
10012c18:	1000131e 	bne	r2,zero,10012c68 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10012c1c:	0001883a 	nop
10012c20:	e0bffc17 	ldw	r2,-16(fp)
10012c24:	10c00a17 	ldw	r3,40(r2)
10012c28:	e0bff717 	ldw	r2,-36(fp)
10012c2c:	1880051e 	bne	r3,r2,10012c44 <altera_avalon_jtag_uart_read+0x138>
10012c30:	e0bffc17 	ldw	r2,-16(fp)
10012c34:	10c00917 	ldw	r3,36(r2)
10012c38:	e0bffc17 	ldw	r2,-16(fp)
10012c3c:	10800117 	ldw	r2,4(r2)
10012c40:	18bff736 	bltu	r3,r2,10012c20 <__alt_data_end+0xf8012c20>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10012c44:	e0bffc17 	ldw	r2,-16(fp)
10012c48:	10c00a17 	ldw	r3,40(r2)
10012c4c:	e0bff717 	ldw	r2,-36(fp)
10012c50:	18800726 	beq	r3,r2,10012c70 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10012c54:	e0bffe17 	ldw	r2,-8(fp)
10012c58:	00bfb716 	blt	zero,r2,10012b38 <__alt_data_end+0xf8012b38>
10012c5c:	00000506 	br	10012c74 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10012c60:	0001883a 	nop
10012c64:	00000306 	br	10012c74 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10012c68:	0001883a 	nop
10012c6c:	00000106 	br	10012c74 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10012c70:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10012c74:	e0fff517 	ldw	r3,-44(fp)
10012c78:	e0bffd17 	ldw	r2,-12(fp)
10012c7c:	18801826 	beq	r3,r2,10012ce0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012c80:	0005303a 	rdctl	r2,status
10012c84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012c88:	e0fffb17 	ldw	r3,-20(fp)
10012c8c:	00bfff84 	movi	r2,-2
10012c90:	1884703a 	and	r2,r3,r2
10012c94:	1001703a 	wrctl	status,r2
  
  return context;
10012c98:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10012c9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10012ca0:	e0bffc17 	ldw	r2,-16(fp)
10012ca4:	10800817 	ldw	r2,32(r2)
10012ca8:	10c00054 	ori	r3,r2,1
10012cac:	e0bffc17 	ldw	r2,-16(fp)
10012cb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012cb4:	e0bffc17 	ldw	r2,-16(fp)
10012cb8:	10800017 	ldw	r2,0(r2)
10012cbc:	10800104 	addi	r2,r2,4
10012cc0:	1007883a 	mov	r3,r2
10012cc4:	e0bffc17 	ldw	r2,-16(fp)
10012cc8:	10800817 	ldw	r2,32(r2)
10012ccc:	18800035 	stwio	r2,0(r3)
10012cd0:	e0bffa17 	ldw	r2,-24(fp)
10012cd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012cd8:	e0bff917 	ldw	r2,-28(fp)
10012cdc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10012ce0:	e0fff517 	ldw	r3,-44(fp)
10012ce4:	e0bffd17 	ldw	r2,-12(fp)
10012ce8:	18800426 	beq	r3,r2,10012cfc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10012cec:	e0fff517 	ldw	r3,-44(fp)
10012cf0:	e0bffd17 	ldw	r2,-12(fp)
10012cf4:	1885c83a 	sub	r2,r3,r2
10012cf8:	00000606 	br	10012d14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10012cfc:	e0bfff17 	ldw	r2,-4(fp)
10012d00:	1090000c 	andi	r2,r2,16384
10012d04:	10000226 	beq	r2,zero,10012d10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10012d08:	00bffd44 	movi	r2,-11
10012d0c:	00000106 	br	10012d14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10012d10:	00bffec4 	movi	r2,-5
}
10012d14:	e037883a 	mov	sp,fp
10012d18:	dfc00117 	ldw	ra,4(sp)
10012d1c:	df000017 	ldw	fp,0(sp)
10012d20:	dec00204 	addi	sp,sp,8
10012d24:	f800283a 	ret

10012d28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10012d28:	defff304 	addi	sp,sp,-52
10012d2c:	dfc00c15 	stw	ra,48(sp)
10012d30:	df000b15 	stw	fp,44(sp)
10012d34:	df000b04 	addi	fp,sp,44
10012d38:	e13ffc15 	stw	r4,-16(fp)
10012d3c:	e17ffd15 	stw	r5,-12(fp)
10012d40:	e1bffe15 	stw	r6,-8(fp)
10012d44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10012d48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10012d4c:	e0bffd17 	ldw	r2,-12(fp)
10012d50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012d54:	00003706 	br	10012e34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10012d58:	e0bffc17 	ldw	r2,-16(fp)
10012d5c:	10800c17 	ldw	r2,48(r2)
10012d60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10012d64:	e0bffc17 	ldw	r2,-16(fp)
10012d68:	10800d17 	ldw	r2,52(r2)
10012d6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10012d70:	e0fff917 	ldw	r3,-28(fp)
10012d74:	e0bff517 	ldw	r2,-44(fp)
10012d78:	1880062e 	bgeu	r3,r2,10012d94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10012d7c:	e0fff517 	ldw	r3,-44(fp)
10012d80:	e0bff917 	ldw	r2,-28(fp)
10012d84:	1885c83a 	sub	r2,r3,r2
10012d88:	10bfffc4 	addi	r2,r2,-1
10012d8c:	e0bff615 	stw	r2,-40(fp)
10012d90:	00000b06 	br	10012dc0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10012d94:	e0bff517 	ldw	r2,-44(fp)
10012d98:	10000526 	beq	r2,zero,10012db0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10012d9c:	00c20004 	movi	r3,2048
10012da0:	e0bff917 	ldw	r2,-28(fp)
10012da4:	1885c83a 	sub	r2,r3,r2
10012da8:	e0bff615 	stw	r2,-40(fp)
10012dac:	00000406 	br	10012dc0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10012db0:	00c1ffc4 	movi	r3,2047
10012db4:	e0bff917 	ldw	r2,-28(fp)
10012db8:	1885c83a 	sub	r2,r3,r2
10012dbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10012dc0:	e0bff617 	ldw	r2,-40(fp)
10012dc4:	10001e26 	beq	r2,zero,10012e40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10012dc8:	e0fffe17 	ldw	r3,-8(fp)
10012dcc:	e0bff617 	ldw	r2,-40(fp)
10012dd0:	1880022e 	bgeu	r3,r2,10012ddc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10012dd4:	e0bffe17 	ldw	r2,-8(fp)
10012dd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10012ddc:	e0bffc17 	ldw	r2,-16(fp)
10012de0:	10c20e04 	addi	r3,r2,2104
10012de4:	e0bff917 	ldw	r2,-28(fp)
10012de8:	1885883a 	add	r2,r3,r2
10012dec:	e1bff617 	ldw	r6,-40(fp)
10012df0:	e17ffd17 	ldw	r5,-12(fp)
10012df4:	1009883a 	mov	r4,r2
10012df8:	000a7440 	call	1000a744 <memcpy>
      ptr   += n;
10012dfc:	e0fffd17 	ldw	r3,-12(fp)
10012e00:	e0bff617 	ldw	r2,-40(fp)
10012e04:	1885883a 	add	r2,r3,r2
10012e08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10012e0c:	e0fffe17 	ldw	r3,-8(fp)
10012e10:	e0bff617 	ldw	r2,-40(fp)
10012e14:	1885c83a 	sub	r2,r3,r2
10012e18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10012e1c:	e0fff917 	ldw	r3,-28(fp)
10012e20:	e0bff617 	ldw	r2,-40(fp)
10012e24:	1885883a 	add	r2,r3,r2
10012e28:	10c1ffcc 	andi	r3,r2,2047
10012e2c:	e0bffc17 	ldw	r2,-16(fp)
10012e30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10012e34:	e0bffe17 	ldw	r2,-8(fp)
10012e38:	00bfc716 	blt	zero,r2,10012d58 <__alt_data_end+0xf8012d58>
10012e3c:	00000106 	br	10012e44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10012e40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012e44:	0005303a 	rdctl	r2,status
10012e48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012e4c:	e0fffb17 	ldw	r3,-20(fp)
10012e50:	00bfff84 	movi	r2,-2
10012e54:	1884703a 	and	r2,r3,r2
10012e58:	1001703a 	wrctl	status,r2
  
  return context;
10012e5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10012e60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10012e64:	e0bffc17 	ldw	r2,-16(fp)
10012e68:	10800817 	ldw	r2,32(r2)
10012e6c:	10c00094 	ori	r3,r2,2
10012e70:	e0bffc17 	ldw	r2,-16(fp)
10012e74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10012e78:	e0bffc17 	ldw	r2,-16(fp)
10012e7c:	10800017 	ldw	r2,0(r2)
10012e80:	10800104 	addi	r2,r2,4
10012e84:	1007883a 	mov	r3,r2
10012e88:	e0bffc17 	ldw	r2,-16(fp)
10012e8c:	10800817 	ldw	r2,32(r2)
10012e90:	18800035 	stwio	r2,0(r3)
10012e94:	e0bffa17 	ldw	r2,-24(fp)
10012e98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012e9c:	e0bff817 	ldw	r2,-32(fp)
10012ea0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10012ea4:	e0bffe17 	ldw	r2,-8(fp)
10012ea8:	0080100e 	bge	zero,r2,10012eec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10012eac:	e0bfff17 	ldw	r2,-4(fp)
10012eb0:	1090000c 	andi	r2,r2,16384
10012eb4:	1000101e 	bne	r2,zero,10012ef8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10012eb8:	0001883a 	nop
10012ebc:	e0bffc17 	ldw	r2,-16(fp)
10012ec0:	10c00d17 	ldw	r3,52(r2)
10012ec4:	e0bff517 	ldw	r2,-44(fp)
10012ec8:	1880051e 	bne	r3,r2,10012ee0 <altera_avalon_jtag_uart_write+0x1b8>
10012ecc:	e0bffc17 	ldw	r2,-16(fp)
10012ed0:	10c00917 	ldw	r3,36(r2)
10012ed4:	e0bffc17 	ldw	r2,-16(fp)
10012ed8:	10800117 	ldw	r2,4(r2)
10012edc:	18bff736 	bltu	r3,r2,10012ebc <__alt_data_end+0xf8012ebc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10012ee0:	e0bffc17 	ldw	r2,-16(fp)
10012ee4:	10800917 	ldw	r2,36(r2)
10012ee8:	1000051e 	bne	r2,zero,10012f00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10012eec:	e0bffe17 	ldw	r2,-8(fp)
10012ef0:	00bfd016 	blt	zero,r2,10012e34 <__alt_data_end+0xf8012e34>
10012ef4:	00000306 	br	10012f04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10012ef8:	0001883a 	nop
10012efc:	00000106 	br	10012f04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10012f00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10012f04:	e0fffd17 	ldw	r3,-12(fp)
10012f08:	e0bff717 	ldw	r2,-36(fp)
10012f0c:	18800426 	beq	r3,r2,10012f20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10012f10:	e0fffd17 	ldw	r3,-12(fp)
10012f14:	e0bff717 	ldw	r2,-36(fp)
10012f18:	1885c83a 	sub	r2,r3,r2
10012f1c:	00000606 	br	10012f38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10012f20:	e0bfff17 	ldw	r2,-4(fp)
10012f24:	1090000c 	andi	r2,r2,16384
10012f28:	10000226 	beq	r2,zero,10012f34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10012f2c:	00bffd44 	movi	r2,-11
10012f30:	00000106 	br	10012f38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10012f34:	00bffec4 	movi	r2,-5
}
10012f38:	e037883a 	mov	sp,fp
10012f3c:	dfc00117 	ldw	ra,4(sp)
10012f40:	df000017 	ldw	fp,0(sp)
10012f44:	dec00204 	addi	sp,sp,8
10012f48:	f800283a 	ret

10012f4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10012f4c:	defff504 	addi	sp,sp,-44
10012f50:	df000a15 	stw	fp,40(sp)
10012f54:	df000a04 	addi	fp,sp,40
10012f58:	e13ffc15 	stw	r4,-16(fp)
10012f5c:	e17ffd15 	stw	r5,-12(fp)
10012f60:	e1bffe15 	stw	r6,-8(fp)
10012f64:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10012f68:	e03ff615 	stw	zero,-40(fp)
10012f6c:	d0aa9517 	ldw	r2,-21932(gp)
  
  if (alt_ticks_per_second ())
10012f70:	10003c26 	beq	r2,zero,10013064 <alt_alarm_start+0x118>
  {
    if (alarm)
10012f74:	e0bffc17 	ldw	r2,-16(fp)
10012f78:	10003826 	beq	r2,zero,1001305c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10012f7c:	e0bffc17 	ldw	r2,-16(fp)
10012f80:	e0fffe17 	ldw	r3,-8(fp)
10012f84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10012f88:	e0bffc17 	ldw	r2,-16(fp)
10012f8c:	e0ffff17 	ldw	r3,-4(fp)
10012f90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012f94:	0005303a 	rdctl	r2,status
10012f98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012f9c:	e0fff917 	ldw	r3,-28(fp)
10012fa0:	00bfff84 	movi	r2,-2
10012fa4:	1884703a 	and	r2,r3,r2
10012fa8:	1001703a 	wrctl	status,r2
  
  return context;
10012fac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10012fb0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10012fb4:	d0aa9617 	ldw	r2,-21928(gp)
      
      current_nticks = alt_nticks();
10012fb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10012fbc:	e0fffd17 	ldw	r3,-12(fp)
10012fc0:	e0bff617 	ldw	r2,-40(fp)
10012fc4:	1885883a 	add	r2,r3,r2
10012fc8:	10c00044 	addi	r3,r2,1
10012fcc:	e0bffc17 	ldw	r2,-16(fp)
10012fd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10012fd4:	e0bffc17 	ldw	r2,-16(fp)
10012fd8:	10c00217 	ldw	r3,8(r2)
10012fdc:	e0bff617 	ldw	r2,-40(fp)
10012fe0:	1880042e 	bgeu	r3,r2,10012ff4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10012fe4:	e0bffc17 	ldw	r2,-16(fp)
10012fe8:	00c00044 	movi	r3,1
10012fec:	10c00405 	stb	r3,16(r2)
10012ff0:	00000206 	br	10012ffc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10012ff4:	e0bffc17 	ldw	r2,-16(fp)
10012ff8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10012ffc:	e0bffc17 	ldw	r2,-16(fp)
10013000:	d0e01104 	addi	r3,gp,-32700
10013004:	e0fffa15 	stw	r3,-24(fp)
10013008:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001300c:	e0bffb17 	ldw	r2,-20(fp)
10013010:	e0fffa17 	ldw	r3,-24(fp)
10013014:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10013018:	e0bffa17 	ldw	r2,-24(fp)
1001301c:	10c00017 	ldw	r3,0(r2)
10013020:	e0bffb17 	ldw	r2,-20(fp)
10013024:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10013028:	e0bffa17 	ldw	r2,-24(fp)
1001302c:	10800017 	ldw	r2,0(r2)
10013030:	e0fffb17 	ldw	r3,-20(fp)
10013034:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10013038:	e0bffa17 	ldw	r2,-24(fp)
1001303c:	e0fffb17 	ldw	r3,-20(fp)
10013040:	10c00015 	stw	r3,0(r2)
10013044:	e0bff817 	ldw	r2,-32(fp)
10013048:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001304c:	e0bff717 	ldw	r2,-36(fp)
10013050:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10013054:	0005883a 	mov	r2,zero
10013058:	00000306 	br	10013068 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1001305c:	00bffa84 	movi	r2,-22
10013060:	00000106 	br	10013068 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10013064:	00bfde84 	movi	r2,-134
  }
}
10013068:	e037883a 	mov	sp,fp
1001306c:	df000017 	ldw	fp,0(sp)
10013070:	dec00104 	addi	sp,sp,4
10013074:	f800283a 	ret

10013078 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10013078:	defffa04 	addi	sp,sp,-24
1001307c:	dfc00515 	stw	ra,20(sp)
10013080:	df000415 	stw	fp,16(sp)
10013084:	df000404 	addi	fp,sp,16
10013088:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001308c:	00800244 	movi	r2,9
10013090:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10013094:	014003f4 	movhi	r5,15
10013098:	29509004 	addi	r5,r5,16960
1001309c:	e13ffd17 	ldw	r4,-12(fp)
100130a0:	0004b280 	call	10004b28 <__mulsi3>
100130a4:	100b883a 	mov	r5,r2
100130a8:	0100bef4 	movhi	r4,763
100130ac:	213c2004 	addi	r4,r4,-3968
100130b0:	000f1080 	call	1000f108 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100130b4:	100b883a 	mov	r5,r2
100130b8:	01200034 	movhi	r4,32768
100130bc:	213fffc4 	addi	r4,r4,-1
100130c0:	000f1080 	call	1000f108 <__udivsi3>
100130c4:	100b883a 	mov	r5,r2
100130c8:	e13fff17 	ldw	r4,-4(fp)
100130cc:	000f1080 	call	1000f108 <__udivsi3>
100130d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100130d4:	e0bffe17 	ldw	r2,-8(fp)
100130d8:	10002a26 	beq	r2,zero,10013184 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100130dc:	e03ffc15 	stw	zero,-16(fp)
100130e0:	00001706 	br	10013140 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100130e4:	00a00034 	movhi	r2,32768
100130e8:	10bfffc4 	addi	r2,r2,-1
100130ec:	10bfffc4 	addi	r2,r2,-1
100130f0:	103ffe1e 	bne	r2,zero,100130ec <__alt_data_end+0xf80130ec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100130f4:	014003f4 	movhi	r5,15
100130f8:	29509004 	addi	r5,r5,16960
100130fc:	e13ffd17 	ldw	r4,-12(fp)
10013100:	0004b280 	call	10004b28 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10013104:	100b883a 	mov	r5,r2
10013108:	0100bef4 	movhi	r4,763
1001310c:	213c2004 	addi	r4,r4,-3968
10013110:	000f1080 	call	1000f108 <__udivsi3>
10013114:	100b883a 	mov	r5,r2
10013118:	01200034 	movhi	r4,32768
1001311c:	213fffc4 	addi	r4,r4,-1
10013120:	000f1080 	call	1000f108 <__udivsi3>
10013124:	1007883a 	mov	r3,r2
10013128:	e0bfff17 	ldw	r2,-4(fp)
1001312c:	10c5c83a 	sub	r2,r2,r3
10013130:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10013134:	e0bffc17 	ldw	r2,-16(fp)
10013138:	10800044 	addi	r2,r2,1
1001313c:	e0bffc15 	stw	r2,-16(fp)
10013140:	e0fffc17 	ldw	r3,-16(fp)
10013144:	e0bffe17 	ldw	r2,-8(fp)
10013148:	18bfe616 	blt	r3,r2,100130e4 <__alt_data_end+0xf80130e4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001314c:	014003f4 	movhi	r5,15
10013150:	29509004 	addi	r5,r5,16960
10013154:	e13ffd17 	ldw	r4,-12(fp)
10013158:	0004b280 	call	10004b28 <__mulsi3>
1001315c:	100b883a 	mov	r5,r2
10013160:	0100bef4 	movhi	r4,763
10013164:	213c2004 	addi	r4,r4,-3968
10013168:	000f1080 	call	1000f108 <__udivsi3>
1001316c:	e17fff17 	ldw	r5,-4(fp)
10013170:	1009883a 	mov	r4,r2
10013174:	0004b280 	call	10004b28 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10013178:	10bfffc4 	addi	r2,r2,-1
1001317c:	103ffe1e 	bne	r2,zero,10013178 <__alt_data_end+0xf8013178>
10013180:	00000d06 	br	100131b8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10013184:	014003f4 	movhi	r5,15
10013188:	29509004 	addi	r5,r5,16960
1001318c:	e13ffd17 	ldw	r4,-12(fp)
10013190:	0004b280 	call	10004b28 <__mulsi3>
10013194:	100b883a 	mov	r5,r2
10013198:	0100bef4 	movhi	r4,763
1001319c:	213c2004 	addi	r4,r4,-3968
100131a0:	000f1080 	call	1000f108 <__udivsi3>
100131a4:	e17fff17 	ldw	r5,-4(fp)
100131a8:	1009883a 	mov	r4,r2
100131ac:	0004b280 	call	10004b28 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100131b0:	10bfffc4 	addi	r2,r2,-1
100131b4:	00bffe16 	blt	zero,r2,100131b0 <__alt_data_end+0xf80131b0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100131b8:	0005883a 	mov	r2,zero
}
100131bc:	e037883a 	mov	sp,fp
100131c0:	dfc00117 	ldw	ra,4(sp)
100131c4:	df000017 	ldw	fp,0(sp)
100131c8:	dec00204 	addi	sp,sp,8
100131cc:	f800283a 	ret

100131d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100131d0:	deffff04 	addi	sp,sp,-4
100131d4:	df000015 	stw	fp,0(sp)
100131d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100131dc:	0001883a 	nop
100131e0:	e037883a 	mov	sp,fp
100131e4:	df000017 	ldw	fp,0(sp)
100131e8:	dec00104 	addi	sp,sp,4
100131ec:	f800283a 	ret

100131f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100131f0:	defffe04 	addi	sp,sp,-8
100131f4:	dfc00115 	stw	ra,4(sp)
100131f8:	df000015 	stw	fp,0(sp)
100131fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013200:	d0a00e17 	ldw	r2,-32712(gp)
10013204:	10000326 	beq	r2,zero,10013214 <alt_get_errno+0x24>
10013208:	d0a00e17 	ldw	r2,-32712(gp)
1001320c:	103ee83a 	callr	r2
10013210:	00000106 	br	10013218 <alt_get_errno+0x28>
10013214:	d0aa9004 	addi	r2,gp,-21952
}
10013218:	e037883a 	mov	sp,fp
1001321c:	dfc00117 	ldw	ra,4(sp)
10013220:	df000017 	ldw	fp,0(sp)
10013224:	dec00204 	addi	sp,sp,8
10013228:	f800283a 	ret

1001322c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1001322c:	defffa04 	addi	sp,sp,-24
10013230:	dfc00515 	stw	ra,20(sp)
10013234:	df000415 	stw	fp,16(sp)
10013238:	df000404 	addi	fp,sp,16
1001323c:	e13ffe15 	stw	r4,-8(fp)
10013240:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10013244:	e0bffe17 	ldw	r2,-8(fp)
10013248:	10000326 	beq	r2,zero,10013258 <alt_dev_llist_insert+0x2c>
1001324c:	e0bffe17 	ldw	r2,-8(fp)
10013250:	10800217 	ldw	r2,8(r2)
10013254:	1000061e 	bne	r2,zero,10013270 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10013258:	00131f00 	call	100131f0 <alt_get_errno>
1001325c:	1007883a 	mov	r3,r2
10013260:	00800584 	movi	r2,22
10013264:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10013268:	00bffa84 	movi	r2,-22
1001326c:	00001306 	br	100132bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10013270:	e0bffe17 	ldw	r2,-8(fp)
10013274:	e0ffff17 	ldw	r3,-4(fp)
10013278:	e0fffc15 	stw	r3,-16(fp)
1001327c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10013280:	e0bffd17 	ldw	r2,-12(fp)
10013284:	e0fffc17 	ldw	r3,-16(fp)
10013288:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001328c:	e0bffc17 	ldw	r2,-16(fp)
10013290:	10c00017 	ldw	r3,0(r2)
10013294:	e0bffd17 	ldw	r2,-12(fp)
10013298:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001329c:	e0bffc17 	ldw	r2,-16(fp)
100132a0:	10800017 	ldw	r2,0(r2)
100132a4:	e0fffd17 	ldw	r3,-12(fp)
100132a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100132ac:	e0bffc17 	ldw	r2,-16(fp)
100132b0:	e0fffd17 	ldw	r3,-12(fp)
100132b4:	10c00015 	stw	r3,0(r2)

  return 0;  
100132b8:	0005883a 	mov	r2,zero
}
100132bc:	e037883a 	mov	sp,fp
100132c0:	dfc00117 	ldw	ra,4(sp)
100132c4:	df000017 	ldw	fp,0(sp)
100132c8:	dec00204 	addi	sp,sp,8
100132cc:	f800283a 	ret

100132d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100132d0:	defffd04 	addi	sp,sp,-12
100132d4:	dfc00215 	stw	ra,8(sp)
100132d8:	df000115 	stw	fp,4(sp)
100132dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100132e0:	00840074 	movhi	r2,4097
100132e4:	1090a104 	addi	r2,r2,17028
100132e8:	e0bfff15 	stw	r2,-4(fp)
100132ec:	00000606 	br	10013308 <_do_ctors+0x38>
        (*ctor) (); 
100132f0:	e0bfff17 	ldw	r2,-4(fp)
100132f4:	10800017 	ldw	r2,0(r2)
100132f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100132fc:	e0bfff17 	ldw	r2,-4(fp)
10013300:	10bfff04 	addi	r2,r2,-4
10013304:	e0bfff15 	stw	r2,-4(fp)
10013308:	e0ffff17 	ldw	r3,-4(fp)
1001330c:	00840074 	movhi	r2,4097
10013310:	1090a204 	addi	r2,r2,17032
10013314:	18bff62e 	bgeu	r3,r2,100132f0 <__alt_data_end+0xf80132f0>
        (*ctor) (); 
}
10013318:	0001883a 	nop
1001331c:	e037883a 	mov	sp,fp
10013320:	dfc00117 	ldw	ra,4(sp)
10013324:	df000017 	ldw	fp,0(sp)
10013328:	dec00204 	addi	sp,sp,8
1001332c:	f800283a 	ret

10013330 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10013330:	defffd04 	addi	sp,sp,-12
10013334:	dfc00215 	stw	ra,8(sp)
10013338:	df000115 	stw	fp,4(sp)
1001333c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10013340:	00840074 	movhi	r2,4097
10013344:	1090a104 	addi	r2,r2,17028
10013348:	e0bfff15 	stw	r2,-4(fp)
1001334c:	00000606 	br	10013368 <_do_dtors+0x38>
        (*dtor) (); 
10013350:	e0bfff17 	ldw	r2,-4(fp)
10013354:	10800017 	ldw	r2,0(r2)
10013358:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001335c:	e0bfff17 	ldw	r2,-4(fp)
10013360:	10bfff04 	addi	r2,r2,-4
10013364:	e0bfff15 	stw	r2,-4(fp)
10013368:	e0ffff17 	ldw	r3,-4(fp)
1001336c:	00840074 	movhi	r2,4097
10013370:	1090a204 	addi	r2,r2,17032
10013374:	18bff62e 	bgeu	r3,r2,10013350 <__alt_data_end+0xf8013350>
        (*dtor) (); 
}
10013378:	0001883a 	nop
1001337c:	e037883a 	mov	sp,fp
10013380:	dfc00117 	ldw	ra,4(sp)
10013384:	df000017 	ldw	fp,0(sp)
10013388:	dec00204 	addi	sp,sp,8
1001338c:	f800283a 	ret

10013390 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10013390:	deffff04 	addi	sp,sp,-4
10013394:	df000015 	stw	fp,0(sp)
10013398:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001339c:	0001883a 	nop
100133a0:	e037883a 	mov	sp,fp
100133a4:	df000017 	ldw	fp,0(sp)
100133a8:	dec00104 	addi	sp,sp,4
100133ac:	f800283a 	ret

100133b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100133b0:	defff904 	addi	sp,sp,-28
100133b4:	dfc00615 	stw	ra,24(sp)
100133b8:	df000515 	stw	fp,20(sp)
100133bc:	df000504 	addi	fp,sp,20
100133c0:	e13ffc15 	stw	r4,-16(fp)
100133c4:	e17ffd15 	stw	r5,-12(fp)
100133c8:	e1bffe15 	stw	r6,-8(fp)
100133cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100133d0:	e0800217 	ldw	r2,8(fp)
100133d4:	d8800015 	stw	r2,0(sp)
100133d8:	e1ffff17 	ldw	r7,-4(fp)
100133dc:	e1bffe17 	ldw	r6,-8(fp)
100133e0:	e17ffd17 	ldw	r5,-12(fp)
100133e4:	e13ffc17 	ldw	r4,-16(fp)
100133e8:	00135600 	call	10013560 <alt_iic_isr_register>
}  
100133ec:	e037883a 	mov	sp,fp
100133f0:	dfc00117 	ldw	ra,4(sp)
100133f4:	df000017 	ldw	fp,0(sp)
100133f8:	dec00204 	addi	sp,sp,8
100133fc:	f800283a 	ret

10013400 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10013400:	defff904 	addi	sp,sp,-28
10013404:	df000615 	stw	fp,24(sp)
10013408:	df000604 	addi	fp,sp,24
1001340c:	e13ffe15 	stw	r4,-8(fp)
10013410:	e17fff15 	stw	r5,-4(fp)
10013414:	e0bfff17 	ldw	r2,-4(fp)
10013418:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001341c:	0005303a 	rdctl	r2,status
10013420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013424:	e0fffb17 	ldw	r3,-20(fp)
10013428:	00bfff84 	movi	r2,-2
1001342c:	1884703a 	and	r2,r3,r2
10013430:	1001703a 	wrctl	status,r2
  
  return context;
10013434:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10013438:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001343c:	00c00044 	movi	r3,1
10013440:	e0bffa17 	ldw	r2,-24(fp)
10013444:	1884983a 	sll	r2,r3,r2
10013448:	1007883a 	mov	r3,r2
1001344c:	d0aa9417 	ldw	r2,-21936(gp)
10013450:	1884b03a 	or	r2,r3,r2
10013454:	d0aa9415 	stw	r2,-21936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10013458:	d0aa9417 	ldw	r2,-21936(gp)
1001345c:	100170fa 	wrctl	ienable,r2
10013460:	e0bffc17 	ldw	r2,-16(fp)
10013464:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013468:	e0bffd17 	ldw	r2,-12(fp)
1001346c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10013470:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10013474:	0001883a 	nop
}
10013478:	e037883a 	mov	sp,fp
1001347c:	df000017 	ldw	fp,0(sp)
10013480:	dec00104 	addi	sp,sp,4
10013484:	f800283a 	ret

10013488 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10013488:	defff904 	addi	sp,sp,-28
1001348c:	df000615 	stw	fp,24(sp)
10013490:	df000604 	addi	fp,sp,24
10013494:	e13ffe15 	stw	r4,-8(fp)
10013498:	e17fff15 	stw	r5,-4(fp)
1001349c:	e0bfff17 	ldw	r2,-4(fp)
100134a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100134a4:	0005303a 	rdctl	r2,status
100134a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100134ac:	e0fffb17 	ldw	r3,-20(fp)
100134b0:	00bfff84 	movi	r2,-2
100134b4:	1884703a 	and	r2,r3,r2
100134b8:	1001703a 	wrctl	status,r2
  
  return context;
100134bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100134c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100134c4:	00c00044 	movi	r3,1
100134c8:	e0bffa17 	ldw	r2,-24(fp)
100134cc:	1884983a 	sll	r2,r3,r2
100134d0:	0084303a 	nor	r2,zero,r2
100134d4:	1007883a 	mov	r3,r2
100134d8:	d0aa9417 	ldw	r2,-21936(gp)
100134dc:	1884703a 	and	r2,r3,r2
100134e0:	d0aa9415 	stw	r2,-21936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100134e4:	d0aa9417 	ldw	r2,-21936(gp)
100134e8:	100170fa 	wrctl	ienable,r2
100134ec:	e0bffc17 	ldw	r2,-16(fp)
100134f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100134f4:	e0bffd17 	ldw	r2,-12(fp)
100134f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100134fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10013500:	0001883a 	nop
}
10013504:	e037883a 	mov	sp,fp
10013508:	df000017 	ldw	fp,0(sp)
1001350c:	dec00104 	addi	sp,sp,4
10013510:	f800283a 	ret

10013514 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10013514:	defffc04 	addi	sp,sp,-16
10013518:	df000315 	stw	fp,12(sp)
1001351c:	df000304 	addi	fp,sp,12
10013520:	e13ffe15 	stw	r4,-8(fp)
10013524:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10013528:	000530fa 	rdctl	r2,ienable
1001352c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10013530:	00c00044 	movi	r3,1
10013534:	e0bfff17 	ldw	r2,-4(fp)
10013538:	1884983a 	sll	r2,r3,r2
1001353c:	1007883a 	mov	r3,r2
10013540:	e0bffd17 	ldw	r2,-12(fp)
10013544:	1884703a 	and	r2,r3,r2
10013548:	1004c03a 	cmpne	r2,r2,zero
1001354c:	10803fcc 	andi	r2,r2,255
}
10013550:	e037883a 	mov	sp,fp
10013554:	df000017 	ldw	fp,0(sp)
10013558:	dec00104 	addi	sp,sp,4
1001355c:	f800283a 	ret

10013560 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10013560:	defff504 	addi	sp,sp,-44
10013564:	dfc00a15 	stw	ra,40(sp)
10013568:	df000915 	stw	fp,36(sp)
1001356c:	df000904 	addi	fp,sp,36
10013570:	e13ffc15 	stw	r4,-16(fp)
10013574:	e17ffd15 	stw	r5,-12(fp)
10013578:	e1bffe15 	stw	r6,-8(fp)
1001357c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10013580:	00bffa84 	movi	r2,-22
10013584:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10013588:	e0bffd17 	ldw	r2,-12(fp)
1001358c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10013590:	e0bff817 	ldw	r2,-32(fp)
10013594:	10800808 	cmpgei	r2,r2,32
10013598:	1000271e 	bne	r2,zero,10013638 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001359c:	0005303a 	rdctl	r2,status
100135a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100135a4:	e0fffb17 	ldw	r3,-20(fp)
100135a8:	00bfff84 	movi	r2,-2
100135ac:	1884703a 	and	r2,r3,r2
100135b0:	1001703a 	wrctl	status,r2
  
  return context;
100135b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100135b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100135bc:	008400b4 	movhi	r2,4098
100135c0:	10ae2204 	addi	r2,r2,-18296
100135c4:	e0fff817 	ldw	r3,-32(fp)
100135c8:	180690fa 	slli	r3,r3,3
100135cc:	10c5883a 	add	r2,r2,r3
100135d0:	e0fffe17 	ldw	r3,-8(fp)
100135d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100135d8:	008400b4 	movhi	r2,4098
100135dc:	10ae2204 	addi	r2,r2,-18296
100135e0:	e0fff817 	ldw	r3,-32(fp)
100135e4:	180690fa 	slli	r3,r3,3
100135e8:	10c5883a 	add	r2,r2,r3
100135ec:	10800104 	addi	r2,r2,4
100135f0:	e0ffff17 	ldw	r3,-4(fp)
100135f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100135f8:	e0bffe17 	ldw	r2,-8(fp)
100135fc:	10000526 	beq	r2,zero,10013614 <alt_iic_isr_register+0xb4>
10013600:	e0bff817 	ldw	r2,-32(fp)
10013604:	100b883a 	mov	r5,r2
10013608:	e13ffc17 	ldw	r4,-16(fp)
1001360c:	00134000 	call	10013400 <alt_ic_irq_enable>
10013610:	00000406 	br	10013624 <alt_iic_isr_register+0xc4>
10013614:	e0bff817 	ldw	r2,-32(fp)
10013618:	100b883a 	mov	r5,r2
1001361c:	e13ffc17 	ldw	r4,-16(fp)
10013620:	00134880 	call	10013488 <alt_ic_irq_disable>
10013624:	e0bff715 	stw	r2,-36(fp)
10013628:	e0bffa17 	ldw	r2,-24(fp)
1001362c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013630:	e0bff917 	ldw	r2,-28(fp)
10013634:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10013638:	e0bff717 	ldw	r2,-36(fp)
}
1001363c:	e037883a 	mov	sp,fp
10013640:	dfc00117 	ldw	ra,4(sp)
10013644:	df000017 	ldw	fp,0(sp)
10013648:	dec00204 	addi	sp,sp,8
1001364c:	f800283a 	ret

10013650 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10013650:	defff804 	addi	sp,sp,-32
10013654:	dfc00715 	stw	ra,28(sp)
10013658:	df000615 	stw	fp,24(sp)
1001365c:	dc000515 	stw	r16,20(sp)
10013660:	df000604 	addi	fp,sp,24
10013664:	e13ffb15 	stw	r4,-20(fp)
10013668:	e17ffc15 	stw	r5,-16(fp)
1001366c:	e1bffd15 	stw	r6,-12(fp)
10013670:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10013674:	e1bffe17 	ldw	r6,-8(fp)
10013678:	e17ffd17 	ldw	r5,-12(fp)
1001367c:	e13ffc17 	ldw	r4,-16(fp)
10013680:	00138d80 	call	100138d8 <open>
10013684:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10013688:	e0bffa17 	ldw	r2,-24(fp)
1001368c:	10002216 	blt	r2,zero,10013718 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10013690:	04040074 	movhi	r16,4097
10013694:	84199e04 	addi	r16,r16,26232
10013698:	e0bffa17 	ldw	r2,-24(fp)
1001369c:	01400304 	movi	r5,12
100136a0:	1009883a 	mov	r4,r2
100136a4:	0004b280 	call	10004b28 <__mulsi3>
100136a8:	8085883a 	add	r2,r16,r2
100136ac:	10c00017 	ldw	r3,0(r2)
100136b0:	e0bffb17 	ldw	r2,-20(fp)
100136b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100136b8:	04040074 	movhi	r16,4097
100136bc:	84199e04 	addi	r16,r16,26232
100136c0:	e0bffa17 	ldw	r2,-24(fp)
100136c4:	01400304 	movi	r5,12
100136c8:	1009883a 	mov	r4,r2
100136cc:	0004b280 	call	10004b28 <__mulsi3>
100136d0:	8085883a 	add	r2,r16,r2
100136d4:	10800104 	addi	r2,r2,4
100136d8:	10c00017 	ldw	r3,0(r2)
100136dc:	e0bffb17 	ldw	r2,-20(fp)
100136e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100136e4:	04040074 	movhi	r16,4097
100136e8:	84199e04 	addi	r16,r16,26232
100136ec:	e0bffa17 	ldw	r2,-24(fp)
100136f0:	01400304 	movi	r5,12
100136f4:	1009883a 	mov	r4,r2
100136f8:	0004b280 	call	10004b28 <__mulsi3>
100136fc:	8085883a 	add	r2,r16,r2
10013700:	10800204 	addi	r2,r2,8
10013704:	10c00017 	ldw	r3,0(r2)
10013708:	e0bffb17 	ldw	r2,-20(fp)
1001370c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10013710:	e13ffa17 	ldw	r4,-24(fp)
10013714:	001218c0 	call	1001218c <alt_release_fd>
  }
} 
10013718:	0001883a 	nop
1001371c:	e6ffff04 	addi	sp,fp,-4
10013720:	dfc00217 	ldw	ra,8(sp)
10013724:	df000117 	ldw	fp,4(sp)
10013728:	dc000017 	ldw	r16,0(sp)
1001372c:	dec00304 	addi	sp,sp,12
10013730:	f800283a 	ret

10013734 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10013734:	defffb04 	addi	sp,sp,-20
10013738:	dfc00415 	stw	ra,16(sp)
1001373c:	df000315 	stw	fp,12(sp)
10013740:	df000304 	addi	fp,sp,12
10013744:	e13ffd15 	stw	r4,-12(fp)
10013748:	e17ffe15 	stw	r5,-8(fp)
1001374c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10013750:	01c07fc4 	movi	r7,511
10013754:	01800044 	movi	r6,1
10013758:	e17ffd17 	ldw	r5,-12(fp)
1001375c:	01040074 	movhi	r4,4097
10013760:	2119a104 	addi	r4,r4,26244
10013764:	00136500 	call	10013650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10013768:	01c07fc4 	movi	r7,511
1001376c:	000d883a 	mov	r6,zero
10013770:	e17ffe17 	ldw	r5,-8(fp)
10013774:	01040074 	movhi	r4,4097
10013778:	21199e04 	addi	r4,r4,26232
1001377c:	00136500 	call	10013650 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10013780:	01c07fc4 	movi	r7,511
10013784:	01800044 	movi	r6,1
10013788:	e17fff17 	ldw	r5,-4(fp)
1001378c:	01040074 	movhi	r4,4097
10013790:	2119a404 	addi	r4,r4,26256
10013794:	00136500 	call	10013650 <alt_open_fd>
}  
10013798:	0001883a 	nop
1001379c:	e037883a 	mov	sp,fp
100137a0:	dfc00117 	ldw	ra,4(sp)
100137a4:	df000017 	ldw	fp,0(sp)
100137a8:	dec00204 	addi	sp,sp,8
100137ac:	f800283a 	ret

100137b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100137b0:	defffe04 	addi	sp,sp,-8
100137b4:	dfc00115 	stw	ra,4(sp)
100137b8:	df000015 	stw	fp,0(sp)
100137bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100137c0:	d0a00e17 	ldw	r2,-32712(gp)
100137c4:	10000326 	beq	r2,zero,100137d4 <alt_get_errno+0x24>
100137c8:	d0a00e17 	ldw	r2,-32712(gp)
100137cc:	103ee83a 	callr	r2
100137d0:	00000106 	br	100137d8 <alt_get_errno+0x28>
100137d4:	d0aa9004 	addi	r2,gp,-21952
}
100137d8:	e037883a 	mov	sp,fp
100137dc:	dfc00117 	ldw	ra,4(sp)
100137e0:	df000017 	ldw	fp,0(sp)
100137e4:	dec00204 	addi	sp,sp,8
100137e8:	f800283a 	ret

100137ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100137ec:	defffb04 	addi	sp,sp,-20
100137f0:	dfc00415 	stw	ra,16(sp)
100137f4:	df000315 	stw	fp,12(sp)
100137f8:	dc000215 	stw	r16,8(sp)
100137fc:	df000304 	addi	fp,sp,12
10013800:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10013804:	e0bffe17 	ldw	r2,-8(fp)
10013808:	10800217 	ldw	r2,8(r2)
1001380c:	10d00034 	orhi	r3,r2,16384
10013810:	e0bffe17 	ldw	r2,-8(fp)
10013814:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10013818:	e03ffd15 	stw	zero,-12(fp)
1001381c:	00002306 	br	100138ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013820:	04040074 	movhi	r16,4097
10013824:	84199e04 	addi	r16,r16,26232
10013828:	e0bffd17 	ldw	r2,-12(fp)
1001382c:	01400304 	movi	r5,12
10013830:	1009883a 	mov	r4,r2
10013834:	0004b280 	call	10004b28 <__mulsi3>
10013838:	8085883a 	add	r2,r16,r2
1001383c:	10c00017 	ldw	r3,0(r2)
10013840:	e0bffe17 	ldw	r2,-8(fp)
10013844:	10800017 	ldw	r2,0(r2)
10013848:	1880151e 	bne	r3,r2,100138a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001384c:	04040074 	movhi	r16,4097
10013850:	84199e04 	addi	r16,r16,26232
10013854:	e0bffd17 	ldw	r2,-12(fp)
10013858:	01400304 	movi	r5,12
1001385c:	1009883a 	mov	r4,r2
10013860:	0004b280 	call	10004b28 <__mulsi3>
10013864:	8085883a 	add	r2,r16,r2
10013868:	10800204 	addi	r2,r2,8
1001386c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10013870:	10000b0e 	bge	r2,zero,100138a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10013874:	01400304 	movi	r5,12
10013878:	e13ffd17 	ldw	r4,-12(fp)
1001387c:	0004b280 	call	10004b28 <__mulsi3>
10013880:	1007883a 	mov	r3,r2
10013884:	00840074 	movhi	r2,4097
10013888:	10999e04 	addi	r2,r2,26232
1001388c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10013890:	e0bffe17 	ldw	r2,-8(fp)
10013894:	18800226 	beq	r3,r2,100138a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10013898:	00bffcc4 	movi	r2,-13
1001389c:	00000806 	br	100138c0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100138a0:	e0bffd17 	ldw	r2,-12(fp)
100138a4:	10800044 	addi	r2,r2,1
100138a8:	e0bffd15 	stw	r2,-12(fp)
100138ac:	d0a00d17 	ldw	r2,-32716(gp)
100138b0:	1007883a 	mov	r3,r2
100138b4:	e0bffd17 	ldw	r2,-12(fp)
100138b8:	18bfd92e 	bgeu	r3,r2,10013820 <__alt_data_end+0xf8013820>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100138bc:	0005883a 	mov	r2,zero
}
100138c0:	e6ffff04 	addi	sp,fp,-4
100138c4:	dfc00217 	ldw	ra,8(sp)
100138c8:	df000117 	ldw	fp,4(sp)
100138cc:	dc000017 	ldw	r16,0(sp)
100138d0:	dec00304 	addi	sp,sp,12
100138d4:	f800283a 	ret

100138d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100138d8:	defff604 	addi	sp,sp,-40
100138dc:	dfc00915 	stw	ra,36(sp)
100138e0:	df000815 	stw	fp,32(sp)
100138e4:	df000804 	addi	fp,sp,32
100138e8:	e13ffd15 	stw	r4,-12(fp)
100138ec:	e17ffe15 	stw	r5,-8(fp)
100138f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100138f4:	00bfffc4 	movi	r2,-1
100138f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100138fc:	00bffb44 	movi	r2,-19
10013900:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10013904:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10013908:	d1600b04 	addi	r5,gp,-32724
1001390c:	e13ffd17 	ldw	r4,-12(fp)
10013910:	0013bfc0 	call	10013bfc <alt_find_dev>
10013914:	e0bff815 	stw	r2,-32(fp)
10013918:	e0bff817 	ldw	r2,-32(fp)
1001391c:	1000051e 	bne	r2,zero,10013934 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10013920:	e13ffd17 	ldw	r4,-12(fp)
10013924:	0013c8c0 	call	10013c8c <alt_find_file>
10013928:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1001392c:	00800044 	movi	r2,1
10013930:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10013934:	e0bff817 	ldw	r2,-32(fp)
10013938:	10002b26 	beq	r2,zero,100139e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1001393c:	e13ff817 	ldw	r4,-32(fp)
10013940:	0013d940 	call	10013d94 <alt_get_fd>
10013944:	e0bff915 	stw	r2,-28(fp)
10013948:	e0bff917 	ldw	r2,-28(fp)
1001394c:	1000030e 	bge	r2,zero,1001395c <open+0x84>
    {
      status = index;
10013950:	e0bff917 	ldw	r2,-28(fp)
10013954:	e0bffa15 	stw	r2,-24(fp)
10013958:	00002506 	br	100139f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1001395c:	01400304 	movi	r5,12
10013960:	e13ff917 	ldw	r4,-28(fp)
10013964:	0004b280 	call	10004b28 <__mulsi3>
10013968:	1007883a 	mov	r3,r2
1001396c:	00840074 	movhi	r2,4097
10013970:	10999e04 	addi	r2,r2,26232
10013974:	1885883a 	add	r2,r3,r2
10013978:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001397c:	e0fffe17 	ldw	r3,-8(fp)
10013980:	00900034 	movhi	r2,16384
10013984:	10bfffc4 	addi	r2,r2,-1
10013988:	1886703a 	and	r3,r3,r2
1001398c:	e0bffc17 	ldw	r2,-16(fp)
10013990:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10013994:	e0bffb17 	ldw	r2,-20(fp)
10013998:	1000051e 	bne	r2,zero,100139b0 <open+0xd8>
1001399c:	e13ffc17 	ldw	r4,-16(fp)
100139a0:	00137ec0 	call	100137ec <alt_file_locked>
100139a4:	e0bffa15 	stw	r2,-24(fp)
100139a8:	e0bffa17 	ldw	r2,-24(fp)
100139ac:	10001016 	blt	r2,zero,100139f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100139b0:	e0bff817 	ldw	r2,-32(fp)
100139b4:	10800317 	ldw	r2,12(r2)
100139b8:	10000826 	beq	r2,zero,100139dc <open+0x104>
100139bc:	e0bff817 	ldw	r2,-32(fp)
100139c0:	10800317 	ldw	r2,12(r2)
100139c4:	e1ffff17 	ldw	r7,-4(fp)
100139c8:	e1bffe17 	ldw	r6,-8(fp)
100139cc:	e17ffd17 	ldw	r5,-12(fp)
100139d0:	e13ffc17 	ldw	r4,-16(fp)
100139d4:	103ee83a 	callr	r2
100139d8:	00000106 	br	100139e0 <open+0x108>
100139dc:	0005883a 	mov	r2,zero
100139e0:	e0bffa15 	stw	r2,-24(fp)
100139e4:	00000206 	br	100139f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100139e8:	00bffb44 	movi	r2,-19
100139ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100139f0:	e0bffa17 	ldw	r2,-24(fp)
100139f4:	1000090e 	bge	r2,zero,10013a1c <open+0x144>
  {
    alt_release_fd (index);  
100139f8:	e13ff917 	ldw	r4,-28(fp)
100139fc:	001218c0 	call	1001218c <alt_release_fd>
    ALT_ERRNO = -status;
10013a00:	00137b00 	call	100137b0 <alt_get_errno>
10013a04:	1007883a 	mov	r3,r2
10013a08:	e0bffa17 	ldw	r2,-24(fp)
10013a0c:	0085c83a 	sub	r2,zero,r2
10013a10:	18800015 	stw	r2,0(r3)
    return -1;
10013a14:	00bfffc4 	movi	r2,-1
10013a18:	00000106 	br	10013a20 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10013a1c:	e0bff917 	ldw	r2,-28(fp)
}
10013a20:	e037883a 	mov	sp,fp
10013a24:	dfc00117 	ldw	ra,4(sp)
10013a28:	df000017 	ldw	fp,0(sp)
10013a2c:	dec00204 	addi	sp,sp,8
10013a30:	f800283a 	ret

10013a34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10013a34:	defffa04 	addi	sp,sp,-24
10013a38:	df000515 	stw	fp,20(sp)
10013a3c:	df000504 	addi	fp,sp,20
10013a40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10013a44:	0005303a 	rdctl	r2,status
10013a48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10013a4c:	e0fffc17 	ldw	r3,-16(fp)
10013a50:	00bfff84 	movi	r2,-2
10013a54:	1884703a 	and	r2,r3,r2
10013a58:	1001703a 	wrctl	status,r2
  
  return context;
10013a5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10013a60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10013a64:	e0bfff17 	ldw	r2,-4(fp)
10013a68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10013a6c:	e0bffd17 	ldw	r2,-12(fp)
10013a70:	10800017 	ldw	r2,0(r2)
10013a74:	e0fffd17 	ldw	r3,-12(fp)
10013a78:	18c00117 	ldw	r3,4(r3)
10013a7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10013a80:	e0bffd17 	ldw	r2,-12(fp)
10013a84:	10800117 	ldw	r2,4(r2)
10013a88:	e0fffd17 	ldw	r3,-12(fp)
10013a8c:	18c00017 	ldw	r3,0(r3)
10013a90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10013a94:	e0bffd17 	ldw	r2,-12(fp)
10013a98:	e0fffd17 	ldw	r3,-12(fp)
10013a9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10013aa0:	e0bffd17 	ldw	r2,-12(fp)
10013aa4:	e0fffd17 	ldw	r3,-12(fp)
10013aa8:	10c00015 	stw	r3,0(r2)
10013aac:	e0bffb17 	ldw	r2,-20(fp)
10013ab0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013ab4:	e0bffe17 	ldw	r2,-8(fp)
10013ab8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10013abc:	0001883a 	nop
10013ac0:	e037883a 	mov	sp,fp
10013ac4:	df000017 	ldw	fp,0(sp)
10013ac8:	dec00104 	addi	sp,sp,4
10013acc:	f800283a 	ret

10013ad0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10013ad0:	defffb04 	addi	sp,sp,-20
10013ad4:	dfc00415 	stw	ra,16(sp)
10013ad8:	df000315 	stw	fp,12(sp)
10013adc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10013ae0:	d0a01117 	ldw	r2,-32700(gp)
10013ae4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10013ae8:	d0aa9617 	ldw	r2,-21928(gp)
10013aec:	10800044 	addi	r2,r2,1
10013af0:	d0aa9615 	stw	r2,-21928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013af4:	00002e06 	br	10013bb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10013af8:	e0bffd17 	ldw	r2,-12(fp)
10013afc:	10800017 	ldw	r2,0(r2)
10013b00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10013b04:	e0bffd17 	ldw	r2,-12(fp)
10013b08:	10800403 	ldbu	r2,16(r2)
10013b0c:	10803fcc 	andi	r2,r2,255
10013b10:	10000426 	beq	r2,zero,10013b24 <alt_tick+0x54>
10013b14:	d0aa9617 	ldw	r2,-21928(gp)
10013b18:	1000021e 	bne	r2,zero,10013b24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10013b1c:	e0bffd17 	ldw	r2,-12(fp)
10013b20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10013b24:	e0bffd17 	ldw	r2,-12(fp)
10013b28:	10800217 	ldw	r2,8(r2)
10013b2c:	d0ea9617 	ldw	r3,-21928(gp)
10013b30:	18801d36 	bltu	r3,r2,10013ba8 <alt_tick+0xd8>
10013b34:	e0bffd17 	ldw	r2,-12(fp)
10013b38:	10800403 	ldbu	r2,16(r2)
10013b3c:	10803fcc 	andi	r2,r2,255
10013b40:	1000191e 	bne	r2,zero,10013ba8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10013b44:	e0bffd17 	ldw	r2,-12(fp)
10013b48:	10800317 	ldw	r2,12(r2)
10013b4c:	e0fffd17 	ldw	r3,-12(fp)
10013b50:	18c00517 	ldw	r3,20(r3)
10013b54:	1809883a 	mov	r4,r3
10013b58:	103ee83a 	callr	r2
10013b5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10013b60:	e0bfff17 	ldw	r2,-4(fp)
10013b64:	1000031e 	bne	r2,zero,10013b74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10013b68:	e13ffd17 	ldw	r4,-12(fp)
10013b6c:	0013a340 	call	10013a34 <alt_alarm_stop>
10013b70:	00000d06 	br	10013ba8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10013b74:	e0bffd17 	ldw	r2,-12(fp)
10013b78:	10c00217 	ldw	r3,8(r2)
10013b7c:	e0bfff17 	ldw	r2,-4(fp)
10013b80:	1887883a 	add	r3,r3,r2
10013b84:	e0bffd17 	ldw	r2,-12(fp)
10013b88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10013b8c:	e0bffd17 	ldw	r2,-12(fp)
10013b90:	10c00217 	ldw	r3,8(r2)
10013b94:	d0aa9617 	ldw	r2,-21928(gp)
10013b98:	1880032e 	bgeu	r3,r2,10013ba8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10013b9c:	e0bffd17 	ldw	r2,-12(fp)
10013ba0:	00c00044 	movi	r3,1
10013ba4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10013ba8:	e0bffe17 	ldw	r2,-8(fp)
10013bac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10013bb0:	e0fffd17 	ldw	r3,-12(fp)
10013bb4:	d0a01104 	addi	r2,gp,-32700
10013bb8:	18bfcf1e 	bne	r3,r2,10013af8 <__alt_data_end+0xf8013af8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10013bbc:	0001883a 	nop
}
10013bc0:	0001883a 	nop
10013bc4:	e037883a 	mov	sp,fp
10013bc8:	dfc00117 	ldw	ra,4(sp)
10013bcc:	df000017 	ldw	fp,0(sp)
10013bd0:	dec00204 	addi	sp,sp,8
10013bd4:	f800283a 	ret

10013bd8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10013bd8:	deffff04 	addi	sp,sp,-4
10013bdc:	df000015 	stw	fp,0(sp)
10013be0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10013be4:	000170fa 	wrctl	ienable,zero
}
10013be8:	0001883a 	nop
10013bec:	e037883a 	mov	sp,fp
10013bf0:	df000017 	ldw	fp,0(sp)
10013bf4:	dec00104 	addi	sp,sp,4
10013bf8:	f800283a 	ret

10013bfc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10013bfc:	defffa04 	addi	sp,sp,-24
10013c00:	dfc00515 	stw	ra,20(sp)
10013c04:	df000415 	stw	fp,16(sp)
10013c08:	df000404 	addi	fp,sp,16
10013c0c:	e13ffe15 	stw	r4,-8(fp)
10013c10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10013c14:	e0bfff17 	ldw	r2,-4(fp)
10013c18:	10800017 	ldw	r2,0(r2)
10013c1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10013c20:	e13ffe17 	ldw	r4,-8(fp)
10013c24:	0004c900 	call	10004c90 <strlen>
10013c28:	10800044 	addi	r2,r2,1
10013c2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013c30:	00000d06 	br	10013c68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10013c34:	e0bffc17 	ldw	r2,-16(fp)
10013c38:	10800217 	ldw	r2,8(r2)
10013c3c:	e0fffd17 	ldw	r3,-12(fp)
10013c40:	180d883a 	mov	r6,r3
10013c44:	e17ffe17 	ldw	r5,-8(fp)
10013c48:	1009883a 	mov	r4,r2
10013c4c:	0013f400 	call	10013f40 <memcmp>
10013c50:	1000021e 	bne	r2,zero,10013c5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10013c54:	e0bffc17 	ldw	r2,-16(fp)
10013c58:	00000706 	br	10013c78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10013c5c:	e0bffc17 	ldw	r2,-16(fp)
10013c60:	10800017 	ldw	r2,0(r2)
10013c64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10013c68:	e0fffc17 	ldw	r3,-16(fp)
10013c6c:	e0bfff17 	ldw	r2,-4(fp)
10013c70:	18bff01e 	bne	r3,r2,10013c34 <__alt_data_end+0xf8013c34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10013c74:	0005883a 	mov	r2,zero
}
10013c78:	e037883a 	mov	sp,fp
10013c7c:	dfc00117 	ldw	ra,4(sp)
10013c80:	df000017 	ldw	fp,0(sp)
10013c84:	dec00204 	addi	sp,sp,8
10013c88:	f800283a 	ret

10013c8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10013c8c:	defffb04 	addi	sp,sp,-20
10013c90:	dfc00415 	stw	ra,16(sp)
10013c94:	df000315 	stw	fp,12(sp)
10013c98:	df000304 	addi	fp,sp,12
10013c9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10013ca0:	d0a00917 	ldw	r2,-32732(gp)
10013ca4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013ca8:	00003106 	br	10013d70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10013cac:	e0bffd17 	ldw	r2,-12(fp)
10013cb0:	10800217 	ldw	r2,8(r2)
10013cb4:	1009883a 	mov	r4,r2
10013cb8:	0004c900 	call	10004c90 <strlen>
10013cbc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10013cc0:	e0bffd17 	ldw	r2,-12(fp)
10013cc4:	10c00217 	ldw	r3,8(r2)
10013cc8:	e0bffe17 	ldw	r2,-8(fp)
10013ccc:	10bfffc4 	addi	r2,r2,-1
10013cd0:	1885883a 	add	r2,r3,r2
10013cd4:	10800003 	ldbu	r2,0(r2)
10013cd8:	10803fcc 	andi	r2,r2,255
10013cdc:	1080201c 	xori	r2,r2,128
10013ce0:	10bfe004 	addi	r2,r2,-128
10013ce4:	10800bd8 	cmpnei	r2,r2,47
10013ce8:	1000031e 	bne	r2,zero,10013cf8 <alt_find_file+0x6c>
    {
      len -= 1;
10013cec:	e0bffe17 	ldw	r2,-8(fp)
10013cf0:	10bfffc4 	addi	r2,r2,-1
10013cf4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013cf8:	e0bffe17 	ldw	r2,-8(fp)
10013cfc:	e0ffff17 	ldw	r3,-4(fp)
10013d00:	1885883a 	add	r2,r3,r2
10013d04:	10800003 	ldbu	r2,0(r2)
10013d08:	10803fcc 	andi	r2,r2,255
10013d0c:	1080201c 	xori	r2,r2,128
10013d10:	10bfe004 	addi	r2,r2,-128
10013d14:	10800be0 	cmpeqi	r2,r2,47
10013d18:	1000081e 	bne	r2,zero,10013d3c <alt_find_file+0xb0>
10013d1c:	e0bffe17 	ldw	r2,-8(fp)
10013d20:	e0ffff17 	ldw	r3,-4(fp)
10013d24:	1885883a 	add	r2,r3,r2
10013d28:	10800003 	ldbu	r2,0(r2)
10013d2c:	10803fcc 	andi	r2,r2,255
10013d30:	1080201c 	xori	r2,r2,128
10013d34:	10bfe004 	addi	r2,r2,-128
10013d38:	10000a1e 	bne	r2,zero,10013d64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10013d3c:	e0bffd17 	ldw	r2,-12(fp)
10013d40:	10800217 	ldw	r2,8(r2)
10013d44:	e0fffe17 	ldw	r3,-8(fp)
10013d48:	180d883a 	mov	r6,r3
10013d4c:	e17fff17 	ldw	r5,-4(fp)
10013d50:	1009883a 	mov	r4,r2
10013d54:	0013f400 	call	10013f40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10013d58:	1000021e 	bne	r2,zero,10013d64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10013d5c:	e0bffd17 	ldw	r2,-12(fp)
10013d60:	00000706 	br	10013d80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10013d64:	e0bffd17 	ldw	r2,-12(fp)
10013d68:	10800017 	ldw	r2,0(r2)
10013d6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10013d70:	e0fffd17 	ldw	r3,-12(fp)
10013d74:	d0a00904 	addi	r2,gp,-32732
10013d78:	18bfcc1e 	bne	r3,r2,10013cac <__alt_data_end+0xf8013cac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10013d7c:	0005883a 	mov	r2,zero
}
10013d80:	e037883a 	mov	sp,fp
10013d84:	dfc00117 	ldw	ra,4(sp)
10013d88:	df000017 	ldw	fp,0(sp)
10013d8c:	dec00204 	addi	sp,sp,8
10013d90:	f800283a 	ret

10013d94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10013d94:	defffa04 	addi	sp,sp,-24
10013d98:	dfc00515 	stw	ra,20(sp)
10013d9c:	df000415 	stw	fp,16(sp)
10013da0:	dc000315 	stw	r16,12(sp)
10013da4:	df000404 	addi	fp,sp,16
10013da8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10013dac:	00bffa04 	movi	r2,-24
10013db0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013db4:	e03ffc15 	stw	zero,-16(fp)
10013db8:	00001d06 	br	10013e30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10013dbc:	04040074 	movhi	r16,4097
10013dc0:	84199e04 	addi	r16,r16,26232
10013dc4:	e0bffc17 	ldw	r2,-16(fp)
10013dc8:	01400304 	movi	r5,12
10013dcc:	1009883a 	mov	r4,r2
10013dd0:	0004b280 	call	10004b28 <__mulsi3>
10013dd4:	8085883a 	add	r2,r16,r2
10013dd8:	10800017 	ldw	r2,0(r2)
10013ddc:	1000111e 	bne	r2,zero,10013e24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10013de0:	04040074 	movhi	r16,4097
10013de4:	84199e04 	addi	r16,r16,26232
10013de8:	e0bffc17 	ldw	r2,-16(fp)
10013dec:	01400304 	movi	r5,12
10013df0:	1009883a 	mov	r4,r2
10013df4:	0004b280 	call	10004b28 <__mulsi3>
10013df8:	8085883a 	add	r2,r16,r2
10013dfc:	e0fffe17 	ldw	r3,-8(fp)
10013e00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10013e04:	d0e00d17 	ldw	r3,-32716(gp)
10013e08:	e0bffc17 	ldw	r2,-16(fp)
10013e0c:	1880020e 	bge	r3,r2,10013e18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10013e10:	e0bffc17 	ldw	r2,-16(fp)
10013e14:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
10013e18:	e0bffc17 	ldw	r2,-16(fp)
10013e1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10013e20:	00000606 	br	10013e3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10013e24:	e0bffc17 	ldw	r2,-16(fp)
10013e28:	10800044 	addi	r2,r2,1
10013e2c:	e0bffc15 	stw	r2,-16(fp)
10013e30:	e0bffc17 	ldw	r2,-16(fp)
10013e34:	10800810 	cmplti	r2,r2,32
10013e38:	103fe01e 	bne	r2,zero,10013dbc <__alt_data_end+0xf8013dbc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10013e3c:	e0bffd17 	ldw	r2,-12(fp)
}
10013e40:	e6ffff04 	addi	sp,fp,-4
10013e44:	dfc00217 	ldw	ra,8(sp)
10013e48:	df000117 	ldw	fp,4(sp)
10013e4c:	dc000017 	ldw	r16,0(sp)
10013e50:	dec00304 	addi	sp,sp,12
10013e54:	f800283a 	ret

10013e58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10013e58:	defffe04 	addi	sp,sp,-8
10013e5c:	df000115 	stw	fp,4(sp)
10013e60:	df000104 	addi	fp,sp,4
10013e64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10013e68:	e0bfff17 	ldw	r2,-4(fp)
10013e6c:	10bffe84 	addi	r2,r2,-6
10013e70:	10c00428 	cmpgeui	r3,r2,16
10013e74:	18001a1e 	bne	r3,zero,10013ee0 <alt_exception_cause_generated_bad_addr+0x88>
10013e78:	100690ba 	slli	r3,r2,2
10013e7c:	00840074 	movhi	r2,4097
10013e80:	108fa404 	addi	r2,r2,16016
10013e84:	1885883a 	add	r2,r3,r2
10013e88:	10800017 	ldw	r2,0(r2)
10013e8c:	1000683a 	jmp	r2
10013e90:	10013ed0 	cmplti	zero,r2,1275
10013e94:	10013ed0 	cmplti	zero,r2,1275
10013e98:	10013ee0 	cmpeqi	zero,r2,1275
10013e9c:	10013ee0 	cmpeqi	zero,r2,1275
10013ea0:	10013ee0 	cmpeqi	zero,r2,1275
10013ea4:	10013ed0 	cmplti	zero,r2,1275
10013ea8:	10013ed8 	cmpnei	zero,r2,1275
10013eac:	10013ee0 	cmpeqi	zero,r2,1275
10013eb0:	10013ed0 	cmplti	zero,r2,1275
10013eb4:	10013ed0 	cmplti	zero,r2,1275
10013eb8:	10013ee0 	cmpeqi	zero,r2,1275
10013ebc:	10013ed0 	cmplti	zero,r2,1275
10013ec0:	10013ed8 	cmpnei	zero,r2,1275
10013ec4:	10013ee0 	cmpeqi	zero,r2,1275
10013ec8:	10013ee0 	cmpeqi	zero,r2,1275
10013ecc:	10013ed0 	cmplti	zero,r2,1275
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10013ed0:	00800044 	movi	r2,1
10013ed4:	00000306 	br	10013ee4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10013ed8:	0005883a 	mov	r2,zero
10013edc:	00000106 	br	10013ee4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10013ee0:	0005883a 	mov	r2,zero
  }
}
10013ee4:	e037883a 	mov	sp,fp
10013ee8:	df000017 	ldw	fp,0(sp)
10013eec:	dec00104 	addi	sp,sp,4
10013ef0:	f800283a 	ret

10013ef4 <atexit>:
10013ef4:	200b883a 	mov	r5,r4
10013ef8:	000f883a 	mov	r7,zero
10013efc:	000d883a 	mov	r6,zero
10013f00:	0009883a 	mov	r4,zero
10013f04:	0013fbc1 	jmpi	10013fbc <__register_exitproc>

10013f08 <exit>:
10013f08:	defffe04 	addi	sp,sp,-8
10013f0c:	000b883a 	mov	r5,zero
10013f10:	dc000015 	stw	r16,0(sp)
10013f14:	dfc00115 	stw	ra,4(sp)
10013f18:	2021883a 	mov	r16,r4
10013f1c:	00140d40 	call	100140d4 <__call_exitprocs>
10013f20:	00840074 	movhi	r2,4097
10013f24:	109e1904 	addi	r2,r2,30820
10013f28:	11000017 	ldw	r4,0(r2)
10013f2c:	20800f17 	ldw	r2,60(r4)
10013f30:	10000126 	beq	r2,zero,10013f38 <exit+0x30>
10013f34:	103ee83a 	callr	r2
10013f38:	8009883a 	mov	r4,r16
10013f3c:	00142540 	call	10014254 <_exit>

10013f40 <memcmp>:
10013f40:	01c000c4 	movi	r7,3
10013f44:	3980192e 	bgeu	r7,r6,10013fac <memcmp+0x6c>
10013f48:	2144b03a 	or	r2,r4,r5
10013f4c:	11c4703a 	and	r2,r2,r7
10013f50:	10000f26 	beq	r2,zero,10013f90 <memcmp+0x50>
10013f54:	20800003 	ldbu	r2,0(r4)
10013f58:	28c00003 	ldbu	r3,0(r5)
10013f5c:	10c0151e 	bne	r2,r3,10013fb4 <memcmp+0x74>
10013f60:	31bfff84 	addi	r6,r6,-2
10013f64:	01ffffc4 	movi	r7,-1
10013f68:	00000406 	br	10013f7c <memcmp+0x3c>
10013f6c:	20800003 	ldbu	r2,0(r4)
10013f70:	28c00003 	ldbu	r3,0(r5)
10013f74:	31bfffc4 	addi	r6,r6,-1
10013f78:	10c00e1e 	bne	r2,r3,10013fb4 <memcmp+0x74>
10013f7c:	21000044 	addi	r4,r4,1
10013f80:	29400044 	addi	r5,r5,1
10013f84:	31fff91e 	bne	r6,r7,10013f6c <__alt_data_end+0xf8013f6c>
10013f88:	0005883a 	mov	r2,zero
10013f8c:	f800283a 	ret
10013f90:	20c00017 	ldw	r3,0(r4)
10013f94:	28800017 	ldw	r2,0(r5)
10013f98:	18bfee1e 	bne	r3,r2,10013f54 <__alt_data_end+0xf8013f54>
10013f9c:	31bfff04 	addi	r6,r6,-4
10013fa0:	21000104 	addi	r4,r4,4
10013fa4:	29400104 	addi	r5,r5,4
10013fa8:	39bff936 	bltu	r7,r6,10013f90 <__alt_data_end+0xf8013f90>
10013fac:	303fe91e 	bne	r6,zero,10013f54 <__alt_data_end+0xf8013f54>
10013fb0:	003ff506 	br	10013f88 <__alt_data_end+0xf8013f88>
10013fb4:	10c5c83a 	sub	r2,r2,r3
10013fb8:	f800283a 	ret

10013fbc <__register_exitproc>:
10013fbc:	defffa04 	addi	sp,sp,-24
10013fc0:	dc000315 	stw	r16,12(sp)
10013fc4:	04040074 	movhi	r16,4097
10013fc8:	841e1904 	addi	r16,r16,30820
10013fcc:	80c00017 	ldw	r3,0(r16)
10013fd0:	dc400415 	stw	r17,16(sp)
10013fd4:	dfc00515 	stw	ra,20(sp)
10013fd8:	18805217 	ldw	r2,328(r3)
10013fdc:	2023883a 	mov	r17,r4
10013fe0:	10003726 	beq	r2,zero,100140c0 <__register_exitproc+0x104>
10013fe4:	10c00117 	ldw	r3,4(r2)
10013fe8:	010007c4 	movi	r4,31
10013fec:	20c00e16 	blt	r4,r3,10014028 <__register_exitproc+0x6c>
10013ff0:	1a000044 	addi	r8,r3,1
10013ff4:	8800221e 	bne	r17,zero,10014080 <__register_exitproc+0xc4>
10013ff8:	18c00084 	addi	r3,r3,2
10013ffc:	18c7883a 	add	r3,r3,r3
10014000:	18c7883a 	add	r3,r3,r3
10014004:	12000115 	stw	r8,4(r2)
10014008:	10c7883a 	add	r3,r2,r3
1001400c:	19400015 	stw	r5,0(r3)
10014010:	0005883a 	mov	r2,zero
10014014:	dfc00517 	ldw	ra,20(sp)
10014018:	dc400417 	ldw	r17,16(sp)
1001401c:	dc000317 	ldw	r16,12(sp)
10014020:	dec00604 	addi	sp,sp,24
10014024:	f800283a 	ret
10014028:	00800034 	movhi	r2,0
1001402c:	10800004 	addi	r2,r2,0
10014030:	10002626 	beq	r2,zero,100140cc <__register_exitproc+0x110>
10014034:	01006404 	movi	r4,400
10014038:	d9400015 	stw	r5,0(sp)
1001403c:	d9800115 	stw	r6,4(sp)
10014040:	d9c00215 	stw	r7,8(sp)
10014044:	00000000 	call	10000000 <__alt_mem_sdram>
10014048:	d9400017 	ldw	r5,0(sp)
1001404c:	d9800117 	ldw	r6,4(sp)
10014050:	d9c00217 	ldw	r7,8(sp)
10014054:	10001d26 	beq	r2,zero,100140cc <__register_exitproc+0x110>
10014058:	81000017 	ldw	r4,0(r16)
1001405c:	10000115 	stw	zero,4(r2)
10014060:	02000044 	movi	r8,1
10014064:	22405217 	ldw	r9,328(r4)
10014068:	0007883a 	mov	r3,zero
1001406c:	12400015 	stw	r9,0(r2)
10014070:	20805215 	stw	r2,328(r4)
10014074:	10006215 	stw	zero,392(r2)
10014078:	10006315 	stw	zero,396(r2)
1001407c:	883fde26 	beq	r17,zero,10013ff8 <__alt_data_end+0xf8013ff8>
10014080:	18c9883a 	add	r4,r3,r3
10014084:	2109883a 	add	r4,r4,r4
10014088:	1109883a 	add	r4,r2,r4
1001408c:	21802215 	stw	r6,136(r4)
10014090:	01800044 	movi	r6,1
10014094:	12406217 	ldw	r9,392(r2)
10014098:	30cc983a 	sll	r6,r6,r3
1001409c:	4992b03a 	or	r9,r9,r6
100140a0:	12406215 	stw	r9,392(r2)
100140a4:	21c04215 	stw	r7,264(r4)
100140a8:	01000084 	movi	r4,2
100140ac:	893fd21e 	bne	r17,r4,10013ff8 <__alt_data_end+0xf8013ff8>
100140b0:	11006317 	ldw	r4,396(r2)
100140b4:	218cb03a 	or	r6,r4,r6
100140b8:	11806315 	stw	r6,396(r2)
100140bc:	003fce06 	br	10013ff8 <__alt_data_end+0xf8013ff8>
100140c0:	18805304 	addi	r2,r3,332
100140c4:	18805215 	stw	r2,328(r3)
100140c8:	003fc606 	br	10013fe4 <__alt_data_end+0xf8013fe4>
100140cc:	00bfffc4 	movi	r2,-1
100140d0:	003fd006 	br	10014014 <__alt_data_end+0xf8014014>

100140d4 <__call_exitprocs>:
100140d4:	defff504 	addi	sp,sp,-44
100140d8:	df000915 	stw	fp,36(sp)
100140dc:	dd400615 	stw	r21,24(sp)
100140e0:	dc800315 	stw	r18,12(sp)
100140e4:	dfc00a15 	stw	ra,40(sp)
100140e8:	ddc00815 	stw	r23,32(sp)
100140ec:	dd800715 	stw	r22,28(sp)
100140f0:	dd000515 	stw	r20,20(sp)
100140f4:	dcc00415 	stw	r19,16(sp)
100140f8:	dc400215 	stw	r17,8(sp)
100140fc:	dc000115 	stw	r16,4(sp)
10014100:	d9000015 	stw	r4,0(sp)
10014104:	2839883a 	mov	fp,r5
10014108:	04800044 	movi	r18,1
1001410c:	057fffc4 	movi	r21,-1
10014110:	00840074 	movhi	r2,4097
10014114:	109e1904 	addi	r2,r2,30820
10014118:	12000017 	ldw	r8,0(r2)
1001411c:	45005217 	ldw	r20,328(r8)
10014120:	44c05204 	addi	r19,r8,328
10014124:	a0001c26 	beq	r20,zero,10014198 <__call_exitprocs+0xc4>
10014128:	a0800117 	ldw	r2,4(r20)
1001412c:	15ffffc4 	addi	r23,r2,-1
10014130:	b8000d16 	blt	r23,zero,10014168 <__call_exitprocs+0x94>
10014134:	14000044 	addi	r16,r2,1
10014138:	8421883a 	add	r16,r16,r16
1001413c:	8421883a 	add	r16,r16,r16
10014140:	84402004 	addi	r17,r16,128
10014144:	a463883a 	add	r17,r20,r17
10014148:	a421883a 	add	r16,r20,r16
1001414c:	e0001e26 	beq	fp,zero,100141c8 <__call_exitprocs+0xf4>
10014150:	80804017 	ldw	r2,256(r16)
10014154:	e0801c26 	beq	fp,r2,100141c8 <__call_exitprocs+0xf4>
10014158:	bdffffc4 	addi	r23,r23,-1
1001415c:	843fff04 	addi	r16,r16,-4
10014160:	8c7fff04 	addi	r17,r17,-4
10014164:	bd7ff91e 	bne	r23,r21,1001414c <__alt_data_end+0xf801414c>
10014168:	00800034 	movhi	r2,0
1001416c:	10800004 	addi	r2,r2,0
10014170:	10000926 	beq	r2,zero,10014198 <__call_exitprocs+0xc4>
10014174:	a0800117 	ldw	r2,4(r20)
10014178:	1000301e 	bne	r2,zero,1001423c <__call_exitprocs+0x168>
1001417c:	a0800017 	ldw	r2,0(r20)
10014180:	10003226 	beq	r2,zero,1001424c <__call_exitprocs+0x178>
10014184:	a009883a 	mov	r4,r20
10014188:	98800015 	stw	r2,0(r19)
1001418c:	00000000 	call	10000000 <__alt_mem_sdram>
10014190:	9d000017 	ldw	r20,0(r19)
10014194:	a03fe41e 	bne	r20,zero,10014128 <__alt_data_end+0xf8014128>
10014198:	dfc00a17 	ldw	ra,40(sp)
1001419c:	df000917 	ldw	fp,36(sp)
100141a0:	ddc00817 	ldw	r23,32(sp)
100141a4:	dd800717 	ldw	r22,28(sp)
100141a8:	dd400617 	ldw	r21,24(sp)
100141ac:	dd000517 	ldw	r20,20(sp)
100141b0:	dcc00417 	ldw	r19,16(sp)
100141b4:	dc800317 	ldw	r18,12(sp)
100141b8:	dc400217 	ldw	r17,8(sp)
100141bc:	dc000117 	ldw	r16,4(sp)
100141c0:	dec00b04 	addi	sp,sp,44
100141c4:	f800283a 	ret
100141c8:	a0800117 	ldw	r2,4(r20)
100141cc:	80c00017 	ldw	r3,0(r16)
100141d0:	10bfffc4 	addi	r2,r2,-1
100141d4:	15c01426 	beq	r2,r23,10014228 <__call_exitprocs+0x154>
100141d8:	80000015 	stw	zero,0(r16)
100141dc:	183fde26 	beq	r3,zero,10014158 <__alt_data_end+0xf8014158>
100141e0:	95c8983a 	sll	r4,r18,r23
100141e4:	a0806217 	ldw	r2,392(r20)
100141e8:	a5800117 	ldw	r22,4(r20)
100141ec:	2084703a 	and	r2,r4,r2
100141f0:	10000b26 	beq	r2,zero,10014220 <__call_exitprocs+0x14c>
100141f4:	a0806317 	ldw	r2,396(r20)
100141f8:	2088703a 	and	r4,r4,r2
100141fc:	20000c1e 	bne	r4,zero,10014230 <__call_exitprocs+0x15c>
10014200:	89400017 	ldw	r5,0(r17)
10014204:	d9000017 	ldw	r4,0(sp)
10014208:	183ee83a 	callr	r3
1001420c:	a0800117 	ldw	r2,4(r20)
10014210:	15bfbf1e 	bne	r2,r22,10014110 <__alt_data_end+0xf8014110>
10014214:	98800017 	ldw	r2,0(r19)
10014218:	153fcf26 	beq	r2,r20,10014158 <__alt_data_end+0xf8014158>
1001421c:	003fbc06 	br	10014110 <__alt_data_end+0xf8014110>
10014220:	183ee83a 	callr	r3
10014224:	003ff906 	br	1001420c <__alt_data_end+0xf801420c>
10014228:	a5c00115 	stw	r23,4(r20)
1001422c:	003feb06 	br	100141dc <__alt_data_end+0xf80141dc>
10014230:	89000017 	ldw	r4,0(r17)
10014234:	183ee83a 	callr	r3
10014238:	003ff406 	br	1001420c <__alt_data_end+0xf801420c>
1001423c:	a0800017 	ldw	r2,0(r20)
10014240:	a027883a 	mov	r19,r20
10014244:	1029883a 	mov	r20,r2
10014248:	003fb606 	br	10014124 <__alt_data_end+0xf8014124>
1001424c:	0005883a 	mov	r2,zero
10014250:	003ffb06 	br	10014240 <__alt_data_end+0xf8014240>

10014254 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10014254:	defffd04 	addi	sp,sp,-12
10014258:	df000215 	stw	fp,8(sp)
1001425c:	df000204 	addi	fp,sp,8
10014260:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10014264:	0001883a 	nop
10014268:	e0bfff17 	ldw	r2,-4(fp)
1001426c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10014270:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10014274:	10000226 	beq	r2,zero,10014280 <_exit+0x2c>
    ALT_SIM_FAIL();
10014278:	002af070 	cmpltui	zero,zero,43969
1001427c:	00000106 	br	10014284 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10014280:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10014284:	003fff06 	br	10014284 <__alt_data_end+0xf8014284>
